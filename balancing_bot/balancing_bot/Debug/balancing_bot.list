
balancing_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022fc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  08023158  08023158  00024158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023f18  08023f18  00025808  2**0
                  CONTENTS
  4 .ARM          00000008  08023f18  08023f18  00024f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023f20  08023f20  00025808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08023f20  08023f20  00024f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023f28  08023f28  00024f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000808  20000000  08023f2c  00025000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce6c  20000808  08024734  00025808  2**3
                  ALLOC
 10 ._user_heap_stack 0000d004  2000d674  08024734  00026674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025808  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004124c  00000000  00000000  00025838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b602  00000000  00000000  00066a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fe8  00000000  00000000  00072088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002460  00000000  00000000  00075070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b66f  00000000  00000000  000774d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00054299  00000000  00000000  000b2b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001034bd  00000000  00000000  00106dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020a295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d778  00000000  00000000  0020a2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00217a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000808 	.word	0x20000808
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08023140 	.word	0x08023140

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000080c 	.word	0x2000080c
 80001cc:	08023140 	.word	0x08023140

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8000f86:	e00a      	b.n	8000f9e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60fa      	str	r2, [r7, #12]
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4053      	eors	r3, r2
 8000f94:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <get_CRC8_check_sum+0x40>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60ba      	str	r2, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ef      	bne.n	8000f88 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	08023300 	.word	0x08023300

08000fbc <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <verify_CRC8_check_sum+0x1a>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d801      	bhi.n	8000fda <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e013      	b.n	8001002 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	22ff      	movs	r2, #255	@ 0xff
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffc8 	bl	8000f78 <get_CRC8_check_sum>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <append_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
    unsigned char ucCRC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d012      	beq.n	8001044 <append_CRC8_check_sum+0x3a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d90f      	bls.n	8001044 <append_CRC8_check_sum+0x3a>
    {
        return;
    }
    ucCRC = get_CRC8_check_sum((unsigned char *)pch_message, dw_length - 1, CRC8_INIT);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	22ff      	movs	r2, #255	@ 0xff
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffa3 	bl	8000f78 <get_CRC8_check_sum>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e000      	b.n	8001046 <append_CRC8_check_sum+0x3c>
        return;
 8001044:	bf00      	nop
}
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d113      	bne.n	8001088 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 8001060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001064:	e016      	b.n	8001094 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60fa      	str	r2, [r7, #12]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29a      	uxth	r2, r3
 8001076:	88f9      	ldrh	r1, [r7, #6]
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	404b      	eors	r3, r1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <get_CRC16_check_sum+0x54>)
 8001080:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001084:	4053      	eors	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e9      	bne.n	8001066 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8001092:	88fb      	ldrh	r3, [r7, #6]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	08023400 	.word	0x08023400

080010a4 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <verify_CRC16_check_sum+0x1a>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d801      	bhi.n	80010c2 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e020      	b.n	8001104 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <verify_CRC16_check_sum+0x68>)
 80010c8:	8812      	ldrh	r2, [r2, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffbd 	bl	800104c <get_CRC16_check_sum>
 80010d2:	4603      	mov	r3, r0
 80010d4:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	3a02      	subs	r2, #2
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	440a      	add	r2, r1
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d10c      	bne.n	8001102 <verify_CRC16_check_sum+0x5e>
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	3a01      	subs	r2, #1
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	440a      	add	r2, r1
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <verify_CRC16_check_sum+0x5e>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <verify_CRC16_check_sum+0x60>
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000

08001110 <append_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC16_check_sum(uint8_t * pchMessage,uint32_t dwLength)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01d      	beq.n	8001160 <append_CRC16_check_sum+0x50>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d91a      	bls.n	8001160 <append_CRC16_check_sum+0x50>
    {
        return;
    }
    wCRC = get_CRC16_check_sum ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3b02      	subs	r3, #2
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <append_CRC16_check_sum+0x58>)
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff89 	bl	800104c <get_CRC16_check_sum>
 800113a:	4603      	mov	r3, r0
 800113c:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3b02      	subs	r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	89fa      	ldrh	r2, [r7, #14]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b299      	uxth	r1, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e000      	b.n	8001162 <append_CRC16_check_sum+0x52>
        return;
 8001160:	bf00      	nop
}
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000

0800116c <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <buzzer+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001184:	e00c      	b.n	80011a0 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	f24a 4210 	movw	r2, #42000	@ 0xa410
 800118c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <buzzer+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
		htim4.Instance->CCR3 = 500;
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <buzzer+0x40>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20001b40 	.word	0x20001b40

080011b0 <buzzer_init>:


void buzzer_init()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80011b4:	2108      	movs	r1, #8
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <buzzer_init+0x18>)
 80011b8:	f011 fd30 	bl	8012c1c <HAL_TIM_PWM_Start>
	  htim4.Instance->CCR3 = 0;
 80011bc:	4b02      	ldr	r3, [pc, #8]	@ (80011c8 <buzzer_init+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20001b40 	.word	0x20001b40

080011cc <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f004 fef3 	bl	8005fc0 <can_ISR>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f004 fee8 	bl	8005fc0 <can_ISR>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	2100      	movs	r1, #0
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f00c f801 	bl	800d212 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2101      	movs	r1, #1
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f00b fff0 	bl	800d212 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2228      	movs	r2, #40	@ 0x28
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f01b f95e 	bl	801c512 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	@ 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800125e:	2301      	movs	r3, #1
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	b29b      	uxth	r3, r3
 800126c:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b29b      	uxth	r3, r3
 8001278:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <can_start+0xa4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d111      	bne.n	80012a8 <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f00b fdbe 	bl	800ce14 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f00b fe9b 	bl	800cfd4 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800129e:	2102      	movs	r1, #2
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f00c f8c8 	bl	800d436 <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 80012a6:	e017      	b.n	80012d8 <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <can_start+0xa8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d112      	bne.n	80012d8 <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 80012b6:	230e      	movs	r3, #14
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
		can_filter_st.FilterBank = 14;
 80012ba:	230e      	movs	r3, #14
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f00b fda5 	bl	800ce14 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f00b fe82 	bl	800cfd4 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80012d0:	2110      	movs	r1, #16
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f00c f8af 	bl	800d436 <HAL_CAN_ActivateNotification>
}
 80012d8:	bf00      	nop
 80012da:	3738      	adds	r7, #56	@ 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40006400 	.word	0x40006400
 80012e4:	40006800 	.word	0x40006800

080012e8 <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t g_remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	g_remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80012f0:	4b79      	ldr	r3, [pc, #484]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800130a:	801a      	strh	r2, [r3, #0]
	g_remote_cmd.right_x -= JOYSTICK_OFFSET;
 800130c:	4b73      	ldr	r3, [pc, #460]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800131e:	801a      	strh	r2, [r3, #0]
	g_remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8001320:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b6b      	ldr	r3, [pc, #428]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800133e:	805a      	strh	r2, [r3, #2]
	g_remote_cmd.right_y -= JOYSTICK_OFFSET;
 8001340:	4b66      	ldr	r3, [pc, #408]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b62      	ldr	r3, [pc, #392]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001352:	805a      	strh	r2, [r3, #2]
	g_remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	b2db      	uxtb	r3, r3
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	b21a      	sxth	r2, r3
	g_remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 800137c:	4b57      	ldr	r3, [pc, #348]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800137e:	809a      	strh	r2, [r3, #4]
	g_remote_cmd.left_x -= JOYSTICK_OFFSET;
 8001380:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b52      	ldr	r3, [pc, #328]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001392:	809a      	strh	r2, [r3, #4]
	g_remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013b2:	80da      	strh	r2, [r3, #6]
	g_remote_cmd.left_y -= JOYSTICK_OFFSET;
 80013b4:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013c6:	80da      	strh	r2, [r3, #6]
	//Left switch position
	g_remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80013c8:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	109b      	asrs	r3, r3, #2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013dc:	721a      	strb	r2, [r3, #8]
	g_remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013f0:	725a      	strb	r2, [r3, #9]
	g_remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001406:	815a      	strh	r2, [r3, #10]
	g_remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 8001408:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001410:	7a5b      	ldrb	r3, [r3, #9]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800141c:	819a      	strh	r2, [r3, #12]
	g_remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001420:	7a9b      	ldrb	r3, [r3, #10]
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001426:	7adb      	ldrb	r3, [r3, #11]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001432:	81da      	strh	r2, [r3, #14]
	g_remote_cmd.mouse_hori += g_remote_cmd.mouse_x;
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800143a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800143e:	4413      	add	r3, r2
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001442:	6113      	str	r3, [r2, #16]
	g_remote_cmd.mouse_vert += g_remote_cmd.mouse_y;
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800144a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800144e:	4413      	add	r3, r2
 8001450:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001452:	6153      	str	r3, [r2, #20]
	g_remote_cmd.mouse_left = (remote_raw_data[12]);
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001456:	7b1b      	ldrb	r3, [r3, #12]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800145c:	761a      	strb	r2, [r3, #24]
	g_remote_cmd.mouse_right = (remote_raw_data[13]);
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001460:	7b5b      	ldrb	r3, [r3, #13]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001466:	765a      	strb	r2, [r3, #25]
	g_remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800146a:	7b9b      	ldrb	r3, [r3, #14]
 800146c:	461a      	mov	r2, r3
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001470:	835a      	strh	r2, [r3, #26]
	g_remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001474:	7c1b      	ldrb	r3, [r3, #16]
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800147a:	7c5b      	ldrb	r3, [r3, #17]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001486:	839a      	strh	r2, [r3, #28]
	g_remote_cmd.side_dial -= JOYSTICK_OFFSET;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800148a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800148e:	b29b      	uxth	r3, r3
 8001490:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001494:	b29b      	uxth	r3, r3
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800149a:	839a      	strh	r2, [r3, #28]
	g_remote_cmd.last_time = HAL_GetTick();
 800149c:	f00b f92c 	bl	800c6f8 <HAL_GetTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80014a4:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <dbus_remote_ISR+0x1f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f019 f901 	bl	801a6bc <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <dbus_remote_ISR+0x1e8>
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <dbus_remote_ISR+0x1fc>)
 80014c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	f3bf 8f6f 	isb	sy
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000824 	.word	0x20000824
 80014dc:	20000838 	.word	0x20000838
 80014e0:	20003b70 	.word	0x20003b70
 80014e4:	e000ed04 	.word	0xe000ed04

080014e8 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <dbus_remote_start+0x13c>)
 80014f0:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 80014f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001628 <dbus_remote_start+0x140>)
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	f040 808b 	bne.w	800161a <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <dbus_remote_start+0x26>
			return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e086      	b.n	800161c <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <dbus_remote_start+0x34>
 8001518:	2302      	movs	r3, #2
 800151a:	e07f      	b.n	800161c <dbus_remote_start+0x134>
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	2201      	movs	r2, #1
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
		huart->pRxBuffPtr = pData;
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8001530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001532:	2212      	movs	r2, #18
 8001534:	859a      	strh	r2, [r3, #44]	@ 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001538:	2200      	movs	r2, #0
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800153c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153e:	2222      	movs	r2, #34	@ 0x22
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001548:	4a38      	ldr	r2, [pc, #224]	@ (800162c <dbus_remote_start+0x144>)
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 800154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001550:	2200      	movs	r2, #0
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 800155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3304      	adds	r3, #4
 8001564:	4619      	mov	r1, r3
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2312      	movs	r3, #18
 800156c:	f00c fb98 	bl	800dca0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800159c:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015bc:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d125      	bne.n	8001612 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	330c      	adds	r3, #12
 80015e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	e853 3f00 	ldrex	r3, [r3]
 80015ea:	613b      	str	r3, [r7, #16]
   return(result);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	330c      	adds	r3, #12
 80015fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fc:	623a      	str	r2, [r7, #32]
 80015fe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001600:	69f9      	ldr	r1, [r7, #28]
 8001602:	6a3a      	ldr	r2, [r7, #32]
 8001604:	e841 2300 	strex	r3, r2, [r1]
 8001608:	61bb      	str	r3, [r7, #24]
   return(result);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <dbus_remote_start+0xf4>
 8001610:	e001      	b.n	8001616 <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <dbus_remote_start+0x134>
		}
		return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 800161a:	2302      	movs	r3, #2
	}
}
 800161c:	4618      	mov	r0, r3
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000824 	.word	0x20000824
 8001628:	20001c5c 	.word	0x20001c5c
 800162c:	080012e9 	.word	0x080012e9

08001630 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	4802      	ldr	r0, [pc, #8]	@ (8001644 <laser_on+0x14>)
 800163c:	f00d f82c 	bl	800e698 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020800 	.word	0x40020800

08001648 <laser_off>:

void laser_off()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001652:	4802      	ldr	r0, [pc, #8]	@ (800165c <laser_off+0x14>)
 8001654:	f00d f820 	bl	800e698 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020800 	.word	0x40020800

08001660 <hall_disable>:
void hall_enable(){
	hall_state = HALL_ON;
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void hall_disable(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	hall_state = HALL_OFF;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <hall_disable+0x14>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800166a:	2028      	movs	r0, #40	@ 0x28
 800166c:	f00c fa5c 	bl	800db28 <HAL_NVIC_DisableIRQ>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000003 	.word	0x20000003

08001678 <hall_int>:


void hall_int(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	static int32_t prev_tick;
	uint8_t curr_state = (GPIOE->IDR & GPIO_PIN_11) ? 1 : 0;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <hall_int+0x8c>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	71fb      	strb	r3, [r7, #7]
	if (curr_state & GPIO_PIN_11){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12e      	bne.n	80016fa <hall_int+0x82>
		//current state and previous state are the same, do nothing
		return;
	}
	if (hall_state == HALL_ON){
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <hall_int+0x90>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d127      	bne.n	80016f4 <hall_int+0x7c>
	//assume hall sensor has changed state
		switch (curr_state){
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <hall_int+0x46>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d11b      	bne.n	80016e6 <hall_int+0x6e>
		case HALL_OFF:
			//hall went from on to off
			//motor just brushed past
			prev_tick = g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <hall_int+0x94>)
 80016b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80016b8:	4a15      	ldr	r2, [pc, #84]	@ (8001710 <hall_int+0x98>)
 80016ba:	6013      	str	r3, [r2, #0]

			break;
 80016bc:	e016      	b.n	80016ec <hall_int+0x74>
		case HALL_ON:
			//hall went from off to on
			//yaw motor just let goo
			g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks = (g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks-prev_tick)/2 ;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <hall_int+0x94>)
 80016c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c4:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <hall_int+0x98>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	0fda      	lsrs	r2, r3, #31
 80016d0:	4413      	add	r3, r2
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <hall_int+0x94>)
 80016d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016dc:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
			//sensor is done, turn it off
			hall_disable();
 80016e0:	f7ff ffbe 	bl	8001660 <hall_disable>
			break;
 80016e4:	e002      	b.n	80016ec <hall_int+0x74>

		default:
			prev_state = 1;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <hall_int+0x9c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
		}
		prev_state = curr_state;
 80016ec:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <hall_int+0x9c>)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	7013      	strb	r3, [r2, #0]
		return;
 80016f2:	e003      	b.n	80016fc <hall_int+0x84>
	} else{
		hall_disable();
 80016f4:	f7ff ffb4 	bl	8001660 <hall_disable>
		return;
 80016f8:	e000      	b.n	80016fc <hall_int+0x84>
		return;
 80016fa:	bf00      	nop
	}
}
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	20000003 	.word	0x20000003
 800170c:	20002220 	.word	0x20002220
 8001710:	2000085c 	.word	0x2000085c
 8001714:	20000002 	.word	0x20000002

08001718 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800171c:	f3bf 8f4f 	dsb	sy
}
 8001720:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <__NVIC_SystemReset+0x24>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800172a:	4904      	ldr	r1, [pc, #16]	@ (800173c <__NVIC_SystemReset+0x24>)
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_SystemReset+0x28>)
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001732:	f3bf 8f4f 	dsb	sy
}
 8001736:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <__NVIC_SystemReset+0x20>
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	05fa0004 	.word	0x05fa0004

08001744 <gyro_write_byte>:
	y = y * (1.5f - (halfx * y * y));

	return y;
}

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af02      	add	r7, sp, #8
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <gyro_write_byte+0x5c>)
 800175a:	f00c ff9d 	bl	800e698 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001762:	f107 020e 	add.w	r2, r7, #14
 8001766:	f107 010f 	add.w	r1, r7, #15
 800176a:	2364      	movs	r3, #100	@ 0x64
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <gyro_write_byte+0x60>)
 8001772:	f010 fe19 	bl	80123a8 <HAL_SPI_TransmitReceive>
	tx = data;
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800177a:	f107 020e 	add.w	r2, r7, #14
 800177e:	f107 010f 	add.w	r1, r7, #15
 8001782:	2364      	movs	r3, #100	@ 0x64
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2301      	movs	r3, #1
 8001788:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <gyro_write_byte+0x60>)
 800178a:	f010 fe0d 	bl	80123a8 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 800178e:	2201      	movs	r2, #1
 8001790:	2101      	movs	r1, #1
 8001792:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <gyro_write_byte+0x5c>)
 8001794:	f00c ff80 	bl	800e698 <HAL_GPIO_WritePin>
	return;
 8001798:	bf00      	nop
}
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020400 	.word	0x40020400
 80017a4:	20001994 	.word	0x20001994

080017a8 <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 80017b2:	2200      	movs	r2, #0
 80017b4:	2101      	movs	r1, #1
 80017b6:	4811      	ldr	r0, [pc, #68]	@ (80017fc <gyro_read_byte+0x54>)
 80017b8:	f00c ff6e 	bl	800e698 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017c6:	f107 020f 	add.w	r2, r7, #15
 80017ca:	f107 010e 	add.w	r1, r7, #14
 80017ce:	2364      	movs	r3, #100	@ 0x64
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	480a      	ldr	r0, [pc, #40]	@ (8001800 <gyro_read_byte+0x58>)
 80017d6:	f010 fde7 	bl	80123a8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80017da:	f107 010f 	add.w	r1, r7, #15
 80017de:	2364      	movs	r3, #100	@ 0x64
 80017e0:	2201      	movs	r2, #1
 80017e2:	4807      	ldr	r0, [pc, #28]	@ (8001800 <gyro_read_byte+0x58>)
 80017e4:	f010 fccf 	bl	8012186 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <gyro_read_byte+0x54>)
 80017ee:	f00c ff53 	bl	800e698 <HAL_GPIO_WritePin>
	return rx;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40020400 	.word	0x40020400
 8001800:	20001994 	.word	0x20001994

08001804 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001814:	2200      	movs	r2, #0
 8001816:	2101      	movs	r1, #1
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <gyro_read_bytes+0x5c>)
 800181a:	f00c ff3d 	bl	800e698 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001828:	f107 020e 	add.w	r2, r7, #14
 800182c:	f107 010f 	add.w	r1, r7, #15
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	480b      	ldr	r0, [pc, #44]	@ (8001864 <gyro_read_bytes+0x60>)
 8001838:	f010 fdb6 	bl	80123a8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	4807      	ldr	r0, [pc, #28]	@ (8001864 <gyro_read_bytes+0x60>)
 8001846:	f010 fc9e 	bl	8012186 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800184a:	2201      	movs	r2, #1
 800184c:	2101      	movs	r1, #1
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <gyro_read_bytes+0x5c>)
 8001850:	f00c ff22 	bl	800e698 <HAL_GPIO_WritePin>
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020400 	.word	0x40020400
 8001864:	20001994 	.word	0x20001994

08001868 <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 8001878:	2200      	movs	r2, #0
 800187a:	2110      	movs	r1, #16
 800187c:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <accel_write_byte+0x5c>)
 800187e:	f00c ff0b 	bl	800e698 <HAL_GPIO_WritePin>
	tx = reg;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001886:	f107 020e 	add.w	r2, r7, #14
 800188a:	f107 010f 	add.w	r1, r7, #15
 800188e:	2364      	movs	r3, #100	@ 0x64
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <accel_write_byte+0x60>)
 8001896:	f010 fd87 	bl	80123a8 <HAL_SPI_TransmitReceive>
	tx = data;
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800189e:	f107 020e 	add.w	r2, r7, #14
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	@ 0x64
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <accel_write_byte+0x60>)
 80018ae:	f010 fd7b 	bl	80123a8 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 80018b2:	2201      	movs	r2, #1
 80018b4:	2110      	movs	r1, #16
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <accel_write_byte+0x5c>)
 80018b8:	f00c feee 	bl	800e698 <HAL_GPIO_WritePin>
	return;
 80018bc:	bf00      	nop
}
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020000 	.word	0x40020000
 80018c8:	20001994 	.word	0x20001994

080018cc <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80018d6:	2200      	movs	r2, #0
 80018d8:	2110      	movs	r1, #16
 80018da:	4816      	ldr	r0, [pc, #88]	@ (8001934 <accel_read_byte+0x68>)
 80018dc:	f00c fedc 	bl	800e698 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018ea:	f107 020e 	add.w	r2, r7, #14
 80018ee:	f107 010f 	add.w	r1, r7, #15
 80018f2:	2364      	movs	r3, #100	@ 0x64
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	480f      	ldr	r0, [pc, #60]	@ (8001938 <accel_read_byte+0x6c>)
 80018fa:	f010 fd55 	bl	80123a8 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 80018fe:	2355      	movs	r3, #85	@ 0x55
 8001900:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001902:	f107 010e 	add.w	r1, r7, #14
 8001906:	2364      	movs	r3, #100	@ 0x64
 8001908:	2201      	movs	r2, #1
 800190a:	480b      	ldr	r0, [pc, #44]	@ (8001938 <accel_read_byte+0x6c>)
 800190c:	f010 fc3b 	bl	8012186 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001910:	f107 010e 	add.w	r1, r7, #14
 8001914:	2364      	movs	r3, #100	@ 0x64
 8001916:	2201      	movs	r2, #1
 8001918:	4807      	ldr	r0, [pc, #28]	@ (8001938 <accel_read_byte+0x6c>)
 800191a:	f010 fc34 	bl	8012186 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 800191e:	2201      	movs	r2, #1
 8001920:	2110      	movs	r1, #16
 8001922:	4804      	ldr	r0, [pc, #16]	@ (8001934 <accel_read_byte+0x68>)
 8001924:	f00c feb8 	bl	800e698 <HAL_GPIO_WritePin>
	return rx;
 8001928:	7bbb      	ldrb	r3, [r7, #14]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020000 	.word	0x40020000
 8001938:	20001994 	.word	0x20001994

0800193c <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 800194c:	2200      	movs	r2, #0
 800194e:	2110      	movs	r1, #16
 8001950:	4814      	ldr	r0, [pc, #80]	@ (80019a4 <accel_read_bytes+0x68>)
 8001952:	f00c fea1 	bl	800e698 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001960:	f107 020e 	add.w	r2, r7, #14
 8001964:	f107 010f 	add.w	r1, r7, #15
 8001968:	2364      	movs	r3, #100	@ 0x64
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	480e      	ldr	r0, [pc, #56]	@ (80019a8 <accel_read_bytes+0x6c>)
 8001970:	f010 fd1a 	bl	80123a8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001974:	f107 010e 	add.w	r1, r7, #14
 8001978:	2364      	movs	r3, #100	@ 0x64
 800197a:	2201      	movs	r2, #1
 800197c:	480a      	ldr	r0, [pc, #40]	@ (80019a8 <accel_read_bytes+0x6c>)
 800197e:	f010 fc02 	bl	8012186 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	b29a      	uxth	r2, r3
 8001986:	2364      	movs	r3, #100	@ 0x64
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <accel_read_bytes+0x6c>)
 800198c:	f010 fbfb 	bl	8012186 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001990:	2201      	movs	r2, #1
 8001992:	2110      	movs	r1, #16
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <accel_read_bytes+0x68>)
 8001996:	f00c fe7f 	bl	800e698 <HAL_GPIO_WritePin>
	return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020000 	.word	0x40020000
 80019a8:	20001994 	.word	0x20001994

080019ac <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80019b2:	21b6      	movs	r1, #182	@ 0xb6
 80019b4:	2014      	movs	r0, #20
 80019b6:	f7ff fec5 	bl	8001744 <gyro_write_byte>
	HAL_Delay(10);
 80019ba:	200a      	movs	r0, #10
 80019bc:	f00a fea8 	bl	800c710 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2011      	movs	r0, #17
 80019c4:	f7ff febe 	bl	8001744 <gyro_write_byte>
	HAL_Delay(2);
 80019c8:	2002      	movs	r0, #2
 80019ca:	f00a fea1 	bl	800c710 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff feea 	bl	80017a8 <gyro_read_byte>
 80019d4:	4603      	mov	r3, r0
 80019d6:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 80019d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d001      	beq.n	80019e4 <gyro_init+0x38>
		NVIC_SystemReset();
 80019e0:	f7ff fe9a 	bl	8001718 <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f00a fe93 	bl	800c710 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 80019ea:	2102      	movs	r1, #2
 80019ec:	200f      	movs	r0, #15
 80019ee:	f7ff fea9 	bl	8001744 <gyro_write_byte>
	HAL_Delay(2);
 80019f2:	2002      	movs	r0, #2
 80019f4:	f00a fe8c 	bl	800c710 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 80019f8:	2181      	movs	r1, #129	@ 0x81
 80019fa:	2010      	movs	r0, #16
 80019fc:	f7ff fea2 	bl	8001744 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_2000_230_HZ));
	HAL_Delay(2);
 8001a00:	2002      	movs	r0, #2
 8001a02:	f00a fe85 	bl	800c710 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 8001a06:	2101      	movs	r1, #1
 8001a08:	2016      	movs	r0, #22
 8001a0a:	f7ff fe9b 	bl	8001744 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f00a fe7e 	bl	800c710 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001a14:	2101      	movs	r1, #1
 8001a16:	2018      	movs	r0, #24
 8001a18:	f7ff fe94 	bl	8001744 <gyro_write_byte>
	HAL_Delay(2);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f00a fe77 	bl	800c710 <HAL_Delay>

	return 0;
 8001a22:	2300      	movs	r3, #0
	//blah
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <accel_init>:

uint8_t accel_init() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff ff4a 	bl	80018cc <accel_read_byte>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f00a fe67 	bl	800c710 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff ff42 	bl	80018cc <accel_read_byte>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f00a fe5f 	bl	800c710 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001a52:	21b6      	movs	r1, #182	@ 0xb6
 8001a54:	207e      	movs	r0, #126	@ 0x7e
 8001a56:	f7ff ff07 	bl	8001868 <accel_write_byte>
	HAL_Delay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f00a fe58 	bl	800c710 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff ff33 	bl	80018cc <accel_read_byte>
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f00a fe50 	bl	800c710 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ff2b 	bl	80018cc <accel_read_byte>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f00a fe48 	bl	800c710 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b1e      	cmp	r3, #30
 8001a84:	d001      	beq.n	8001a8a <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e023      	b.n	8001ad2 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	207d      	movs	r0, #125	@ 0x7d
 8001a8e:	f7ff feeb 	bl	8001868 <accel_write_byte>
	HAL_Delay(2);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f00a fe3c 	bl	800c710 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	207c      	movs	r0, #124	@ 0x7c
 8001a9c:	f7ff fee4 	bl	8001868 <accel_write_byte>
	HAL_Delay(2);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f00a fe35 	bl	800c710 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001aa6:	21a9      	movs	r1, #169	@ 0xa9
 8001aa8:	2040      	movs	r0, #64	@ 0x40
 8001aaa:	f7ff fedd 	bl	8001868 <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_200_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f00a fe2e 	bl	800c710 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	2041      	movs	r0, #65	@ 0x41
 8001ab8:	f7ff fed6 	bl	8001868 <accel_write_byte>
	HAL_Delay(2);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f00a fe27 	bl	800c710 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	2053      	movs	r0, #83	@ 0x53
 8001ac6:	f7ff fecf 	bl	8001868 <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f00a fe20 	bl	800c710 <HAL_Delay>
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	2305      	movs	r3, #5
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	2301      	movs	r3, #1
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	f107 030f 	add.w	r3, r7, #15
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2301      	movs	r3, #1
 8001afe:	211c      	movs	r1, #28
 8001b00:	4803      	ldr	r0, [pc, #12]	@ (8001b10 <mag_read_single_reg+0x34>)
 8001b02:	f00d f839 	bl	800eb78 <HAL_I2C_Mem_Read>
	return data;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20001870 	.word	0x20001870

08001b14 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	2305      	movs	r3, #5
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	1dbb      	adds	r3, r7, #6
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	211c      	movs	r1, #28
 8001b38:	4803      	ldr	r0, [pc, #12]	@ (8001b48 <mag_write_single_reg+0x34>)
 8001b3a:	f00c ff23 	bl	800e984 <HAL_I2C_Mem_Write>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001870 	.word	0x20001870

08001b4c <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	4603      	mov	r3, r0
 8001b54:	603a      	str	r2, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	88bb      	ldrh	r3, [r7, #4]
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	211c      	movs	r1, #28
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <mag_read_multi_reg_dma+0x30>)
 8001b6e:	f00d fa29 	bl	800efc4 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20001870 	.word	0x20001870

08001b80 <imu_init>:
	imu_data.gy_offset = gyro_y_total / 50;
	imu_data.gz_offset = gyro_z_total / 50;

}

void imu_init() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001b84:	2200      	movs	r2, #0
 8001b86:	2110      	movs	r1, #16
 8001b88:	480e      	ldr	r0, [pc, #56]	@ (8001bc4 <imu_init+0x44>)
 8001b8a:	f00c fd85 	bl	800e698 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <imu_init+0x48>)
 8001b94:	f00c fd80 	bl	800e698 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b98:	2064      	movs	r0, #100	@ 0x64
 8001b9a:	f00a fdb9 	bl	800c710 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <imu_init+0x44>)
 8001ba4:	f00c fd78 	bl	800e698 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2101      	movs	r1, #1
 8001bac:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <imu_init+0x48>)
 8001bae:	f00c fd73 	bl	800e698 <HAL_GPIO_WritePin>
	gyro_init();
 8001bb2:	f7ff fefb 	bl	80019ac <gyro_init>
	accel_init();
 8001bb6:	f7ff ff39 	bl	8001a2c <accel_init>
	ist8310_init();
 8001bba:	f000 f905 	bl	8001dc8 <ist8310_init>
//	gyro_offset_cali();

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400

08001bcc <imu_start_ints>:

void imu_start_ints() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	2015      	movs	r0, #21
 8001bd4:	f7ff fdb6 	bl	8001744 <gyro_write_byte>
	vTaskDelay(10);
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f017 ff53 	bl	8019a84 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001bde:	2104      	movs	r1, #4
 8001be0:	2058      	movs	r0, #88	@ 0x58
 8001be2:	f7ff fe41 	bl	8001868 <accel_write_byte>
	vTaskDelay(10);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f017 ff4c 	bl	8019a84 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001bec:	2108      	movs	r1, #8
 8001bee:	200b      	movs	r0, #11
 8001bf0:	f7ff ff90 	bl	8001b14 <mag_write_single_reg>
	imu_init_status = 1;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	@ (8001c00 <imu_start_ints+0x34>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200008b0 	.word	0x200008b0

08001c04 <accel_get_data>:

void accel_get_data() {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001c08:	2206      	movs	r2, #6
 8001c0a:	4903      	ldr	r1, [pc, #12]	@ (8001c18 <accel_get_data+0x14>)
 8001c0c:	2012      	movs	r0, #18
 8001c0e:	f7ff fe95 	bl	800193c <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000860 	.word	0x20000860

08001c1c <accel_process_data>:

void accel_process_data() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001cc8 <accel_process_data+0xac>
 8001c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <accel_process_data+0xb0>)
 8001c4a:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c50:	78db      	ldrb	r3, [r3, #3]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c58:	789b      	ldrb	r3, [r3, #2]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001cc8 <accel_process_data+0xac>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <accel_process_data+0xb0>)
 8001c76:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c84:	791b      	ldrb	r3, [r3, #4]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001cc8 <accel_process_data+0xac>
 8001c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <accel_process_data+0xb0>)
 8001ca2:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001ca6:	f00a fd27 	bl	800c6f8 <HAL_GetTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <accel_process_data+0xb0>)
 8001cae:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <accel_process_data+0xb0>)
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	f006 fb57 	bl	8008368 <accel_data_ready>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000860 	.word	0x20000860
 8001cc8:	3aeb3333 	.word	0x3aeb3333
 8001ccc:	20000878 	.word	0x20000878

08001cd0 <gyro_get_data>:

void gyro_get_data() {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	4903      	ldr	r1, [pc, #12]	@ (8001ce4 <gyro_get_data+0x14>)
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7ff fd93 	bl	8001804 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000868 	.word	0x20000868

08001ce8 <gyro_process_data>:

void gyro_process_data() {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <gyro_process_data+0xd4>)
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <gyro_process_data+0xd4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d04:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001dc4 <gyro_process_data+0xdc>
 8001d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d24:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d2c:	78db      	ldrb	r3, [r3, #3]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d40:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d58:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001dc4 <gyro_process_data+0xdc>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d62:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d70:	791b      	ldrb	r3, [r3, #4]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d7c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d94:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001dc4 <gyro_process_data+0xdc>
 8001d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d9e:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001da2:	f00a fca9 	bl	800c6f8 <HAL_GetTick>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001daa:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db0:	f006 fa8a 	bl	80082c8 <gyro_data_ready>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000868 	.word	0x20000868
 8001dc0:	20000878 	.word	0x20000878
 8001dc4:	398ba058 	.word	0x398ba058

08001dc8 <ist8310_init>:

uint8_t ist8310_init() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2140      	movs	r1, #64	@ 0x40
 8001dd2:	481d      	ldr	r0, [pc, #116]	@ (8001e48 <ist8310_init+0x80>)
 8001dd4:	f00c fc60 	bl	800e698 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f00a fc99 	bl	800c710 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2140      	movs	r1, #64	@ 0x40
 8001de2:	4819      	ldr	r0, [pc, #100]	@ (8001e48 <ist8310_init+0x80>)
 8001de4:	f00c fc58 	bl	800e698 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001de8:	2002      	movs	r0, #2
 8001dea:	f00a fc91 	bl	800c710 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fe74 	bl	8001adc <mag_read_single_reg>
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d00a      	beq.n	8001e14 <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <ist8310_init+0x84>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <ist8310_init+0x84>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	845a      	strh	r2, [r3, #34]	@ 0x22
		imu_data.mag_data.mz = 0;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <ist8310_init+0x84>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	849a      	strh	r2, [r3, #36]	@ 0x24
		return 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e015      	b.n	8001e40 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001e14:	2002      	movs	r0, #2
 8001e16:	f00a fc7b 	bl	800c710 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001e1a:	2109      	movs	r1, #9
 8001e1c:	2041      	movs	r0, #65	@ 0x41
 8001e1e:	f7ff fe79 	bl	8001b14 <mag_write_single_reg>
	HAL_Delay(2);
 8001e22:	2002      	movs	r0, #2
 8001e24:	f00a fc74 	bl	800c710 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001e28:	21c0      	movs	r1, #192	@ 0xc0
 8001e2a:	2042      	movs	r0, #66	@ 0x42
 8001e2c:	f7ff fe72 	bl	8001b14 <mag_write_single_reg>
	HAL_Delay(2);
 8001e30:	2002      	movs	r0, #2
 8001e32:	f00a fc6d 	bl	800c710 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001e36:	210b      	movs	r1, #11
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f7ff fe6b 	bl	8001b14 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	20000878 	.word	0x20000878

08001e50 <ist8310_get_data>:

void ist8310_get_data() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001e54:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <ist8310_get_data+0x1c>)
 8001e56:	2105      	movs	r1, #5
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f7ff fe77 	bl	8001b4c <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001e5e:	f00a fc4b 	bl	800c6f8 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a02      	ldr	r2, [pc, #8]	@ (8001e70 <ist8310_get_data+0x20>)
 8001e66:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000870 	.word	0x20000870
 8001e70:	20000878 	.word	0x20000878

08001e74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x58>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d11e      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10d      	bne.n	8001eae <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d103      	bne.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x2c>

				gyro_get_data();
 8001e98:	f7ff ff1a 	bl	8001cd0 <gyro_get_data>
				gyro_process_data();
 8001e9c:	f7ff ff24 	bl	8001ce8 <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d103      	bne.n	8001eae <HAL_GPIO_EXTI_Callback+0x3a>

				accel_get_data();
 8001ea6:	f7ff fead 	bl	8001c04 <accel_get_data>
				accel_process_data();
 8001eaa:	f7ff feb7 	bl	8001c1c <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d107      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001ec0:	f7ff ffc6 	bl	8001e50 <ist8310_get_data>
			}
		}
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200008b0 	.word	0x200008b0
 8001ed0:	20001994 	.word	0x20001994
 8001ed4:	20001870 	.word	0x20001870

08001ed8 <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001efe:	789b      	ldrb	r3, [r3, #2]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f0a:	795b      	ldrb	r3, [r3, #5]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8001f1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f22:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 8001f24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f2a:	845a      	strh	r2, [r3, #34]	@ 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8001f2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f32:	849a      	strh	r2, [r3, #36]	@ 0x24
	mag_data_ready(imu_data.mag_data);
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f36:	3320      	adds	r3, #32
 8001f38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f3c:	f006 fa40 	bl	80083c0 <mag_data_ready>
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000870 	.word	0x20000870
 8001f4c:	20000878 	.word	0x20000878

08001f50 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <led_green_off+0x18>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20001b88 	.word	0x20001b88

08001f6c <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001f70:	2100      	movs	r1, #0
 8001f72:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <led_on+0x38>)
 8001f74:	f010 fe52 	bl	8012c1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001f78:	2104      	movs	r1, #4
 8001f7a:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <led_on+0x38>)
 8001f7c:	f010 fe4e 	bl	8012c1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001f80:	2108      	movs	r1, #8
 8001f82:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <led_on+0x38>)
 8001f84:	f010 fe4a 	bl	8012c1c <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <led_on+0x38>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	22ff      	movs	r2, #255	@ 0xff
 8001f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim5.Instance->CCR2 = 255;
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <led_on+0x38>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	22ff      	movs	r2, #255	@ 0xff
 8001f96:	639a      	str	r2, [r3, #56]	@ 0x38
	htim5.Instance->CCR1 = 255;
 8001f98:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <led_on+0x38>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	22ff      	movs	r2, #255	@ 0xff
 8001f9e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20001b88 	.word	0x20001b88

08001fa8 <led_toggle>:
void led_toggle(void){
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 8001fc8:	797b      	ldrb	r3, [r7, #5]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8090 	bne.w	80020f0 <status_led+0x138>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	f200 808a 	bhi.w	80020ee <status_led+0x136>
 8001fda:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe0 <status_led+0x28>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08002005 	.word	0x08002005
 8001fe4:	0800201f 	.word	0x0800201f
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	08002053 	.word	0x08002053
 8001ff0:	0800206d 	.word	0x0800206d
 8001ff4:	08002087 	.word	0x08002087
 8001ff8:	080020a1 	.word	0x080020a1
 8001ffc:	080020bb 	.word	0x080020bb
 8002000:	080020d5 	.word	0x080020d5
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 8002004:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <status_led+0x144>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ff      	movs	r2, #255	@ 0xff
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 800200c:	4b3b      	ldr	r3, [pc, #236]	@ (80020fc <status_led+0x144>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 8002014:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <status_led+0x144>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800201c:	e068      	b.n	80020f0 <status_led+0x138>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 800201e:	4b37      	ldr	r3, [pc, #220]	@ (80020fc <status_led+0x144>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 8002026:	4b35      	ldr	r3, [pc, #212]	@ (80020fc <status_led+0x144>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	22ff      	movs	r2, #255	@ 0xff
 800202c:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 800202e:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <status_led+0x144>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002036:	e05b      	b.n	80020f0 <status_led+0x138>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8002038:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <status_led+0x144>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <status_led+0x144>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <status_led+0x144>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	22ff      	movs	r2, #255	@ 0xff
 800204e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002050:	e04e      	b.n	80020f0 <status_led+0x138>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 8002052:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <status_led+0x144>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	22ff      	movs	r2, #255	@ 0xff
 8002058:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <status_led+0x144>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <status_led+0x144>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800206a:	e041      	b.n	80020f0 <status_led+0x138>
		case 5:
			htim5.Instance->CCR3 = 0;
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <status_led+0x144>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 8002074:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <status_led+0x144>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <status_led+0x144>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002084:	e034      	b.n	80020f0 <status_led+0x138>
		case 6:
			htim5.Instance->CCR3 = 0;
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <status_led+0x144>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 800208e:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <status_led+0x144>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <status_led+0x144>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800209e:	e027      	b.n	80020f0 <status_led+0x138>
		case 7:
			htim5.Instance->CCR3 = 0;
 80020a0:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <status_led+0x144>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <status_led+0x144>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <status_led+0x144>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020b8:	e01a      	b.n	80020f0 <status_led+0x138>
		case 8:
			htim5.Instance->CCR3 = 0;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <status_led+0x144>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <status_led+0x144>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <status_led+0x144>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020d2:	e00d      	b.n	80020f0 <status_led+0x138>
		case 9:
			htim5.Instance->CCR3 = 0;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <status_led+0x144>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <status_led+0x144>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <status_led+0x144>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020ec:	e000      	b.n	80020f0 <status_led+0x138>

		default:
			break;
 80020ee:	bf00      	nop
		}
	}

}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	20001b88 	.word	0x20001b88

08002100 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0201 	bic.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <micros_tick>:
#include "board_lib.h"
#include "robot_config.h"

static uint32_t gv_overflow_times = 0;

void micros_tick(){
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	gv_overflow_times ++;
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <micros_tick+0x18>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a03      	ldr	r2, [pc, #12]	@ (8002174 <micros_tick+0x18>)
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	200008b4 	.word	0x200008b4

08002178 <start_micros_timer>:

void start_micros_timer()
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	LL_TIM_SetPrescaler(TIM2, 83999999/TIMER_FREQ);
 800217c:	f240 3147 	movw	r1, #839	@ 0x347
 8002180:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002184:	f7ff ffdc 	bl	8002140 <LL_TIM_SetPrescaler>
	LL_TIM_DisableCounter(TIM2);
 8002188:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800218c:	f7ff ffc8 	bl	8002120 <LL_TIM_DisableCounter>
	TIM2->CNT =0;
 8002190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24
//	LL_TIM_DisableExternalClock(TIM2);
	LL_TIM_SetPrescaler(TIM2, 83999999/TIMER_FREQ);
 8002198:	f240 3147 	movw	r1, #839	@ 0x347
 800219c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021a0:	f7ff ffce 	bl	8002140 <LL_TIM_SetPrescaler>
//	LL_TIM_EnableUpdateEvent(TIM2);
//	LL_TIM_EnableIT_UPDATE(TIM2);
	TIM2->EGR |= TIM_EGR_UG_Msk;
 80021a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6153      	str	r3, [r2, #20]
	LL_TIM_EnableCounter(TIM2);
 80021b4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021b8:	f7ff ffa2 	bl	8002100 <LL_TIM_EnableCounter>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <get_microseconds>:
static uint32_t current_cnt;
//T_start = get_microseconds();
//diff = T_end - T_start;
//T_end = T_start;
uint32_t get_microseconds()
{
 80021c0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
	current_cnt = TIM2->CNT;
 80021c8:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80021cc:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80021ce:	4d15      	ldr	r5, [pc, #84]	@ (8002224 <get_microseconds+0x64>)
 80021d0:	602c      	str	r4, [r5, #0]
	uint64_t temp_cnt = TIM2->CNT;
 80021d2:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80021d6:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80021d8:	2500      	movs	r5, #0
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	e9c7 0100 	strd	r0, r1, [r7]
	temp_cnt = temp_cnt * (1000000 / TIMER_FREQ);
 80021e2:	e9d7 8900 	ldrd	r8, r9, [r7]
 80021e6:	4640      	mov	r0, r8
 80021e8:	4649      	mov	r1, r9
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	f04f 0500 	mov.w	r5, #0
 80021f2:	008d      	lsls	r5, r1, #2
 80021f4:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 80021f8:	0084      	lsls	r4, r0, #2
 80021fa:	4620      	mov	r0, r4
 80021fc:	4629      	mov	r1, r5
 80021fe:	eb10 0208 	adds.w	r2, r0, r8
 8002202:	eb41 0309 	adc.w	r3, r1, r9
 8002206:	eb12 0a02 	adds.w	sl, r2, r2
 800220a:	eb43 0b03 	adc.w	fp, r3, r3
 800220e:	4652      	mov	r2, sl
 8002210:	465b      	mov	r3, fp
 8002212:	e9c7 2300 	strd	r2, r3, [r7]
	return (uint32_t)temp_cnt;
 8002216:	683b      	ldr	r3, [r7, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002222:	4770      	bx	lr
 8002224:	200008b8 	.word	0x200008b8

08002228 <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 800223a:	2304      	movs	r3, #4
 800223c:	723b      	strb	r3, [r7, #8]
		return op_stat;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e00d      	b.n	8002260 <queue_init+0x38>
	}
	queue->curr_byte_pos = 0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	queue->last_byte_pos=0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	queue->last_time=0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	return op_stat;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60fb      	str	r3, [r7, #12]
}
 8002260:	2300      	movs	r3, #0
 8002262:	89ba      	ldrh	r2, [r7, #12]
 8002264:	f362 030f 	bfi	r3, r2, #0, #16
 8002268:	89fa      	ldrh	r2, [r7, #14]
 800226a:	f362 431f 	bfi	r3, r2, #16, #16
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
	uint16_t size = queue->last_byte_pos - queue->curr_byte_pos;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	81fb      	strh	r3, [r7, #14]
	size = (size > TQUEUE_SIZE) ? size + TQUEUE_SIZE : size;
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002298:	d904      	bls.n	80022a4 <queue_get_size+0x2a>
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	e000      	b.n	80022a6 <queue_get_size+0x2c>
 80022a4:	89fb      	ldrh	r3, [r7, #14]
 80022a6:	81fb      	strh	r3, [r7, #14]
	return size;
 80022a8:	89fb      	ldrh	r3, [r7, #14]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 80022c6:	f00a fa17 	bl	800c6f8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	queue->queue[queue->last_byte_pos] = data;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022d8:	4619      	mov	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80022ec:	d805      	bhi.n	80022fa <queue_append_byte+0x44>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022f4:	3301      	adds	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	e000      	b.n	80022fc <queue_append_byte+0x46>
 80022fa:	2200      	movs	r2, #0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	if (queue_get_size(queue) > TQUEUE_SIZE) {
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffb9 	bl	800227a <queue_get_size>
 8002308:	4603      	mov	r3, r0
 800230a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230e:	d913      	bls.n	8002338 <queue_append_byte+0x82>
		op_stat.op_status = Q_FULL;
 8002310:	2301      	movs	r3, #1
 8002312:	723b      	strb	r3, [r7, #8]
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800231a:	2bff      	cmp	r3, #255	@ 0xff
 800231c:	d005      	beq.n	800232a <queue_append_byte+0x74>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002324:	3301      	adds	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	e000      	b.n	800232c <queue_append_byte+0x76>
 800232a:	2200      	movs	r2, #0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		return op_stat;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e001      	b.n	800233c <queue_append_byte+0x86>
	}
	return op_stat;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60fb      	str	r3, [r7, #12]
}
 800233c:	2300      	movs	r3, #0
 800233e:	89ba      	ldrh	r2, [r7, #12]
 8002340:	f362 030f 	bfi	r3, r2, #0, #16
 8002344:	89fa      	ldrh	r2, [r7, #14]
 8002346:	f362 431f 	bfi	r3, r2, #16, #16
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <queue_pop_element>:
		len--;
	}
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	if (queue_get_size(queue) == 0){
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff8d 	bl	800227a <queue_get_size>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <queue_pop_element+0x18>
		return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e01c      	b.n	80023a4 <queue_pop_element+0x52>
	} else {
		queue->curr_byte_pos +=1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002370:	3301      	adds	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002380:	2bff      	cmp	r3, #255	@ 0xff
 8002382:	d803      	bhi.n	800238c <queue_pop_element+0x3a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 800238a:	e000      	b.n	800238e <queue_pop_element+0x3c>
 800238c:	2200      	movs	r2, #0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
				0:queue->curr_byte_pos;
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	73fb      	strb	r3, [r7, #15]
		return temp;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;
		uint16_t q_size = queue_get_size(queue);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff5d 	bl	800227a <queue_get_size>
 80023c0:	4603      	mov	r3, r0
 80023c2:	83fb      	strh	r3, [r7, #30]
		if (q_size < len){
 80023c4:	8bfa      	ldrh	r2, [r7, #30]
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d203      	bcs.n	80023d4 <queue_pop_elements+0x28>
			op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80023cc:	2303      	movs	r3, #3
 80023ce:	753b      	strb	r3, [r7, #20]
			len = q_size;
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	80fb      	strh	r3, [r7, #6]
		}

		uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023da:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80023de:	83bb      	strh	r3, [r7, #28]
		if (bytes_to_end >= len){
 80023e0:	8bba      	ldrh	r2, [r7, #28]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d30b      	bcc.n	8002400 <queue_pop_elements+0x54>
			memcpy(data, &queue->queue[queue->curr_byte_pos], len);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	4619      	mov	r1, r3
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f01a f933 	bl	801c664 <memcpy>
 80023fe:	e014      	b.n	800242a <queue_pop_elements+0x7e>
		} else {
			memcpy(data, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	8bba      	ldrh	r2, [r7, #28]
 800240e:	4619      	mov	r1, r3
 8002410:	68b8      	ldr	r0, [r7, #8]
 8002412:	f01a f927 	bl	801c664 <memcpy>
			memcpy((data+bytes_to_end), &queue->queue[0],(len-bytes_to_end));
 8002416:	8bbb      	ldrh	r3, [r7, #28]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	18d0      	adds	r0, r2, r3
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	8bbb      	ldrh	r3, [r7, #28]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	461a      	mov	r2, r3
 8002426:	f01a f91d 	bl	801c664 <memcpy>
		}

		queue->curr_byte_pos += len;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4413      	add	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002442:	2bff      	cmp	r3, #255	@ 0xff
 8002444:	d906      	bls.n	8002454 <queue_pop_elements+0xa8>
				queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800244c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002450:	b29b      	uxth	r3, r3
 8002452:	e002      	b.n	800245a <queue_pop_elements+0xae>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f8a2 3102 	strh.w	r3, [r2, #258]	@ 0x102

	return op_stat;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	2300      	movs	r3, #0
 8002466:	8b3a      	ldrh	r2, [r7, #24]
 8002468:	f362 030f 	bfi	r3, r2, #0, #16
 800246c:	8b7a      	ldrh	r2, [r7, #26]
 800246e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	if (queue_get_size(queue)>0){
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fef9 	bl	800227a <queue_get_size>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <queue_peek+0x22>
		return queue->queue[queue->curr_byte_pos];
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	e000      	b.n	800249e <queue_peek+0x24>
	}
	else{
		return 0;
 800249c:	2300      	movs	r3, #0
	}
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b088      	sub	sp, #32
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 80024b4:	f00a f920 	bl	800c6f8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	op_stat.op_status = Q_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	753b      	strb	r3, [r7, #20]
	uint16_t q_size = queue_get_size(queue);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fed8 	bl	800227a <queue_get_size>
 80024ca:	4603      	mov	r3, r0
 80024cc:	83fb      	strh	r3, [r7, #30]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80024d4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80024d8:	83bb      	strh	r3, [r7, #28]
	if (q_size < size){
 80024da:	8bfa      	ldrh	r2, [r7, #30]
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d203      	bcs.n	80024ea <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80024e2:	2303      	movs	r3, #3
 80024e4:	753b      	strb	r3, [r7, #20]
		size = q_size;
 80024e6:	8bfb      	ldrh	r3, [r7, #30]
 80024e8:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 80024ea:	8bba      	ldrh	r2, [r7, #28]
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d30b      	bcc.n	800250a <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80024f8:	461a      	mov	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	4619      	mov	r1, r3
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	f01a f8ae 	bl	801c664 <memcpy>
 8002508:	e014      	b.n	8002534 <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	8bba      	ldrh	r2, [r7, #28]
 8002518:	4619      	mov	r1, r3
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f01a f8a2 	bl	801c664 <memcpy>
		memcpy((buffer+bytes_to_end), &queue->queue[0],(size-bytes_to_end));
 8002520:	8bbb      	ldrh	r3, [r7, #28]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	18d0      	adds	r0, r2, r3
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	8bbb      	ldrh	r3, [r7, #28]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	461a      	mov	r2, r3
 8002530:	f01a f898 	bl	801c664 <memcpy>
	}
	op_stat.bytes_appended = size;
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	2300      	movs	r3, #0
 800253e:	8b3a      	ldrh	r2, [r7, #24]
 8002540:	f362 030f 	bfi	r3, r2, #0, #16
 8002544:	8b7a      	ldrh	r2, [r7, #26]
 8002546:	f362 431f 	bfi	r3, r2, #16, #16
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b097      	sub	sp, #92	@ 0x5c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6578      	str	r0, [r7, #84]	@ 0x54
 800255c:	6539      	str	r1, [r7, #80]	@ 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 800255e:	e066      	b.n	800262e <ref_process_data+0xda>
		switch(state){
 8002560:	4b38      	ldr	r3, [pc, #224]	@ (8002644 <ref_process_data+0xf0>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <ref_process_data+0x1a>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d036      	beq.n	80025da <ref_process_data+0x86>
 800256c:	e05f      	b.n	800262e <ref_process_data+0xda>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 800256e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002570:	f7ff fe83 	bl	800227a <queue_get_size>
 8002574:	4603      	mov	r3, r0
 8002576:	2b06      	cmp	r3, #6
 8002578:	d801      	bhi.n	800257e <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 800257a:	2302      	movs	r3, #2
 800257c:	e05e      	b.n	800263c <ref_process_data+0xe8>
				}
				if (queue_peek(uart_queue) != 0xA5){
 800257e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002580:	f7ff ff7b 	bl	800247a <queue_peek>
 8002584:	4603      	mov	r3, r0
 8002586:	2ba5      	cmp	r3, #165	@ 0xa5
 8002588:	d003      	beq.n	8002592 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800258a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800258c:	f7ff fee1 	bl	8002352 <queue_pop_element>
						state = DATA;
					} else {
						return INSUFFICIENT_DATA;
					}
				}
				break;
 8002590:	e04d      	b.n	800262e <ref_process_data+0xda>
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002592:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002594:	f7ff fe71 	bl	800227a <queue_get_size>
 8002598:	4603      	mov	r3, r0
 800259a:	2b07      	cmp	r3, #7
 800259c:	d91b      	bls.n	80025d6 <ref_process_data+0x82>
						header = ref_get_header(uart_queue);
 800259e:	4c2a      	ldr	r4, [pc, #168]	@ (8002648 <ref_process_data+0xf4>)
 80025a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f850 	bl	800264c <ref_get_header>
 80025ac:	4622      	mov	r2, r4
 80025ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	6010      	str	r0, [r2, #0]
 80025b6:	8899      	ldrh	r1, [r3, #4]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	8091      	strh	r1, [r2, #4]
 80025bc:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 80025be:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <ref_process_data+0xf4>)
 80025c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02c      	beq.n	8002628 <ref_process_data+0xd4>
						state = DATA;
 80025ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <ref_process_data+0xf0>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
				break;
 80025d4:	e02b      	b.n	800262e <ref_process_data+0xda>
						return INSUFFICIENT_DATA;
 80025d6:	2302      	movs	r3, #2
 80025d8:	e030      	b.n	800263c <ref_process_data+0xe8>
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 80025da:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025dc:	f7ff fe4d 	bl	800227a <queue_get_size>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <ref_process_data+0xf4>)
 80025e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3309      	adds	r3, #9
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dd18      	ble.n	8002624 <ref_process_data+0xd0>
					state = HEADER;
 80025f2:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <ref_process_data+0xf0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 80025f8:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 80025fa:	4638      	mov	r0, r7
 80025fc:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <ref_process_data+0xf4>)
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	ca06      	ldmia	r2, {r1, r2}
 8002602:	f000 f89b 	bl	800273c <ref_get_msg>
 8002606:	4620      	mov	r0, r4
 8002608:	463b      	mov	r3, r7
 800260a:	2242      	movs	r2, #66	@ 0x42
 800260c:	4619      	mov	r1, r3
 800260e:	f01a f829 	bl	801c664 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800261c:	4293      	cmp	r3, r2
 800261e:	d005      	beq.n	800262c <ref_process_data+0xd8>
						return PROCESS_SUCCESS;
 8002620:	2300      	movs	r3, #0
 8002622:	e00b      	b.n	800263c <ref_process_data+0xe8>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 8002624:	2302      	movs	r3, #2
 8002626:	e009      	b.n	800263c <ref_process_data+0xe8>
							break;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <ref_process_data+0xda>
						break;
 800262c:	bf00      	nop
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 800262e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002630:	f7ff fe23 	bl	800227a <queue_get_size>
 8002634:	4603      	mov	r3, r0
 8002636:	2b07      	cmp	r3, #7
 8002638:	d892      	bhi.n	8002560 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 800263a:	2302      	movs	r3, #2
}
 800263c:	4618      	mov	r0, r3
 800263e:	375c      	adds	r7, #92	@ 0x5c
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	200008bc 	.word	0x200008bc
 8002648:	200008c0 	.word	0x200008c0

0800264c <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2207      	movs	r2, #7
 800265c:	4619      	mov	r1, r3
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f7ff ff21 	bl	80024a6 <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 8002664:	7b3b      	ldrb	r3, [r7, #12]
 8002666:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 8002668:	7d3b      	ldrb	r3, [r7, #20]
 800266a:	2ba5      	cmp	r3, #165	@ 0xa5
 800266c:	d013      	beq.n	8002696 <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 800266e:	6838      	ldr	r0, [r7, #0]
 8002670:	f7ff fe6f 	bl	8002352 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	767b      	strb	r3, [r7, #25]
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	6010      	str	r0, [r2, #0]
 800268c:	8899      	ldrh	r1, [r3, #4]
 800268e:	799b      	ldrb	r3, [r3, #6]
 8002690:	8091      	strh	r1, [r2, #4]
 8002692:	7193      	strb	r3, [r2, #6]
 8002694:	e04d      	b.n	8002732 <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21a      	sxth	r2, r3
 800269c:	7b7b      	ldrb	r3, [r7, #13]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 80026ae:	7c3b      	ldrb	r3, [r7, #16]
 80026b0:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2105      	movs	r1, #5
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fc7f 	bl	8000fbc <verify_CRC8_check_sum>
 80026be:	4603      	mov	r3, r0
 80026c0:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 80026c2:	7cbb      	ldrb	r3, [r7, #18]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <ref_get_header+0xaa>
 80026dc:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	d806      	bhi.n	80026f6 <ref_get_header+0xaa>
 80026e8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f240 3205 	movw	r2, #773	@ 0x305
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d913      	bls.n	800271e <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	767b      	strb	r3, [r7, #25]
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f7ff fe25 	bl	8002352 <queue_pop_element>
		return ret_header;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	461a      	mov	r2, r3
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	6010      	str	r0, [r2, #0]
 8002714:	8899      	ldrh	r1, [r3, #4]
 8002716:	799b      	ldrb	r3, [r3, #6]
 8002718:	8091      	strh	r1, [r2, #4]
 800271a:	7193      	strb	r3, [r2, #6]
 800271c:	e009      	b.n	8002732 <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	461a      	mov	r2, r3
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	6010      	str	r0, [r2, #0]
 800272a:	8899      	ldrh	r1, [r3, #4]
 800272c:	799b      	ldrb	r3, [r3, #6]
 800272e:	8091      	strh	r1, [r2, #4]
 8002730:	7193      	strb	r3, [r2, #6]
}
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b0d8      	sub	sp, #352	@ 0x160
 8002740:	af00      	add	r7, sp, #0
 8002742:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 8002746:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002750:	f5a0 70ae 	sub.w	r0, r0, #348	@ 0x15c
 8002754:	e880 0006 	stmia.w	r0, {r1, r2}
 8002758:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800275c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002760:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002762:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002766:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800276a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800276e:	b29b      	uxth	r3, r3
 8002770:	3309      	adds	r3, #9
 8002772:	b29a      	uxth	r2, r3
 8002774:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002778:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800277c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	f7ff fe13 	bl	80023ac <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002786:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800278a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800278e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002792:	b29b      	uxth	r3, r3
 8002794:	3309      	adds	r3, #9
 8002796:	461a      	mov	r2, r3
 8002798:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fc80 	bl	80010a4 <verify_CRC16_check_sum>
 80027a4:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
	if (!crc_test){
 80027a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 80027b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027bc:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 80027be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	2342      	movs	r3, #66	@ 0x42
 80027d6:	461a      	mov	r2, r3
 80027d8:	f019 ff44 	bl	801c664 <memcpy>
 80027dc:	e1a1      	b.n	8002b22 <ref_get_msg+0x3e6>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 80027de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027e2:	3307      	adds	r3, #7
 80027e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	buffer_msg.cmd_id = header.cmd_id;
 80027e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027ec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80027f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027fe:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 8002800:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002804:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002808:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f240 3202 	movw	r2, #770	@ 0x302
 8002812:	4293      	cmp	r3, r2
 8002814:	f000 815e 	beq.w	8002ad4 <ref_get_msg+0x398>
 8002818:	f240 3202 	movw	r2, #770	@ 0x302
 800281c:	4293      	cmp	r3, r2
 800281e:	f300 8169 	bgt.w	8002af4 <ref_get_msg+0x3b8>
 8002822:	f240 3201 	movw	r2, #769	@ 0x301
 8002826:	4293      	cmp	r3, r2
 8002828:	f000 8148 	beq.w	8002abc <ref_get_msg+0x380>
 800282c:	f240 3201 	movw	r2, #769	@ 0x301
 8002830:	4293      	cmp	r3, r2
 8002832:	f300 815f 	bgt.w	8002af4 <ref_get_msg+0x3b8>
 8002836:	f240 220a 	movw	r2, #522	@ 0x20a
 800283a:	4293      	cmp	r3, r2
 800283c:	f300 815a 	bgt.w	8002af4 <ref_get_msg+0x3b8>
 8002840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002844:	dc04      	bgt.n	8002850 <ref_get_msg+0x114>
 8002846:	2b04      	cmp	r3, #4
 8002848:	dc40      	bgt.n	80028cc <ref_get_msg+0x190>
 800284a:	2b00      	cmp	r3, #0
 800284c:	dc2e      	bgt.n	80028ac <ref_get_msg+0x170>
 800284e:	e151      	b.n	8002af4 <ref_get_msg+0x3b8>
 8002850:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002854:	2b09      	cmp	r3, #9
 8002856:	f200 814d 	bhi.w	8002af4 <ref_get_msg+0x3b8>
 800285a:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <ref_get_msg+0x124>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	080029b5 	.word	0x080029b5
 8002864:	080029e5 	.word	0x080029e5
 8002868:	08002a05 	.word	0x08002a05
 800286c:	08002a21 	.word	0x08002a21
 8002870:	08002a39 	.word	0x08002a39
 8002874:	08002a4d 	.word	0x08002a4d
 8002878:	08002a5f 	.word	0x08002a5f
 800287c:	08002a7b 	.word	0x08002a7b
 8002880:	08002a93 	.word	0x08002a93
 8002884:	08002aa9 	.word	0x08002aa9
 8002888:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800288c:	2b04      	cmp	r3, #4
 800288e:	f200 8131 	bhi.w	8002af4 <ref_get_msg+0x3b8>
 8002892:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <ref_get_msg+0x15c>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	0800294b 	.word	0x0800294b
 800289c:	08002961 	.word	0x08002961
 80028a0:	08002977 	.word	0x08002977
 80028a4:	0800298f 	.word	0x0800298f
 80028a8:	080029a3 	.word	0x080029a3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	f200 8120 	bhi.w	8002af4 <ref_get_msg+0x3b8>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <ref_get_msg+0x180>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028dd 	.word	0x080028dd
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	08002907 	.word	0x08002907
 80028c8:	08002933 	.word	0x08002933
 80028cc:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80028d0:	f280 8110 	bge.w	8002af4 <ref_get_msg+0x3b8>
 80028d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d8:	dcd6      	bgt.n	8002888 <ref_get_msg+0x14c>
 80028da:	e10b      	b.n	8002af4 <ref_get_msg+0x3b8>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 80028dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028e4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80028e8:	3302      	adds	r3, #2
 80028ea:	8811      	ldrh	r1, [r2, #0]
 80028ec:	7892      	ldrb	r2, [r2, #2]
 80028ee:	8019      	strh	r1, [r3, #0]
 80028f0:	709a      	strb	r2, [r3, #2]
		break;
 80028f2:	e107      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 80028f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002902:	709a      	strb	r2, [r3, #2]
		break;
 8002904:	e0fe      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 8002906:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800290a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800290e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002912:	3302      	adds	r3, #2
 8002914:	6814      	ldr	r4, [r2, #0]
 8002916:	6850      	ldr	r0, [r2, #4]
 8002918:	6891      	ldr	r1, [r2, #8]
 800291a:	68d5      	ldr	r5, [r2, #12]
 800291c:	601c      	str	r4, [r3, #0]
 800291e:	6058      	str	r0, [r3, #4]
 8002920:	6099      	str	r1, [r3, #8]
 8002922:	60dd      	str	r5, [r3, #12]
 8002924:	6914      	ldr	r4, [r2, #16]
 8002926:	6950      	ldr	r0, [r2, #20]
 8002928:	6991      	ldr	r1, [r2, #24]
 800292a:	611c      	str	r4, [r3, #16]
 800292c:	6158      	str	r0, [r3, #20]
 800292e:	6199      	str	r1, [r3, #24]
		break;
 8002930:	e0e8      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 8002932:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002936:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800293a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800293e:	3302      	adds	r3, #2
 8002940:	8811      	ldrh	r1, [r2, #0]
 8002942:	7892      	ldrb	r2, [r2, #2]
 8002944:	8019      	strh	r1, [r3, #0]
 8002946:	709a      	strb	r2, [r3, #2]
		break;
 8002948:	e0dc      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 800294a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002956:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800295a:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 800295e:	e0d1      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 8002960:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800296c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002970:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002974:	e0c6      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 8002976:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800297a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800297e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002982:	3302      	adds	r3, #2
 8002984:	8811      	ldrh	r1, [r2, #0]
 8002986:	7892      	ldrb	r2, [r2, #2]
 8002988:	8019      	strh	r1, [r3, #0]
 800298a:	709a      	strb	r2, [r3, #2]
		break;
 800298c:	e0ba      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 800298e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800299a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800299e:	805a      	strh	r2, [r3, #2]
		break;
 80029a0:	e0b0      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 80029a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029b0:	709a      	strb	r2, [r3, #2]
		break;
 80029b2:	e0a7      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 80029b4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029bc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80029c0:	3302      	adds	r3, #2
 80029c2:	6810      	ldr	r0, [r2, #0]
 80029c4:	6851      	ldr	r1, [r2, #4]
 80029c6:	6895      	ldr	r5, [r2, #8]
 80029c8:	68d4      	ldr	r4, [r2, #12]
 80029ca:	6018      	str	r0, [r3, #0]
 80029cc:	6059      	str	r1, [r3, #4]
 80029ce:	609d      	str	r5, [r3, #8]
 80029d0:	60dc      	str	r4, [r3, #12]
 80029d2:	6910      	ldr	r0, [r2, #16]
 80029d4:	6951      	ldr	r1, [r2, #20]
 80029d6:	6118      	str	r0, [r3, #16]
 80029d8:	6159      	str	r1, [r3, #20]
 80029da:	8b11      	ldrh	r1, [r2, #24]
 80029dc:	7e92      	ldrb	r2, [r2, #26]
 80029de:	8319      	strh	r1, [r3, #24]
 80029e0:	769a      	strb	r2, [r3, #26]
		break;
 80029e2:	e08f      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 80029e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029ec:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80029f0:	3302      	adds	r3, #2
 80029f2:	6814      	ldr	r4, [r2, #0]
 80029f4:	6850      	ldr	r0, [r2, #4]
 80029f6:	6891      	ldr	r1, [r2, #8]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	601c      	str	r4, [r3, #0]
 80029fc:	6058      	str	r0, [r3, #4]
 80029fe:	6099      	str	r1, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
		break;
 8002a02:	e07f      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 8002a04:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a0c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a10:	3302      	adds	r3, #2
 8002a12:	6810      	ldr	r0, [r2, #0]
 8002a14:	6851      	ldr	r1, [r2, #4]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	6018      	str	r0, [r3, #0]
 8002a1a:	6059      	str	r1, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
		break;
 8002a1e:	e071      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 8002a20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a28:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	6811      	ldr	r1, [r2, #0]
 8002a30:	6019      	str	r1, [r3, #0]
 8002a32:	8892      	ldrh	r2, [r2, #4]
 8002a34:	809a      	strh	r2, [r3, #4]
		break;
 8002a36:	e065      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 8002a38:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a44:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a48:	805a      	strh	r2, [r3, #2]
		break;
 8002a4a:	e05b      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 8002a4c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a5a:	709a      	strb	r2, [r3, #2]
		break;
 8002a5c:	e052      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 8002a5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a66:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	6811      	ldr	r1, [r2, #0]
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	8891      	ldrh	r1, [r2, #4]
 8002a72:	7992      	ldrb	r2, [r2, #6]
 8002a74:	8099      	strh	r1, [r3, #4]
 8002a76:	719a      	strb	r2, [r3, #6]
		break;
 8002a78:	e044      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002a7a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a7e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a82:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a86:	3302      	adds	r3, #2
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	6019      	str	r1, [r3, #0]
 8002a8c:	8892      	ldrh	r2, [r2, #4]
 8002a8e:	809a      	strh	r2, [r3, #4]
		break;
 8002a90:	e038      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002a92:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002aa2:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002aa6:	e02d      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	3302      	adds	r3, #2
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f019 fdd5 	bl	801c664 <memcpy>
		break;
 8002aba:	e023      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 8002abc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002ac0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ac4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002ac8:	3302      	adds	r3, #2
 8002aca:	6811      	ldr	r1, [r2, #0]
 8002acc:	6019      	str	r1, [r3, #0]
 8002ace:	8892      	ldrh	r2, [r2, #4]
 8002ad0:	809a      	strh	r2, [r3, #4]
		break;
 8002ad2:	e017      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 8002ad4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002ad8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002adc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	6814      	ldr	r4, [r2, #0]
 8002ae4:	6850      	ldr	r0, [r2, #4]
 8002ae6:	6891      	ldr	r1, [r2, #8]
 8002ae8:	601c      	str	r4, [r3, #0]
 8002aea:	6058      	str	r0, [r3, #4]
 8002aec:	6099      	str	r1, [r3, #8]
 8002aee:	7b12      	ldrb	r2, [r2, #12]
 8002af0:	731a      	strb	r2, [r3, #12]
		break;
 8002af2:	e007      	b.n	8002b04 <ref_get_msg+0x3c8>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 8002af4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002af8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b00:	801a      	strh	r2, [r3, #0]
		break;
 8002b02:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 8002b04:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b12:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2342      	movs	r3, #66	@ 0x42
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f019 fda1 	bl	801c664 <memcpy>
}
 8002b22:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}

08002b34 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002b44:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <ref_usart_start+0xfc>)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002b4a:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <ref_usart_start+0xfc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fb6a 	bl	8002228 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d162      	bne.n	8002c26 <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <ref_usart_start+0x38>
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e05b      	b.n	8002c28 <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <ref_usart_start+0x4a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e054      	b.n	8002c28 <ref_usart_start+0xf4>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		huart->pRxBuffPtr = pData;
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
		huart->RxXferSize = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	859a      	strh	r2, [r3, #44]	@ 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2222      	movs	r2, #34	@ 0x22
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	4a23      	ldr	r2, [pc, #140]	@ (8002c34 <ref_usart_start+0x100>)
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <ref_usart_start+0x104>)
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f00b f866 	bl	800dca0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c00:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c20:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
	}
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200008c8 	.word	0x200008c8
 8002c34:	08002c99 	.word	0x08002c99
 8002c38:	08002c3d 	.word	0x08002c3d

08002c3c <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <ref_half_cplt_isr+0x50>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f7ff fb2f 	bl	80022b6 <queue_append_byte>

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(referee_processing_task_handle, &xHigherPriorityTaskWoken);
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <ref_half_cplt_isr+0x54>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f107 020c 	add.w	r2, r7, #12
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f017 fd28 	bl	801a6bc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <ref_half_cplt_isr+0x46>
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <ref_half_cplt_isr+0x58>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200008c8 	.word	0x200008c8
 8002c90:	20003b6c 	.word	0x20003b6c
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <ref_full_cplt_isr+0x50>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff fb00 	bl	80022b6 <queue_append_byte>

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(referee_processing_task_handle, &xHigherPriorityTaskWoken);
 8002cba:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <ref_full_cplt_isr+0x54>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f107 020c 	add.w	r2, r7, #12
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f017 fcf9 	bl	801a6bc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <ref_full_cplt_isr+0x48>
 8002cd0:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <ref_full_cplt_isr+0x58>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200008c8 	.word	0x200008c8
 8002cec:	20003b6c 	.word	0x20003b6c
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002d06:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d08:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <MX_ADC3_Init+0x9c>)
 8002d0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002d26:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d34:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d36:	4a17      	ldr	r2, [pc, #92]	@ (8002d94 <MX_ADC3_Init+0xa0>)
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d3a:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002d54:	480d      	ldr	r0, [pc, #52]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d56:	f009 fcff 	bl	800c758 <HAL_ADC_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002d60:	f000 fd4a 	bl	80037f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d64:	2308      	movs	r3, #8
 8002d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d76:	f009 fd33 	bl	800c7e0 <HAL_ADC_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002d80:	f000 fd3a 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200008cc 	.word	0x200008cc
 8002d90:	40012200 	.word	0x40012200
 8002d94:	0f000001 	.word	0x0f000001

08002d98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_ADC_MspInit+0x7c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d128      	bne.n	8002e0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dca:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	4805      	ldr	r0, [pc, #20]	@ (8002e1c <HAL_ADC_MspInit+0x84>)
 8002e08:	f00b faaa 	bl	800e360 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3728      	adds	r7, #40	@ 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40012200 	.word	0x40012200
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40021400 	.word	0x40021400

08002e20 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e26:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <MX_CAN1_Init+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e30:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e36:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e46:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002e4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e52:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e64:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e70:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e72:	f009 fed3 	bl	800cc1c <HAL_CAN_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002e7c:	f000 fcbc 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000914 	.word	0x20000914
 8002e88:	40006400 	.word	0x40006400

08002e8c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002e90:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <MX_CAN2_Init+0x68>)
 8002e94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002e98:	2203      	movs	r2, #3
 8002e9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ea2:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002eaa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002eae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002eb2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002eb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002edc:	4804      	ldr	r0, [pc, #16]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ede:	f009 fe9d 	bl	800cc1c <HAL_CAN_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002ee8:	f000 fc86 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000093c 	.word	0x2000093c
 8002ef4:	40006800 	.word	0x40006800

08002ef8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	@ 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_CAN_MspInit+0x168>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d145      	bne.n	8002fa6 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f1a:	4b52      	ldr	r3, [pc, #328]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a50      	ldr	r2, [pc, #320]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f24:	4b4f      	ldr	r3, [pc, #316]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	4b4d      	ldr	r3, [pc, #308]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	4a4c      	ldr	r2, [pc, #304]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4a45      	ldr	r2, [pc, #276]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f58:	4b43      	ldr	r3, [pc, #268]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f64:	2303      	movs	r3, #3
 8002f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f70:	2303      	movs	r3, #3
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f74:	2309      	movs	r3, #9
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	483b      	ldr	r0, [pc, #236]	@ (800306c <HAL_CAN_MspInit+0x174>)
 8002f80:	f00b f9ee 	bl	800e360 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2105      	movs	r1, #5
 8002f88:	2014      	movs	r0, #20
 8002f8a:	f00a fda3 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f8e:	2014      	movs	r0, #20
 8002f90:	f00a fdbc 	bl	800db0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2105      	movs	r1, #5
 8002f98:	2015      	movs	r0, #21
 8002f9a:	f00a fd9b 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002f9e:	2015      	movs	r0, #21
 8002fa0:	f00a fdb4 	bl	800db0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002fa4:	e057      	b.n	8003056 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a31      	ldr	r2, [pc, #196]	@ (8003070 <HAL_CAN_MspInit+0x178>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d152      	bne.n	8003056 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc0:	4b29      	ldr	r3, [pc, #164]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a24      	ldr	r2, [pc, #144]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002fd4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10d      	bne.n	8002ffa <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	4a20      	ldr	r2, [pc, #128]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fe8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003016:	2360      	movs	r3, #96	@ 0x60
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003026:	2309      	movs	r3, #9
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4619      	mov	r1, r3
 8003030:	4810      	ldr	r0, [pc, #64]	@ (8003074 <HAL_CAN_MspInit+0x17c>)
 8003032:	f00b f995 	bl	800e360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2105      	movs	r1, #5
 800303a:	2040      	movs	r0, #64	@ 0x40
 800303c:	f00a fd4a 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003040:	2040      	movs	r0, #64	@ 0x40
 8003042:	f00a fd63 	bl	800db0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2105      	movs	r1, #5
 800304a:	2041      	movs	r0, #65	@ 0x41
 800304c:	f00a fd42 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003050:	2041      	movs	r0, #65	@ 0x41
 8003052:	f00a fd5b 	bl	800db0c <HAL_NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3730      	adds	r7, #48	@ 0x30
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40006400 	.word	0x40006400
 8003064:	20000964 	.word	0x20000964
 8003068:	40023800 	.word	0x40023800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40006800 	.word	0x40006800
 8003074:	40020400 	.word	0x40020400

08003078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4b2f      	ldr	r3, [pc, #188]	@ (8003140 <MX_DMA_Init+0xc8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a2e      	ldr	r2, [pc, #184]	@ (8003140 <MX_DMA_Init+0xc8>)
 8003088:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <MX_DMA_Init+0xc8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4b28      	ldr	r3, [pc, #160]	@ (8003140 <MX_DMA_Init+0xc8>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a27      	ldr	r2, [pc, #156]	@ (8003140 <MX_DMA_Init+0xc8>)
 80030a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <MX_DMA_Init+0xc8>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2105      	movs	r1, #5
 80030ba:	200c      	movs	r0, #12
 80030bc:	f00a fd0a 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80030c0:	200c      	movs	r0, #12
 80030c2:	f00a fd23 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2105      	movs	r1, #5
 80030ca:	200d      	movs	r0, #13
 80030cc:	f00a fd02 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80030d0:	200d      	movs	r0, #13
 80030d2:	f00a fd1b 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2105      	movs	r1, #5
 80030da:	200f      	movs	r0, #15
 80030dc:	f00a fcfa 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80030e0:	200f      	movs	r0, #15
 80030e2:	f00a fd13 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2105      	movs	r1, #5
 80030ea:	2038      	movs	r0, #56	@ 0x38
 80030ec:	f00a fcf2 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030f0:	2038      	movs	r0, #56	@ 0x38
 80030f2:	f00a fd0b 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2105      	movs	r1, #5
 80030fa:	2039      	movs	r0, #57	@ 0x39
 80030fc:	f00a fcea 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003100:	2039      	movs	r0, #57	@ 0x39
 8003102:	f00a fd03 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2105      	movs	r1, #5
 800310a:	203b      	movs	r0, #59	@ 0x3b
 800310c:	f00a fce2 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003110:	203b      	movs	r0, #59	@ 0x3b
 8003112:	f00a fcfb 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2105      	movs	r1, #5
 800311a:	2044      	movs	r0, #68	@ 0x44
 800311c:	f00a fcda 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003120:	2044      	movs	r0, #68	@ 0x44
 8003122:	f00a fcf3 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2105      	movs	r1, #5
 800312a:	2045      	movs	r0, #69	@ 0x45
 800312c:	f00a fcd2 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003130:	2045      	movs	r0, #69	@ 0x45
 8003132:	f00a fceb 	bl	800db0c <HAL_NVIC_EnableIRQ>

}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
	return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003188:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <vApplicationGetIdleTaskMemory+0x30>)
 800318e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003196:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000970 	.word	0x20000970
 80031a8:	20000af0 	.word	0x20000af0

080031ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80031bc:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4a06      	ldr	r2, [pc, #24]	@ (80031dc <vApplicationGetTimerTaskMemory+0x30>)
 80031c2:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20000ef0 	.word	0x20000ef0
 80031dc:	20001070 	.word	0x20001070

080031e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b08a      	sub	sp, #40	@ 0x28
 80031e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <MX_FREERTOS_Init+0x48>)
 80031e8:	1d3c      	adds	r4, r7, #4
 80031ea:	461d      	mov	r5, r3
 80031ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f015 fa36 	bl	801866e <osThreadCreate>
 8003202:	4603      	mov	r3, r0
 8003204:	4a09      	ldr	r2, [pc, #36]	@ (800322c <MX_FREERTOS_Init+0x4c>)
 8003206:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	xTaskCreate(master_task, "master_task",
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <MX_FREERTOS_Init+0x50>)
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	230c      	movs	r3, #12
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2301      	movs	r3, #1
 8003212:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003216:	4907      	ldr	r1, [pc, #28]	@ (8003234 <MX_FREERTOS_Init+0x54>)
 8003218:	4807      	ldr	r0, [pc, #28]	@ (8003238 <MX_FREERTOS_Init+0x58>)
 800321a:	f016 fa2b 	bl	8019674 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 12,
			&master_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bdb0      	pop	{r4, r5, r7, pc}
 8003226:	bf00      	nop
 8003228:	08023170 	.word	0x08023170
 800322c:	2000096c 	.word	0x2000096c
 8003230:	20000968 	.word	0x20000968
 8003234:	08023158 	.word	0x08023158
 8003238:	08009c59 	.word	0x08009c59

0800323c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003244:	f018 faf0 	bl	801b828 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(100000);
 8003248:	4801      	ldr	r0, [pc, #4]	@ (8003250 <StartDefaultTask+0x14>)
 800324a:	f015 fa5c 	bl	8018706 <osDelay>
 800324e:	e7fb      	b.n	8003248 <StartDefaultTask+0xc>
 8003250:	000186a0 	.word	0x000186a0

08003254 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	@ 0x38
 8003258:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	4b84      	ldr	r3, [pc, #528]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a83      	ldr	r2, [pc, #524]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b81      	ldr	r3, [pc, #516]	@ (8003480 <MX_GPIO_Init+0x22c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	4b7d      	ldr	r3, [pc, #500]	@ (8003480 <MX_GPIO_Init+0x22c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a7c      	ldr	r2, [pc, #496]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b7a      	ldr	r3, [pc, #488]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a75      	ldr	r2, [pc, #468]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b73      	ldr	r3, [pc, #460]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	4b68      	ldr	r3, [pc, #416]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a67      	ldr	r2, [pc, #412]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a60      	ldr	r2, [pc, #384]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b5e      	ldr	r3, [pc, #376]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b5a      	ldr	r3, [pc, #360]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a59      	ldr	r2, [pc, #356]	@ (8003480 <MX_GPIO_Init+0x22c>)
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b57      	ldr	r3, [pc, #348]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a52      	ldr	r2, [pc, #328]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b50      	ldr	r3, [pc, #320]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003350:	484c      	ldr	r0, [pc, #304]	@ (8003484 <MX_GPIO_Init+0x230>)
 8003352:	f00b f9a1 	bl	800e698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8003356:	2200      	movs	r2, #0
 8003358:	2140      	movs	r1, #64	@ 0x40
 800335a:	484b      	ldr	r0, [pc, #300]	@ (8003488 <MX_GPIO_Init+0x234>)
 800335c:	f00b f99c 	bl	800e698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	2110      	movs	r1, #16
 8003364:	4849      	ldr	r0, [pc, #292]	@ (800348c <MX_GPIO_Init+0x238>)
 8003366:	f00b f997 	bl	800e698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800336a:	2201      	movs	r2, #1
 800336c:	2101      	movs	r1, #1
 800336e:	4848      	ldr	r0, [pc, #288]	@ (8003490 <MX_GPIO_Init+0x23c>)
 8003370:	f00b f992 	bl	800e698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 8003374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337a:	2301      	movs	r3, #1
 800337c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800338a:	4619      	mov	r1, r3
 800338c:	483d      	ldr	r0, [pc, #244]	@ (8003484 <MX_GPIO_Init+0x230>)
 800338e:	f00a ffe7 	bl	800e360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 8003392:	2340      	movs	r3, #64	@ 0x40
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	2301      	movs	r3, #1
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a6:	4619      	mov	r1, r3
 80033a8:	4837      	ldr	r0, [pc, #220]	@ (8003488 <MX_GPIO_Init+0x234>)
 80033aa:	f00a ffd9 	bl	800e360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80033ae:	2308      	movs	r3, #8
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	4831      	ldr	r0, [pc, #196]	@ (8003488 <MX_GPIO_Init+0x234>)
 80033c4:	f00a ffcc 	bl	800e360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033c8:	2310      	movs	r3, #16
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	482b      	ldr	r0, [pc, #172]	@ (800348c <MX_GPIO_Init+0x238>)
 80033e0:	f00a ffbe 	bl	800e360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 80033e4:	2330      	movs	r3, #48	@ 0x30
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f6:	4619      	mov	r1, r3
 80033f8:	4822      	ldr	r0, [pc, #136]	@ (8003484 <MX_GPIO_Init+0x230>)
 80033fa:	f00a ffb1 	bl	800e360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003404:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800340e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003412:	4619      	mov	r1, r3
 8003414:	481f      	ldr	r0, [pc, #124]	@ (8003494 <MX_GPIO_Init+0x240>)
 8003416:	f00a ffa3 	bl	800e360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800341a:	2301      	movs	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4817      	ldr	r0, [pc, #92]	@ (8003490 <MX_GPIO_Init+0x23c>)
 8003432:	f00a ff95 	bl	800e360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2105      	movs	r1, #5
 800343a:	2009      	movs	r0, #9
 800343c:	f00a fb4a 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003440:	2009      	movs	r0, #9
 8003442:	f00a fb63 	bl	800db0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2105      	movs	r1, #5
 800344a:	200a      	movs	r0, #10
 800344c:	f00a fb42 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003450:	200a      	movs	r0, #10
 8003452:	f00a fb5b 	bl	800db0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2105      	movs	r1, #5
 800345a:	2017      	movs	r0, #23
 800345c:	f00a fb3a 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003460:	2017      	movs	r0, #23
 8003462:	f00a fb53 	bl	800db0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2105      	movs	r1, #5
 800346a:	2028      	movs	r0, #40	@ 0x28
 800346c:	f00a fb32 	bl	800dad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003470:	2028      	movs	r0, #40	@ 0x28
 8003472:	f00a fb4b 	bl	800db0c <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3738      	adds	r7, #56	@ 0x38
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40020800 	.word	0x40020800
 8003488:	40021800 	.word	0x40021800
 800348c:	40020000 	.word	0x40020000
 8003490:	40020400 	.word	0x40020400
 8003494:	40021000 	.word	0x40021000

08003498 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <MX_I2C3_Init+0x50>)
 800349e:	4a13      	ldr	r2, [pc, #76]	@ (80034ec <MX_I2C3_Init+0x54>)
 80034a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80034a2:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034a4:	4a12      	ldr	r2, [pc, #72]	@ (80034f0 <MX_I2C3_Init+0x58>)
 80034a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034be:	2200      	movs	r2, #0
 80034c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c8:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034d4:	4804      	ldr	r0, [pc, #16]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034d6:	f00b f911 	bl	800e6fc <HAL_I2C_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034e0:	f000 f98a 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20001870 	.word	0x20001870
 80034ec:	40005c00 	.word	0x40005c00
 80034f0:	00061a80 	.word	0x00061a80

080034f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5b      	ldr	r2, [pc, #364]	@ (8003680 <HAL_I2C_MspInit+0x18c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f040 80b0 	bne.w	8003678 <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	4b59      	ldr	r3, [pc, #356]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b56      	ldr	r3, [pc, #344]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b52      	ldr	r3, [pc, #328]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6313      	str	r3, [r2, #48]	@ 0x30
 8003544:	4b4f      	ldr	r3, [pc, #316]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003556:	2312      	movs	r3, #18
 8003558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003562:	2304      	movs	r3, #4
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4846      	ldr	r0, [pc, #280]	@ (8003688 <HAL_I2C_MspInit+0x194>)
 800356e:	f00a fef7 	bl	800e360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003578:	2312      	movs	r3, #18
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800357c:	2301      	movs	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003584:	2304      	movs	r3, #4
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	483f      	ldr	r0, [pc, #252]	@ (800368c <HAL_I2C_MspInit+0x198>)
 8003590:	f00a fee6 	bl	800e360 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	4a39      	ldr	r2, [pc, #228]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800359e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a4:	4b37      	ldr	r3, [pc, #220]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80035b0:	4b37      	ldr	r3, [pc, #220]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035b2:	4a38      	ldr	r2, [pc, #224]	@ (8003694 <HAL_I2C_MspInit+0x1a0>)
 80035b4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035bc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035be:	4b34      	ldr	r3, [pc, #208]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c4:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ca:	4b31      	ldr	r3, [pc, #196]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035d0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80035de:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ea:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80035f0:	4827      	ldr	r0, [pc, #156]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035f2:	f00a faa7 	bl	800db44 <HAL_DMA_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80035fc:	f000 f8fc 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a23      	ldr	r2, [pc, #140]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
 8003606:	4a22      	ldr	r2, [pc, #136]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800360c:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800360e:	4a23      	ldr	r2, [pc, #140]	@ (800369c <HAL_I2C_MspInit+0x1a8>)
 8003610:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8003612:	4b21      	ldr	r3, [pc, #132]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003614:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003618:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361a:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800361c:	2240      	movs	r2, #64	@ 0x40
 800361e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362e:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003634:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800363a:	4b17      	ldr	r3, [pc, #92]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800363c:	2200      	movs	r2, #0
 800363e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003640:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003646:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800364c:	4812      	ldr	r0, [pc, #72]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800364e:	f00a fa79 	bl	800db44 <HAL_DMA_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003658:	f000 f8ce 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0e      	ldr	r2, [pc, #56]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003660:	635a      	str	r2, [r3, #52]	@ 0x34
 8003662:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2105      	movs	r1, #5
 800366c:	2049      	movs	r0, #73	@ 0x49
 800366e:	f00a fa31 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003672:	2049      	movs	r0, #73	@ 0x49
 8003674:	f00a fa4a 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003678:	bf00      	nop
 800367a:	3728      	adds	r7, #40	@ 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40005c00 	.word	0x40005c00
 8003684:	40023800 	.word	0x40023800
 8003688:	40020800 	.word	0x40020800
 800368c:	40020000 	.word	0x40020000
 8003690:	200018c4 	.word	0x200018c4
 8003694:	40026040 	.word	0x40026040
 8003698:	20001924 	.word	0x20001924
 800369c:	40026070 	.word	0x40026070

080036a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a4:	f008 fff2 	bl	800c68c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036a8:	f000 f82a 	bl	8003700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ac:	f7ff fdd2 	bl	8003254 <MX_GPIO_Init>
  MX_DMA_Init();
 80036b0:	f7ff fce2 	bl	8003078 <MX_DMA_Init>
  MX_CAN1_Init();
 80036b4:	f7ff fbb4 	bl	8002e20 <MX_CAN1_Init>
  MX_CAN2_Init();
 80036b8:	f7ff fbe8 	bl	8002e8c <MX_CAN2_Init>
  MX_TIM5_Init();
 80036bc:	f000 fdb8 	bl	8004230 <MX_TIM5_Init>
  MX_TIM10_Init();
 80036c0:	f000 fe26 	bl	8004310 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80036c4:	f000 ff74 	bl	80045b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80036c8:	f000 ff9c 	bl	8004604 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80036cc:	f000 ffc6 	bl	800465c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80036d0:	f000 f8ce 	bl	8003870 <MX_SPI1_Init>
  MX_I2C3_Init();
 80036d4:	f7ff fee0 	bl	8003498 <MX_I2C3_Init>
  MX_ADC3_Init();
 80036d8:	f7ff fb0c 	bl	8002cf4 <MX_ADC3_Init>
  MX_TIM3_Init();
 80036dc:	f000 fcdc 	bl	8004098 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036e0:	f000 fd4c 	bl	800417c <MX_TIM4_Init>
  MX_RNG_Init();
 80036e4:	f000 f88e 	bl	8003804 <MX_RNG_Init>
  MX_TIM2_Init();
 80036e8:	f000 fca4 	bl	8004034 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 80036ec:	f008 ff4f 	bl	800c58e <startup_task>
  MX_USB_DEVICE_Init();
 80036f0:	f018 f89a 	bl	801b828 <MX_USB_DEVICE_Init>
//  HAL_TIM_Base_Start(&htim3); //start micros clock
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80036f4:	f7ff fd74 	bl	80031e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036f8:	f014 ffb2 	bl	8018660 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <main+0x5c>

08003700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b094      	sub	sp, #80	@ 0x50
 8003704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	2230      	movs	r2, #48	@ 0x30
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f018 feff 	bl	801c512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <SystemClock_Config+0xcc>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <SystemClock_Config+0xcc>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6413      	str	r3, [r2, #64]	@ 0x40
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <SystemClock_Config+0xcc>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003740:	2300      	movs	r3, #0
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	4b22      	ldr	r3, [pc, #136]	@ (80037d0 <SystemClock_Config+0xd0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a21      	ldr	r2, [pc, #132]	@ (80037d0 <SystemClock_Config+0xd0>)
 800374a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <SystemClock_Config+0xd0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800375c:	2301      	movs	r3, #1
 800375e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003766:	2302      	movs	r3, #2
 8003768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800376a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003770:	2306      	movs	r3, #6
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003774:	23a8      	movs	r3, #168	@ 0xa8
 8003776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003778:	2302      	movs	r3, #2
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800377c:	2307      	movs	r3, #7
 800377e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003780:	f107 0320 	add.w	r3, r7, #32
 8003784:	4618      	mov	r0, r3
 8003786:	f00d ffc1 	bl	801170c <HAL_RCC_OscConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003790:	f000 f832 	bl	80037f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003794:	230f      	movs	r3, #15
 8003796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003798:	2302      	movs	r3, #2
 800379a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2105      	movs	r1, #5
 80037b2:	4618      	mov	r0, r3
 80037b4:	f00e fa22 	bl	8011bfc <HAL_RCC_ClockConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037be:	f000 f81b 	bl	80037f8 <Error_Handler>
  }
}
 80037c2:	bf00      	nop
 80037c4:	3750      	adds	r7, #80	@ 0x50
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000

080037d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037e6:	f008 ff73 	bl	800c6d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40001000 	.word	0x40001000

080037f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <Error_Handler+0x8>

08003804 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <MX_RNG_Init+0x20>)
 800380a:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <MX_RNG_Init+0x24>)
 800380c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800380e:	4805      	ldr	r0, [pc, #20]	@ (8003824 <MX_RNG_Init+0x20>)
 8003810:	f00e fc06 	bl	8012020 <HAL_RNG_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800381a:	f7ff ffed 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20001984 	.word	0x20001984
 8003828:	50060800 	.word	0x50060800

0800382c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0b      	ldr	r2, [pc, #44]	@ (8003868 <HAL_RNG_MspInit+0x3c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10d      	bne.n	800385a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <HAL_RNG_MspInit+0x40>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RNG_MspInit+0x40>)
 8003848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384c:	6353      	str	r3, [r2, #52]	@ 0x34
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <HAL_RNG_MspInit+0x40>)
 8003850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	50060800 	.word	0x50060800
 800386c:	40023800 	.word	0x40023800

08003870 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003876:	4a18      	ldr	r2, [pc, #96]	@ (80038d8 <MX_SPI1_Init+0x68>)
 8003878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <MX_SPI1_Init+0x64>)
 800387c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <MX_SPI1_Init+0x64>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003896:	2200      	movs	r2, #0
 8003898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <MX_SPI1_Init+0x64>)
 800389c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038a4:	2228      	movs	r2, #40	@ 0x28
 80038a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b4:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038bc:	220a      	movs	r2, #10
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038c0:	4804      	ldr	r0, [pc, #16]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038c2:	f00e fbd7 	bl	8012074 <HAL_SPI_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038cc:	f7ff ff94 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20001994 	.word	0x20001994
 80038d8:	40013000 	.word	0x40013000

080038dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a56      	ldr	r2, [pc, #344]	@ (8003a54 <HAL_SPI_MspInit+0x178>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	f040 80a6 	bne.w	8003a4c <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	4b54      	ldr	r3, [pc, #336]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	4a53      	ldr	r2, [pc, #332]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800390a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800390e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003910:	4b51      	ldr	r3, [pc, #324]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	4a4c      	ldr	r2, [pc, #304]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003926:	f043 0302 	orr.w	r3, r3, #2
 800392a:	6313      	str	r3, [r2, #48]	@ 0x30
 800392c:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	4a45      	ldr	r2, [pc, #276]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6313      	str	r3, [r2, #48]	@ 0x30
 8003948:	4b43      	ldr	r3, [pc, #268]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003954:	2318      	movs	r3, #24
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003964:	2305      	movs	r3, #5
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	483b      	ldr	r0, [pc, #236]	@ (8003a5c <HAL_SPI_MspInit+0x180>)
 8003970:	f00a fcf6 	bl	800e360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003984:	2305      	movs	r3, #5
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	4834      	ldr	r0, [pc, #208]	@ (8003a60 <HAL_SPI_MspInit+0x184>)
 8003990:	f00a fce6 	bl	800e360 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003994:	4b33      	ldr	r3, [pc, #204]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 8003996:	4a34      	ldr	r2, [pc, #208]	@ (8003a68 <HAL_SPI_MspInit+0x18c>)
 8003998:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800399a:	4b32      	ldr	r3, [pc, #200]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 800399c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80039a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a2:	4b30      	ldr	r3, [pc, #192]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039bc:	4b29      	ldr	r3, [pc, #164]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039c2:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039c8:	4b26      	ldr	r3, [pc, #152]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ce:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80039d4:	4823      	ldr	r0, [pc, #140]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039d6:	f00a f8b5 	bl	800db44 <HAL_DMA_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80039e0:	f7ff ff0a 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80039ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 80039f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <HAL_SPI_MspInit+0x194>)
 80039f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80039f6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 80039f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80039fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0a:	4b18      	ldr	r3, [pc, #96]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a12:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a30:	480e      	ldr	r0, [pc, #56]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a32:	f00a f887 	bl	800db44 <HAL_DMA_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003a3c:	f7ff fedc 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a44:	649a      	str	r2, [r3, #72]	@ 0x48
 8003a46:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3728      	adds	r7, #40	@ 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40013000 	.word	0x40013000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40020000 	.word	0x40020000
 8003a64:	200019ec 	.word	0x200019ec
 8003a68:	40026410 	.word	0x40026410
 8003a6c:	20001a4c 	.word	0x20001a4c
 8003a70:	40026458 	.word	0x40026458

08003a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	f06f 0001 	mvn.w	r0, #1
 8003aba:	f00a f80b 	bl	800dad4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	@ 0x38
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_InitTick+0xe4>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_InitTick+0xe4>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aec:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <HAL_InitTick+0xe4>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af8:	f107 0210 	add.w	r2, r7, #16
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00e fa5a 	bl	8011fbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b12:	f00e fa2b 	bl	8011f6c <HAL_RCC_GetPCLK1Freq>
 8003b16:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b18:	e004      	b.n	8003b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b1a:	f00e fa27 	bl	8011f6c <HAL_RCC_GetPCLK1Freq>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b26:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_InitTick+0xe8>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0c9b      	lsrs	r3, r3, #18
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b34:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_InitTick+0xf0>)
 8003b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b38:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b52:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003b58:	4817      	ldr	r0, [pc, #92]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b5a:	f00e fef7 	bl	801294c <HAL_TIM_Base_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003b6c:	4812      	ldr	r0, [pc, #72]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b6e:	f00e ff3d 	bl	80129ec <HAL_TIM_Base_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b80:	2036      	movs	r0, #54	@ 0x36
 8003b82:	f009 ffc3 	bl	800db0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d808      	bhi.n	8003b9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	2036      	movs	r0, #54	@ 0x36
 8003b92:	f009 ff9f 	bl	800dad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b96:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc0 <HAL_InitTick+0xf4>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e002      	b.n	8003ba4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3738      	adds	r7, #56	@ 0x38
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	431bde83 	.word	0x431bde83
 8003bb8:	20001aac 	.word	0x20001aac
 8003bbc:	40001000 	.word	0x40001000
 8003bc0:	20000048 	.word	0x20000048

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <NMI_Handler+0x4>

08003bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <HardFault_Handler+0x4>

08003bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <MemManage_Handler+0x4>

08003bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <BusFault_Handler+0x4>

08003be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <UsageFault_Handler+0x4>

08003bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003bfe:	2008      	movs	r0, #8
 8003c00:	f00a fd64 	bl	800e6cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003c0c:	2010      	movs	r0, #16
 8003c0e:	f00a fd5d 	bl	800e6cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c1c:	4802      	ldr	r0, [pc, #8]	@ (8003c28 <DMA1_Stream1_IRQHandler+0x10>)
 8003c1e:	f00a f929 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20001d44 	.word	0x20001d44

08003c2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003c30:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <DMA1_Stream2_IRQHandler+0x10>)
 8003c32:	f00a f91f 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200018c4 	.word	0x200018c4

08003c40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003c44:	4802      	ldr	r0, [pc, #8]	@ (8003c50 <DMA1_Stream4_IRQHandler+0x10>)
 8003c46:	f00a f915 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20001924 	.word	0x20001924

08003c54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c58:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <CAN1_RX0_IRQHandler+0x10>)
 8003c5a:	f009 fc39 	bl	800d4d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000914 	.word	0x20000914

08003c68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <CAN1_RX1_IRQHandler+0x10>)
 8003c6e:	f009 fc2f 	bl	800d4d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000914 	.word	0x20000914

08003c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003c80:	2020      	movs	r0, #32
 8003c82:	f00a fd23 	bl	800e6cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c90:	4803      	ldr	r0, [pc, #12]	@ (8003ca0 <TIM3_IRQHandler+0x14>)
 8003c92:	f00f f88b 	bl	8012dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003c96:	f7fe fa61 	bl	800215c <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001af8 	.word	0x20001af8

08003ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ca8:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <USART1_IRQHandler+0x10>)
 8003caa:	f010 f881 	bl	8013db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20001c18 	.word	0x20001c18

08003cb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cbc:	4802      	ldr	r0, [pc, #8]	@ (8003cc8 <USART3_IRQHandler+0x10>)
 8003cbe:	f010 f877 	bl	8013db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001c5c 	.word	0x20001c5c

08003ccc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003cd0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003cd4:	f00a fcfa 	bl	800e6cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  hall_int();
 8003cd8:	f7fd fcce 	bl	8001678 <hall_int>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ce4:	4802      	ldr	r0, [pc, #8]	@ (8003cf0 <TIM6_DAC_IRQHandler+0x10>)
 8003ce6:	f00f f861 	bl	8012dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20001aac 	.word	0x20001aac

08003cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003cf8:	4802      	ldr	r0, [pc, #8]	@ (8003d04 <DMA2_Stream0_IRQHandler+0x10>)
 8003cfa:	f00a f8bb 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200019ec 	.word	0x200019ec

08003d08 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003d0c:	4802      	ldr	r0, [pc, #8]	@ (8003d18 <DMA2_Stream1_IRQHandler+0x10>)
 8003d0e:	f00a f8b1 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20001da4 	.word	0x20001da4

08003d1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d20:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <DMA2_Stream3_IRQHandler+0x10>)
 8003d22:	f00a f8a7 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20001a4c 	.word	0x20001a4c

08003d30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d34:	4802      	ldr	r0, [pc, #8]	@ (8003d40 <CAN2_RX0_IRQHandler+0x10>)
 8003d36:	f009 fbcb 	bl	800d4d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000093c 	.word	0x2000093c

08003d44 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <CAN2_RX1_IRQHandler+0x10>)
 8003d4a:	f009 fbc1 	bl	800d4d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	2000093c 	.word	0x2000093c

08003d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d5c:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <OTG_FS_IRQHandler+0x10>)
 8003d5e:	f00c fba8 	bl	80104b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000cc3c 	.word	0x2000cc3c

08003d6c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d70:	4802      	ldr	r0, [pc, #8]	@ (8003d7c <DMA2_Stream5_IRQHandler+0x10>)
 8003d72:	f00a f87f 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20001ce4 	.word	0x20001ce4

08003d80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003d84:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <DMA2_Stream6_IRQHandler+0x10>)
 8003d86:	f00a f875 	bl	800de74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20001e04 	.word	0x20001e04

08003d94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d98:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <USART6_IRQHandler+0x10>)
 8003d9a:	f010 f809 	bl	8013db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20001ca0 	.word	0x20001ca0

08003da8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003dac:	4802      	ldr	r0, [pc, #8]	@ (8003db8 <I2C3_ER_IRQHandler+0x10>)
 8003dae:	f00b fa9d 	bl	800f2ec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20001870 	.word	0x20001870

08003dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return 1;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_kill>:

int _kill(int pid, int sig)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dd6:	f018 fc17 	bl	801c608 <__errno>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2216      	movs	r2, #22
 8003dde:	601a      	str	r2, [r3, #0]
  return -1;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_exit>:

void _exit (int status)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ffe7 	bl	8003dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <_exit+0x12>

08003e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e00a      	b.n	8003e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e14:	f3af 8000 	nop.w
 8003e18:	4601      	mov	r1, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	60ba      	str	r2, [r7, #8]
 8003e20:	b2ca      	uxtb	r2, r1
 8003e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dbf0      	blt.n	8003e14 <_read+0x12>
  }

  return len;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e009      	b.n	8003e62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	60ba      	str	r2, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	dbf1      	blt.n	8003e4e <_write+0x12>
  }
  return len;
 8003e6a:	687b      	ldr	r3, [r7, #4]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_close>:

int _close(int file)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e9c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_isatty>:

int _isatty(int file)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003eb4:	2301      	movs	r3, #1
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ee4:	4a14      	ldr	r2, [pc, #80]	@ (8003f38 <_sbrk+0x5c>)
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <_sbrk+0x60>)
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <_sbrk+0x64>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef8:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <_sbrk+0x64>)
 8003efa:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <_sbrk+0x68>)
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d207      	bcs.n	8003f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f0c:	f018 fb7c 	bl	801c608 <__errno>
 8003f10:	4603      	mov	r3, r0
 8003f12:	220c      	movs	r2, #12
 8003f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	e009      	b.n	8003f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f1c:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <_sbrk+0x64>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f22:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <_sbrk+0x64>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a05      	ldr	r2, [pc, #20]	@ (8003f40 <_sbrk+0x64>)
 8003f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20020000 	.word	0x20020000
 8003f3c:	00009000 	.word	0x00009000
 8003f40:	20001af4 	.word	0x20001af4
 8003f44:	2000d678 	.word	0x2000d678

08003f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f4c:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <SystemInit+0x28>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	4a07      	ldr	r2, [pc, #28]	@ (8003f70 <SystemInit+0x28>)
 8003f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f5c:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <SystemInit+0x28>)
 8003f5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f62:	609a      	str	r2, [r3, #8]
#endif
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <LL_TIM_DisableARRPreload>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fa6:	f023 0307 	bic.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <LL_APB1_GRP1_EnableClock+0x2c>)
 800400e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004010:	4907      	ldr	r1, [pc, #28]	@ (8004030 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <LL_APB1_GRP1_EnableClock+0x2c>)
 800401a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4013      	ands	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40023800 	.word	0x40023800

08004034 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004048:	2001      	movs	r0, #1
 800404a:	f7ff ffdb 	bl	8004004 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004068:	f010 fe7a 	bl	8014d60 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800406c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004070:	f7ff ff80 	bl	8003f74 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004074:	2100      	movs	r1, #0
 8004076:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800407a:	f7ff ff8b 	bl	8003f94 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800407e:	2100      	movs	r1, #0
 8004080:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004084:	f7ff ff9b 	bl	8003fbe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004088:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800408c:	f7ff ffaa 	bl	8003fe4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	@ 0x38
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800409e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	609a      	str	r2, [r3, #8]
 80040aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ac:	f107 0320 	add.w	r3, r7, #32
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
 80040c4:	615a      	str	r2, [r3, #20]
 80040c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <MX_TIM3_Init+0xe0>)
 80040cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80040ce:	4b29      	ldr	r3, [pc, #164]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040d0:	22a7      	movs	r2, #167	@ 0xa7
 80040d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040dc:	2201      	movs	r2, #1
 80040de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e0:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e6:	4b23      	ldr	r3, [pc, #140]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040ec:	4821      	ldr	r0, [pc, #132]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040ee:	f00e fc2d 	bl	801294c <HAL_TIM_Base_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80040f8:	f7ff fb7e 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004106:	4619      	mov	r1, r3
 8004108:	481a      	ldr	r0, [pc, #104]	@ (8004174 <MX_TIM3_Init+0xdc>)
 800410a:	f00f f875 	bl	80131f8 <HAL_TIM_ConfigClockSource>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004114:	f7ff fb70 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004118:	4816      	ldr	r0, [pc, #88]	@ (8004174 <MX_TIM3_Init+0xdc>)
 800411a:	f00e fcd7 	bl	8012acc <HAL_TIM_OC_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004124:	f7ff fb68 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004130:	f107 0320 	add.w	r3, r7, #32
 8004134:	4619      	mov	r1, r3
 8004136:	480f      	ldr	r0, [pc, #60]	@ (8004174 <MX_TIM3_Init+0xdc>)
 8004138:	f00f fc5e 	bl	80139f8 <HAL_TIMEx_MasterConfigSynchronization>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004142:	f7ff fb59 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	2200      	movs	r2, #0
 800415a:	4619      	mov	r1, r3
 800415c:	4805      	ldr	r0, [pc, #20]	@ (8004174 <MX_TIM3_Init+0xdc>)
 800415e:	f00e ff2d 	bl	8012fbc <HAL_TIM_OC_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004168:	f7ff fb46 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800416c:	bf00      	nop
 800416e:	3738      	adds	r7, #56	@ 0x38
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20001af8 	.word	0x20001af8
 8004178:	40000400 	.word	0x40000400

0800417c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	@ 0x28
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004182:	f107 0320 	add.w	r3, r7, #32
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	615a      	str	r2, [r3, #20]
 800419c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800419e:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <MX_TIM4_Init+0xb0>)
 80041a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 80041a4:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80041c6:	4818      	ldr	r0, [pc, #96]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041c8:	f00e fcd9 	bl	8012b7e <HAL_TIM_PWM_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80041d2:	f7ff fb11 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041de:	f107 0320 	add.w	r3, r7, #32
 80041e2:	4619      	mov	r1, r3
 80041e4:	4810      	ldr	r0, [pc, #64]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041e6:	f00f fc07 	bl	80139f8 <HAL_TIMEx_MasterConfigSynchronization>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80041f0:	f7ff fb02 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041f4:	2360      	movs	r3, #96	@ 0x60
 80041f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	2208      	movs	r2, #8
 8004208:	4619      	mov	r1, r3
 800420a:	4807      	ldr	r0, [pc, #28]	@ (8004228 <MX_TIM4_Init+0xac>)
 800420c:	f00e ff32 	bl	8013074 <HAL_TIM_PWM_ConfigChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8004216:	f7ff faef 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800421a:	4803      	ldr	r0, [pc, #12]	@ (8004228 <MX_TIM4_Init+0xac>)
 800421c:	f000 f93c 	bl	8004498 <HAL_TIM_MspPostInit>

}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	@ 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20001b40 	.word	0x20001b40
 800422c:	40000800 	.word	0x40000800

08004230 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004236:	f107 0320 	add.w	r3, r7, #32
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	615a      	str	r2, [r3, #20]
 8004250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004252:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004254:	4a2d      	ldr	r2, [pc, #180]	@ (800430c <MX_TIM5_Init+0xdc>)
 8004256:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 8004258:	4b2b      	ldr	r3, [pc, #172]	@ (8004308 <MX_TIM5_Init+0xd8>)
 800425a:	f240 5225 	movw	r2, #1317	@ 0x525
 800425e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004260:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8004266:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004268:	22ff      	movs	r2, #255	@ 0xff
 800426a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426c:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <MX_TIM5_Init+0xd8>)
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004272:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004274:	2280      	movs	r2, #128	@ 0x80
 8004276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004278:	4823      	ldr	r0, [pc, #140]	@ (8004308 <MX_TIM5_Init+0xd8>)
 800427a:	f00e fc80 	bl	8012b7e <HAL_TIM_PWM_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004284:	f7ff fab8 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004290:	f107 0320 	add.w	r3, r7, #32
 8004294:	4619      	mov	r1, r3
 8004296:	481c      	ldr	r0, [pc, #112]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004298:	f00f fbae 	bl	80139f8 <HAL_TIMEx_MasterConfigSynchronization>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80042a2:	f7ff faa9 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042a6:	2360      	movs	r3, #96	@ 0x60
 80042a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80042ae:	2302      	movs	r3, #2
 80042b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80042b2:	2304      	movs	r3, #4
 80042b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2200      	movs	r2, #0
 80042ba:	4619      	mov	r1, r3
 80042bc:	4812      	ldr	r0, [pc, #72]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042be:	f00e fed9 	bl	8013074 <HAL_TIM_PWM_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80042c8:	f7ff fa96 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	2204      	movs	r2, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	480d      	ldr	r0, [pc, #52]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042d4:	f00e fece 	bl	8013074 <HAL_TIM_PWM_ConfigChannel>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80042de:	f7ff fa8b 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	2208      	movs	r2, #8
 80042e6:	4619      	mov	r1, r3
 80042e8:	4807      	ldr	r0, [pc, #28]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042ea:	f00e fec3 	bl	8013074 <HAL_TIM_PWM_ConfigChannel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80042f4:	f7ff fa80 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80042f8:	4803      	ldr	r0, [pc, #12]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042fa:	f000 f8cd 	bl	8004498 <HAL_TIM_MspPostInit>

}
 80042fe:	bf00      	nop
 8004300:	3728      	adds	r7, #40	@ 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20001b88 	.word	0x20001b88
 800430c:	40000c00 	.word	0x40000c00

08004310 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
 8004324:	615a      	str	r2, [r3, #20]
 8004326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004328:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <MX_TIM10_Init+0x94>)
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <MX_TIM10_Init+0x98>)
 800432c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800432e:	4b1d      	ldr	r3, [pc, #116]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004330:	2200      	movs	r2, #0
 8004332:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004334:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800433a:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <MX_TIM10_Init+0x94>)
 800433c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004340:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004342:	4b18      	ldr	r3, [pc, #96]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004348:	4b16      	ldr	r3, [pc, #88]	@ (80043a4 <MX_TIM10_Init+0x94>)
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800434e:	4815      	ldr	r0, [pc, #84]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004350:	f00e fafc 	bl	801294c <HAL_TIM_Base_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800435a:	f7ff fa4d 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800435e:	4811      	ldr	r0, [pc, #68]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004360:	f00e fc0d 	bl	8012b7e <HAL_TIM_PWM_Init>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800436a:	f7ff fa45 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800436e:	2360      	movs	r3, #96	@ 0x60
 8004370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	2200      	movs	r2, #0
 8004382:	4619      	mov	r1, r3
 8004384:	4807      	ldr	r0, [pc, #28]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004386:	f00e fe75 	bl	8013074 <HAL_TIM_PWM_ConfigChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004390:	f7ff fa32 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004394:	4803      	ldr	r0, [pc, #12]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004396:	f000 f87f 	bl	8004498 <HAL_TIM_MspPostInit>

}
 800439a:	bf00      	nop
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20001bd0 	.word	0x20001bd0
 80043a8:	40014400 	.word	0x40014400

080043ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	@ (800441c <HAL_TIM_Base_MspInit+0x70>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d116      	bne.n	80043ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b17      	ldr	r3, [pc, #92]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ce:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2105      	movs	r1, #5
 80043de:	201d      	movs	r0, #29
 80043e0:	f009 fb78 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043e4:	201d      	movs	r0, #29
 80043e6:	f009 fb91 	bl	800db0c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80043ea:	e012      	b.n	8004412 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <HAL_TIM_Base_MspInit+0x78>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10d      	bne.n	8004412 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 8004400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004404:	6453      	str	r3, [r2, #68]	@ 0x44
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40000400 	.word	0x40000400
 8004420:	40023800 	.word	0x40023800
 8004424:	40014400 	.word	0x40014400

08004428 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a15      	ldr	r2, [pc, #84]	@ (800448c <HAL_TIM_PWM_MspInit+0x64>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004456:	e012      	b.n	800447e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0d      	ldr	r2, [pc, #52]	@ (8004494 <HAL_TIM_PWM_MspInit+0x6c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 800446c:	f043 0308 	orr.w	r3, r3, #8
 8004470:	6413      	str	r3, [r2, #64]	@ 0x40
 8004472:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40000800 	.word	0x40000800
 8004490:	40023800 	.word	0x40023800
 8004494:	40000c00 	.word	0x40000c00

08004498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a37      	ldr	r2, [pc, #220]	@ (8004594 <HAL_TIM_MspPostInit+0xfc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d11f      	bne.n	80044fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80044d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044e8:	2302      	movs	r3, #2
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	482a      	ldr	r0, [pc, #168]	@ (800459c <HAL_TIM_MspPostInit+0x104>)
 80044f4:	f009 ff34 	bl	800e360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80044f8:	e047      	b.n	800458a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM5)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_TIM_MspPostInit+0x108>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d11f      	bne.n	8004544 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	4b23      	ldr	r3, [pc, #140]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 800450e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004512:	6313      	str	r3, [r2, #48]	@ 0x30
 8004514:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 8004520:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004532:	2302      	movs	r3, #2
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4619      	mov	r1, r3
 800453c:	4819      	ldr	r0, [pc, #100]	@ (80045a4 <HAL_TIM_MspPostInit+0x10c>)
 800453e:	f009 ff0f 	bl	800e360 <HAL_GPIO_Init>
}
 8004542:	e022      	b.n	800458a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <HAL_TIM_MspPostInit+0x110>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d11d      	bne.n	800458a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6313      	str	r3, [r2, #48]	@ 0x30
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 800456a:	2340      	movs	r3, #64	@ 0x40
 800456c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800457a:	2303      	movs	r3, #3
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 0314 	add.w	r3, r7, #20
 8004582:	4619      	mov	r1, r3
 8004584:	4809      	ldr	r0, [pc, #36]	@ (80045ac <HAL_TIM_MspPostInit+0x114>)
 8004586:	f009 feeb 	bl	800e360 <HAL_GPIO_Init>
}
 800458a:	bf00      	nop
 800458c:	3728      	adds	r7, #40	@ 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40000800 	.word	0x40000800
 8004598:	40023800 	.word	0x40023800
 800459c:	40020c00 	.word	0x40020c00
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40021c00 	.word	0x40021c00
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40021400 	.word	0x40021400

080045b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045b4:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <MX_USART1_UART_Init+0x50>)
 80045b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c2:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045d4:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d6:	220c      	movs	r2, #12
 80045d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045e6:	4805      	ldr	r0, [pc, #20]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e8:	f00f fa96 	bl	8013b18 <HAL_UART_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045f2:	f7ff f901 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20001c18 	.word	0x20001c18
 8004600:	40011000 	.word	0x40011000

08004604 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800460a:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <MX_USART3_UART_Init+0x50>)
 800460c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004610:	4a11      	ldr	r2, [pc, #68]	@ (8004658 <MX_USART3_UART_Init+0x54>)
 8004612:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004616:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800461a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800461e:	2200      	movs	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004628:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800462a:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800462c:	220c      	movs	r2, #12
 800462e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800463c:	4804      	ldr	r0, [pc, #16]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800463e:	f00f fa6b 	bl	8013b18 <HAL_UART_Init>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8004648:	f7ff f8d6 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20001c5c 	.word	0x20001c5c
 8004654:	40004800 	.word	0x40004800
 8004658:	000186a0 	.word	0x000186a0

0800465c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004662:	4a12      	ldr	r2, [pc, #72]	@ (80046ac <MX_USART6_UART_Init+0x50>)
 8004664:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004666:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800466c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800466e:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800467a:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 800467c:	2200      	movs	r2, #0
 800467e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004682:	220c      	movs	r2, #12
 8004684:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004688:	2200      	movs	r2, #0
 800468a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004692:	4805      	ldr	r0, [pc, #20]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004694:	f00f fa40 	bl	8013b18 <HAL_UART_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800469e:	f7ff f8ab 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20001ca0 	.word	0x20001ca0
 80046ac:	40011400 	.word	0x40011400

080046b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a78      	ldr	r2, [pc, #480]	@ (80048b0 <HAL_UART_MspInit+0x200>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	f040 8083 	bne.w	80047da <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	4a75      	ldr	r2, [pc, #468]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046de:	f043 0310 	orr.w	r3, r3, #16
 80046e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e4:	4b73      	ldr	r3, [pc, #460]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	4b6f      	ldr	r3, [pc, #444]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	4a6e      	ldr	r2, [pc, #440]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004700:	4b6c      	ldr	r3, [pc, #432]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	4b68      	ldr	r3, [pc, #416]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	4a67      	ldr	r2, [pc, #412]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6313      	str	r3, [r2, #48]	@ 0x30
 800471c:	4b65      	ldr	r3, [pc, #404]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004738:	2307      	movs	r3, #7
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004740:	4619      	mov	r1, r3
 8004742:	485d      	ldr	r0, [pc, #372]	@ (80048b8 <HAL_UART_MspInit+0x208>)
 8004744:	f009 fe0c 	bl	800e360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474e:	2302      	movs	r3, #2
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004752:	2300      	movs	r3, #0
 8004754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004756:	2303      	movs	r3, #3
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800475a:	2307      	movs	r3, #7
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004762:	4619      	mov	r1, r3
 8004764:	4855      	ldr	r0, [pc, #340]	@ (80048bc <HAL_UART_MspInit+0x20c>)
 8004766:	f009 fdfb 	bl	800e360 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800476a:	4b55      	ldr	r3, [pc, #340]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800476c:	4a55      	ldr	r2, [pc, #340]	@ (80048c4 <HAL_UART_MspInit+0x214>)
 800476e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004770:	4b53      	ldr	r3, [pc, #332]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004772:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004776:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004778:	4b51      	ldr	r3, [pc, #324]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800477e:	4b50      	ldr	r3, [pc, #320]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004780:	2200      	movs	r2, #0
 8004782:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004784:	4b4e      	ldr	r3, [pc, #312]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800478a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800478c:	4b4c      	ldr	r3, [pc, #304]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800478e:	2200      	movs	r2, #0
 8004790:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004792:	4b4b      	ldr	r3, [pc, #300]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004798:	4b49      	ldr	r3, [pc, #292]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800479a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800479e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047a0:	4b47      	ldr	r3, [pc, #284]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047a6:	4b46      	ldr	r3, [pc, #280]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047ac:	4844      	ldr	r0, [pc, #272]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047ae:	f009 f9c9 	bl	800db44 <HAL_DMA_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80047b8:	f7ff f81e 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a40      	ldr	r2, [pc, #256]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80047c2:	4a3f      	ldr	r2, [pc, #252]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2105      	movs	r1, #5
 80047cc:	2025      	movs	r0, #37	@ 0x25
 80047ce:	f009 f981 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047d2:	2025      	movs	r0, #37	@ 0x25
 80047d4:	f009 f99a 	bl	800db0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80047d8:	e116      	b.n	8004a08 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3a      	ldr	r2, [pc, #232]	@ (80048c8 <HAL_UART_MspInit+0x218>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d179      	bne.n	80048d8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	4b32      	ldr	r3, [pc, #200]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	4a31      	ldr	r2, [pc, #196]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80047ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80047f4:	4b2f      	ldr	r3, [pc, #188]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	4a2a      	ldr	r2, [pc, #168]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004810:	4b28      	ldr	r3, [pc, #160]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800481c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004822:	2302      	movs	r3, #2
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800482a:	2303      	movs	r3, #3
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800482e:	2307      	movs	r3, #7
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004836:	4619      	mov	r1, r3
 8004838:	4824      	ldr	r0, [pc, #144]	@ (80048cc <HAL_UART_MspInit+0x21c>)
 800483a:	f009 fd91 	bl	800e360 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004840:	4a24      	ldr	r2, [pc, #144]	@ (80048d4 <HAL_UART_MspInit+0x224>)
 8004842:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004844:	4b22      	ldr	r3, [pc, #136]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004846:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800484a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800484c:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004852:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004854:	2200      	movs	r2, #0
 8004856:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004858:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800485a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800485e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004860:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004862:	2200      	movs	r2, #0
 8004864:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004866:	4b1a      	ldr	r3, [pc, #104]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800486c:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800486e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004872:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004874:	4b16      	ldr	r3, [pc, #88]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004876:	2200      	movs	r2, #0
 8004878:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800487c:	2200      	movs	r2, #0
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004880:	4813      	ldr	r0, [pc, #76]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004882:	f009 f95f 	bl	800db44 <HAL_DMA_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800488c:	f7fe ffb4 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0f      	ldr	r2, [pc, #60]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004894:	639a      	str	r2, [r3, #56]	@ 0x38
 8004896:	4a0e      	ldr	r2, [pc, #56]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800489c:	2200      	movs	r2, #0
 800489e:	2105      	movs	r1, #5
 80048a0:	2027      	movs	r0, #39	@ 0x27
 80048a2:	f009 f917 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048a6:	2027      	movs	r0, #39	@ 0x27
 80048a8:	f009 f930 	bl	800db0c <HAL_NVIC_EnableIRQ>
}
 80048ac:	e0ac      	b.n	8004a08 <HAL_UART_MspInit+0x358>
 80048ae:	bf00      	nop
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020400 	.word	0x40020400
 80048bc:	40020000 	.word	0x40020000
 80048c0:	20001ce4 	.word	0x20001ce4
 80048c4:	40026488 	.word	0x40026488
 80048c8:	40004800 	.word	0x40004800
 80048cc:	40020800 	.word	0x40020800
 80048d0:	20001d44 	.word	0x20001d44
 80048d4:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004a10 <HAL_UART_MspInit+0x360>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f040 8092 	bne.w	8004a08 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	4a49      	ldr	r2, [pc, #292]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80048f4:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 80048f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	4a42      	ldr	r2, [pc, #264]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 800490a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004910:	4b40      	ldr	r3, [pc, #256]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800491c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004922:	2302      	movs	r3, #2
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492a:	2303      	movs	r3, #3
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800492e:	2308      	movs	r3, #8
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004936:	4619      	mov	r1, r3
 8004938:	4837      	ldr	r0, [pc, #220]	@ (8004a18 <HAL_UART_MspInit+0x368>)
 800493a:	f009 fd11 	bl	800e360 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800493e:	4b37      	ldr	r3, [pc, #220]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004940:	4a37      	ldr	r2, [pc, #220]	@ (8004a20 <HAL_UART_MspInit+0x370>)
 8004942:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004944:	4b35      	ldr	r3, [pc, #212]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004946:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800494a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800494c:	4b33      	ldr	r3, [pc, #204]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800494e:	2200      	movs	r2, #0
 8004950:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004952:	4b32      	ldr	r3, [pc, #200]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004954:	2200      	movs	r2, #0
 8004956:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004958:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800495a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800495e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004960:	4b2e      	ldr	r3, [pc, #184]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004962:	2200      	movs	r2, #0
 8004964:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004966:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800496c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800496e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004972:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004976:	2200      	movs	r2, #0
 8004978:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800497a:	4b28      	ldr	r3, [pc, #160]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800497c:	2200      	movs	r2, #0
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004980:	4826      	ldr	r0, [pc, #152]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004982:	f009 f8df 	bl	800db44 <HAL_DMA_Init>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 800498c:	f7fe ff34 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004994:	639a      	str	r2, [r3, #56]	@ 0x38
 8004996:	4a21      	ldr	r2, [pc, #132]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800499c:	4b21      	ldr	r3, [pc, #132]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 800499e:	4a22      	ldr	r2, [pc, #136]	@ (8004a28 <HAL_UART_MspInit+0x378>)
 80049a0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80049a2:	4b20      	ldr	r3, [pc, #128]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049a4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80049a8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049ac:	2240      	movs	r2, #64	@ 0x40
 80049ae:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049bc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049be:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049c4:	4b17      	ldr	r3, [pc, #92]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80049ca:	4b16      	ldr	r3, [pc, #88]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049d6:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049d8:	2200      	movs	r2, #0
 80049da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80049dc:	4811      	ldr	r0, [pc, #68]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049de:	f009 f8b1 	bl	800db44 <HAL_DMA_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80049e8:	f7fe ff06 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2105      	movs	r1, #5
 80049fc:	2047      	movs	r0, #71	@ 0x47
 80049fe:	f009 f869 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a02:	2047      	movs	r0, #71	@ 0x47
 8004a04:	f009 f882 	bl	800db0c <HAL_NVIC_EnableIRQ>
}
 8004a08:	bf00      	nop
 8004a0a:	3738      	adds	r7, #56	@ 0x38
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40011400 	.word	0x40011400
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40021800 	.word	0x40021800
 8004a1c:	20001da4 	.word	0x20001da4
 8004a20:	40026428 	.word	0x40026428
 8004a24:	20001e04 	.word	0x20001e04
 8004a28:	400264a0 	.word	0x400264a0

08004a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
	Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a64 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a32:	e003      	b.n	8004a3c <LoopCopyDataInit>

08004a34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a3a:	3104      	adds	r1, #4

08004a3c <LoopCopyDataInit>:
    

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a3c:	480b      	ldr	r0, [pc, #44]	@ (8004a6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a44:	d3f6      	bcc.n	8004a34 <CopyDataInit>
  ldr  r2, =_sbss
 8004a46:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a48:	e002      	b.n	8004a50 <LoopFillZerobss>

08004a4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a4c:	f842 3b04 	str.w	r3, [r2], #4

08004a50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a54:	d3f9      	bcc.n	8004a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a56:	f7ff fa77 	bl	8003f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a5a:	f017 fddb 	bl	801c614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a5e:	f7fe fe1f 	bl	80036a0 <main>
  bx  lr    
 8004a62:	4770      	bx	lr
	Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004a64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a68:	08023f2c 	.word	0x08023f2c
  ldr  r0, =_sdata
 8004a6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a70:	20000808 	.word	0x20000808
  ldr  r2, =_sbss
 8004a74:	20000808 	.word	0x20000808
  ldr  r3, = _ebss
 8004a78:	2000d674 	.word	0x2000d674

08004a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a7c:	e7fe      	b.n	8004a7c <ADC_IRQHandler>

08004a7e <PID_Init>:
#include "typedefs.h"




void PID_Init(PID *pid, double kp, double ki, double kd, double min_output, double max_output) {
 8004a7e:	b480      	push	{r7}
 8004a80:	b08d      	sub	sp, #52	@ 0x34
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004a86:	ed87 0b08 	vstr	d0, [r7, #32]
 8004a8a:	ed87 1b06 	vstr	d1, [r7, #24]
 8004a8e:	ed87 2b04 	vstr	d2, [r7, #16]
 8004a92:	ed87 3b02 	vstr	d3, [r7, #8]
 8004a96:	ed87 4b00 	vstr	d4, [r7]
    pid->kp = kp;
 8004a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa0:	e9c1 2300 	strd	r2, r3, [r1]
    pid->ki = ki;
 8004aa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->kd = kd;
 8004aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ab4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->prev_error = 0;
 8004ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0;
 8004ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->max_output = max_output;
 8004ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ada:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    pid->min_output = min_output;
 8004ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8004ae8:	bf00      	nop
 8004aea:	3734      	adds	r7, #52	@ 0x34
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <PID_Compute>:

double PID_Compute(PID *pid, double setpoint, double measured_value, double dt, double deadzone) {
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	b090      	sub	sp, #64	@ 0x40
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6278      	str	r0, [r7, #36]	@ 0x24
 8004afc:	ed87 0b06 	vstr	d0, [r7, #24]
 8004b00:	ed87 1b04 	vstr	d1, [r7, #16]
 8004b04:	ed87 2b02 	vstr	d2, [r7, #8]
 8004b08:	ed87 3b00 	vstr	d3, [r7]
    double error = setpoint - measured_value;
 8004b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b14:	f7fb fbb8 	bl	8000288 <__aeabi_dsub>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    if (error < deadzone && error > -deadzone ){
 8004b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b28:	f7fb ffd8 	bl	8000adc <__aeabi_dcmplt>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <PID_Compute+0x64>
 8004b32:	683c      	ldr	r4, [r7, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b42:	f7fb ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <PID_Compute+0x64>
    	error = 0.0;
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    pid->integral += error * dt;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b66:	f7fb fd47 	bl	80005f8 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4620      	mov	r0, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7fb fb8b 	bl	800028c <__adddf3>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b7c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    double derivative = (error - pid->prev_error) / dt;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004b86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b8a:	f7fb fb7d 	bl	8000288 <__aeabi_dsub>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b9a:	f7fb fe57 	bl	800084c <__aeabi_ddiv>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bb0:	f7fb fd22 	bl	80005f8 <__aeabi_dmul>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bc8:	f7fb fd16 	bl	80005f8 <__aeabi_dmul>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7fb fb5a 	bl	800028c <__adddf3>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bea:	f7fb fd05 	bl	80005f8 <__aeabi_dmul>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7fb fb49 	bl	800028c <__adddf3>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Clamp the output to the specified max and min limits
    if (output > pid->max_output) {
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004c08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004c0c:	f7fb ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <PID_Compute+0x12e>
        output = pid->max_output;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004c1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004c20:	e00e      	b.n	8004c40 <PID_Compute+0x14c>
    } else if (output < pid->min_output) {
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004c28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004c2c:	f7fb ff56 	bl	8000adc <__aeabi_dcmplt>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <PID_Compute+0x14c>
        output = pid->min_output;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004c3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    pid->prev_error = error;
 8004c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c46:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->output =  output;
 8004c4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c50:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Comment this out if you are testing the leg locking only
   return output;
 8004c54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c58:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c60:	eef0 0a67 	vmov.f32	s1, s15
 8004c64:	3740      	adds	r7, #64	@ 0x40
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6a:	0000      	movs	r0, r0
 8004c6c:	0000      	movs	r0, r0
	...

08004c70 <Ctrl_Task>:

	vTaskDelete(NULL);
}

void Ctrl_Task(void *arg)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b0ec      	sub	sp, #432	@ 0x1b0
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8004c7c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004c80:	6018      	str	r0, [r3, #0]
	double starttime = 0;
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	double endtime = 0;
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	double dt;
//	const float wheelRadius = 0.045f; //m, wheel radius
	const float wheelRadius = 0.075f; //m, wheel radius
 8004c9a:	4bbd      	ldr	r3, [pc, #756]	@ (8004f90 <Ctrl_Task+0x320>)
 8004c9c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
	const float legMass = 0.01f; //kg, leg mass
 8004ca0:	4bbc      	ldr	r3, [pc, #752]	@ (8004f94 <Ctrl_Task+0x324>)
 8004ca2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8004ca6:	f015 f841 	bl	8019d2c <xTaskGetTickCount>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	//Manually apply a coefficient to the feedback matrix for manually optimizing control performance
	float kRatio[2][6] = {{1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f},
 8004cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8004f98 <Ctrl_Task+0x328>)
 8004cb2:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						{1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f}};
	float lqrTpRatio = 1.0f, lqrTRatio = 1.0f;
 8004cc8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ccc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004cd0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004cd4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

	//Set initial target values
	target.rollAngle = 0.0f;
 8004cd8:	4bb0      	ldr	r3, [pc, #704]	@ (8004f9c <Ctrl_Task+0x32c>)
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
//	target.legLength = 0.12f;
	target.legLength = 0.10f;
 8004ce0:	4bae      	ldr	r3, [pc, #696]	@ (8004f9c <Ctrl_Task+0x32c>)
 8004ce2:	4aaf      	ldr	r2, [pc, #700]	@ (8004fa0 <Ctrl_Task+0x330>)
 8004ce4:	619a      	str	r2, [r3, #24]
	target.speed = 0.0f;
 8004ce6:	4bad      	ldr	r3, [pc, #692]	@ (8004f9c <Ctrl_Task+0x32c>)
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
	target.position = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 8004cee:	4bad      	ldr	r3, [pc, #692]	@ (8004fa4 <Ctrl_Task+0x334>)
 8004cf0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004cf4:	4bac      	ldr	r3, [pc, #688]	@ (8004fa8 <Ctrl_Task+0x338>)
 8004cf6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cfa:	f7fb fac7 	bl	800028c <__adddf3>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d0e:	f7fb fd9d 	bl	800084c <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4614      	mov	r4, r2
 8004d18:	461d      	mov	r5, r3
 8004d1a:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8004d1e:	f7fb fc13 	bl	8000548 <__aeabi_f2d>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4620      	mov	r0, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	f7fb fc65 	bl	80005f8 <__aeabi_dmul>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7fb ff57 	bl	8000be8 <__aeabi_d2f>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4a97      	ldr	r2, [pc, #604]	@ (8004f9c <Ctrl_Task+0x32c>)
 8004d3e:	6013      	str	r3, [r2, #0]

	while (1)
	{
		endtime = get_microseconds();
 8004d40:	f7fd fa3e 	bl	80021c0 <get_microseconds>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fbdc 	bl	8000504 <__aeabi_ui2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		dt = endtime - starttime;
 8004d54:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8004d58:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8004d5c:	f7fb fa94 	bl	8000288 <__aeabi_dsub>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		check_dt = dt;
 8004d68:	4990      	ldr	r1, [pc, #576]	@ (8004fac <Ctrl_Task+0x33c>)
 8004d6a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8004d6e:	e9c1 2300 	strd	r2, r3, [r1]
		starttime = get_microseconds();
 8004d72:	f7fd fa25 	bl	80021c0 <get_microseconds>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb fbc3 	bl	8000504 <__aeabi_ui2d>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
		//Calculate state variables
		stateVar.phi = imu_heading.pit;
 8004d86:	4b8a      	ldr	r3, [pc, #552]	@ (8004fb0 <Ctrl_Task+0x340>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a8a      	ldr	r2, [pc, #552]	@ (8004fb4 <Ctrl_Task+0x344>)
 8004d8c:	6113      	str	r3, [r2, #16]
		stateVar.dPhi = imu_heading.dpit;
 8004d8e:	4b88      	ldr	r3, [pc, #544]	@ (8004fb0 <Ctrl_Task+0x340>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	4a88      	ldr	r2, [pc, #544]	@ (8004fb4 <Ctrl_Task+0x344>)
 8004d94:	6153      	str	r3, [r2, #20]
		stateVar.x = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 8004d96:	4b83      	ldr	r3, [pc, #524]	@ (8004fa4 <Ctrl_Task+0x334>)
 8004d98:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d9c:	4b82      	ldr	r3, [pc, #520]	@ (8004fa8 <Ctrl_Task+0x338>)
 8004d9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004da2:	f7fb fa73 	bl	800028c <__adddf3>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004db6:	f7fb fd49 	bl	800084c <__aeabi_ddiv>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	461d      	mov	r5, r3
 8004dc2:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8004dc6:	f7fb fbbf 	bl	8000548 <__aeabi_f2d>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fc11 	bl	80005f8 <__aeabi_dmul>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f7fb ff03 	bl	8000be8 <__aeabi_d2f>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a73      	ldr	r2, [pc, #460]	@ (8004fb4 <Ctrl_Task+0x344>)
 8004de6:	6093      	str	r3, [r2, #8]
		stateVar.dx = (leftWheel.speed + rightWheel.speed) / 2 * wheelRadius;
 8004de8:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa4 <Ctrl_Task+0x334>)
 8004dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dee:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa8 <Ctrl_Task+0x338>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb fa4a 	bl	800028c <__adddf3>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004e08:	f7fb fd20 	bl	800084c <__aeabi_ddiv>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	461d      	mov	r5, r3
 8004e14:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8004e18:	f7fb fb96 	bl	8000548 <__aeabi_f2d>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4620      	mov	r0, r4
 8004e22:	4629      	mov	r1, r5
 8004e24:	f7fb fbe8 	bl	80005f8 <__aeabi_dmul>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f7fb feda 	bl	8000be8 <__aeabi_d2f>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb4 <Ctrl_Task+0x344>)
 8004e38:	60d3      	str	r3, [r2, #12]
		stateVar.theta = (leftLegPos.angle + rightLegPos.angle) / 2 - M_PI_2 - imu_heading.pit;
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb8 <Ctrl_Task+0x348>)
 8004e3c:	ed93 7a00 	vldr	s14, [r3]
 8004e40:	4b5e      	ldr	r3, [pc, #376]	@ (8004fbc <Ctrl_Task+0x34c>)
 8004e42:	edd3 7a00 	vldr	s15, [r3]
 8004e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004e4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e52:	ee16 0a90 	vmov	r0, s13
 8004e56:	f7fb fb77 	bl	8000548 <__aeabi_f2d>
 8004e5a:	a349      	add	r3, pc, #292	@ (adr r3, 8004f80 <Ctrl_Task+0x310>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f7fb fa12 	bl	8000288 <__aeabi_dsub>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	4b50      	ldr	r3, [pc, #320]	@ (8004fb0 <Ctrl_Task+0x340>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fb fb69 	bl	8000548 <__aeabi_f2d>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fa03 	bl	8000288 <__aeabi_dsub>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fead 	bl	8000be8 <__aeabi_d2f>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4a48      	ldr	r2, [pc, #288]	@ (8004fb4 <Ctrl_Task+0x344>)
 8004e92:	6013      	str	r3, [r2, #0]
		stateVar.dTheta = (leftLegPos.dAngle + rightLegPos.dAngle) / 2 - imu_heading.dpit;
 8004e94:	4b48      	ldr	r3, [pc, #288]	@ (8004fb8 <Ctrl_Task+0x348>)
 8004e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e9a:	4b48      	ldr	r3, [pc, #288]	@ (8004fbc <Ctrl_Task+0x34c>)
 8004e9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004ea8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004eac:	4b40      	ldr	r3, [pc, #256]	@ (8004fb0 <Ctrl_Task+0x340>)
 8004eae:	edd3 7a03 	vldr	s15, [r3, #12]
 8004eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb4 <Ctrl_Task+0x344>)
 8004eb8:	edc3 7a01 	vstr	s15, [r3, #4]
		double legLength = (leftLegPos.length + rightLegPos.length) / 2;
 8004ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb8 <Ctrl_Task+0x348>)
 8004ebe:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fbc <Ctrl_Task+0x34c>)
 8004ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ecc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004ed0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ed4:	ee16 0a90 	vmov	r0, s13
 8004ed8:	f7fb fb36 	bl	8000548 <__aeabi_f2d>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		double dLegLength = (leftLegPos.dLength + rightLegPos.dLength) / 2;
 8004ee4:	4b34      	ldr	r3, [pc, #208]	@ (8004fb8 <Ctrl_Task+0x348>)
 8004ee6:	ed93 7a03 	vldr	s14, [r3, #12]
 8004eea:	4b34      	ldr	r3, [pc, #208]	@ (8004fbc <Ctrl_Task+0x34c>)
 8004eec:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004ef8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004efc:	ee16 0a90 	vmov	r0, s13
 8004f00:	f7fb fb22 	bl	8000548 <__aeabi_f2d>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

		//If in stand-up preparation mode, skip further control
		if(standupState == StandupState_Prepare)
 8004f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc0 <Ctrl_Task+0x350>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <Ctrl_Task+0x2b4>
		{
			vTaskDelayUntil(&xLastWakeTime, 4);
 8004f14:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004f18:	2104      	movs	r1, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f014 fd32 	bl	8019984 <vTaskDelayUntil>
			continue;
 8004f20:	f000 bf7e 	b.w	8005e20 <Ctrl_Task+0x11b0>
		}

		//Compute LQR feedback matrix
		double kRes[12] = {0}, k[2][6] = {0};
 8004f24:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8004f28:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	2360      	movs	r3, #96	@ 0x60
 8004f30:	461a      	mov	r2, r3
 8004f32:	2100      	movs	r1, #0
 8004f34:	f017 faed 	bl	801c512 <memset>
 8004f38:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8004f3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f40:	4618      	mov	r0, r3
 8004f42:	2360      	movs	r3, #96	@ 0x60
 8004f44:	461a      	mov	r2, r3
 8004f46:	2100      	movs	r1, #0
 8004f48:	f017 fae3 	bl	801c512 <memset>
		lqr_k(legLength, kRes);
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	4618      	mov	r0, r3
 8004f52:	ed97 0b56 	vldr	d0, [r7, #344]	@ 0x158
 8004f56:	f004 faef 	bl	8009538 <lqr_k>
//		lqr_k(0.12, k_check);
		lqr_k(0.10, k_check);
 8004f5a:	481a      	ldr	r0, [pc, #104]	@ (8004fc4 <Ctrl_Task+0x354>)
 8004f5c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8004f88 <Ctrl_Task+0x318>
 8004f60:	f004 faea 	bl	8009538 <lqr_k>
		if(groundDetector.isTouchingGround) //Normal ground contact state
 8004f64:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <Ctrl_Task+0x358>)
 8004f66:	7a1b      	ldrb	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07d      	beq.n	8005068 <Ctrl_Task+0x3f8>
		{
			for (int i = 0; i < 6; i++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004f72:	e074      	b.n	800505e <Ctrl_Task+0x3ee>
			{
				for (int j = 0; j < 2; j++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004f7a:	e067      	b.n	800504c <Ctrl_Task+0x3dc>
 8004f7c:	f3af 8000 	nop.w
 8004f80:	54442d18 	.word	0x54442d18
 8004f84:	3ff921fb 	.word	0x3ff921fb
 8004f88:	9999999a 	.word	0x9999999a
 8004f8c:	3fb99999 	.word	0x3fb99999
 8004f90:	3d99999a 	.word	0x3d99999a
 8004f94:	3c23d70a 	.word	0x3c23d70a
 8004f98:	0802318c 	.word	0x0802318c
 8004f9c:	20000008 	.word	0x20000008
 8004fa0:	3dcccccd 	.word	0x3dcccccd
 8004fa4:	20001f88 	.word	0x20001f88
 8004fa8:	20001fd0 	.word	0x20001fd0
 8004fac:	20002190 	.word	0x20002190
 8004fb0:	20003ad8 	.word	0x20003ad8
 8004fb4:	20002040 	.word	0x20002040
 8004fb8:	20002018 	.word	0x20002018
 8004fbc:	2000202c 	.word	0x2000202c
 8004fc0:	20002058 	.word	0x20002058
 8004fc4:	200021b8 	.word	0x200021b8
 8004fc8:	20000024 	.word	0x20000024
					k[j][i] = kRes[i * 2 + j] * kRatio[j][i];
 8004fcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004fd0:	005a      	lsls	r2, r3, #1
 8004fd2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8004fdc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004fe8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8005000:	443b      	add	r3, r7
 8005002:	3bac      	subs	r3, #172	@ 0xac
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fa9e 	bl	8000548 <__aeabi_f2d>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005024:	f5a3 74a4 	sub.w	r4, r3, #328	@ 0x148
 8005028:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4423      	add	r3, r4
 800503e:	e9c3 0100 	strd	r0, r1, [r3]
				for (int j = 0; j < 2; j++)
 8005042:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005046:	3301      	adds	r3, #1
 8005048:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800504c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005050:	2b01      	cmp	r3, #1
 8005052:	ddbb      	ble.n	8004fcc <Ctrl_Task+0x35c>
			for (int i = 0; i < 6; i++)
 8005054:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005058:	3301      	adds	r3, #1
 800505a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800505e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005062:	2b05      	cmp	r3, #5
 8005064:	dd86      	ble.n	8004f74 <Ctrl_Task+0x304>
 8005066:	e02d      	b.n	80050c4 <Ctrl_Task+0x454>
			}
		}
		else //Leg-off-ground state, manually modify the feedback matrix to only keep the leg vertical
		{
			memset(k, 0, sizeof(k));
 8005068:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800506c:	2260      	movs	r2, #96	@ 0x60
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f017 fa4e 	bl	801c512 <memset>
			k[1][0] = kRes[1] * -2;
 8005076:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800507a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800507e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800508a:	f7fb fab5 	bl	80005f8 <__aeabi_dmul>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 8005096:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800509a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			k[1][1] = kRes[3] * -10;
 800509e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80050a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80050a6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	4bda      	ldr	r3, [pc, #872]	@ (8005418 <Ctrl_Task+0x7a8>)
 80050b0:	f7fb faa2 	bl	80005f8 <__aeabi_dmul>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 80050bc:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80050c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		}

		//Prepare state variables
		float x[6] = {stateVar.theta, stateVar.dTheta, stateVar.x, stateVar.dx, stateVar.phi, stateVar.dPhi};
 80050c4:	4bd5      	ldr	r3, [pc, #852]	@ (800541c <Ctrl_Task+0x7ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050cc:	4bd3      	ldr	r3, [pc, #844]	@ (800541c <Ctrl_Task+0x7ac>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80050d4:	4bd1      	ldr	r3, [pc, #836]	@ (800541c <Ctrl_Task+0x7ac>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80050dc:	4bcf      	ldr	r3, [pc, #828]	@ (800541c <Ctrl_Task+0x7ac>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050e4:	4bcd      	ldr	r3, [pc, #820]	@ (800541c <Ctrl_Task+0x7ac>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050ec:	4bcb      	ldr	r3, [pc, #812]	@ (800541c <Ctrl_Task+0x7ac>)
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		//Subtract given values
		x[2] -= target.position;
 80050f4:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 80050f8:	4bc9      	ldr	r3, [pc, #804]	@ (8005420 <Ctrl_Task+0x7b0>)
 80050fa:	edd3 7a00 	vldr	s15, [r3]
 80050fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005102:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
		x[3] -= target.speed;
 8005106:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800510a:	4bc5      	ldr	r3, [pc, #788]	@ (8005420 <Ctrl_Task+0x7b0>)
 800510c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005114:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
		check_x = x[2];
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	4ac1      	ldr	r2, [pc, #772]	@ (8005424 <Ctrl_Task+0x7b4>)
 800511e:	6013      	str	r3, [r2, #0]
		//Matrix multiplication, calculate LQR output
		float lqrOutT = k[0][0] * x[0] + k[0][1] * x[1] + k[0][2] * x[2] + k[0][3] * x[3] + k[0][4] * x[4] + k[0][5] * x[5];
 8005120:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005124:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005128:	e9d3 4500 	ldrd	r4, r5, [r3]
 800512c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005130:	4618      	mov	r0, r3
 8005132:	f7fb fa09 	bl	8000548 <__aeabi_f2d>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f7fb fa5b 	bl	80005f8 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4692      	mov	sl, r2
 8005148:	469b      	mov	fp, r3
 800514a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800514e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005152:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005156:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9f4 	bl	8000548 <__aeabi_f2d>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb fa46 	bl	80005f8 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4650      	mov	r0, sl
 8005172:	4659      	mov	r1, fp
 8005174:	f7fb f88a 	bl	800028c <__adddf3>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4692      	mov	sl, r2
 800517e:	469b      	mov	fp, r3
 8005180:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005184:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005188:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb f9d9 	bl	8000548 <__aeabi_f2d>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4620      	mov	r0, r4
 800519c:	4629      	mov	r1, r5
 800519e:	f7fb fa2b 	bl	80005f8 <__aeabi_dmul>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4650      	mov	r0, sl
 80051a8:	4659      	mov	r1, fp
 80051aa:	f7fb f86f 	bl	800028c <__adddf3>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4692      	mov	sl, r2
 80051b4:	469b      	mov	fp, r3
 80051b6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80051ba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051be:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80051c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb f9be 	bl	8000548 <__aeabi_f2d>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb fa10 	bl	80005f8 <__aeabi_dmul>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4650      	mov	r0, sl
 80051de:	4659      	mov	r1, fp
 80051e0:	f7fb f854 	bl	800028c <__adddf3>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4692      	mov	sl, r2
 80051ea:	469b      	mov	fp, r3
 80051ec:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80051f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051f4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80051f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fb f9a3 	bl	8000548 <__aeabi_f2d>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fb f9f5 	bl	80005f8 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4650      	mov	r0, sl
 8005214:	4659      	mov	r1, fp
 8005216:	f7fb f839 	bl	800028c <__adddf3>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4692      	mov	sl, r2
 8005220:	469b      	mov	fp, r3
 8005222:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005226:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800522a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800522e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005232:	4618      	mov	r0, r3
 8005234:	f7fb f988 	bl	8000548 <__aeabi_f2d>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4620      	mov	r0, r4
 800523e:	4629      	mov	r1, r5
 8005240:	f7fb f9da 	bl	80005f8 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4650      	mov	r0, sl
 800524a:	4659      	mov	r1, fp
 800524c:	f7fb f81e 	bl	800028c <__adddf3>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	f7fb fcc6 	bl	8000be8 <__aeabi_d2f>
 800525c:	4603      	mov	r3, r0
 800525e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		float lqrOutTp = k[1][0] * x[0] + k[1][1] * x[1] + k[1][2] * x[2] + k[1][3] * x[3] + k[1][4] * x[4] + k[1][5] * x[5];
 8005262:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005266:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800526a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800526e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f968 	bl	8000548 <__aeabi_f2d>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4620      	mov	r0, r4
 800527e:	4629      	mov	r1, r5
 8005280:	f7fb f9ba 	bl	80005f8 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4692      	mov	sl, r2
 800528a:	469b      	mov	fp, r3
 800528c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005290:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005294:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005298:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb f953 	bl	8000548 <__aeabi_f2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4620      	mov	r0, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	f7fb f9a5 	bl	80005f8 <__aeabi_dmul>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4650      	mov	r0, sl
 80052b4:	4659      	mov	r1, fp
 80052b6:	f7fa ffe9 	bl	800028c <__adddf3>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4692      	mov	sl, r2
 80052c0:	469b      	mov	fp, r3
 80052c2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80052c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052ca:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f938 	bl	8000548 <__aeabi_f2d>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	f7fb f98a 	bl	80005f8 <__aeabi_dmul>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4650      	mov	r0, sl
 80052ea:	4659      	mov	r1, fp
 80052ec:	f7fa ffce 	bl	800028c <__adddf3>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4692      	mov	sl, r2
 80052f6:	469b      	mov	fp, r3
 80052f8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80052fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005300:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8005304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005308:	4618      	mov	r0, r3
 800530a:	f7fb f91d 	bl	8000548 <__aeabi_f2d>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4620      	mov	r0, r4
 8005314:	4629      	mov	r1, r5
 8005316:	f7fb f96f 	bl	80005f8 <__aeabi_dmul>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4650      	mov	r0, sl
 8005320:	4659      	mov	r1, fp
 8005322:	f7fa ffb3 	bl	800028c <__adddf3>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4692      	mov	sl, r2
 800532c:	469b      	mov	fp, r3
 800532e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005332:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005336:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb f902 	bl	8000548 <__aeabi_f2d>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fb f954 	bl	80005f8 <__aeabi_dmul>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4650      	mov	r0, sl
 8005356:	4659      	mov	r1, fp
 8005358:	f7fa ff98 	bl	800028c <__adddf3>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4692      	mov	sl, r2
 8005362:	469b      	mov	fp, r3
 8005364:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005368:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800536c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8005370:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005374:	4618      	mov	r0, r3
 8005376:	f7fb f8e7 	bl	8000548 <__aeabi_f2d>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fb f939 	bl	80005f8 <__aeabi_dmul>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4650      	mov	r0, sl
 800538c:	4659      	mov	r1, fp
 800538e:	f7fa ff7d 	bl	800028c <__adddf3>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fc25 	bl	8000be8 <__aeabi_d2f>
 800539e:	4603      	mov	r3, r0
 80053a0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
		lqrOutT_check = -lqrOutT;
 80053a4:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80053a8:	eef1 7a67 	vneg.f32	s15, s15
 80053ac:	ee17 3a90 	vmov	r3, s15
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fb f8c9 	bl	8000548 <__aeabi_f2d>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	491b      	ldr	r1, [pc, #108]	@ (8005428 <Ctrl_Task+0x7b8>)
 80053bc:	e9c1 2300 	strd	r2, r3, [r1]
		lqrOutTp_check = -lqrOutTp;
 80053c0:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80053c4:	eef1 7a67 	vneg.f32	s15, s15
 80053c8:	ee17 3a90 	vmov	r3, s15
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb f8bb 	bl	8000548 <__aeabi_f2d>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4915      	ldr	r1, [pc, #84]	@ (800542c <Ctrl_Task+0x7bc>)
 80053d8:	e9c1 2300 	strd	r2, r3, [r1]
		//Calculate yaw axis PID output
		PID_Compute(&yawPID, target.yawAngle, imu_heading.yaw,0.004,0);
 80053dc:	4b10      	ldr	r3, [pc, #64]	@ (8005420 <Ctrl_Task+0x7b0>)
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb f8b1 	bl	8000548 <__aeabi_f2d>
 80053e6:	4604      	mov	r4, r0
 80053e8:	460d      	mov	r5, r1
 80053ea:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <Ctrl_Task+0x7c0>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fb f8aa 	bl	8000548 <__aeabi_f2d>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	ed9f 3b03 	vldr	d3, [pc, #12]	@ 8005408 <Ctrl_Task+0x798>
 80053fc:	ed9f 2b04 	vldr	d2, [pc, #16]	@ 8005410 <Ctrl_Task+0x7a0>
 8005400:	ec43 2b11 	vmov	d1, r2, r3
 8005404:	e016      	b.n	8005434 <Ctrl_Task+0x7c4>
 8005406:	bf00      	nop
	...
 8005410:	d2f1a9fc 	.word	0xd2f1a9fc
 8005414:	3f70624d 	.word	0x3f70624d
 8005418:	c0240000 	.word	0xc0240000
 800541c:	20002040 	.word	0x20002040
 8005420:	20000008 	.word	0x20000008
 8005424:	20002218 	.word	0x20002218
 8005428:	20002168 	.word	0x20002168
 800542c:	20002160 	.word	0x20002160
 8005430:	20003ad8 	.word	0x20003ad8
 8005434:	ec45 4b10 	vmov	d0, r4, r5
 8005438:	4863      	ldr	r0, [pc, #396]	@ (80055c8 <Ctrl_Task+0x958>)
 800543a:	f7ff fb5b 	bl	8004af4 <PID_Compute>

		//Set wheel motor output torque, combined with LQR and yaw axis PID output
		if(groundDetector.isTouchingGround) //正常接地状态
 800543e:	4b63      	ldr	r3, [pc, #396]	@ (80055cc <Ctrl_Task+0x95c>)
 8005440:	7a1b      	ldrb	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d035      	beq.n	80054b2 <Ctrl_Task+0x842>
		{
//			Motor_SetTorque(&leftWheel, -lqrOutT * lqrTRatio - yawPID.output);
//			Motor_SetTorque(&rightWheel, -lqrOutT * lqrTRatio + yawPID.output);
			g_can_motors[LEFT_MOTOR_ID-1].torque = -lqrOutT * lqrTRatio + yawPID.output;
 8005446:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 800544a:	eeb1 7a67 	vneg.f32	s14, s15
 800544e:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8005452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005456:	ee17 0a90 	vmov	r0, s15
 800545a:	f7fb f875 	bl	8000548 <__aeabi_f2d>
 800545e:	4b5a      	ldr	r3, [pc, #360]	@ (80055c8 <Ctrl_Task+0x958>)
 8005460:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005464:	f7fa ff12 	bl	800028c <__adddf3>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	f7fb fbba 	bl	8000be8 <__aeabi_d2f>
 8005474:	4603      	mov	r3, r0
 8005476:	4a56      	ldr	r2, [pc, #344]	@ (80055d0 <Ctrl_Task+0x960>)
 8005478:	6293      	str	r3, [r2, #40]	@ 0x28
			g_can_motors[RIGHT_MOTOR_ID-1].torque = -lqrOutT * lqrTRatio - yawPID.output;
 800547a:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 800547e:	eeb1 7a67 	vneg.f32	s14, s15
 8005482:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	ee17 0a90 	vmov	r0, s15
 800548e:	f7fb f85b 	bl	8000548 <__aeabi_f2d>
 8005492:	4b4d      	ldr	r3, [pc, #308]	@ (80055c8 <Ctrl_Task+0x958>)
 8005494:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005498:	f7fa fef6 	bl	8000288 <__aeabi_dsub>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	f7fb fba0 	bl	8000be8 <__aeabi_d2f>
 80054a8:	4603      	mov	r3, r0
 80054aa:	4a49      	ldr	r2, [pc, #292]	@ (80055d0 <Ctrl_Task+0x960>)
 80054ac:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
 80054b0:	e008      	b.n	80054c4 <Ctrl_Task+0x854>
		}
		else //Leg-off-ground state, turn off wheel motors
		{
//			Motor_SetTorque(&leftWheel, 0);
//			Motor_SetTorque(&rightWheel, 0);
			g_can_motors[LEFT_MOTOR_ID-1].torque = 0;
 80054b2:	4b47      	ldr	r3, [pc, #284]	@ (80055d0 <Ctrl_Task+0x960>)
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	629a      	str	r2, [r3, #40]	@ 0x28
			g_can_motors[RIGHT_MOTOR_ID-1].torque = 0;
 80054ba:	4b45      	ldr	r3, [pc, #276]	@ (80055d0 <Ctrl_Task+0x960>)
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
		}

		//Adjust target leg length based on ground contact state, and compute leg length PID output
//		PID_Compute(&legLengthPID, (groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? target.legLength : 0.2f, legLength,0.004,0.001);
		PID_Compute(&legLengthPID, (groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? target.legLength : 0.15f, legLength,0.004,0.001);
 80054c4:	4b41      	ldr	r3, [pc, #260]	@ (80055cc <Ctrl_Task+0x95c>)
 80054c6:	7a1b      	ldrb	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <Ctrl_Task+0x87a>
 80054cc:	4b3f      	ldr	r3, [pc, #252]	@ (80055cc <Ctrl_Task+0x95c>)
 80054ce:	7a5b      	ldrb	r3, [r3, #9]
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <Ctrl_Task+0x87a>
 80054da:	4b3e      	ldr	r3, [pc, #248]	@ (80055d4 <Ctrl_Task+0x964>)
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fb f832 	bl	8000548 <__aeabi_f2d>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	e002      	b.n	80054f0 <Ctrl_Task+0x880>
 80054ea:	a331      	add	r3, pc, #196	@ (adr r3, 80055b0 <Ctrl_Task+0x940>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	ed9f 3b31 	vldr	d3, [pc, #196]	@ 80055b8 <Ctrl_Task+0x948>
 80054f4:	ed9f 2b32 	vldr	d2, [pc, #200]	@ 80055c0 <Ctrl_Task+0x950>
 80054f8:	ed97 1b56 	vldr	d1, [r7, #344]	@ 0x158
 80054fc:	ec43 2b10 	vmov	d0, r2, r3
 8005500:	4835      	ldr	r0, [pc, #212]	@ (80055d8 <Ctrl_Task+0x968>)
 8005502:	f7ff faf7 	bl	8004af4 <PID_Compute>
		//Calculate roll axis PID output
		PID_Compute(&rollPID, target.rollAngle, imu_heading.rol,0.004,0.001);
 8005506:	4b33      	ldr	r3, [pc, #204]	@ (80055d4 <Ctrl_Task+0x964>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fb f81c 	bl	8000548 <__aeabi_f2d>
 8005510:	4604      	mov	r4, r0
 8005512:	460d      	mov	r5, r1
 8005514:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <Ctrl_Task+0x96c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fb f815 	bl	8000548 <__aeabi_f2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	ed9f 3b25 	vldr	d3, [pc, #148]	@ 80055b8 <Ctrl_Task+0x948>
 8005526:	ed9f 2b26 	vldr	d2, [pc, #152]	@ 80055c0 <Ctrl_Task+0x950>
 800552a:	ec43 2b11 	vmov	d1, r2, r3
 800552e:	ec45 4b10 	vmov	d0, r4, r5
 8005532:	482b      	ldr	r0, [pc, #172]	@ (80055e0 <Ctrl_Task+0x970>)
 8005534:	f7ff fade 	bl	8004af4 <PID_Compute>
		//Calculate the push force for each leg, ignore roll PID output and feedforward when legs are off the ground
		double leftForce = legLengthPID.output + ((groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? +rollPID.output : 0) + 13;
 8005538:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <Ctrl_Task+0x968>)
 800553a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800553e:	4923      	ldr	r1, [pc, #140]	@ (80055cc <Ctrl_Task+0x95c>)
 8005540:	7a09      	ldrb	r1, [r1, #8]
 8005542:	2900      	cmp	r1, #0
 8005544:	d00a      	beq.n	800555c <Ctrl_Task+0x8ec>
 8005546:	4921      	ldr	r1, [pc, #132]	@ (80055cc <Ctrl_Task+0x95c>)
 8005548:	7a49      	ldrb	r1, [r1, #9]
 800554a:	f081 0101 	eor.w	r1, r1, #1
 800554e:	b2c9      	uxtb	r1, r1
 8005550:	2900      	cmp	r1, #0
 8005552:	d003      	beq.n	800555c <Ctrl_Task+0x8ec>
 8005554:	4922      	ldr	r1, [pc, #136]	@ (80055e0 <Ctrl_Task+0x970>)
 8005556:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800555a:	e003      	b.n	8005564 <Ctrl_Task+0x8f4>
 800555c:	f04f 0000 	mov.w	r0, #0
 8005560:	f04f 0100 	mov.w	r1, #0
 8005564:	f7fa fe92 	bl	800028c <__adddf3>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <Ctrl_Task+0x974>)
 8005576:	f7fa fe89 	bl	800028c <__adddf3>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
		double rightForce = legLengthPID.output + ((groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? -rollPID.output : 0) + 13;
 8005582:	4b15      	ldr	r3, [pc, #84]	@ (80055d8 <Ctrl_Task+0x968>)
 8005584:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005588:	4b10      	ldr	r3, [pc, #64]	@ (80055cc <Ctrl_Task+0x95c>)
 800558a:	7a1b      	ldrb	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d02b      	beq.n	80055e8 <Ctrl_Task+0x978>
 8005590:	4b0e      	ldr	r3, [pc, #56]	@ (80055cc <Ctrl_Task+0x95c>)
 8005592:	7a5b      	ldrb	r3, [r3, #9]
 8005594:	f083 0301 	eor.w	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d024      	beq.n	80055e8 <Ctrl_Task+0x978>
 800559e:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <Ctrl_Task+0x970>)
 80055a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80055a4:	4690      	mov	r8, r2
 80055a6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80055aa:	e021      	b.n	80055f0 <Ctrl_Task+0x980>
 80055ac:	f3af 8000 	nop.w
 80055b0:	40000000 	.word	0x40000000
 80055b4:	3fc33333 	.word	0x3fc33333
 80055b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80055bc:	3f50624d 	.word	0x3f50624d
 80055c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80055c4:	3f70624d 	.word	0x3f70624d
 80055c8:	200020e0 	.word	0x200020e0
 80055cc:	20000024 	.word	0x20000024
 80055d0:	20002220 	.word	0x20002220
 80055d4:	20000008 	.word	0x20000008
 80055d8:	200020a0 	.word	0x200020a0
 80055dc:	20003ad8 	.word	0x20003ad8
 80055e0:	20002120 	.word	0x20002120
 80055e4:	402a0000 	.word	0x402a0000
 80055e8:	f04f 0800 	mov.w	r8, #0
 80055ec:	f04f 0900 	mov.w	r9, #0
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	f7fa fe48 	bl	800028c <__adddf3>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	4b62      	ldr	r3, [pc, #392]	@ (8005794 <Ctrl_Task+0xb24>)
 800560a:	f7fa fe3f 	bl	800028c <__adddf3>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
//		double leftForce = legLengthPID.output + 5.0;
//		double rightForce = legLengthPID.output + 5.0;
		if(leftLegPos.length > 0.15f) //Protect the leg from extending too long
 8005616:	4b60      	ldr	r3, [pc, #384]	@ (8005798 <Ctrl_Task+0xb28>)
 8005618:	edd3 7a01 	vldr	s15, [r3, #4]
 800561c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800579c <Ctrl_Task+0xb2c>
 8005620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	dd14      	ble.n	8005654 <Ctrl_Task+0x9e4>
			leftForce -= (leftLegPos.length - 0.1f) * 1;
 800562a:	4b5b      	ldr	r3, [pc, #364]	@ (8005798 <Ctrl_Task+0xb28>)
 800562c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005630:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80057a0 <Ctrl_Task+0xb30>
 8005634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005638:	ee17 0a90 	vmov	r0, s15
 800563c:	f7fa ff84 	bl	8000548 <__aeabi_f2d>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005648:	f7fa fe1e 	bl	8000288 <__aeabi_dsub>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
		if(rightLegPos.length > 0.15f)
 8005654:	4b53      	ldr	r3, [pc, #332]	@ (80057a4 <Ctrl_Task+0xb34>)
 8005656:	edd3 7a01 	vldr	s15, [r3, #4]
 800565a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800579c <Ctrl_Task+0xb2c>
 800565e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	dd14      	ble.n	8005692 <Ctrl_Task+0xa22>
			rightForce -= (rightLegPos.length - 0.1f) * 1;
 8005668:	4b4e      	ldr	r3, [pc, #312]	@ (80057a4 <Ctrl_Task+0xb34>)
 800566a:	edd3 7a01 	vldr	s15, [r3, #4]
 800566e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80057a0 <Ctrl_Task+0xb30>
 8005672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005676:	ee17 0a90 	vmov	r0, s15
 800567a:	f7fa ff65 	bl	8000548 <__aeabi_f2d>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005686:	f7fa fdff 	bl	8000288 <__aeabi_dsub>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

		//Calculate ground support force for each leg
		groundDetector.leftSupportForce = leftForce + legMass * 9.8f - legMass * (leftLegPos.ddLength - imu_heading.ddz - 9.8f);
 8005692:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8005696:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80057a8 <Ctrl_Task+0xb38>
 800569a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569e:	ee17 0a90 	vmov	r0, s15
 80056a2:	f7fa ff51 	bl	8000548 <__aeabi_f2d>
 80056a6:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80056aa:	f7fa fdef 	bl	800028c <__adddf3>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4614      	mov	r4, r2
 80056b4:	461d      	mov	r5, r3
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <Ctrl_Task+0xb28>)
 80056b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80056bc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ac <Ctrl_Task+0xb3c>)
 80056be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80056c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056c6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80057a8 <Ctrl_Task+0xb38>
 80056ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80056ce:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	ee17 0a90 	vmov	r0, s15
 80056da:	f7fa ff35 	bl	8000548 <__aeabi_f2d>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4620      	mov	r0, r4
 80056e4:	4629      	mov	r1, r5
 80056e6:	f7fa fdcf 	bl	8000288 <__aeabi_dsub>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fb fa79 	bl	8000be8 <__aeabi_d2f>
 80056f6:	4603      	mov	r3, r0
 80056f8:	4a2d      	ldr	r2, [pc, #180]	@ (80057b0 <Ctrl_Task+0xb40>)
 80056fa:	6013      	str	r3, [r2, #0]
		groundDetector.rightSupportForce = rightForce + legMass * 9.8f - legMass * (rightLegPos.ddLength - imu_heading.ddz - 9.8f);
 80056fc:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8005700:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80057a8 <Ctrl_Task+0xb38>
 8005704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005708:	ee17 0a90 	vmov	r0, s15
 800570c:	f7fa ff1c 	bl	8000548 <__aeabi_f2d>
 8005710:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8005714:	f7fa fdba 	bl	800028c <__adddf3>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	4b20      	ldr	r3, [pc, #128]	@ (80057a4 <Ctrl_Task+0xb34>)
 8005722:	ed93 7a04 	vldr	s14, [r3, #16]
 8005726:	4b21      	ldr	r3, [pc, #132]	@ (80057ac <Ctrl_Task+0xb3c>)
 8005728:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800572c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005730:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80057a8 <Ctrl_Task+0xb38>
 8005734:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005738:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 800573c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005740:	ee17 0a90 	vmov	r0, s15
 8005744:	f7fa ff00 	bl	8000548 <__aeabi_f2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fa fd9a 	bl	8000288 <__aeabi_dsub>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	f7fb fa44 	bl	8000be8 <__aeabi_d2f>
 8005760:	4603      	mov	r3, r0
 8005762:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <Ctrl_Task+0xb40>)
 8005764:	6053      	str	r3, [r2, #4]
		//Update the ground contact detector data
		static uint32_t lastTouchTime = 0;
		bool isTouchingGround = groundDetector.leftSupportForce > -20 && groundDetector.rightSupportForce > -20; //Determine if currently in ground contact
 8005766:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <Ctrl_Task+0xb40>)
 8005768:	edd3 7a00 	vldr	s15, [r3]
 800576c:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8005770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005778:	dd1c      	ble.n	80057b4 <Ctrl_Task+0xb44>
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <Ctrl_Task+0xb40>)
 800577c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005780:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8005784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578c:	dd12      	ble.n	80057b4 <Ctrl_Task+0xb44>
 800578e:	2301      	movs	r3, #1
 8005790:	e011      	b.n	80057b6 <Ctrl_Task+0xb46>
 8005792:	bf00      	nop
 8005794:	402a0000 	.word	0x402a0000
 8005798:	20002018 	.word	0x20002018
 800579c:	3e19999a 	.word	0x3e19999a
 80057a0:	3dcccccd 	.word	0x3dcccccd
 80057a4:	2000202c 	.word	0x2000202c
 80057a8:	411ccccd 	.word	0x411ccccd
 80057ac:	20003ad8 	.word	0x20003ad8
 80057b0:	20000024 	.word	0x20000024
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 80057ba:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
		if(!isTouchingGround && (get_microseconds()/1000) - lastTouchTime < 1000) //If the last ground contact was less than 1 second ago, assume ground contact to prevent misjudgment due to bouncing
 80057c6:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00f      	beq.n	80057f4 <Ctrl_Task+0xb84>
 80057d4:	f7fc fcf4 	bl	80021c0 <get_microseconds>
 80057d8:	4603      	mov	r3, r0
 80057da:	4a8b      	ldr	r2, [pc, #556]	@ (8005a08 <Ctrl_Task+0xd98>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	099a      	lsrs	r2, r3, #6
 80057e2:	4b8a      	ldr	r3, [pc, #552]	@ (8005a0c <Ctrl_Task+0xd9c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057ec:	d202      	bcs.n	80057f4 <Ctrl_Task+0xb84>
			isTouchingGround = true;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
		if(!groundDetector.isTouchingGround && isTouchingGround) //Detect transition to ground contact state, mark cushioning state
 80057f4:	4b86      	ldr	r3, [pc, #536]	@ (8005a10 <Ctrl_Task+0xda0>)
 80057f6:	7a1b      	ldrb	r3, [r3, #8]
 80057f8:	f083 0301 	eor.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d013      	beq.n	800582a <Ctrl_Task+0xbba>
 8005802:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00f      	beq.n	800582a <Ctrl_Task+0xbba>
		{
			target.position = stateVar.x;
 800580a:	4b82      	ldr	r3, [pc, #520]	@ (8005a14 <Ctrl_Task+0xda4>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a82      	ldr	r2, [pc, #520]	@ (8005a18 <Ctrl_Task+0xda8>)
 8005810:	6013      	str	r3, [r2, #0]
			groundDetector.isCuchioning = true;
 8005812:	4b7f      	ldr	r3, [pc, #508]	@ (8005a10 <Ctrl_Task+0xda0>)
 8005814:	2201      	movs	r2, #1
 8005816:	725a      	strb	r2, [r3, #9]
			lastTouchTime = (get_microseconds()/1000);
 8005818:	f7fc fcd2 	bl	80021c0 <get_microseconds>
 800581c:	4603      	mov	r3, r0
 800581e:	4a7a      	ldr	r2, [pc, #488]	@ (8005a08 <Ctrl_Task+0xd98>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	4a79      	ldr	r2, [pc, #484]	@ (8005a0c <Ctrl_Task+0xd9c>)
 8005828:	6013      	str	r3, [r2, #0]
		}
		if(groundDetector.isCuchioning && legLength < target.legLength) //Cushioning state continues until leg length compresses to target leg length
 800582a:	4b79      	ldr	r3, [pc, #484]	@ (8005a10 <Ctrl_Task+0xda0>)
 800582c:	7a5b      	ldrb	r3, [r3, #9]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d010      	beq.n	8005854 <Ctrl_Task+0xbe4>
 8005832:	4b79      	ldr	r3, [pc, #484]	@ (8005a18 <Ctrl_Task+0xda8>)
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fa fe86 	bl	8000548 <__aeabi_f2d>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8005844:	f7fb f94a 	bl	8000adc <__aeabi_dcmplt>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <Ctrl_Task+0xbe4>
			groundDetector.isCuchioning = false;
 800584e:	4b70      	ldr	r3, [pc, #448]	@ (8005a10 <Ctrl_Task+0xda0>)
 8005850:	2200      	movs	r2, #0
 8005852:	725a      	strb	r2, [r3, #9]
		groundDetector.isTouchingGround = isTouchingGround;
 8005854:	4a6e      	ldr	r2, [pc, #440]	@ (8005a10 <Ctrl_Task+0xda0>)
 8005856:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 800585a:	7213      	strb	r3, [r2, #8]

		//Calculate PID output for the difference in leg angles between the left and right legs
		PID_Compute(&legAnglePID, 0, leftLegPos.angle - rightLegPos.angle,0.004,0.01);
 800585c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a1c <Ctrl_Task+0xdac>)
 800585e:	ed93 7a00 	vldr	s14, [r3]
 8005862:	4b6f      	ldr	r3, [pc, #444]	@ (8005a20 <Ctrl_Task+0xdb0>)
 8005864:	edd3 7a00 	vldr	s15, [r3]
 8005868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800586c:	ee17 0a90 	vmov	r0, s15
 8005870:	f7fa fe6a 	bl	8000548 <__aeabi_f2d>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	ed9f 3b5d 	vldr	d3, [pc, #372]	@ 80059f0 <Ctrl_Task+0xd80>
 800587c:	ed9f 2b5e 	vldr	d2, [pc, #376]	@ 80059f8 <Ctrl_Task+0xd88>
 8005880:	ec43 2b11 	vmov	d1, r2, r3
 8005884:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8005a00 <Ctrl_Task+0xd90>
 8005888:	4866      	ldr	r0, [pc, #408]	@ (8005a24 <Ctrl_Task+0xdb4>)
 800588a:	f7ff f933 	bl	8004af4 <PID_Compute>

		//Calculate the hip joint torque output, which is the sum of the LQR output and the PID output for the difference in leg angles
//		double leftTp = lqrOutTp * lqrTpRatio - legAnglePID.output * (leftLegPos.length / 0.15f);
//		double rightTp = -lqrOutTp * lqrTpRatio + legAnglePID.output * (rightLegPos.length / 0.15f);
		double leftTp = -lqrOutTp * lqrTpRatio + legAnglePID.output * (leftLegPos.length / 0.1f);
 800588e:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8005892:	eeb1 7a67 	vneg.f32	s14, s15
 8005896:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	ee17 0a90 	vmov	r0, s15
 80058a2:	f7fa fe51 	bl	8000548 <__aeabi_f2d>
 80058a6:	4682      	mov	sl, r0
 80058a8:	468b      	mov	fp, r1
 80058aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a24 <Ctrl_Task+0xdb4>)
 80058ac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80058b0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a1c <Ctrl_Task+0xdac>)
 80058b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80058b6:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8005a28 <Ctrl_Task+0xdb8>
 80058ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058be:	ee16 0a90 	vmov	r0, s13
 80058c2:	f7fa fe41 	bl	8000548 <__aeabi_f2d>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fa fe93 	bl	80005f8 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4650      	mov	r0, sl
 80058d8:	4659      	mov	r1, fp
 80058da:	f7fa fcd7 	bl	800028c <__adddf3>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
		double rightTp = -lqrOutTp * lqrTpRatio - legAnglePID.output * (rightLegPos.length / 0.1f);
 80058e6:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80058ea:	eeb1 7a67 	vneg.f32	s14, s15
 80058ee:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	ee17 0a90 	vmov	r0, s15
 80058fa:	f7fa fe25 	bl	8000548 <__aeabi_f2d>
 80058fe:	4682      	mov	sl, r0
 8005900:	468b      	mov	fp, r1
 8005902:	4b48      	ldr	r3, [pc, #288]	@ (8005a24 <Ctrl_Task+0xdb4>)
 8005904:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005908:	4b45      	ldr	r3, [pc, #276]	@ (8005a20 <Ctrl_Task+0xdb0>)
 800590a:	edd3 7a01 	vldr	s15, [r3, #4]
 800590e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8005a28 <Ctrl_Task+0xdb8>
 8005912:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005916:	ee16 0a90 	vmov	r0, s13
 800591a:	f7fa fe15 	bl	8000548 <__aeabi_f2d>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fa fe67 	bl	80005f8 <__aeabi_dmul>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4650      	mov	r0, sl
 8005930:	4659      	mov	r1, fp
 8005932:	f7fa fca9 	bl	8000288 <__aeabi_dsub>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138



		//Use VMC (Virtual Model Control) to calculate the output torques for each joint motor
		double leftJointTorque[2]={0};
 800593e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	609a      	str	r2, [r3, #8]
 800594a:	60da      	str	r2, [r3, #12]
		leg_conv(leftForce, leftTp, leftJoint[1].angle, leftJoint[0].angle, leftJointTorque);
 800594c:	4b37      	ldr	r3, [pc, #220]	@ (8005a2c <Ctrl_Task+0xdbc>)
 800594e:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8005952:	4b36      	ldr	r3, [pc, #216]	@ (8005a2c <Ctrl_Task+0xdbc>)
 8005954:	ed93 6b02 	vldr	d6, [r3, #8]
 8005958:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800595c:	4618      	mov	r0, r3
 800595e:	eeb0 3a46 	vmov.f32	s6, s12
 8005962:	eef0 3a66 	vmov.f32	s7, s13
 8005966:	eeb0 2a47 	vmov.f32	s4, s14
 800596a:	eef0 2a67 	vmov.f32	s5, s15
 800596e:	ed97 1b50 	vldr	d1, [r7, #320]	@ 0x140
 8005972:	ed97 0b66 	vldr	d0, [r7, #408]	@ 0x198
 8005976:	f003 f9db 	bl	8008d30 <leg_conv>
		double rightJointTorque[2]={0};
 800597a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	605a      	str	r2, [r3, #4]
 8005984:	609a      	str	r2, [r3, #8]
 8005986:	60da      	str	r2, [r3, #12]
		leg_conv(rightForce, rightTp, rightJoint[1].angle, rightJoint[0].angle, rightJointTorque);
 8005988:	4b29      	ldr	r3, [pc, #164]	@ (8005a30 <Ctrl_Task+0xdc0>)
 800598a:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 800598e:	4b28      	ldr	r3, [pc, #160]	@ (8005a30 <Ctrl_Task+0xdc0>)
 8005990:	ed93 6b02 	vldr	d6, [r3, #8]
 8005994:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8005998:	4618      	mov	r0, r3
 800599a:	eeb0 3a46 	vmov.f32	s6, s12
 800599e:	eef0 3a66 	vmov.f32	s7, s13
 80059a2:	eeb0 2a47 	vmov.f32	s4, s14
 80059a6:	eef0 2a67 	vmov.f32	s5, s15
 80059aa:	ed97 1b4e 	vldr	d1, [r7, #312]	@ 0x138
 80059ae:	ed97 0b64 	vldr	d0, [r7, #400]	@ 0x190
 80059b2:	f003 f9bd 	bl	8008d30 <leg_conv>

		leftF_check = leftForce;
 80059b6:	491f      	ldr	r1, [pc, #124]	@ (8005a34 <Ctrl_Task+0xdc4>)
 80059b8:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80059bc:	e9c1 2300 	strd	r2, r3, [r1]
		leftTp_check = leftTp;
 80059c0:	491d      	ldr	r1, [pc, #116]	@ (8005a38 <Ctrl_Task+0xdc8>)
 80059c2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80059c6:	e9c1 2300 	strd	r2, r3, [r1]
		rightF_check = rightForce;
 80059ca:	491c      	ldr	r1, [pc, #112]	@ (8005a3c <Ctrl_Task+0xdcc>)
 80059cc:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80059d0:	e9c1 2300 	strd	r2, r3, [r1]
		rightTp_check = rightTp;
 80059d4:	491a      	ldr	r1, [pc, #104]	@ (8005a40 <Ctrl_Task+0xdd0>)
 80059d6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80059da:	e9c1 2300 	strd	r2, r3, [r1]
		//Protect the legs from exceeding safe angles
		if (g_remote_cmd.right_switch == 3){
 80059de:	4b19      	ldr	r3, [pc, #100]	@ (8005a44 <Ctrl_Task+0xdd4>)
 80059e0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d131      	bne.n	8005a4c <Ctrl_Task+0xddc>
			standupState = StandupState_Standup;
 80059e8:	4b17      	ldr	r3, [pc, #92]	@ (8005a48 <Ctrl_Task+0xdd8>)
 80059ea:	2202      	movs	r2, #2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e030      	b.n	8005a52 <Ctrl_Task+0xde2>
 80059f0:	47ae147b 	.word	0x47ae147b
 80059f4:	3f847ae1 	.word	0x3f847ae1
 80059f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80059fc:	3f70624d 	.word	0x3f70624d
	...
 8005a08:	10624dd3 	.word	0x10624dd3
 8005a0c:	2000221c 	.word	0x2000221c
 8005a10:	20000024 	.word	0x20000024
 8005a14:	20002040 	.word	0x20002040
 8005a18:	20000008 	.word	0x20000008
 8005a1c:	20002018 	.word	0x20002018
 8005a20:	2000202c 	.word	0x2000202c
 8005a24:	20002060 	.word	0x20002060
 8005a28:	3dcccccd 	.word	0x3dcccccd
 8005a2c:	20001e68 	.word	0x20001e68
 8005a30:	20001ef8 	.word	0x20001ef8
 8005a34:	20002170 	.word	0x20002170
 8005a38:	20002178 	.word	0x20002178
 8005a3c:	20002180 	.word	0x20002180
 8005a40:	20002188 	.word	0x20002188
 8005a44:	20000838 	.word	0x20000838
 8005a48:	20002058 	.word	0x20002058
		}else{
			standupState = StandupState_None;
 8005a4c:	4bba      	ldr	r3, [pc, #744]	@ (8005d38 <Ctrl_Task+0x10c8>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
		}
		float leftTheta = leftLegPos.angle - imu_heading.pit - M_PI_2;
 8005a52:	4bba      	ldr	r3, [pc, #744]	@ (8005d3c <Ctrl_Task+0x10cc>)
 8005a54:	ed93 7a00 	vldr	s14, [r3]
 8005a58:	4bb9      	ldr	r3, [pc, #740]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005a5a:	edd3 7a00 	vldr	s15, [r3]
 8005a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a62:	ee17 0a90 	vmov	r0, s15
 8005a66:	f7fa fd6f 	bl	8000548 <__aeabi_f2d>
 8005a6a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8005d20 <Ctrl_Task+0x10b0>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f7fa fc0a 	bl	8000288 <__aeabi_dsub>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f7fb f8b4 	bl	8000be8 <__aeabi_d2f>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
		float rightTheta = rightLegPos.angle - imu_heading.pit - M_PI_2;
 8005a86:	4baf      	ldr	r3, [pc, #700]	@ (8005d44 <Ctrl_Task+0x10d4>)
 8005a88:	ed93 7a00 	vldr	s14, [r3]
 8005a8c:	4bac      	ldr	r3, [pc, #688]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005a8e:	edd3 7a00 	vldr	s15, [r3]
 8005a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a96:	ee17 0a90 	vmov	r0, s15
 8005a9a:	f7fa fd55 	bl	8000548 <__aeabi_f2d>
 8005a9e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005d20 <Ctrl_Task+0x10b0>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fbf0 	bl	8000288 <__aeabi_dsub>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4610      	mov	r0, r2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f7fb f89a 	bl	8000be8 <__aeabi_d2f>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
		#define PROTECT_CONDITION (leftTheta < -M_PI_4 || leftTheta > M_PI_4 || \
								   rightTheta < -M_PI_4 || rightTheta > M_PI_4 || \
								   imu_heading.pit > M_PI_4 || imu_heading.pit < -M_PI_4) //Condition to protect against excessive leg angles
		if(PROTECT_CONDITION || standupState == StandupState_None) //If the condition to protect against excessive angles is met
 8005aba:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8005abe:	f7fa fd43 	bl	8000548 <__aeabi_f2d>
 8005ac2:	a399      	add	r3, pc, #612	@ (adr r3, 8005d28 <Ctrl_Task+0x10b8>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fb f808 	bl	8000adc <__aeabi_dcmplt>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d142      	bne.n	8005b58 <Ctrl_Task+0xee8>
 8005ad2:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8005ad6:	f7fa fd37 	bl	8000548 <__aeabi_f2d>
 8005ada:	a395      	add	r3, pc, #596	@ (adr r3, 8005d30 <Ctrl_Task+0x10c0>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fb f81a 	bl	8000b18 <__aeabi_dcmpgt>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d136      	bne.n	8005b58 <Ctrl_Task+0xee8>
 8005aea:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8005aee:	f7fa fd2b 	bl	8000548 <__aeabi_f2d>
 8005af2:	a38d      	add	r3, pc, #564	@ (adr r3, 8005d28 <Ctrl_Task+0x10b8>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fff0 	bl	8000adc <__aeabi_dcmplt>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d12a      	bne.n	8005b58 <Ctrl_Task+0xee8>
 8005b02:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8005b06:	f7fa fd1f 	bl	8000548 <__aeabi_f2d>
 8005b0a:	a389      	add	r3, pc, #548	@ (adr r3, 8005d30 <Ctrl_Task+0x10c0>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f7fb f802 	bl	8000b18 <__aeabi_dcmpgt>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d11e      	bne.n	8005b58 <Ctrl_Task+0xee8>
 8005b1a:	4b89      	ldr	r3, [pc, #548]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fa fd12 	bl	8000548 <__aeabi_f2d>
 8005b24:	a382      	add	r3, pc, #520	@ (adr r3, 8005d30 <Ctrl_Task+0x10c0>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fff5 	bl	8000b18 <__aeabi_dcmpgt>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d111      	bne.n	8005b58 <Ctrl_Task+0xee8>
 8005b34:	4b82      	ldr	r3, [pc, #520]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fa fd05 	bl	8000548 <__aeabi_f2d>
 8005b3e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005d28 <Ctrl_Task+0x10b8>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa ffca 	bl	8000adc <__aeabi_dcmplt>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <Ctrl_Task+0xee8>
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d38 <Ctrl_Task+0x10c8>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 811f 	bne.w	8005d96 <Ctrl_Task+0x1126>
		{
			if(standupState == StandupState_None) //Not in stand-up process
 8005b58:	4b77      	ldr	r3, [pc, #476]	@ (8005d38 <Ctrl_Task+0x10c8>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 80fb 	bne.w	8005d58 <Ctrl_Task+0x10e8>
//				Motor_SetTorque(&rightWheel, 0);
//				Motor_SetTorque(&leftJoint[0], 0);
//				Motor_SetTorque(&leftJoint[1], 0);
//				Motor_SetTorque(&rightJoint[0], 0);
//				Motor_SetTorque(&rightJoint[1], 0);
				g_can_motors[LEFT_MOTOR_ID-1].torque = 0;
 8005b62:	4b79      	ldr	r3, [pc, #484]	@ (8005d48 <Ctrl_Task+0x10d8>)
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	629a      	str	r2, [r3, #40]	@ 0x28
				g_can_motors[RIGHT_MOTOR_ID-1].torque = 0;
 8005b6a:	4b77      	ldr	r3, [pc, #476]	@ (8005d48 <Ctrl_Task+0x10d8>)
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				g_can_motors[FR_MOTOR_ID-1].torque = 0;
 8005b74:	4b74      	ldr	r3, [pc, #464]	@ (8005d48 <Ctrl_Task+0x10d8>)
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
				g_can_motors[FL_MOTOR_ID-1].torque = 0;
 8005b7e:	4b72      	ldr	r3, [pc, #456]	@ (8005d48 <Ctrl_Task+0x10d8>)
 8005b80:	f503 639b 	add.w	r3, r3, #1240	@ 0x4d8
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
				g_can_motors[BR_MOTOR_ID-1].torque = 0;
 8005b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8005d48 <Ctrl_Task+0x10d8>)
 8005b8c:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
				g_can_motors[BL_MOTOR_ID-1].torque = 0;
 8005b96:	4b6c      	ldr	r3, [pc, #432]	@ (8005d48 <Ctrl_Task+0x10d8>)
 8005b98:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

				//Block and wait for leg angles to return to a safe range, then resume control after 4 seconds (or jump out if the stand-up process is triggered in the meantime)
				while(PROTECT_CONDITION && standupState == StandupState_None)
 8005ba2:	e036      	b.n	8005c12 <Ctrl_Task+0xfa2>
				{
					leftTheta = leftLegPos.angle - imu_heading.pit - M_PI_2;
 8005ba4:	4b65      	ldr	r3, [pc, #404]	@ (8005d3c <Ctrl_Task+0x10cc>)
 8005ba6:	ed93 7a00 	vldr	s14, [r3]
 8005baa:	4b65      	ldr	r3, [pc, #404]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005bac:	edd3 7a00 	vldr	s15, [r3]
 8005bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb4:	ee17 0a90 	vmov	r0, s15
 8005bb8:	f7fa fcc6 	bl	8000548 <__aeabi_f2d>
 8005bbc:	a358      	add	r3, pc, #352	@ (adr r3, 8005d20 <Ctrl_Task+0x10b0>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fb61 	bl	8000288 <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f7fb f80b 	bl	8000be8 <__aeabi_d2f>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
					rightTheta = rightLegPos.angle - imu_heading.pit - M_PI_2;
 8005bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d44 <Ctrl_Task+0x10d4>)
 8005bda:	ed93 7a00 	vldr	s14, [r3]
 8005bde:	4b58      	ldr	r3, [pc, #352]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be8:	ee17 0a90 	vmov	r0, s15
 8005bec:	f7fa fcac 	bl	8000548 <__aeabi_f2d>
 8005bf0:	a34b      	add	r3, pc, #300	@ (adr r3, 8005d20 <Ctrl_Task+0x10b0>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fb47 	bl	8000288 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	f7fa fff1 	bl	8000be8 <__aeabi_d2f>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
					vTaskDelay(100);
 8005c0c:	2064      	movs	r0, #100	@ 0x64
 8005c0e:	f013 ff39 	bl	8019a84 <vTaskDelay>
				while(PROTECT_CONDITION && standupState == StandupState_None)
 8005c12:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8005c16:	f7fa fc97 	bl	8000548 <__aeabi_f2d>
 8005c1a:	a343      	add	r3, pc, #268	@ (adr r3, 8005d28 <Ctrl_Task+0x10b8>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa ff5c 	bl	8000adc <__aeabi_dcmplt>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d13d      	bne.n	8005ca6 <Ctrl_Task+0x1036>
 8005c2a:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8005c2e:	f7fa fc8b 	bl	8000548 <__aeabi_f2d>
 8005c32:	a33f      	add	r3, pc, #252	@ (adr r3, 8005d30 <Ctrl_Task+0x10c0>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d131      	bne.n	8005ca6 <Ctrl_Task+0x1036>
 8005c42:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8005c46:	f7fa fc7f 	bl	8000548 <__aeabi_f2d>
 8005c4a:	a337      	add	r3, pc, #220	@ (adr r3, 8005d28 <Ctrl_Task+0x10b8>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa ff44 	bl	8000adc <__aeabi_dcmplt>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d125      	bne.n	8005ca6 <Ctrl_Task+0x1036>
 8005c5a:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8005c5e:	f7fa fc73 	bl	8000548 <__aeabi_f2d>
 8005c62:	a333      	add	r3, pc, #204	@ (adr r3, 8005d30 <Ctrl_Task+0x10c0>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa ff56 	bl	8000b18 <__aeabi_dcmpgt>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d119      	bne.n	8005ca6 <Ctrl_Task+0x1036>
 8005c72:	4b33      	ldr	r3, [pc, #204]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa fc66 	bl	8000548 <__aeabi_f2d>
 8005c7c:	a32c      	add	r3, pc, #176	@ (adr r3, 8005d30 <Ctrl_Task+0x10c0>)
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f7fa ff49 	bl	8000b18 <__aeabi_dcmpgt>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10c      	bne.n	8005ca6 <Ctrl_Task+0x1036>
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fa fc59 	bl	8000548 <__aeabi_f2d>
 8005c96:	a324      	add	r3, pc, #144	@ (adr r3, 8005d28 <Ctrl_Task+0x10b8>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa ff1e 	bl	8000adc <__aeabi_dcmplt>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <Ctrl_Task+0x1040>
 8005ca6:	4b24      	ldr	r3, [pc, #144]	@ (8005d38 <Ctrl_Task+0x10c8>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f43f af7a 	beq.w	8005ba4 <Ctrl_Task+0xf34>
				}
				if(standupState == StandupState_None)
 8005cb0:	4b21      	ldr	r3, [pc, #132]	@ (8005d38 <Ctrl_Task+0x10c8>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <Ctrl_Task+0x1050>
					vTaskDelay(1000);
 8005cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005cbc:	f013 fee2 	bl	8019a84 <vTaskDelay>
				//After exiting protection, set the target position and yaw angle to the current values
				target.position = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 8005cc0:	4b22      	ldr	r3, [pc, #136]	@ (8005d4c <Ctrl_Task+0x10dc>)
 8005cc2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005cc6:	4b22      	ldr	r3, [pc, #136]	@ (8005d50 <Ctrl_Task+0x10e0>)
 8005cc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005ccc:	f7fa fade 	bl	800028c <__adddf3>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ce0:	f7fa fdb4 	bl	800084c <__aeabi_ddiv>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	461d      	mov	r5, r3
 8005cec:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8005cf0:	f7fa fc2a 	bl	8000548 <__aeabi_f2d>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fc7c 	bl	80005f8 <__aeabi_dmul>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7fa ff6e 	bl	8000be8 <__aeabi_d2f>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4a11      	ldr	r2, [pc, #68]	@ (8005d54 <Ctrl_Task+0x10e4>)
 8005d10:	6013      	str	r3, [r2, #0]
				target.yawAngle = imu_heading.yaw;
 8005d12:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <Ctrl_Task+0x10d0>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	4a0f      	ldr	r2, [pc, #60]	@ (8005d54 <Ctrl_Task+0x10e4>)
 8005d18:	6113      	str	r3, [r2, #16]
				continue;
 8005d1a:	e081      	b.n	8005e20 <Ctrl_Task+0x11b0>
 8005d1c:	f3af 8000 	nop.w
 8005d20:	54442d18 	.word	0x54442d18
 8005d24:	3ff921fb 	.word	0x3ff921fb
 8005d28:	54442d18 	.word	0x54442d18
 8005d2c:	bfe921fb 	.word	0xbfe921fb
 8005d30:	54442d18 	.word	0x54442d18
 8005d34:	3fe921fb 	.word	0x3fe921fb
 8005d38:	20002058 	.word	0x20002058
 8005d3c:	20002018 	.word	0x20002018
 8005d40:	20003ad8 	.word	0x20003ad8
 8005d44:	2000202c 	.word	0x2000202c
 8005d48:	20002220 	.word	0x20002220
 8005d4c:	20001f88 	.word	0x20001f88
 8005d50:	20001fd0 	.word	0x20001fd0
 8005d54:	20000008 	.word	0x20000008
			}
			if(standupState == StandupState_Standup && (leftTheta < -M_PI_4 || rightTheta > M_PI_4))
 8005d58:	4b37      	ldr	r3, [pc, #220]	@ (8005e38 <Ctrl_Task+0x11c8>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d11a      	bne.n	8005d96 <Ctrl_Task+0x1126>
 8005d60:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8005d64:	f7fa fbf0 	bl	8000548 <__aeabi_f2d>
 8005d68:	a32f      	add	r3, pc, #188	@ (adr r3, 8005e28 <Ctrl_Task+0x11b8>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa feb5 	bl	8000adc <__aeabi_dcmplt>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10b      	bne.n	8005d90 <Ctrl_Task+0x1120>
 8005d78:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8005d7c:	f7fa fbe4 	bl	8000548 <__aeabi_f2d>
 8005d80:	a32b      	add	r3, pc, #172	@ (adr r3, 8005e30 <Ctrl_Task+0x11c0>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fec7 	bl	8000b18 <__aeabi_dcmpgt>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <Ctrl_Task+0x1126>
				standupState = StandupState_None;
 8005d90:	4b29      	ldr	r3, [pc, #164]	@ (8005e38 <Ctrl_Task+0x11c8>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
		//Set joint motor output torque
//		Motor_SetTorque(&leftJoint[0], -leftJointTorque[0]);
//		Motor_SetTorque(&leftJoint[1], -leftJointTorque[1]);
//		Motor_SetTorque(&rightJoint[0], -rightJointTorque[0]);
//		Motor_SetTorque(&rightJoint[1], -rightJointTorque[1]);
		g_can_motors[FR_MOTOR_ID-1].torque = leftJointTorque[0];
 8005d96:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f7fa ff23 	bl	8000be8 <__aeabi_d2f>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4a25      	ldr	r2, [pc, #148]	@ (8005e3c <Ctrl_Task+0x11cc>)
 8005da6:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8
		g_can_motors[FL_MOTOR_ID-1].torque = leftJointTorque[1];
 8005daa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	f7fa ff19 	bl	8000be8 <__aeabi_d2f>
 8005db6:	4602      	mov	r2, r0
 8005db8:	4b20      	ldr	r3, [pc, #128]	@ (8005e3c <Ctrl_Task+0x11cc>)
 8005dba:	f503 639b 	add.w	r3, r3, #1240	@ 0x4d8
 8005dbe:	601a      	str	r2, [r3, #0]
		g_can_motors[BL_MOTOR_ID-1].torque = rightJointTorque[0];
 8005dc0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f7fa ff0e 	bl	8000be8 <__aeabi_d2f>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <Ctrl_Task+0x11cc>)
 8005dd0:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 8005dd4:	601a      	str	r2, [r3, #0]
		g_can_motors[BR_MOTOR_ID-1].torque = rightJointTorque[1];
 8005dd6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fa ff03 	bl	8000be8 <__aeabi_d2f>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <Ctrl_Task+0x11cc>)
 8005de6:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 8005dea:	601a      	str	r2, [r3, #0]
		l1 = leftJointTorque[0];
 8005dec:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005df0:	4913      	ldr	r1, [pc, #76]	@ (8005e40 <Ctrl_Task+0x11d0>)
 8005df2:	e9c1 2300 	strd	r2, r3, [r1]
		l4 = leftJointTorque[1];
 8005df6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8005dfa:	4912      	ldr	r1, [pc, #72]	@ (8005e44 <Ctrl_Task+0x11d4>)
 8005dfc:	e9c1 2300 	strd	r2, r3, [r1]
		r1 = rightJointTorque[0];
 8005e00:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8005e04:	4910      	ldr	r1, [pc, #64]	@ (8005e48 <Ctrl_Task+0x11d8>)
 8005e06:	e9c1 2300 	strd	r2, r3, [r1]
		r4 = rightJointTorque[1];
 8005e0a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005e0e:	490f      	ldr	r1, [pc, #60]	@ (8005e4c <Ctrl_Task+0x11dc>)
 8005e10:	e9c1 2300 	strd	r2, r3, [r1]

		vTaskDelayUntil(&xLastWakeTime, 4); //4ms control cycle
 8005e14:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8005e18:	2104      	movs	r1, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f013 fdb2 	bl	8019984 <vTaskDelayUntil>
	{
 8005e20:	f7fe bf8e 	b.w	8004d40 <Ctrl_Task+0xd0>
 8005e24:	f3af 8000 	nop.w
 8005e28:	54442d18 	.word	0x54442d18
 8005e2c:	bfe921fb 	.word	0xbfe921fb
 8005e30:	54442d18 	.word	0x54442d18
 8005e34:	3fe921fb 	.word	0x3fe921fb
 8005e38:	20002058 	.word	0x20002058
 8005e3c:	20002220 	.word	0x20002220
 8005e40:	20002198 	.word	0x20002198
 8005e44:	200021a0 	.word	0x200021a0
 8005e48:	200021a8 	.word	0x200021a8
 8005e4c:	200021b0 	.word	0x200021b0

08005e50 <buzzing_task>:
 4, 3, 1, 8
 };
*/

//fun
void buzzing_task(void *argument) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000.0 / (4 * TEMPO);
 8005e58:	4b55      	ldr	r3, [pc, #340]	@ (8005fb0 <buzzing_task+0x160>)
 8005e5a:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(g_buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8005e5c:	4b55      	ldr	r3, [pc, #340]	@ (8005fb4 <buzzing_task+0x164>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f107 010d 	add.w	r1, r7, #13
 8005e64:	f04f 32ff 	mov.w	r2, #4294967295
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f013 f951 	bl	8019110 <xQueueReceive>
		switch (buzzing_type) {
 8005e6e:	7b7b      	ldrb	r3, [r7, #13]
 8005e70:	2b0d      	cmp	r3, #13
 8005e72:	f200 8090 	bhi.w	8005f96 <buzzing_task+0x146>
 8005e76:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <buzzing_task+0x2c>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005eb5 	.word	0x08005eb5
 8005e80:	08005f97 	.word	0x08005f97
 8005e84:	08005f97 	.word	0x08005f97
 8005e88:	08005f97 	.word	0x08005f97
 8005e8c:	08005f97 	.word	0x08005f97
 8005e90:	08005f97 	.word	0x08005f97
 8005e94:	08005f97 	.word	0x08005f97
 8005e98:	08005f97 	.word	0x08005f97
 8005e9c:	08005f97 	.word	0x08005f97
 8005ea0:	08005f97 	.word	0x08005f97
 8005ea4:	08005f97 	.word	0x08005f97
 8005ea8:	08005f5b 	.word	0x08005f5b
 8005eac:	08005f87 	.word	0x08005f87
 8005eb0:	08005f97 	.word	0x08005f97
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	82fb      	strh	r3, [r7, #22]
 8005eb8:	e04b      	b.n	8005f52 <buzzing_task+0x102>
				last_wake_time = xTaskGetTickCount();
 8005eba:	f013 ff37 	bl	8019d2c <xTaskGetTickCount>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8005ec2:	8afb      	ldrh	r3, [r7, #22]
 8005ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <buzzing_task+0x168>)
 8005ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fb f94e 	bl	800116c <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8005ed0:	8afb      	ldrh	r3, [r7, #22]
 8005ed2:	4a3a      	ldr	r2, [pc, #232]	@ (8005fbc <buzzing_task+0x16c>)
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	ed93 7a00 	vldr	s14, [r3]
 8005edc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee8:	ee17 3a90 	vmov	r3, s15
 8005eec:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time*0.95);
 8005eee:	89fb      	ldrh	r3, [r7, #14]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fb17 	bl	8000524 <__aeabi_i2d>
 8005ef6:	a32a      	add	r3, pc, #168	@ (adr r3, 8005fa0 <buzzing_task+0x150>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa fb7c 	bl	80005f8 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	f7fa fe4e 	bl	8000ba8 <__aeabi_d2uiz>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	4611      	mov	r1, r2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f013 fd35 	bl	8019984 <vTaskDelayUntil>
				buzzer(0);
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f7fb f926 	bl	800116c <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time*0.05);
 8005f20:	89fb      	ldrh	r3, [r7, #14]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fa fafe 	bl	8000524 <__aeabi_i2d>
 8005f28:	a31f      	add	r3, pc, #124	@ (adr r3, 8005fa8 <buzzing_task+0x158>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa fb63 	bl	80005f8 <__aeabi_dmul>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7fa fe35 	bl	8000ba8 <__aeabi_d2uiz>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	f107 0308 	add.w	r3, r7, #8
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f013 fd1c 	bl	8019984 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8005f4c:	8afb      	ldrh	r3, [r7, #22]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	82fb      	strh	r3, [r7, #22]
 8005f52:	8afb      	ldrh	r3, [r7, #22]
 8005f54:	2b7c      	cmp	r3, #124	@ 0x7c
 8005f56:	d9b0      	bls.n	8005eba <buzzing_task+0x6a>
			}
			break;
 8005f58:	e01e      	b.n	8005f98 <buzzing_task+0x148>
		case bz_low:
//			buzzer(BUZZER_LOW);
//			vTaskDelay(BUZZ_TIME);
			break;
		case bz_debug_hi_temp:
			buzzer(DEBUG_HI_TEMP1);
 8005f5a:	f44f 7077 	mov.w	r0, #988	@ 0x3dc
 8005f5e:	f7fb f905 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8005f62:	2032      	movs	r0, #50	@ 0x32
 8005f64:	f013 fd8e 	bl	8019a84 <vTaskDelay>
			buzzer(DEBUG_HI_TEMP2);
 8005f68:	f240 4017 	movw	r0, #1047	@ 0x417
 8005f6c:	f7fb f8fe 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8005f70:	2032      	movs	r0, #50	@ 0x32
 8005f72:	f013 fd87 	bl	8019a84 <vTaskDelay>
			buzzer(DEBUG_HI_TEMP3);
 8005f76:	f240 4055 	movw	r0, #1109	@ 0x455
 8005f7a:	f7fb f8f7 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8005f7e:	2032      	movs	r0, #50	@ 0x32
 8005f80:	f013 fd80 	bl	8019a84 <vTaskDelay>
			break;
 8005f84:	e008      	b.n	8005f98 <buzzing_task+0x148>
		case bz_temp_hi:
			buzzer(DEBUG_HI_TEMP1);
 8005f86:	f44f 7077 	mov.w	r0, #988	@ 0x3dc
 8005f8a:	f7fb f8ef 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8005f8e:	2064      	movs	r0, #100	@ 0x64
 8005f90:	f013 fd78 	bl	8019a84 <vTaskDelay>
			break;
 8005f94:	e000      	b.n	8005f98 <buzzing_task+0x148>
		case bz_temp_low:
//			buzzer(DEBUG_HI_TEMP3);
//			vTaskDelay(BUZZ_TIME);
			break;
		default:
			break;
 8005f96:	bf00      	nop
		}
//		buzzer(0);
		vTaskDelay(GAP_TIME);
 8005f98:	2032      	movs	r0, #50	@ 0x32
 8005f9a:	f013 fd73 	bl	8019a84 <vTaskDelay>
		xQueueReceive(g_buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8005f9e:	e75d      	b.n	8005e5c <buzzing_task+0xc>
 8005fa0:	66666666 	.word	0x66666666
 8005fa4:	3fee6666 	.word	0x3fee6666
 8005fa8:	9999999a 	.word	0x9999999a
 8005fac:	3fa99999 	.word	0x3fa99999
 8005fb0:	42fa0000 	.word	0x42fa0000
 8005fb4:	20003bb4 	.word	0x20003bb4
 8005fb8:	08023618 	.word	0x08023618
 8005fbc:	08023714 	.word	0x08023714

08005fc0 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	@ 0x30
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800604c <can_ISR+0x8c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d118      	bne.n	8006004 <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8005fd2:	210e      	movs	r1, #14
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f007 fa54 	bl	800d482 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL
						| CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8005fda:	f107 020c 	add.w	r2, r7, #12
 8005fde:	f107 0314 	add.w	r3, r7, #20
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	481a      	ldr	r0, [pc, #104]	@ (8006050 <can_ISR+0x90>)
 8005fe6:	f7fb f907 	bl	80011f8 <can1_get_msg>
		convert_raw_can_data(g_can_motors, rx_msg_header.StdId, rx_buffer);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f107 020c 	add.w	r2, r7, #12
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4817      	ldr	r0, [pc, #92]	@ (8006054 <can_ISR+0x94>)
 8005ff6:	f000 f833 	bl	8006060 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8005ffa:	210e      	movs	r1, #14
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f007 fa1a 	bl	800d436 <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8006002:	e01e      	b.n	8006042 <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a13      	ldr	r2, [pc, #76]	@ (8006058 <can_ISR+0x98>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d119      	bne.n	8006042 <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 800600e:	2170      	movs	r1, #112	@ 0x70
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f007 fa36 	bl	800d482 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8006016:	f107 020c 	add.w	r2, r7, #12
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	4619      	mov	r1, r3
 8006020:	480e      	ldr	r0, [pc, #56]	@ (800605c <can_ISR+0x9c>)
 8006022:	f7fb f8fa 	bl	800121a <can2_get_msg>
		convert_raw_can_data(g_can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	b29b      	uxth	r3, r3
 800602a:	330c      	adds	r3, #12
 800602c:	b29b      	uxth	r3, r3
 800602e:	f107 020c 	add.w	r2, r7, #12
 8006032:	4619      	mov	r1, r3
 8006034:	4807      	ldr	r0, [pc, #28]	@ (8006054 <can_ISR+0x94>)
 8006036:	f000 f813 	bl	8006060 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800603a:	2170      	movs	r1, #112	@ 0x70
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f007 f9fa 	bl	800d436 <HAL_CAN_ActivateNotification>
}
 8006042:	bf00      	nop
 8006044:	3730      	adds	r7, #48	@ 0x30
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40006400 	.word	0x40006400
 8006050:	20000914 	.word	0x20000914
 8006054:	20002220 	.word	0x20002220
 8006058:	40006800 	.word	0x40006800
 800605c:	2000093c 	.word	0x2000093c

08006060 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id,
		uint8_t *rx_buffer) {
 8006060:	b5b0      	push	{r4, r5, r7, lr}
 8006062:	b08c      	sub	sp, #48	@ 0x30
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	460b      	mov	r3, r1
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 800606e:	897b      	ldrh	r3, [r7, #10]
 8006070:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8006074:	857b      	strh	r3, [r7, #42]	@ 0x2a

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24) {
 8006076:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006078:	2b18      	cmp	r3, #24
 800607a:	f200 81a5 	bhi.w	80063c8 <convert_raw_can_data+0x368>
		return;
	}
	motor_data_t *curr_motor = &can_motor_data[idnum];
 800607e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006080:	4613      	mov	r3, r2
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	461a      	mov	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	789b      	ldrb	r3, [r3, #2]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8198 	beq.w	80063ca <convert_raw_can_data+0x36a>
		//convert the raw data back into the respective values
		curr_motor->id = motor_id;
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	897a      	ldrh	r2, [r7, #10]
 800609e:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[1] = curr_motor->raw_data.angle[0];
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	80da      	strh	r2, [r3, #6]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	b21a      	sxth	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3301      	adds	r3, #1
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	b21b      	sxth	r3, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b21a      	sxth	r2, r3
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm = (rx_buffer[2] << 8) | rx_buffer[3];
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3302      	adds	r3, #2
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	b21a      	sxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3303      	adds	r3, #3
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b21b      	sxth	r3, r3
 80060d4:	4313      	orrs	r3, r2
 80060d6:	847b      	strh	r3, [r7, #34]	@ 0x22
		curr_motor->raw_data.rpm = curr_motor->raw_data.rpm * SPEED_LPF
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80060dc:	811a      	strh	r2, [r3, #8]
				+ temp_rpm * (1 - SPEED_LPF);
		curr_motor->raw_data.torque =(rx_buffer[4] << 8) | rx_buffer[5];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3304      	adds	r3, #4
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3305      	adds	r3, #5
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b21b      	sxth	r3, r3
 80060f0:	4313      	orrs	r3, r2
 80060f2:	b21a      	sxth	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	815a      	strh	r2, [r3, #10]
		curr_motor->torque_data = ((double)curr_motor->raw_data.torque / 13000.0f)*1.5f;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fa fa10 	bl	8000524 <__aeabi_i2d>
 8006104:	a3bd      	add	r3, pc, #756	@ (adr r3, 80063fc <convert_raw_can_data+0x39c>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f7fa fb9f 	bl	800084c <__aeabi_ddiv>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	4bb1      	ldr	r3, [pc, #708]	@ (80063e0 <convert_raw_can_data+0x380>)
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4610      	mov	r0, r2
 8006126:	4619      	mov	r1, r3
 8006128:	f7fa fd5e 	bl	8000be8 <__aeabi_d2f>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	62da      	str	r2, [r3, #44]	@ 0x2c
		curr_motor->raw_data.temp = (rx_buffer[6]);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	799a      	ldrb	r2, [r3, #6]
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] = curr_motor->last_time[0];
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		curr_motor->last_time[0] = get_microseconds();
 8006146:	f7fc f83b 	bl	80021c0 <get_microseconds>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

		float rds_passed = (float) (curr_motor->raw_data.angle[0]
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006158:	461a      	mov	r2, r3
				- curr_motor->raw_data.angle[1]) / 8192;
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006160:	1ad3      	subs	r3, r2, r3
		float rds_passed = (float) (curr_motor->raw_data.angle[0]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800616a:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80063e4 <convert_raw_can_data+0x384>
 800616e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
		float time_diff = (float) (curr_motor->last_time[0]
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
				- curr_motor->last_time[1]) / (float) (TIMER_FREQ * 60);
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006182:	1ad3      	subs	r3, r2, r3
		float time_diff = (float) (curr_motor->last_time[0]
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800618c:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80063e8 <convert_raw_can_data+0x388>
 8006190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006194:	edc7 7a06 	vstr	s15, [r7, #24]
		curr_motor->angle_data.hires_rpm = curr_motor->angle_data.hires_rpm
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fa f9d2 	bl	8000548 <__aeabi_f2d>
				* 0.95 + (rds_passed * time_diff * 0.05);
 80061a4:	a38a      	add	r3, pc, #552	@ (adr r3, 80063d0 <convert_raw_can_data+0x370>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fa fa25 	bl	80005f8 <__aeabi_dmul>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4614      	mov	r4, r2
 80061b4:	461d      	mov	r5, r3
 80061b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80061ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	ee17 0a90 	vmov	r0, s15
 80061c6:	f7fa f9bf 	bl	8000548 <__aeabi_f2d>
 80061ca:	a383      	add	r3, pc, #524	@ (adr r3, 80063d8 <convert_raw_can_data+0x378>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa fa12 	bl	80005f8 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	f7fa f856 	bl	800028c <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	f7fa fcfe 	bl	8000be8 <__aeabi_d2f>
 80061ec:	4602      	mov	r2, r0
		curr_motor->angle_data.hires_rpm = curr_motor->angle_data.hires_rpm
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	789b      	ldrb	r3, [r3, #2]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d84d      	bhi.n	800629a <convert_raw_can_data+0x23a>
 80061fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <convert_raw_can_data+0x1a4>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006229 	.word	0x08006229
 8006208:	0800624f 	.word	0x0800624f
 800620c:	0800624f 	.word	0x0800624f
 8006210:	0800629b 	.word	0x0800629b
 8006214:	0800629b 	.word	0x0800629b
 8006218:	0800629b 	.word	0x0800629b
 800621c:	08006275 	.word	0x08006275
 8006220:	08006275 	.word	0x08006275
 8006224:	08006275 	.word	0x08006275
		case TYPE_GM6020:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	1d18      	adds	r0, r3, #4
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	f103 0198 	add.w	r1, r3, #152	@ 0x98
					curr_motor->last_time);
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	33e4      	adds	r3, #228	@ 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006236:	461a      	mov	r2, r3
 8006238:	f000 f922 	bl	8006480 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	3398      	adds	r3, #152	@ 0x98
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f000 f8dc 	bl	8006404 <angle_offset>
			break;
 800624c:	e026      	b.n	800629c <convert_raw_can_data+0x23c>
		case TYPE_M2006:
		case TYPE_M3508:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	1d18      	adds	r0, r3, #4
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	f103 0198 	add.w	r1, r3, #152	@ 0x98
								curr_motor->last_time);
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	33e4      	adds	r3, #228	@ 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800625c:	461a      	mov	r2, r3
 800625e:	f000 f90f 	bl	8006480 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	3398      	adds	r3, #152	@ 0x98
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 f8c9 	bl	8006404 <angle_offset>
			break;
 8006272:	e013      	b.n	800629c <convert_raw_can_data+0x23c>
//					curr_motor->last_time);
			break;
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	1d18      	adds	r0, r3, #4
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	f103 0198 	add.w	r1, r3, #152	@ 0x98
					curr_motor->last_time);
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	33e4      	adds	r3, #228	@ 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006282:	461a      	mov	r2, r3
 8006284:	f000 f8fc 	bl	8006480 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	3398      	adds	r3, #152	@ 0x98
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f000 f8b6 	bl	8006404 <angle_offset>
			break;
 8006298:	e000      	b.n	800629c <convert_raw_can_data+0x23c>
		default:
			break;
 800629a:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 80062a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80062a2:	3301      	adds	r3, #1
 80062a4:	3b05      	subs	r3, #5
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	d87c      	bhi.n	80063a4 <convert_raw_can_data+0x344>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <convert_raw_can_data+0x250>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006319 	.word	0x08006319
 80062bc:	0800632d 	.word	0x0800632d
 80062c0:	080063a5 	.word	0x080063a5
 80062c4:	08006369 	.word	0x08006369
 80062c8:	080063a5 	.word	0x080063a5
 80062cc:	080063a5 	.word	0x080063a5
 80062d0:	080063a5 	.word	0x080063a5
 80062d4:	080063a5 	.word	0x080063a5
 80062d8:	080063a5 	.word	0x080063a5
 80062dc:	080063a5 	.word	0x080063a5
 80062e0:	08006341 	.word	0x08006341
 80062e4:	08006355 	.word	0x08006355
 80062e8:	0800637d 	.word	0x0800637d
 80062ec:	08006391 	.word	0x08006391
#ifndef CHASSIS_MCU
		case FR_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 80062f0:	4b3e      	ldr	r3, [pc, #248]	@ (80063ec <convert_raw_can_data+0x38c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f107 0214 	add.w	r2, r7, #20
 80062f8:	2108      	movs	r1, #8
 80062fa:	4618      	mov	r0, r3
 80062fc:	f012 faca 	bl	8018894 <xEventGroupSetBitsFromISR>
 8006300:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006302:	e052      	b.n	80063aa <convert_raw_can_data+0x34a>
		case FL_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8006304:	4b39      	ldr	r3, [pc, #228]	@ (80063ec <convert_raw_can_data+0x38c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f107 0214 	add.w	r2, r7, #20
 800630c:	2104      	movs	r1, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f012 fac0 	bl	8018894 <xEventGroupSetBitsFromISR>
 8006314:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006316:	e048      	b.n	80063aa <convert_raw_can_data+0x34a>
		case BL_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8006318:	4b34      	ldr	r3, [pc, #208]	@ (80063ec <convert_raw_can_data+0x38c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f107 0214 	add.w	r2, r7, #20
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f012 fab6 	bl	8018894 <xEventGroupSetBitsFromISR>
 8006328:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 800632a:	e03e      	b.n	80063aa <convert_raw_can_data+0x34a>
		case BR_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 800632c:	4b2f      	ldr	r3, [pc, #188]	@ (80063ec <convert_raw_can_data+0x38c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f107 0214 	add.w	r2, r7, #20
 8006334:	2101      	movs	r1, #1
 8006336:	4618      	mov	r0, r3
 8006338:	f012 faac 	bl	8018894 <xEventGroupSetBitsFromISR>
 800633c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 800633e:	e034      	b.n	80063aa <convert_raw_can_data+0x34a>
#endif
		case LFRICTION_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8006340:	4b2b      	ldr	r3, [pc, #172]	@ (80063f0 <convert_raw_can_data+0x390>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f107 0214 	add.w	r2, r7, #20
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f012 faa2 	bl	8018894 <xEventGroupSetBitsFromISR>
 8006350:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006352:	e02a      	b.n	80063aa <convert_raw_can_data+0x34a>
		case RFRICTION_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8006354:	4b26      	ldr	r3, [pc, #152]	@ (80063f0 <convert_raw_can_data+0x390>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f107 0214 	add.w	r2, r7, #20
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f012 fa98 	bl	8018894 <xEventGroupSetBitsFromISR>
 8006364:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006366:	e020      	b.n	80063aa <convert_raw_can_data+0x34a>
		case FEEDER_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <convert_raw_can_data+0x390>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f107 0214 	add.w	r2, r7, #20
 8006370:	2104      	movs	r1, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f012 fa8e 	bl	8018894 <xEventGroupSetBitsFromISR>
 8006378:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 800637a:	e016      	b.n	80063aa <convert_raw_can_data+0x34a>
		case PITCH_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 800637c:	4b1d      	ldr	r3, [pc, #116]	@ (80063f4 <convert_raw_can_data+0x394>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f107 0214 	add.w	r2, r7, #20
 8006384:	2101      	movs	r1, #1
 8006386:	4618      	mov	r0, r3
 8006388:	f012 fa84 	bl	8018894 <xEventGroupSetBitsFromISR>
 800638c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 800638e:	e00c      	b.n	80063aa <convert_raw_can_data+0x34a>
		case YAW_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8006390:	4b18      	ldr	r3, [pc, #96]	@ (80063f4 <convert_raw_can_data+0x394>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f107 0214 	add.w	r2, r7, #20
 8006398:	2102      	movs	r1, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f012 fa7a 	bl	8018894 <xEventGroupSetBitsFromISR>
 80063a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 80063a2:	e002      	b.n	80063aa <convert_raw_can_data+0x34a>
		default:
			xResult = pdFAIL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			idnum = idnum;
			//error handler
			break;
 80063a8:	bf00      	nop
		}

		//switches tasks if a higher priority task is ready.
		//required because the function is in an ISR
		if (xResult != pdFAIL) {
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <convert_raw_can_data+0x36a>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <convert_raw_can_data+0x36a>
 80063b6:	4b10      	ldr	r3, [pc, #64]	@ (80063f8 <convert_raw_can_data+0x398>)
 80063b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	e000      	b.n	80063ca <convert_raw_can_data+0x36a>
		return;
 80063c8:	bf00      	nop
		}
	} else {
		//this is a useless statement so that it is possible to set a breakpoint here lol
		//error handler
	}
}
 80063ca:	3730      	adds	r7, #48	@ 0x30
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bdb0      	pop	{r4, r5, r7, pc}
 80063d0:	66666666 	.word	0x66666666
 80063d4:	3fee6666 	.word	0x3fee6666
 80063d8:	9999999a 	.word	0x9999999a
 80063dc:	3fa99999 	.word	0x3fa99999
 80063e0:	3ff80000 	.word	0x3ff80000
 80063e4:	46000000 	.word	0x46000000
 80063e8:	4ab71b00 	.word	0x4ab71b00
 80063ec:	20003b9c 	.word	0x20003b9c
 80063f0:	20003ba0 	.word	0x20003ba0
 80063f4:	20003b98 	.word	0x20003b98
 80063f8:	e000ed04 	.word	0xe000ed04
 80063fc:	00000000 	.word	0x00000000
 8006400:	40c96400 	.word	0x40c96400

08006404 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
//	}
//	while (angle_data->ticks < angle_data->min_ticks) {
//		angle_data->ticks += angle_data->tick_range;
//	}

	temp_ang = angle_data->ticks - angle_data->center_ang;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	60fb      	str	r3, [r7, #12]
	if (temp_ang > angle_data->max_ticks) {
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	429a      	cmp	r2, r3
 8006426:	dd05      	ble.n	8006434 <angle_offset+0x30>
		temp_ang -= angle_data->tick_range;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e009      	b.n	8006448 <angle_offset+0x44>
	} else if (temp_ang < angle_data->min_ticks) {
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	429a      	cmp	r2, r3
 800643c:	da04      	bge.n	8006448 <angle_offset+0x44>
		temp_ang += angle_data->tick_range;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
	}
//	angle_data->ticks = temp_ang;
	angle_data->adj_ang = (float) temp_ang * angle_data->ang_range
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006458:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ angle_data->tick_range;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006468:	eec6 7a87 	vdiv.f32	s15, s13, s14
	angle_data->adj_ang = (float) temp_ang * angle_data->ang_range
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data, angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800649a:	b29b      	uxth	r3, r3
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	b29b      	uxth	r3, r3
 80064a0:	82fb      	strh	r3, [r7, #22]
	if (angle_data->init == 0){
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d129      	bne.n	8006500 <motor_calc_odometry+0x80>
		angle_data->ticks = motor_data->angle[0];
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	601a      	str	r2, [r3, #0]
		if (angle_data->ticks > angle_data->max_ticks) {
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	dd06      	ble.n	80064d2 <motor_calc_odometry+0x52>
			angle_data->ticks -= angle_data->tick_range;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	601a      	str	r2, [r3, #0]
		}
		if (angle_data->ticks < angle_data->min_ticks) {
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	da06      	bge.n	80064ec <motor_calc_odometry+0x6c>
			angle_data->ticks += angle_data->tick_range;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	441a      	add	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	601a      	str	r2, [r3, #0]
		}
		motor_data->angle[1] = motor_data->angle[0];
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	805a      	strh	r2, [r3, #2]
		angle_data->init = 1;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		return;
 80064fe:	e06b      	b.n	80065d8 <motor_calc_odometry+0x158>
	}
	angle_data->abs_ang_diff = abs_angle_diff;
 8006500:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	615a      	str	r2, [r3, #20]

	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 8006508:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006510:	dd0a      	ble.n	8006528 <motor_calc_odometry+0xa8>
		++angle_data->rev;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	619a      	str	r2, [r3, #24]
		abs_angle_diff -= 8192;
 800651c:	8afb      	ldrh	r3, [r7, #22]
 800651e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8006522:	b29b      	uxth	r3, r3
 8006524:	82fb      	strh	r3, [r7, #22]
 8006526:	e00e      	b.n	8006546 <motor_calc_odometry+0xc6>
	} else if (abs_angle_diff < -4096) {
 8006528:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800652c:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8006530:	da09      	bge.n	8006546 <motor_calc_odometry+0xc6>
		--angle_data->rev;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	619a      	str	r2, [r3, #24]
		abs_angle_diff += 8192;
 800653c:	8afb      	ldrh	r3, [r7, #22]
 800653e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006542:	b29b      	uxth	r3, r3
 8006544:	82fb      	strh	r3, [r7, #22]
	}

	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800654c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80065e4 <motor_calc_odometry+0x164>
 8006550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006558:	ee17 3a90 	vmov	r3, s15
 800655c:	82bb      	strh	r3, [r7, #20]
	angle_data->ticks += abs_angle_diff;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006566:	441a      	add	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks > angle_data->max_ticks) {
 800656c:	e006      	b.n	800657c <motor_calc_odometry+0xfc>
		angle_data->ticks -= angle_data->tick_range;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks > angle_data->max_ticks) {
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	429a      	cmp	r2, r3
 8006586:	dcf2      	bgt.n	800656e <motor_calc_odometry+0xee>
	}
	while (angle_data->ticks < angle_data->min_ticks) {
 8006588:	e006      	b.n	8006598 <motor_calc_odometry+0x118>
		angle_data->ticks += angle_data->tick_range;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	441a      	add	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks < angle_data->min_ticks) {
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	dbf2      	blt.n	800658a <motor_calc_odometry+0x10a>
	}

	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80065b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80065ba:	8abb      	ldrh	r3, [r7, #20]
 80065bc:	ee07 3a90 	vmov	s15, r3
 80065c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	motor_data->angle[1] = motor_data->angle[0];
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	805a      	strh	r2, [r3, #2]
}
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	46000000 	.word	0x46000000

080065e8 <control_input_task>:
uint8_t g_safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;



void control_input_task(void *argument) {
 80065e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065ec:	b088      	sub	sp, #32
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 80065f2:	f000 f959 	bl	80068a8 <control_reset>
	chassis_yaw_pid_init();
 80065f6:	f000 fb47 	bl	8006c88 <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 80065fa:	4b80      	ldr	r3, [pc, #512]	@ (80067fc <control_input_task+0x214>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	731a      	strb	r2, [r3, #12]
	aimbot_pid_init();
 8006600:	f000 fee0 	bl	80073c4 <aimbot_pid_init>
	dbus_remote_start();
 8006604:	f7fa ff70 	bl	80014e8 <dbus_remote_start>
	gear_speed.curr_gear = GEAR_DEFAULT;
 8006608:	4b7d      	ldr	r3, [pc, #500]	@ (8006800 <control_input_task+0x218>)
 800660a:	2203      	movs	r2, #3
 800660c:	701a      	strb	r2, [r3, #0]
	set_gear();
 800660e:	f000 fabf 	bl	8006b90 <set_gear>
	g_safety_toggle = 1;
 8006612:	4b7c      	ldr	r3, [pc, #496]	@ (8006804 <control_input_task+0x21c>)
 8006614:	2201      	movs	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 8006618:	2064      	movs	r0, #100	@ 0x64
 800661a:	f013 fa33 	bl	8019a84 <vTaskDelay>
	uint8_t rc_check;
	while (fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50 || fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50){
 800661e:	e01a      	b.n	8006656 <control_input_task+0x6e>
		uint8_t temp_msg;
		temp_msg = not_ok;
 8006620:	2302      	movs	r3, #2
 8006622:	74fb      	strb	r3, [r7, #19]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8006624:	4b78      	ldr	r3, [pc, #480]	@ (8006808 <control_input_task+0x220>)
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	f107 0113 	add.w	r1, r7, #19
 800662c:	2300      	movs	r3, #0
 800662e:	2200      	movs	r2, #0
 8006630:	f012 fb3e 	bl	8018cb0 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8006634:	21c8      	movs	r1, #200	@ 0xc8
 8006636:	2001      	movs	r0, #1
 8006638:	f013 fff4 	bl	801a624 <ulTaskNotifyTake>
 800663c:	4603      	mov	r3, r0
 800663e:	76fb      	strb	r3, [r7, #27]
		HAL_UART_DMAStop(&DBUS_UART);
 8006640:	4872      	ldr	r0, [pc, #456]	@ (800680c <control_input_task+0x224>)
 8006642:	f00d fb35 	bl	8013cb0 <HAL_UART_DMAStop>
		dbus_remote_start();
 8006646:	f7fa ff4f 	bl	80014e8 <dbus_remote_start>
		if (rc_check){
 800664a:	7efb      	ldrb	r3, [r7, #27]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <control_input_task+0x6e>
			vTaskDelay(200);
 8006650:	20c8      	movs	r0, #200	@ 0xc8
 8006652:	f013 fa17 	bl	8019a84 <vTaskDelay>
	while (fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50 || fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50){
 8006656:	4b6e      	ldr	r3, [pc, #440]	@ (8006810 <control_input_task+0x228>)
 8006658:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	f7f9 ff61 	bl	8000524 <__aeabi_i2d>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4690      	mov	r8, r2
 8006668:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	4b68      	ldr	r3, [pc, #416]	@ (8006814 <control_input_task+0x22c>)
 8006672:	4640      	mov	r0, r8
 8006674:	4649      	mov	r1, r9
 8006676:	f7fa fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1cf      	bne.n	8006620 <control_input_task+0x38>
 8006680:	4b63      	ldr	r3, [pc, #396]	@ (8006810 <control_input_task+0x228>)
 8006682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006686:	4618      	mov	r0, r3
 8006688:	f7f9 ff4c 	bl	8000524 <__aeabi_i2d>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4692      	mov	sl, r2
 8006692:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	4b5e      	ldr	r3, [pc, #376]	@ (8006814 <control_input_task+0x22c>)
 800669c:	4650      	mov	r0, sl
 800669e:	4659      	mov	r1, fp
 80066a0:	f7fa fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1ba      	bne.n	8006620 <control_input_task+0x38>
 80066aa:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <control_input_task+0x228>)
 80066ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7f9 ff37 	bl	8000524 <__aeabi_i2d>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	603a      	str	r2, [r7, #0]
 80066bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	4b53      	ldr	r3, [pc, #332]	@ (8006814 <control_input_task+0x22c>)
 80066c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066cc:	f7fa fa24 	bl	8000b18 <__aeabi_dcmpgt>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1a4      	bne.n	8006620 <control_input_task+0x38>
 80066d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006810 <control_input_task+0x228>)
 80066d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7f9 ff21 	bl	8000524 <__aeabi_i2d>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4614      	mov	r4, r2
 80066e8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	4b48      	ldr	r3, [pc, #288]	@ (8006814 <control_input_task+0x22c>)
 80066f2:	4620      	mov	r0, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7fa fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d18f      	bne.n	8006620 <control_input_task+0x38>
		}
	}
	g_safety_toggle = ARM_SWITCH;
 8006700:	4b40      	ldr	r3, [pc, #256]	@ (8006804 <control_input_task+0x21c>)
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]

	uint32_t last_song = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800670a:	21c8      	movs	r1, #200	@ 0xc8
 800670c:	2001      	movs	r0, #1
 800670e:	f013 ff89 	bl	801a624 <ulTaskNotifyTake>
 8006712:	4603      	mov	r3, r0
 8006714:	76fb      	strb	r3, [r7, #27]
		if (rc_check) {
 8006716:	7efb      	ldrb	r3, [r7, #27]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d04c      	beq.n	80067b6 <control_input_task+0x1ce>
			status_led(1, on_led);
 800671c:	2100      	movs	r1, #0
 800671e:	2001      	movs	r0, #1
 8006720:	f7fb fc4a 	bl	8001fb8 <status_led>
			start_time = xTaskGetTickCount();
 8006724:	f013 fb02 	bl	8019d2c <xTaskGetTickCount>
 8006728:	4603      	mov	r3, r0
 800672a:	617b      	str	r3, [r7, #20]
			if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800672c:	4b38      	ldr	r3, [pc, #224]	@ (8006810 <control_input_task+0x228>)
 800672e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d123      	bne.n	800677e <control_input_task+0x196>

				if ((g_remote_cmd.left_switch == ge_LSW_UNSAFE) && (HAL_GetTick() - last_song > 5000)){
 8006736:	4b36      	ldr	r3, [pc, #216]	@ (8006810 <control_input_task+0x228>)
 8006738:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10d      	bne.n	800675c <control_input_task+0x174>
 8006740:	f005 ffda 	bl	800c6f8 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d904      	bls.n	800675c <control_input_task+0x174>
					uint8_t temp_msg;
					last_song = HAL_GetTick();
 8006752:	f005 ffd1 	bl	800c6f8 <HAL_GetTick>
 8006756:	61f8      	str	r0, [r7, #28]
					temp_msg = song;
 8006758:	2300      	movs	r3, #0
 800675a:	76bb      	strb	r3, [r7, #26]
//					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
				}
				laser_on();
 800675c:	f7fa ff68 	bl	8001630 <laser_on>
				control_mode_change(g_remote_cmd.side_dial);
 8006760:	4b2b      	ldr	r3, [pc, #172]	@ (8006810 <control_input_task+0x228>)
 8006762:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f8d4 	bl	8006914 <control_mode_change>
				g_safety_toggle = 0;
 800676c:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <control_input_task+0x21c>)
 800676e:	2200      	movs	r2, #0
 8006770:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 8006772:	4b29      	ldr	r3, [pc, #164]	@ (8006818 <control_input_task+0x230>)
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
				control_reset();
 8006778:	f000 f896 	bl	80068a8 <control_reset>
 800677c:	e037      	b.n	80067ee <control_input_task+0x206>
			} else {

				switch (control_mode) {
 800677e:	4b27      	ldr	r3, [pc, #156]	@ (800681c <control_input_task+0x234>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d002      	beq.n	800678c <control_input_task+0x1a4>
 8006786:	2b02      	cmp	r3, #2
 8006788:	d008      	beq.n	800679c <control_input_task+0x1b4>
					break;
					;
#endif

				default:
					break;
 800678a:	e00f      	b.n	80067ac <control_input_task+0x1c4>
					keyboard_gear_shifter(&gear_speed);
 800678c:	481c      	ldr	r0, [pc, #112]	@ (8006800 <control_input_task+0x218>)
 800678e:	f000 fa9f 	bl	8006cd0 <keyboard_gear_shifter>
					set_gear();
 8006792:	f000 f9fd 	bl	8006b90 <set_gear>
					keyboard_control_input();
 8006796:	f000 fa91 	bl	8006cbc <keyboard_control_input>
					break;
 800679a:	e007      	b.n	80067ac <control_input_task+0x1c4>
					remote_gear_shifter(&gear_speed);
 800679c:	4818      	ldr	r0, [pc, #96]	@ (8006800 <control_input_task+0x218>)
 800679e:	f000 fc75 	bl	800708c <remote_gear_shifter>
					set_gear();
 80067a2:	f000 f9f5 	bl	8006b90 <set_gear>
					remote_control_input();
 80067a6:	f000 fc67 	bl	8007078 <remote_control_input>
					break;
 80067aa:	bf00      	nop

				}
				status_led(1, off_led);
 80067ac:	2101      	movs	r1, #1
 80067ae:	2001      	movs	r0, #1
 80067b0:	f7fb fc02 	bl	8001fb8 <status_led>
 80067b4:	e01b      	b.n	80067ee <control_input_task+0x206>
			}
		} else {
			//restart remote uart
			if (HAL_GetTick() - g_remote_cmd.last_time > 100) {
 80067b6:	f005 ff9f 	bl	800c6f8 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b14      	ldr	r3, [pc, #80]	@ (8006810 <control_input_task+0x228>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b64      	cmp	r3, #100	@ 0x64
 80067c4:	d909      	bls.n	80067da <control_input_task+0x1f2>
				HAL_UART_DMAStop(&DBUS_UART);
 80067c6:	4811      	ldr	r0, [pc, #68]	@ (800680c <control_input_task+0x224>)
 80067c8:	f00d fa72 	bl	8013cb0 <HAL_UART_DMAStop>
				dbus_remote_start();
 80067cc:	f7fa fe8c 	bl	80014e8 <dbus_remote_start>
				g_remote_cmd.last_time = HAL_GetTick();
 80067d0:	f005 ff92 	bl	800c6f8 <HAL_GetTick>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006810 <control_input_task+0x228>)
 80067d8:	6213      	str	r3, [r2, #32]
			}
			kill_can();
 80067da:	f004 fe65 	bl	800b4a8 <kill_can>
			control_reset();
 80067de:	f000 f863 	bl	80068a8 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <control_input_task+0x230>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
			g_safety_toggle = 1;
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <control_input_task+0x21c>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 80067ee:	f107 0314 	add.w	r3, r7, #20
 80067f2:	2102      	movs	r1, #2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f013 f8c5 	bl	8019984 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 80067fa:	e786      	b.n	800670a <control_input_task+0x122>
 80067fc:	200038c0 	.word	0x200038c0
 8006800:	20003904 	.word	0x20003904
 8006804:	20000031 	.word	0x20000031
 8006808:	20003bb4 	.word	0x20003bb4
 800680c:	20001c5c 	.word	0x20001c5c
 8006810:	20000838 	.word	0x20000838
 8006814:	40490000 	.word	0x40490000
 8006818:	20000032 	.word	0x20000032
 800681c:	20000030 	.word	0x20000030

08006820 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0

}
 8006824:	bf00      	nop
 8006826:	eeb0 0a67 	vmov.f32	s0, s15
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw){
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	ed87 0a03 	vstr	s0, [r7, #12]
 800683e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006842:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <chassis_set_ctrl+0x40>)
 8006848:	2201      	movs	r2, #1
 800684a:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 800684c:	4a09      	ldr	r2, [pc, #36]	@ (8006874 <chassis_set_ctrl+0x40>)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 8006852:	4a08      	ldr	r2, [pc, #32]	@ (8006874 <chassis_set_ctrl+0x40>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = -yaw;
 8006858:	edd7 7a01 	vldr	s15, [r7, #4]
 800685c:	eef1 7a67 	vneg.f32	s15, s15
 8006860:	4b04      	ldr	r3, [pc, #16]	@ (8006874 <chassis_set_ctrl+0x40>)
 8006862:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	200038a0 	.word	0x200038a0

08006878 <chassis_kill_ctrl>:

void chassis_kill_ctrl(){
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <chassis_kill_ctrl+0x2c>)
 800687e:	2200      	movs	r2, #0
 8006880:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 8006882:	4b08      	ldr	r3, [pc, #32]	@ (80068a4 <chassis_kill_ctrl+0x2c>)
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <chassis_kill_ctrl+0x2c>)
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8006892:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <chassis_kill_ctrl+0x2c>)
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	609a      	str	r2, [r3, #8]
}
 800689a:	bf00      	nop
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	200038a0 	.word	0x200038a0

080068a8 <control_reset>:
		}
	}
	return 0;
}

void control_reset() {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 80068ac:	4b14      	ldr	r3, [pc, #80]	@ (8006900 <control_reset+0x58>)
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 80068b4:	4b12      	ldr	r3, [pc, #72]	@ (8006900 <control_reset+0x58>)
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 80068bc:	4b10      	ldr	r3, [pc, #64]	@ (8006900 <control_reset+0x58>)
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 80068c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006900 <control_reset+0x58>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 80068ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006904 <control_reset+0x5c>)
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <control_reset+0x60>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006904 <control_reset+0x5c>)
 80068d8:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 80068da:	4b0a      	ldr	r3, [pc, #40]	@ (8006904 <control_reset+0x5c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	735a      	strb	r2, [r3, #13]
	launcher_ctrl_data.firing = 0;
 80068e0:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <control_reset+0x64>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <control_reset+0x64>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 80068ec:	4b07      	ldr	r3, [pc, #28]	@ (800690c <control_reset+0x64>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	715a      	strb	r2, [r3, #5]
	g_spinspin_mode = 0;
 80068f2:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <control_reset+0x68>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
	laser_off();
 80068f8:	f7fa fea6 	bl	8001648 <laser_off>
}
 80068fc:	bf00      	nop
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	200038a0 	.word	0x200038a0
 8006904:	200038c0 	.word	0x200038c0
 8006908:	20003ad8 	.word	0x20003ad8
 800690c:	200038b8 	.word	0x200038b8
 8006910:	20003914 	.word	0x20003914

08006914 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	80fb      	strh	r3, [r7, #6]
//assume already in shutdown mode here
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (g_remote_cmd.left_switch == ge_LSW_CONFIG) {
 800691e:	4b6f      	ldr	r3, [pc, #444]	@ (8006adc <control_mode_change+0x1c8>)
 8006920:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d133      	bne.n	8006990 <control_mode_change+0x7c>
		if (left_dial_input > 330 || left_dial_input < -330) {
 8006928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800692c:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8006930:	dc04      	bgt.n	800693c <control_mode_change+0x28>
 8006932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006936:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 800693a:	da23      	bge.n	8006984 <control_mode_change+0x70>
			if (HAL_GetTick() - last_trig_time > 1000) {
 800693c:	f005 fedc 	bl	800c6f8 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	4b67      	ldr	r3, [pc, #412]	@ (8006ae0 <control_mode_change+0x1cc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800694c:	f240 80c2 	bls.w	8006ad4 <control_mode_change+0x1c0>
				switch (control_mode) {
 8006950:	4b64      	ldr	r3, [pc, #400]	@ (8006ae4 <control_mode_change+0x1d0>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	3b01      	subs	r3, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	d80d      	bhi.n	8006976 <control_mode_change+0x62>
				case KEYBOARD_CTRL_MODE:
				case REMOTE_CTRL_MODE:
					control_mode = SBC_CTRL_MODE;
 800695a:	4b62      	ldr	r3, [pc, #392]	@ (8006ae4 <control_mode_change+0x1d0>)
 800695c:	2203      	movs	r2, #3
 800695e:	701a      	strb	r2, [r3, #0]
					temp_msg = control_sbc;
 8006960:	2305      	movs	r3, #5
 8006962:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8006964:	4b60      	ldr	r3, [pc, #384]	@ (8006ae8 <control_mode_change+0x1d4>)
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	f107 010f 	add.w	r1, r7, #15
 800696c:	2300      	movs	r3, #0
 800696e:	2200      	movs	r2, #0
 8006970:	f012 f99e 	bl	8018cb0 <xQueueGenericSend>
					break;
 8006974:	e005      	b.n	8006982 <control_mode_change+0x6e>
				default:
					last_trig_time = HAL_GetTick();
 8006976:	f005 febf 	bl	800c6f8 <HAL_GetTick>
 800697a:	4603      	mov	r3, r0
 800697c:	4a58      	ldr	r2, [pc, #352]	@ (8006ae0 <control_mode_change+0x1cc>)
 800697e:	6013      	str	r3, [r2, #0]
					break;
 8006980:	bf00      	nop
			if (HAL_GetTick() - last_trig_time > 1000) {
 8006982:	e0a7      	b.n	8006ad4 <control_mode_change+0x1c0>
				}
			}
		} else {
			last_trig_time = HAL_GetTick();
 8006984:	f005 feb8 	bl	800c6f8 <HAL_GetTick>
 8006988:	4603      	mov	r3, r0
 800698a:	4a55      	ldr	r2, [pc, #340]	@ (8006ae0 <control_mode_change+0x1cc>)
 800698c:	6013      	str	r3, [r2, #0]
			break;
		default:
			break;
		}
	}
}
 800698e:	e0a1      	b.n	8006ad4 <control_mode_change+0x1c0>
		switch (control_mode) {
 8006990:	4b54      	ldr	r3, [pc, #336]	@ (8006ae4 <control_mode_change+0x1d0>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b03      	cmp	r3, #3
 8006996:	d052      	beq.n	8006a3e <control_mode_change+0x12a>
 8006998:	2b03      	cmp	r3, #3
 800699a:	f300 8094 	bgt.w	8006ac6 <control_mode_change+0x1b2>
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d002      	beq.n	80069a8 <control_mode_change+0x94>
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d026      	beq.n	80069f4 <control_mode_change+0xe0>
			break;
 80069a6:	e08e      	b.n	8006ac6 <control_mode_change+0x1b2>
			if (left_dial_input < -330) {
 80069a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ac:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 80069b0:	da1a      	bge.n	80069e8 <control_mode_change+0xd4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80069b2:	f005 fea1 	bl	800c6f8 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b49      	ldr	r3, [pc, #292]	@ (8006ae0 <control_mode_change+0x1cc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069c2:	f240 8082 	bls.w	8006aca <control_mode_change+0x1b6>
					control_mode = REMOTE_CTRL_MODE;
 80069c6:	4b47      	ldr	r3, [pc, #284]	@ (8006ae4 <control_mode_change+0x1d0>)
 80069c8:	2202      	movs	r2, #2
 80069ca:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 80069cc:	2304      	movs	r3, #4
 80069ce:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80069d0:	4b45      	ldr	r3, [pc, #276]	@ (8006ae8 <control_mode_change+0x1d4>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	f107 010f 	add.w	r1, r7, #15
 80069d8:	2300      	movs	r3, #0
 80069da:	2200      	movs	r2, #0
 80069dc:	f012 f968 	bl	8018cb0 <xQueueGenericSend>
					launcher_safety_toggle = LAUNCHER_SAFETY;
 80069e0:	4b42      	ldr	r3, [pc, #264]	@ (8006aec <control_mode_change+0x1d8>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	701a      	strb	r2, [r3, #0]
			break;
 80069e6:	e070      	b.n	8006aca <control_mode_change+0x1b6>
				last_trig_time = HAL_GetTick();
 80069e8:	f005 fe86 	bl	800c6f8 <HAL_GetTick>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4a3c      	ldr	r2, [pc, #240]	@ (8006ae0 <control_mode_change+0x1cc>)
 80069f0:	6013      	str	r3, [r2, #0]
			break;
 80069f2:	e06a      	b.n	8006aca <control_mode_change+0x1b6>
			if (left_dial_input > 330) {
 80069f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069f8:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80069fc:	dd19      	ble.n	8006a32 <control_mode_change+0x11e>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80069fe:	f005 fe7b 	bl	800c6f8 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b36      	ldr	r3, [pc, #216]	@ (8006ae0 <control_mode_change+0x1cc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a0e:	d95e      	bls.n	8006ace <control_mode_change+0x1ba>
					control_mode = KEYBOARD_CTRL_MODE;
 8006a10:	4b34      	ldr	r3, [pc, #208]	@ (8006ae4 <control_mode_change+0x1d0>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8006a16:	2303      	movs	r3, #3
 8006a18:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8006a1a:	4b34      	ldr	r3, [pc, #208]	@ (8006aec <control_mode_change+0x1d8>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8006a20:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <control_mode_change+0x1d4>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	f107 010f 	add.w	r1, r7, #15
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f012 f940 	bl	8018cb0 <xQueueGenericSend>
			break;
 8006a30:	e04d      	b.n	8006ace <control_mode_change+0x1ba>
				last_trig_time = HAL_GetTick();
 8006a32:	f005 fe61 	bl	800c6f8 <HAL_GetTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	4a29      	ldr	r2, [pc, #164]	@ (8006ae0 <control_mode_change+0x1cc>)
 8006a3a:	6013      	str	r3, [r2, #0]
			break;
 8006a3c:	e047      	b.n	8006ace <control_mode_change+0x1ba>
			if (left_dial_input < -330) {
 8006a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a42:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 8006a46:	da19      	bge.n	8006a7c <control_mode_change+0x168>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8006a48:	f005 fe56 	bl	800c6f8 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ae0 <control_mode_change+0x1cc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a58:	d93b      	bls.n	8006ad2 <control_mode_change+0x1be>
					control_mode = REMOTE_CTRL_MODE;
 8006a5a:	4b22      	ldr	r3, [pc, #136]	@ (8006ae4 <control_mode_change+0x1d0>)
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8006a60:	2304      	movs	r3, #4
 8006a62:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8006a64:	4b21      	ldr	r3, [pc, #132]	@ (8006aec <control_mode_change+0x1d8>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <control_mode_change+0x1d4>)
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	f107 010f 	add.w	r1, r7, #15
 8006a72:	2300      	movs	r3, #0
 8006a74:	2200      	movs	r2, #0
 8006a76:	f012 f91b 	bl	8018cb0 <xQueueGenericSend>
			break;
 8006a7a:	e02a      	b.n	8006ad2 <control_mode_change+0x1be>
			} else if (left_dial_input > 330) {
 8006a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a80:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8006a84:	dd19      	ble.n	8006aba <control_mode_change+0x1a6>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8006a86:	f005 fe37 	bl	800c6f8 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b14      	ldr	r3, [pc, #80]	@ (8006ae0 <control_mode_change+0x1cc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a96:	d91c      	bls.n	8006ad2 <control_mode_change+0x1be>
					control_mode = KEYBOARD_CTRL_MODE;
 8006a98:	4b12      	ldr	r3, [pc, #72]	@ (8006ae4 <control_mode_change+0x1d0>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8006aa2:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <control_mode_change+0x1d8>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae8 <control_mode_change+0x1d4>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	f107 010f 	add.w	r1, r7, #15
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f012 f8fc 	bl	8018cb0 <xQueueGenericSend>
			break;
 8006ab8:	e00b      	b.n	8006ad2 <control_mode_change+0x1be>
				last_trig_time = HAL_GetTick();
 8006aba:	f005 fe1d 	bl	800c6f8 <HAL_GetTick>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4a07      	ldr	r2, [pc, #28]	@ (8006ae0 <control_mode_change+0x1cc>)
 8006ac2:	6013      	str	r3, [r2, #0]
			break;
 8006ac4:	e005      	b.n	8006ad2 <control_mode_change+0x1be>
			break;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <control_mode_change+0x1c0>
			break;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <control_mode_change+0x1c0>
			break;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <control_mode_change+0x1c0>
			break;
 8006ad2:	bf00      	nop
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000838 	.word	0x20000838
 8006ae0:	20003918 	.word	0x20003918
 8006ae4:	20000030 	.word	0x20000030
 8006ae8:	20003bb4 	.word	0x20003bb4
 8006aec:	20000032 	.word	0x20000032

08006af0 <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	ed87 0a01 	vstr	s0, [r7, #4]
 8006afa:	edc7 0a00 	vstr	s1, [r7]
//		yaw_radians -= 2 * PI;
//	}
//	while (yaw_radians < -PI) {
//		yaw_radians += 2 * PI;
//	}
	float temp_yaw = gimbal_ctrl_data.yaw + yaw_radians;
 8006afe:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <gimbal_turn_ang+0x90>)
 8006b00:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b04:	ed97 7a00 	vldr	s14, [r7]
 8006b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b0c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp_yaw = (temp_yaw > PI) ? (temp_yaw - 2 * PI) : (temp_yaw < -PI) ? (temp_yaw + 2* PI) : temp_yaw;
 8006b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b14:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006b84 <gimbal_turn_ang+0x94>
 8006b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b20:	dd06      	ble.n	8006b30 <gimbal_turn_ang+0x40>
 8006b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b26:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006b88 <gimbal_turn_ang+0x98>
 8006b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b2e:	e011      	b.n	8006b54 <gimbal_turn_ang+0x64>
 8006b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b34:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006b8c <gimbal_turn_ang+0x9c>
 8006b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b40:	d506      	bpl.n	8006b50 <gimbal_turn_ang+0x60>
 8006b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b46:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8006b88 <gimbal_turn_ang+0x98>
 8006b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b4e:	e001      	b.n	8006b54 <gimbal_turn_ang+0x64>
 8006b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b54:	edc7 7a03 	vstr	s15, [r7, #12]
	gimbal_ctrl_data.pitch += pit_radians;
 8006b58:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <gimbal_turn_ang+0x90>)
 8006b5a:	ed93 7a00 	vldr	s14, [r3]
 8006b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b66:	4b06      	ldr	r3, [pc, #24]	@ (8006b80 <gimbal_turn_ang+0x90>)
 8006b68:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = temp_yaw;
 8006b6c:	4a04      	ldr	r2, [pc, #16]	@ (8006b80 <gimbal_turn_ang+0x90>)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6053      	str	r3, [r2, #4]
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	200038c0 	.word	0x200038c0
 8006b84:	40490fdb 	.word	0x40490fdb
 8006b88:	40c90fdb 	.word	0x40c90fdb
 8006b8c:	c0490fdb 	.word	0xc0490fdb

08006b90 <set_gear>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void set_gear() {
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
	switch (gear_speed.curr_gear) {
 8006b94:	4b34      	ldr	r3, [pc, #208]	@ (8006c68 <set_gear+0xd8>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	d852      	bhi.n	8006c44 <set_gear+0xb4>
 8006b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <set_gear+0x14>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bbd 	.word	0x08006bbd
 8006ba8:	08006bd3 	.word	0x08006bd3
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006c03 	.word	0x08006c03
 8006bb4:	08006c17 	.word	0x08006c17
 8006bb8:	08006c31 	.word	0x08006c31
	case 1:
		gear_speed.spin_mult = GEAR1_YAW_MULT;
 8006bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <set_gear+0xd8>)
 8006bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8006c6c <set_gear+0xdc>)
 8006bc0:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR1_SPEED_MULT;
 8006bc2:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <set_gear+0xd8>)
 8006bc4:	4a29      	ldr	r2, [pc, #164]	@ (8006c6c <set_gear+0xdc>)
 8006bc6:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR1_ACCEL_MULT;
 8006bc8:	4b27      	ldr	r3, [pc, #156]	@ (8006c68 <set_gear+0xd8>)
 8006bca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006bce:	60da      	str	r2, [r3, #12]
		break;
 8006bd0:	e045      	b.n	8006c5e <set_gear+0xce>
	case 2:
		gear_speed.spin_mult = GEAR2_YAW_MULT;
 8006bd2:	4b25      	ldr	r3, [pc, #148]	@ (8006c68 <set_gear+0xd8>)
 8006bd4:	4a26      	ldr	r2, [pc, #152]	@ (8006c70 <set_gear+0xe0>)
 8006bd6:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR2_SPEED_MULT;
 8006bd8:	4b23      	ldr	r3, [pc, #140]	@ (8006c68 <set_gear+0xd8>)
 8006bda:	4a25      	ldr	r2, [pc, #148]	@ (8006c70 <set_gear+0xe0>)
 8006bdc:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR2_ACCEL_MULT;
 8006bde:	4b22      	ldr	r3, [pc, #136]	@ (8006c68 <set_gear+0xd8>)
 8006be0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006be4:	60da      	str	r2, [r3, #12]
		break;
 8006be6:	e03a      	b.n	8006c5e <set_gear+0xce>
	case 3:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8006be8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c68 <set_gear+0xd8>)
 8006bea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006bee:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8006bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c68 <set_gear+0xd8>)
 8006bf2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006bf6:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <set_gear+0xd8>)
 8006bfa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006bfe:	60da      	str	r2, [r3, #12]
		break;
 8006c00:	e02d      	b.n	8006c5e <set_gear+0xce>
	case 4:
		gear_speed.spin_mult = GEAR4_YAW_MULT;
 8006c02:	4b19      	ldr	r3, [pc, #100]	@ (8006c68 <set_gear+0xd8>)
 8006c04:	4a1b      	ldr	r2, [pc, #108]	@ (8006c74 <set_gear+0xe4>)
 8006c06:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR4_SPEED_MULT;
 8006c08:	4b17      	ldr	r3, [pc, #92]	@ (8006c68 <set_gear+0xd8>)
 8006c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c78 <set_gear+0xe8>)
 8006c0c:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR4_ACCEL_MULT;
 8006c0e:	4b16      	ldr	r3, [pc, #88]	@ (8006c68 <set_gear+0xd8>)
 8006c10:	4a18      	ldr	r2, [pc, #96]	@ (8006c74 <set_gear+0xe4>)
 8006c12:	60da      	str	r2, [r3, #12]
		break;
 8006c14:	e023      	b.n	8006c5e <set_gear+0xce>
	case 5:
		gear_speed.spin_mult = GEAR5_YAW_MULT;
 8006c16:	4b14      	ldr	r3, [pc, #80]	@ (8006c68 <set_gear+0xd8>)
 8006c18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c1c:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR5_SPEED_MULT;
 8006c1e:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <set_gear+0xd8>)
 8006c20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c24:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR5_ACCEL_MULT;
 8006c26:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <set_gear+0xd8>)
 8006c28:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8006c2c:	60da      	str	r2, [r3, #12]
		break;
 8006c2e:	e016      	b.n	8006c5e <set_gear+0xce>
	case 6:
		gear_speed.spin_mult = GEAR6_YAW_MULT;
 8006c30:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <set_gear+0xd8>)
 8006c32:	4a12      	ldr	r2, [pc, #72]	@ (8006c7c <set_gear+0xec>)
 8006c34:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR6_SPEED_MULT;
 8006c36:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <set_gear+0xd8>)
 8006c38:	4a11      	ldr	r2, [pc, #68]	@ (8006c80 <set_gear+0xf0>)
 8006c3a:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR6_ACCEL_MULT;
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <set_gear+0xd8>)
 8006c3e:	4a11      	ldr	r2, [pc, #68]	@ (8006c84 <set_gear+0xf4>)
 8006c40:	60da      	str	r2, [r3, #12]
		break;
 8006c42:	e00c      	b.n	8006c5e <set_gear+0xce>
	default:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8006c44:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <set_gear+0xd8>)
 8006c46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c4a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <set_gear+0xd8>)
 8006c4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c52:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8006c54:	4b04      	ldr	r3, [pc, #16]	@ (8006c68 <set_gear+0xd8>)
 8006c56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c5a:	60da      	str	r2, [r3, #12]
		break;
 8006c5c:	bf00      	nop
	}

}
 8006c5e:	bf00      	nop
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	20003904 	.word	0x20003904
 8006c6c:	3e99999a 	.word	0x3e99999a
 8006c70:	3f19999a 	.word	0x3f19999a
 8006c74:	3f99999a 	.word	0x3f99999a
 8006c78:	3fb33333 	.word	0x3fb33333
 8006c7c:	40400000 	.word	0x40400000
 8006c80:	40a00000 	.word	0x40a00000
 8006c84:	41200000 	.word	0x41200000

08006c88 <chassis_yaw_pid_init>:

void chassis_yaw_pid_init() {
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 8006c8c:	4b09      	ldr	r3, [pc, #36]	@ (8006cb4 <chassis_yaw_pid_init+0x2c>)
 8006c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb8 <chassis_yaw_pid_init+0x30>)
 8006c90:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 8006c92:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <chassis_yaw_pid_init+0x2c>)
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 8006c9a:	4b06      	ldr	r3, [pc, #24]	@ (8006cb4 <chassis_yaw_pid_init+0x2c>)
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 8006ca2:	4b04      	ldr	r3, [pc, #16]	@ (8006cb4 <chassis_yaw_pid_init+0x2c>)
 8006ca4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006ca8:	61da      	str	r2, [r3, #28]
}
 8006caa:	bf00      	nop
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	200038d4 	.word	0x200038d4
 8006cb8:	3f19999a 	.word	0x3f19999a

08006cbc <keyboard_control_input>:
extern int g_spinspin_mode;
static float curr_spinspin = 0;



void keyboard_control_input() {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 8006cc0:	f000 f908 	bl	8006ed4 <mouse_gimbal_input>
	keyboard_chassis_input();
 8006cc4:	f000 f868 	bl	8006d98 <keyboard_chassis_input>
	mouse_launcher_control_input();
 8006cc8:	f000 f97a 	bl	8006fc0 <mouse_launcher_control_input>
}
 8006ccc:	bf00      	nop
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <keyboard_gear_shifter>:

void keyboard_gear_shifter(speed_shift_t *gear_speed) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	if ((g_remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8006cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8006d8c <keyboard_gear_shifter+0xbc>)
 8006cda:	8b5b      	ldrh	r3, [r3, #26]
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d013      	beq.n	8006d0c <keyboard_gear_shifter+0x3c>
			&& (g_remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 8006ce4:	4b29      	ldr	r3, [pc, #164]	@ (8006d8c <keyboard_gear_shifter+0xbc>)
 8006ce6:	8b5b      	ldrh	r3, [r3, #26]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <keyboard_gear_shifter+0x3c>
		gear_speed->curr_gear = 3;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8006cf6:	f005 fcff 	bl	800c6f8 <HAL_GetTick>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	4a24      	ldr	r2, [pc, #144]	@ (8006d90 <keyboard_gear_shifter+0xc0>)
 8006cfe:	6013      	str	r3, [r2, #0]
		ctrl_press_time = HAL_GetTick();
 8006d00:	f005 fcfa 	bl	800c6f8 <HAL_GetTick>
 8006d04:	4603      	mov	r3, r0
 8006d06:	4a23      	ldr	r2, [pc, #140]	@ (8006d94 <keyboard_gear_shifter+0xc4>)
 8006d08:	6013      	str	r3, [r2, #0]
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
		}
		ctrl_press_time = HAL_GetTick();
	}

}
 8006d0a:	e03a      	b.n	8006d82 <keyboard_gear_shifter+0xb2>
	else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT) {
 8006d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006d8c <keyboard_gear_shifter+0xbc>)
 8006d0e:	8b5b      	ldrh	r3, [r3, #26]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d017      	beq.n	8006d48 <keyboard_gear_shifter+0x78>
		if (HAL_GetTick() - shift_press_time > 100) {
 8006d18:	f005 fcee 	bl	800c6f8 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <keyboard_gear_shifter+0xc0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b64      	cmp	r3, #100	@ 0x64
 8006d26:	d909      	bls.n	8006d3c <keyboard_gear_shifter+0x6c>
					(gear_speed->curr_gear < 5) ? gear_speed->curr_gear + 1 : 5;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	bf28      	it	cs
 8006d30:	2304      	movcs	r3, #4
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8006d3c:	f005 fcdc 	bl	800c6f8 <HAL_GetTick>
 8006d40:	4603      	mov	r3, r0
 8006d42:	4a13      	ldr	r2, [pc, #76]	@ (8006d90 <keyboard_gear_shifter+0xc0>)
 8006d44:	6013      	str	r3, [r2, #0]
}
 8006d46:	e01c      	b.n	8006d82 <keyboard_gear_shifter+0xb2>
	else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_CTRL) {
 8006d48:	4b10      	ldr	r3, [pc, #64]	@ (8006d8c <keyboard_gear_shifter+0xbc>)
 8006d4a:	8b5b      	ldrh	r3, [r3, #26]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <keyboard_gear_shifter+0xb2>
		if (HAL_GetTick() - ctrl_press_time > 100) {
 8006d54:	f005 fcd0 	bl	800c6f8 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d94 <keyboard_gear_shifter+0xc4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b64      	cmp	r3, #100	@ 0x64
 8006d62:	d909      	bls.n	8006d78 <keyboard_gear_shifter+0xa8>
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	bf38      	it	cc
 8006d6c:	2302      	movcc	r3, #2
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	701a      	strb	r2, [r3, #0]
		ctrl_press_time = HAL_GetTick();
 8006d78:	f005 fcbe 	bl	800c6f8 <HAL_GetTick>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	4a05      	ldr	r2, [pc, #20]	@ (8006d94 <keyboard_gear_shifter+0xc4>)
 8006d80:	6013      	str	r3, [r2, #0]
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000838 	.word	0x20000838
 8006d90:	2000391c 	.word	0x2000391c
 8006d94:	20003920 	.word	0x20003920

08006d98 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8006d9e:	4b49      	ldr	r3, [pc, #292]	@ (8006ec4 <keyboard_chassis_input+0x12c>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <keyboard_chassis_input+0x18>
 8006da6:	4b48      	ldr	r3, [pc, #288]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006da8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d00f      	beq.n	8006dd0 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8006db0:	4b46      	ldr	r3, [pc, #280]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 8006db6:	4b45      	ldr	r3, [pc, #276]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8006dbe:	4b43      	ldr	r3, [pc, #268]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 8006dc6:	4b41      	ldr	r3, [pc, #260]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8006dce:	e075      	b.n	8006ebc <keyboard_chassis_input+0x124>
		if (g_remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8006dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006dd2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d170      	bne.n	8006ebc <keyboard_chassis_input+0x124>
			chassis_ctrl_data.enabled = 1;
 8006dda:	4b3c      	ldr	r3, [pc, #240]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_Q) {
 8006df2:	4b35      	ldr	r3, [pc, #212]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006df4:	8b5b      	ldrh	r3, [r3, #26]
 8006df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <keyboard_chassis_input+0x6e>
				g_spinspin_mode = 1;
 8006dfe:	4b34      	ldr	r3, [pc, #208]	@ (8006ed0 <keyboard_chassis_input+0x138>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	e008      	b.n	8006e18 <keyboard_chassis_input+0x80>
			} else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_E) {
 8006e06:	4b30      	ldr	r3, [pc, #192]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006e08:	8b5b      	ldrh	r3, [r3, #26]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <keyboard_chassis_input+0x80>
				g_spinspin_mode = 0;
 8006e12:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed0 <keyboard_chassis_input+0x138>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 8006e18:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006e1a:	8b5b      	ldrh	r3, [r3, #26]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <keyboard_chassis_input+0x9c>
				forward_input += KEYBD_MAX_SPD;
 8006e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e30:	edc7 7a02 	vstr	s15, [r7, #8]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 8006e34:	4b24      	ldr	r3, [pc, #144]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006e36:	8b5b      	ldrh	r3, [r3, #26]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <keyboard_chassis_input+0xb8>
				forward_input -= KEYBD_MAX_SPD;
 8006e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e4c:	edc7 7a02 	vstr	s15, [r7, #8]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 8006e50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006e52:	8b5b      	ldrh	r3, [r3, #26]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <keyboard_chassis_input+0xd4>
				horizontal_input -= KEYBD_MAX_SPD;
 8006e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e68:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 8006e6c:	4b16      	ldr	r3, [pc, #88]	@ (8006ec8 <keyboard_chassis_input+0x130>)
 8006e6e:	8b5b      	ldrh	r3, [r3, #26]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <keyboard_chassis_input+0xf0>
				horizontal_input += KEYBD_MAX_SPD;
 8006e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e84:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_spinspin_mode) {
 8006e88:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <keyboard_chassis_input+0x138>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <keyboard_chassis_input+0x10a>
				yaw_input = g_spinspin_mode * CHASSIS_SPINSPIN_MAX;
 8006e90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed0 <keyboard_chassis_input+0x138>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006ea0:	e003      	b.n	8006eaa <keyboard_chassis_input+0x112>
				yaw_input = chassis_center_yaw();
 8006ea2:	f7ff fcbd 	bl	8006820 <chassis_center_yaw>
 8006ea6:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8006eaa:	4a08      	ldr	r2, [pc, #32]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 8006eb0:	4a06      	ldr	r2, [pc, #24]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 8006eb6:	4a05      	ldr	r2, [pc, #20]	@ (8006ecc <keyboard_chassis_input+0x134>)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6093      	str	r3, [r2, #8]
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000031 	.word	0x20000031
 8006ec8:	20000838 	.word	0x20000838
 8006ecc:	200038a0 	.word	0x200038a0
 8006ed0:	20003914 	.word	0x20003914

08006ed4 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8006eda:	4b33      	ldr	r3, [pc, #204]	@ (8006fa8 <mouse_gimbal_input+0xd4>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <mouse_gimbal_input+0x18>
 8006ee2:	4b32      	ldr	r3, [pc, #200]	@ (8006fac <mouse_gimbal_input+0xd8>)
 8006ee4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d103      	bne.n	8006ef4 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8006eec:	4b30      	ldr	r3, [pc, #192]	@ (8006fb0 <mouse_gimbal_input+0xdc>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	735a      	strb	r2, [r3, #13]
 8006ef2:	e055      	b.n	8006fa0 <mouse_gimbal_input+0xcc>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8006ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8006fb0 <mouse_gimbal_input+0xdc>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	735a      	strb	r2, [r3, #13]
//		float pitch_mouse = (float) g_remote_cmd.mouse_y * MOUSE_Y_INVERT
//				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
//		float yaw_mouse = (float) g_remote_cmd.mouse_x * MOUSE_X_INVERT
//				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;

		float pitch_mouse = (float) g_remote_cmd.mouse_vert * MOUSE_Y_INVERT
 8006efa:	4b2c      	ldr	r3, [pc, #176]	@ (8006fac <mouse_gimbal_input+0xd8>)
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8006f06:	eef1 7a67 	vneg.f32	s15, s15
 8006f0a:	ee17 3a90 	vmov	r3, s15
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7f9 fb1a 	bl	8000548 <__aeabi_f2d>
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	4b26      	ldr	r3, [pc, #152]	@ (8006fb4 <mouse_gimbal_input+0xe0>)
 8006f1a:	f7f9 fb6d 	bl	80005f8 <__aeabi_dmul>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4610      	mov	r0, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	4b23      	ldr	r3, [pc, #140]	@ (8006fb8 <mouse_gimbal_input+0xe4>)
 8006f2c:	f7f9 fc8e 	bl	800084c <__aeabi_ddiv>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
		float pitch_mouse = (float) g_remote_cmd.mouse_vert * MOUSE_Y_INVERT
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	f7f9 fe56 	bl	8000be8 <__aeabi_d2f>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) g_remote_cmd.mouse_hori * MOUSE_X_INVERT
 8006f40:	4b1a      	ldr	r3, [pc, #104]	@ (8006fac <mouse_gimbal_input+0xd8>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 8006f4c:	eef1 7a67 	vneg.f32	s15, s15
 8006f50:	ee17 3a90 	vmov	r3, s15
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7f9 faf7 	bl	8000548 <__aeabi_f2d>
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	4b17      	ldr	r3, [pc, #92]	@ (8006fbc <mouse_gimbal_input+0xe8>)
 8006f60:	f7f9 fb4a 	bl	80005f8 <__aeabi_dmul>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <mouse_gimbal_input+0xe4>)
 8006f72:	f7f9 fc6b 	bl	800084c <__aeabi_ddiv>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
		float yaw_mouse = (float) g_remote_cmd.mouse_hori * MOUSE_X_INVERT
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f7f9 fe33 	bl	8000be8 <__aeabi_d2f>
 8006f82:	4603      	mov	r3, r0
 8006f84:	603b      	str	r3, [r7, #0]
		g_remote_cmd.mouse_vert = 0;
 8006f86:	4b09      	ldr	r3, [pc, #36]	@ (8006fac <mouse_gimbal_input+0xd8>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	615a      	str	r2, [r3, #20]
		g_remote_cmd.mouse_hori = 0;
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <mouse_gimbal_input+0xd8>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	611a      	str	r2, [r3, #16]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 8006f92:	edd7 0a00 	vldr	s1, [r7]
 8006f96:	ed97 0a01 	vldr	s0, [r7, #4]
 8006f9a:	f7ff fda9 	bl	8006af0 <gimbal_turn_ang>

	}
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000031 	.word	0x20000031
 8006fac:	20000838 	.word	0x20000838
 8006fb0:	200038c0 	.word	0x200038c0
 8006fb4:	c0240000 	.word	0xc0240000
 8006fb8:	40e00000 	.word	0x40e00000
 8006fbc:	40240000 	.word	0x40240000

08006fc0 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
	if (g_safety_toggle || launcher_safety_toggle
 8006fc4:	4b28      	ldr	r3, [pc, #160]	@ (8007068 <mouse_launcher_control_input+0xa8>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10d      	bne.n	8006fe8 <mouse_launcher_control_input+0x28>
 8006fcc:	4b27      	ldr	r3, [pc, #156]	@ (800706c <mouse_launcher_control_input+0xac>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <mouse_launcher_control_input+0x28>
			|| g_remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8006fd4:	4b26      	ldr	r3, [pc, #152]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 8006fd6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d004      	beq.n	8006fe8 <mouse_launcher_control_input+0x28>
			|| g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8006fde:	4b24      	ldr	r3, [pc, #144]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 8006fe0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d016      	beq.n	8007016 <mouse_launcher_control_input+0x56>
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8006fe8:	4b21      	ldr	r3, [pc, #132]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 8006fea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d102      	bne.n	8006ff8 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 8006ff2:	4b20      	ldr	r3, [pc, #128]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.firing = 0;
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8007000:	2200      	movs	r2, #0
 8007002:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8007004:	4b1a      	ldr	r3, [pc, #104]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 8007006:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d027      	beq.n	800705e <mouse_launcher_control_input+0x9e>
			launcher_safety_toggle = 0;
 800700e:	4b17      	ldr	r3, [pc, #92]	@ (800706c <mouse_launcher_control_input+0xac>)
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8007014:	e023      	b.n	800705e <mouse_launcher_control_input+0x9e>
		}
	} else {
		launcher_ctrl_data.enabled = 1;
 8007016:	4b17      	ldr	r3, [pc, #92]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8007018:	2201      	movs	r2, #1
 800701a:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 800701c:	4b15      	ldr	r3, [pc, #84]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 800701e:	2201      	movs	r2, #1
 8007020:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8007022:	4b13      	ldr	r3, [pc, #76]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 8007024:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10b      	bne.n	8007044 <mouse_launcher_control_input+0x84>
			if (g_remote_cmd.mouse_right) {
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 800702e:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <mouse_launcher_control_input+0x7e>
				launcher_ctrl_data.override = 1;
 8007036:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8007038:	2201      	movs	r2, #1
 800703a:	711a      	strb	r2, [r3, #4]
 800703c:	e002      	b.n	8007044 <mouse_launcher_control_input+0x84>
			} else {
				launcher_ctrl_data.override = 0;
 800703e:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8007040:	2200      	movs	r2, #0
 8007042:	711a      	strb	r2, [r3, #4]
			}
		}
		if (g_remote_cmd.mouse_left) {
 8007044:	4b0a      	ldr	r3, [pc, #40]	@ (8007070 <mouse_launcher_control_input+0xb0>)
 8007046:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <mouse_launcher_control_input+0x96>
			launcher_ctrl_data.firing =1;
 800704e:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8007050:	2201      	movs	r2, #1
 8007052:	805a      	strh	r2, [r3, #2]

		} else {
			launcher_ctrl_data.firing = 0;
		}
	}
}
 8007054:	e003      	b.n	800705e <mouse_launcher_control_input+0x9e>
			launcher_ctrl_data.firing = 0;
 8007056:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <mouse_launcher_control_input+0xb4>)
 8007058:	2200      	movs	r2, #0
 800705a:	805a      	strh	r2, [r3, #2]
}
 800705c:	e7ff      	b.n	800705e <mouse_launcher_control_input+0x9e>
 800705e:	bf00      	nop
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000031 	.word	0x20000031
 800706c:	20000032 	.word	0x20000032
 8007070:	20000838 	.word	0x20000838
 8007074:	200038b8 	.word	0x200038b8

08007078 <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t g_safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 800707c:	f000 f8f0 	bl	8007260 <remote_gimbal_input>
	remote_chassis_input();
 8007080:	f000 f87e 	bl	8007180 <remote_chassis_input>
	remote_launcher_control_input();
 8007084:	f000 f958 	bl	8007338 <remote_launcher_control_input>
}
 8007088:	bf00      	nop
 800708a:	bd80      	pop	{r7, pc}

0800708c <remote_gear_shifter>:
void remote_gear_shifter(speed_shift_t* gear_speed){
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if (g_remote_cmd.left_switch == ge_LSW_CONFIG) {
 8007094:	4b36      	ldr	r3, [pc, #216]	@ (8007170 <remote_gear_shifter+0xe4>)
 8007096:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d164      	bne.n	8007168 <remote_gear_shifter+0xdc>
		if (g_remote_cmd.side_dial > 330) {
 800709e:	4b34      	ldr	r3, [pc, #208]	@ (8007170 <remote_gear_shifter+0xe4>)
 80070a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80070a4:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80070a8:	dd2c      	ble.n	8007104 <remote_gear_shifter+0x78>
			if (HAL_GetTick() - shift_press_time > 100) {
 80070aa:	f005 fb25 	bl	800c6f8 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b30      	ldr	r3, [pc, #192]	@ (8007174 <remote_gear_shifter+0xe8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b64      	cmp	r3, #100	@ 0x64
 80070b8:	d91e      	bls.n	80070f8 <remote_gear_shifter+0x6c>
				gear_speed->curr_gear =
						(gear_speed->curr_gear < 6) ?
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 80070be:	2b05      	cmp	r3, #5
 80070c0:	bf28      	it	cs
 80070c2:	2305      	movcs	r3, #5
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	3301      	adds	r3, #1
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	701a      	strb	r2, [r3, #0]
								gear_speed->curr_gear + 1 : 6;
				temp_msg = bz_high;
 80070ce:	2306      	movs	r3, #6
 80070d0:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
 80070d6:	e00a      	b.n	80070ee <remote_gear_shifter+0x62>
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80070d8:	4b27      	ldr	r3, [pc, #156]	@ (8007178 <remote_gear_shifter+0xec>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	f107 010d 	add.w	r1, r7, #13
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	f011 fde4 	bl	8018cb0 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	3301      	adds	r3, #1
 80070ec:	73fb      	strb	r3, [r7, #15]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	7bfa      	ldrb	r2, [r7, #15]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d3ef      	bcc.n	80070d8 <remote_gear_shifter+0x4c>
				}
			}
			shift_press_time = HAL_GetTick();
 80070f8:	f005 fafe 	bl	800c6f8 <HAL_GetTick>
 80070fc:	4603      	mov	r3, r0
 80070fe:	4a1d      	ldr	r2, [pc, #116]	@ (8007174 <remote_gear_shifter+0xe8>)
 8007100:	6013      	str	r3, [r2, #0]
				}
			}
			ctrl_press_time = HAL_GetTick();
		}
	}
}
 8007102:	e031      	b.n	8007168 <remote_gear_shifter+0xdc>
		else if (g_remote_cmd.side_dial < -330) {
 8007104:	4b1a      	ldr	r3, [pc, #104]	@ (8007170 <remote_gear_shifter+0xe4>)
 8007106:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800710a:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 800710e:	da2b      	bge.n	8007168 <remote_gear_shifter+0xdc>
			if (HAL_GetTick() - ctrl_press_time > 100) {
 8007110:	f005 faf2 	bl	800c6f8 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	4b19      	ldr	r3, [pc, #100]	@ (800717c <remote_gear_shifter+0xf0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b64      	cmp	r3, #100	@ 0x64
 800711e:	d91e      	bls.n	800715e <remote_gear_shifter+0xd2>
						(gear_speed->curr_gear > 1) ?
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 8007124:	2b02      	cmp	r3, #2
 8007126:	bf38      	it	cc
 8007128:	2302      	movcc	r3, #2
 800712a:	b2db      	uxtb	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b2da      	uxtb	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	701a      	strb	r2, [r3, #0]
				temp_msg = bz_low;
 8007134:	2307      	movs	r3, #7
 8007136:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8007138:	2300      	movs	r3, #0
 800713a:	73bb      	strb	r3, [r7, #14]
 800713c:	e00a      	b.n	8007154 <remote_gear_shifter+0xc8>
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800713e:	4b0e      	ldr	r3, [pc, #56]	@ (8007178 <remote_gear_shifter+0xec>)
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	f107 010d 	add.w	r1, r7, #13
 8007146:	2300      	movs	r3, #0
 8007148:	2200      	movs	r2, #0
 800714a:	f011 fdb1 	bl	8018cb0 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	3301      	adds	r3, #1
 8007152:	73bb      	strb	r3, [r7, #14]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	7bba      	ldrb	r2, [r7, #14]
 800715a:	429a      	cmp	r2, r3
 800715c:	d3ef      	bcc.n	800713e <remote_gear_shifter+0xb2>
			ctrl_press_time = HAL_GetTick();
 800715e:	f005 facb 	bl	800c6f8 <HAL_GetTick>
 8007162:	4603      	mov	r3, r0
 8007164:	4a05      	ldr	r2, [pc, #20]	@ (800717c <remote_gear_shifter+0xf0>)
 8007166:	6013      	str	r3, [r2, #0]
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000838 	.word	0x20000838
 8007174:	20003924 	.word	0x20003924
 8007178:	20003bb4 	.word	0x20003bb4
 800717c:	20003928 	.word	0x20003928

08007180 <remote_chassis_input>:

void remote_chassis_input() {
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8007186:	4b32      	ldr	r3, [pc, #200]	@ (8007250 <remote_chassis_input+0xd0>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <remote_chassis_input+0x18>
 800718e:	4b31      	ldr	r3, [pc, #196]	@ (8007254 <remote_chassis_input+0xd4>)
 8007190:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d002      	beq.n	800719e <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8007198:	f7ff fb6e 	bl	8006878 <chassis_kill_ctrl>
 800719c:	e053      	b.n	8007246 <remote_chassis_input+0xc6>
	} else {
			chassis_ctrl_data.enabled = 1;
 800719e:	4b2e      	ldr	r3, [pc, #184]	@ (8007258 <remote_chassis_input+0xd8>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	60bb      	str	r3, [r7, #8]
			float forward_input = 0.0;
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	607b      	str	r3, [r7, #4]
			float yaw_input = 0.0;
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]

			forward_input = (float) g_remote_cmd.left_y / RC_LIMITS;
 80071b6:	4b27      	ldr	r3, [pc, #156]	@ (8007254 <remote_chassis_input+0xd4>)
 80071b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071c4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800725c <remote_chassis_input+0xdc>
 80071c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071cc:	edc7 7a01 	vstr	s15, [r7, #4]
			horizontal_input = (float) g_remote_cmd.left_x / RC_LIMITS;
 80071d0:	4b20      	ldr	r3, [pc, #128]	@ (8007254 <remote_chassis_input+0xd4>)
 80071d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071de:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800725c <remote_chassis_input+0xdc>
 80071e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071e6:	edc7 7a02 	vstr	s15, [r7, #8]

//			yaw_input = (float)g_remote_cmd.right_x * CHASSIS_SPINSPIN_MAX/660;
//			yaw_input = 0;
			if (g_remote_cmd.left_switch == ge_LSW_STANDBY){
 80071ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007254 <remote_chassis_input+0xd4>)
 80071ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d11b      	bne.n	800722c <remote_chassis_input+0xac>
				if (abs(g_remote_cmd.side_dial) > 50 ){
 80071f4:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <remote_chassis_input+0xd4>)
 80071f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfb8      	it	lt
 80071fe:	425b      	neglt	r3, r3
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b32      	cmp	r3, #50	@ 0x32
 8007204:	d90d      	bls.n	8007222 <remote_chassis_input+0xa2>
					yaw_input = (float) g_remote_cmd.side_dial / RC_LIMITS;
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <remote_chassis_input+0xd4>)
 8007208:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007214:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800725c <remote_chassis_input+0xdc>
 8007218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800721c:	edc7 7a03 	vstr	s15, [r7, #12]
 8007220:	e008      	b.n	8007234 <remote_chassis_input+0xb4>
				}
				else {
				yaw_input = chassis_center_yaw();
 8007222:	f7ff fafd 	bl	8006820 <chassis_center_yaw>
 8007226:	ed87 0a03 	vstr	s0, [r7, #12]
 800722a:	e003      	b.n	8007234 <remote_chassis_input+0xb4>
				}
			}
			else {
			yaw_input = chassis_center_yaw();
 800722c:	f7ff faf8 	bl	8006820 <chassis_center_yaw>
 8007230:	ed87 0a03 	vstr	s0, [r7, #12]
			}
			//min value

//yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 8007234:	ed97 1a03 	vldr	s2, [r7, #12]
 8007238:	edd7 0a02 	vldr	s1, [r7, #8]
 800723c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007240:	f7ff faf8 	bl	8006834 <chassis_set_ctrl>
	}
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000031 	.word	0x20000031
 8007254:	20000838 	.word	0x20000838
 8007258:	200038a0 	.word	0x200038a0
 800725c:	44250000 	.word	0x44250000

08007260 <remote_gimbal_input>:

void remote_gimbal_input() {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8007266:	4b30      	ldr	r3, [pc, #192]	@ (8007328 <remote_gimbal_input+0xc8>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d104      	bne.n	8007278 <remote_gimbal_input+0x18>
 800726e:	4b2f      	ldr	r3, [pc, #188]	@ (800732c <remote_gimbal_input+0xcc>)
 8007270:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d103      	bne.n	8007280 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8007278:	4b2d      	ldr	r3, [pc, #180]	@ (8007330 <remote_gimbal_input+0xd0>)
 800727a:	2200      	movs	r2, #0
 800727c:	735a      	strb	r2, [r3, #13]
 800727e:	e044      	b.n	800730a <remote_gimbal_input+0xaa>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8007280:	4b2b      	ldr	r3, [pc, #172]	@ (8007330 <remote_gimbal_input+0xd0>)
 8007282:	2201      	movs	r2, #1
 8007284:	735a      	strb	r2, [r3, #13]
		float pitch_remote = ((float) g_remote_cmd.right_y / 660) * PITCH_INVERT
 8007286:	4b29      	ldr	r3, [pc, #164]	@ (800732c <remote_gimbal_input+0xcc>)
 8007288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007294:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8007334 <remote_gimbal_input+0xd4>
 8007298:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800729c:	ee16 0a90 	vmov	r0, s13
 80072a0:	f7f9 f952 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 80072a4:	a31c      	add	r3, pc, #112	@ (adr r3, 8007318 <remote_gimbal_input+0xb8>)
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f7f9 f9a5 	bl	80005f8 <__aeabi_dmul>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
		float pitch_remote = ((float) g_remote_cmd.right_y / 660) * PITCH_INVERT
 80072b2:	4610      	mov	r0, r2
 80072b4:	4619      	mov	r1, r3
 80072b6:	f7f9 fc97 	bl	8000be8 <__aeabi_d2f>
 80072ba:	4603      	mov	r3, r0
 80072bc:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) g_remote_cmd.right_x / 660) * YAW_INVERT
 80072be:	4b1b      	ldr	r3, [pc, #108]	@ (800732c <remote_gimbal_input+0xcc>)
 80072c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072cc:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8007334 <remote_gimbal_input+0xd4>
 80072d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072d4:	eef1 7a67 	vneg.f32	s15, s15
 80072d8:	ee17 3a90 	vmov	r3, s15
 80072dc:	4618      	mov	r0, r3
 80072de:	f7f9 f933 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 80072e2:	a30f      	add	r3, pc, #60	@ (adr r3, 8007320 <remote_gimbal_input+0xc0>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f9 f986 	bl	80005f8 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
		float yaw_remote = ((float) g_remote_cmd.right_x / 660) * YAW_INVERT
 80072f0:	4610      	mov	r0, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	f7f9 fc78 	bl	8000be8 <__aeabi_d2f>
 80072f8:	4603      	mov	r3, r0
 80072fa:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 80072fc:	edd7 0a00 	vldr	s1, [r7]
 8007300:	ed97 0a01 	vldr	s0, [r7, #4]
 8007304:	f7ff fbf4 	bl	8006af0 <gimbal_turn_ang>
	}
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	f3af 8000 	nop.w
 8007318:	9999999a 	.word	0x9999999a
 800731c:	bfb99999 	.word	0xbfb99999
 8007320:	9999999a 	.word	0x9999999a
 8007324:	3fb99999 	.word	0x3fb99999
 8007328:	20000031 	.word	0x20000031
 800732c:	20000838 	.word	0x20000838
 8007330:	200038c0 	.word	0x200038c0
 8007334:	44250000 	.word	0x44250000

08007338 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800733c:	4b1d      	ldr	r3, [pc, #116]	@ (80073b4 <remote_launcher_control_input+0x7c>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d109      	bne.n	8007358 <remote_launcher_control_input+0x20>
 8007344:	4b1c      	ldr	r3, [pc, #112]	@ (80073b8 <remote_launcher_control_input+0x80>)
 8007346:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d004      	beq.n	8007358 <remote_launcher_control_input+0x20>
			|| g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800734e:	4b1a      	ldr	r3, [pc, #104]	@ (80073b8 <remote_launcher_control_input+0x80>)
 8007350:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d016      	beq.n	8007386 <remote_launcher_control_input+0x4e>
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8007358:	4b17      	ldr	r3, [pc, #92]	@ (80073b8 <remote_launcher_control_input+0x80>)
 800735a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d002      	beq.n	8007368 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 8007362:	4b16      	ldr	r3, [pc, #88]	@ (80073bc <remote_launcher_control_input+0x84>)
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
		}
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8007368:	4b13      	ldr	r3, [pc, #76]	@ (80073b8 <remote_launcher_control_input+0x80>)
 800736a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d102      	bne.n	8007378 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 8007372:	4b13      	ldr	r3, [pc, #76]	@ (80073c0 <remote_launcher_control_input+0x88>)
 8007374:	2200      	movs	r2, #0
 8007376:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.firing = 0;
 8007378:	4b11      	ldr	r3, [pc, #68]	@ (80073c0 <remote_launcher_control_input+0x88>)
 800737a:	2200      	movs	r2, #0
 800737c:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 800737e:	4b10      	ldr	r3, [pc, #64]	@ (80073c0 <remote_launcher_control_input+0x88>)
 8007380:	2200      	movs	r2, #0
 8007382:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.firing = 0;
		}
	}

}
 8007384:	e011      	b.n	80073aa <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 8007386:	4b0e      	ldr	r3, [pc, #56]	@ (80073c0 <remote_launcher_control_input+0x88>)
 8007388:	2201      	movs	r2, #1
 800738a:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 800738c:	4b0c      	ldr	r3, [pc, #48]	@ (80073c0 <remote_launcher_control_input+0x88>)
 800738e:	2201      	movs	r2, #1
 8007390:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8007392:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <remote_launcher_control_input+0x80>)
 8007394:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d103      	bne.n	80073a4 <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.firing = 1;
 800739c:	4b08      	ldr	r3, [pc, #32]	@ (80073c0 <remote_launcher_control_input+0x88>)
 800739e:	2201      	movs	r2, #1
 80073a0:	805a      	strh	r2, [r3, #2]
}
 80073a2:	e002      	b.n	80073aa <remote_launcher_control_input+0x72>
			launcher_ctrl_data.firing = 0;
 80073a4:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <remote_launcher_control_input+0x88>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	805a      	strh	r2, [r3, #2]
}
 80073aa:	bf00      	nop
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20000031 	.word	0x20000031
 80073b8:	20000838 	.word	0x20000838
 80073bc:	20000032 	.word	0x20000032
 80073c0:	200038b8 	.word	0x200038b8

080073c4 <aimbot_pid_init>:
		sbc_new_data = 0;
		control_reset();
	}
}

void aimbot_pid_init() {
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
	aimbot_offset.y_offset = 0;
 80073c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007434 <aimbot_pid_init+0x70>)
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	605a      	str	r2, [r3, #4]
	aimbot_offset.x_offset = 0;
 80073d0:	4b18      	ldr	r3, [pc, #96]	@ (8007434 <aimbot_pid_init+0x70>)
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.kp = AIMBOT_X_KP;
 80073d8:	4b17      	ldr	r3, [pc, #92]	@ (8007438 <aimbot_pid_init+0x74>)
 80073da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80073de:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.ki = AIMBOT_X_KI;
 80073e0:	4b15      	ldr	r3, [pc, #84]	@ (8007438 <aimbot_pid_init+0x74>)
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]
	aimbot_x_pid.kd = AIMBOT_X_KD;
 80073e8:	4b13      	ldr	r3, [pc, #76]	@ (8007438 <aimbot_pid_init+0x74>)
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
	aimbot_x_pid.max_out = 1.5;
 80073f0:	4b11      	ldr	r3, [pc, #68]	@ (8007438 <aimbot_pid_init+0x74>)
 80073f2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80073f6:	61da      	str	r2, [r3, #28]
	aimbot_x_pid.int_max = AIMBOT_KI_MAX;
 80073f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007438 <aimbot_pid_init+0x74>)
 80073fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80073fe:	619a      	str	r2, [r3, #24]

	aimbot_y_pid.kp = AIMBOT_Y_KP;
 8007400:	4b0e      	ldr	r3, [pc, #56]	@ (800743c <aimbot_pid_init+0x78>)
 8007402:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007406:	601a      	str	r2, [r3, #0]
	aimbot_y_pid.ki = AIMBOT_Y_KI;
 8007408:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <aimbot_pid_init+0x78>)
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	605a      	str	r2, [r3, #4]
	aimbot_y_pid.kd = AIMBOT_Y_KD;
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <aimbot_pid_init+0x78>)
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	609a      	str	r2, [r3, #8]
	aimbot_y_pid.max_out = 1.5;
 8007418:	4b08      	ldr	r3, [pc, #32]	@ (800743c <aimbot_pid_init+0x78>)
 800741a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800741e:	61da      	str	r2, [r3, #28]
	aimbot_y_pid.int_max = AIMBOT_KI_MAX;
 8007420:	4b06      	ldr	r3, [pc, #24]	@ (800743c <aimbot_pid_init+0x78>)
 8007422:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007426:	619a      	str	r2, [r3, #24]
}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000398c 	.word	0x2000398c
 8007438:	2000395c 	.word	0x2000395c
 800743c:	2000392c 	.word	0x2000392c

08007440 <hud_task>:
ref_inter_robot_data_t graphic_header;
graphic_data_struct_t graphic_data;
ref_frame_header_t send_header;
uint8_t char_buffer[30];

void hud_task(void *argument) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

	enum drawings {
		spinspin, gearing, robot_state, motor_fault, refresh

	};
	while (ref_robot_data.robot_id == 0) {
 8007448:	e002      	b.n	8007450 <hud_task+0x10>
		vTaskDelay(10);
 800744a:	200a      	movs	r0, #10
 800744c:	f012 fb1a 	bl	8019a84 <vTaskDelay>
	while (ref_robot_data.robot_id == 0) {
 8007450:	4b69      	ldr	r3, [pc, #420]	@ (80075f8 <hud_task+0x1b8>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f8      	beq.n	800744a <hud_task+0xa>
	}
	uint32_t refresh_timer = HAL_GetTick();
 8007458:	f005 f94e 	bl	800c6f8 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

	uint8_t draw_state = spinspin;
 800745e:	2300      	movs	r3, #0
 8007460:	72fb      	strb	r3, [r7, #11]
	//draw all images
	vTaskDelay(1000);
 8007462:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007466:	f012 fb0d 	bl	8019a84 <vTaskDelay>
	clear_hud();
 800746a:	f000 fb29 	bl	8007ac0 <clear_hud>
	vTaskDelay(150);
 800746e:	2096      	movs	r0, #150	@ 0x96
 8007470:	f012 fb08 	bl	8019a84 <vTaskDelay>
	draw_spinspin(0);
 8007474:	2000      	movs	r0, #0
 8007476:	f000 f8c3 	bl	8007600 <draw_spinspin>
	vTaskDelay(150);
 800747a:	2096      	movs	r0, #150	@ 0x96
 800747c:	f012 fb02 	bl	8019a84 <vTaskDelay>
	draw_gearing(0);
 8007480:	2000      	movs	r0, #0
 8007482:	f000 f9f5 	bl	8007870 <draw_gearing>
	vTaskDelay(150);
 8007486:	2096      	movs	r0, #150	@ 0x96
 8007488:	f012 fafc 	bl	8019a84 <vTaskDelay>
	while (1) {
		if (HAL_GetTick() - refresh_timer > 5000){
 800748c:	f005 f934 	bl	800c6f8 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d904      	bls.n	80074a8 <hud_task+0x68>
			draw_state = refresh;
 800749e:	2304      	movs	r3, #4
 80074a0:	72fb      	strb	r3, [r7, #11]
			refresh_timer = HAL_GetTick();
 80074a2:	f005 f929 	bl	800c6f8 <HAL_GetTick>
 80074a6:	60f8      	str	r0, [r7, #12]
		}
		switch (ref_robot_data.robot_id) {
 80074a8:	4b53      	ldr	r3, [pc, #332]	@ (80075f8 <hud_task+0x1b8>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b06      	cmp	r3, #6
 80074ae:	dc27      	bgt.n	8007500 <hud_task+0xc0>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dc13      	bgt.n	80074dc <hud_task+0x9c>
 80074b4:	e065      	b.n	8007582 <hud_task+0x142>
 80074b6:	3b65      	subs	r3, #101	@ 0x65
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d862      	bhi.n	8007582 <hud_task+0x142>
 80074bc:	a201      	add	r2, pc, #4	@ (adr r2, 80074c4 <hud_task+0x84>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007547 	.word	0x08007547
 80074c8:	08007551 	.word	0x08007551
 80074cc:	0800755b 	.word	0x0800755b
 80074d0:	08007565 	.word	0x08007565
 80074d4:	0800756f 	.word	0x0800756f
 80074d8:	08007579 	.word	0x08007579
 80074dc:	3b01      	subs	r3, #1
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d84f      	bhi.n	8007582 <hud_task+0x142>
 80074e2:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <hud_task+0xa8>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	0800750b 	.word	0x0800750b
 80074ec:	08007515 	.word	0x08007515
 80074f0:	0800751f 	.word	0x0800751f
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007533 	.word	0x08007533
 80074fc:	0800753d 	.word	0x0800753d
 8007500:	2b6a      	cmp	r3, #106	@ 0x6a
 8007502:	dc3e      	bgt.n	8007582 <hud_task+0x142>
 8007504:	2b65      	cmp	r3, #101	@ 0x65
 8007506:	dad6      	bge.n	80074b6 <hud_task+0x76>
 8007508:	e03b      	b.n	8007582 <hud_task+0x142>
		case 1:
			g_client_id = 0x101;
 800750a:	4b3c      	ldr	r3, [pc, #240]	@ (80075fc <hud_task+0x1bc>)
 800750c:	f240 1201 	movw	r2, #257	@ 0x101
 8007510:	801a      	strh	r2, [r3, #0]
			break;
 8007512:	e03a      	b.n	800758a <hud_task+0x14a>
		case 2:
			g_client_id = 0x102;
 8007514:	4b39      	ldr	r3, [pc, #228]	@ (80075fc <hud_task+0x1bc>)
 8007516:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800751a:	801a      	strh	r2, [r3, #0]
			break;
 800751c:	e035      	b.n	800758a <hud_task+0x14a>
		case 3:
			g_client_id = 0x103;
 800751e:	4b37      	ldr	r3, [pc, #220]	@ (80075fc <hud_task+0x1bc>)
 8007520:	f240 1203 	movw	r2, #259	@ 0x103
 8007524:	801a      	strh	r2, [r3, #0]
			break;
 8007526:	e030      	b.n	800758a <hud_task+0x14a>
		case 4:
			g_client_id = 0x104;
 8007528:	4b34      	ldr	r3, [pc, #208]	@ (80075fc <hud_task+0x1bc>)
 800752a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800752e:	801a      	strh	r2, [r3, #0]
			break;
 8007530:	e02b      	b.n	800758a <hud_task+0x14a>
		case 5:
			g_client_id = 0x105;
 8007532:	4b32      	ldr	r3, [pc, #200]	@ (80075fc <hud_task+0x1bc>)
 8007534:	f240 1205 	movw	r2, #261	@ 0x105
 8007538:	801a      	strh	r2, [r3, #0]
			break;
 800753a:	e026      	b.n	800758a <hud_task+0x14a>
		case 6:
			g_client_id = 0x106;
 800753c:	4b2f      	ldr	r3, [pc, #188]	@ (80075fc <hud_task+0x1bc>)
 800753e:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8007542:	801a      	strh	r2, [r3, #0]
			break;
 8007544:	e021      	b.n	800758a <hud_task+0x14a>

		case 101:
			g_client_id = 0x165;
 8007546:	4b2d      	ldr	r3, [pc, #180]	@ (80075fc <hud_task+0x1bc>)
 8007548:	f240 1265 	movw	r2, #357	@ 0x165
 800754c:	801a      	strh	r2, [r3, #0]
			break;
 800754e:	e01c      	b.n	800758a <hud_task+0x14a>
		case 102:
			g_client_id = 0x166;
 8007550:	4b2a      	ldr	r3, [pc, #168]	@ (80075fc <hud_task+0x1bc>)
 8007552:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8007556:	801a      	strh	r2, [r3, #0]
			break;
 8007558:	e017      	b.n	800758a <hud_task+0x14a>
		case 103:
			g_client_id = 0x167;
 800755a:	4b28      	ldr	r3, [pc, #160]	@ (80075fc <hud_task+0x1bc>)
 800755c:	f240 1267 	movw	r2, #359	@ 0x167
 8007560:	801a      	strh	r2, [r3, #0]
			break;
 8007562:	e012      	b.n	800758a <hud_task+0x14a>
		case 104:
			g_client_id = 0x168;
 8007564:	4b25      	ldr	r3, [pc, #148]	@ (80075fc <hud_task+0x1bc>)
 8007566:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800756a:	801a      	strh	r2, [r3, #0]
			break;
 800756c:	e00d      	b.n	800758a <hud_task+0x14a>
		case 105:
			g_client_id = 0x169;
 800756e:	4b23      	ldr	r3, [pc, #140]	@ (80075fc <hud_task+0x1bc>)
 8007570:	f240 1269 	movw	r2, #361	@ 0x169
 8007574:	801a      	strh	r2, [r3, #0]
			break;
 8007576:	e008      	b.n	800758a <hud_task+0x14a>
		case 106:
			g_client_id = 0x16A;
 8007578:	4b20      	ldr	r3, [pc, #128]	@ (80075fc <hud_task+0x1bc>)
 800757a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800757e:	801a      	strh	r2, [r3, #0]
			break;
 8007580:	e003      	b.n	800758a <hud_task+0x14a>
		default:
			g_client_id = 0;
 8007582:	4b1e      	ldr	r3, [pc, #120]	@ (80075fc <hud_task+0x1bc>)
 8007584:	2200      	movs	r2, #0
 8007586:	801a      	strh	r2, [r3, #0]
			break;
 8007588:	bf00      	nop

		}



		switch (draw_state) {
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	2b04      	cmp	r3, #4
 800758e:	d82d      	bhi.n	80075ec <hud_task+0x1ac>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <hud_task+0x158>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075ad 	.word	0x080075ad
 800759c:	080075b9 	.word	0x080075b9
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075c5 	.word	0x080075c5
		case spinspin:
			draw_spinspin(1);
 80075ac:	2001      	movs	r0, #1
 80075ae:	f000 f827 	bl	8007600 <draw_spinspin>
			draw_state = gearing;
 80075b2:	2301      	movs	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
			break;
 80075b6:	e01a      	b.n	80075ee <hud_task+0x1ae>
		case gearing:
			draw_gearing(1);
 80075b8:	2001      	movs	r0, #1
 80075ba:	f000 f959 	bl	8007870 <draw_gearing>
			draw_state = spinspin;
 80075be:	2300      	movs	r3, #0
 80075c0:	72fb      	strb	r3, [r7, #11]
			break;
 80075c2:	e014      	b.n	80075ee <hud_task+0x1ae>
		case robot_state:
			break;
		case motor_fault:
			break;
		case refresh:
			clear_hud();
 80075c4:	f000 fa7c 	bl	8007ac0 <clear_hud>
			vTaskDelay(150);
 80075c8:	2096      	movs	r0, #150	@ 0x96
 80075ca:	f012 fa5b 	bl	8019a84 <vTaskDelay>
			draw_spinspin(0);
 80075ce:	2000      	movs	r0, #0
 80075d0:	f000 f816 	bl	8007600 <draw_spinspin>
			vTaskDelay(150);
 80075d4:	2096      	movs	r0, #150	@ 0x96
 80075d6:	f012 fa55 	bl	8019a84 <vTaskDelay>
			draw_gearing(0);
 80075da:	2000      	movs	r0, #0
 80075dc:	f000 f948 	bl	8007870 <draw_gearing>
			vTaskDelay(150);
 80075e0:	2096      	movs	r0, #150	@ 0x96
 80075e2:	f012 fa4f 	bl	8019a84 <vTaskDelay>
			draw_state = spinspin;
 80075e6:	2300      	movs	r3, #0
 80075e8:	72fb      	strb	r3, [r7, #11]
			break;
 80075ea:	e000      	b.n	80075ee <hud_task+0x1ae>
		default:
			break;
 80075ec:	bf00      	nop
		}
		vTaskDelay(150);
 80075ee:	2096      	movs	r0, #150	@ 0x96
 80075f0:	f012 fa48 	bl	8019a84 <vTaskDelay>
		if (HAL_GetTick() - refresh_timer > 5000){
 80075f4:	e74a      	b.n	800748c <hud_task+0x4c>
 80075f6:	bf00      	nop
 80075f8:	20003c40 	.word	0x20003c40
 80075fc:	20003994 	.word	0x20003994

08007600 <draw_spinspin>:
//	else if (&buffer_size > HUD_BUFFER_SIZE){
//		return num_obj;
//	}
}

void draw_spinspin(uint8_t modify) {
 8007600:	b590      	push	{r4, r7, lr}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
	uint8_t char_len = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
	curr_pos = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	60bb      	str	r3, [r7, #8]
	if (g_spinspin_mode == 0) {
 8007616:	4b8a      	ldr	r3, [pc, #552]	@ (8007840 <draw_spinspin+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <draw_spinspin+0x3a>
		graphic_data.color = 4; //orange
 800761e:	4a89      	ldr	r2, [pc, #548]	@ (8007844 <draw_spinspin+0x244>)
 8007620:	7913      	ldrb	r3, [r2, #4]
 8007622:	2104      	movs	r1, #4
 8007624:	f361 0385 	bfi	r3, r1, #2, #4
 8007628:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN OFF");
 800762a:	4a87      	ldr	r2, [pc, #540]	@ (8007848 <draw_spinspin+0x248>)
 800762c:	211e      	movs	r1, #30
 800762e:	4887      	ldr	r0, [pc, #540]	@ (800784c <draw_spinspin+0x24c>)
 8007630:	f014 fef8 	bl	801c424 <snprintf>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e00c      	b.n	8007654 <draw_spinspin+0x54>
	} else {
		graphic_data.color = 3; //orange
 800763a:	4a82      	ldr	r2, [pc, #520]	@ (8007844 <draw_spinspin+0x244>)
 800763c:	7913      	ldrb	r3, [r2, #4]
 800763e:	2103      	movs	r1, #3
 8007640:	f361 0385 	bfi	r3, r1, #2, #4
 8007644:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN ON");
 8007646:	4a82      	ldr	r2, [pc, #520]	@ (8007850 <draw_spinspin+0x250>)
 8007648:	211e      	movs	r1, #30
 800764a:	4880      	ldr	r0, [pc, #512]	@ (800784c <draw_spinspin+0x24c>)
 800764c:	f014 feea 	bl	801c424 <snprintf>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]
	}
	send_header.start_frame = 0xA5;
 8007654:	4b7f      	ldr	r3, [pc, #508]	@ (8007854 <draw_spinspin+0x254>)
 8007656:	22a5      	movs	r2, #165	@ 0xa5
 8007658:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 800765a:	4b7e      	ldr	r3, [pc, #504]	@ (8007854 <draw_spinspin+0x254>)
 800765c:	2200      	movs	r2, #0
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	715a      	strb	r2, [r3, #5]
 8007664:	2200      	movs	r2, #0
 8007666:	f042 0203 	orr.w	r2, r2, #3
 800766a:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 800766c:	4b7a      	ldr	r3, [pc, #488]	@ (8007858 <draw_spinspin+0x258>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	b2d1      	uxtb	r1, r2
 8007674:	4a78      	ldr	r2, [pc, #480]	@ (8007858 <draw_spinspin+0x258>)
 8007676:	7011      	strb	r1, [r2, #0]
 8007678:	4a76      	ldr	r2, [pc, #472]	@ (8007854 <draw_spinspin+0x254>)
 800767a:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	b29b      	uxth	r3, r3
 8007680:	3315      	adds	r3, #21
 8007682:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 8007684:	4b73      	ldr	r3, [pc, #460]	@ (8007854 <draw_spinspin+0x254>)
 8007686:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 800768a:	4b73      	ldr	r3, [pc, #460]	@ (8007858 <draw_spinspin+0x258>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	b2d1      	uxtb	r1, r2
 8007692:	4a71      	ldr	r2, [pc, #452]	@ (8007858 <draw_spinspin+0x258>)
 8007694:	7011      	strb	r1, [r2, #0]
 8007696:	4a6f      	ldr	r2, [pc, #444]	@ (8007854 <draw_spinspin+0x254>)
 8007698:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4a6f      	ldr	r2, [pc, #444]	@ (800785c <draw_spinspin+0x25c>)
 800769e:	4413      	add	r3, r2
 80076a0:	4a6c      	ldr	r2, [pc, #432]	@ (8007854 <draw_spinspin+0x254>)
 80076a2:	6810      	ldr	r0, [r2, #0]
 80076a4:	6018      	str	r0, [r3, #0]
 80076a6:	8891      	ldrh	r1, [r2, #4]
 80076a8:	7992      	ldrb	r2, [r2, #6]
 80076aa:	8099      	strh	r1, [r3, #4]
 80076ac:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3307      	adds	r3, #7
 80076b2:	60bb      	str	r3, [r7, #8]
	append_CRC8_check_sum(tx_buffer, 5);
 80076b4:	2105      	movs	r1, #5
 80076b6:	4869      	ldr	r0, [pc, #420]	@ (800785c <draw_spinspin+0x25c>)
 80076b8:	f7f9 fca7 	bl	800100a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 80076bc:	4b68      	ldr	r3, [pc, #416]	@ (8007860 <draw_spinspin+0x260>)
 80076be:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80076c2:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 80076c4:	4b67      	ldr	r3, [pc, #412]	@ (8007864 <draw_spinspin+0x264>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	4b65      	ldr	r3, [pc, #404]	@ (8007860 <draw_spinspin+0x260>)
 80076cc:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 80076ce:	4b66      	ldr	r3, [pc, #408]	@ (8007868 <draw_spinspin+0x268>)
 80076d0:	881a      	ldrh	r2, [r3, #0]
 80076d2:	4b63      	ldr	r3, [pc, #396]	@ (8007860 <draw_spinspin+0x260>)
 80076d4:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4a60      	ldr	r2, [pc, #384]	@ (800785c <draw_spinspin+0x25c>)
 80076da:	4413      	add	r3, r2
 80076dc:	4a60      	ldr	r2, [pc, #384]	@ (8007860 <draw_spinspin+0x260>)
 80076de:	6810      	ldr	r0, [r2, #0]
 80076e0:	6018      	str	r0, [r3, #0]
 80076e2:	8892      	ldrh	r2, [r2, #4]
 80076e4:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3306      	adds	r3, #6
 80076ea:	60bb      	str	r3, [r7, #8]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 80076ec:	4b55      	ldr	r3, [pc, #340]	@ (8007844 <draw_spinspin+0x244>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 80076f2:	4b54      	ldr	r3, [pc, #336]	@ (8007844 <draw_spinspin+0x244>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 1;
 80076f8:	4b52      	ldr	r3, [pc, #328]	@ (8007844 <draw_spinspin+0x244>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 80076fe:	4b51      	ldr	r3, [pc, #324]	@ (8007844 <draw_spinspin+0x244>)
 8007700:	78da      	ldrb	r2, [r3, #3]
 8007702:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007706:	70da      	strb	r2, [r3, #3]
 8007708:	791a      	ldrb	r2, [r3, #4]
 800770a:	f022 0203 	bic.w	r2, r2, #3
 800770e:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d106      	bne.n	8007724 <draw_spinspin+0x124>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007716:	4a4b      	ldr	r2, [pc, #300]	@ (8007844 <draw_spinspin+0x244>)
 8007718:	78d3      	ldrb	r3, [r2, #3]
 800771a:	2102      	movs	r1, #2
 800771c:	f361 0302 	bfi	r3, r1, #0, #3
 8007720:	70d3      	strb	r3, [r2, #3]
 8007722:	e005      	b.n	8007730 <draw_spinspin+0x130>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007724:	4a47      	ldr	r2, [pc, #284]	@ (8007844 <draw_spinspin+0x244>)
 8007726:	78d3      	ldrb	r3, [r2, #3]
 8007728:	2101      	movs	r1, #1
 800772a:	f361 0302 	bfi	r3, r1, #0, #3
 800772e:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8007730:	4a44      	ldr	r2, [pc, #272]	@ (8007844 <draw_spinspin+0x244>)
 8007732:	78d3      	ldrb	r3, [r2, #3]
 8007734:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8007738:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 800773a:	4b42      	ldr	r3, [pc, #264]	@ (8007844 <draw_spinspin+0x244>)
 800773c:	791a      	ldrb	r2, [r3, #4]
 800773e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007742:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007746:	711a      	strb	r2, [r3, #4]
 8007748:	795a      	ldrb	r2, [r3, #5]
 800774a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800774e:	f042 0207 	orr.w	r2, r2, #7
 8007752:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	b29a      	uxth	r2, r3
 800775c:	4b39      	ldr	r3, [pc, #228]	@ (8007844 <draw_spinspin+0x244>)
 800775e:	f002 0101 	and.w	r1, r2, #1
 8007762:	01cc      	lsls	r4, r1, #7
 8007764:	7959      	ldrb	r1, [r3, #5]
 8007766:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800776a:	4608      	mov	r0, r1
 800776c:	4621      	mov	r1, r4
 800776e:	4301      	orrs	r1, r0
 8007770:	7159      	strb	r1, [r3, #5]
 8007772:	0852      	lsrs	r2, r2, #1
 8007774:	b292      	uxth	r2, r2
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	2100      	movs	r1, #0
 800777a:	430a      	orrs	r2, r1
 800777c:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 800777e:	4b31      	ldr	r3, [pc, #196]	@ (8007844 <draw_spinspin+0x244>)
 8007780:	2200      	movs	r2, #0
 8007782:	f042 0207 	orr.w	r2, r2, #7
 8007786:	71da      	strb	r2, [r3, #7]
 8007788:	7a1a      	ldrb	r2, [r3, #8]
 800778a:	f022 0203 	bic.w	r2, r2, #3
 800778e:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8007790:	4b2c      	ldr	r3, [pc, #176]	@ (8007844 <draw_spinspin+0x244>)
 8007792:	78da      	ldrb	r2, [r3, #3]
 8007794:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007798:	70da      	strb	r2, [r3, #3]
 800779a:	791a      	ldrb	r2, [r3, #4]
 800779c:	f022 0203 	bic.w	r2, r2, #3
 80077a0:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 80077a2:	4b28      	ldr	r3, [pc, #160]	@ (8007844 <draw_spinspin+0x244>)
 80077a4:	7a1a      	ldrb	r2, [r3, #8]
 80077a6:	f002 0203 	and.w	r2, r2, #3
 80077aa:	f062 0237 	orn	r2, r2, #55	@ 0x37
 80077ae:	721a      	strb	r2, [r3, #8]
 80077b0:	7a5a      	ldrb	r2, [r3, #9]
 80077b2:	f022 021f 	bic.w	r2, r2, #31
 80077b6:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 600;
 80077b8:	4b22      	ldr	r3, [pc, #136]	@ (8007844 <draw_spinspin+0x244>)
 80077ba:	7a5a      	ldrb	r2, [r3, #9]
 80077bc:	f002 021f 	and.w	r2, r2, #31
 80077c0:	725a      	strb	r2, [r3, #9]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f042 024b 	orr.w	r2, r2, #75	@ 0x4b
 80077c8:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4a23      	ldr	r2, [pc, #140]	@ (800785c <draw_spinspin+0x25c>)
 80077ce:	4413      	add	r3, r2
 80077d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007844 <draw_spinspin+0x244>)
 80077d2:	461c      	mov	r4, r3
 80077d4:	4613      	mov	r3, r2
 80077d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077d8:	6020      	str	r0, [r4, #0]
 80077da:	6061      	str	r1, [r4, #4]
 80077dc:	60a2      	str	r2, [r4, #8]
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	789b      	ldrb	r3, [r3, #2]
 80077e2:	81a2      	strh	r2, [r4, #12]
 80077e4:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	330f      	adds	r3, #15
 80077ea:	60bb      	str	r3, [r7, #8]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a1b      	ldr	r2, [pc, #108]	@ (800785c <draw_spinspin+0x25c>)
 80077f0:	4413      	add	r3, r2
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	4915      	ldr	r1, [pc, #84]	@ (800784c <draw_spinspin+0x24c>)
 80077f6:	4618      	mov	r0, r3
 80077f8:	f014 ff34 	bl	801c664 <memcpy>
	curr_pos += char_len;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	3302      	adds	r3, #2
 8007808:	4619      	mov	r1, r3
 800780a:	4814      	ldr	r0, [pc, #80]	@ (800785c <draw_spinspin+0x25c>)
 800780c:	f7f9 fc80 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007810:	e002      	b.n	8007818 <draw_spinspin+0x218>
		vTaskDelay(1);
 8007812:	2001      	movs	r0, #1
 8007814:	f012 f936 	bl	8019a84 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007818:	4b14      	ldr	r3, [pc, #80]	@ (800786c <draw_spinspin+0x26c>)
 800781a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b20      	cmp	r3, #32
 8007822:	d1f6      	bne.n	8007812 <draw_spinspin+0x212>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	b29b      	uxth	r3, r3
 8007828:	3302      	adds	r3, #2
 800782a:	b29b      	uxth	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	490b      	ldr	r1, [pc, #44]	@ (800785c <draw_spinspin+0x25c>)
 8007830:	480e      	ldr	r0, [pc, #56]	@ (800786c <draw_spinspin+0x26c>)
 8007832:	f00c f9bf 	bl	8013bb4 <HAL_UART_Transmit_DMA>
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bd90      	pop	{r4, r7, pc}
 800783e:	bf00      	nop
 8007840:	20003914 	.word	0x20003914
 8007844:	20003aa0 	.word	0x20003aa0
 8007848:	080231bc 	.word	0x080231bc
 800784c:	20003ab8 	.word	0x20003ab8
 8007850:	080231c8 	.word	0x080231c8
 8007854:	20003ab0 	.word	0x20003ab0
 8007858:	20003ca4 	.word	0x20003ca4
 800785c:	20003998 	.word	0x20003998
 8007860:	20003a98 	.word	0x20003a98
 8007864:	20003c40 	.word	0x20003c40
 8007868:	20003994 	.word	0x20003994
 800786c:	20001ca0 	.word	0x20001ca0

08007870 <draw_gearing>:

void draw_gearing(uint8_t modify) {
 8007870:	b590      	push	{r4, r7, lr}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
	graphic_data.color = 6; //CYAN
 8007886:	4a83      	ldr	r2, [pc, #524]	@ (8007a94 <draw_gearing+0x224>)
 8007888:	7913      	ldrb	r3, [r2, #4]
 800788a:	2106      	movs	r1, #6
 800788c:	f361 0385 	bfi	r3, r1, #2, #4
 8007890:	7113      	strb	r3, [r2, #4]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8007892:	4b81      	ldr	r3, [pc, #516]	@ (8007a98 <draw_gearing+0x228>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	4a81      	ldr	r2, [pc, #516]	@ (8007a9c <draw_gearing+0x22c>)
 8007898:	211e      	movs	r1, #30
 800789a:	4881      	ldr	r0, [pc, #516]	@ (8007aa0 <draw_gearing+0x230>)
 800789c:	f014 fdc2 	bl	801c424 <snprintf>
 80078a0:	4603      	mov	r3, r0
 80078a2:	72fb      	strb	r3, [r7, #11]
	send_header.start_frame = 0xA5;
 80078a4:	4b7f      	ldr	r3, [pc, #508]	@ (8007aa4 <draw_gearing+0x234>)
 80078a6:	22a5      	movs	r2, #165	@ 0xa5
 80078a8:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 80078aa:	4b7e      	ldr	r3, [pc, #504]	@ (8007aa4 <draw_gearing+0x234>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	715a      	strb	r2, [r3, #5]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f042 0203 	orr.w	r2, r2, #3
 80078ba:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 80078bc:	4b7a      	ldr	r3, [pc, #488]	@ (8007aa8 <draw_gearing+0x238>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	b2d1      	uxtb	r1, r2
 80078c4:	4a78      	ldr	r2, [pc, #480]	@ (8007aa8 <draw_gearing+0x238>)
 80078c6:	7011      	strb	r1, [r2, #0]
 80078c8:	4a76      	ldr	r2, [pc, #472]	@ (8007aa4 <draw_gearing+0x234>)
 80078ca:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3315      	adds	r3, #21
 80078d2:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 80078d4:	4b73      	ldr	r3, [pc, #460]	@ (8007aa4 <draw_gearing+0x234>)
 80078d6:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 80078da:	4b73      	ldr	r3, [pc, #460]	@ (8007aa8 <draw_gearing+0x238>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	b2d1      	uxtb	r1, r2
 80078e2:	4a71      	ldr	r2, [pc, #452]	@ (8007aa8 <draw_gearing+0x238>)
 80078e4:	7011      	strb	r1, [r2, #0]
 80078e6:	4a6f      	ldr	r2, [pc, #444]	@ (8007aa4 <draw_gearing+0x234>)
 80078e8:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a6f      	ldr	r2, [pc, #444]	@ (8007aac <draw_gearing+0x23c>)
 80078ee:	4413      	add	r3, r2
 80078f0:	4a6c      	ldr	r2, [pc, #432]	@ (8007aa4 <draw_gearing+0x234>)
 80078f2:	6810      	ldr	r0, [r2, #0]
 80078f4:	6018      	str	r0, [r3, #0]
 80078f6:	8891      	ldrh	r1, [r2, #4]
 80078f8:	7992      	ldrb	r2, [r2, #6]
 80078fa:	8099      	strh	r1, [r3, #4]
 80078fc:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	60fb      	str	r3, [r7, #12]
	append_CRC8_check_sum(tx_buffer, 5);
 8007904:	2105      	movs	r1, #5
 8007906:	4869      	ldr	r0, [pc, #420]	@ (8007aac <draw_gearing+0x23c>)
 8007908:	f7f9 fb7f 	bl	800100a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 800790c:	4b68      	ldr	r3, [pc, #416]	@ (8007ab0 <draw_gearing+0x240>)
 800790e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8007912:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 8007914:	4b67      	ldr	r3, [pc, #412]	@ (8007ab4 <draw_gearing+0x244>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	4b65      	ldr	r3, [pc, #404]	@ (8007ab0 <draw_gearing+0x240>)
 800791c:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 800791e:	4b66      	ldr	r3, [pc, #408]	@ (8007ab8 <draw_gearing+0x248>)
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	4b63      	ldr	r3, [pc, #396]	@ (8007ab0 <draw_gearing+0x240>)
 8007924:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a60      	ldr	r2, [pc, #384]	@ (8007aac <draw_gearing+0x23c>)
 800792a:	4413      	add	r3, r2
 800792c:	4a60      	ldr	r2, [pc, #384]	@ (8007ab0 <draw_gearing+0x240>)
 800792e:	6810      	ldr	r0, [r2, #0]
 8007930:	6018      	str	r0, [r3, #0]
 8007932:	8892      	ldrh	r2, [r2, #4]
 8007934:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3306      	adds	r3, #6
 800793a:	60fb      	str	r3, [r7, #12]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 800793c:	4b55      	ldr	r3, [pc, #340]	@ (8007a94 <draw_gearing+0x224>)
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 8007942:	4b54      	ldr	r3, [pc, #336]	@ (8007a94 <draw_gearing+0x224>)
 8007944:	2200      	movs	r2, #0
 8007946:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 2;
 8007948:	4b52      	ldr	r3, [pc, #328]	@ (8007a94 <draw_gearing+0x224>)
 800794a:	2202      	movs	r2, #2
 800794c:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 800794e:	4b51      	ldr	r3, [pc, #324]	@ (8007a94 <draw_gearing+0x224>)
 8007950:	78da      	ldrb	r2, [r3, #3]
 8007952:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007956:	70da      	strb	r2, [r3, #3]
 8007958:	791a      	ldrb	r2, [r3, #4]
 800795a:	f022 0203 	bic.w	r2, r2, #3
 800795e:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d106      	bne.n	8007974 <draw_gearing+0x104>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007966:	4a4b      	ldr	r2, [pc, #300]	@ (8007a94 <draw_gearing+0x224>)
 8007968:	78d3      	ldrb	r3, [r2, #3]
 800796a:	2102      	movs	r1, #2
 800796c:	f361 0302 	bfi	r3, r1, #0, #3
 8007970:	70d3      	strb	r3, [r2, #3]
 8007972:	e005      	b.n	8007980 <draw_gearing+0x110>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007974:	4a47      	ldr	r2, [pc, #284]	@ (8007a94 <draw_gearing+0x224>)
 8007976:	78d3      	ldrb	r3, [r2, #3]
 8007978:	2101      	movs	r1, #1
 800797a:	f361 0302 	bfi	r3, r1, #0, #3
 800797e:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8007980:	4a44      	ldr	r2, [pc, #272]	@ (8007a94 <draw_gearing+0x224>)
 8007982:	78d3      	ldrb	r3, [r2, #3]
 8007984:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8007988:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 800798a:	4b42      	ldr	r3, [pc, #264]	@ (8007a94 <draw_gearing+0x224>)
 800798c:	791a      	ldrb	r2, [r3, #4]
 800798e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007992:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007996:	711a      	strb	r2, [r3, #4]
 8007998:	795a      	ldrb	r2, [r3, #5]
 800799a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800799e:	f042 0207 	orr.w	r2, r2, #7
 80079a2:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	4b39      	ldr	r3, [pc, #228]	@ (8007a94 <draw_gearing+0x224>)
 80079ae:	f002 0101 	and.w	r1, r2, #1
 80079b2:	01cc      	lsls	r4, r1, #7
 80079b4:	7959      	ldrb	r1, [r3, #5]
 80079b6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80079ba:	4608      	mov	r0, r1
 80079bc:	4621      	mov	r1, r4
 80079be:	4301      	orrs	r1, r0
 80079c0:	7159      	strb	r1, [r3, #5]
 80079c2:	0852      	lsrs	r2, r2, #1
 80079c4:	b292      	uxth	r2, r2
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	2100      	movs	r1, #0
 80079ca:	430a      	orrs	r2, r1
 80079cc:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 80079ce:	4b31      	ldr	r3, [pc, #196]	@ (8007a94 <draw_gearing+0x224>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	f042 0207 	orr.w	r2, r2, #7
 80079d6:	71da      	strb	r2, [r3, #7]
 80079d8:	7a1a      	ldrb	r2, [r3, #8]
 80079da:	f022 0203 	bic.w	r2, r2, #3
 80079de:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 80079e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007a94 <draw_gearing+0x224>)
 80079e2:	78da      	ldrb	r2, [r3, #3]
 80079e4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80079e8:	70da      	strb	r2, [r3, #3]
 80079ea:	791a      	ldrb	r2, [r3, #4]
 80079ec:	f022 0203 	bic.w	r2, r2, #3
 80079f0:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 80079f2:	4b28      	ldr	r3, [pc, #160]	@ (8007a94 <draw_gearing+0x224>)
 80079f4:	7a1a      	ldrb	r2, [r3, #8]
 80079f6:	f002 0203 	and.w	r2, r2, #3
 80079fa:	f062 0237 	orn	r2, r2, #55	@ 0x37
 80079fe:	721a      	strb	r2, [r3, #8]
 8007a00:	7a5a      	ldrb	r2, [r3, #9]
 8007a02:	f022 021f 	bic.w	r2, r2, #31
 8007a06:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 650;
 8007a08:	4b22      	ldr	r3, [pc, #136]	@ (8007a94 <draw_gearing+0x224>)
 8007a0a:	7a5a      	ldrb	r2, [r3, #9]
 8007a0c:	f002 021f 	and.w	r2, r2, #31
 8007a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a14:	725a      	strb	r2, [r3, #9]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f042 0251 	orr.w	r2, r2, #81	@ 0x51
 8007a1c:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4a22      	ldr	r2, [pc, #136]	@ (8007aac <draw_gearing+0x23c>)
 8007a22:	4413      	add	r3, r2
 8007a24:	4a1b      	ldr	r2, [pc, #108]	@ (8007a94 <draw_gearing+0x224>)
 8007a26:	461c      	mov	r4, r3
 8007a28:	4613      	mov	r3, r2
 8007a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a2c:	6020      	str	r0, [r4, #0]
 8007a2e:	6061      	str	r1, [r4, #4]
 8007a30:	60a2      	str	r2, [r4, #8]
 8007a32:	881a      	ldrh	r2, [r3, #0]
 8007a34:	789b      	ldrb	r3, [r3, #2]
 8007a36:	81a2      	strh	r2, [r4, #12]
 8007a38:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	330f      	adds	r3, #15
 8007a3e:	60fb      	str	r3, [r7, #12]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a1a      	ldr	r2, [pc, #104]	@ (8007aac <draw_gearing+0x23c>)
 8007a44:	4413      	add	r3, r2
 8007a46:	7afa      	ldrb	r2, [r7, #11]
 8007a48:	4915      	ldr	r1, [pc, #84]	@ (8007aa0 <draw_gearing+0x230>)
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f014 fe0a 	bl	801c664 <memcpy>
	curr_pos += char_len;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4813      	ldr	r0, [pc, #76]	@ (8007aac <draw_gearing+0x23c>)
 8007a60:	f7f9 fb56 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007a64:	e002      	b.n	8007a6c <draw_gearing+0x1fc>
		vTaskDelay(1);
 8007a66:	2001      	movs	r0, #1
 8007a68:	f012 f80c 	bl	8019a84 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007a6c:	4b13      	ldr	r3, [pc, #76]	@ (8007abc <draw_gearing+0x24c>)
 8007a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d1f6      	bne.n	8007a66 <draw_gearing+0x1f6>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	490a      	ldr	r1, [pc, #40]	@ (8007aac <draw_gearing+0x23c>)
 8007a84:	480d      	ldr	r0, [pc, #52]	@ (8007abc <draw_gearing+0x24c>)
 8007a86:	f00c f895 	bl	8013bb4 <HAL_UART_Transmit_DMA>
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd90      	pop	{r4, r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20003aa0 	.word	0x20003aa0
 8007a98:	20003904 	.word	0x20003904
 8007a9c:	080231d0 	.word	0x080231d0
 8007aa0:	20003ab8 	.word	0x20003ab8
 8007aa4:	20003ab0 	.word	0x20003ab0
 8007aa8:	20003ca4 	.word	0x20003ca4
 8007aac:	20003998 	.word	0x20003998
 8007ab0:	20003a98 	.word	0x20003a98
 8007ab4:	20003c40 	.word	0x20003c40
 8007ab8:	20003994 	.word	0x20003994
 8007abc:	20001ca0 	.word	0x20001ca0

08007ac0 <clear_hud>:


void clear_hud(){
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
	uint32_t curr_pos = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
//	uint8_t char_len = 0;
//	curr_pos = 0;
//	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);

	send_header.start_frame = 0xA5;
 8007aca:	4b2f      	ldr	r3, [pc, #188]	@ (8007b88 <clear_hud+0xc8>)
 8007acc:	22a5      	movs	r2, #165	@ 0xa5
 8007ace:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8007ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b88 <clear_hud+0xc8>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f042 0201 	orr.w	r2, r2, #1
 8007ad8:	715a      	strb	r2, [r3, #5]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f042 0203 	orr.w	r2, r2, #3
 8007ae0:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8007ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b8c <clear_hud+0xcc>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	b2d1      	uxtb	r1, r2
 8007aea:	4a28      	ldr	r2, [pc, #160]	@ (8007b8c <clear_hud+0xcc>)
 8007aec:	7011      	strb	r1, [r2, #0]
 8007aee:	4a26      	ldr	r2, [pc, #152]	@ (8007b88 <clear_hud+0xc8>)
 8007af0:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_delete_graphic_t);
 8007af2:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <clear_hud+0xc8>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	f042 0208 	orr.w	r2, r2, #8
 8007afa:	705a      	strb	r2, [r3, #1]
 8007afc:	2200      	movs	r2, #0
 8007afe:	709a      	strb	r2, [r3, #2]
	send_header.seq = g_ref_tx_seq++;
 8007b00:	4b22      	ldr	r3, [pc, #136]	@ (8007b8c <clear_hud+0xcc>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	b2d1      	uxtb	r1, r2
 8007b08:	4a20      	ldr	r2, [pc, #128]	@ (8007b8c <clear_hud+0xcc>)
 8007b0a:	7011      	strb	r1, [r2, #0]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <clear_hud+0xc8>)
 8007b0e:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a1f      	ldr	r2, [pc, #124]	@ (8007b90 <clear_hud+0xd0>)
 8007b14:	4413      	add	r3, r2
 8007b16:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <clear_hud+0xc8>)
 8007b18:	6810      	ldr	r0, [r2, #0]
 8007b1a:	6018      	str	r0, [r3, #0]
 8007b1c:	8891      	ldrh	r1, [r2, #4]
 8007b1e:	7992      	ldrb	r2, [r2, #6]
 8007b20:	8099      	strh	r1, [r3, #4]
 8007b22:	719a      	strb	r2, [r3, #6]
	ref_delete_graphic_t ref_delete;
	ref_delete.cmd_ID = 0x100;
 8007b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b28:	80bb      	strh	r3, [r7, #4]
	ref_delete.graphic_layer = 9;
 8007b2a:	2309      	movs	r3, #9
 8007b2c:	72fb      	strb	r3, [r7, #11]
	ref_delete.graphic_operation = 2;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	72bb      	strb	r3, [r7, #10]
	ref_delete.receiver_ID = g_client_id;
 8007b32:	4b18      	ldr	r3, [pc, #96]	@ (8007b94 <clear_hud+0xd4>)
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	813b      	strh	r3, [r7, #8]
	ref_delete.send_ID = ref_robot_data.robot_id;
 8007b38:	4b17      	ldr	r3, [pc, #92]	@ (8007b98 <clear_hud+0xd8>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	80fb      	strh	r3, [r7, #6]
	memcpy(tx_buffer + curr_pos, &ref_delete, sizeof(ref_delete_graphic_t));
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4a13      	ldr	r2, [pc, #76]	@ (8007b90 <clear_hud+0xd0>)
 8007b42:	4413      	add	r3, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	cb03      	ldmia	r3!, {r0, r1}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	6051      	str	r1, [r2, #4]
	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3302      	adds	r3, #2
 8007b52:	4619      	mov	r1, r3
 8007b54:	480e      	ldr	r0, [pc, #56]	@ (8007b90 <clear_hud+0xd0>)
 8007b56:	f7f9 fadb 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007b5a:	e002      	b.n	8007b62 <clear_hud+0xa2>
		vTaskDelay(1);
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f011 ff91 	bl	8019a84 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007b62:	4b0e      	ldr	r3, [pc, #56]	@ (8007b9c <clear_hud+0xdc>)
 8007b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d1f6      	bne.n	8007b5c <clear_hud+0x9c>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3302      	adds	r3, #2
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	4905      	ldr	r1, [pc, #20]	@ (8007b90 <clear_hud+0xd0>)
 8007b7a:	4808      	ldr	r0, [pc, #32]	@ (8007b9c <clear_hud+0xdc>)
 8007b7c:	f00c f81a 	bl	8013bb4 <HAL_UART_Transmit_DMA>

}
 8007b80:	bf00      	nop
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20003ab0 	.word	0x20003ab0
 8007b8c:	20003ca4 	.word	0x20003ca4
 8007b90:	20003998 	.word	0x20003998
 8007b94:	20003994 	.word	0x20003994
 8007b98:	20003c40 	.word	0x20003c40
 8007b9c:	20001ca0 	.word	0x20001ca0

08007ba0 <fusion>:
double time_dif;
#define ALPHA 0.98
#define DT 0.01
#define LPF_ALPHA 0.5  // Low-pass filter coefficient

int fusion() {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8007ba4:	af00      	add	r7, sp, #0
    double accel_data[3];
    double gyro_data[3];
    double dt = DT;
 8007ba6:	a377      	add	r3, pc, #476	@ (adr r3, 8007d84 <fusion+0x1e4>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    IMUSensorFusion imu;

    initIMUSensorFusion(&imu);
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f92a 	bl	8007e0c <initIMUSensorFusion>

    double T_end = 0.1;
 8007bb8:	a374      	add	r3, pc, #464	@ (adr r3, 8007d8c <fusion+0x1ec>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double time_dif;


    float T_start = get_microseconds();
 8007bc2:	f7fa fafd 	bl	80021c0 <get_microseconds>
 8007bc6:	ee07 0a90 	vmov	s15, r0
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

    // Simulate data (replace with actual sensor reading in a real application)
    while (1) {
        // Replace these functions with actual sensor data reading
        accel_data[0] = accel_proc_data.ax;  // x-axis acceleration
 8007bd2:	4b69      	ldr	r3, [pc, #420]	@ (8007d78 <fusion+0x1d8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7f8 fcb6 	bl	8000548 <__aeabi_f2d>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        accel_data[1] = accel_proc_data.ay;  // y-axis acceleration
 8007be4:	4b64      	ldr	r3, [pc, #400]	@ (8007d78 <fusion+0x1d8>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f8 fcad 	bl	8000548 <__aeabi_f2d>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        accel_data[2] = accel_proc_data.az;  // z-axis acceleration
 8007bf6:	4b60      	ldr	r3, [pc, #384]	@ (8007d78 <fusion+0x1d8>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7f8 fca4 	bl	8000548 <__aeabi_f2d>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        gyro_data[0] = gyro_proc_data.gx;  // roll rate
 8007c08:	4b5c      	ldr	r3, [pc, #368]	@ (8007d7c <fusion+0x1dc>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f8 fc9b 	bl	8000548 <__aeabi_f2d>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
        gyro_data[1] = gyro_proc_data.gy;  // pitch rate
 8007c1a:	4b58      	ldr	r3, [pc, #352]	@ (8007d7c <fusion+0x1dc>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f8 fc92 	bl	8000548 <__aeabi_f2d>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
        gyro_data[2] = gyro_proc_data.gz;  // yaw rate
 8007c2c:	4b53      	ldr	r3, [pc, #332]	@ (8007d7c <fusion+0x1dc>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7f8 fc89 	bl	8000548 <__aeabi_f2d>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        T_end = get_microseconds();
 8007c3e:	f7fa fabf 	bl	80021c0 <get_microseconds>
 8007c42:	4603      	mov	r3, r0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7f8 fc5d 	bl	8000504 <__aeabi_ui2d>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
        time_dif = (T_end - T_start) * 0.000001;
 8007c52:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8007c56:	f7f8 fc77 	bl	8000548 <__aeabi_f2d>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007c62:	f7f8 fb11 	bl	8000288 <__aeabi_dsub>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	a340      	add	r3, pc, #256	@ (adr r3, 8007d70 <fusion+0x1d0>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        dt = time_dif;
 8007c80:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8007c84:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
        imu_sensor_fusion(accel_data, gyro_data, dt, &imu);
 8007c88:	463a      	mov	r2, r7
 8007c8a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8007c8e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007c92:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f91e 	bl	8007ed8 <imu_sensor_fusion>
        T_start = get_microseconds();
 8007c9c:	f7fa fa90 	bl	80021c0 <get_microseconds>
 8007ca0:	ee07 0a90 	vmov	s15, r0
 8007ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

        // Store the results in the imu_heading structure
        imu_heading.pit = imu.pitch;
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f7f8 ff98 	bl	8000be8 <__aeabi_d2f>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4a31      	ldr	r2, [pc, #196]	@ (8007d80 <fusion+0x1e0>)
 8007cbc:	6013      	str	r3, [r2, #0]
        imu_heading.dpit = imu.pitch_speed;
 8007cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7f8 ff8f 	bl	8000be8 <__aeabi_d2f>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8007d80 <fusion+0x1e0>)
 8007cce:	60d3      	str	r3, [r2, #12]
        imu_heading.ddpit = imu.pitch_accel;
 8007cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	f7f8 ff86 	bl	8000be8 <__aeabi_d2f>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	4a28      	ldr	r2, [pc, #160]	@ (8007d80 <fusion+0x1e0>)
 8007ce0:	6193      	str	r3, [r2, #24]
        imu_heading.rol = imu.roll;
 8007ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7f8 ff7d 	bl	8000be8 <__aeabi_d2f>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4a23      	ldr	r2, [pc, #140]	@ (8007d80 <fusion+0x1e0>)
 8007cf2:	6053      	str	r3, [r2, #4]
        imu_heading.drol = imu.roll_speed;
 8007cf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	f7f8 ff74 	bl	8000be8 <__aeabi_d2f>
 8007d00:	4603      	mov	r3, r0
 8007d02:	4a1f      	ldr	r2, [pc, #124]	@ (8007d80 <fusion+0x1e0>)
 8007d04:	6113      	str	r3, [r2, #16]
        imu_heading.ddrol = imu.roll_accel;
 8007d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f7f8 ff6b 	bl	8000be8 <__aeabi_d2f>
 8007d12:	4603      	mov	r3, r0
 8007d14:	4a1a      	ldr	r2, [pc, #104]	@ (8007d80 <fusion+0x1e0>)
 8007d16:	61d3      	str	r3, [r2, #28]
        imu_heading.yaw = imu.yaw;
 8007d18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	f7f8 ff62 	bl	8000be8 <__aeabi_d2f>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4a16      	ldr	r2, [pc, #88]	@ (8007d80 <fusion+0x1e0>)
 8007d28:	6093      	str	r3, [r2, #8]
        imu_heading.dyaw = imu.yaw_speed;
 8007d2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	f7f8 ff59 	bl	8000be8 <__aeabi_d2f>
 8007d36:	4603      	mov	r3, r0
 8007d38:	4a11      	ldr	r2, [pc, #68]	@ (8007d80 <fusion+0x1e0>)
 8007d3a:	6153      	str	r3, [r2, #20]
        imu_heading.ddyaw = imu.yaw_accel;
 8007d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	f7f8 ff50 	bl	8000be8 <__aeabi_d2f>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007d80 <fusion+0x1e0>)
 8007d4c:	6213      	str	r3, [r2, #32]
        imu_heading.ddz = imu.vertical_accel;
 8007d4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	f7f8 ff47 	bl	8000be8 <__aeabi_d2f>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <fusion+0x1e0>)
 8007d5e:	6253      	str	r3, [r2, #36]	@ 0x24
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007d60:	f04f 31ff 	mov.w	r1, #4294967295
 8007d64:	2001      	movs	r0, #1
 8007d66:	f012 fc5d 	bl	801a624 <ulTaskNotifyTake>
        accel_data[0] = accel_proc_data.ax;  // x-axis acceleration
 8007d6a:	bf00      	nop
 8007d6c:	e731      	b.n	8007bd2 <fusion+0x32>
 8007d6e:	bf00      	nop
 8007d70:	a0b5ed8d 	.word	0xa0b5ed8d
 8007d74:	3eb0c6f7 	.word	0x3eb0c6f7
 8007d78:	20003b00 	.word	0x20003b00
 8007d7c:	20003b10 	.word	0x20003b10
 8007d80:	20003ad8 	.word	0x20003ad8
 8007d84:	47ae147b 	.word	0x47ae147b
 8007d88:	3f847ae1 	.word	0x3f847ae1
 8007d8c:	9999999a 	.word	0x9999999a
 8007d90:	3fb99999 	.word	0x3fb99999

08007d94 <low_pass_filter>:

    return 0;
}

// Low-pass filter function
double low_pass_filter(double input, double *prev_output, double alpha) {
 8007d94:	b5b0      	push	{r4, r5, r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	ed87 0b04 	vstr	d0, [r7, #16]
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	ed87 1b00 	vstr	d1, [r7]
    *prev_output = alpha * input + (1 - alpha) * (*prev_output);
 8007da4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dac:	f7f8 fc24 	bl	80005f8 <__aeabi_dmul>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4614      	mov	r4, r2
 8007db6:	461d      	mov	r5, r3
 8007db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dbc:	f04f 0000 	mov.w	r0, #0
 8007dc0:	4911      	ldr	r1, [pc, #68]	@ (8007e08 <low_pass_filter+0x74>)
 8007dc2:	f7f8 fa61 	bl	8000288 <__aeabi_dsub>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fc10 	bl	80005f8 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 fa54 	bl	800028c <__adddf3>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	68f9      	ldr	r1, [r7, #12]
 8007dea:	e9c1 2300 	strd	r2, r3, [r1]
    return *prev_output;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	ec43 2b17 	vmov	d7, r2, r3
}
 8007df8:	eeb0 0a47 	vmov.f32	s0, s14
 8007dfc:	eef0 0a67 	vmov.f32	s1, s15
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bdb0      	pop	{r4, r5, r7, pc}
 8007e06:	bf00      	nop
 8007e08:	3ff00000 	.word	0x3ff00000

08007e0c <initIMUSensorFusion>:


void initIMUSensorFusion(IMUSensorFusion *imu) {
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
    imu->pitch = 0.0;
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	e9c1 2300 	strd	r2, r3, [r1]
    imu->pitch_speed = 0.0;
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    imu->pitch_accel = 0.0;
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imu->roll = 0.0;
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	e9c1 2306 	strd	r2, r3, [r1, #24]
    imu->roll_speed = 0.0;
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	f04f 0200 	mov.w	r2, #0
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	e9c1 2308 	strd	r2, r3, [r1, #32]
    imu->roll_accel = 0.0;
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    imu->yaw = 0.0;
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	f04f 0300 	mov.w	r3, #0
 8007e72:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    imu->yaw_speed = 0.0;
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    imu->yaw_accel = 0.0;
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    imu->vertical_accel = 0.0;
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    imu->acc_x_lpf = 0.0;
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    imu->acc_y_lpf = 0.0;
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    imu->acc_z_lpf = 0.0;
 8007ebc:	6879      	ldr	r1, [r7, #4]
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <imu_sensor_fusion>:
void imu_sensor_fusion(double accel_data[3], double gyro_data[3], double dt,
                       IMUSensorFusion *imu) {
 8007ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007edc:	b08a      	sub	sp, #40	@ 0x28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6178      	str	r0, [r7, #20]
 8007ee2:	6139      	str	r1, [r7, #16]
 8007ee4:	ed87 0b02 	vstr	d0, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
    // Low-pass filter accelerometer data
    accel_data[0] = low_pass_filter(accel_data[0], &(imu->acc_x_lpf), LPF_ALPHA);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	ed93 7b00 	vldr	d7, [r3]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3350      	adds	r3, #80	@ 0x50
 8007ef4:	ed9f 1bb8 	vldr	d1, [pc, #736]	@ 80081d8 <imu_sensor_fusion+0x300>
 8007ef8:	4618      	mov	r0, r3
 8007efa:	eeb0 0a47 	vmov.f32	s0, s14
 8007efe:	eef0 0a67 	vmov.f32	s1, s15
 8007f02:	f7ff ff47 	bl	8007d94 <low_pass_filter>
 8007f06:	eeb0 7a40 	vmov.f32	s14, s0
 8007f0a:	eef0 7a60 	vmov.f32	s15, s1
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	ed83 7b00 	vstr	d7, [r3]
    accel_data[1] = low_pass_filter(accel_data[1], &(imu->acc_y_lpf), LPF_ALPHA);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3308      	adds	r3, #8
 8007f18:	ed93 7b00 	vldr	d7, [r3]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f103 0408 	add.w	r4, r3, #8
 8007f28:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 80081d8 <imu_sensor_fusion+0x300>
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8007f32:	eef0 0a67 	vmov.f32	s1, s15
 8007f36:	f7ff ff2d 	bl	8007d94 <low_pass_filter>
 8007f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8007f3e:	eef0 7a60 	vmov.f32	s15, s1
 8007f42:	ed84 7b00 	vstr	d7, [r4]
    accel_data[2] = low_pass_filter(accel_data[2], &(imu->acc_z_lpf), LPF_ALPHA);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	3310      	adds	r3, #16
 8007f4a:	ed93 7b00 	vldr	d7, [r3]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f103 0410 	add.w	r4, r3, #16
 8007f5a:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 80081d8 <imu_sensor_fusion+0x300>
 8007f5e:	4610      	mov	r0, r2
 8007f60:	eeb0 0a47 	vmov.f32	s0, s14
 8007f64:	eef0 0a67 	vmov.f32	s1, s15
 8007f68:	f7ff ff14 	bl	8007d94 <low_pass_filter>
 8007f6c:	eeb0 7a40 	vmov.f32	s14, s0
 8007f70:	eef0 7a60 	vmov.f32	s15, s1
 8007f74:	ed84 7b00 	vstr	d7, [r4]

    // Calculate pitch and roll from accelerometer data
    double pitch_accel_meas = atan2(-accel_data[0], sqrt(accel_data[1] * accel_data[1] + accel_data[2] * accel_data[2]));
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	4690      	mov	r8, r2
 8007f80:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3308      	adds	r3, #8
 8007f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 fb30 	bl	80005f8 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	461d      	mov	r5, r3
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	3310      	adds	r3, #16
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f7f8 f966 	bl	800028c <__adddf3>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	ec43 2b17 	vmov	d7, r2, r3
 8007fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8007fcc:	eef0 0a67 	vmov.f32	s1, s15
 8007fd0:	f018 ff3c 	bl	8020e4c <sqrt>
 8007fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8007fd8:	eef0 7a60 	vmov.f32	s15, s1
 8007fdc:	eeb0 1a47 	vmov.f32	s2, s14
 8007fe0:	eef0 1a67 	vmov.f32	s3, s15
 8007fe4:	ec49 8b10 	vmov	d0, r8, r9
 8007fe8:	f018 febe 	bl	8020d68 <atan2>
 8007fec:	ed87 0b08 	vstr	d0, [r7, #32]
    double roll_accel_meas = atan2(accel_data[1], accel_data[2]);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	ed93 7b00 	vldr	d7, [r3]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	3310      	adds	r3, #16
 8007ffc:	ed93 6b00 	vldr	d6, [r3]
 8008000:	eeb0 1a46 	vmov.f32	s2, s12
 8008004:	eef0 1a66 	vmov.f32	s3, s13
 8008008:	eeb0 0a47 	vmov.f32	s0, s14
 800800c:	eef0 0a67 	vmov.f32	s1, s15
 8008010:	f018 feaa 	bl	8020d68 <atan2>
 8008014:	ed87 0b06 	vstr	d0, [r7, #24]

    // Apply complementary filter
    imu->pitch = ALPHA * (imu->pitch + gyro_data[1] * dt) + (1 - ALPHA) * pitch_accel_meas;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3308      	adds	r3, #8
 8008022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800802a:	f7f8 fae5 	bl	80005f8 <__aeabi_dmul>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 f929 	bl	800028c <__adddf3>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4610      	mov	r0, r2
 8008040:	4619      	mov	r1, r3
 8008042:	a36a      	add	r3, pc, #424	@ (adr r3, 80081ec <imu_sensor_fusion+0x314>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f7f8 fad6 	bl	80005f8 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4614      	mov	r4, r2
 8008052:	461d      	mov	r5, r3
 8008054:	a367      	add	r3, pc, #412	@ (adr r3, 80081f4 <imu_sensor_fusion+0x31c>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 f90f 	bl	800028c <__adddf3>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	e9c1 2300 	strd	r2, r3, [r1]
    imu->roll = ALPHA * (imu->roll + gyro_data[0] * dt) + (1 - ALPHA) * roll_accel_meas;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008088:	f7f8 fab6 	bl	80005f8 <__aeabi_dmul>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	f7f8 f8fa 	bl	800028c <__adddf3>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4610      	mov	r0, r2
 800809e:	4619      	mov	r1, r3
 80080a0:	a352      	add	r3, pc, #328	@ (adr r3, 80081ec <imu_sensor_fusion+0x314>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f7f8 faa7 	bl	80005f8 <__aeabi_dmul>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4614      	mov	r4, r2
 80080b0:	461d      	mov	r5, r3
 80080b2:	a350      	add	r3, pc, #320	@ (adr r3, 80081f4 <imu_sensor_fusion+0x31c>)
 80080b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080bc:	f7f8 fa9c 	bl	80005f8 <__aeabi_dmul>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 f8e0 	bl	800028c <__adddf3>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    imu->yaw += gyro_data[2] * dt;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3310      	adds	r3, #16
 80080e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080e8:	f7f8 fa86 	bl	80005f8 <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4620      	mov	r0, r4
 80080f2:	4629      	mov	r1, r5
 80080f4:	f7f8 f8ca 	bl	800028c <__adddf3>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Calculate speed (rate of change of angles) directly from gyroscope data
    imu->pitch_speed = gyro_data[1];
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    imu->roll_speed = gyro_data[0];
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	e9c1 2308 	strd	r2, r3, [r1, #32]
    imu->yaw_speed = gyro_data[2];
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Calculate acceleration (rate of change of speeds)
    static double last_pitch_speed = 0, last_roll_speed = 0, last_yaw_speed = 0;
    imu->pitch_accel = (imu->pitch_speed - last_pitch_speed) / dt;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800812c:	4b2c      	ldr	r3, [pc, #176]	@ (80081e0 <imu_sensor_fusion+0x308>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f8a9 	bl	8000288 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4610      	mov	r0, r2
 800813c:	4619      	mov	r1, r3
 800813e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008142:	f7f8 fb83 	bl	800084c <__aeabi_ddiv>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imu->roll_accel = (imu->roll_speed - last_roll_speed) / dt;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008156:	4b23      	ldr	r3, [pc, #140]	@ (80081e4 <imu_sensor_fusion+0x30c>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 f894 	bl	8000288 <__aeabi_dsub>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800816c:	f7f8 fb6e 	bl	800084c <__aeabi_ddiv>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    imu->yaw_accel = (imu->yaw_speed - last_yaw_speed) / dt;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008180:	4b19      	ldr	r3, [pc, #100]	@ (80081e8 <imu_sensor_fusion+0x310>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 f87f 	bl	8000288 <__aeabi_dsub>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4610      	mov	r0, r2
 8008190:	4619      	mov	r1, r3
 8008192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008196:	f7f8 fb59 	bl	800084c <__aeabi_ddiv>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Update last speeds
    last_pitch_speed = imu->pitch_speed;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80081aa:	490d      	ldr	r1, [pc, #52]	@ (80081e0 <imu_sensor_fusion+0x308>)
 80081ac:	e9c1 2300 	strd	r2, r3, [r1]
    last_roll_speed = imu->roll_speed;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b6:	490b      	ldr	r1, [pc, #44]	@ (80081e4 <imu_sensor_fusion+0x30c>)
 80081b8:	e9c1 2300 	strd	r2, r3, [r1]
    last_yaw_speed = imu->yaw_speed;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80081c2:	4909      	ldr	r1, [pc, #36]	@ (80081e8 <imu_sensor_fusion+0x310>)
 80081c4:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate vertical acceleration (z-axis acceleration)
    imu->vertical_accel = sqrt((accel_data[0]*accel_data[0]) + (accel_data[1]*accel_data[1]) + (accel_data[2]*accel_data[2]));
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	e014      	b.n	80081fc <imu_sensor_fusion+0x324>
 80081d2:	bf00      	nop
 80081d4:	f3af 8000 	nop.w
 80081d8:	00000000 	.word	0x00000000
 80081dc:	3fe00000 	.word	0x3fe00000
 80081e0:	20003b30 	.word	0x20003b30
 80081e4:	20003b38 	.word	0x20003b38
 80081e8:	20003b40 	.word	0x20003b40
 80081ec:	f5c28f5c 	.word	0xf5c28f5c
 80081f0:	3fef5c28 	.word	0x3fef5c28
 80081f4:	47ae1480 	.word	0x47ae1480
 80081f8:	3f947ae1 	.word	0x3f947ae1
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f8 f9fa 	bl	80005f8 <__aeabi_dmul>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4614      	mov	r4, r2
 800820a:	461d      	mov	r5, r3
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	3308      	adds	r3, #8
 8008210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3308      	adds	r3, #8
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f8 f830 	bl	800028c <__adddf3>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4614      	mov	r4, r2
 8008232:	461d      	mov	r5, r3
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3310      	adds	r3, #16
 8008238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	3310      	adds	r3, #16
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 f9d8 	bl	80005f8 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4620      	mov	r0, r4
 800824e:	4629      	mov	r1, r5
 8008250:	f7f8 f81c 	bl	800028c <__adddf3>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	ec43 2b17 	vmov	d7, r2, r3
 800825c:	eeb0 0a47 	vmov.f32	s0, s14
 8008260:	eef0 0a67 	vmov.f32	s1, s15
 8008264:	f018 fdf2 	bl	8020e4c <sqrt>
 8008268:	eeb0 7a40 	vmov.f32	s14, s0
 800826c:	eef0 7a60 	vmov.f32	s15, s1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8008276:	bf00      	nop
 8008278:	3728      	adds	r7, #40	@ 0x28
 800827a:	46bd      	mov	sp, r7
 800827c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008280 <imu_proc_task_notif>:

void imu_proc_task_notif() {
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 8008286:	4b0d      	ldr	r3, [pc, #52]	@ (80082bc <imu_proc_task_notif+0x3c>)
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800828c:	2300      	movs	r3, #0
 800828e:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8008290:	4b0b      	ldr	r3, [pc, #44]	@ (80082c0 <imu_proc_task_notif+0x40>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	1d3a      	adds	r2, r7, #4
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f012 fa0f 	bl	801a6bc <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <imu_proc_task_notif+0x34>
 80082a4:	4b07      	ldr	r3, [pc, #28]	@ (80082c4 <imu_proc_task_notif+0x44>)
 80082a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	f3bf 8f6f 	isb	sy
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20003b2c 	.word	0x20003b2c
 80082c0:	20003b80 	.word	0x20003b80
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 80082c8:	b590      	push	{r4, r7, lr}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	463c      	mov	r4, r7
 80082d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	} else {

		gyro_proc_data.gx = gyro_data.gx;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	4a22      	ldr	r2, [pc, #136]	@ (8008360 <gyro_data_ready+0x98>)
 80082d8:	6013      	str	r3, [r2, #0]
		gyro_proc_data.gy = gyro_data.gy;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a20      	ldr	r2, [pc, #128]	@ (8008360 <gyro_data_ready+0x98>)
 80082de:	6053      	str	r3, [r2, #4]
		if (gyro_data.gz > 0.02 || gyro_data.gz < -0.02){
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f8 f930 	bl	8000548 <__aeabi_f2d>
 80082e8:	a319      	add	r3, pc, #100	@ (adr r3, 8008350 <gyro_data_ready+0x88>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f8 fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10b      	bne.n	8008310 <gyro_data_ready+0x48>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7f8 f924 	bl	8000548 <__aeabi_f2d>
 8008300:	a315      	add	r3, pc, #84	@ (adr r3, 8008358 <gyro_data_ready+0x90>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f8 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <gyro_data_ready+0x50>
			gyro_proc_data.gz = gyro_data.gz;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4a13      	ldr	r2, [pc, #76]	@ (8008360 <gyro_data_ready+0x98>)
 8008314:	6093      	str	r3, [r2, #8]
 8008316:	e003      	b.n	8008320 <gyro_data_ready+0x58>
		} else {
			gyro_proc_data.gz = 0;
 8008318:	4b11      	ldr	r3, [pc, #68]	@ (8008360 <gyro_data_ready+0x98>)
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	609a      	str	r2, [r3, #8]
		}

	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a0f      	ldr	r2, [pc, #60]	@ (8008360 <gyro_data_ready+0x98>)
 8008324:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8008326:	4b0f      	ldr	r3, [pc, #60]	@ (8008364 <gyro_data_ready+0x9c>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	4b0c      	ldr	r3, [pc, #48]	@ (8008364 <gyro_data_ready+0x9c>)
 8008332:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 8008334:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <gyro_data_ready+0x9c>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b07      	cmp	r3, #7
 800833a:	d003      	beq.n	8008344 <gyro_data_ready+0x7c>
 800833c:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <gyro_data_ready+0x9c>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d101      	bne.n	8008348 <gyro_data_ready+0x80>
		imu_proc_task_notif();
 8008344:	f7ff ff9c 	bl	8008280 <imu_proc_task_notif>
	}
}
 8008348:	bf00      	nop
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}
 8008350:	47ae147b 	.word	0x47ae147b
 8008354:	3f947ae1 	.word	0x3f947ae1
 8008358:	47ae147b 	.word	0x47ae147b
 800835c:	bf947ae1 	.word	0xbf947ae1
 8008360:	20003b10 	.word	0x20003b10
 8008364:	20003b2c 	.word	0x20003b2c

08008368 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	463c      	mov	r4, r7
 8008370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	} else {

		accel_proc_data.ax = accel_data.ax;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	4a10      	ldr	r2, [pc, #64]	@ (80083b8 <accel_data_ready+0x50>)
 8008378:	6013      	str	r3, [r2, #0]
		accel_proc_data.ay = accel_data.ay;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a0e      	ldr	r2, [pc, #56]	@ (80083b8 <accel_data_ready+0x50>)
 800837e:	6053      	str	r3, [r2, #4]
		accel_proc_data.az = accel_data.az;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4a0d      	ldr	r2, [pc, #52]	@ (80083b8 <accel_data_ready+0x50>)
 8008384:	6093      	str	r3, [r2, #8]
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4a0b      	ldr	r2, [pc, #44]	@ (80083b8 <accel_data_ready+0x50>)
 800838a:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 800838c:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <accel_data_ready+0x54>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	f043 0302 	orr.w	r3, r3, #2
 8008394:	b2da      	uxtb	r2, r3
 8008396:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <accel_data_ready+0x54>)
 8008398:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 800839a:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <accel_data_ready+0x54>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b07      	cmp	r3, #7
 80083a0:	d003      	beq.n	80083aa <accel_data_ready+0x42>
 80083a2:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <accel_data_ready+0x54>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d101      	bne.n	80083ae <accel_data_ready+0x46>
		imu_proc_task_notif();
 80083aa:	f7ff ff69 	bl	8008280 <imu_proc_task_notif>
	}
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20003b00 	.word	0x20003b00
 80083bc:	20003b2c 	.word	0x20003b2c

080083c0 <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	1d3b      	adds	r3, r7, #4
 80083c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 80083cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80083d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008404 <mag_data_ready+0x44>)
 80083d2:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 80083d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80083d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008404 <mag_data_ready+0x44>)
 80083da:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 80083dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80083e0:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <mag_data_ready+0x44>)
 80083e2:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4a07      	ldr	r2, [pc, #28]	@ (8008404 <mag_data_ready+0x44>)
 80083e8:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 80083ea:	4b07      	ldr	r3, [pc, #28]	@ (8008408 <mag_data_ready+0x48>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	f043 0304 	orr.w	r3, r3, #4
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	4b04      	ldr	r3, [pc, #16]	@ (8008408 <mag_data_ready+0x48>)
 80083f6:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	20003b20 	.word	0x20003b20
 8008408:	20003b2c 	.word	0x20003b2c

0800840c <imu_processing_task>:

void imu_processing_task(void *argument) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 8008414:	f7f9 fbda 	bl	8001bcc <imu_start_ints>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008418:	f04f 31ff 	mov.w	r1, #4294967295
 800841c:	2001      	movs	r0, #1
 800841e:	f012 f901 	bl	801a624 <ulTaskNotifyTake>
	imu_attitude_update();
 8008422:	f000 f815 	bl	8008450 <imu_attitude_update>
//	quat_startup();
	while (1) {
		fusion();
 8008426:	f7ff fbbb 	bl	8007ba0 <fusion>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800842a:	f04f 31ff 	mov.w	r1, #4294967295
 800842e:	2001      	movs	r0, #1
 8008430:	f012 f8f8 	bl	801a624 <ulTaskNotifyTake>
		imu_attitude_update();
 8008434:	f000 f80c 	bl	8008450 <imu_attitude_update>
		portYIELD();
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <imu_processing_task+0x40>)
 800843a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
		fusion();
 8008448:	bf00      	nop
 800844a:	e7ec      	b.n	8008426 <imu_processing_task+0x1a>
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <imu_attitude_update>:
	}
}


void imu_attitude_update(void) {
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0

}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <leg_kinematic_task>:
double right_F_control;
double right_Tp_control;
extern Target target;
float motor_output;

void leg_kinematic_task(void *argument) {
 8008460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008464:	ed2d 8b04 	vpush	{d8-d9}
 8008468:	b0ea      	sub	sp, #424	@ 0x1a8
 800846a:	af00      	add	r7, sp, #0
 800846c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8008470:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8008474:	6018      	str	r0, [r3, #0]
	double leftTorque[2];
	double rightTorque[2];
	double starttime = 0;
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	double endtime = 0;
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
	PID right_F;
	PID right_Tp;
	PID leftwheel_rpm;
    TickType_t start_time;
    while (1) {
        endtime = get_microseconds();
 800848e:	f7f9 fe97 	bl	80021c0 <get_microseconds>
 8008492:	4603      	mov	r3, r0
 8008494:	4618      	mov	r0, r3
 8008496:	f7f8 f835 	bl	8000504 <__aeabi_ui2d>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
        dt = endtime - starttime;
 80084a2:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80084a6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80084aa:	f7f7 feed 	bl	8000288 <__aeabi_dsub>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
        start_time = xTaskGetTickCount();
 80084b6:	f011 fc39 	bl	8019d2c <xTaskGetTickCount>
 80084ba:	4602      	mov	r2, r0
 80084bc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80084c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80084c4:	601a      	str	r2, [r3, #0]
        starttime = get_microseconds();
 80084c6:	f7f9 fe7b 	bl	80021c0 <get_microseconds>
 80084ca:	4603      	mov	r3, r0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f8 f819 	bl	8000504 <__aeabi_ui2d>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
        ///////////////////

		        // leftWheel.angle = (double)g_can_motors[LEFT_MOTOR_ID-1].angle_rad/19.2;
        		// rightWheel.angle = (double)g_can_motors[RIGHT_MOTOR_ID-1].angle_rad/19.2;

                leg_pos(g_can_motors[FR_MOTOR_ID-1].angle_rad,g_can_motors[FL_MOTOR_ID-1].angle_rad,left_leg_pos);
 80084da:	4bd7      	ldr	r3, [pc, #860]	@ (8008838 <leg_kinematic_task+0x3d8>)
 80084dc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7f8 f831 	bl	8000548 <__aeabi_f2d>
 80084e6:	4682      	mov	sl, r0
 80084e8:	468b      	mov	fp, r1
 80084ea:	4bd3      	ldr	r3, [pc, #844]	@ (8008838 <leg_kinematic_task+0x3d8>)
 80084ec:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7f8 f828 	bl	8000548 <__aeabi_f2d>
 80084f8:	ec41 0b17 	vmov	d7, r0, r1
 80084fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8008500:	4618      	mov	r0, r3
 8008502:	eeb0 1a47 	vmov.f32	s2, s14
 8008506:	eef0 1a67 	vmov.f32	s3, s15
 800850a:	ec4b ab10 	vmov	d0, sl, fp
 800850e:	f000 f9ef 	bl	80088f0 <leg_pos>
                leftLegPos.length = left_leg_pos[0];
 8008512:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8008516:	4610      	mov	r0, r2
 8008518:	4619      	mov	r1, r3
 800851a:	f7f8 fb65 	bl	8000be8 <__aeabi_d2f>
 800851e:	4603      	mov	r3, r0
 8008520:	4ac6      	ldr	r2, [pc, #792]	@ (800883c <leg_kinematic_task+0x3dc>)
 8008522:	6053      	str	r3, [r2, #4]
                leftLegPos.angle = left_leg_pos[1];
 8008524:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	f7f8 fb5c 	bl	8000be8 <__aeabi_d2f>
 8008530:	4603      	mov	r3, r0
 8008532:	4ac2      	ldr	r2, [pc, #776]	@ (800883c <leg_kinematic_task+0x3dc>)
 8008534:	6013      	str	r3, [r2, #0]
                leg_pos(g_can_motors[BL_MOTOR_ID-1].angle_rad,g_can_motors[BR_MOTOR_ID-1].angle_rad,right_leg_pos);
 8008536:	4bc0      	ldr	r3, [pc, #768]	@ (8008838 <leg_kinematic_task+0x3d8>)
 8008538:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7f8 f802 	bl	8000548 <__aeabi_f2d>
 8008544:	4682      	mov	sl, r0
 8008546:	468b      	mov	fp, r1
 8008548:	4bbb      	ldr	r3, [pc, #748]	@ (8008838 <leg_kinematic_task+0x3d8>)
 800854a:	f503 63d5 	add.w	r3, r3, #1704	@ 0x6a8
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f7f7 fff9 	bl	8000548 <__aeabi_f2d>
 8008556:	ec41 0b17 	vmov	d7, r0, r1
 800855a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800855e:	4618      	mov	r0, r3
 8008560:	eeb0 1a47 	vmov.f32	s2, s14
 8008564:	eef0 1a67 	vmov.f32	s3, s15
 8008568:	ec4b ab10 	vmov	d0, sl, fp
 800856c:	f000 f9c0 	bl	80088f0 <leg_pos>
                rightLegPos.length = right_leg_pos[0];
 8008570:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8008574:	4610      	mov	r0, r2
 8008576:	4619      	mov	r1, r3
 8008578:	f7f8 fb36 	bl	8000be8 <__aeabi_d2f>
 800857c:	4603      	mov	r3, r0
 800857e:	4ab0      	ldr	r2, [pc, #704]	@ (8008840 <leg_kinematic_task+0x3e0>)
 8008580:	6053      	str	r3, [r2, #4]
                rightLegPos.angle = right_leg_pos[1];
 8008582:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	f7f8 fb2d 	bl	8000be8 <__aeabi_d2f>
 800858e:	4603      	mov	r3, r0
 8008590:	4aab      	ldr	r2, [pc, #684]	@ (8008840 <leg_kinematic_task+0x3e0>)
 8008592:	6013      	str	r3, [r2, #0]
        		// PID_Init(&left_F, 5000, 0, 0.01, -1000, 1000); // Example gains: kp = 1.0, ki = 0.1, kd = 0.01, min_output = -10, max_output = 10
        		// PID_Init(&left_Tp, 0.01, 0.01, 0.01, -10, 10); // Example gains: kp = 1.0, ki = 0.1, kd = 0.01, min_output = -10, max_output = 10
                // PID_Init(&right_F, 5000, 0, 0.01, -1000, 1000); // Example gains: kp = 1.0, ki = 0.1, kd = 0.01, min_output = -10, max_output = 10
                // PID_Init(&right_Tp, 0.01, 0.01, 0.01, -10, 10);
                PID_Init(&left_F, 1000, 0, 0.01, -1000, 1000);
 8008594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008598:	ed9f 4b8d 	vldr	d4, [pc, #564]	@ 80087d0 <leg_kinematic_task+0x370>
 800859c:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 80087d8 <leg_kinematic_task+0x378>
 80085a0:	ed9f 2b8f 	vldr	d2, [pc, #572]	@ 80087e0 <leg_kinematic_task+0x380>
 80085a4:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 80087e8 <leg_kinematic_task+0x388>
 80085a8:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 80087d0 <leg_kinematic_task+0x370>
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fc fa66 	bl	8004a7e <PID_Init>
        		PID_Init(&right_F, 1000, 0, 0.01, -1000, 1000);
 80085b2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80085b6:	ed9f 4b86 	vldr	d4, [pc, #536]	@ 80087d0 <leg_kinematic_task+0x370>
 80085ba:	ed9f 3b87 	vldr	d3, [pc, #540]	@ 80087d8 <leg_kinematic_task+0x378>
 80085be:	ed9f 2b88 	vldr	d2, [pc, #544]	@ 80087e0 <leg_kinematic_task+0x380>
 80085c2:	ed9f 1b89 	vldr	d1, [pc, #548]	@ 80087e8 <leg_kinematic_task+0x388>
 80085c6:	ed9f 0b82 	vldr	d0, [pc, #520]	@ 80087d0 <leg_kinematic_task+0x370>
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fc fa57 	bl	8004a7e <PID_Init>
                PID_Init(&right_Tp, 1.2, 0, 0, -10, 10);
 80085d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80085d4:	ed9f 4b86 	vldr	d4, [pc, #536]	@ 80087f0 <leg_kinematic_task+0x390>
 80085d8:	ed9f 3b87 	vldr	d3, [pc, #540]	@ 80087f8 <leg_kinematic_task+0x398>
 80085dc:	ed9f 2b82 	vldr	d2, [pc, #520]	@ 80087e8 <leg_kinematic_task+0x388>
 80085e0:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 80087e8 <leg_kinematic_task+0x388>
 80085e4:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8008800 <leg_kinematic_task+0x3a0>
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fc fa48 	bl	8004a7e <PID_Init>
        		PID_Init(&left_Tp, 1.2, 0, 0, -10, 10);
 80085ee:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80085f2:	ed9f 4b7f 	vldr	d4, [pc, #508]	@ 80087f0 <leg_kinematic_task+0x390>
 80085f6:	ed9f 3b80 	vldr	d3, [pc, #512]	@ 80087f8 <leg_kinematic_task+0x398>
 80085fa:	ed9f 2b7b 	vldr	d2, [pc, #492]	@ 80087e8 <leg_kinematic_task+0x388>
 80085fe:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 80087e8 <leg_kinematic_task+0x388>
 8008602:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8008800 <leg_kinematic_task+0x3a0>
 8008606:	4618      	mov	r0, r3
 8008608:	f7fc fa39 	bl	8004a7e <PID_Init>
				PID_Init(&leftwheel_rpm,2,0.001,0.01,-1000,1000);
 800860c:	f107 0310 	add.w	r3, r7, #16
 8008610:	ed9f 4b6f 	vldr	d4, [pc, #444]	@ 80087d0 <leg_kinematic_task+0x370>
 8008614:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 80087d8 <leg_kinematic_task+0x378>
 8008618:	ed9f 2b71 	vldr	d2, [pc, #452]	@ 80087e0 <leg_kinematic_task+0x380>
 800861c:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 8008808 <leg_kinematic_task+0x3a8>
 8008620:	ed9f 0b7b 	vldr	d0, [pc, #492]	@ 8008810 <leg_kinematic_task+0x3b0>
 8008624:	4618      	mov	r0, r3
 8008626:	f7fc fa2a 	bl	8004a7e <PID_Init>


                left_F_control = -PID_Compute(&left_F, 0.12, leftLegPos.length, dt, 0.0001);
 800862a:	4b84      	ldr	r3, [pc, #528]	@ (800883c <leg_kinematic_task+0x3dc>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	4618      	mov	r0, r3
 8008630:	f7f7 ff8a 	bl	8000548 <__aeabi_f2d>
 8008634:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008638:	ed9f 3b77 	vldr	d3, [pc, #476]	@ 8008818 <leg_kinematic_task+0x3b8>
 800863c:	ed97 2b64 	vldr	d2, [r7, #400]	@ 0x190
 8008640:	ec41 0b11 	vmov	d1, r0, r1
 8008644:	ed9f 0b76 	vldr	d0, [pc, #472]	@ 8008820 <leg_kinematic_task+0x3c0>
 8008648:	4618      	mov	r0, r3
 800864a:	f7fc fa53 	bl	8004af4 <PID_Compute>
 800864e:	ec53 2b10 	vmov	r2, r3, d0
 8008652:	4614      	mov	r4, r2
 8008654:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8008658:	4b7a      	ldr	r3, [pc, #488]	@ (8008844 <leg_kinematic_task+0x3e4>)
 800865a:	e9c3 4500 	strd	r4, r5, [r3]
                left_Tp_control = -PID_Compute(&left_Tp, PI/2, leftLegPos.angle, dt, 0.00001);
 800865e:	4b77      	ldr	r3, [pc, #476]	@ (800883c <leg_kinematic_task+0x3dc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f7f7 ff70 	bl	8000548 <__aeabi_f2d>
 8008668:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800866c:	ed9f 3b6e 	vldr	d3, [pc, #440]	@ 8008828 <leg_kinematic_task+0x3c8>
 8008670:	ed97 2b64 	vldr	d2, [r7, #400]	@ 0x190
 8008674:	ec41 0b11 	vmov	d1, r0, r1
 8008678:	ed9f 0b6d 	vldr	d0, [pc, #436]	@ 8008830 <leg_kinematic_task+0x3d0>
 800867c:	4618      	mov	r0, r3
 800867e:	f7fc fa39 	bl	8004af4 <PID_Compute>
 8008682:	ec53 2b10 	vmov	r2, r3, d0
 8008686:	4690      	mov	r8, r2
 8008688:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800868c:	4b6e      	ldr	r3, [pc, #440]	@ (8008848 <leg_kinematic_task+0x3e8>)
 800868e:	e9c3 8900 	strd	r8, r9, [r3]

                right_F_control = PID_Compute(&right_F, 0.12, rightLegPos.length, dt, 0.0001);
 8008692:	4b6b      	ldr	r3, [pc, #428]	@ (8008840 <leg_kinematic_task+0x3e0>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 ff56 	bl	8000548 <__aeabi_f2d>
 800869c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80086a0:	ed9f 3b5d 	vldr	d3, [pc, #372]	@ 8008818 <leg_kinematic_task+0x3b8>
 80086a4:	ed97 2b64 	vldr	d2, [r7, #400]	@ 0x190
 80086a8:	ec41 0b11 	vmov	d1, r0, r1
 80086ac:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8008820 <leg_kinematic_task+0x3c0>
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fc fa1f 	bl	8004af4 <PID_Compute>
 80086b6:	eeb0 7a40 	vmov.f32	s14, s0
 80086ba:	eef0 7a60 	vmov.f32	s15, s1
 80086be:	4b63      	ldr	r3, [pc, #396]	@ (800884c <leg_kinematic_task+0x3ec>)
 80086c0:	ed83 7b00 	vstr	d7, [r3]
                right_Tp_control = PID_Compute(&right_Tp, PI/2, rightLegPos.angle, dt, 0.00001);
 80086c4:	4b5e      	ldr	r3, [pc, #376]	@ (8008840 <leg_kinematic_task+0x3e0>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f7 ff3d 	bl	8000548 <__aeabi_f2d>
 80086ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80086d2:	ed9f 3b55 	vldr	d3, [pc, #340]	@ 8008828 <leg_kinematic_task+0x3c8>
 80086d6:	ed97 2b64 	vldr	d2, [r7, #400]	@ 0x190
 80086da:	ec41 0b11 	vmov	d1, r0, r1
 80086de:	ed9f 0b54 	vldr	d0, [pc, #336]	@ 8008830 <leg_kinematic_task+0x3d0>
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fc fa06 	bl	8004af4 <PID_Compute>
 80086e8:	eeb0 7a40 	vmov.f32	s14, s0
 80086ec:	eef0 7a60 	vmov.f32	s15, s1
 80086f0:	4b57      	ldr	r3, [pc, #348]	@ (8008850 <leg_kinematic_task+0x3f0>)
 80086f2:	ed83 7b00 	vstr	d7, [r3]

				motor_output = PID_Compute(&leftwheel_rpm,0,imu_heading.pit,dt,0.0001);
 80086f6:	4b57      	ldr	r3, [pc, #348]	@ (8008854 <leg_kinematic_task+0x3f4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f7 ff24 	bl	8000548 <__aeabi_f2d>
 8008700:	f107 0310 	add.w	r3, r7, #16
 8008704:	ed9f 3b44 	vldr	d3, [pc, #272]	@ 8008818 <leg_kinematic_task+0x3b8>
 8008708:	ed97 2b64 	vldr	d2, [r7, #400]	@ 0x190
 800870c:	ec41 0b11 	vmov	d1, r0, r1
 8008710:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 80087e8 <leg_kinematic_task+0x388>
 8008714:	4618      	mov	r0, r3
 8008716:	f7fc f9ed 	bl	8004af4 <PID_Compute>
 800871a:	ec53 2b10 	vmov	r2, r3, d0
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	f7f8 fa61 	bl	8000be8 <__aeabi_d2f>
 8008726:	4603      	mov	r3, r0
 8008728:	4a4b      	ldr	r2, [pc, #300]	@ (8008858 <leg_kinematic_task+0x3f8>)
 800872a:	6013      	str	r3, [r2, #0]
				g_can_motors[0].torque = -motor_output;
 800872c:	4b4a      	ldr	r3, [pc, #296]	@ (8008858 <leg_kinematic_task+0x3f8>)
 800872e:	edd3 7a00 	vldr	s15, [r3]
 8008732:	eef1 7a67 	vneg.f32	s15, s15
 8008736:	4b40      	ldr	r3, [pc, #256]	@ (8008838 <leg_kinematic_task+0x3d8>)
 8008738:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				g_can_motors[1].torque = -motor_output;
 800873c:	4b46      	ldr	r3, [pc, #280]	@ (8008858 <leg_kinematic_task+0x3f8>)
 800873e:	edd3 7a00 	vldr	s15, [r3]
 8008742:	eef1 7a67 	vneg.f32	s15, s15
 8008746:	4b3c      	ldr	r3, [pc, #240]	@ (8008838 <leg_kinematic_task+0x3d8>)
 8008748:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118


                leg_conv(left_F_control,left_Tp_control,g_can_motors[FR_MOTOR_ID-1].angle_rad,g_can_motors[FL_MOTOR_ID-1].angle_rad,leftTorque);
 800874c:	4b3d      	ldr	r3, [pc, #244]	@ (8008844 <leg_kinematic_task+0x3e4>)
 800874e:	ed93 8b00 	vldr	d8, [r3]
 8008752:	4b3d      	ldr	r3, [pc, #244]	@ (8008848 <leg_kinematic_task+0x3e8>)
 8008754:	ed93 9b00 	vldr	d9, [r3]
 8008758:	4b37      	ldr	r3, [pc, #220]	@ (8008838 <leg_kinematic_task+0x3d8>)
 800875a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800875e:	4618      	mov	r0, r3
 8008760:	f7f7 fef2 	bl	8000548 <__aeabi_f2d>
 8008764:	4682      	mov	sl, r0
 8008766:	468b      	mov	fp, r1
 8008768:	4b33      	ldr	r3, [pc, #204]	@ (8008838 <leg_kinematic_task+0x3d8>)
 800876a:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f7f7 fee9 	bl	8000548 <__aeabi_f2d>
 8008776:	ec41 0b17 	vmov	d7, r0, r1
 800877a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800877e:	4618      	mov	r0, r3
 8008780:	eeb0 3a47 	vmov.f32	s6, s14
 8008784:	eef0 3a67 	vmov.f32	s7, s15
 8008788:	ec4b ab12 	vmov	d2, sl, fp
 800878c:	eeb0 1a49 	vmov.f32	s2, s18
 8008790:	eef0 1a69 	vmov.f32	s3, s19
 8008794:	eeb0 0a48 	vmov.f32	s0, s16
 8008798:	eef0 0a68 	vmov.f32	s1, s17
 800879c:	f000 fac8 	bl	8008d30 <leg_conv>
                leg_conv(right_F_control,right_Tp_control,g_can_motors[BL_MOTOR_ID-1].angle_rad,g_can_motors[BR_MOTOR_ID-1].angle_rad,rightTorque);
 80087a0:	4b2a      	ldr	r3, [pc, #168]	@ (800884c <leg_kinematic_task+0x3ec>)
 80087a2:	ed93 8b00 	vldr	d8, [r3]
 80087a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008850 <leg_kinematic_task+0x3f0>)
 80087a8:	ed93 9b00 	vldr	d9, [r3]
 80087ac:	4b22      	ldr	r3, [pc, #136]	@ (8008838 <leg_kinematic_task+0x3d8>)
 80087ae:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f7 fec7 	bl	8000548 <__aeabi_f2d>
 80087ba:	4682      	mov	sl, r0
 80087bc:	468b      	mov	fp, r1
 80087be:	4b1e      	ldr	r3, [pc, #120]	@ (8008838 <leg_kinematic_task+0x3d8>)
 80087c0:	f503 63d5 	add.w	r3, r3, #1704	@ 0x6a8
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 febe 	bl	8000548 <__aeabi_f2d>
 80087cc:	e046      	b.n	800885c <leg_kinematic_task+0x3fc>
 80087ce:	bf00      	nop
 80087d0:	00000000 	.word	0x00000000
 80087d4:	408f4000 	.word	0x408f4000
 80087d8:	00000000 	.word	0x00000000
 80087dc:	c08f4000 	.word	0xc08f4000
 80087e0:	47ae147b 	.word	0x47ae147b
 80087e4:	3f847ae1 	.word	0x3f847ae1
	...
 80087f4:	40240000 	.word	0x40240000
 80087f8:	00000000 	.word	0x00000000
 80087fc:	c0240000 	.word	0xc0240000
 8008800:	33333333 	.word	0x33333333
 8008804:	3ff33333 	.word	0x3ff33333
 8008808:	d2f1a9fc 	.word	0xd2f1a9fc
 800880c:	3f50624d 	.word	0x3f50624d
 8008810:	00000000 	.word	0x00000000
 8008814:	40000000 	.word	0x40000000
 8008818:	eb1c432d 	.word	0xeb1c432d
 800881c:	3f1a36e2 	.word	0x3f1a36e2
 8008820:	eb851eb8 	.word	0xeb851eb8
 8008824:	3fbeb851 	.word	0x3fbeb851
 8008828:	88e368f1 	.word	0x88e368f1
 800882c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008830:	60000000 	.word	0x60000000
 8008834:	3ff921fb 	.word	0x3ff921fb
 8008838:	20002220 	.word	0x20002220
 800883c:	20002018 	.word	0x20002018
 8008840:	2000202c 	.word	0x2000202c
 8008844:	20003b48 	.word	0x20003b48
 8008848:	20003b50 	.word	0x20003b50
 800884c:	20003b58 	.word	0x20003b58
 8008850:	20003b60 	.word	0x20003b60
 8008854:	20003ad8 	.word	0x20003ad8
 8008858:	20003b68 	.word	0x20003b68
 800885c:	ec41 0b17 	vmov	d7, r0, r1
 8008860:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008864:	4618      	mov	r0, r3
 8008866:	eeb0 3a47 	vmov.f32	s6, s14
 800886a:	eef0 3a67 	vmov.f32	s7, s15
 800886e:	ec4b ab12 	vmov	d2, sl, fp
 8008872:	eeb0 1a49 	vmov.f32	s2, s18
 8008876:	eef0 1a69 	vmov.f32	s3, s19
 800887a:	eeb0 0a48 	vmov.f32	s0, s16
 800887e:	eef0 0a68 	vmov.f32	s1, s17
 8008882:	f000 fa55 	bl	8008d30 <leg_conv>
                 g_can_motors[FR_MOTOR_ID-1].torque = leftTorque[0];
 8008886:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	f7f8 f9ab 	bl	8000be8 <__aeabi_d2f>
 8008892:	4603      	mov	r3, r0
 8008894:	4a15      	ldr	r2, [pc, #84]	@ (80088ec <leg_kinematic_task+0x48c>)
 8008896:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8
                 g_can_motors[FL_MOTOR_ID-1].torque = leftTorque[1];
 800889a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	f7f8 f9a1 	bl	8000be8 <__aeabi_d2f>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b10      	ldr	r3, [pc, #64]	@ (80088ec <leg_kinematic_task+0x48c>)
 80088aa:	f503 639b 	add.w	r3, r3, #1240	@ 0x4d8
 80088ae:	601a      	str	r2, [r3, #0]
                g_can_motors[BL_MOTOR_ID-1].torque = rightTorque[0];
 80088b0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80088b4:	4610      	mov	r0, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	f7f8 f996 	bl	8000be8 <__aeabi_d2f>
 80088bc:	4602      	mov	r2, r0
 80088be:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <leg_kinematic_task+0x48c>)
 80088c0:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 80088c4:	601a      	str	r2, [r3, #0]
                g_can_motors[BR_MOTOR_ID-1].torque = rightTorque[1];
 80088c6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7f8 f98b 	bl	8000be8 <__aeabi_d2f>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <leg_kinematic_task+0x48c>)
 80088d6:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 80088da:	601a      	str	r2, [r3, #0]
        vTaskDelayUntil(&start_time, 5);
 80088dc:	f107 030c 	add.w	r3, r7, #12
 80088e0:	2105      	movs	r1, #5
 80088e2:	4618      	mov	r0, r3
 80088e4:	f011 f84e 	bl	8019984 <vTaskDelayUntil>
        endtime = get_microseconds();
 80088e8:	bf00      	nop
 80088ea:	e5d0      	b.n	800848e <leg_kinematic_task+0x2e>
 80088ec:	20002220 	.word	0x20002220

080088f0 <leg_pos>:
 *                double phi4
 *                double pos[2]
 * Return Type  : void
 */
void leg_pos(double phi1, double phi4, double pos[2])
{
 80088f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80088f4:	ed2d 8b02 	vpush	{d8}
 80088f8:	b0a6      	sub	sp, #152	@ 0x98
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	ed87 0b04 	vstr	d0, [r7, #16]
 8008900:	ed87 1b02 	vstr	d1, [r7, #8]
 8008904:	6078      	str	r0, [r7, #4]
  double l1 = 0.07;
 8008906:	f20f 4310 	addw	r3, pc, #1040	@ 0x410
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  double l2 = 0.12;
 8008912:	f20f 430c 	addw	r3, pc, #1036	@ 0x40c
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  double l3 = 0.12;
 800891e:	f20f 4300 	addw	r3, pc, #1024	@ 0x400
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  double l4 = 0.07;
 800892a:	a3fb      	add	r3, pc, #1004	@ (adr r3, 8008d18 <leg_pos+0x428>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  double l5 = 0.11;
 8008934:	a3fc      	add	r3, pc, #1008	@ (adr r3, 8008d28 <leg_pos+0x438>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  // Cartesian coordinates of points B and D
  double YD = l4 * sin(phi4);
 800893e:	ed97 0b02 	vldr	d0, [r7, #8]
 8008942:	f018 fca5 	bl	8021290 <sin>
 8008946:	ec53 2b10 	vmov	r2, r3, d0
 800894a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800894e:	f7f7 fe53 	bl	80005f8 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  double YB = l1 * sin(phi1);
 800895a:	ed97 0b04 	vldr	d0, [r7, #16]
 800895e:	f018 fc97 	bl	8021290 <sin>
 8008962:	ec53 2b10 	vmov	r2, r3, d0
 8008966:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800896a:	f7f7 fe45 	bl	80005f8 <__aeabi_dmul>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  double XD = l5 + l4 * cos(phi4);
 8008976:	ed97 0b02 	vldr	d0, [r7, #8]
 800897a:	f018 fc2d 	bl	80211d8 <cos>
 800897e:	ec51 0b10 	vmov	r0, r1, d0
 8008982:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8008986:	f7f7 fe37 	bl	80005f8 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008992:	f7f7 fc7b 	bl	800028c <__adddf3>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  double XB = l1 * cos(phi1);
 800899e:	ed97 0b04 	vldr	d0, [r7, #16]
 80089a2:	f018 fc19 	bl	80211d8 <cos>
 80089a6:	ec53 2b10 	vmov	r2, r3, d0
 80089aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80089ae:	f7f7 fe23 	bl	80005f8 <__aeabi_dmul>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

  // Distance between points B and D
  double lBD = sqrt((XD - XB)*(XD - XB) + (YD - YB)*(YD - YB));
 80089ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80089c2:	f7f7 fc61 	bl	8000288 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4614      	mov	r4, r2
 80089cc:	461d      	mov	r5, r3
 80089ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80089d6:	f7f7 fc57 	bl	8000288 <__aeabi_dsub>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4620      	mov	r0, r4
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7f7 fe09 	bl	80005f8 <__aeabi_dmul>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4614      	mov	r4, r2
 80089ec:	461d      	mov	r5, r3
 80089ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80089f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089f6:	f7f7 fc47 	bl	8000288 <__aeabi_dsub>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4690      	mov	r8, r2
 8008a00:	4699      	mov	r9, r3
 8008a02:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008a0a:	f7f7 fc3d 	bl	8000288 <__aeabi_dsub>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	f7f7 fc33 	bl	800028c <__adddf3>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	ec43 2b17 	vmov	d7, r2, r3
 8008a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8008a32:	eef0 0a67 	vmov.f32	s1, s15
 8008a36:	f018 fa09 	bl	8020e4c <sqrt>
 8008a3a:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  // Calculate phi2
  double A0 = 2 * l2 * (XD - XB);
 8008a3e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	f7f7 fc21 	bl	800028c <__adddf3>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4614      	mov	r4, r2
 8008a50:	461d      	mov	r5, r3
 8008a52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008a56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8008a5a:	f7f7 fc15 	bl	8000288 <__aeabi_dsub>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4620      	mov	r0, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7f7 fdc7 	bl	80005f8 <__aeabi_dmul>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  double B0 = 2 * l2 * (YD - YB);
 8008a72:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	f7f7 fc07 	bl	800028c <__adddf3>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4614      	mov	r4, r2
 8008a84:	461d      	mov	r5, r3
 8008a86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008a8e:	f7f7 fbfb 	bl	8000288 <__aeabi_dsub>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fdad 	bl	80005f8 <__aeabi_dmul>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  double C0 = l2 * l2 + lBD * lBD - l3 * l3;
 8008aa6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008aaa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4614      	mov	r4, r2
 8008ab8:	461d      	mov	r5, r3
 8008aba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008abe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008ac2:	f7f7 fd99 	bl	80005f8 <__aeabi_dmul>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4620      	mov	r0, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7f7 fbdd 	bl	800028c <__adddf3>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461d      	mov	r5, r3
 8008ada:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008ade:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008ae2:	f7f7 fd89 	bl	80005f8 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f7 fbcb 	bl	8000288 <__aeabi_dsub>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  double phi2 = 2 * atan2((B0 + sqrt(A0 * A0 + B0 * B0 - C0 * C0)), A0 + C0);
 8008afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008afe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008b02:	f7f7 fd79 	bl	80005f8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	461d      	mov	r5, r3
 8008b0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8008b16:	f7f7 fd6f 	bl	80005f8 <__aeabi_dmul>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 fbb3 	bl	800028c <__adddf3>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4614      	mov	r4, r2
 8008b2c:	461d      	mov	r5, r3
 8008b2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008b32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fba1 	bl	8000288 <__aeabi_dsub>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	ec43 2b17 	vmov	d7, r2, r3
 8008b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8008b52:	eef0 0a67 	vmov.f32	s1, s15
 8008b56:	f018 f979 	bl	8020e4c <sqrt>
 8008b5a:	ec51 0b10 	vmov	r0, r1, d0
 8008b5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	ec43 2b18 	vmov	d8, r2, r3
 8008b6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008b72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008b76:	f7f7 fb89 	bl	800028c <__adddf3>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	ec43 2b17 	vmov	d7, r2, r3
 8008b82:	eeb0 1a47 	vmov.f32	s2, s14
 8008b86:	eef0 1a67 	vmov.f32	s3, s15
 8008b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8008b8e:	eef0 0a68 	vmov.f32	s1, s17
 8008b92:	f018 f8e9 	bl	8020d68 <atan2>
 8008b96:	ec51 0b10 	vmov	r0, r1, d0
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	f7f7 fb75 	bl	800028c <__adddf3>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

  // Cartesian coordinates of point C
  double XC = l1 * cos(phi1) + l2 * cos(phi2);
 8008baa:	ed97 0b04 	vldr	d0, [r7, #16]
 8008bae:	f018 fb13 	bl	80211d8 <cos>
 8008bb2:	ec51 0b10 	vmov	r0, r1, d0
 8008bb6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008bba:	f7f7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	461d      	mov	r5, r3
 8008bc6:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8008bca:	f018 fb05 	bl	80211d8 <cos>
 8008bce:	ec51 0b10 	vmov	r0, r1, d0
 8008bd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fb53 	bl	800028c <__adddf3>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double YC = l1 * sin(phi1) + l2 * sin(phi2);
 8008bee:	ed97 0b04 	vldr	d0, [r7, #16]
 8008bf2:	f018 fb4d 	bl	8021290 <sin>
 8008bf6:	ec51 0b10 	vmov	r0, r1, d0
 8008bfa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008bfe:	f7f7 fcfb 	bl	80005f8 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4614      	mov	r4, r2
 8008c08:	461d      	mov	r5, r3
 8008c0a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8008c0e:	f018 fb3f 	bl	8021290 <sin>
 8008c12:	ec51 0b10 	vmov	r0, r1, d0
 8008c16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008c1a:	f7f7 fced 	bl	80005f8 <__aeabi_dmul>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fb31 	bl	800028c <__adddf3>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]

  // Leg length and angle
  pos[0] = sqrt((XC - l5 / 2) * (XC - l5 / 2) + YC * YC);
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c3a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008c3e:	f7f7 fe05 	bl	800084c <__aeabi_ddiv>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c4a:	f7f7 fb1d 	bl	8000288 <__aeabi_dsub>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4614      	mov	r4, r2
 8008c54:	461d      	mov	r5, r3
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c5e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008c62:	f7f7 fdf3 	bl	800084c <__aeabi_ddiv>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c6e:	f7f7 fb0b 	bl	8000288 <__aeabi_dsub>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4614      	mov	r4, r2
 8008c84:	461d      	mov	r5, r3
 8008c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c8e:	f7f7 fcb3 	bl	80005f8 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 faf7 	bl	800028c <__adddf3>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	ec43 2b17 	vmov	d7, r2, r3
 8008ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8008caa:	eef0 0a67 	vmov.f32	s1, s15
 8008cae:	f018 f8cd 	bl	8020e4c <sqrt>
 8008cb2:	eeb0 7a40 	vmov.f32	s14, s0
 8008cb6:	eef0 7a60 	vmov.f32	s15, s1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	ed83 7b00 	vstr	d7, [r3]
  pos[1] = atan2(YC, XC - l5 / 2);
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cc8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008ccc:	f7f7 fdbe 	bl	800084c <__aeabi_ddiv>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cd8:	f7f7 fad6 	bl	8000288 <__aeabi_dsub>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	ec43 2b17 	vmov	d7, r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f103 0408 	add.w	r4, r3, #8
 8008cea:	eeb0 1a47 	vmov.f32	s2, s14
 8008cee:	eef0 1a67 	vmov.f32	s3, s15
 8008cf2:	ed97 0b06 	vldr	d0, [r7, #24]
 8008cf6:	f018 f837 	bl	8020d68 <atan2>
 8008cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8008cfe:	eef0 7a60 	vmov.f32	s15, s1
 8008d02:	ed84 7b00 	vstr	d7, [r4]
}
 8008d06:	bf00      	nop
 8008d08:	3798      	adds	r7, #152	@ 0x98
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	ecbd 8b02 	vpop	{d8}
 8008d10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008d14:	f3af 8000 	nop.w
 8008d18:	1eb851ec 	.word	0x1eb851ec
 8008d1c:	3fb1eb85 	.word	0x3fb1eb85
 8008d20:	eb851eb8 	.word	0xeb851eb8
 8008d24:	3fbeb851 	.word	0x3fbeb851
 8008d28:	c28f5c29 	.word	0xc28f5c29
 8008d2c:	3fbc28f5 	.word	0x3fbc28f5

08008d30 <leg_conv>:
//  pos[0] = sqrt(t5 * t5 + t4 * t4);
//  pos[1] = rt_atan2d_snf(t5, t4);
//}

void leg_conv(double F, double Tp, double phi1, double phi4, double T[2])
{
 8008d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d34:	ed2d 8b02 	vpush	{d8}
 8008d38:	b09c      	sub	sp, #112	@ 0x70
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	ed87 0b08 	vstr	d0, [r7, #32]
 8008d40:	ed87 1b06 	vstr	d1, [r7, #24]
 8008d44:	ed87 2b04 	vstr	d2, [r7, #16]
 8008d48:	ed87 3b02 	vstr	d3, [r7, #8]
 8008d4c:	6078      	str	r0, [r7, #4]
  double YD;
  double lBD;
  double phi2;

  // Calculate YD and YB_tmp based on input angles
  YD = 0.07 * sin(phi4);
 8008d4e:	ed97 0b02 	vldr	d0, [r7, #8]
 8008d52:	f018 fa9d 	bl	8021290 <sin>
 8008d56:	ec51 0b10 	vmov	r0, r1, d0
 8008d5a:	f20f 4314 	addw	r3, pc, #1044	@ 0x414
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  YB_tmp = 0.07 * sin(phi1);
 8008d6e:	ed97 0b04 	vldr	d0, [r7, #16]
 8008d72:	f018 fa8d 	bl	8021290 <sin>
 8008d76:	ec51 0b10 	vmov	r0, r1, d0
 8008d7a:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8009170 <leg_conv+0x440>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fc3a 	bl	80005f8 <__aeabi_dmul>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

  // Calculate XD and XB_tmp based on input angles
  XD = 0.07 * cos(phi4) + 0.11;
 8008d8c:	ed97 0b02 	vldr	d0, [r7, #8]
 8008d90:	f018 fa22 	bl	80211d8 <cos>
 8008d94:	ec51 0b10 	vmov	r0, r1, d0
 8008d98:	a3f5      	add	r3, pc, #980	@ (adr r3, 8009170 <leg_conv+0x440>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fc2b 	bl	80005f8 <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	a3f3      	add	r3, pc, #972	@ (adr r3, 8009178 <leg_conv+0x448>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 fa6c 	bl	800028c <__adddf3>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  XB_tmp = 0.07 * cos(phi1);
 8008dbc:	ed97 0b04 	vldr	d0, [r7, #16]
 8008dc0:	f018 fa0a 	bl	80211d8 <cos>
 8008dc4:	ec51 0b10 	vmov	r0, r1, d0
 8008dc8:	a3e9      	add	r3, pc, #932	@ (adr r3, 8009170 <leg_conv+0x440>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fc13 	bl	80005f8 <__aeabi_dmul>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

  // Intermediate distance and angle calculations
  C0 = XD - XB_tmp;
 8008dda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008dde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8008de2:	f7f7 fa51 	bl	8000288 <__aeabi_dsub>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  B0 = YD - YB_tmp;
 8008dee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008df6:	f7f7 fa47 	bl	8000288 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  lBD = sqrt(C0 * C0 + B0 * B0);
 8008e02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008e0a:	f7f7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4614      	mov	r4, r2
 8008e14:	461d      	mov	r5, r3
 8008e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	ec43 2b17 	vmov	d7, r2, r3
 8008e36:	eeb0 0a47 	vmov.f32	s0, s14
 8008e3a:	eef0 0a67 	vmov.f32	s1, s15
 8008e3e:	f018 f805 	bl	8020e4c <sqrt>
 8008e42:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

  // More calculations involving geometry and angles
  A0 = 0.25 * C0;
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	4bc7      	ldr	r3, [pc, #796]	@ (8009168 <leg_conv+0x438>)
 8008e4c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008e50:	f7f7 fbd2 	bl	80005f8 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  B0 *= 0.25;
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	4bc1      	ldr	r3, [pc, #772]	@ (8009168 <leg_conv+0x438>)
 8008e62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008e66:	f7f7 fbc7 	bl	80005f8 <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  C0 = (lBD * lBD + 0.015625) - 0.015625;
 8008e72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8008e7a:	f7f7 fbbd 	bl	80005f8 <__aeabi_dmul>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4610      	mov	r0, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	4bb8      	ldr	r3, [pc, #736]	@ (800916c <leg_conv+0x43c>)
 8008e8c:	f7f7 f9fe 	bl	800028c <__adddf3>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	4bb3      	ldr	r3, [pc, #716]	@ (800916c <leg_conv+0x43c>)
 8008e9e:	f7f7 f9f3 	bl	8000288 <__aeabi_dsub>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

  // Calculate phi2 using an arctangent function
  phi2 = 2.0 * atan2(B0 + sqrt((A0 * A0 + B0 * B0) - C0 * C0), A0 + C0);
 8008eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008eae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008eb2:	f7f7 fba1 	bl	80005f8 <__aeabi_dmul>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4614      	mov	r4, r2
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ec2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f7f7 f9db 	bl	800028c <__adddf3>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4614      	mov	r4, r2
 8008edc:	461d      	mov	r5, r3
 8008ede:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ee2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008ee6:	f7f7 fb87 	bl	80005f8 <__aeabi_dmul>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 f9c9 	bl	8000288 <__aeabi_dsub>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	ec43 2b17 	vmov	d7, r2, r3
 8008efe:	eeb0 0a47 	vmov.f32	s0, s14
 8008f02:	eef0 0a67 	vmov.f32	s1, s15
 8008f06:	f017 ffa1 	bl	8020e4c <sqrt>
 8008f0a:	ec51 0b10 	vmov	r0, r1, d0
 8008f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f12:	f7f7 f9bb 	bl	800028c <__adddf3>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	ec43 2b18 	vmov	d8, r2, r3
 8008f1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008f26:	f7f7 f9b1 	bl	800028c <__adddf3>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	ec43 2b17 	vmov	d7, r2, r3
 8008f32:	eeb0 1a47 	vmov.f32	s2, s14
 8008f36:	eef0 1a67 	vmov.f32	s3, s15
 8008f3a:	eeb0 0a48 	vmov.f32	s0, s16
 8008f3e:	eef0 0a68 	vmov.f32	s1, s17
 8008f42:	f017 ff11 	bl	8020d68 <atan2>
 8008f46:	ec51 0b10 	vmov	r0, r1, d0
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	f7f7 f99d 	bl	800028c <__adddf3>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

  // Calculate additional angles and distances
  C0 = 0.12 * cos(phi2);
 8008f5a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8008f5e:	f018 f93b 	bl	80211d8 <cos>
 8008f62:	ec51 0b10 	vmov	r0, r1, d0
 8008f66:	a37c      	add	r3, pc, #496	@ (adr r3, 8009158 <leg_conv+0x428>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  B0 = 0.12 * sin(phi2);
 8008f78:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8008f7c:	f018 f988 	bl	8021290 <sin>
 8008f80:	ec51 0b10 	vmov	r0, r1, d0
 8008f84:	a374      	add	r3, pc, #464	@ (adr r3, 8009158 <leg_conv+0x428>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 fb35 	bl	80005f8 <__aeabi_dmul>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  A0 = atan2((YB_tmp - YD) + B0, (XB_tmp - XD) + C0);
 8008f96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008f9a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8008f9e:	f7f7 f973 	bl	8000288 <__aeabi_dsub>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4619      	mov	r1, r3
 8008faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008fae:	f7f7 f96d 	bl	800028c <__adddf3>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	ec43 2b18 	vmov	d8, r2, r3
 8008fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008fbe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008fc2:	f7f7 f961 	bl	8000288 <__aeabi_dsub>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fd2:	f7f7 f95b 	bl	800028c <__adddf3>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	ec43 2b17 	vmov	d7, r2, r3
 8008fde:	eeb0 1a47 	vmov.f32	s2, s14
 8008fe2:	eef0 1a67 	vmov.f32	s3, s15
 8008fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8008fea:	eef0 0a68 	vmov.f32	s1, s17
 8008fee:	f017 febb 	bl	8020d68 <atan2>
 8008ff2:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

  YD = XB_tmp + C0;
 8008ff6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ffa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008ffe:	f7f7 f945 	bl	800028c <__adddf3>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  C0 = YB_tmp + B0;
 800900a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800900e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8009012:	f7f7 f93b 	bl	800028c <__adddf3>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  lBD = atan2(C0, YD - 0.055);
 800901e:	a350      	add	r3, pc, #320	@ (adr r3, 8009160 <leg_conv+0x430>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009028:	f7f7 f92e 	bl	8000288 <__aeabi_dsub>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	ec43 2b17 	vmov	d7, r2, r3
 8009034:	eeb0 1a47 	vmov.f32	s2, s14
 8009038:	eef0 1a67 	vmov.f32	s3, s15
 800903c:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8009040:	f017 fe92 	bl	8020d68 <atan2>
 8009044:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

  // Final calculations involving sin and cos of the angles
  XD = sin(phi1 - phi2);
 8009048:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800904c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009050:	f7f7 f91a 	bl	8000288 <__aeabi_dsub>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	ec43 2b17 	vmov	d7, r2, r3
 800905c:	eeb0 0a47 	vmov.f32	s0, s14
 8009060:	eef0 0a67 	vmov.f32	s1, s15
 8009064:	f018 f914 	bl	8021290 <sin>
 8009068:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
  XB_tmp = sin(A0 - phi2);
 800906c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009070:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	ec43 2b17 	vmov	d7, r2, r3
 8009080:	eeb0 0a47 	vmov.f32	s0, s14
 8009084:	eef0 0a67 	vmov.f32	s1, s15
 8009088:	f018 f902 	bl	8021290 <sin>
 800908c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
  YB_tmp = sin(A0 - phi4);
 8009090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009094:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009098:	f7f7 f8f6 	bl	8000288 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	ec43 2b17 	vmov	d7, r2, r3
 80090a4:	eeb0 0a47 	vmov.f32	s0, s14
 80090a8:	eef0 0a67 	vmov.f32	s1, s15
 80090ac:	f018 f8f0 	bl	8021290 <sin>
 80090b0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
  A0 = lBD - A0;
 80090b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80090b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80090bc:	f7f7 f8e4 	bl	8000288 <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  B0 = sqrt((YD - 0.055) * (YD - 0.055) + C0 * C0) * XB_tmp;
 80090c8:	a325      	add	r3, pc, #148	@ (adr r3, 8009160 <leg_conv+0x430>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090d2:	f7f7 f8d9 	bl	8000288 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4614      	mov	r4, r2
 80090dc:	461d      	mov	r5, r3
 80090de:	a320      	add	r3, pc, #128	@ (adr r3, 8009160 <leg_conv+0x430>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090e8:	f7f7 f8ce 	bl	8000288 <__aeabi_dsub>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4614      	mov	r4, r2
 80090fe:	461d      	mov	r5, r3
 8009100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009104:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 f8ba 	bl	800028c <__adddf3>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	ec43 2b17 	vmov	d7, r2, r3
 8009120:	eeb0 0a47 	vmov.f32	s0, s14
 8009124:	eef0 0a67 	vmov.f32	s1, s15
 8009128:	f017 fe90 	bl	8020e4c <sqrt>
 800912c:	ec53 2b10 	vmov	r2, r3, d0
 8009130:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  C0 = lBD - phi2;
 8009140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009144:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8009148:	f7f7 f89e 	bl	8000288 <__aeabi_dsub>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8009154:	e014      	b.n	8009180 <leg_conv+0x450>
 8009156:	bf00      	nop
 8009158:	eb851eb8 	.word	0xeb851eb8
 800915c:	3fbeb851 	.word	0x3fbeb851
 8009160:	c28f5c29 	.word	0xc28f5c29
 8009164:	3fac28f5 	.word	0x3fac28f5
 8009168:	3fd00000 	.word	0x3fd00000
 800916c:	3f900000 	.word	0x3f900000
 8009170:	1eb851ec 	.word	0x1eb851ec
 8009174:	3fb1eb85 	.word	0x3fb1eb85
 8009178:	c28f5c29 	.word	0xc28f5c29
 800917c:	3fbc28f5 	.word	0x3fbc28f5

  // Output torques T[0] and T[1] based on force F and torque Tp
  T[0] = 0.07 * sin(A0) * XD / XB_tmp * F + 0.07 * cos(A0) * XD / B0 * Tp;
 8009180:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8009184:	f018 f884 	bl	8021290 <sin>
 8009188:	ec51 0b10 	vmov	r0, r1, d0
 800918c:	a358      	add	r3, pc, #352	@ (adr r3, 80092f0 <leg_conv+0x5c0>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 fa31 	bl	80005f8 <__aeabi_dmul>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4610      	mov	r0, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091b2:	f7f7 fb4b 	bl	800084c <__aeabi_ddiv>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4610      	mov	r0, r2
 80091bc:	4619      	mov	r1, r3
 80091be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091c2:	f7f7 fa19 	bl	80005f8 <__aeabi_dmul>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4614      	mov	r4, r2
 80091cc:	461d      	mov	r5, r3
 80091ce:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80091d2:	f018 f801 	bl	80211d8 <cos>
 80091d6:	ec51 0b10 	vmov	r0, r1, d0
 80091da:	a345      	add	r3, pc, #276	@ (adr r3, 80092f0 <leg_conv+0x5c0>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 fa0a 	bl	80005f8 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4610      	mov	r0, r2
 80091ea:	4619      	mov	r1, r3
 80091ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091f0:	f7f7 fa02 	bl	80005f8 <__aeabi_dmul>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4610      	mov	r0, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009200:	f7f7 fb24 	bl	800084c <__aeabi_ddiv>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4610      	mov	r0, r2
 800920a:	4619      	mov	r1, r3
 800920c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009210:	f7f7 f9f2 	bl	80005f8 <__aeabi_dmul>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f7 f836 	bl	800028c <__adddf3>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	e9c1 2300 	strd	r2, r3, [r1]
  T[1] = 0.07 * sin(C0) * YB_tmp / XB_tmp * F + 0.07 * cos(C0) * YB_tmp / B0 * Tp;
 800922a:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800922e:	f018 f82f 	bl	8021290 <sin>
 8009232:	ec51 0b10 	vmov	r0, r1, d0
 8009236:	a32e      	add	r3, pc, #184	@ (adr r3, 80092f0 <leg_conv+0x5c0>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f9dc 	bl	80005f8 <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4610      	mov	r0, r2
 8009246:	4619      	mov	r1, r3
 8009248:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800924c:	f7f7 f9d4 	bl	80005f8 <__aeabi_dmul>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4610      	mov	r0, r2
 8009256:	4619      	mov	r1, r3
 8009258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800925c:	f7f7 faf6 	bl	800084c <__aeabi_ddiv>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4610      	mov	r0, r2
 8009266:	4619      	mov	r1, r3
 8009268:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800926c:	f7f7 f9c4 	bl	80005f8 <__aeabi_dmul>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4690      	mov	r8, r2
 8009276:	4699      	mov	r9, r3
 8009278:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800927c:	f017 ffac 	bl	80211d8 <cos>
 8009280:	ec51 0b10 	vmov	r0, r1, d0
 8009284:	a31a      	add	r3, pc, #104	@ (adr r3, 80092f0 <leg_conv+0x5c0>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f7 f9b5 	bl	80005f8 <__aeabi_dmul>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800929a:	f7f7 f9ad 	bl	80005f8 <__aeabi_dmul>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4610      	mov	r0, r2
 80092a4:	4619      	mov	r1, r3
 80092a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80092aa:	f7f7 facf 	bl	800084c <__aeabi_ddiv>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4610      	mov	r0, r2
 80092b4:	4619      	mov	r1, r3
 80092b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4610      	mov	r0, r2
 80092c4:	4619      	mov	r1, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f103 0408 	add.w	r4, r3, #8
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f6 ffda 	bl	800028c <__adddf3>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	e9c4 2300 	strd	r2, r3, [r4]
}
 80092e0:	bf00      	nop
 80092e2:	3770      	adds	r7, #112	@ 0x70
 80092e4:	46bd      	mov	sp, r7
 80092e6:	ecbd 8b02 	vpop	{d8}
 80092ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80092ee:	bf00      	nop
 80092f0:	1eb851ec 	.word	0x1eb851ec
 80092f4:	3fb1eb85 	.word	0x3fb1eb85

080092f8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80092f8:	b5b0      	push	{r4, r5, r7, lr}
 80092fa:	b08c      	sub	sp, #48	@ 0x30
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8009302:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8009306:	ed97 0b04 	vldr	d0, [r7, #16]
 800930a:	f003 f92b 	bl	800c564 <rtIsNaN>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <rt_powd_snf+0x2a>
 8009314:	ed97 0b02 	vldr	d0, [r7, #8]
 8009318:	f003 f924 	bl	800c564 <rtIsNaN>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d005      	beq.n	800932e <rt_powd_snf+0x36>
    y = rtNaN;
 8009322:	4b80      	ldr	r3, [pc, #512]	@ (8009524 <rt_powd_snf+0x22c>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800932c:	e0ef      	b.n	800950e <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	603b      	str	r3, [r7, #0]
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009338:	607b      	str	r3, [r7, #4]
 800933a:	ed97 7b00 	vldr	d7, [r7]
 800933e:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8009342:	68bc      	ldr	r4, [r7, #8]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800934a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800934e:	ed97 0b02 	vldr	d0, [r7, #8]
 8009352:	f003 f8d9 	bl	800c508 <rtIsInf>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d049      	beq.n	80093f0 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	4b71      	ldr	r3, [pc, #452]	@ (8009528 <rt_powd_snf+0x230>)
 8009362:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009366:	f7f7 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <rt_powd_snf+0x84>
        y = 1.0;
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	4b6c      	ldr	r3, [pc, #432]	@ (8009528 <rt_powd_snf+0x230>)
 8009376:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800937a:	e0c8      	b.n	800950e <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	4b69      	ldr	r3, [pc, #420]	@ (8009528 <rt_powd_snf+0x230>)
 8009382:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009386:	f7f7 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d017      	beq.n	80093c0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800939c:	f7f7 fbbc 	bl	8000b18 <__aeabi_dcmpgt>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <rt_powd_snf+0xba>
          y = rtInf;
 80093a6:	4b61      	ldr	r3, [pc, #388]	@ (800952c <rt_powd_snf+0x234>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80093b0:	e0ad      	b.n	800950e <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80093be:	e0a6      	b.n	800950e <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093cc:	f7f7 fba4 	bl	8000b18 <__aeabi_dcmpgt>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d006      	beq.n	80093e4 <rt_powd_snf+0xec>
        y = 0.0;
 80093d6:	f04f 0200 	mov.w	r2, #0
 80093da:	f04f 0300 	mov.w	r3, #0
 80093de:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80093e2:	e094      	b.n	800950e <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 80093e4:	4b51      	ldr	r3, [pc, #324]	@ (800952c <rt_powd_snf+0x234>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80093ee:	e08e      	b.n	800950e <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093fc:	f7f7 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <rt_powd_snf+0x11a>
      y = 1.0;
 8009406:	f04f 0200 	mov.w	r2, #0
 800940a:	4b47      	ldr	r3, [pc, #284]	@ (8009528 <rt_powd_snf+0x230>)
 800940c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009410:	e07d      	b.n	800950e <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	4b44      	ldr	r3, [pc, #272]	@ (8009528 <rt_powd_snf+0x230>)
 8009418:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800941c:	f7f7 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01b      	beq.n	800945e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8009426:	f04f 0200 	mov.w	r2, #0
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009432:	f7f7 fb71 	bl	8000b18 <__aeabi_dcmpgt>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <rt_powd_snf+0x14e>
        y = u0;
 800943c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009440:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009444:	e063      	b.n	800950e <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8009446:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800944a:	f04f 0000 	mov.w	r0, #0
 800944e:	4936      	ldr	r1, [pc, #216]	@ (8009528 <rt_powd_snf+0x230>)
 8009450:	f7f7 f9fc 	bl	800084c <__aeabi_ddiv>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800945c:	e057      	b.n	800950e <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800946a:	f7f7 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00a      	beq.n	800948a <rt_powd_snf+0x192>
      y = u0 * u0;
 8009474:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800947c:	f7f7 f8bc 	bl	80005f8 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009488:	e041      	b.n	800950e <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <rt_powd_snf+0x238>)
 8009490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009494:	f7f7 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d011      	beq.n	80094c2 <rt_powd_snf+0x1ca>
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	f04f 0300 	mov.w	r3, #0
 80094a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094aa:	f7f7 fb2b 	bl	8000b04 <__aeabi_dcmpge>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d006      	beq.n	80094c2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 80094b4:	ed97 0b04 	vldr	d0, [r7, #16]
 80094b8:	f017 fcc8 	bl	8020e4c <sqrt>
 80094bc:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80094c0:	e025      	b.n	800950e <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094ce:	f7f7 fb05 	bl	8000adc <__aeabi_dcmplt>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d012      	beq.n	80094fe <rt_powd_snf+0x206>
 80094d8:	ed97 0b02 	vldr	d0, [r7, #8]
 80094dc:	f018 f814 	bl	8021508 <floor>
 80094e0:	ec53 2b10 	vmov	r2, r3, d0
 80094e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094e8:	f7f7 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <rt_powd_snf+0x206>
      y = rtNaN;
 80094f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <rt_powd_snf+0x22c>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80094fc:	e007      	b.n	800950e <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80094fe:	ed97 1b02 	vldr	d1, [r7, #8]
 8009502:	ed97 0b04 	vldr	d0, [r7, #16]
 8009506:	f017 fc31 	bl	8020d6c <pow>
 800950a:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    }
  }
  return y;
 800950e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009512:	ec43 2b17 	vmov	d7, r2, r3
}
 8009516:	eeb0 0a47 	vmov.f32	s0, s14
 800951a:	eef0 0a67 	vmov.f32	s1, s15
 800951e:	3730      	adds	r7, #48	@ 0x30
 8009520:	46bd      	mov	sp, r7
 8009522:	bdb0      	pop	{r4, r5, r7, pc}
 8009524:	20000038 	.word	0x20000038
 8009528:	3ff00000 	.word	0x3ff00000
 800952c:	20000040 	.word	0x20000040
 8009530:	3fe00000 	.word	0x3fe00000
 8009534:	00000000 	.word	0x00000000

08009538 <lqr_k>:
 * Arguments    : double L0
 *                double K[12]
 * Return Type  : void
 */
void lqr_k(double L0, double K[12])
{
 8009538:	b5b0      	push	{r4, r5, r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af00      	add	r7, sp, #0
 800953e:	ed87 0b02 	vstr	d0, [r7, #8]
 8009542:	6078      	str	r0, [r7, #4]
  double t2;
  double t3;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     27-Jul-2024 17:35:25 */
  t2 = L0 * L0;
 8009544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009548:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800954c:	f7f7 f854 	bl	80005f8 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	e9c7 2306 	strd	r2, r3, [r7, #24]
  t3 = rt_powd_snf(L0, 3.0);
 8009558:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 8009898 <lqr_k+0x360>
 800955c:	ed97 0b02 	vldr	d0, [r7, #8]
 8009560:	f7ff feca 	bl	80092f8 <rt_powd_snf>
 8009564:	ed87 0b04 	vstr	d0, [r7, #16]
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 8009568:	a3cd      	add	r3, pc, #820	@ (adr r3, 80098a0 <lqr_k+0x368>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4614      	mov	r4, r2
 800957c:	461d      	mov	r5, r3
 800957e:	a3ca      	add	r3, pc, #808	@ (adr r3, 80098a8 <lqr_k+0x370>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009588:	f7f7 f836 	bl	80005f8 <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f6 fe7a 	bl	800028c <__adddf3>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4614      	mov	r4, r2
 800959e:	461d      	mov	r5, r3
          t3 * 277.71747427878682) -
 80095a0:	a3c3      	add	r3, pc, #780	@ (adr r3, 80098b0 <lqr_k+0x378>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095aa:	f7f7 f825 	bl	80005f8 <__aeabi_dmul>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 80095b2:	4620      	mov	r0, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7f6 fe67 	bl	8000288 <__aeabi_dsub>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
          t3 * 277.71747427878682) -
 80095c2:	a3bd      	add	r3, pc, #756	@ (adr r3, 80098b8 <lqr_k+0x380>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 fe5e 	bl	8000288 <__aeabi_dsub>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	e9c1 2300 	strd	r2, r3, [r1]
         2.6875305810977892;
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 80095d6:	a3ba      	add	r3, pc, #744	@ (adr r3, 80098c0 <lqr_k+0x388>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095e0:	f7f7 f80a 	bl	80005f8 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4614      	mov	r4, r2
 80095ea:	461d      	mov	r5, r3
 80095ec:	a3b6      	add	r3, pc, #728	@ (adr r3, 80098c8 <lqr_k+0x390>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095f6:	f7f6 ffff 	bl	80005f8 <__aeabi_dmul>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f6 fe43 	bl	800028c <__adddf3>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4614      	mov	r4, r2
 800960c:	461d      	mov	r5, r3
          t3 * 62.862564037484013) +
 800960e:	a3b0      	add	r3, pc, #704	@ (adr r3, 80098d0 <lqr_k+0x398>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009618:	f7f6 ffee 	bl	80005f8 <__aeabi_dmul>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 8009620:	4620      	mov	r0, r4
 8009622:	4629      	mov	r1, r5
 8009624:	f7f6 fe30 	bl	8000288 <__aeabi_dsub>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4610      	mov	r0, r2
 800962e:	4619      	mov	r1, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f103 0408 	add.w	r4, r3, #8
          t3 * 62.862564037484013) +
 8009636:	a3a8      	add	r3, pc, #672	@ (adr r3, 80098d8 <lqr_k+0x3a0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fe26 	bl	800028c <__adddf3>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 8009644:	e9c4 2300 	strd	r2, r3, [r4]
         2.4077773297174141;
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 8009648:	a3a5      	add	r3, pc, #660	@ (adr r3, 80098e0 <lqr_k+0x3a8>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009652:	f7f6 ffd1 	bl	80005f8 <__aeabi_dmul>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4614      	mov	r4, r2
 800965c:	461d      	mov	r5, r3
 800965e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80098e8 <lqr_k+0x3b0>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009668:	f7f6 ffc6 	bl	80005f8 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4620      	mov	r0, r4
 8009672:	4629      	mov	r1, r5
 8009674:	f7f6 fe0a 	bl	800028c <__adddf3>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4614      	mov	r4, r2
 800967e:	461d      	mov	r5, r3
          t3 * 5.39712632191915) -
 8009680:	a39b      	add	r3, pc, #620	@ (adr r3, 80098f0 <lqr_k+0x3b8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 8009692:	4620      	mov	r0, r4
 8009694:	4629      	mov	r1, r5
 8009696:	f7f6 fdf7 	bl	8000288 <__aeabi_dsub>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4610      	mov	r0, r2
 80096a0:	4619      	mov	r1, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f103 0410 	add.w	r4, r3, #16
          t3 * 5.39712632191915) -
 80096a8:	a393      	add	r3, pc, #588	@ (adr r3, 80098f8 <lqr_k+0x3c0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fdeb 	bl	8000288 <__aeabi_dsub>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 80096b6:	e9c4 2300 	strd	r2, r3, [r4]
         0.34788258861362348;
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 80096ba:	a391      	add	r3, pc, #580	@ (adr r3, 8009900 <lqr_k+0x3c8>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096c4:	f7f6 ff98 	bl	80005f8 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	461d      	mov	r5, r3
 80096d0:	a38d      	add	r3, pc, #564	@ (adr r3, 8009908 <lqr_k+0x3d0>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096da:	f7f6 ff8d 	bl	80005f8 <__aeabi_dmul>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fdd1 	bl	800028c <__adddf3>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4614      	mov	r4, r2
 80096f0:	461d      	mov	r5, r3
          t3 * 13.093348455609879) +
 80096f2:	a387      	add	r3, pc, #540	@ (adr r3, 8009910 <lqr_k+0x3d8>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 8009704:	4620      	mov	r0, r4
 8009706:	4629      	mov	r1, r5
 8009708:	f7f6 fdbe 	bl	8000288 <__aeabi_dsub>
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	4610      	mov	r0, r2
 8009712:	4619      	mov	r1, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f103 0418 	add.w	r4, r3, #24
          t3 * 13.093348455609879) +
 800971a:	a37f      	add	r3, pc, #508	@ (adr r3, 8009918 <lqr_k+0x3e0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fdb4 	bl	800028c <__adddf3>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 8009728:	e9c4 2300 	strd	r2, r3, [r4]
         0.33619836382767981;
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800972c:	a37c      	add	r3, pc, #496	@ (adr r3, 8009920 <lqr_k+0x3e8>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009736:	f7f6 ff5f 	bl	80005f8 <__aeabi_dmul>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4614      	mov	r4, r2
 8009740:	461d      	mov	r5, r3
 8009742:	a379      	add	r3, pc, #484	@ (adr r3, 8009928 <lqr_k+0x3f0>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4620      	mov	r0, r4
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 fd98 	bl	800028c <__adddf3>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4614      	mov	r4, r2
 8009762:	461d      	mov	r5, r3
          t3 * 83.5018738492099) -
 8009764:	a372      	add	r3, pc, #456	@ (adr r3, 8009930 <lqr_k+0x3f8>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800976e:	f7f6 ff43 	bl	80005f8 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 fd85 	bl	8000288 <__aeabi_dsub>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4610      	mov	r0, r2
 8009784:	4619      	mov	r1, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f103 0420 	add.w	r4, r3, #32
          t3 * 83.5018738492099) -
 800978c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009938 <lqr_k+0x400>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 fd79 	bl	8000288 <__aeabi_dsub>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800979a:	e9c4 2300 	strd	r2, r3, [r4]
         2.5346969801909141;
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800979e:	a368      	add	r3, pc, #416	@ (adr r3, 8009940 <lqr_k+0x408>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097a8:	f7f6 ff26 	bl	80005f8 <__aeabi_dmul>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4614      	mov	r4, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	a364      	add	r3, pc, #400	@ (adr r3, 8009948 <lqr_k+0x410>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097be:	f7f6 ff1b 	bl	80005f8 <__aeabi_dmul>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f6 fd5f 	bl	800028c <__adddf3>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4614      	mov	r4, r2
 80097d4:	461d      	mov	r5, r3
          t3 * 141.7488288180505) +
 80097d6:	a35e      	add	r3, pc, #376	@ (adr r3, 8009950 <lqr_k+0x418>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80097e0:	f7f6 ff0a 	bl	80005f8 <__aeabi_dmul>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 80097e8:	4620      	mov	r0, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f6 fd4c 	bl	8000288 <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f103 0428 	add.w	r4, r3, #40	@ 0x28
          t3 * 141.7488288180505) +
 80097fe:	a356      	add	r3, pc, #344	@ (adr r3, 8009958 <lqr_k+0x420>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fd42 	bl	800028c <__adddf3>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800980c:	e9c4 2300 	strd	r2, r3, [r4]
         2.2061564840746279;
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 8009810:	a353      	add	r3, pc, #332	@ (adr r3, 8009960 <lqr_k+0x428>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800981a:	f7f6 feed 	bl	80005f8 <__aeabi_dmul>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4614      	mov	r4, r2
 8009824:	461d      	mov	r5, r3
 8009826:	a350      	add	r3, pc, #320	@ (adr r3, 8009968 <lqr_k+0x430>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009830:	f7f6 fee2 	bl	80005f8 <__aeabi_dmul>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	4620      	mov	r0, r4
 800983a:	4629      	mov	r1, r5
 800983c:	f7f6 fd26 	bl	800028c <__adddf3>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4614      	mov	r4, r2
 8009846:	461d      	mov	r5, r3
          t3 * 12.33887280821885) -
 8009848:	a349      	add	r3, pc, #292	@ (adr r3, 8009970 <lqr_k+0x438>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009852:	f7f6 fed1 	bl	80005f8 <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f6 fd13 	bl	8000288 <__aeabi_dsub>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4610      	mov	r0, r2
 8009868:	4619      	mov	r1, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
          t3 * 12.33887280821885) -
 8009870:	a341      	add	r3, pc, #260	@ (adr r3, 8009978 <lqr_k+0x440>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd07 	bl	8000288 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800987e:	e9c4 2300 	strd	r2, r3, [r4]
         2.3946300730855778;
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 8009882:	a33f      	add	r3, pc, #252	@ (adr r3, 8009980 <lqr_k+0x448>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800988c:	f7f6 feb4 	bl	80005f8 <__aeabi_dmul>
 8009890:	e07a      	b.n	8009988 <lqr_k+0x450>
 8009892:	bf00      	nop
 8009894:	f3af 8000 	nop.w
 8009898:	00000000 	.word	0x00000000
 800989c:	40080000 	.word	0x40080000
 80098a0:	e11d56d7 	.word	0xe11d56d7
 80098a4:	c0495e82 	.word	0xc0495e82
 80098a8:	cef284e7 	.word	0xcef284e7
 80098ac:	40651773 	.word	0x40651773
 80098b0:	c64f31c5 	.word	0xc64f31c5
 80098b4:	40715b7a 	.word	0x40715b7a
 80098b8:	088684e0 	.word	0x088684e0
 80098bc:	40058010 	.word	0x40058010
 80098c0:	dc2046b8 	.word	0xdc2046b8
 80098c4:	c0306918 	.word	0xc0306918
 80098c8:	d1f54deb 	.word	0xd1f54deb
 80098cc:	404a26fe 	.word	0x404a26fe
 80098d0:	7f95d98b 	.word	0x7f95d98b
 80098d4:	404f6e68 	.word	0x404f6e68
 80098d8:	c2b97df5 	.word	0xc2b97df5
 80098dc:	40034320 	.word	0x40034320
 80098e0:	bbfc5804 	.word	0xbbfc5804
 80098e4:	c00e57c6 	.word	0xc00e57c6
 80098e8:	8b2cbed8 	.word	0x8b2cbed8
 80098ec:	3fe136f6 	.word	0x3fe136f6
 80098f0:	48541815 	.word	0x48541815
 80098f4:	401596a8 	.word	0x401596a8
 80098f8:	553c5f99 	.word	0x553c5f99
 80098fc:	3fd643b5 	.word	0x3fd643b5
 8009900:	8b6872cc 	.word	0x8b6872cc
 8009904:	c0030952 	.word	0xc0030952
 8009908:	0321b9a5 	.word	0x0321b9a5
 800990c:	40221b5e 	.word	0x40221b5e
 8009910:	5e67f3fd 	.word	0x5e67f3fd
 8009914:	402a2fcb 	.word	0x402a2fcb
 8009918:	2466f335 	.word	0x2466f335
 800991c:	3fd58446 	.word	0x3fd58446
 8009920:	12933d46 	.word	0x12933d46
 8009924:	c022345e 	.word	0xc022345e
 8009928:	104153cc 	.word	0x104153cc
 800992c:	404791c5 	.word	0x404791c5
 8009930:	b37e44bf 	.word	0xb37e44bf
 8009934:	4054e01e 	.word	0x4054e01e
 8009938:	35d984fd 	.word	0x35d984fd
 800993c:	4004470f 	.word	0x4004470f
 8009940:	6d2a2eb6 	.word	0x6d2a2eb6
 8009944:	c035b964 	.word	0xc035b964
 8009948:	001d5b40 	.word	0x001d5b40
 800994c:	4056ca7d 	.word	0x4056ca7d
 8009950:	67da7a89 	.word	0x67da7a89
 8009954:	4061b7f6 	.word	0x4061b7f6
 8009958:	5ee7abc5 	.word	0x5ee7abc5
 800995c:	4001a635 	.word	0x4001a635
 8009960:	3c8af835 	.word	0x3c8af835
 8009964:	c00363cc 	.word	0xc00363cc
 8009968:	2d7aa92b 	.word	0x2d7aa92b
 800996c:	401a315b 	.word	0x401a315b
 8009970:	bc999b77 	.word	0xbc999b77
 8009974:	4028ad80 	.word	0x4028ad80
 8009978:	cfcf5d7c 	.word	0xcfcf5d7c
 800997c:	40032833 	.word	0x40032833
 8009980:	9ad97d7b 	.word	0x9ad97d7b
 8009984:	c03416fd 	.word	0xc03416fd
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4614      	mov	r4, r2
 800998e:	461d      	mov	r5, r3
 8009990:	a38b      	add	r3, pc, #556	@ (adr r3, 8009bc0 <lqr_k+0x688>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f6 fc71 	bl	800028c <__adddf3>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4614      	mov	r4, r2
 80099b0:	461d      	mov	r5, r3
          t3 * 143.792464436029) +
 80099b2:	a385      	add	r3, pc, #532	@ (adr r3, 8009bc8 <lqr_k+0x690>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80099bc:	f7f6 fe1c 	bl	80005f8 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 80099c4:	4620      	mov	r0, r4
 80099c6:	4629      	mov	r1, r5
 80099c8:	f7f6 fc5e 	bl	8000288 <__aeabi_dsub>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4610      	mov	r0, r2
 80099d2:	4619      	mov	r1, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
          t3 * 143.792464436029) +
 80099da:	a37d      	add	r3, pc, #500	@ (adr r3, 8009bd0 <lqr_k+0x698>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f7f6 fc54 	bl	800028c <__adddf3>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 80099e8:	e9c4 2300 	strd	r2, r3, [r4]
         1.9279268694789149;
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 80099ec:	a37a      	add	r3, pc, #488	@ (adr r3, 8009bd8 <lqr_k+0x6a0>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4614      	mov	r4, r2
 8009a00:	461d      	mov	r5, r3
 8009a02:	a377      	add	r3, pc, #476	@ (adr r3, 8009be0 <lqr_k+0x6a8>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a0c:	f7f6 fdf4 	bl	80005f8 <__aeabi_dmul>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 fc38 	bl	800028c <__adddf3>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4614      	mov	r4, r2
 8009a22:	461d      	mov	r5, r3
          t3 * 448.24915472642982) +
 8009a24:	a370      	add	r3, pc, #448	@ (adr r3, 8009be8 <lqr_k+0x6b0>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a2e:	f7f6 fde3 	bl	80005f8 <__aeabi_dmul>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7f6 fc25 	bl	8000288 <__aeabi_dsub>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4610      	mov	r0, r2
 8009a44:	4619      	mov	r1, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f103 0440 	add.w	r4, r3, #64	@ 0x40
          t3 * 448.24915472642982) +
 8009a4c:	a368      	add	r3, pc, #416	@ (adr r3, 8009bf0 <lqr_k+0x6b8>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7f6 fc1b 	bl	800028c <__adddf3>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 8009a5a:	e9c4 2300 	strd	r2, r3, [r4]
         6.9764793644248986;
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 8009a5e:	a366      	add	r3, pc, #408	@ (adr r3, 8009bf8 <lqr_k+0x6c0>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a68:	f7f6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4614      	mov	r4, r2
 8009a72:	461d      	mov	r5, r3
 8009a74:	a362      	add	r3, pc, #392	@ (adr r3, 8009c00 <lqr_k+0x6c8>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fbfd 	bl	8000288 <__aeabi_dsub>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4614      	mov	r4, r2
 8009a94:	461d      	mov	r5, r3
          t3 * 264.05611025542441) +
 8009a96:	a35c      	add	r3, pc, #368	@ (adr r3, 8009c08 <lqr_k+0x6d0>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009aa0:	f7f6 fdaa 	bl	80005f8 <__aeabi_dmul>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fbee 	bl	800028c <__adddf3>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f103 0448 	add.w	r4, r3, #72	@ 0x48
          t3 * 264.05611025542441) +
 8009abe:	a354      	add	r3, pc, #336	@ (adr r3, 8009c10 <lqr_k+0x6d8>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fbe2 	bl	800028c <__adddf3>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 8009acc:	e9c4 2300 	strd	r2, r3, [r4]
         8.0154156357539623;
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 8009ad0:	a351      	add	r3, pc, #324	@ (adr r3, 8009c18 <lqr_k+0x6e0>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ada:	f7f6 fd8d 	bl	80005f8 <__aeabi_dmul>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	461d      	mov	r5, r3
 8009ae6:	a34e      	add	r3, pc, #312	@ (adr r3, 8009c20 <lqr_k+0x6e8>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009af0:	f7f6 fd82 	bl	80005f8 <__aeabi_dmul>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4620      	mov	r0, r4
 8009afa:	4629      	mov	r1, r5
 8009afc:	f7f6 fbc6 	bl	800028c <__adddf3>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	461d      	mov	r5, r3
           t3 * 28.733067607751678) +
 8009b08:	a347      	add	r3, pc, #284	@ (adr r3, 8009c28 <lqr_k+0x6f0>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009b12:	f7f6 fd71 	bl	80005f8 <__aeabi_dmul>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7f6 fbb3 	bl	8000288 <__aeabi_dsub>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f103 0450 	add.w	r4, r3, #80	@ 0x50
           t3 * 28.733067607751678) +
 8009b30:	a33f      	add	r3, pc, #252	@ (adr r3, 8009c30 <lqr_k+0x6f8>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f7f6 fba9 	bl	800028c <__adddf3>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 8009b3e:	e9c4 2300 	strd	r2, r3, [r4]
          0.4913040439106548;
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 8009b42:	a33d      	add	r3, pc, #244	@ (adr r3, 8009c38 <lqr_k+0x700>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b4c:	f7f6 fd54 	bl	80005f8 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4614      	mov	r4, r2
 8009b56:	461d      	mov	r5, r3
 8009b58:	a339      	add	r3, pc, #228	@ (adr r3, 8009c40 <lqr_k+0x708>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b62:	f7f6 fd49 	bl	80005f8 <__aeabi_dmul>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7f6 fb8b 	bl	8000288 <__aeabi_dsub>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4614      	mov	r4, r2
 8009b78:	461d      	mov	r5, r3
           t3 * 17.281074817235439) +
 8009b7a:	a333      	add	r3, pc, #204	@ (adr r3, 8009c48 <lqr_k+0x710>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7f6 fb7c 	bl	800028c <__adddf3>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f103 0458 	add.w	r4, r3, #88	@ 0x58
           t3 * 17.281074817235439) +
 8009ba2:	a32b      	add	r3, pc, #172	@ (adr r3, 8009c50 <lqr_k+0x718>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 fb70 	bl	800028c <__adddf3>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 8009bb0:	e9c4 2300 	strd	r2, r3, [r4]
          0.45590187076573768;
}
 8009bb4:	bf00      	nop
 8009bb6:	3720      	adds	r7, #32
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bdb0      	pop	{r4, r5, r7, pc}
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	ec636a38 	.word	0xec636a38
 8009bc4:	40563570 	.word	0x40563570
 8009bc8:	de607f9b 	.word	0xde607f9b
 8009bcc:	4061f95b 	.word	0x4061f95b
 8009bd0:	d857dd98 	.word	0xd857dd98
 8009bd4:	3ffed8c9 	.word	0x3ffed8c9
 8009bd8:	a994a8df 	.word	0xa994a8df
 8009bdc:	c0512caa 	.word	0xc0512caa
 8009be0:	67b97e90 	.word	0x67b97e90
 8009be4:	40720491 	.word	0x40720491
 8009be8:	89aa9a8f 	.word	0x89aa9a8f
 8009bec:	407c03fc 	.word	0x407c03fc
 8009bf0:	34ddb1fa 	.word	0x34ddb1fa
 8009bf4:	401be7ea 	.word	0x401be7ea
 8009bf8:	1ed9f335 	.word	0x1ed9f335
 8009bfc:	403cc8b0 	.word	0x403cc8b0
 8009c00:	24f0940c 	.word	0x24f0940c
 8009c04:	4062a21d 	.word	0x4062a21d
 8009c08:	d3de004a 	.word	0xd3de004a
 8009c0c:	407080e5 	.word	0x407080e5
 8009c10:	8ee6d215 	.word	0x8ee6d215
 8009c14:	402007e4 	.word	0x402007e4
 8009c18:	61780aba 	.word	0x61780aba
 8009c1c:	c011e3af 	.word	0xc011e3af
 8009c20:	95202cc4 	.word	0x95202cc4
 8009c24:	40327c8a 	.word	0x40327c8a
 8009c28:	51990ce8 	.word	0x51990ce8
 8009c2c:	403cbbaa 	.word	0x403cbbaa
 8009c30:	843f48ab 	.word	0x843f48ab
 8009c34:	3fdf7186 	.word	0x3fdf7186
 8009c38:	2f3d86ed 	.word	0x2f3d86ed
 8009c3c:	3ffeb730 	.word	0x3ffeb730
 8009c40:	ef16c0ea 	.word	0xef16c0ea
 8009c44:	4023a29b 	.word	0x4023a29b
 8009c48:	84ebc161 	.word	0x84ebc161
 8009c4c:	403147f4 	.word	0x403147f4
 8009c50:	0a47f0a1 	.word	0x0a47f0a1
 8009c54:	3fdd2d7f 	.word	0x3fdd2d7f

08009c58 <master_task>:
QueueHandle_t uart_data_queue;

extern gimbal_control_t gimbal_ctrl_data;


void master_task(void* argument){
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	6078      	str	r0, [r7, #4]
//	imu_init();
//	led_green_off();
//	start_micros_timer();
//	led_toggle();

	gimbal_event_group = xEventGroupCreate();
 8009c60:	f00e fd65 	bl	801872e <xEventGroupCreate>
 8009c64:	4603      	mov	r3, r0
 8009c66:	4a62      	ldr	r2, [pc, #392]	@ (8009df0 <master_task+0x198>)
 8009c68:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8009c6a:	f00e fd60 	bl	801872e <xEventGroupCreate>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	4a60      	ldr	r2, [pc, #384]	@ (8009df4 <master_task+0x19c>)
 8009c72:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 8009c74:	f00e fd5b 	bl	801872e <xEventGroupCreate>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4a5f      	ldr	r2, [pc, #380]	@ (8009df8 <master_task+0x1a0>)
 8009c7c:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8009c7e:	2203      	movs	r2, #3
 8009c80:	2100      	movs	r1, #0
 8009c82:	2001      	movs	r0, #1
 8009c84:	f00e ffb5 	bl	8018bf2 <xQueueGenericCreate>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8009dfc <master_task+0x1a4>)
 8009c8c:	6013      	str	r3, [r2, #0]


	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2110      	movs	r1, #16
 8009c92:	2005      	movs	r0, #5
 8009c94:	f00e ffad 	bl	8018bf2 <xQueueGenericCreate>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4a59      	ldr	r2, [pc, #356]	@ (8009e00 <master_task+0x1a8>)
 8009c9c:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2110      	movs	r1, #16
 8009ca2:	2005      	movs	r0, #5
 8009ca4:	f00e ffa5 	bl	8018bf2 <xQueueGenericCreate>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	4a56      	ldr	r2, [pc, #344]	@ (8009e04 <master_task+0x1ac>)
 8009cac:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 8009cae:	2200      	movs	r2, #0
 8009cb0:	210c      	movs	r1, #12
 8009cb2:	2005      	movs	r0, #5
 8009cb4:	f00e ff9d 	bl	8018bf2 <xQueueGenericCreate>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4a53      	ldr	r2, [pc, #332]	@ (8009e08 <master_task+0x1b0>)
 8009cbc:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	g_buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	2030      	movs	r0, #48	@ 0x30
 8009cc4:	f00e ff95 	bl	8018bf2 <xQueueGenericCreate>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	4a50      	ldr	r2, [pc, #320]	@ (8009e0c <master_task+0x1b4>)
 8009ccc:	6013      	str	r3, [r2, #0]


	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(Ctrl_Task, "Ctrl_Task_task",
 8009cce:	4b50      	ldr	r3, [pc, #320]	@ (8009e10 <master_task+0x1b8>)
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cdc:	494d      	ldr	r1, [pc, #308]	@ (8009e14 <master_task+0x1bc>)
 8009cde:	484e      	ldr	r0, [pc, #312]	@ (8009e18 <master_task+0x1c0>)
 8009ce0:	f00f fcc8 	bl	8019674 <xTaskCreate>

	// xTaskCreate(Ctrl_TargetUpdateTask, "Ctrl_TargetUpdateTask",
	// 		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
					// &Ctrl_TargetUpdateTask_handle);

	xTaskCreate(motors_process_task, "motor_process",
 8009ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8009e1c <master_task+0x1c4>)
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	2304      	movs	r3, #4
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	2301      	movs	r3, #1
 8009cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cf2:	494b      	ldr	r1, [pc, #300]	@ (8009e20 <master_task+0x1c8>)
 8009cf4:	484b      	ldr	r0, [pc, #300]	@ (8009e24 <master_task+0x1cc>)
 8009cf6:	f00f fcbd 	bl	8019674 <xTaskCreate>

	// xTaskCreate(balancing_task, "balancing_task",
	// 		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
	// 				&balancing_task_handle);

	xTaskCreate(leg_kinematic_task, "leg_kinematic",
 8009cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8009e28 <master_task+0x1d0>)
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	2304      	movs	r3, #4
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	2301      	movs	r3, #1
 8009d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d08:	4948      	ldr	r1, [pc, #288]	@ (8009e2c <master_task+0x1d4>)
 8009d0a:	4849      	ldr	r0, [pc, #292]	@ (8009e30 <master_task+0x1d8>)
 8009d0c:	f00f fcb2 	bl	8019674 <xTaskCreate>
			configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
					&motors_process_handle);

	xTaskCreate(imu_processing_task, "IMU_task",
 8009d10:	4b48      	ldr	r3, [pc, #288]	@ (8009e34 <master_task+0x1dc>)
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	230f      	movs	r3, #15
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d1e:	4946      	ldr	r1, [pc, #280]	@ (8009e38 <master_task+0x1e0>)
 8009d20:	4846      	ldr	r0, [pc, #280]	@ (8009e3c <master_task+0x1e4>)
 8009d22:	f00f fca7 	bl	8019674 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 8009d26:	4b46      	ldr	r3, [pc, #280]	@ (8009e40 <master_task+0x1e8>)
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	2309      	movs	r3, #9
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	2301      	movs	r3, #1
 8009d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d34:	4943      	ldr	r1, [pc, #268]	@ (8009e44 <master_task+0x1ec>)
 8009d36:	4844      	ldr	r0, [pc, #272]	@ (8009e48 <master_task+0x1f0>)
 8009d38:	f00f fc9c 	bl	8019674 <xTaskCreate>
	} else {
//		xTaskCreate(launcher_control_task, "launcher_task",
//		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
//				&launcher_control_task_handle);
	}
	gimbal_ctrl_data.yaw_semaphore = xSemaphoreCreateBinary();
 8009d3c:	2203      	movs	r2, #3
 8009d3e:	2100      	movs	r1, #0
 8009d40:	2001      	movs	r0, #1
 8009d42:	f00e ff56 	bl	8018bf2 <xQueueGenericCreate>
 8009d46:	4603      	mov	r3, r0
 8009d48:	4a40      	ldr	r2, [pc, #256]	@ (8009e4c <master_task+0x1f4>)
 8009d4a:	6113      	str	r3, [r2, #16]
	xSemaphoreGive(gimbal_ctrl_data.yaw_semaphore);
 8009d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8009e4c <master_task+0x1f4>)
 8009d4e:	6918      	ldr	r0, [r3, #16]
 8009d50:	2300      	movs	r3, #0
 8009d52:	2200      	movs	r2, #0
 8009d54:	2100      	movs	r1, #0
 8009d56:	f00e ffab 	bl	8018cb0 <xQueueGenericSend>
	xTaskCreate(control_input_task, "RC_task",
 8009d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8009e50 <master_task+0x1f8>)
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	2304      	movs	r3, #4
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	2301      	movs	r3, #1
 8009d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d68:	493a      	ldr	r1, [pc, #232]	@ (8009e54 <master_task+0x1fc>)
 8009d6a:	483b      	ldr	r0, [pc, #236]	@ (8009e58 <master_task+0x200>)
 8009d6c:	f00f fc82 	bl	8019674 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 512, (void*) 1,
 8009d70:	4b3a      	ldr	r3, [pc, #232]	@ (8009e5c <master_task+0x204>)
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	2302      	movs	r3, #2
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2301      	movs	r3, #1
 8009d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d7e:	4938      	ldr	r1, [pc, #224]	@ (8009e60 <master_task+0x208>)
 8009d80:	4838      	ldr	r0, [pc, #224]	@ (8009e64 <master_task+0x20c>)
 8009d82:	f00f fc77 	bl	8019674 <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(motor_control_task, "motor_control_task", 512, (void*) 3,
 8009d86:	4b38      	ldr	r3, [pc, #224]	@ (8009e68 <master_task+0x210>)
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	2303      	movs	r3, #3
 8009d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d94:	4935      	ldr	r1, [pc, #212]	@ (8009e6c <master_task+0x214>)
 8009d96:	4836      	ldr	r0, [pc, #216]	@ (8009e70 <master_task+0x218>)
 8009d98:	f00f fc6c 	bl	8019674 <xTaskCreate>
			(UBaseType_t) 8, &motor_control_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 8009d9c:	4b35      	ldr	r3, [pc, #212]	@ (8009e74 <master_task+0x21c>)
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	2301      	movs	r3, #1
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2301      	movs	r3, #1
 8009da6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009daa:	4933      	ldr	r1, [pc, #204]	@ (8009e78 <master_task+0x220>)
 8009dac:	4833      	ldr	r0, [pc, #204]	@ (8009e7c <master_task+0x224>)
 8009dae:	f00f fc61 	bl	8019674 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);
	if (usb_continue_semaphore == NULL) {
 8009db2:	4b12      	ldr	r3, [pc, #72]	@ (8009dfc <master_task+0x1a4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00a      	beq.n	8009dd0 <master_task+0x178>
		//error handler
	} else {
		xTaskCreate(usb_task, "usb_task",
 8009dba:	4b31      	ldr	r3, [pc, #196]	@ (8009e80 <master_task+0x228>)
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dc8:	492e      	ldr	r1, [pc, #184]	@ (8009e84 <master_task+0x22c>)
 8009dca:	482f      	ldr	r0, [pc, #188]	@ (8009e88 <master_task+0x230>)
 8009dcc:	f00f fc52 	bl	8019674 <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &usb_task_handle);
	}

//	xTaskCreate(telemetry_task, "telemetry_task", 700, (void*) 1,
//			(UBaseType_t) 5, &telemetry_task_handle);
	xTaskCreate(hud_task, "hud_task", 512, (void*) 3,
 8009dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8009e8c <master_task+0x234>)
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	2305      	movs	r3, #5
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	2303      	movs	r3, #3
 8009dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dde:	492c      	ldr	r1, [pc, #176]	@ (8009e90 <master_task+0x238>)
 8009de0:	482c      	ldr	r0, [pc, #176]	@ (8009e94 <master_task+0x23c>)
 8009de2:	f00f fc47 	bl	8019674 <xTaskCreate>
			(UBaseType_t) 5, &hud_task_handle);


//	vTaskDelete(master_task_handle);
	while(1){
		vTaskDelay(1000);
 8009de6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009dea:	f00f fe4b 	bl	8019a84 <vTaskDelay>
 8009dee:	e7fa      	b.n	8009de6 <master_task+0x18e>
 8009df0:	20003b98 	.word	0x20003b98
 8009df4:	20003b9c 	.word	0x20003b9c
 8009df8:	20003ba0 	.word	0x20003ba0
 8009dfc:	20003ba4 	.word	0x20003ba4
 8009e00:	20003ba8 	.word	0x20003ba8
 8009e04:	20003bac 	.word	0x20003bac
 8009e08:	20003bb0 	.word	0x20003bb0
 8009e0c:	20003bb4 	.word	0x20003bb4
 8009e10:	20003b94 	.word	0x20003b94
 8009e14:	080231d8 	.word	0x080231d8
 8009e18:	08004c71 	.word	0x08004c71
 8009e1c:	20003b90 	.word	0x20003b90
 8009e20:	080231e8 	.word	0x080231e8
 8009e24:	0800ba19 	.word	0x0800ba19
 8009e28:	20003b8c 	.word	0x20003b8c
 8009e2c:	080231f8 	.word	0x080231f8
 8009e30:	08008461 	.word	0x08008461
 8009e34:	20003b80 	.word	0x20003b80
 8009e38:	08023208 	.word	0x08023208
 8009e3c:	0800840d 	.word	0x0800840d
 8009e40:	20003b78 	.word	0x20003b78
 8009e44:	08023214 	.word	0x08023214
 8009e48:	0800b245 	.word	0x0800b245
 8009e4c:	200038c0 	.word	0x200038c0
 8009e50:	20003b70 	.word	0x20003b70
 8009e54:	08023228 	.word	0x08023228
 8009e58:	080065e9 	.word	0x080065e9
 8009e5c:	20003b6c 	.word	0x20003b6c
 8009e60:	08023230 	.word	0x08023230
 8009e64:	0800c0f1 	.word	0x0800c0f1
 8009e68:	20003b84 	.word	0x20003b84
 8009e6c:	08023240 	.word	0x08023240
 8009e70:	0800b519 	.word	0x0800b519
 8009e74:	20003b74 	.word	0x20003b74
 8009e78:	08023254 	.word	0x08023254
 8009e7c:	08005e51 	.word	0x08005e51
 8009e80:	20003b7c 	.word	0x20003b7c
 8009e84:	08023260 	.word	0x08023260
 8009e88:	0800c67d 	.word	0x0800c67d
 8009e8c:	20003b88 	.word	0x20003b88
 8009e90:	0802326c 	.word	0x0802326c
 8009e94:	08007441 	.word	0x08007441

08009e98 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t g_buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t *motor) {
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	//general config:
	switch (motor->motor_type) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	789b      	ldrb	r3, [r3, #2]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	f200 8115 	bhi.w	800a0d6 <set_motor_config+0x23e>
 8009eac:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb4 <set_motor_config+0x1c>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009fa5 	.word	0x08009fa5
 8009eb8:	0800a071 	.word	0x0800a071
 8009ebc:	08009ed9 	.word	0x08009ed9
 8009ec0:	08009f3d 	.word	0x08009f3d
 8009ec4:	08009ed9 	.word	0x08009ed9
 8009ec8:	0800a071 	.word	0x0800a071
 8009ecc:	0800a071 	.word	0x0800a071
 8009ed0:	08009ed9 	.word	0x08009ed9
 8009ed4:	0800a00b 	.word	0x0800a00b
	case TYPE_M3508_ANGLE:
	case TYPE_M3508_STEPS:
	case TYPE_M3508:
		motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a84      	ldr	r2, [pc, #528]	@ (800a0ec <set_motor_config+0x254>)
 8009edc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = M3508_MAX_RPM;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a83      	ldr	r2, [pc, #524]	@ (800a0f0 <set_motor_config+0x258>)
 8009ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8009eee:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096 * M3508_GEARBOX_RATIO;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a80      	ldr	r2, [pc, #512]	@ (800a0f4 <set_motor_config+0x25c>)
 8009ef4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096 * M3508_GEARBOX_RATIO;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a7f      	ldr	r2, [pc, #508]	@ (800a0f8 <set_motor_config+0x260>)
 8009efc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f0c:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -PI;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a79      	ldr	r2, [pc, #484]	@ (800a0fc <set_motor_config+0x264>)
 8009f18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = PI;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a78      	ldr	r2, [pc, #480]	@ (800a100 <set_motor_config+0x268>)
 8009f20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang - motor->angle_data.min_ang;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8009f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 8009f3a:	e0cd      	b.n	800a0d8 <set_motor_config+0x240>
	case TYPE_M3508_NGEARBOX:
		motor->angle_data.gearbox_ratio = 1;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009f42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = M3508_MAX_RPM;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a69      	ldr	r2, [pc, #420]	@ (800a0f0 <set_motor_config+0x258>)
 8009f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8009f54:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a6a      	ldr	r2, [pc, #424]	@ (800a104 <set_motor_config+0x26c>)
 8009f5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009f64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f74:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -PI;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a5f      	ldr	r2, [pc, #380]	@ (800a0fc <set_motor_config+0x264>)
 8009f80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = PI;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a5e      	ldr	r2, [pc, #376]	@ (800a100 <set_motor_config+0x268>)
 8009f88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8009f98:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 8009fa2:	e099      	b.n	800a0d8 <set_motor_config+0x240>

	case TYPE_GM6020:
		motor->angle_data.gearbox_ratio = 1;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009faa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = GM6020_MAX_RPM;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a55      	ldr	r2, [pc, #340]	@ (800a108 <set_motor_config+0x270>)
 8009fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a54      	ldr	r2, [pc, #336]	@ (800a10c <set_motor_config+0x274>)
 8009fba:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a51      	ldr	r2, [pc, #324]	@ (800a104 <set_motor_config+0x26c>)
 8009fc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009fca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fda:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.max_ang = PI;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a46      	ldr	r2, [pc, #280]	@ (800a100 <set_motor_config+0x268>)
 8009fe6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.min_ang = -PI;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a43      	ldr	r2, [pc, #268]	@ (800a0fc <set_motor_config+0x264>)
 8009fee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8009ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800a008:	e066      	b.n	800a0d8 <set_motor_config+0x240>

	case TYPE_GM6020_720:
		motor->angle_data.gearbox_ratio = 0;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = GM6020_MAX_RPM;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a3c      	ldr	r2, [pc, #240]	@ (800a108 <set_motor_config+0x270>)
 800a018:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a3b      	ldr	r2, [pc, #236]	@ (800a10c <set_motor_config+0x274>)
 800a020:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -8192;	//-4096*2
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a3a      	ldr	r2, [pc, #232]	@ (800a110 <set_motor_config+0x278>)
 800a026:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 8192;	//4096*2
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a030:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a040:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -2 * PI;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a32      	ldr	r2, [pc, #200]	@ (800a114 <set_motor_config+0x27c>)
 800a04c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = 2 * PI;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a31      	ldr	r2, [pc, #196]	@ (800a118 <set_motor_config+0x280>)
 800a054:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800a064:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800a06e:	e033      	b.n	800a0d8 <set_motor_config+0x240>
	case TYPE_M2006:
	case TYPE_M2006_STEPS:
	case TYPE_M2006_ANGLE:
		motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a2a      	ldr	r2, [pc, #168]	@ (800a11c <set_motor_config+0x284>)
 800a074:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = M2006_MAX_RPM;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a29      	ldr	r2, [pc, #164]	@ (800a120 <set_motor_config+0x288>)
 800a07c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800a086:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096 * M2006_GEARBOX_RATIO;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a26      	ldr	r2, [pc, #152]	@ (800a124 <set_motor_config+0x28c>)
 800a08c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096 * M2006_GEARBOX_RATIO;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f44f 3210 	mov.w	r2, #147456	@ 0x24000
 800a096:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0a6:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -PI;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a12      	ldr	r2, [pc, #72]	@ (800a0fc <set_motor_config+0x264>)
 800a0b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = PI;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a11      	ldr	r2, [pc, #68]	@ (800a100 <set_motor_config+0x268>)
 800a0ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800a0ca:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800a0d4:	e000      	b.n	800a0d8 <set_motor_config+0x240>
	default:
		break;
 800a0d6:	bf00      	nop
	}

	motor->angle_data.init = 0;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	4199999a 	.word	0x4199999a
 800a0f0:	460fc000 	.word	0x460fc000
 800a0f4:	fffecccd 	.word	0xfffecccd
 800a0f8:	00013333 	.word	0x00013333
 800a0fc:	c0490fdb 	.word	0xc0490fdb
 800a100:	40490fdb 	.word	0x40490fdb
 800a104:	fffff000 	.word	0xfffff000
 800a108:	43c80000 	.word	0x43c80000
 800a10c:	469c4000 	.word	0x469c4000
 800a110:	ffffe000 	.word	0xffffe000
 800a114:	c0c90fdb 	.word	0xc0c90fdb
 800a118:	40c90fdb 	.word	0x40c90fdb
 800a11c:	42100000 	.word	0x42100000
 800a120:	466a6000 	.word	0x466a6000
 800a124:	fffdc000 	.word	0xfffdc000

0800a128 <config_motors>:

extern motor_data_t g_can_motors[24];
void config_motors() {
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 24; i++) {
 800a12e:	2300      	movs	r3, #0
 800a130:	71fb      	strb	r3, [r7, #7]
 800a132:	e042      	b.n	800a1ba <config_motors+0x92>
		//reset all the values to 0
		g_can_motors[i].motor_type = 0;
 800a134:	79fa      	ldrb	r2, [r7, #7]
 800a136:	49c4      	ldr	r1, [pc, #784]	@ (800a448 <config_motors+0x320>)
 800a138:	4613      	mov	r3, r2
 800a13a:	011b      	lsls	r3, r3, #4
 800a13c:	1a9b      	subs	r3, r3, r2
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	440b      	add	r3, r1
 800a142:	3302      	adds	r3, #2
 800a144:	2200      	movs	r2, #0
 800a146:	701a      	strb	r2, [r3, #0]
		g_can_motors[i].rpm_pid.output = 0;
 800a148:	79fa      	ldrb	r2, [r7, #7]
 800a14a:	49bf      	ldr	r1, [pc, #764]	@ (800a448 <config_motors+0x320>)
 800a14c:	4613      	mov	r3, r2
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	440b      	add	r3, r1
 800a156:	3358      	adds	r3, #88	@ 0x58
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]
		g_can_motors[i].rpm_pid.integral = 0;
 800a15e:	79fa      	ldrb	r2, [r7, #7]
 800a160:	49b9      	ldr	r1, [pc, #740]	@ (800a448 <config_motors+0x320>)
 800a162:	4613      	mov	r3, r2
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	440b      	add	r3, r1
 800a16c:	334c      	adds	r3, #76	@ 0x4c
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_pid.output = 0;
 800a174:	79fa      	ldrb	r2, [r7, #7]
 800a176:	49b4      	ldr	r1, [pc, #720]	@ (800a448 <config_motors+0x320>)
 800a178:	4613      	mov	r3, r2
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	1a9b      	subs	r3, r3, r2
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	440b      	add	r3, r1
 800a182:	3388      	adds	r3, #136	@ 0x88
 800a184:	f04f 0200 	mov.w	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_pid.integral = 0;
 800a18a:	79fa      	ldrb	r2, [r7, #7]
 800a18c:	49ae      	ldr	r1, [pc, #696]	@ (800a448 <config_motors+0x320>)
 800a18e:	4613      	mov	r3, r2
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	011b      	lsls	r3, r3, #4
 800a196:	440b      	add	r3, r1
 800a198:	337c      	adds	r3, #124	@ 0x7c
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_data.ticks = 0;
 800a1a0:	79fa      	ldrb	r2, [r7, #7]
 800a1a2:	49a9      	ldr	r1, [pc, #676]	@ (800a448 <config_motors+0x320>)
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	440b      	add	r3, r1
 800a1ae:	3398      	adds	r3, #152	@ 0x98
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 24; i++) {
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	71fb      	strb	r3, [r7, #7]
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	2b17      	cmp	r3, #23
 800a1be:	d9b9      	bls.n	800a134 <config_motors+0xc>
	}

	//initialise motor data
#ifdef LEFT_MOTOR_ID
	uint8_t motor_id = LEFT_MOTOR_ID - 1;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 800a1c4:	79ba      	ldrb	r2, [r7, #6]
 800a1c6:	49a0      	ldr	r1, [pc, #640]	@ (800a448 <config_motors+0x320>)
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	440b      	add	r3, r1
 800a1d2:	3302      	adds	r3, #2
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a1d8:	79ba      	ldrb	r2, [r7, #6]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	4a99      	ldr	r2, [pc, #612]	@ (800a448 <config_motors+0x320>)
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff fe56 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800a1ec:	79ba      	ldrb	r2, [r7, #6]
 800a1ee:	4996      	ldr	r1, [pc, #600]	@ (800a448 <config_motors+0x320>)
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	011b      	lsls	r3, r3, #4
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	440b      	add	r3, r1
 800a1fa:	339c      	adds	r3, #156	@ 0x9c
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a200:	79ba      	ldrb	r2, [r7, #6]
 800a202:	4991      	ldr	r1, [pc, #580]	@ (800a448 <config_motors+0x320>)
 800a204:	4613      	mov	r3, r2
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	011b      	lsls	r3, r3, #4
 800a20c:	440b      	add	r3, r1
 800a20e:	33c4      	adds	r3, #196	@ 0xc4
 800a210:	4a8e      	ldr	r2, [pc, #568]	@ (800a44c <config_motors+0x324>)
 800a212:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a214:	79ba      	ldrb	r2, [r7, #6]
 800a216:	498c      	ldr	r1, [pc, #560]	@ (800a448 <config_motors+0x320>)
 800a218:	4613      	mov	r3, r2
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	1a9b      	subs	r3, r3, r2
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	440b      	add	r3, r1
 800a222:	33c0      	adds	r3, #192	@ 0xc0
 800a224:	4a8a      	ldr	r2, [pc, #552]	@ (800a450 <config_motors+0x328>)
 800a226:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a228:	79ba      	ldrb	r2, [r7, #6]
 800a22a:	4987      	ldr	r1, [pc, #540]	@ (800a448 <config_motors+0x320>)
 800a22c:	4613      	mov	r3, r2
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	440b      	add	r3, r1
 800a236:	3338      	adds	r3, #56	@ 0x38
 800a238:	f04f 0200 	mov.w	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a23e:	79ba      	ldrb	r2, [r7, #6]
 800a240:	4981      	ldr	r1, [pc, #516]	@ (800a448 <config_motors+0x320>)
 800a242:	4613      	mov	r3, r2
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	1a9b      	subs	r3, r3, r2
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	440b      	add	r3, r1
 800a24c:	333c      	adds	r3, #60	@ 0x3c
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a254:	79ba      	ldrb	r2, [r7, #6]
 800a256:	497c      	ldr	r1, [pc, #496]	@ (800a448 <config_motors+0x320>)
 800a258:	4613      	mov	r3, r2
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	440b      	add	r3, r1
 800a262:	3340      	adds	r3, #64	@ 0x40
 800a264:	f04f 0200 	mov.w	r2, #0
 800a268:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a26a:	79ba      	ldrb	r2, [r7, #6]
 800a26c:	4976      	ldr	r1, [pc, #472]	@ (800a448 <config_motors+0x320>)
 800a26e:	4613      	mov	r3, r2
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	1a9b      	subs	r3, r3, r2
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	440b      	add	r3, r1
 800a278:	33d4      	adds	r3, #212	@ 0xd4
 800a27a:	4a76      	ldr	r2, [pc, #472]	@ (800a454 <config_motors+0x32c>)
 800a27c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a27e:	79ba      	ldrb	r2, [r7, #6]
 800a280:	4971      	ldr	r1, [pc, #452]	@ (800a448 <config_motors+0x320>)
 800a282:	4613      	mov	r3, r2
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	440b      	add	r3, r1
 800a28c:	3350      	adds	r3, #80	@ 0x50
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a294:	79ba      	ldrb	r2, [r7, #6]
 800a296:	496c      	ldr	r1, [pc, #432]	@ (800a448 <config_motors+0x320>)
 800a298:	4613      	mov	r3, r2
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	440b      	add	r3, r1
 800a2a2:	3354      	adds	r3, #84	@ 0x54
 800a2a4:	f04f 0200 	mov.w	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 10;
 800a2aa:	79ba      	ldrb	r2, [r7, #6]
 800a2ac:	4966      	ldr	r1, [pc, #408]	@ (800a448 <config_motors+0x320>)
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	1a9b      	subs	r3, r3, r2
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3330      	adds	r3, #48	@ 0x30
 800a2ba:	4a67      	ldr	r2, [pc, #412]	@ (800a458 <config_motors+0x330>)
 800a2bc:	601a      	str	r2, [r3, #0]
#endif

#ifdef RIGHT_MOTOR_ID
	motor_id = RIGHT_MOTOR_ID - 1;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 800a2c2:	79ba      	ldrb	r2, [r7, #6]
 800a2c4:	4960      	ldr	r1, [pc, #384]	@ (800a448 <config_motors+0x320>)
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	011b      	lsls	r3, r3, #4
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	440b      	add	r3, r1
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a2d6:	79ba      	ldrb	r2, [r7, #6]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	1a9b      	subs	r3, r3, r2
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	4a59      	ldr	r2, [pc, #356]	@ (800a448 <config_motors+0x320>)
 800a2e2:	4413      	add	r3, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fdd7 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800a2ea:	79ba      	ldrb	r2, [r7, #6]
 800a2ec:	4956      	ldr	r1, [pc, #344]	@ (800a448 <config_motors+0x320>)
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	440b      	add	r3, r1
 800a2f8:	339c      	adds	r3, #156	@ 0x9c
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a2fe:	79ba      	ldrb	r2, [r7, #6]
 800a300:	4951      	ldr	r1, [pc, #324]	@ (800a448 <config_motors+0x320>)
 800a302:	4613      	mov	r3, r2
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	440b      	add	r3, r1
 800a30c:	33c4      	adds	r3, #196	@ 0xc4
 800a30e:	4a4f      	ldr	r2, [pc, #316]	@ (800a44c <config_motors+0x324>)
 800a310:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a312:	79ba      	ldrb	r2, [r7, #6]
 800a314:	494c      	ldr	r1, [pc, #304]	@ (800a448 <config_motors+0x320>)
 800a316:	4613      	mov	r3, r2
 800a318:	011b      	lsls	r3, r3, #4
 800a31a:	1a9b      	subs	r3, r3, r2
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	440b      	add	r3, r1
 800a320:	33c0      	adds	r3, #192	@ 0xc0
 800a322:	4a4b      	ldr	r2, [pc, #300]	@ (800a450 <config_motors+0x328>)
 800a324:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a326:	79ba      	ldrb	r2, [r7, #6]
 800a328:	4947      	ldr	r1, [pc, #284]	@ (800a448 <config_motors+0x320>)
 800a32a:	4613      	mov	r3, r2
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	440b      	add	r3, r1
 800a334:	33d4      	adds	r3, #212	@ 0xd4
 800a336:	4a47      	ldr	r2, [pc, #284]	@ (800a454 <config_motors+0x32c>)
 800a338:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a33a:	79ba      	ldrb	r2, [r7, #6]
 800a33c:	4942      	ldr	r1, [pc, #264]	@ (800a448 <config_motors+0x320>)
 800a33e:	4613      	mov	r3, r2
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	440b      	add	r3, r1
 800a348:	3338      	adds	r3, #56	@ 0x38
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a350:	79ba      	ldrb	r2, [r7, #6]
 800a352:	493d      	ldr	r1, [pc, #244]	@ (800a448 <config_motors+0x320>)
 800a354:	4613      	mov	r3, r2
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	1a9b      	subs	r3, r3, r2
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	440b      	add	r3, r1
 800a35e:	333c      	adds	r3, #60	@ 0x3c
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a366:	79ba      	ldrb	r2, [r7, #6]
 800a368:	4937      	ldr	r1, [pc, #220]	@ (800a448 <config_motors+0x320>)
 800a36a:	4613      	mov	r3, r2
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	1a9b      	subs	r3, r3, r2
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	440b      	add	r3, r1
 800a374:	3340      	adds	r3, #64	@ 0x40
 800a376:	f04f 0200 	mov.w	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a37c:	79ba      	ldrb	r2, [r7, #6]
 800a37e:	4932      	ldr	r1, [pc, #200]	@ (800a448 <config_motors+0x320>)
 800a380:	4613      	mov	r3, r2
 800a382:	011b      	lsls	r3, r3, #4
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	440b      	add	r3, r1
 800a38a:	3350      	adds	r3, #80	@ 0x50
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a392:	79ba      	ldrb	r2, [r7, #6]
 800a394:	492c      	ldr	r1, [pc, #176]	@ (800a448 <config_motors+0x320>)
 800a396:	4613      	mov	r3, r2
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	440b      	add	r3, r1
 800a3a0:	3354      	adds	r3, #84	@ 0x54
 800a3a2:	f04f 0200 	mov.w	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 10;
 800a3a8:	79ba      	ldrb	r2, [r7, #6]
 800a3aa:	4927      	ldr	r1, [pc, #156]	@ (800a448 <config_motors+0x320>)
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	440b      	add	r3, r1
 800a3b6:	3330      	adds	r3, #48	@ 0x30
 800a3b8:	4a27      	ldr	r2, [pc, #156]	@ (800a458 <config_motors+0x330>)
 800a3ba:	601a      	str	r2, [r3, #0]
#endif
#ifdef FR_MOTOR_ID
	motor_id = FR_MOTOR_ID - 1;
 800a3bc:	2304      	movs	r3, #4
 800a3be:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800a3c0:	79ba      	ldrb	r2, [r7, #6]
 800a3c2:	4921      	ldr	r1, [pc, #132]	@ (800a448 <config_motors+0x320>)
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	1a9b      	subs	r3, r3, r2
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3302      	adds	r3, #2
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a3d4:	79ba      	ldrb	r2, [r7, #6]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	4a1a      	ldr	r2, [pc, #104]	@ (800a448 <config_motors+0x320>)
 800a3e0:	4413      	add	r3, r2
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fd58 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800a3e8:	79ba      	ldrb	r2, [r7, #6]
 800a3ea:	4917      	ldr	r1, [pc, #92]	@ (800a448 <config_motors+0x320>)
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	440b      	add	r3, r1
 800a3f6:	339c      	adds	r3, #156	@ 0x9c
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a3fc:	79ba      	ldrb	r2, [r7, #6]
 800a3fe:	4912      	ldr	r1, [pc, #72]	@ (800a448 <config_motors+0x320>)
 800a400:	4613      	mov	r3, r2
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	440b      	add	r3, r1
 800a40a:	33c4      	adds	r3, #196	@ 0xc4
 800a40c:	4a0f      	ldr	r2, [pc, #60]	@ (800a44c <config_motors+0x324>)
 800a40e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a410:	79ba      	ldrb	r2, [r7, #6]
 800a412:	490d      	ldr	r1, [pc, #52]	@ (800a448 <config_motors+0x320>)
 800a414:	4613      	mov	r3, r2
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	440b      	add	r3, r1
 800a41e:	33c0      	adds	r3, #192	@ 0xc0
 800a420:	4a0b      	ldr	r2, [pc, #44]	@ (800a450 <config_motors+0x328>)
 800a422:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a424:	79ba      	ldrb	r2, [r7, #6]
 800a426:	4908      	ldr	r1, [pc, #32]	@ (800a448 <config_motors+0x320>)
 800a428:	4613      	mov	r3, r2
 800a42a:	011b      	lsls	r3, r3, #4
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	440b      	add	r3, r1
 800a432:	3338      	adds	r3, #56	@ 0x38
 800a434:	f04f 0200 	mov.w	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a43a:	79ba      	ldrb	r2, [r7, #6]
 800a43c:	4902      	ldr	r1, [pc, #8]	@ (800a448 <config_motors+0x320>)
 800a43e:	4613      	mov	r3, r2
 800a440:	011b      	lsls	r3, r3, #4
 800a442:	1a9b      	subs	r3, r3, r2
 800a444:	011b      	lsls	r3, r3, #4
 800a446:	e009      	b.n	800a45c <config_motors+0x334>
 800a448:	20002220 	.word	0x20002220
 800a44c:	40c90fdb 	.word	0x40c90fdb
 800a450:	c0c90fdb 	.word	0xc0c90fdb
 800a454:	43eec2d1 	.word	0x43eec2d1
 800a458:	41200000 	.word	0x41200000
 800a45c:	440b      	add	r3, r1
 800a45e:	333c      	adds	r3, #60	@ 0x3c
 800a460:	f04f 0200 	mov.w	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a466:	79ba      	ldrb	r2, [r7, #6]
 800a468:	49c4      	ldr	r1, [pc, #784]	@ (800a77c <config_motors+0x654>)
 800a46a:	4613      	mov	r3, r2
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	440b      	add	r3, r1
 800a474:	3340      	adds	r3, #64	@ 0x40
 800a476:	f04f 0200 	mov.w	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a47c:	79ba      	ldrb	r2, [r7, #6]
 800a47e:	49bf      	ldr	r1, [pc, #764]	@ (800a77c <config_motors+0x654>)
 800a480:	4613      	mov	r3, r2
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	440b      	add	r3, r1
 800a48a:	33d4      	adds	r3, #212	@ 0xd4
 800a48c:	4abc      	ldr	r2, [pc, #752]	@ (800a780 <config_motors+0x658>)
 800a48e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a490:	79ba      	ldrb	r2, [r7, #6]
 800a492:	49ba      	ldr	r1, [pc, #744]	@ (800a77c <config_motors+0x654>)
 800a494:	4613      	mov	r3, r2
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	1a9b      	subs	r3, r3, r2
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	440b      	add	r3, r1
 800a49e:	3350      	adds	r3, #80	@ 0x50
 800a4a0:	f04f 0200 	mov.w	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a4a6:	79ba      	ldrb	r2, [r7, #6]
 800a4a8:	49b4      	ldr	r1, [pc, #720]	@ (800a77c <config_motors+0x654>)
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	011b      	lsls	r3, r3, #4
 800a4ae:	1a9b      	subs	r3, r3, r2
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	440b      	add	r3, r1
 800a4b4:	3354      	adds	r3, #84	@ 0x54
 800a4b6:	f04f 0200 	mov.w	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800a4bc:	79ba      	ldrb	r2, [r7, #6]
 800a4be:	49af      	ldr	r1, [pc, #700]	@ (800a77c <config_motors+0x654>)
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	1a9b      	subs	r3, r3, r2
 800a4c6:	011b      	lsls	r3, r3, #4
 800a4c8:	440b      	add	r3, r1
 800a4ca:	3330      	adds	r3, #48	@ 0x30
 800a4cc:	4aad      	ldr	r2, [pc, #692]	@ (800a784 <config_motors+0x65c>)
 800a4ce:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID - 1;
 800a4d0:	2305      	movs	r3, #5
 800a4d2:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800a4d4:	79ba      	ldrb	r2, [r7, #6]
 800a4d6:	49a9      	ldr	r1, [pc, #676]	@ (800a77c <config_motors+0x654>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	440b      	add	r3, r1
 800a4e2:	3302      	adds	r3, #2
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a4e8:	79ba      	ldrb	r2, [r7, #6]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	011b      	lsls	r3, r3, #4
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	4aa2      	ldr	r2, [pc, #648]	@ (800a77c <config_motors+0x654>)
 800a4f4:	4413      	add	r3, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fcce 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800a4fc:	79ba      	ldrb	r2, [r7, #6]
 800a4fe:	499f      	ldr	r1, [pc, #636]	@ (800a77c <config_motors+0x654>)
 800a500:	4613      	mov	r3, r2
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	1a9b      	subs	r3, r3, r2
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	440b      	add	r3, r1
 800a50a:	339c      	adds	r3, #156	@ 0x9c
 800a50c:	2200      	movs	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a510:	79ba      	ldrb	r2, [r7, #6]
 800a512:	499a      	ldr	r1, [pc, #616]	@ (800a77c <config_motors+0x654>)
 800a514:	4613      	mov	r3, r2
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	1a9b      	subs	r3, r3, r2
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	440b      	add	r3, r1
 800a51e:	33c4      	adds	r3, #196	@ 0xc4
 800a520:	4a99      	ldr	r2, [pc, #612]	@ (800a788 <config_motors+0x660>)
 800a522:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a524:	79ba      	ldrb	r2, [r7, #6]
 800a526:	4995      	ldr	r1, [pc, #596]	@ (800a77c <config_motors+0x654>)
 800a528:	4613      	mov	r3, r2
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	011b      	lsls	r3, r3, #4
 800a530:	440b      	add	r3, r1
 800a532:	33c0      	adds	r3, #192	@ 0xc0
 800a534:	4a95      	ldr	r2, [pc, #596]	@ (800a78c <config_motors+0x664>)
 800a536:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a538:	79ba      	ldrb	r2, [r7, #6]
 800a53a:	4990      	ldr	r1, [pc, #576]	@ (800a77c <config_motors+0x654>)
 800a53c:	4613      	mov	r3, r2
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	1a9b      	subs	r3, r3, r2
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	440b      	add	r3, r1
 800a546:	33d4      	adds	r3, #212	@ 0xd4
 800a548:	4a8d      	ldr	r2, [pc, #564]	@ (800a780 <config_motors+0x658>)
 800a54a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a54c:	79ba      	ldrb	r2, [r7, #6]
 800a54e:	498b      	ldr	r1, [pc, #556]	@ (800a77c <config_motors+0x654>)
 800a550:	4613      	mov	r3, r2
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	011b      	lsls	r3, r3, #4
 800a558:	440b      	add	r3, r1
 800a55a:	3338      	adds	r3, #56	@ 0x38
 800a55c:	f04f 0200 	mov.w	r2, #0
 800a560:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a562:	79ba      	ldrb	r2, [r7, #6]
 800a564:	4985      	ldr	r1, [pc, #532]	@ (800a77c <config_motors+0x654>)
 800a566:	4613      	mov	r3, r2
 800a568:	011b      	lsls	r3, r3, #4
 800a56a:	1a9b      	subs	r3, r3, r2
 800a56c:	011b      	lsls	r3, r3, #4
 800a56e:	440b      	add	r3, r1
 800a570:	333c      	adds	r3, #60	@ 0x3c
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a578:	79ba      	ldrb	r2, [r7, #6]
 800a57a:	4980      	ldr	r1, [pc, #512]	@ (800a77c <config_motors+0x654>)
 800a57c:	4613      	mov	r3, r2
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	440b      	add	r3, r1
 800a586:	3340      	adds	r3, #64	@ 0x40
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a58e:	79ba      	ldrb	r2, [r7, #6]
 800a590:	497a      	ldr	r1, [pc, #488]	@ (800a77c <config_motors+0x654>)
 800a592:	4613      	mov	r3, r2
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	1a9b      	subs	r3, r3, r2
 800a598:	011b      	lsls	r3, r3, #4
 800a59a:	440b      	add	r3, r1
 800a59c:	3350      	adds	r3, #80	@ 0x50
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a5a4:	79ba      	ldrb	r2, [r7, #6]
 800a5a6:	4975      	ldr	r1, [pc, #468]	@ (800a77c <config_motors+0x654>)
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	440b      	add	r3, r1
 800a5b2:	3354      	adds	r3, #84	@ 0x54
 800a5b4:	f04f 0200 	mov.w	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800a5ba:	79ba      	ldrb	r2, [r7, #6]
 800a5bc:	496f      	ldr	r1, [pc, #444]	@ (800a77c <config_motors+0x654>)
 800a5be:	4613      	mov	r3, r2
 800a5c0:	011b      	lsls	r3, r3, #4
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	011b      	lsls	r3, r3, #4
 800a5c6:	440b      	add	r3, r1
 800a5c8:	3330      	adds	r3, #48	@ 0x30
 800a5ca:	4a6e      	ldr	r2, [pc, #440]	@ (800a784 <config_motors+0x65c>)
 800a5cc:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 800a5ce:	2306      	movs	r3, #6
 800a5d0:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800a5d2:	79ba      	ldrb	r2, [r7, #6]
 800a5d4:	4969      	ldr	r1, [pc, #420]	@ (800a77c <config_motors+0x654>)
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	011b      	lsls	r3, r3, #4
 800a5de:	440b      	add	r3, r1
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a5e6:	79ba      	ldrb	r2, [r7, #6]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	4a62      	ldr	r2, [pc, #392]	@ (800a77c <config_motors+0x654>)
 800a5f2:	4413      	add	r3, r2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff fc4f 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800a5fa:	79ba      	ldrb	r2, [r7, #6]
 800a5fc:	495f      	ldr	r1, [pc, #380]	@ (800a77c <config_motors+0x654>)
 800a5fe:	4613      	mov	r3, r2
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	440b      	add	r3, r1
 800a608:	339c      	adds	r3, #156	@ 0x9c
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ang = 0;
 800a60e:	79ba      	ldrb	r2, [r7, #6]
 800a610:	495a      	ldr	r1, [pc, #360]	@ (800a77c <config_motors+0x654>)
 800a612:	4613      	mov	r3, r2
 800a614:	011b      	lsls	r3, r3, #4
 800a616:	1a9b      	subs	r3, r3, r2
 800a618:	011b      	lsls	r3, r3, #4
 800a61a:	440b      	add	r3, r1
 800a61c:	33b8      	adds	r3, #184	@ 0xb8
 800a61e:	f04f 0200 	mov.w	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.min_ang = 0;
 800a624:	79ba      	ldrb	r2, [r7, #6]
 800a626:	4955      	ldr	r1, [pc, #340]	@ (800a77c <config_motors+0x654>)
 800a628:	4613      	mov	r3, r2
 800a62a:	011b      	lsls	r3, r3, #4
 800a62c:	1a9b      	subs	r3, r3, r2
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	440b      	add	r3, r1
 800a632:	33b4      	adds	r3, #180	@ 0xb4
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a63a:	79ba      	ldrb	r2, [r7, #6]
 800a63c:	494f      	ldr	r1, [pc, #316]	@ (800a77c <config_motors+0x654>)
 800a63e:	4613      	mov	r3, r2
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	1a9b      	subs	r3, r3, r2
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	440b      	add	r3, r1
 800a648:	33c4      	adds	r3, #196	@ 0xc4
 800a64a:	4a4f      	ldr	r2, [pc, #316]	@ (800a788 <config_motors+0x660>)
 800a64c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a64e:	79ba      	ldrb	r2, [r7, #6]
 800a650:	494a      	ldr	r1, [pc, #296]	@ (800a77c <config_motors+0x654>)
 800a652:	4613      	mov	r3, r2
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	011b      	lsls	r3, r3, #4
 800a65a:	440b      	add	r3, r1
 800a65c:	33c0      	adds	r3, #192	@ 0xc0
 800a65e:	4a4b      	ldr	r2, [pc, #300]	@ (800a78c <config_motors+0x664>)
 800a660:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a662:	79ba      	ldrb	r2, [r7, #6]
 800a664:	4945      	ldr	r1, [pc, #276]	@ (800a77c <config_motors+0x654>)
 800a666:	4613      	mov	r3, r2
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	440b      	add	r3, r1
 800a670:	33d4      	adds	r3, #212	@ 0xd4
 800a672:	4a43      	ldr	r2, [pc, #268]	@ (800a780 <config_motors+0x658>)
 800a674:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = 0;
 800a676:	79ba      	ldrb	r2, [r7, #6]
 800a678:	4940      	ldr	r1, [pc, #256]	@ (800a77c <config_motors+0x654>)
 800a67a:	4613      	mov	r3, r2
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	1a9b      	subs	r3, r3, r2
 800a680:	011b      	lsls	r3, r3, #4
 800a682:	440b      	add	r3, r1
 800a684:	3368      	adds	r3, #104	@ 0x68
 800a686:	f04f 0200 	mov.w	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = 0;
 800a68c:	79ba      	ldrb	r2, [r7, #6]
 800a68e:	493b      	ldr	r1, [pc, #236]	@ (800a77c <config_motors+0x654>)
 800a690:	4613      	mov	r3, r2
 800a692:	011b      	lsls	r3, r3, #4
 800a694:	1a9b      	subs	r3, r3, r2
 800a696:	011b      	lsls	r3, r3, #4
 800a698:	440b      	add	r3, r1
 800a69a:	336c      	adds	r3, #108	@ 0x6c
 800a69c:	f04f 0200 	mov.w	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = 0;
 800a6a2:	79ba      	ldrb	r2, [r7, #6]
 800a6a4:	4935      	ldr	r1, [pc, #212]	@ (800a77c <config_motors+0x654>)
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	1a9b      	subs	r3, r3, r2
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3370      	adds	r3, #112	@ 0x70
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = 0;
 800a6b8:	79ba      	ldrb	r2, [r7, #6]
 800a6ba:	4930      	ldr	r1, [pc, #192]	@ (800a77c <config_motors+0x654>)
 800a6bc:	4613      	mov	r3, r2
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	1a9b      	subs	r3, r3, r2
 800a6c2:	011b      	lsls	r3, r3, #4
 800a6c4:	440b      	add	r3, r1
 800a6c6:	3380      	adds	r3, #128	@ 0x80
 800a6c8:	f04f 0200 	mov.w	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = 0;
 800a6ce:	79ba      	ldrb	r2, [r7, #6]
 800a6d0:	492a      	ldr	r1, [pc, #168]	@ (800a77c <config_motors+0x654>)
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	011b      	lsls	r3, r3, #4
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	440b      	add	r3, r1
 800a6dc:	3384      	adds	r3, #132	@ 0x84
 800a6de:	f04f 0200 	mov.w	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a6e4:	79ba      	ldrb	r2, [r7, #6]
 800a6e6:	4925      	ldr	r1, [pc, #148]	@ (800a77c <config_motors+0x654>)
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	011b      	lsls	r3, r3, #4
 800a6ec:	1a9b      	subs	r3, r3, r2
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	440b      	add	r3, r1
 800a6f2:	3338      	adds	r3, #56	@ 0x38
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a6fa:	79ba      	ldrb	r2, [r7, #6]
 800a6fc:	491f      	ldr	r1, [pc, #124]	@ (800a77c <config_motors+0x654>)
 800a6fe:	4613      	mov	r3, r2
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	011b      	lsls	r3, r3, #4
 800a706:	440b      	add	r3, r1
 800a708:	333c      	adds	r3, #60	@ 0x3c
 800a70a:	f04f 0200 	mov.w	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a710:	79ba      	ldrb	r2, [r7, #6]
 800a712:	491a      	ldr	r1, [pc, #104]	@ (800a77c <config_motors+0x654>)
 800a714:	4613      	mov	r3, r2
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	011b      	lsls	r3, r3, #4
 800a71c:	440b      	add	r3, r1
 800a71e:	3340      	adds	r3, #64	@ 0x40
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a726:	79ba      	ldrb	r2, [r7, #6]
 800a728:	4914      	ldr	r1, [pc, #80]	@ (800a77c <config_motors+0x654>)
 800a72a:	4613      	mov	r3, r2
 800a72c:	011b      	lsls	r3, r3, #4
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	440b      	add	r3, r1
 800a734:	3350      	adds	r3, #80	@ 0x50
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a73c:	79ba      	ldrb	r2, [r7, #6]
 800a73e:	490f      	ldr	r1, [pc, #60]	@ (800a77c <config_motors+0x654>)
 800a740:	4613      	mov	r3, r2
 800a742:	011b      	lsls	r3, r3, #4
 800a744:	1a9b      	subs	r3, r3, r2
 800a746:	011b      	lsls	r3, r3, #4
 800a748:	440b      	add	r3, r1
 800a74a:	3354      	adds	r3, #84	@ 0x54
 800a74c:	f04f 0200 	mov.w	r2, #0
 800a750:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800a752:	79ba      	ldrb	r2, [r7, #6]
 800a754:	4909      	ldr	r1, [pc, #36]	@ (800a77c <config_motors+0x654>)
 800a756:	4613      	mov	r3, r2
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	440b      	add	r3, r1
 800a760:	3330      	adds	r3, #48	@ 0x30
 800a762:	4a08      	ldr	r2, [pc, #32]	@ (800a784 <config_motors+0x65c>)
 800a764:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 800a766:	2307      	movs	r3, #7
 800a768:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800a76a:	79ba      	ldrb	r2, [r7, #6]
 800a76c:	4903      	ldr	r1, [pc, #12]	@ (800a77c <config_motors+0x654>)
 800a76e:	4613      	mov	r3, r2
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	1a9b      	subs	r3, r3, r2
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	440b      	add	r3, r1
 800a778:	3302      	adds	r3, #2
 800a77a:	e009      	b.n	800a790 <config_motors+0x668>
 800a77c:	20002220 	.word	0x20002220
 800a780:	43eec2d1 	.word	0x43eec2d1
 800a784:	447a0000 	.word	0x447a0000
 800a788:	40c90fdb 	.word	0x40c90fdb
 800a78c:	c0c90fdb 	.word	0xc0c90fdb
 800a790:	2201      	movs	r2, #1
 800a792:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a794:	79ba      	ldrb	r2, [r7, #6]
 800a796:	4613      	mov	r3, r2
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	1a9b      	subs	r3, r3, r2
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	4ac3      	ldr	r2, [pc, #780]	@ (800aaac <config_motors+0x984>)
 800a7a0:	4413      	add	r3, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff fb78 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800a7a8:	79ba      	ldrb	r2, [r7, #6]
 800a7aa:	49c0      	ldr	r1, [pc, #768]	@ (800aaac <config_motors+0x984>)
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	011b      	lsls	r3, r3, #4
 800a7b0:	1a9b      	subs	r3, r3, r2
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	440b      	add	r3, r1
 800a7b6:	339c      	adds	r3, #156	@ 0x9c
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ang = 0;
 800a7bc:	79ba      	ldrb	r2, [r7, #6]
 800a7be:	49bb      	ldr	r1, [pc, #748]	@ (800aaac <config_motors+0x984>)
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	440b      	add	r3, r1
 800a7ca:	33b8      	adds	r3, #184	@ 0xb8
 800a7cc:	f04f 0200 	mov.w	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.min_ang = 0;
 800a7d2:	79ba      	ldrb	r2, [r7, #6]
 800a7d4:	49b5      	ldr	r1, [pc, #724]	@ (800aaac <config_motors+0x984>)
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	011b      	lsls	r3, r3, #4
 800a7da:	1a9b      	subs	r3, r3, r2
 800a7dc:	011b      	lsls	r3, r3, #4
 800a7de:	440b      	add	r3, r1
 800a7e0:	33b4      	adds	r3, #180	@ 0xb4
 800a7e2:	f04f 0200 	mov.w	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a7e8:	79ba      	ldrb	r2, [r7, #6]
 800a7ea:	49b0      	ldr	r1, [pc, #704]	@ (800aaac <config_motors+0x984>)
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	011b      	lsls	r3, r3, #4
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	440b      	add	r3, r1
 800a7f6:	33c4      	adds	r3, #196	@ 0xc4
 800a7f8:	4aad      	ldr	r2, [pc, #692]	@ (800aab0 <config_motors+0x988>)
 800a7fa:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a7fc:	79ba      	ldrb	r2, [r7, #6]
 800a7fe:	49ab      	ldr	r1, [pc, #684]	@ (800aaac <config_motors+0x984>)
 800a800:	4613      	mov	r3, r2
 800a802:	011b      	lsls	r3, r3, #4
 800a804:	1a9b      	subs	r3, r3, r2
 800a806:	011b      	lsls	r3, r3, #4
 800a808:	440b      	add	r3, r1
 800a80a:	33c0      	adds	r3, #192	@ 0xc0
 800a80c:	4aa9      	ldr	r2, [pc, #676]	@ (800aab4 <config_motors+0x98c>)
 800a80e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a810:	79ba      	ldrb	r2, [r7, #6]
 800a812:	49a6      	ldr	r1, [pc, #664]	@ (800aaac <config_motors+0x984>)
 800a814:	4613      	mov	r3, r2
 800a816:	011b      	lsls	r3, r3, #4
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	440b      	add	r3, r1
 800a81e:	33d4      	adds	r3, #212	@ 0xd4
 800a820:	4aa5      	ldr	r2, [pc, #660]	@ (800aab8 <config_motors+0x990>)
 800a822:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = 0;
 800a824:	79ba      	ldrb	r2, [r7, #6]
 800a826:	49a1      	ldr	r1, [pc, #644]	@ (800aaac <config_motors+0x984>)
 800a828:	4613      	mov	r3, r2
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	440b      	add	r3, r1
 800a832:	3368      	adds	r3, #104	@ 0x68
 800a834:	f04f 0200 	mov.w	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = 0;
 800a83a:	79ba      	ldrb	r2, [r7, #6]
 800a83c:	499b      	ldr	r1, [pc, #620]	@ (800aaac <config_motors+0x984>)
 800a83e:	4613      	mov	r3, r2
 800a840:	011b      	lsls	r3, r3, #4
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	440b      	add	r3, r1
 800a848:	336c      	adds	r3, #108	@ 0x6c
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = 0;
 800a850:	79ba      	ldrb	r2, [r7, #6]
 800a852:	4996      	ldr	r1, [pc, #600]	@ (800aaac <config_motors+0x984>)
 800a854:	4613      	mov	r3, r2
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	440b      	add	r3, r1
 800a85e:	3370      	adds	r3, #112	@ 0x70
 800a860:	f04f 0200 	mov.w	r2, #0
 800a864:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = 0;
 800a866:	79ba      	ldrb	r2, [r7, #6]
 800a868:	4990      	ldr	r1, [pc, #576]	@ (800aaac <config_motors+0x984>)
 800a86a:	4613      	mov	r3, r2
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	440b      	add	r3, r1
 800a874:	3380      	adds	r3, #128	@ 0x80
 800a876:	f04f 0200 	mov.w	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = 0;
 800a87c:	79ba      	ldrb	r2, [r7, #6]
 800a87e:	498b      	ldr	r1, [pc, #556]	@ (800aaac <config_motors+0x984>)
 800a880:	4613      	mov	r3, r2
 800a882:	011b      	lsls	r3, r3, #4
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	011b      	lsls	r3, r3, #4
 800a888:	440b      	add	r3, r1
 800a88a:	3384      	adds	r3, #132	@ 0x84
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a892:	79ba      	ldrb	r2, [r7, #6]
 800a894:	4985      	ldr	r1, [pc, #532]	@ (800aaac <config_motors+0x984>)
 800a896:	4613      	mov	r3, r2
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	1a9b      	subs	r3, r3, r2
 800a89c:	011b      	lsls	r3, r3, #4
 800a89e:	440b      	add	r3, r1
 800a8a0:	3338      	adds	r3, #56	@ 0x38
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a8a8:	79ba      	ldrb	r2, [r7, #6]
 800a8aa:	4980      	ldr	r1, [pc, #512]	@ (800aaac <config_motors+0x984>)
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	011b      	lsls	r3, r3, #4
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	440b      	add	r3, r1
 800a8b6:	333c      	adds	r3, #60	@ 0x3c
 800a8b8:	f04f 0200 	mov.w	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a8be:	79ba      	ldrb	r2, [r7, #6]
 800a8c0:	497a      	ldr	r1, [pc, #488]	@ (800aaac <config_motors+0x984>)
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	011b      	lsls	r3, r3, #4
 800a8ca:	440b      	add	r3, r1
 800a8cc:	3340      	adds	r3, #64	@ 0x40
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a8d4:	79ba      	ldrb	r2, [r7, #6]
 800a8d6:	4975      	ldr	r1, [pc, #468]	@ (800aaac <config_motors+0x984>)
 800a8d8:	4613      	mov	r3, r2
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	1a9b      	subs	r3, r3, r2
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	440b      	add	r3, r1
 800a8e2:	3350      	adds	r3, #80	@ 0x50
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a8ea:	79ba      	ldrb	r2, [r7, #6]
 800a8ec:	496f      	ldr	r1, [pc, #444]	@ (800aaac <config_motors+0x984>)
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3354      	adds	r3, #84	@ 0x54
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800a900:	79ba      	ldrb	r2, [r7, #6]
 800a902:	496a      	ldr	r1, [pc, #424]	@ (800aaac <config_motors+0x984>)
 800a904:	4613      	mov	r3, r2
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	440b      	add	r3, r1
 800a90e:	3330      	adds	r3, #48	@ 0x30
 800a910:	4a6a      	ldr	r2, [pc, #424]	@ (800aabc <config_motors+0x994>)
 800a912:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 800a914:	2310      	movs	r3, #16
 800a916:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 800a918:	79ba      	ldrb	r2, [r7, #6]
 800a91a:	4964      	ldr	r1, [pc, #400]	@ (800aaac <config_motors+0x984>)
 800a91c:	4613      	mov	r3, r2
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	1a9b      	subs	r3, r3, r2
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	440b      	add	r3, r1
 800a926:	3302      	adds	r3, #2
 800a928:	2204      	movs	r2, #4
 800a92a:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800a92c:	79ba      	ldrb	r2, [r7, #6]
 800a92e:	4613      	mov	r3, r2
 800a930:	011b      	lsls	r3, r3, #4
 800a932:	1a9b      	subs	r3, r3, r2
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	4a5d      	ldr	r2, [pc, #372]	@ (800aaac <config_motors+0x984>)
 800a938:	4413      	add	r3, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff faac 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800a940:	79ba      	ldrb	r2, [r7, #6]
 800a942:	495a      	ldr	r1, [pc, #360]	@ (800aaac <config_motors+0x984>)
 800a944:	4613      	mov	r3, r2
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	1a9b      	subs	r3, r3, r2
 800a94a:	011b      	lsls	r3, r3, #4
 800a94c:	440b      	add	r3, r1
 800a94e:	33c8      	adds	r3, #200	@ 0xc8
 800a950:	4a5b      	ldr	r2, [pc, #364]	@ (800aac0 <config_motors+0x998>)
 800a952:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800a954:	79ba      	ldrb	r2, [r7, #6]
 800a956:	4955      	ldr	r1, [pc, #340]	@ (800aaac <config_motors+0x984>)
 800a958:	4613      	mov	r3, r2
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	1a9b      	subs	r3, r3, r2
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	440b      	add	r3, r1
 800a962:	338c      	adds	r3, #140	@ 0x8c
 800a964:	4a57      	ldr	r2, [pc, #348]	@ (800aac4 <config_motors+0x99c>)
 800a966:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800a968:	79ba      	ldrb	r2, [r7, #6]
 800a96a:	4950      	ldr	r1, [pc, #320]	@ (800aaac <config_motors+0x984>)
 800a96c:	4613      	mov	r3, r2
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	440b      	add	r3, r1
 800a976:	3338      	adds	r3, #56	@ 0x38
 800a978:	4a53      	ldr	r2, [pc, #332]	@ (800aac8 <config_motors+0x9a0>)
 800a97a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800a97c:	79ba      	ldrb	r2, [r7, #6]
 800a97e:	494b      	ldr	r1, [pc, #300]	@ (800aaac <config_motors+0x984>)
 800a980:	4613      	mov	r3, r2
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	011b      	lsls	r3, r3, #4
 800a988:	440b      	add	r3, r1
 800a98a:	333c      	adds	r3, #60	@ 0x3c
 800a98c:	4a4f      	ldr	r2, [pc, #316]	@ (800aacc <config_motors+0x9a4>)
 800a98e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800a990:	79ba      	ldrb	r2, [r7, #6]
 800a992:	4946      	ldr	r1, [pc, #280]	@ (800aaac <config_motors+0x984>)
 800a994:	4613      	mov	r3, r2
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	1a9b      	subs	r3, r3, r2
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	440b      	add	r3, r1
 800a99e:	3340      	adds	r3, #64	@ 0x40
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800a9a6:	79ba      	ldrb	r2, [r7, #6]
 800a9a8:	4940      	ldr	r1, [pc, #256]	@ (800aaac <config_motors+0x984>)
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	011b      	lsls	r3, r3, #4
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	011b      	lsls	r3, r3, #4
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3350      	adds	r3, #80	@ 0x50
 800a9b6:	4a46      	ldr	r2, [pc, #280]	@ (800aad0 <config_motors+0x9a8>)
 800a9b8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800a9ba:	79ba      	ldrb	r2, [r7, #6]
 800a9bc:	493b      	ldr	r1, [pc, #236]	@ (800aaac <config_motors+0x984>)
 800a9be:	4613      	mov	r3, r2
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	1a9b      	subs	r3, r3, r2
 800a9c4:	011b      	lsls	r3, r3, #4
 800a9c6:	440b      	add	r3, r1
 800a9c8:	3354      	adds	r3, #84	@ 0x54
 800a9ca:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800a9ce:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 800a9d0:	2311      	movs	r3, #17
 800a9d2:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 800a9d4:	79ba      	ldrb	r2, [r7, #6]
 800a9d6:	4935      	ldr	r1, [pc, #212]	@ (800aaac <config_motors+0x984>)
 800a9d8:	4613      	mov	r3, r2
 800a9da:	011b      	lsls	r3, r3, #4
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	011b      	lsls	r3, r3, #4
 800a9e0:	440b      	add	r3, r1
 800a9e2:	3302      	adds	r3, #2
 800a9e4:	2204      	movs	r2, #4
 800a9e6:	701a      	strb	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800a9e8:	79ba      	ldrb	r2, [r7, #6]
 800a9ea:	4930      	ldr	r1, [pc, #192]	@ (800aaac <config_motors+0x984>)
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	1a9b      	subs	r3, r3, r2
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	440b      	add	r3, r1
 800a9f6:	338c      	adds	r3, #140	@ 0x8c
 800a9f8:	4a32      	ldr	r2, [pc, #200]	@ (800aac4 <config_motors+0x99c>)
 800a9fa:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800a9fc:	79ba      	ldrb	r2, [r7, #6]
 800a9fe:	492b      	ldr	r1, [pc, #172]	@ (800aaac <config_motors+0x984>)
 800aa00:	4613      	mov	r3, r2
 800aa02:	011b      	lsls	r3, r3, #4
 800aa04:	1a9b      	subs	r3, r3, r2
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	440b      	add	r3, r1
 800aa0a:	3338      	adds	r3, #56	@ 0x38
 800aa0c:	4a2e      	ldr	r2, [pc, #184]	@ (800aac8 <config_motors+0x9a0>)
 800aa0e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800aa10:	79ba      	ldrb	r2, [r7, #6]
 800aa12:	4926      	ldr	r1, [pc, #152]	@ (800aaac <config_motors+0x984>)
 800aa14:	4613      	mov	r3, r2
 800aa16:	011b      	lsls	r3, r3, #4
 800aa18:	1a9b      	subs	r3, r3, r2
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	440b      	add	r3, r1
 800aa1e:	333c      	adds	r3, #60	@ 0x3c
 800aa20:	4a2a      	ldr	r2, [pc, #168]	@ (800aacc <config_motors+0x9a4>)
 800aa22:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800aa24:	79ba      	ldrb	r2, [r7, #6]
 800aa26:	4921      	ldr	r1, [pc, #132]	@ (800aaac <config_motors+0x984>)
 800aa28:	4613      	mov	r3, r2
 800aa2a:	011b      	lsls	r3, r3, #4
 800aa2c:	1a9b      	subs	r3, r3, r2
 800aa2e:	011b      	lsls	r3, r3, #4
 800aa30:	440b      	add	r3, r1
 800aa32:	3340      	adds	r3, #64	@ 0x40
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800aa3a:	79ba      	ldrb	r2, [r7, #6]
 800aa3c:	491b      	ldr	r1, [pc, #108]	@ (800aaac <config_motors+0x984>)
 800aa3e:	4613      	mov	r3, r2
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	440b      	add	r3, r1
 800aa48:	3350      	adds	r3, #80	@ 0x50
 800aa4a:	4a21      	ldr	r2, [pc, #132]	@ (800aad0 <config_motors+0x9a8>)
 800aa4c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800aa4e:	79ba      	ldrb	r2, [r7, #6]
 800aa50:	4916      	ldr	r1, [pc, #88]	@ (800aaac <config_motors+0x984>)
 800aa52:	4613      	mov	r3, r2
 800aa54:	011b      	lsls	r3, r3, #4
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3354      	adds	r3, #84	@ 0x54
 800aa5e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800aa62:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800aa64:	79ba      	ldrb	r2, [r7, #6]
 800aa66:	4911      	ldr	r1, [pc, #68]	@ (800aaac <config_motors+0x984>)
 800aa68:	4613      	mov	r3, r2
 800aa6a:	011b      	lsls	r3, r3, #4
 800aa6c:	1a9b      	subs	r3, r3, r2
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	440b      	add	r3, r1
 800aa72:	335c      	adds	r3, #92	@ 0x5c
 800aa74:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800aa78:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 800aa7a:	2309      	movs	r3, #9
 800aa7c:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	g_can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	g_can_motors[motor_id].motor_type = TYPE_M2006;
 800aa7e:	79ba      	ldrb	r2, [r7, #6]
 800aa80:	490a      	ldr	r1, [pc, #40]	@ (800aaac <config_motors+0x984>)
 800aa82:	4613      	mov	r3, r2
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	1a9b      	subs	r3, r3, r2
 800aa88:	011b      	lsls	r3, r3, #4
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3302      	adds	r3, #2
 800aa8e:	2202      	movs	r2, #2
 800aa90:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&g_can_motors[motor_id]);
 800aa92:	79ba      	ldrb	r2, [r7, #6]
 800aa94:	4613      	mov	r3, r2
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	1a9b      	subs	r3, r3, r2
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	4a03      	ldr	r2, [pc, #12]	@ (800aaac <config_motors+0x984>)
 800aa9e:	4413      	add	r3, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff f9f9 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.phy_max_ang = PI;
 800aaa6:	79ba      	ldrb	r2, [r7, #6]
 800aaa8:	e014      	b.n	800aad4 <config_motors+0x9ac>
 800aaaa:	bf00      	nop
 800aaac:	20002220 	.word	0x20002220
 800aab0:	40c90fdb 	.word	0x40c90fdb
 800aab4:	c0c90fdb 	.word	0xc0c90fdb
 800aab8:	43eec2d1 	.word	0x43eec2d1
 800aabc:	447a0000 	.word	0x447a0000
 800aac0:	4199999a 	.word	0x4199999a
 800aac4:	460fc000 	.word	0x460fc000
 800aac8:	40a00000 	.word	0x40a00000
 800aacc:	3b03126f 	.word	0x3b03126f
 800aad0:	461c4000 	.word	0x461c4000
 800aad4:	49c0      	ldr	r1, [pc, #768]	@ (800add8 <config_motors+0xcb0>)
 800aad6:	4613      	mov	r3, r2
 800aad8:	011b      	lsls	r3, r3, #4
 800aada:	1a9b      	subs	r3, r3, r2
 800aadc:	011b      	lsls	r3, r3, #4
 800aade:	440b      	add	r3, r1
 800aae0:	33c4      	adds	r3, #196	@ 0xc4
 800aae2:	4abe      	ldr	r2, [pc, #760]	@ (800addc <config_motors+0xcb4>)
 800aae4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -PI;
 800aae6:	79ba      	ldrb	r2, [r7, #6]
 800aae8:	49bb      	ldr	r1, [pc, #748]	@ (800add8 <config_motors+0xcb0>)
 800aaea:	4613      	mov	r3, r2
 800aaec:	011b      	lsls	r3, r3, #4
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	011b      	lsls	r3, r3, #4
 800aaf2:	440b      	add	r3, r1
 800aaf4:	33c0      	adds	r3, #192	@ 0xc0
 800aaf6:	4aba      	ldr	r2, [pc, #744]	@ (800ade0 <config_motors+0xcb8>)
 800aaf8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 800aafa:	79ba      	ldrb	r2, [r7, #6]
 800aafc:	49b6      	ldr	r1, [pc, #728]	@ (800add8 <config_motors+0xcb0>)
 800aafe:	4613      	mov	r3, r2
 800ab00:	011b      	lsls	r3, r3, #4
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	440b      	add	r3, r1
 800ab08:	33d4      	adds	r3, #212	@ 0xd4
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 800ab10:	79ba      	ldrb	r2, [r7, #6]
 800ab12:	49b1      	ldr	r1, [pc, #708]	@ (800add8 <config_motors+0xcb0>)
 800ab14:	4613      	mov	r3, r2
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	1a9b      	subs	r3, r3, r2
 800ab1a:	011b      	lsls	r3, r3, #4
 800ab1c:	440b      	add	r3, r1
 800ab1e:	3368      	adds	r3, #104	@ 0x68
 800ab20:	4ab0      	ldr	r2, [pc, #704]	@ (800ade4 <config_motors+0xcbc>)
 800ab22:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 800ab24:	79ba      	ldrb	r2, [r7, #6]
 800ab26:	49ac      	ldr	r1, [pc, #688]	@ (800add8 <config_motors+0xcb0>)
 800ab28:	4613      	mov	r3, r2
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	1a9b      	subs	r3, r3, r2
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	440b      	add	r3, r1
 800ab32:	336c      	adds	r3, #108	@ 0x6c
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 800ab3a:	79ba      	ldrb	r2, [r7, #6]
 800ab3c:	49a6      	ldr	r1, [pc, #664]	@ (800add8 <config_motors+0xcb0>)
 800ab3e:	4613      	mov	r3, r2
 800ab40:	011b      	lsls	r3, r3, #4
 800ab42:	1a9b      	subs	r3, r3, r2
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	440b      	add	r3, r1
 800ab48:	3370      	adds	r3, #112	@ 0x70
 800ab4a:	f04f 0200 	mov.w	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 800ab50:	79ba      	ldrb	r2, [r7, #6]
 800ab52:	49a1      	ldr	r1, [pc, #644]	@ (800add8 <config_motors+0xcb0>)
 800ab54:	4613      	mov	r3, r2
 800ab56:	011b      	lsls	r3, r3, #4
 800ab58:	1a9b      	subs	r3, r3, r2
 800ab5a:	011b      	lsls	r3, r3, #4
 800ab5c:	440b      	add	r3, r1
 800ab5e:	3380      	adds	r3, #128	@ 0x80
 800ab60:	f04f 0200 	mov.w	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 800ab66:	79ba      	ldrb	r2, [r7, #6]
 800ab68:	499b      	ldr	r1, [pc, #620]	@ (800add8 <config_motors+0xcb0>)
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	011b      	lsls	r3, r3, #4
 800ab6e:	1a9b      	subs	r3, r3, r2
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	440b      	add	r3, r1
 800ab74:	3384      	adds	r3, #132	@ 0x84
 800ab76:	4a9c      	ldr	r2, [pc, #624]	@ (800ade8 <config_motors+0xcc0>)
 800ab78:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 800ab7a:	79ba      	ldrb	r2, [r7, #6]
 800ab7c:	4996      	ldr	r1, [pc, #600]	@ (800add8 <config_motors+0xcb0>)
 800ab7e:	4613      	mov	r3, r2
 800ab80:	011b      	lsls	r3, r3, #4
 800ab82:	1a9b      	subs	r3, r3, r2
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	440b      	add	r3, r1
 800ab88:	3338      	adds	r3, #56	@ 0x38
 800ab8a:	4a98      	ldr	r2, [pc, #608]	@ (800adec <config_motors+0xcc4>)
 800ab8c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 800ab8e:	79ba      	ldrb	r2, [r7, #6]
 800ab90:	4991      	ldr	r1, [pc, #580]	@ (800add8 <config_motors+0xcb0>)
 800ab92:	4613      	mov	r3, r2
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	440b      	add	r3, r1
 800ab9c:	333c      	adds	r3, #60	@ 0x3c
 800ab9e:	4a94      	ldr	r2, [pc, #592]	@ (800adf0 <config_motors+0xcc8>)
 800aba0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 800aba2:	79ba      	ldrb	r2, [r7, #6]
 800aba4:	498c      	ldr	r1, [pc, #560]	@ (800add8 <config_motors+0xcb0>)
 800aba6:	4613      	mov	r3, r2
 800aba8:	011b      	lsls	r3, r3, #4
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	440b      	add	r3, r1
 800abb0:	3340      	adds	r3, #64	@ 0x40
 800abb2:	4a90      	ldr	r2, [pc, #576]	@ (800adf4 <config_motors+0xccc>)
 800abb4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 800abb6:	79ba      	ldrb	r2, [r7, #6]
 800abb8:	4987      	ldr	r1, [pc, #540]	@ (800add8 <config_motors+0xcb0>)
 800abba:	4613      	mov	r3, r2
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	440b      	add	r3, r1
 800abc4:	3350      	adds	r3, #80	@ 0x50
 800abc6:	4a8c      	ldr	r2, [pc, #560]	@ (800adf8 <config_motors+0xcd0>)
 800abc8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 800abca:	79ba      	ldrb	r2, [r7, #6]
 800abcc:	4982      	ldr	r1, [pc, #520]	@ (800add8 <config_motors+0xcb0>)
 800abce:	4613      	mov	r3, r2
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	1a9b      	subs	r3, r3, r2
 800abd4:	011b      	lsls	r3, r3, #4
 800abd6:	440b      	add	r3, r1
 800abd8:	3354      	adds	r3, #84	@ 0x54
 800abda:	4a87      	ldr	r2, [pc, #540]	@ (800adf8 <config_motors+0xcd0>)
 800abdc:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID - 1;
 800abde:	2312      	movs	r3, #18
 800abe0:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800abe2:	79ba      	ldrb	r2, [r7, #6]
 800abe4:	497c      	ldr	r1, [pc, #496]	@ (800add8 <config_motors+0xcb0>)
 800abe6:	4613      	mov	r3, r2
 800abe8:	011b      	lsls	r3, r3, #4
 800abea:	1a9b      	subs	r3, r3, r2
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	440b      	add	r3, r1
 800abf0:	3302      	adds	r3, #2
 800abf2:	2201      	movs	r2, #1
 800abf4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800abf6:	79ba      	ldrb	r2, [r7, #6]
 800abf8:	4613      	mov	r3, r2
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	1a9b      	subs	r3, r3, r2
 800abfe:	011b      	lsls	r3, r3, #4
 800ac00:	4a75      	ldr	r2, [pc, #468]	@ (800add8 <config_motors+0xcb0>)
 800ac02:	4413      	add	r3, r2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff f947 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = PITCH_CENTER;
 800ac0a:	79ba      	ldrb	r2, [r7, #6]
 800ac0c:	4972      	ldr	r1, [pc, #456]	@ (800add8 <config_motors+0xcb0>)
 800ac0e:	4613      	mov	r3, r2
 800ac10:	011b      	lsls	r3, r3, #4
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	440b      	add	r3, r1
 800ac18:	339c      	adds	r3, #156	@ 0x9c
 800ac1a:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 800ac1e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = PITCH_MAX_ANG;
 800ac20:	79ba      	ldrb	r2, [r7, #6]
 800ac22:	496d      	ldr	r1, [pc, #436]	@ (800add8 <config_motors+0xcb0>)
 800ac24:	4613      	mov	r3, r2
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	440b      	add	r3, r1
 800ac2e:	33c4      	adds	r3, #196	@ 0xc4
 800ac30:	4a72      	ldr	r2, [pc, #456]	@ (800adfc <config_motors+0xcd4>)
 800ac32:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = PITCH_MIN_ANG;
 800ac34:	79ba      	ldrb	r2, [r7, #6]
 800ac36:	4968      	ldr	r1, [pc, #416]	@ (800add8 <config_motors+0xcb0>)
 800ac38:	4613      	mov	r3, r2
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	1a9b      	subs	r3, r3, r2
 800ac3e:	011b      	lsls	r3, r3, #4
 800ac40:	440b      	add	r3, r1
 800ac42:	33c0      	adds	r3, #192	@ 0xc0
 800ac44:	4a6e      	ldr	r2, [pc, #440]	@ (800ae00 <config_motors+0xcd8>)
 800ac46:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 800ac48:	79ba      	ldrb	r2, [r7, #6]
 800ac4a:	4963      	ldr	r1, [pc, #396]	@ (800add8 <config_motors+0xcb0>)
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	1a9b      	subs	r3, r3, r2
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	440b      	add	r3, r1
 800ac56:	33d4      	adds	r3, #212	@ 0xd4
 800ac58:	f04f 0200 	mov.w	r2, #0
 800ac5c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800ac5e:	79ba      	ldrb	r2, [r7, #6]
 800ac60:	495d      	ldr	r1, [pc, #372]	@ (800add8 <config_motors+0xcb0>)
 800ac62:	4613      	mov	r3, r2
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	440b      	add	r3, r1
 800ac6c:	3368      	adds	r3, #104	@ 0x68
 800ac6e:	f04f 0200 	mov.w	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800ac74:	79ba      	ldrb	r2, [r7, #6]
 800ac76:	4958      	ldr	r1, [pc, #352]	@ (800add8 <config_motors+0xcb0>)
 800ac78:	4613      	mov	r3, r2
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	440b      	add	r3, r1
 800ac82:	336c      	adds	r3, #108	@ 0x6c
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800ac8a:	79ba      	ldrb	r2, [r7, #6]
 800ac8c:	4952      	ldr	r1, [pc, #328]	@ (800add8 <config_motors+0xcb0>)
 800ac8e:	4613      	mov	r3, r2
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	011b      	lsls	r3, r3, #4
 800ac96:	440b      	add	r3, r1
 800ac98:	3370      	adds	r3, #112	@ 0x70
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 800aca0:	79ba      	ldrb	r2, [r7, #6]
 800aca2:	494d      	ldr	r1, [pc, #308]	@ (800add8 <config_motors+0xcb0>)
 800aca4:	4613      	mov	r3, r2
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	1a9b      	subs	r3, r3, r2
 800acaa:	011b      	lsls	r3, r3, #4
 800acac:	440b      	add	r3, r1
 800acae:	3380      	adds	r3, #128	@ 0x80
 800acb0:	4a54      	ldr	r2, [pc, #336]	@ (800ae04 <config_motors+0xcdc>)
 800acb2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 800acb4:	79ba      	ldrb	r2, [r7, #6]
 800acb6:	4948      	ldr	r1, [pc, #288]	@ (800add8 <config_motors+0xcb0>)
 800acb8:	4613      	mov	r3, r2
 800acba:	011b      	lsls	r3, r3, #4
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	440b      	add	r3, r1
 800acc2:	3384      	adds	r3, #132	@ 0x84
 800acc4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800acc8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800acca:	79ba      	ldrb	r2, [r7, #6]
 800accc:	4942      	ldr	r1, [pc, #264]	@ (800add8 <config_motors+0xcb0>)
 800acce:	4613      	mov	r3, r2
 800acd0:	011b      	lsls	r3, r3, #4
 800acd2:	1a9b      	subs	r3, r3, r2
 800acd4:	011b      	lsls	r3, r3, #4
 800acd6:	440b      	add	r3, r1
 800acd8:	3338      	adds	r3, #56	@ 0x38
 800acda:	4a4b      	ldr	r2, [pc, #300]	@ (800ae08 <config_motors+0xce0>)
 800acdc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 800acde:	79ba      	ldrb	r2, [r7, #6]
 800ace0:	493d      	ldr	r1, [pc, #244]	@ (800add8 <config_motors+0xcb0>)
 800ace2:	4613      	mov	r3, r2
 800ace4:	011b      	lsls	r3, r3, #4
 800ace6:	1a9b      	subs	r3, r3, r2
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	440b      	add	r3, r1
 800acec:	333c      	adds	r3, #60	@ 0x3c
 800acee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800acf2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800acf4:	79ba      	ldrb	r2, [r7, #6]
 800acf6:	4938      	ldr	r1, [pc, #224]	@ (800add8 <config_motors+0xcb0>)
 800acf8:	4613      	mov	r3, r2
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	440b      	add	r3, r1
 800ad02:	3340      	adds	r3, #64	@ 0x40
 800ad04:	f04f 0200 	mov.w	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 800ad0a:	79ba      	ldrb	r2, [r7, #6]
 800ad0c:	4932      	ldr	r1, [pc, #200]	@ (800add8 <config_motors+0xcb0>)
 800ad0e:	4613      	mov	r3, r2
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	440b      	add	r3, r1
 800ad18:	3350      	adds	r3, #80	@ 0x50
 800ad1a:	4a3c      	ldr	r2, [pc, #240]	@ (800ae0c <config_motors+0xce4>)
 800ad1c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 800ad1e:	79ba      	ldrb	r2, [r7, #6]
 800ad20:	492d      	ldr	r1, [pc, #180]	@ (800add8 <config_motors+0xcb0>)
 800ad22:	4613      	mov	r3, r2
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3354      	adds	r3, #84	@ 0x54
 800ad2e:	4a38      	ldr	r2, [pc, #224]	@ (800ae10 <config_motors+0xce8>)
 800ad30:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
#ifndef YAW_M3508
	motor_id = YAW_MOTOR_ID - 1;
 800ad32:	2313      	movs	r3, #19
 800ad34:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800ad36:	79ba      	ldrb	r2, [r7, #6]
 800ad38:	4927      	ldr	r1, [pc, #156]	@ (800add8 <config_motors+0xcb0>)
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	011b      	lsls	r3, r3, #4
 800ad3e:	1a9b      	subs	r3, r3, r2
 800ad40:	011b      	lsls	r3, r3, #4
 800ad42:	440b      	add	r3, r1
 800ad44:	3302      	adds	r3, #2
 800ad46:	2201      	movs	r2, #1
 800ad48:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800ad4a:	79ba      	ldrb	r2, [r7, #6]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	4a20      	ldr	r2, [pc, #128]	@ (800add8 <config_motors+0xcb0>)
 800ad56:	4413      	add	r3, r2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff f89d 	bl	8009e98 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = YAW_CENTER;
 800ad5e:	79ba      	ldrb	r2, [r7, #6]
 800ad60:	491d      	ldr	r1, [pc, #116]	@ (800add8 <config_motors+0xcb0>)
 800ad62:	4613      	mov	r3, r2
 800ad64:	011b      	lsls	r3, r3, #4
 800ad66:	1a9b      	subs	r3, r3, r2
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	440b      	add	r3, r1
 800ad6c:	339c      	adds	r3, #156	@ 0x9c
 800ad6e:	f640 62d8 	movw	r2, #3800	@ 0xed8
 800ad72:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = YAW_MAX_ANG;
 800ad74:	79ba      	ldrb	r2, [r7, #6]
 800ad76:	4918      	ldr	r1, [pc, #96]	@ (800add8 <config_motors+0xcb0>)
 800ad78:	4613      	mov	r3, r2
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	440b      	add	r3, r1
 800ad82:	33c4      	adds	r3, #196	@ 0xc4
 800ad84:	4a23      	ldr	r2, [pc, #140]	@ (800ae14 <config_motors+0xcec>)
 800ad86:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = YAW_MIN_ANG; //angle before it overflows
 800ad88:	79ba      	ldrb	r2, [r7, #6]
 800ad8a:	4913      	ldr	r1, [pc, #76]	@ (800add8 <config_motors+0xcb0>)
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	1a9b      	subs	r3, r3, r2
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	440b      	add	r3, r1
 800ad96:	33c0      	adds	r3, #192	@ 0xc0
 800ad98:	4a1f      	ldr	r2, [pc, #124]	@ (800ae18 <config_motors+0xcf0>)
 800ad9a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 800ad9c:	79ba      	ldrb	r2, [r7, #6]
 800ad9e:	490e      	ldr	r1, [pc, #56]	@ (800add8 <config_motors+0xcb0>)
 800ada0:	4613      	mov	r3, r2
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	1a9b      	subs	r3, r3, r2
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	440b      	add	r3, r1
 800adaa:	33d4      	adds	r3, #212	@ 0xd4
 800adac:	f04f 0200 	mov.w	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 800adb2:	79ba      	ldrb	r2, [r7, #6]
 800adb4:	4908      	ldr	r1, [pc, #32]	@ (800add8 <config_motors+0xcb0>)
 800adb6:	4613      	mov	r3, r2
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	1a9b      	subs	r3, r3, r2
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	440b      	add	r3, r1
 800adc0:	3368      	adds	r3, #104	@ 0x68
 800adc2:	4a16      	ldr	r2, [pc, #88]	@ (800ae1c <config_motors+0xcf4>)
 800adc4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 800adc6:	79ba      	ldrb	r2, [r7, #6]
 800adc8:	4903      	ldr	r1, [pc, #12]	@ (800add8 <config_motors+0xcb0>)
 800adca:	4613      	mov	r3, r2
 800adcc:	011b      	lsls	r3, r3, #4
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	011b      	lsls	r3, r3, #4
 800add2:	440b      	add	r3, r1
 800add4:	336c      	adds	r3, #108	@ 0x6c
 800add6:	e023      	b.n	800ae20 <config_motors+0xcf8>
 800add8:	20002220 	.word	0x20002220
 800addc:	40490fdb 	.word	0x40490fdb
 800ade0:	c0490fdb 	.word	0xc0490fdb
 800ade4:	447a0000 	.word	0x447a0000
 800ade8:	42c80000 	.word	0x42c80000
 800adec:	40a00000 	.word	0x40a00000
 800adf0:	3ca3d70a 	.word	0x3ca3d70a
 800adf4:	40400000 	.word	0x40400000
 800adf8:	461c4000 	.word	0x461c4000
 800adfc:	3f19999a 	.word	0x3f19999a
 800ae00:	be800000 	.word	0xbe800000
 800ae04:	3dcccccd 	.word	0x3dcccccd
 800ae08:	45bb8000 	.word	0x45bb8000
 800ae0c:	457a0000 	.word	0x457a0000
 800ae10:	469c4000 	.word	0x469c4000
 800ae14:	417b53d2 	.word	0x417b53d2
 800ae18:	c17b53d2 	.word	0xc17b53d2
 800ae1c:	41700000 	.word	0x41700000
 800ae20:	f04f 0200 	mov.w	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 800ae26:	79ba      	ldrb	r2, [r7, #6]
 800ae28:	4929      	ldr	r1, [pc, #164]	@ (800aed0 <config_motors+0xda8>)
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	440b      	add	r3, r1
 800ae34:	3370      	adds	r3, #112	@ 0x70
 800ae36:	4a27      	ldr	r2, [pc, #156]	@ (800aed4 <config_motors+0xdac>)
 800ae38:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 800ae3a:	79ba      	ldrb	r2, [r7, #6]
 800ae3c:	4924      	ldr	r1, [pc, #144]	@ (800aed0 <config_motors+0xda8>)
 800ae3e:	4613      	mov	r3, r2
 800ae40:	011b      	lsls	r3, r3, #4
 800ae42:	1a9b      	subs	r3, r3, r2
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	440b      	add	r3, r1
 800ae48:	3380      	adds	r3, #128	@ 0x80
 800ae4a:	4a23      	ldr	r2, [pc, #140]	@ (800aed8 <config_motors+0xdb0>)
 800ae4c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 800ae4e:	79ba      	ldrb	r2, [r7, #6]
 800ae50:	491f      	ldr	r1, [pc, #124]	@ (800aed0 <config_motors+0xda8>)
 800ae52:	4613      	mov	r3, r2
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3384      	adds	r3, #132	@ 0x84
 800ae5e:	4a1d      	ldr	r2, [pc, #116]	@ (800aed4 <config_motors+0xdac>)
 800ae60:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 800ae62:	79ba      	ldrb	r2, [r7, #6]
 800ae64:	491a      	ldr	r1, [pc, #104]	@ (800aed0 <config_motors+0xda8>)
 800ae66:	4613      	mov	r3, r2
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	011b      	lsls	r3, r3, #4
 800ae6e:	440b      	add	r3, r1
 800ae70:	3338      	adds	r3, #56	@ 0x38
 800ae72:	4a1a      	ldr	r2, [pc, #104]	@ (800aedc <config_motors+0xdb4>)
 800ae74:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 800ae76:	79ba      	ldrb	r2, [r7, #6]
 800ae78:	4915      	ldr	r1, [pc, #84]	@ (800aed0 <config_motors+0xda8>)
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	011b      	lsls	r3, r3, #4
 800ae7e:	1a9b      	subs	r3, r3, r2
 800ae80:	011b      	lsls	r3, r3, #4
 800ae82:	440b      	add	r3, r1
 800ae84:	333c      	adds	r3, #60	@ 0x3c
 800ae86:	4a13      	ldr	r2, [pc, #76]	@ (800aed4 <config_motors+0xdac>)
 800ae88:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 800ae8a:	79ba      	ldrb	r2, [r7, #6]
 800ae8c:	4910      	ldr	r1, [pc, #64]	@ (800aed0 <config_motors+0xda8>)
 800ae8e:	4613      	mov	r3, r2
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	011b      	lsls	r3, r3, #4
 800ae96:	440b      	add	r3, r1
 800ae98:	3340      	adds	r3, #64	@ 0x40
 800ae9a:	4a11      	ldr	r2, [pc, #68]	@ (800aee0 <config_motors+0xdb8>)
 800ae9c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 800ae9e:	79ba      	ldrb	r2, [r7, #6]
 800aea0:	490b      	ldr	r1, [pc, #44]	@ (800aed0 <config_motors+0xda8>)
 800aea2:	4613      	mov	r3, r2
 800aea4:	011b      	lsls	r3, r3, #4
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	440b      	add	r3, r1
 800aeac:	3350      	adds	r3, #80	@ 0x50
 800aeae:	4a0d      	ldr	r2, [pc, #52]	@ (800aee4 <config_motors+0xdbc>)
 800aeb0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 800aeb2:	79ba      	ldrb	r2, [r7, #6]
 800aeb4:	4906      	ldr	r1, [pc, #24]	@ (800aed0 <config_motors+0xda8>)
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	011b      	lsls	r3, r3, #4
 800aeba:	1a9b      	subs	r3, r3, r2
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	440b      	add	r3, r1
 800aec0:	3354      	adds	r3, #84	@ 0x54
 800aec2:	4a09      	ldr	r2, [pc, #36]	@ (800aee8 <config_motors+0xdc0>)
 800aec4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ticks = 4096 * g_can_motors[motor_id].angle_data.gearbox_ratio;
	g_can_motors[motor_id].angle_data.tick_range = g_can_motors[motor_id].angle_data.max_ticks
			- g_can_motors[motor_id].angle_data.min_ticks;
#endif
#endif
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20002220 	.word	0x20002220
 800aed4:	41200000 	.word	0x41200000
 800aed8:	3d4ccccd 	.word	0x3d4ccccd
 800aedc:	466a6000 	.word	0x466a6000
 800aee0:	447a0000 	.word	0x447a0000
 800aee4:	459c4000 	.word	0x459c4000
 800aee8:	469c4000 	.word	0x469c4000

0800aeec <bz_buzzer>:

void bz_buzzer(uint8_t high, uint8_t low) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	460a      	mov	r2, r1
 800aef6:	71fb      	strb	r3, [r7, #7]
 800aef8:	4613      	mov	r3, r2
 800aefa:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_msg = bz_debug_high;
 800aefc:	2309      	movs	r3, #9
 800aefe:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < high; i++) {
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
 800af04:	e00a      	b.n	800af1c <bz_buzzer+0x30>
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800af06:	4b1a      	ldr	r3, [pc, #104]	@ (800af70 <bz_buzzer+0x84>)
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	f107 010d 	add.w	r1, r7, #13
 800af0e:	2300      	movs	r3, #0
 800af10:	2200      	movs	r2, #0
 800af12:	f00d fecd 	bl	8018cb0 <xQueueGenericSend>
	for (uint8_t i = 0; i < high; i++) {
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	3301      	adds	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
 800af1c:	7bfa      	ldrb	r2, [r7, #15]
 800af1e:	79fb      	ldrb	r3, [r7, #7]
 800af20:	429a      	cmp	r2, r3
 800af22:	d3f0      	bcc.n	800af06 <bz_buzzer+0x1a>
	}
	temp_msg = bz_debug_low;
 800af24:	2308      	movs	r3, #8
 800af26:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < low; i++) {
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]
 800af2c:	e00d      	b.n	800af4a <bz_buzzer+0x5e>
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800af2e:	4b10      	ldr	r3, [pc, #64]	@ (800af70 <bz_buzzer+0x84>)
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	f107 010d 	add.w	r1, r7, #13
 800af36:	2300      	movs	r3, #0
 800af38:	2200      	movs	r2, #0
 800af3a:	f00d feb9 	bl	8018cb0 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800af3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	3301      	adds	r3, #1
 800af46:	b2db      	uxtb	r3, r3
 800af48:	73bb      	strb	r3, [r7, #14]
 800af4a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800af4e:	79bb      	ldrb	r3, [r7, #6]
 800af50:	429a      	cmp	r2, r3
 800af52:	dbec      	blt.n	800af2e <bz_buzzer+0x42>
	}
	temp_msg = bz_debug_rest;
 800af54:	230a      	movs	r3, #10
 800af56:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800af58:	4b05      	ldr	r3, [pc, #20]	@ (800af70 <bz_buzzer+0x84>)
 800af5a:	6818      	ldr	r0, [r3, #0]
 800af5c:	f107 010d 	add.w	r1, r7, #13
 800af60:	2300      	movs	r3, #0
 800af62:	2200      	movs	r2, #0
 800af64:	f00d fea4 	bl	8018cb0 <xQueueGenericSend>
}
 800af68:	bf00      	nop
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20003bb4 	.word	0x20003bb4

0800af74 <motor_temp_bz>:

void motor_temp_bz(uint8_t hi, uint8_t low) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	460a      	mov	r2, r1
 800af7e:	71fb      	strb	r3, [r7, #7]
 800af80:	4613      	mov	r3, r2
 800af82:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_msg = bz_debug_hi_temp;
 800af84:	230b      	movs	r3, #11
 800af86:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800af88:	4b27      	ldr	r3, [pc, #156]	@ (800b028 <motor_temp_bz+0xb4>)
 800af8a:	6818      	ldr	r0, [r3, #0]
 800af8c:	f107 010d 	add.w	r1, r7, #13
 800af90:	2300      	movs	r3, #0
 800af92:	2200      	movs	r2, #0
 800af94:	f00d fe8c 	bl	8018cb0 <xQueueGenericSend>
	temp_msg = bz_debug_rest;
 800af98:	230a      	movs	r3, #10
 800af9a:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800af9c:	4b22      	ldr	r3, [pc, #136]	@ (800b028 <motor_temp_bz+0xb4>)
 800af9e:	6818      	ldr	r0, [r3, #0]
 800afa0:	f107 010d 	add.w	r1, r7, #13
 800afa4:	2300      	movs	r3, #0
 800afa6:	2200      	movs	r2, #0
 800afa8:	f00d fe82 	bl	8018cb0 <xQueueGenericSend>
	for (int8_t i = 0; i < hi; i++) {
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
 800afb0:	e00f      	b.n	800afd2 <motor_temp_bz+0x5e>
		temp_msg = bz_temp_hi;
 800afb2:	230c      	movs	r3, #12
 800afb4:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800afb6:	4b1c      	ldr	r3, [pc, #112]	@ (800b028 <motor_temp_bz+0xb4>)
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f107 010d 	add.w	r1, r7, #13
 800afbe:	2300      	movs	r3, #0
 800afc0:	2200      	movs	r2, #0
 800afc2:	f00d fe75 	bl	8018cb0 <xQueueGenericSend>
	for (int8_t i = 0; i < hi; i++) {
 800afc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	3301      	adds	r3, #1
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	73fb      	strb	r3, [r7, #15]
 800afd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	429a      	cmp	r2, r3
 800afda:	dbea      	blt.n	800afb2 <motor_temp_bz+0x3e>
	}
	for (int8_t i = 0; i < low; i++) {
 800afdc:	2300      	movs	r3, #0
 800afde:	73bb      	strb	r3, [r7, #14]
 800afe0:	e00f      	b.n	800b002 <motor_temp_bz+0x8e>
		temp_msg = bz_temp_low;
 800afe2:	230d      	movs	r3, #13
 800afe4:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800afe6:	4b10      	ldr	r3, [pc, #64]	@ (800b028 <motor_temp_bz+0xb4>)
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f107 010d 	add.w	r1, r7, #13
 800afee:	2300      	movs	r3, #0
 800aff0:	2200      	movs	r2, #0
 800aff2:	f00d fe5d 	bl	8018cb0 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800aff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	3301      	adds	r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	73bb      	strb	r3, [r7, #14]
 800b002:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b006:	79bb      	ldrb	r3, [r7, #6]
 800b008:	429a      	cmp	r2, r3
 800b00a:	dbea      	blt.n	800afe2 <motor_temp_bz+0x6e>
	}
	temp_msg = bz_debug_rest;
 800b00c:	230a      	movs	r3, #10
 800b00e:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800b010:	4b05      	ldr	r3, [pc, #20]	@ (800b028 <motor_temp_bz+0xb4>)
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	f107 010d 	add.w	r1, r7, #13
 800b018:	2300      	movs	r3, #0
 800b01a:	2200      	movs	r2, #0
 800b01c:	f00d fe48 	bl	8018cb0 <xQueueGenericSend>

}
 800b020:	bf00      	nop
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20003bb4 	.word	0x20003bb4

0800b02c <check_motors>:

uint16_t check_motors() {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 800b036:	f7f7 f8c3 	bl	80021c0 <get_microseconds>
 800b03a:	6038      	str	r0, [r7, #0]
	if (curr_time
				- g_can_motors[LEFT_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b03c:	4b7f      	ldr	r3, [pc, #508]	@ (800b23c <check_motors+0x210>)
 800b03e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b046:	4a7e      	ldr	r2, [pc, #504]	@ (800b240 <check_motors+0x214>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d904      	bls.n	800b056 <check_motors+0x2a>
			error |= 1 << (0);
 800b04c:	88fb      	ldrh	r3, [r7, #6]
 800b04e:	f043 0301 	orr.w	r3, r3, #1
 800b052:	80fb      	strh	r3, [r7, #6]
 800b054:	e007      	b.n	800b066 <check_motors+0x3a>

		} else {
			if (g_can_motors[LEFT_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b056:	4b79      	ldr	r3, [pc, #484]	@ (800b23c <check_motors+0x210>)
 800b058:	7b1b      	ldrb	r3, [r3, #12]
 800b05a:	2b46      	cmp	r3, #70	@ 0x46
 800b05c:	d903      	bls.n	800b066 <check_motors+0x3a>
				motor_temp_bz(1, 1);
 800b05e:	2101      	movs	r1, #1
 800b060:	2001      	movs	r0, #1
 800b062:	f7ff ff87 	bl	800af74 <motor_temp_bz>
			} else {

			}
		}
	if (curr_time
				- g_can_motors[RIGHT_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b066:	4b75      	ldr	r3, [pc, #468]	@ (800b23c <check_motors+0x210>)
 800b068:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b070:	4a73      	ldr	r2, [pc, #460]	@ (800b240 <check_motors+0x214>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d904      	bls.n	800b080 <check_motors+0x54>
			error |= 1 << (0);
 800b076:	88fb      	ldrh	r3, [r7, #6]
 800b078:	f043 0301 	orr.w	r3, r3, #1
 800b07c:	80fb      	strh	r3, [r7, #6]
 800b07e:	e008      	b.n	800b092 <check_motors+0x66>

		} else {
			if (g_can_motors[RIGHT_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b080:	4b6e      	ldr	r3, [pc, #440]	@ (800b23c <check_motors+0x210>)
 800b082:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800b086:	2b46      	cmp	r3, #70	@ 0x46
 800b088:	d903      	bls.n	800b092 <check_motors+0x66>
				motor_temp_bz(1, 1);
 800b08a:	2101      	movs	r1, #1
 800b08c:	2001      	movs	r0, #1
 800b08e:	f7ff ff71 	bl	800af74 <motor_temp_bz>
			} else {

			}
		}
	if (curr_time
			- g_can_motors[FR_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b092:	4b6a      	ldr	r3, [pc, #424]	@ (800b23c <check_motors+0x210>)
 800b094:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b09c:	4a68      	ldr	r2, [pc, #416]	@ (800b240 <check_motors+0x214>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d904      	bls.n	800b0ac <check_motors+0x80>
		error |= 1 << (0);
 800b0a2:	88fb      	ldrh	r3, [r7, #6]
 800b0a4:	f043 0301 	orr.w	r3, r3, #1
 800b0a8:	80fb      	strh	r3, [r7, #6]
 800b0aa:	e008      	b.n	800b0be <check_motors+0x92>

	} else {
		if (g_can_motors[FR_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b0ac:	4b63      	ldr	r3, [pc, #396]	@ (800b23c <check_motors+0x210>)
 800b0ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b0b2:	2b46      	cmp	r3, #70	@ 0x46
 800b0b4:	d903      	bls.n	800b0be <check_motors+0x92>
			motor_temp_bz(1, 1);
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	f7ff ff5b 	bl	800af74 <motor_temp_bz>

		}
	}

	if (curr_time
			- g_can_motors[FL_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b0be:	4b5f      	ldr	r3, [pc, #380]	@ (800b23c <check_motors+0x210>)
 800b0c0:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b0c8:	4a5d      	ldr	r2, [pc, #372]	@ (800b240 <check_motors+0x214>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d904      	bls.n	800b0d8 <check_motors+0xac>
		error |= 1 << (1);
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	f043 0302 	orr.w	r3, r3, #2
 800b0d4:	80fb      	strh	r3, [r7, #6]
 800b0d6:	e008      	b.n	800b0ea <check_motors+0xbe>

	} else {
		if (g_can_motors[FL_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b0d8:	4b58      	ldr	r3, [pc, #352]	@ (800b23c <check_motors+0x210>)
 800b0da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800b0de:	2b46      	cmp	r3, #70	@ 0x46
 800b0e0:	d903      	bls.n	800b0ea <check_motors+0xbe>
			motor_temp_bz(1, 2);
 800b0e2:	2102      	movs	r1, #2
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f7ff ff45 	bl	800af74 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[BL_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b0ea:	4b54      	ldr	r3, [pc, #336]	@ (800b23c <check_motors+0x210>)
 800b0ec:	f8d3 3684 	ldr.w	r3, [r3, #1668]	@ 0x684
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b0f4:	4a52      	ldr	r2, [pc, #328]	@ (800b240 <check_motors+0x214>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d904      	bls.n	800b104 <check_motors+0xd8>
		error |= 1 << (2);
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	f043 0304 	orr.w	r3, r3, #4
 800b100:	80fb      	strh	r3, [r7, #6]
 800b102:	e008      	b.n	800b116 <check_motors+0xea>
	} else {
		if (g_can_motors[BL_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b104:	4b4d      	ldr	r3, [pc, #308]	@ (800b23c <check_motors+0x210>)
 800b106:	f893 35ac 	ldrb.w	r3, [r3, #1452]	@ 0x5ac
 800b10a:	2b46      	cmp	r3, #70	@ 0x46
 800b10c:	d903      	bls.n	800b116 <check_motors+0xea>
			motor_temp_bz(1, 3);
 800b10e:	2103      	movs	r1, #3
 800b110:	2001      	movs	r0, #1
 800b112:	f7ff ff2f 	bl	800af74 <motor_temp_bz>
		}
	}
	if (curr_time
			- g_can_motors[BR_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b116:	4b49      	ldr	r3, [pc, #292]	@ (800b23c <check_motors+0x210>)
 800b118:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b120:	4a47      	ldr	r2, [pc, #284]	@ (800b240 <check_motors+0x214>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d904      	bls.n	800b130 <check_motors+0x104>
		error |= 1 << (3);
 800b126:	88fb      	ldrh	r3, [r7, #6]
 800b128:	f043 0308 	orr.w	r3, r3, #8
 800b12c:	80fb      	strh	r3, [r7, #6]
 800b12e:	e008      	b.n	800b142 <check_motors+0x116>
	} else {
		if (g_can_motors[BR_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b130:	4b42      	ldr	r3, [pc, #264]	@ (800b23c <check_motors+0x210>)
 800b132:	f893 369c 	ldrb.w	r3, [r3, #1692]	@ 0x69c
 800b136:	2b46      	cmp	r3, #70	@ 0x46
 800b138:	d903      	bls.n	800b142 <check_motors+0x116>
			motor_temp_bz(1, 4);
 800b13a:	2104      	movs	r1, #4
 800b13c:	2001      	movs	r0, #1
 800b13e:	f7ff ff19 	bl	800af74 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[LFRICTION_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b142:	4b3e      	ldr	r3, [pc, #248]	@ (800b23c <check_motors+0x210>)
 800b144:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b14c:	4a3c      	ldr	r2, [pc, #240]	@ (800b240 <check_motors+0x214>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d904      	bls.n	800b15c <check_motors+0x130>
		error |= 1 << (4);
 800b152:	88fb      	ldrh	r3, [r7, #6]
 800b154:	f043 0310 	orr.w	r3, r3, #16
 800b158:	80fb      	strh	r3, [r7, #6]
 800b15a:	e008      	b.n	800b16e <check_motors+0x142>

	} else {
		if (g_can_motors[LFRICTION_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b15c:	4b37      	ldr	r3, [pc, #220]	@ (800b23c <check_motors+0x210>)
 800b15e:	f893 3f0c 	ldrb.w	r3, [r3, #3852]	@ 0xf0c
 800b162:	2b46      	cmp	r3, #70	@ 0x46
 800b164:	d903      	bls.n	800b16e <check_motors+0x142>
			motor_temp_bz(2, 1);
 800b166:	2101      	movs	r1, #1
 800b168:	2002      	movs	r0, #2
 800b16a:	f7ff ff03 	bl	800af74 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[RFRICTION_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b16e:	4b33      	ldr	r3, [pc, #204]	@ (800b23c <check_motors+0x210>)
 800b170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b17c:	4a30      	ldr	r2, [pc, #192]	@ (800b240 <check_motors+0x214>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d904      	bls.n	800b18c <check_motors+0x160>
		error |= 1 << (5);
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	f043 0320 	orr.w	r3, r3, #32
 800b188:	80fb      	strh	r3, [r7, #6]
 800b18a:	e008      	b.n	800b19e <check_motors+0x172>

	} else {
		if (g_can_motors[RFRICTION_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b18c:	4b2b      	ldr	r3, [pc, #172]	@ (800b23c <check_motors+0x210>)
 800b18e:	f893 3ffc 	ldrb.w	r3, [r3, #4092]	@ 0xffc
 800b192:	2b46      	cmp	r3, #70	@ 0x46
 800b194:	d903      	bls.n	800b19e <check_motors+0x172>
			motor_temp_bz(2, 2);
 800b196:	2102      	movs	r1, #2
 800b198:	2002      	movs	r0, #2
 800b19a:	f7ff feeb 	bl	800af74 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[FEEDER_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b19e:	4b27      	ldr	r3, [pc, #156]	@ (800b23c <check_motors+0x210>)
 800b1a0:	f8d3 3954 	ldr.w	r3, [r3, #2388]	@ 0x954
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b1a8:	4a25      	ldr	r2, [pc, #148]	@ (800b240 <check_motors+0x214>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d904      	bls.n	800b1b8 <check_motors+0x18c>
		error |= 1 << 6;
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1b4:	80fb      	strh	r3, [r7, #6]
 800b1b6:	e008      	b.n	800b1ca <check_motors+0x19e>

	} else {
		if (g_can_motors[FEEDER_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b1b8:	4b20      	ldr	r3, [pc, #128]	@ (800b23c <check_motors+0x210>)
 800b1ba:	f893 387c 	ldrb.w	r3, [r3, #2172]	@ 0x87c
 800b1be:	2b46      	cmp	r3, #70	@ 0x46
 800b1c0:	d903      	bls.n	800b1ca <check_motors+0x19e>
			motor_temp_bz(2, 3);
 800b1c2:	2103      	movs	r1, #3
 800b1c4:	2002      	movs	r0, #2
 800b1c6:	f7ff fed5 	bl	800af74 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[PITCH_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b1ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b23c <check_motors+0x210>)
 800b1cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b1d8:	4a19      	ldr	r2, [pc, #100]	@ (800b240 <check_motors+0x214>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d904      	bls.n	800b1e8 <check_motors+0x1bc>
		error |= 1 << 7;
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1e4:	80fb      	strh	r3, [r7, #6]
 800b1e6:	e00a      	b.n	800b1fe <check_motors+0x1d2>

	} else {
		if (g_can_motors[PITCH_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b1e8:	4b14      	ldr	r3, [pc, #80]	@ (800b23c <check_motors+0x210>)
 800b1ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1ee:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800b1f2:	2b46      	cmp	r3, #70	@ 0x46
 800b1f4:	d903      	bls.n	800b1fe <check_motors+0x1d2>
			motor_temp_bz(3, 1);
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	2003      	movs	r0, #3
 800b1fa:	f7ff febb 	bl	800af74 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[YAW_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b23c <check_motors+0x210>)
 800b200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800b20c:	4a0c      	ldr	r2, [pc, #48]	@ (800b240 <check_motors+0x214>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d904      	bls.n	800b21c <check_motors+0x1f0>
		error |= 1 << 8;
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b218:	80fb      	strh	r3, [r7, #6]
 800b21a:	e00a      	b.n	800b232 <check_motors+0x206>

	} else {
		if (g_can_motors[YAW_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800b21c:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <check_motors+0x210>)
 800b21e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b222:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 800b226:	2b46      	cmp	r3, #70	@ 0x46
 800b228:	d903      	bls.n	800b232 <check_motors+0x206>
			motor_temp_bz(3, 2);
 800b22a:	2102      	movs	r1, #2
 800b22c:	2003      	movs	r0, #3
 800b22e:	f7ff fea1 	bl	800af74 <motor_temp_bz>
		}
	}
	return error;
 800b232:	88fb      	ldrh	r3, [r7, #6]

}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	20002220 	.word	0x20002220
 800b240:	000f4240 	.word	0x000f4240

0800b244 <motor_calib_task>:

void motor_calib_task(void *argument) {
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	4842      	ldr	r0, [pc, #264]	@ (800b35c <motor_calib_task+0x118>)
 800b252:	f7f5 fff3 	bl	800123c <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 800b256:	2200      	movs	r2, #0
 800b258:	2100      	movs	r1, #0
 800b25a:	4841      	ldr	r0, [pc, #260]	@ (800b360 <motor_calib_task+0x11c>)
 800b25c:	f7f5 ffee 	bl	800123c <can_start>
	config_motors();
 800b260:	f7fe ff62 	bl	800a128 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 800b264:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b268:	82fb      	strh	r3, [r7, #22]
	vTaskDelay(50);
 800b26a:	2032      	movs	r0, #50	@ 0x32
 800b26c:	f00e fc0a 	bl	8019a84 <vTaskDelay>
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0) {
 800b270:	8afb      	ldrh	r3, [r7, #22]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d102      	bne.n	800b27c <motor_calib_task+0x38>
		temp_msg = ok;
 800b276:	2301      	movs	r3, #1
 800b278:	73fb      	strb	r3, [r7, #15]
 800b27a:	e001      	b.n	800b280 <motor_calib_task+0x3c>
	} else {
		temp_msg = not_ok;
 800b27c:	2302      	movs	r3, #2
 800b27e:	73fb      	strb	r3, [r7, #15]
	}
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800b280:	4b38      	ldr	r3, [pc, #224]	@ (800b364 <motor_calib_task+0x120>)
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	f107 010f 	add.w	r1, r7, #15
 800b288:	2300      	movs	r3, #0
 800b28a:	2200      	movs	r2, #0
 800b28c:	f00d fd10 	bl	8018cb0 <xQueueGenericSend>
	uint32_t last_check = HAL_GetTick();
 800b290:	f001 fa32 	bl	800c6f8 <HAL_GetTick>
 800b294:	6138      	str	r0, [r7, #16]
	while (1) {
		error = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	82fb      	strh	r3, [r7, #22]

		error = check_motors();
 800b29a:	f7ff fec7 	bl	800b02c <check_motors>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	82fb      	strh	r3, [r7, #22]
		g_motor_fault = error;
 800b2a2:	4a31      	ldr	r2, [pc, #196]	@ (800b368 <motor_calib_task+0x124>)
 800b2a4:	8afb      	ldrh	r3, [r7, #22]
 800b2a6:	8013      	strh	r3, [r2, #0]
		uint32_t delay = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	61bb      	str	r3, [r7, #24]
		if (HAL_GetTick() - last_check > 30000) {
 800b2ac:	f001 fa24 	bl	800c6f8 <HAL_GetTick>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d949      	bls.n	800b352 <motor_calib_task+0x10e>
					bz_buzzer(0, 2);
					vTaskDelay(5000);
					continue;
				}
			} else {
				error = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	82fb      	strh	r3, [r7, #22]
			}
			for (uint8_t i = 0; i < 4; i++) {
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	777b      	strb	r3, [r7, #29]
 800b2c6:	e011      	b.n	800b2ec <motor_calib_task+0xa8>
				if (error & (1 << (i))) {
 800b2c8:	8afa      	ldrh	r2, [r7, #22]
 800b2ca:	7f7b      	ldrb	r3, [r7, #29]
 800b2cc:	fa42 f303 	asr.w	r3, r2, r3
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <motor_calib_task+0xa2>
					bz_buzzer(1, i + 1);
 800b2d8:	7f7b      	ldrb	r3, [r7, #29]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	4619      	mov	r1, r3
 800b2e0:	2001      	movs	r0, #1
 800b2e2:	f7ff fe03 	bl	800aeec <bz_buzzer>
			for (uint8_t i = 0; i < 4; i++) {
 800b2e6:	7f7b      	ldrb	r3, [r7, #29]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	777b      	strb	r3, [r7, #29]
 800b2ec:	7f7b      	ldrb	r3, [r7, #29]
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d9ea      	bls.n	800b2c8 <motor_calib_task+0x84>
				} else {

				}
			}
			for (uint8_t i = 4; i < 7; i++) {
 800b2f2:	2304      	movs	r3, #4
 800b2f4:	77bb      	strb	r3, [r7, #30]
 800b2f6:	e011      	b.n	800b31c <motor_calib_task+0xd8>
				if (error & (1 << (i))) {
 800b2f8:	8afa      	ldrh	r2, [r7, #22]
 800b2fa:	7fbb      	ldrb	r3, [r7, #30]
 800b2fc:	fa42 f303 	asr.w	r3, r2, r3
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d006      	beq.n	800b316 <motor_calib_task+0xd2>
					bz_buzzer(2, (i - 3));
 800b308:	7fbb      	ldrb	r3, [r7, #30]
 800b30a:	3b03      	subs	r3, #3
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	4619      	mov	r1, r3
 800b310:	2002      	movs	r0, #2
 800b312:	f7ff fdeb 	bl	800aeec <bz_buzzer>
			for (uint8_t i = 4; i < 7; i++) {
 800b316:	7fbb      	ldrb	r3, [r7, #30]
 800b318:	3301      	adds	r3, #1
 800b31a:	77bb      	strb	r3, [r7, #30]
 800b31c:	7fbb      	ldrb	r3, [r7, #30]
 800b31e:	2b06      	cmp	r3, #6
 800b320:	d9ea      	bls.n	800b2f8 <motor_calib_task+0xb4>
				}
			}
			for (uint8_t i = 7; i < 9; i++) {
 800b322:	2307      	movs	r3, #7
 800b324:	77fb      	strb	r3, [r7, #31]
 800b326:	e011      	b.n	800b34c <motor_calib_task+0x108>
				if (error & (1 << (i))) {
 800b328:	8afa      	ldrh	r2, [r7, #22]
 800b32a:	7ffb      	ldrb	r3, [r7, #31]
 800b32c:	fa42 f303 	asr.w	r3, r2, r3
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d006      	beq.n	800b346 <motor_calib_task+0x102>
					bz_buzzer(3, (i - 6));
 800b338:	7ffb      	ldrb	r3, [r7, #31]
 800b33a:	3b06      	subs	r3, #6
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	4619      	mov	r1, r3
 800b340:	2003      	movs	r0, #3
 800b342:	f7ff fdd3 	bl	800aeec <bz_buzzer>
			for (uint8_t i = 7; i < 9; i++) {
 800b346:	7ffb      	ldrb	r3, [r7, #31]
 800b348:	3301      	adds	r3, #1
 800b34a:	77fb      	strb	r3, [r7, #31]
 800b34c:	7ffb      	ldrb	r3, [r7, #31]
 800b34e:	2b08      	cmp	r3, #8
 800b350:	d9ea      	bls.n	800b328 <motor_calib_task+0xe4>
				}
			}
		}

		vTaskDelay(1000);
 800b352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b356:	f00e fb95 	bl	8019a84 <vTaskDelay>
	while (1) {
 800b35a:	e79c      	b.n	800b296 <motor_calib_task+0x52>
 800b35c:	20000914 	.word	0x20000914
 800b360:	2000093c 	.word	0x2000093c
 800b364:	20003bb4 	.word	0x20003bb4
 800b368:	20003bb8 	.word	0x20003bb8

0800b36c <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08a      	sub	sp, #40	@ 0x28
 800b370:	af00      	add	r7, sp, #0
 800b372:	ed87 0b04 	vstr	d0, [r7, #16]
 800b376:	ed87 1b02 	vstr	d1, [r7, #8]
 800b37a:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->last_time[0] = get_microseconds();
 800b384:	f7f6 ff1c 	bl	80021c0 <get_microseconds>
 800b388:	4602      	mov	r2, r0
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	629a      	str	r2, [r3, #40]	@ 0x28
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 800b38e:	2301      	movs	r3, #1
 800b390:	627b      	str	r3, [r7, #36]	@ 0x24
	float Pout = 0;
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	623b      	str	r3, [r7, #32]
	float Iout = 0;
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	61fb      	str	r3, [r7, #28]
	float Dout = 0;
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	61bb      	str	r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 800b3ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b3b4:	f7f4 ff68 	bl	8000288 <__aeabi_dsub>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4619      	mov	r1, r3
 800b3c0:	f7f5 fc12 	bl	8000be8 <__aeabi_d2f>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	ed93 7a03 	vldr	s14, [r3, #12]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	edd3 7a00 	vldr	s15, [r3]
 800b3d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e8:	edc7 7a08 	vstr	s15, [r7, #32]
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	ed93 7a03 	vldr	s14, [r3, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	edd3 7a02 	vldr	s15, [r3, #8]
 800b402:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	ee07 3a90 	vmov	s15, r3
 800b40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b414:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	ed93 7a05 	vldr	s14, [r3, #20]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	edd3 6a03 	vldr	s13, [r3, #12]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	edd3 7a01 	vldr	s15, [r3, #4]
 800b42a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f103 0214 	add.w	r2, r3, #20
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b452:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800b4a4 <speed_pid+0x138>
 800b456:	eeb0 0a67 	vmov.f32	s0, s15
 800b45a:	4610      	mov	r0, r2
 800b45c:	f000 f82b 	bl	800b4b6 <float_minmax>
	Iout = pid->integral;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	61fb      	str	r3, [r7, #28]
	pid->output = Pout + Iout + Dout;
 800b466:	ed97 7a08 	vldr	s14, [r7, #32]
 800b46a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b46e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b472:	edd7 7a06 	vldr	s15, [r7, #24]
 800b476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	edc3 7a08 	vstr	s15, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f103 0220 	add.w	r2, r3, #32
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	edd3 7a07 	vldr	s15, [r3, #28]
 800b48c:	eddf 0a05 	vldr	s1, [pc, #20]	@ 800b4a4 <speed_pid+0x138>
 800b490:	eeb0 0a67 	vmov.f32	s0, s15
 800b494:	4610      	mov	r0, r2
 800b496:	f000 f80e 	bl	800b4b6 <float_minmax>
}
 800b49a:	bf00      	nop
 800b49c:	3728      	adds	r7, #40	@ 0x28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	00000000 	.word	0x00000000

0800b4a8 <kill_can>:
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
	}
#endif
}

void kill_can() {
 800b4a8:	b480      	push	{r7}
 800b4aa:	af00      	add	r7, sp, #0

}
 800b4ac:	bf00      	nop
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	ed87 0a02 	vstr	s0, [r7, #8]
 800b4c2:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	edd3 7a00 	vldr	s15, [r3]
 800b4cc:	ed97 7a02 	vldr	s14, [r7, #8]
 800b4d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d8:	d503      	bpl.n	800b4e2 <float_minmax+0x2c>
		*motor_in = motor_max;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	601a      	str	r2, [r3, #0]

//	if (fabs(*motor_in) < motor_min) {
//		*motor_in = 0;
//	}

}
 800b4e0:	e013      	b.n	800b50a <float_minmax+0x54>
	} else if (*motor_in < -motor_max) {
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	ed93 7a00 	vldr	s14, [r3]
 800b4e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4ec:	eef1 7a67 	vneg.f32	s15, s15
 800b4f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f8:	d400      	bmi.n	800b4fc <float_minmax+0x46>
}
 800b4fa:	e006      	b.n	800b50a <float_minmax+0x54>
		*motor_in = -motor_max;
 800b4fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b500:	eef1 7a67 	vneg.f32	s15, s15
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	edc3 7a00 	vstr	s15, [r3]
}
 800b50a:	bf00      	nop
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
	...

0800b518 <motor_control_task>:
extern QueueHandle_t g_buzzing_task_msg;
extern remote_cmd_t g_remote_cmd;

extern uint8_t g_safety_toggle;
volatile uint32_t g_motor_control_time;
void motor_control_task(void *argument) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b090      	sub	sp, #64	@ 0x40
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 800b520:	2300      	movs	r3, #0
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800b524:	2300      	movs	r3, #0
 800b526:	62bb      	str	r3, [r7, #40]	@ 0x28
	CAN_tx_message.DLC = 0x08;
 800b528:	2308      	movs	r3, #8
 800b52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t enabled_motors = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	63bb      	str	r3, [r7, #56]	@ 0x38
	//initialise motor data
#ifdef LEFT_MOTOR_ID
	if (LEFT_MOTOR_ID < 25 && LEFT_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (LEFT_MOTOR_ID - 1);
 800b530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b532:	f043 0301 	orr.w	r3, r3, #1
 800b536:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef RIGHT_MOTOR_ID
	if (RIGHT_MOTOR_ID < 25 && RIGHT_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (RIGHT_MOTOR_ID - 1);
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	f043 0302 	orr.w	r3, r3, #2
 800b53e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif
#ifdef FR_MOTOR_ID
	if (FR_MOTOR_ID < 25 && FR_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FR_MOTOR_ID - 1);
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	f043 0310 	orr.w	r3, r3, #16
 800b546:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef FL_MOTOR_ID
	if (FL_MOTOR_ID < 25 && FL_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FL_MOTOR_ID - 1);
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	f043 0320 	orr.w	r3, r3, #32
 800b54e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef BL_MOTOR_ID
	if (BL_MOTOR_ID < 25 && BL_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (BL_MOTOR_ID - 1);
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b556:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef BR_MOTOR_ID
	if (BR_MOTOR_ID < 25 && BR_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (BR_MOTOR_ID - 1);
 800b558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef LFRICTION_MOTOR_ID
	if (LFRICTION_MOTOR_ID < 25 && LFRICTION_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (LFRICTION_MOTOR_ID - 1);
 800b560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b566:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef RFRICTION_MOTOR_ID
	if (RFRICTION_MOTOR_ID < 25 && RFRICTION_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (RFRICTION_MOTOR_ID - 1);
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b56e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef FEEDER_MOTOR_ID
	if (FEEDER_MOTOR_ID < 25 && FEEDER_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FEEDER_MOTOR_ID - 1);
 800b570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b576:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef PITCH_MOTOR_ID
	if (PITCH_MOTOR_ID < 25 && PITCH_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (PITCH_MOTOR_ID - 1);
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b57e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef YAW_MOTOR_ID
	if (YAW_MOTOR_ID < 25 && YAW_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (YAW_MOTOR_ID - 1);
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b586:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif
	TickType_t start_time;
//	uint32_t last_time;
	while (1) {
		start_time = xTaskGetTickCount();
 800b588:	f00e fbd0 	bl	8019d2c <xTaskGetTickCount>
 800b58c:	4603      	mov	r3, r0
 800b58e:	60fb      	str	r3, [r7, #12]
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 800b590:	4b30      	ldr	r3, [pc, #192]	@ (800b654 <motor_control_task+0x13c>)
 800b592:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d162      	bne.n	800b660 <motor_control_task+0x148>
			CAN_send_data[0] = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	76fb      	strb	r3, [r7, #27]
			CAN_tx_message.StdId = 0x200;
 800b5ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5be:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800b5c0:	f107 0310 	add.w	r3, r7, #16
 800b5c4:	f107 0214 	add.w	r2, r7, #20
 800b5c8:	f107 011c 	add.w	r1, r7, #28
 800b5cc:	4822      	ldr	r0, [pc, #136]	@ (800b658 <motor_control_task+0x140>)
 800b5ce:	f001 fd45 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800b5d2:	f107 0310 	add.w	r3, r7, #16
 800b5d6:	f107 0214 	add.w	r2, r7, #20
 800b5da:	f107 011c 	add.w	r1, r7, #28
 800b5de:	481f      	ldr	r0, [pc, #124]	@ (800b65c <motor_control_task+0x144>)
 800b5e0:	f001 fd3c 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelay(1);
 800b5e4:	2001      	movs	r0, #1
 800b5e6:	f00e fa4d 	bl	8019a84 <vTaskDelay>
			CAN_tx_message.StdId = 0x1FF;
 800b5ea:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b5ee:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800b5f0:	f107 0310 	add.w	r3, r7, #16
 800b5f4:	f107 0214 	add.w	r2, r7, #20
 800b5f8:	f107 011c 	add.w	r1, r7, #28
 800b5fc:	4816      	ldr	r0, [pc, #88]	@ (800b658 <motor_control_task+0x140>)
 800b5fe:	f001 fd2d 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800b602:	f107 0310 	add.w	r3, r7, #16
 800b606:	f107 0214 	add.w	r2, r7, #20
 800b60a:	f107 011c 	add.w	r1, r7, #28
 800b60e:	4813      	ldr	r0, [pc, #76]	@ (800b65c <motor_control_task+0x144>)
 800b610:	f001 fd24 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelay(1);;
 800b614:	2001      	movs	r0, #1
 800b616:	f00e fa35 	bl	8019a84 <vTaskDelay>
			CAN_tx_message.StdId = 0x2FF;
 800b61a:	f240 23ff 	movw	r3, #767	@ 0x2ff
 800b61e:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800b620:	f107 0310 	add.w	r3, r7, #16
 800b624:	f107 0214 	add.w	r2, r7, #20
 800b628:	f107 011c 	add.w	r1, r7, #28
 800b62c:	480a      	ldr	r0, [pc, #40]	@ (800b658 <motor_control_task+0x140>)
 800b62e:	f001 fd15 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800b632:	f107 0310 	add.w	r3, r7, #16
 800b636:	f107 0214 	add.w	r2, r7, #20
 800b63a:	f107 011c 	add.w	r1, r7, #28
 800b63e:	4807      	ldr	r0, [pc, #28]	@ (800b65c <motor_control_task+0x144>)
 800b640:	f001 fd0c 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelayUntil(&start_time, 5);
 800b644:	f107 030c 	add.w	r3, r7, #12
 800b648:	2105      	movs	r1, #5
 800b64a:	4618      	mov	r0, r3
 800b64c:	f00e f99a 	bl	8019984 <vTaskDelayUntil>
			continue;
 800b650:	e1dd      	b.n	800ba0e <motor_control_task+0x4f6>
 800b652:	bf00      	nop
 800b654:	20000838 	.word	0x20000838
 800b658:	20000914 	.word	0x20000914
 800b65c:	2000093c 	.word	0x2000093c
		}
		TickType_t delay = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (enabled_motors & 0x00000F) {
 800b664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b666:	f003 030f 	and.w	r3, r3, #15
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d042      	beq.n	800b6f4 <motor_control_task+0x1dc>
			CAN_tx_message.StdId = 0x200;
 800b66e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b672:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x0].output;
 800b674:	4bb3      	ldr	r3, [pc, #716]	@ (800b944 <motor_control_task+0x42c>)
 800b676:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 800b67a:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800b67c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b680:	121b      	asrs	r3, r3, #8
 800b682:	b21b      	sxth	r3, r3
 800b684:	b2db      	uxtb	r3, r3
 800b686:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800b688:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x1].output;
 800b68e:	4bad      	ldr	r3, [pc, #692]	@ (800b944 <motor_control_task+0x42c>)
 800b690:	f8b3 31d0 	ldrh.w	r3, [r3, #464]	@ 0x1d0
 800b694:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800b696:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b69a:	121b      	asrs	r3, r3, #8
 800b69c:	b21b      	sxth	r3, r3
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800b6a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0x2].output;
 800b6a8:	4ba6      	ldr	r3, [pc, #664]	@ (800b944 <motor_control_task+0x42c>)
 800b6aa:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	@ 0x2c0
 800b6ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800b6b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b6b4:	121b      	asrs	r3, r3, #8
 800b6b6:	b21b      	sxth	r3, r3
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800b6bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0x3].output;
 800b6c2:	4ba0      	ldr	r3, [pc, #640]	@ (800b944 <motor_control_task+0x42c>)
 800b6c4:	f8b3 33b0 	ldrh.w	r3, [r3, #944]	@ 0x3b0
 800b6c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 800b6ca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b6ce:	121b      	asrs	r3, r3, #8
 800b6d0:	b21b      	sxth	r3, r3
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800b6d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800b6dc:	f107 0310 	add.w	r3, r7, #16
 800b6e0:	f107 0214 	add.w	r2, r7, #20
 800b6e4:	f107 011c 	add.w	r1, r7, #28
 800b6e8:	4897      	ldr	r0, [pc, #604]	@ (800b948 <motor_control_task+0x430>)
 800b6ea:	f001 fcb7 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		if (enabled_motors & 0x00F000) {
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d03e      	beq.n	800b77c <motor_control_task+0x264>
			CAN_tx_message.StdId = 0x200;
 800b6fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b702:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x0 + 12].output >> 8;
 800b704:	4b8f      	ldr	r3, [pc, #572]	@ (800b944 <motor_control_task+0x42c>)
 800b706:	f9b3 3c20 	ldrsh.w	r3, [r3, #3104]	@ 0xc20
 800b70a:	121b      	asrs	r3, r3, #8
 800b70c:	b21b      	sxth	r3, r3
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x0 + 12].output;
 800b712:	4b8c      	ldr	r3, [pc, #560]	@ (800b944 <motor_control_task+0x42c>)
 800b714:	f9b3 3c20 	ldrsh.w	r3, [r3, #3104]	@ 0xc20
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = g_can_motors[0x1 + 12].output >> 8;
 800b71c:	4b89      	ldr	r3, [pc, #548]	@ (800b944 <motor_control_task+0x42c>)
 800b71e:	f9b3 3d10 	ldrsh.w	r3, [r3, #3344]	@ 0xd10
 800b722:	121b      	asrs	r3, r3, #8
 800b724:	b21b      	sxth	r3, r3
 800b726:	b2db      	uxtb	r3, r3
 800b728:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = g_can_motors[0x1 + 12].output;
 800b72a:	4b86      	ldr	r3, [pc, #536]	@ (800b944 <motor_control_task+0x42c>)
 800b72c:	f9b3 3d10 	ldrsh.w	r3, [r3, #3344]	@ 0xd10
 800b730:	b2db      	uxtb	r3, r3
 800b732:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0x2 + 12].output >> 8;
 800b734:	4b83      	ldr	r3, [pc, #524]	@ (800b944 <motor_control_task+0x42c>)
 800b736:	f9b3 3e00 	ldrsh.w	r3, [r3, #3584]	@ 0xe00
 800b73a:	121b      	asrs	r3, r3, #8
 800b73c:	b21b      	sxth	r3, r3
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0x2 + 12].output;
 800b742:	4b80      	ldr	r3, [pc, #512]	@ (800b944 <motor_control_task+0x42c>)
 800b744:	f9b3 3e00 	ldrsh.w	r3, [r3, #3584]	@ 0xe00
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0x3 + 12].output >> 8;
 800b74c:	4b7d      	ldr	r3, [pc, #500]	@ (800b944 <motor_control_task+0x42c>)
 800b74e:	f9b3 3ef0 	ldrsh.w	r3, [r3, #3824]	@ 0xef0
 800b752:	121b      	asrs	r3, r3, #8
 800b754:	b21b      	sxth	r3, r3
 800b756:	b2db      	uxtb	r3, r3
 800b758:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0x3 + 12].output;
 800b75a:	4b7a      	ldr	r3, [pc, #488]	@ (800b944 <motor_control_task+0x42c>)
 800b75c:	f9b3 3ef0 	ldrsh.w	r3, [r3, #3824]	@ 0xef0
 800b760:	b2db      	uxtb	r3, r3
 800b762:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800b764:	f107 0310 	add.w	r3, r7, #16
 800b768:	f107 0214 	add.w	r2, r7, #20
 800b76c:	f107 011c 	add.w	r1, r7, #28
 800b770:	4876      	ldr	r0, [pc, #472]	@ (800b94c <motor_control_task+0x434>)
 800b772:	f001 fc73 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800b776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b778:	3301      	adds	r3, #1
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		vTaskDelay(1);
 800b77c:	2001      	movs	r0, #1
 800b77e:	f00e f981 	bl	8019a84 <vTaskDelay>

		if (enabled_motors & 0x0000F0) {
 800b782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d042      	beq.n	800b812 <motor_control_task+0x2fa>
			CAN_tx_message.StdId = 0x1FF;
 800b78c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b790:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x4].output;
 800b792:	4b6c      	ldr	r3, [pc, #432]	@ (800b944 <motor_control_task+0x42c>)
 800b794:	f8b3 34a0 	ldrh.w	r3, [r3, #1184]	@ 0x4a0
 800b798:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800b79a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b79e:	121b      	asrs	r3, r3, #8
 800b7a0:	b21b      	sxth	r3, r3
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800b7a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x5].output;
 800b7ac:	4b65      	ldr	r3, [pc, #404]	@ (800b944 <motor_control_task+0x42c>)
 800b7ae:	f8b3 3590 	ldrh.w	r3, [r3, #1424]	@ 0x590
 800b7b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800b7b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b7b8:	121b      	asrs	r3, r3, #8
 800b7ba:	b21b      	sxth	r3, r3
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800b7c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0x6].output;
 800b7c6:	4b5f      	ldr	r3, [pc, #380]	@ (800b944 <motor_control_task+0x42c>)
 800b7c8:	f8b3 3680 	ldrh.w	r3, [r3, #1664]	@ 0x680
 800b7cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800b7ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b7d2:	121b      	asrs	r3, r3, #8
 800b7d4:	b21b      	sxth	r3, r3
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800b7da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0x7].output;
 800b7e0:	4b58      	ldr	r3, [pc, #352]	@ (800b944 <motor_control_task+0x42c>)
 800b7e2:	f8b3 3770 	ldrh.w	r3, [r3, #1904]	@ 0x770
 800b7e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 800b7e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b7ec:	121b      	asrs	r3, r3, #8
 800b7ee:	b21b      	sxth	r3, r3
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800b7f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800b7fa:	f107 0310 	add.w	r3, r7, #16
 800b7fe:	f107 0214 	add.w	r2, r7, #20
 800b802:	f107 011c 	add.w	r1, r7, #28
 800b806:	4850      	ldr	r0, [pc, #320]	@ (800b948 <motor_control_task+0x430>)
 800b808:	f001 fc28 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800b80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b80e:	3301      	adds	r3, #1
 800b810:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}


		if (enabled_motors & 0x0F0000) {
 800b812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b814:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d04a      	beq.n	800b8b2 <motor_control_task+0x39a>
			CAN_tx_message.StdId = 0x1FF;
 800b81c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b820:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x4 + 12].output >> 8;
 800b822:	4b48      	ldr	r3, [pc, #288]	@ (800b944 <motor_control_task+0x42c>)
 800b824:	f9b3 3fe0 	ldrsh.w	r3, [r3, #4064]	@ 0xfe0
 800b828:	121b      	asrs	r3, r3, #8
 800b82a:	b21b      	sxth	r3, r3
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x4 + 12].output;
 800b830:	4b44      	ldr	r3, [pc, #272]	@ (800b944 <motor_control_task+0x42c>)
 800b832:	f9b3 3fe0 	ldrsh.w	r3, [r3, #4064]	@ 0xfe0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = g_can_motors[0x5 + 12].output >> 8;
 800b83a:	4b42      	ldr	r3, [pc, #264]	@ (800b944 <motor_control_task+0x42c>)
 800b83c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b840:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800b844:	121b      	asrs	r3, r3, #8
 800b846:	b21b      	sxth	r3, r3
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = g_can_motors[0x5 + 12].output;
 800b84c:	4b3d      	ldr	r3, [pc, #244]	@ (800b944 <motor_control_task+0x42c>)
 800b84e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b852:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800b856:	b2db      	uxtb	r3, r3
 800b858:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0x6 + 12].output >> 8;
 800b85a:	4b3a      	ldr	r3, [pc, #232]	@ (800b944 <motor_control_task+0x42c>)
 800b85c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b860:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 800b864:	121b      	asrs	r3, r3, #8
 800b866:	b21b      	sxth	r3, r3
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0x6 + 12].output;
 800b86c:	4b35      	ldr	r3, [pc, #212]	@ (800b944 <motor_control_task+0x42c>)
 800b86e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b872:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 800b876:	b2db      	uxtb	r3, r3
 800b878:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0x7 + 12].output >> 8;
 800b87a:	4b32      	ldr	r3, [pc, #200]	@ (800b944 <motor_control_task+0x42c>)
 800b87c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b880:	f9b3 32b0 	ldrsh.w	r3, [r3, #688]	@ 0x2b0
 800b884:	121b      	asrs	r3, r3, #8
 800b886:	b21b      	sxth	r3, r3
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0x7 + 12].output;
 800b88c:	4b2d      	ldr	r3, [pc, #180]	@ (800b944 <motor_control_task+0x42c>)
 800b88e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b892:	f9b3 32b0 	ldrsh.w	r3, [r3, #688]	@ 0x2b0
 800b896:	b2db      	uxtb	r3, r3
 800b898:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800b89a:	f107 0310 	add.w	r3, r7, #16
 800b89e:	f107 0214 	add.w	r2, r7, #20
 800b8a2:	f107 011c 	add.w	r1, r7, #28
 800b8a6:	4829      	ldr	r0, [pc, #164]	@ (800b94c <motor_control_task+0x434>)
 800b8a8:	f001 fbd8 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800b8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}


		if (enabled_motors & 0x000F00) {
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d049      	beq.n	800b950 <motor_control_task+0x438>
			CAN_tx_message.StdId = 0x2FF;
 800b8bc:	f240 23ff 	movw	r3, #767	@ 0x2ff
 800b8c0:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x8].output;
 800b8c2:	4b20      	ldr	r3, [pc, #128]	@ (800b944 <motor_control_task+0x42c>)
 800b8c4:	f8b3 3860 	ldrh.w	r3, [r3, #2144]	@ 0x860
 800b8c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800b8ca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b8ce:	121b      	asrs	r3, r3, #8
 800b8d0:	b21b      	sxth	r3, r3
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800b8d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x9].output;
 800b8dc:	4b19      	ldr	r3, [pc, #100]	@ (800b944 <motor_control_task+0x42c>)
 800b8de:	f8b3 3950 	ldrh.w	r3, [r3, #2384]	@ 0x950
 800b8e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800b8e4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b8e8:	121b      	asrs	r3, r3, #8
 800b8ea:	b21b      	sxth	r3, r3
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800b8f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0xA].output;
 800b8f6:	4b13      	ldr	r3, [pc, #76]	@ (800b944 <motor_control_task+0x42c>)
 800b8f8:	f8b3 3a40 	ldrh.w	r3, [r3, #2624]	@ 0xa40
 800b8fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800b8fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b902:	121b      	asrs	r3, r3, #8
 800b904:	b21b      	sxth	r3, r3
 800b906:	b2db      	uxtb	r3, r3
 800b908:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800b90a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0xB].output;
 800b910:	4b0c      	ldr	r3, [pc, #48]	@ (800b944 <motor_control_task+0x42c>)
 800b912:	f8b3 3b30 	ldrh.w	r3, [r3, #2864]	@ 0xb30
 800b916:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 800b918:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b91c:	121b      	asrs	r3, r3, #8
 800b91e:	b21b      	sxth	r3, r3
 800b920:	b2db      	uxtb	r3, r3
 800b922:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800b924:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b926:	b2db      	uxtb	r3, r3
 800b928:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800b92a:	f107 0310 	add.w	r3, r7, #16
 800b92e:	f107 0214 	add.w	r2, r7, #20
 800b932:	f107 011c 	add.w	r1, r7, #28
 800b936:	4804      	ldr	r0, [pc, #16]	@ (800b948 <motor_control_task+0x430>)
 800b938:	f001 fb90 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800b93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b93e:	3301      	adds	r3, #1
 800b940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b942:	e005      	b.n	800b950 <motor_control_task+0x438>
 800b944:	20002220 	.word	0x20002220
 800b948:	20000914 	.word	0x20000914
 800b94c:	2000093c 	.word	0x2000093c
		}

		if (enabled_motors & 0xF00000) {
 800b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b952:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d04e      	beq.n	800b9f8 <motor_control_task+0x4e0>
			CAN_tx_message.StdId = 0x2FF;
 800b95a:	f240 23ff 	movw	r3, #767	@ 0x2ff
 800b95e:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x8 + 12].output >> 8;
 800b960:	4b2b      	ldr	r3, [pc, #172]	@ (800ba10 <motor_control_task+0x4f8>)
 800b962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b966:	f9b3 33a0 	ldrsh.w	r3, [r3, #928]	@ 0x3a0
 800b96a:	121b      	asrs	r3, r3, #8
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x8 + 12].output;
 800b972:	4b27      	ldr	r3, [pc, #156]	@ (800ba10 <motor_control_task+0x4f8>)
 800b974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b978:	f9b3 33a0 	ldrsh.w	r3, [r3, #928]	@ 0x3a0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] =  g_can_motors[0x9 + 12].output >> 8;
 800b980:	4b23      	ldr	r3, [pc, #140]	@ (800ba10 <motor_control_task+0x4f8>)
 800b982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b986:	f9b3 3490 	ldrsh.w	r3, [r3, #1168]	@ 0x490
 800b98a:	121b      	asrs	r3, r3, #8
 800b98c:	b21b      	sxth	r3, r3
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] =  g_can_motors[0x9 + 12].output;
 800b992:	4b1f      	ldr	r3, [pc, #124]	@ (800ba10 <motor_control_task+0x4f8>)
 800b994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b998:	f9b3 3490 	ldrsh.w	r3, [r3, #1168]	@ 0x490
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0xA + 12].output >> 8;
 800b9a0:	4b1b      	ldr	r3, [pc, #108]	@ (800ba10 <motor_control_task+0x4f8>)
 800b9a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9a6:	f9b3 3580 	ldrsh.w	r3, [r3, #1408]	@ 0x580
 800b9aa:	121b      	asrs	r3, r3, #8
 800b9ac:	b21b      	sxth	r3, r3
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0xA + 12].output;
 800b9b2:	4b17      	ldr	r3, [pc, #92]	@ (800ba10 <motor_control_task+0x4f8>)
 800b9b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9b8:	f9b3 3580 	ldrsh.w	r3, [r3, #1408]	@ 0x580
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0xB + 12].output >> 8;
 800b9c0:	4b13      	ldr	r3, [pc, #76]	@ (800ba10 <motor_control_task+0x4f8>)
 800b9c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9c6:	f9b3 3670 	ldrsh.w	r3, [r3, #1648]	@ 0x670
 800b9ca:	121b      	asrs	r3, r3, #8
 800b9cc:	b21b      	sxth	r3, r3
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0xB + 12].output;
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba10 <motor_control_task+0x4f8>)
 800b9d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9d8:	f9b3 3670 	ldrsh.w	r3, [r3, #1648]	@ 0x670
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800b9e0:	f107 0310 	add.w	r3, r7, #16
 800b9e4:	f107 0214 	add.w	r2, r7, #20
 800b9e8:	f107 011c 	add.w	r1, r7, #28
 800b9ec:	4809      	ldr	r0, [pc, #36]	@ (800ba14 <motor_control_task+0x4fc>)
 800b9ee:	f001 fb35 	bl	800d05c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800b9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		delay = (delay > 5) ? delay : 5;
 800b9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9fa:	2b05      	cmp	r3, #5
 800b9fc:	bf38      	it	cc
 800b9fe:	2305      	movcc	r3, #5
 800ba00:	63fb      	str	r3, [r7, #60]	@ 0x3c
//		last_time = get_microseconds();
		vTaskDelayUntil(&start_time, 2);
 800ba02:	f107 030c 	add.w	r3, r7, #12
 800ba06:	2102      	movs	r1, #2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f00d ffbb 	bl	8019984 <vTaskDelayUntil>
	while (1) {
 800ba0e:	e5bb      	b.n	800b588 <motor_control_task+0x70>
 800ba10:	20002220 	.word	0x20002220
 800ba14:	2000093c 	.word	0x2000093c

0800ba18 <motors_process_task>:
double rev[24] = {0};
extern float motorOutRatio;



void motors_process_task(void *argument) {
 800ba18:	b5b0      	push	{r4, r5, r7, lr}
 800ba1a:	b08e      	sub	sp, #56	@ 0x38
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	double starttime = 0;
 800ba20:	f04f 0200 	mov.w	r2, #0
 800ba24:	f04f 0300 	mov.w	r3, #0
 800ba28:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double endtime = 0;
 800ba2c:	f04f 0200 	mov.w	r2, #0
 800ba30:	f04f 0300 	mov.w	r3, #0
 800ba34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double dt;
	vTaskDelay(5);
 800ba38:	2005      	movs	r0, #5
 800ba3a:	f00e f823 	bl	8019a84 <vTaskDelay>
	double leftWheel_offset = (double)g_can_motors[LEFT_MOTOR_ID-1].raw_data.angle[0];
 800ba3e:	4b7c      	ldr	r3, [pc, #496]	@ (800bc30 <motors_process_task+0x218>)
 800ba40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7f4 fd6d 	bl	8000524 <__aeabi_i2d>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double rightWheel_offset = (double)g_can_motors[RIGHT_MOTOR_ID-1].raw_data.angle[0];
 800ba52:	4b77      	ldr	r3, [pc, #476]	@ (800bc30 <motors_process_task+0x218>)
 800ba54:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	@ 0xf4
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7f4 fd63 	bl	8000524 <__aeabi_i2d>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	e9c7 2306 	strd	r2, r3, [r7, #24]
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.kp = 500;
 800ba66:	4b72      	ldr	r3, [pc, #456]	@ (800bc30 <motors_process_task+0x218>)
 800ba68:	4a72      	ldr	r2, [pc, #456]	@ (800bc34 <motors_process_task+0x21c>)
 800ba6a:	639a      	str	r2, [r3, #56]	@ 0x38
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.kp = 500;
 800ba6c:	4b70      	ldr	r3, [pc, #448]	@ (800bc30 <motors_process_task+0x218>)
 800ba6e:	4a71      	ldr	r2, [pc, #452]	@ (800bc34 <motors_process_task+0x21c>)
 800ba70:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.ki = 0;
 800ba74:	4b6e      	ldr	r3, [pc, #440]	@ (800bc30 <motors_process_task+0x218>)
 800ba76:	f04f 0200 	mov.w	r2, #0
 800ba7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.ki = 0;
 800ba7c:	4b6c      	ldr	r3, [pc, #432]	@ (800bc30 <motors_process_task+0x218>)
 800ba7e:	f04f 0200 	mov.w	r2, #0
 800ba82:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.kd = 0;
 800ba86:	4b6a      	ldr	r3, [pc, #424]	@ (800bc30 <motors_process_task+0x218>)
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	641a      	str	r2, [r3, #64]	@ 0x40
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.kd = 0;
 800ba8e:	4b68      	ldr	r3, [pc, #416]	@ (800bc30 <motors_process_task+0x218>)
 800ba90:	f04f 0200 	mov.w	r2, #0
 800ba94:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.max_out = 2000;
 800ba98:	4b65      	ldr	r3, [pc, #404]	@ (800bc30 <motors_process_task+0x218>)
 800ba9a:	4a67      	ldr	r2, [pc, #412]	@ (800bc38 <motors_process_task+0x220>)
 800ba9c:	655a      	str	r2, [r3, #84]	@ 0x54
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.max_out = 2000;
 800ba9e:	4b64      	ldr	r3, [pc, #400]	@ (800bc30 <motors_process_task+0x218>)
 800baa0:	4a65      	ldr	r2, [pc, #404]	@ (800bc38 <motors_process_task+0x220>)
 800baa2:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    TickType_t start_time;
    while (1) {
        endtime = get_microseconds();
 800baa6:	f7f6 fb8b 	bl	80021c0 <get_microseconds>
 800baaa:	4603      	mov	r3, r0
 800baac:	4618      	mov	r0, r3
 800baae:	f7f4 fd29 	bl	8000504 <__aeabi_ui2d>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        dt = endtime - starttime;
 800baba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800babe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bac2:	f7f4 fbe1 	bl	8000288 <__aeabi_dsub>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	e9c7 2304 	strd	r2, r3, [r7, #16]
        start_time = xTaskGetTickCount();
 800bace:	f00e f92d 	bl	8019d2c <xTaskGetTickCount>
 800bad2:	4603      	mov	r3, r0
 800bad4:	60fb      	str	r3, [r7, #12]
        raw_angle_to_rad(g_can_motors); // Pass the array directly
 800bad6:	4856      	ldr	r0, [pc, #344]	@ (800bc30 <motors_process_task+0x218>)
 800bad8:	f000 f8ca 	bl	800bc70 <raw_angle_to_rad>
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FR_MOTOR_ID-1], 0.95, -1);
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FL_MOTOR_ID-1], 0, 1);
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BL_MOTOR_ID-1], 4.19, -1);
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BR_MOTOR_ID-1], 0, 1);

        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FR_MOTOR_ID-1], PI/2, 1);
 800badc:	2101      	movs	r1, #1
 800bade:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 800bc3c <motors_process_task+0x224>
 800bae2:	4857      	ldr	r0, [pc, #348]	@ (800bc40 <motors_process_task+0x228>)
 800bae4:	f000 f94c 	bl	800bd80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FL_MOTOR_ID-1], 0.51, 1);
 800bae8:	2101      	movs	r1, #1
 800baea:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 800bc44 <motors_process_task+0x22c>
 800baee:	4856      	ldr	r0, [pc, #344]	@ (800bc48 <motors_process_task+0x230>)
 800baf0:	f000 f946 	bl	800bd80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BL_MOTOR_ID-1], -3.11+PI/2, 1);
 800baf4:	2101      	movs	r1, #1
 800baf6:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800bc4c <motors_process_task+0x234>
 800bafa:	4855      	ldr	r0, [pc, #340]	@ (800bc50 <motors_process_task+0x238>)
 800bafc:	f000 f940 	bl	800bd80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BR_MOTOR_ID-1], -5.75, 1);
 800bb00:	2101      	movs	r1, #1
 800bb02:	eeb9 0a07 	vmov.f32	s0, #151	@ 0xc0b80000 -5.750
 800bb06:	4853      	ldr	r0, [pc, #332]	@ (800bc54 <motors_process_task+0x23c>)
 800bb08:	f000 f93a 	bl	800bd80 <motors_raw_angle_to_desired_angle_dir>

        motors_raw_angle_to_desired_angle_dir(&g_can_motors[LEFT_MOTOR_ID-1], 0, -1);
 800bb0c:	f04f 31ff 	mov.w	r1, #4294967295
 800bb10:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 800bc58 <motors_process_task+0x240>
 800bb14:	4846      	ldr	r0, [pc, #280]	@ (800bc30 <motors_process_task+0x218>)
 800bb16:	f000 f933 	bl	800bd80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[RIGHT_MOTOR_ID-1], 0, 1);
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 800bc58 <motors_process_task+0x240>
 800bb20:	484e      	ldr	r0, [pc, #312]	@ (800bc5c <motors_process_task+0x244>)
 800bb22:	f000 f92d 	bl	800bd80 <motors_raw_angle_to_desired_angle_dir>

        motors_torque_to_current_6020(&g_can_motors[FR_MOTOR_ID-1],0,-1.0);
 800bb26:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 800bc20 <motors_process_task+0x208>
 800bb2a:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800bc58 <motors_process_task+0x240>
 800bb2e:	4844      	ldr	r0, [pc, #272]	@ (800bc40 <motors_process_task+0x228>)
 800bb30:	f000 f986 	bl	800be40 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&g_can_motors[FL_MOTOR_ID-1],0,-1.0);
 800bb34:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 800bc20 <motors_process_task+0x208>
 800bb38:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800bc58 <motors_process_task+0x240>
 800bb3c:	4842      	ldr	r0, [pc, #264]	@ (800bc48 <motors_process_task+0x230>)
 800bb3e:	f000 f97f 	bl	800be40 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&g_can_motors[BL_MOTOR_ID-1],0,1.0);
 800bb42:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 800bc28 <motors_process_task+0x210>
 800bb46:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800bc58 <motors_process_task+0x240>
 800bb4a:	4841      	ldr	r0, [pc, #260]	@ (800bc50 <motors_process_task+0x238>)
 800bb4c:	f000 f978 	bl	800be40 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&g_can_motors[BR_MOTOR_ID-1],0,1.0);
 800bb50:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 800bc28 <motors_process_task+0x210>
 800bb54:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800bc58 <motors_process_task+0x240>
 800bb58:	483e      	ldr	r0, [pc, #248]	@ (800bc54 <motors_process_task+0x23c>)
 800bb5a:	f000 f971 	bl	800be40 <motors_torque_to_current_6020>

        motors_torque_to_current_3508_gearbox(&g_can_motors[RIGHT_MOTOR_ID-1],15,1.0);
 800bb5e:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 800bc28 <motors_process_task+0x210>
 800bb62:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800bb66:	483d      	ldr	r0, [pc, #244]	@ (800bc5c <motors_process_task+0x244>)
 800bb68:	f000 f9f6 	bl	800bf58 <motors_torque_to_current_3508_gearbox>
        motors_torque_to_current_3508_gearbox(&g_can_motors[LEFT_MOTOR_ID-1],15,-1.0);
 800bb6c:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 800bc20 <motors_process_task+0x208>
 800bb70:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800bb74:	482e      	ldr	r0, [pc, #184]	@ (800bc30 <motors_process_task+0x218>)
 800bb76:	f000 f9ef 	bl	800bf58 <motors_torque_to_current_3508_gearbox>


        speed_pid((double)g_can_motors[LEFT_MOTOR_ID-1].torque ,(double)g_can_motors[LEFT_MOTOR_ID-1].raw_data.rpm/1000, &g_can_motors[LEFT_MOTOR_ID-1].rpm_pid);
 800bb7a:	4b2d      	ldr	r3, [pc, #180]	@ (800bc30 <motors_process_task+0x218>)
 800bb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7f4 fce2 	bl	8000548 <__aeabi_f2d>
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	4b29      	ldr	r3, [pc, #164]	@ (800bc30 <motors_process_task+0x218>)
 800bb8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f4 fcc8 	bl	8000524 <__aeabi_i2d>
 800bb94:	f04f 0200 	mov.w	r2, #0
 800bb98:	4b31      	ldr	r3, [pc, #196]	@ (800bc60 <motors_process_task+0x248>)
 800bb9a:	f7f4 fe57 	bl	800084c <__aeabi_ddiv>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	ec43 2b17 	vmov	d7, r2, r3
 800bba6:	482f      	ldr	r0, [pc, #188]	@ (800bc64 <motors_process_task+0x24c>)
 800bba8:	eeb0 1a47 	vmov.f32	s2, s14
 800bbac:	eef0 1a67 	vmov.f32	s3, s15
 800bbb0:	ec45 4b10 	vmov	d0, r4, r5
 800bbb4:	f7ff fbda 	bl	800b36c <speed_pid>
        speed_pid((double)g_can_motors[RIGHT_MOTOR_ID-1].torque ,(double)g_can_motors[RIGHT_MOTOR_ID-1].raw_data.rpm/1000, &g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid);
 800bbb8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc30 <motors_process_task+0x218>)
 800bbba:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f4 fcc2 	bl	8000548 <__aeabi_f2d>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	4b19      	ldr	r3, [pc, #100]	@ (800bc30 <motors_process_task+0x218>)
 800bbca:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f4 fca8 	bl	8000524 <__aeabi_i2d>
 800bbd4:	f04f 0200 	mov.w	r2, #0
 800bbd8:	4b21      	ldr	r3, [pc, #132]	@ (800bc60 <motors_process_task+0x248>)
 800bbda:	f7f4 fe37 	bl	800084c <__aeabi_ddiv>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	ec43 2b17 	vmov	d7, r2, r3
 800bbe6:	4820      	ldr	r0, [pc, #128]	@ (800bc68 <motors_process_task+0x250>)
 800bbe8:	eeb0 1a47 	vmov.f32	s2, s14
 800bbec:	eef0 1a67 	vmov.f32	s3, s15
 800bbf0:	ec45 4b10 	vmov	d0, r4, r5
 800bbf4:	f7ff fbba 	bl	800b36c <speed_pid>
//        g_can_motors[LEFT_MOTOR_ID-1].output = g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.output;
//        g_can_motors[RIGHT_MOTOR_ID-1].output = g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.output;
        starttime = get_microseconds();
 800bbf8:	f7f6 fae2 	bl	80021c0 <get_microseconds>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7f4 fc80 	bl	8000504 <__aeabi_ui2d>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30




        vTaskDelayUntil(&start_time, 5);
 800bc0c:	f107 030c 	add.w	r3, r7, #12
 800bc10:	2105      	movs	r1, #5
 800bc12:	4618      	mov	r0, r3
 800bc14:	f00d feb6 	bl	8019984 <vTaskDelayUntil>
        endtime = get_microseconds();
 800bc18:	bf00      	nop
 800bc1a:	e744      	b.n	800baa6 <motors_process_task+0x8e>
 800bc1c:	f3af 8000 	nop.w
 800bc20:	00000000 	.word	0x00000000
 800bc24:	bff00000 	.word	0xbff00000
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	3ff00000 	.word	0x3ff00000
 800bc30:	20002220 	.word	0x20002220
 800bc34:	43fa0000 	.word	0x43fa0000
 800bc38:	44fa0000 	.word	0x44fa0000
 800bc3c:	3fc90fdb 	.word	0x3fc90fdb
 800bc40:	200025e0 	.word	0x200025e0
 800bc44:	3f028f5c 	.word	0x3f028f5c
 800bc48:	200026d0 	.word	0x200026d0
 800bc4c:	bfc504a0 	.word	0xbfc504a0
 800bc50:	200027c0 	.word	0x200027c0
 800bc54:	200028b0 	.word	0x200028b0
 800bc58:	00000000 	.word	0x00000000
 800bc5c:	20002310 	.word	0x20002310
 800bc60:	408f4000 	.word	0x408f4000
 800bc64:	20002258 	.word	0x20002258
 800bc68:	20002348 	.word	0x20002348
 800bc6c:	00000000 	.word	0x00000000

0800bc70 <raw_angle_to_rad>:
    }
}

void raw_angle_to_rad(motor_data_t motor[]) { // Change the parameter to accept an array
 800bc70:	b590      	push	{r4, r7, lr}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	e06b      	b.n	800bd56 <raw_angle_to_rad+0xe6>
        // Update moving average history
        double continuous_angle = motor[i].raw_data.angle[0] + (-motor[i].angle_data.rev*8192);
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4613      	mov	r3, r2
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	461a      	mov	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bc92:	4619      	mov	r1, r3
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	4613      	mov	r3, r2
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4413      	add	r3, r2
 800bca4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800bca8:	4613      	mov	r3, r2
 800bcaa:	04db      	lsls	r3, r3, #19
 800bcac:	1a9b      	subs	r3, r3, r2
 800bcae:	035b      	lsls	r3, r3, #13
 800bcb0:	440b      	add	r3, r1
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f4 fc36 	bl	8000524 <__aeabi_i2d>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor[i].raw_angle_rad = (continuous_angle / 8191.0) * 2 * PI;
 800bcc0:	a32a      	add	r3, pc, #168	@ (adr r3, 800bd6c <raw_angle_to_rad+0xfc>)
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcca:	f7f4 fdbf 	bl	800084c <__aeabi_ddiv>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	f7f4 fad7 	bl	800028c <__adddf3>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4610      	mov	r0, r2
 800bce4:	4619      	mov	r1, r3
 800bce6:	a323      	add	r3, pc, #140	@ (adr r3, 800bd74 <raw_angle_to_rad+0x104>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fc84 	bl	80005f8 <__aeabi_dmul>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	1a9b      	subs	r3, r3, r2
 800bd00:	011b      	lsls	r3, r3, #4
 800bd02:	461a      	mov	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	189c      	adds	r4, r3, r2
 800bd08:	f7f4 ff6e 	bl	8000be8 <__aeabi_d2f>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	6123      	str	r3, [r4, #16]
        motor[i].raw_angle_deg = (continuous_angle / 8191.0) * 360;
 800bd10:	a316      	add	r3, pc, #88	@ (adr r3, 800bd6c <raw_angle_to_rad+0xfc>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd1a:	f7f4 fd97 	bl	800084c <__aeabi_ddiv>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4610      	mov	r0, r2
 800bd24:	4619      	mov	r1, r3
 800bd26:	f04f 0200 	mov.w	r2, #0
 800bd2a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd68 <raw_angle_to_rad+0xf8>)
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4610      	mov	r0, r2
 800bd36:	4619      	mov	r1, r3
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	1a9b      	subs	r3, r3, r2
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	461a      	mov	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	189c      	adds	r4, r3, r2
 800bd48:	f7f4 ff4e 	bl	8000be8 <__aeabi_d2f>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < 24; i++) {
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	3301      	adds	r3, #1
 800bd54:	617b      	str	r3, [r7, #20]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2b17      	cmp	r3, #23
 800bd5a:	dd90      	ble.n	800bc7e <raw_angle_to_rad+0xe>
    }
}
 800bd5c:	bf00      	nop
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd90      	pop	{r4, r7, pc}
 800bd66:	bf00      	nop
 800bd68:	40768000 	.word	0x40768000
 800bd6c:	00000000 	.word	0x00000000
 800bd70:	40bfff00 	.word	0x40bfff00
 800bd74:	60000000 	.word	0x60000000
 800bd78:	400921fb 	.word	0x400921fb
 800bd7c:	00000000 	.word	0x00000000

0800bd80 <motors_raw_angle_to_desired_angle_dir>:

void motors_raw_angle_to_desired_angle_dir(motor_data_t *motor, float offset, int dir) {
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd8c:	6079      	str	r1, [r7, #4]
    if (dir == -1) {
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd94:	d11b      	bne.n	800bdce <motors_raw_angle_to_desired_angle_dir+0x4e>
        motor->angle_rad = -motor->raw_angle_rad + offset;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd9c:	ed97 7a02 	vldr	s14, [r7, #8]
 800bda0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	edc3 7a06 	vstr	s15, [r3, #24]
        motor->speed = -motor->raw_data.rpm * 0.10472;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bdb0:	425b      	negs	r3, r3
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f4 fbb6 	bl	8000524 <__aeabi_i2d>
 800bdb8:	a31d      	add	r3, pc, #116	@ (adr r3, 800be30 <motors_raw_angle_to_desired_angle_dir+0xb0>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fc1b 	bl	80005f8 <__aeabi_dmul>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800bdcc:	e019      	b.n	800be02 <motors_raw_angle_to_desired_angle_dir+0x82>
    } else {
        motor->angle_rad = motor->raw_angle_rad + offset;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	ed93 7a04 	vldr	s14, [r3, #16]
 800bdd4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	edc3 7a06 	vstr	s15, [r3, #24]
        motor->speed = motor->raw_data.rpm * 0.10472;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f4 fb9b 	bl	8000524 <__aeabi_i2d>
 800bdee:	a310      	add	r3, pc, #64	@ (adr r3, 800be30 <motors_raw_angle_to_desired_angle_dir+0xb0>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f7f4 fc00 	bl	80005f8 <__aeabi_dmul>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
    motor->angle_deg = motor->angle_rad * (180.0 / PI); // Update the degree value as well
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	4618      	mov	r0, r3
 800be08:	f7f4 fb9e 	bl	8000548 <__aeabi_f2d>
 800be0c:	a30a      	add	r3, pc, #40	@ (adr r3, 800be38 <motors_raw_angle_to_desired_angle_dir+0xb8>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 fbf1 	bl	80005f8 <__aeabi_dmul>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4610      	mov	r0, r2
 800be1c:	4619      	mov	r1, r3
 800be1e:	f7f4 fee3 	bl	8000be8 <__aeabi_d2f>
 800be22:	4602      	mov	r2, r0
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	61da      	str	r2, [r3, #28]

}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	0f3cb3e5 	.word	0x0f3cb3e5
 800be34:	3fbaceee 	.word	0x3fbaceee
 800be38:	0d03cf26 	.word	0x0d03cf26
 800be3c:	404ca5dc 	.word	0x404ca5dc

0800be40 <motors_torque_to_current_6020>:

void motors_torque_to_current_6020(motor_data_t *motor, float deadzone,double dir) {
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	ed87 0a02 	vstr	s0, [r7, #8]
 800be4c:	ed87 1b00 	vstr	d1, [r7]
	double current = 0;
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	f04f 0300 	mov.w	r3, #0
 800be58:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (motor->torque > 0){
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800be62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6a:	dd17      	ble.n	800be9c <motors_torque_to_current_6020+0x5c>
		current = 1.8 * motor->torque + 0.2;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be70:	4618      	mov	r0, r3
 800be72:	f7f4 fb69 	bl	8000548 <__aeabi_f2d>
 800be76:	a333      	add	r3, pc, #204	@ (adr r3, 800bf44 <motors_torque_to_current_6020+0x104>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4610      	mov	r0, r2
 800be86:	4619      	mov	r1, r3
 800be88:	a330      	add	r3, pc, #192	@ (adr r3, 800bf4c <motors_torque_to_current_6020+0x10c>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 f9fd 	bl	800028c <__adddf3>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800be9a:	e025      	b.n	800bee8 <motors_torque_to_current_6020+0xa8>
	} else if(motor->torque < 0){
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800bea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beaa:	d517      	bpl.n	800bedc <motors_torque_to_current_6020+0x9c>
		current = 1.8 * motor->torque - 0.2;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7f4 fb49 	bl	8000548 <__aeabi_f2d>
 800beb6:	a323      	add	r3, pc, #140	@ (adr r3, 800bf44 <motors_torque_to_current_6020+0x104>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f7f4 fb9c 	bl	80005f8 <__aeabi_dmul>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4610      	mov	r0, r2
 800bec6:	4619      	mov	r1, r3
 800bec8:	a320      	add	r3, pc, #128	@ (adr r3, 800bf4c <motors_torque_to_current_6020+0x10c>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	f7f4 f9db 	bl	8000288 <__aeabi_dsub>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800beda:	e005      	b.n	800bee8 <motors_torque_to_current_6020+0xa8>
	} else{
		current = 0;
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	motor->output = ((current * dir)/3.0)*16385.0;
 800bee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bef0:	f7f4 fb82 	bl	80005f8 <__aeabi_dmul>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4610      	mov	r0, r2
 800befa:	4619      	mov	r1, r3
 800befc:	f04f 0200 	mov.w	r2, #0
 800bf00:	4b0f      	ldr	r3, [pc, #60]	@ (800bf40 <motors_torque_to_current_6020+0x100>)
 800bf02:	f7f4 fca3 	bl	800084c <__aeabi_ddiv>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	a30a      	add	r3, pc, #40	@ (adr r3, 800bf38 <motors_torque_to_current_6020+0xf8>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 fb70 	bl	80005f8 <__aeabi_dmul>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f7f4 fe1a 	bl	8000b58 <__aeabi_d2iz>
 800bf24:	4603      	mov	r3, r0
 800bf26:	b21a      	sxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
}
 800bf2e:	bf00      	nop
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	00000000 	.word	0x00000000
 800bf3c:	40d00040 	.word	0x40d00040
 800bf40:	40080000 	.word	0x40080000
 800bf44:	cccccccd 	.word	0xcccccccd
 800bf48:	3ffccccc 	.word	0x3ffccccc
 800bf4c:	9999999a 	.word	0x9999999a
 800bf50:	3fc99999 	.word	0x3fc99999
 800bf54:	00000000 	.word	0x00000000

0800bf58 <motors_torque_to_current_3508_gearbox>:
void motors_torque_to_current_3508_gearbox(motor_data_t *motor, float maxCurrent,double dir) {
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	ed87 0a02 	vstr	s0, [r7, #8]
 800bf64:	ed87 1b00 	vstr	d1, [r7]
	double current = 0;
 800bf68:	f04f 0200 	mov.w	r2, #0
 800bf6c:	f04f 0300 	mov.w	r3, #0
 800bf70:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (motor->torque > 0){
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800bf7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf82:	dd20      	ble.n	800bfc6 <motors_torque_to_current_3508_gearbox+0x6e>
		current = (motor->torque / 4.5) * 20 + 0.08;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7f4 fadd 	bl	8000548 <__aeabi_f2d>
 800bf8e:	f04f 0200 	mov.w	r2, #0
 800bf92:	4b55      	ldr	r3, [pc, #340]	@ (800c0e8 <motors_torque_to_current_3508_gearbox+0x190>)
 800bf94:	f7f4 fc5a 	bl	800084c <__aeabi_ddiv>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	4b51      	ldr	r3, [pc, #324]	@ (800c0ec <motors_torque_to_current_3508_gearbox+0x194>)
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	a349      	add	r3, pc, #292	@ (adr r3, 800c0d8 <motors_torque_to_current_3508_gearbox+0x180>)
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f7f4 f968 	bl	800028c <__adddf3>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bfc4:	e02e      	b.n	800c024 <motors_torque_to_current_3508_gearbox+0xcc>
	} else if(motor->torque < 0){
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800bfcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd4:	d520      	bpl.n	800c018 <motors_torque_to_current_3508_gearbox+0xc0>
		current = (motor->torque / 4.5) * 20 - 0.08;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7f4 fab4 	bl	8000548 <__aeabi_f2d>
 800bfe0:	f04f 0200 	mov.w	r2, #0
 800bfe4:	4b40      	ldr	r3, [pc, #256]	@ (800c0e8 <motors_torque_to_current_3508_gearbox+0x190>)
 800bfe6:	f7f4 fc31 	bl	800084c <__aeabi_ddiv>
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	4610      	mov	r0, r2
 800bff0:	4619      	mov	r1, r3
 800bff2:	f04f 0200 	mov.w	r2, #0
 800bff6:	4b3d      	ldr	r3, [pc, #244]	@ (800c0ec <motors_torque_to_current_3508_gearbox+0x194>)
 800bff8:	f7f4 fafe 	bl	80005f8 <__aeabi_dmul>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4610      	mov	r0, r2
 800c002:	4619      	mov	r1, r3
 800c004:	a334      	add	r3, pc, #208	@ (adr r3, 800c0d8 <motors_torque_to_current_3508_gearbox+0x180>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c016:	e005      	b.n	800c024 <motors_torque_to_current_3508_gearbox+0xcc>
	} else{
		current = 0;
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	if (current > maxCurrent){
 800c024:	68b8      	ldr	r0, [r7, #8]
 800c026:	f7f4 fa8f 	bl	8000548 <__aeabi_f2d>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c032:	f7f4 fd71 	bl	8000b18 <__aeabi_dcmpgt>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d007      	beq.n	800c04c <motors_torque_to_current_3508_gearbox+0xf4>
		current = maxCurrent;
 800c03c:	68b8      	ldr	r0, [r7, #8]
 800c03e:	f7f4 fa83 	bl	8000548 <__aeabi_f2d>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c04a:	e01e      	b.n	800c08a <motors_torque_to_current_3508_gearbox+0x132>
	} else if(current < -maxCurrent){
 800c04c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c050:	eef1 7a67 	vneg.f32	s15, s15
 800c054:	ee17 3a90 	vmov	r3, s15
 800c058:	4618      	mov	r0, r3
 800c05a:	f7f4 fa75 	bl	8000548 <__aeabi_f2d>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c066:	f7f4 fd39 	bl	8000adc <__aeabi_dcmplt>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00c      	beq.n	800c08a <motors_torque_to_current_3508_gearbox+0x132>
		current = -maxCurrent;
 800c070:	edd7 7a02 	vldr	s15, [r7, #8]
 800c074:	eef1 7a67 	vneg.f32	s15, s15
 800c078:	ee17 3a90 	vmov	r3, s15
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7f4 fa63 	bl	8000548 <__aeabi_f2d>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	motor->output = ((current * dir)/20.0)*16385.0;
 800c08a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c08e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c092:	f7f4 fab1 	bl	80005f8 <__aeabi_dmul>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4610      	mov	r0, r2
 800c09c:	4619      	mov	r1, r3
 800c09e:	f04f 0200 	mov.w	r2, #0
 800c0a2:	4b12      	ldr	r3, [pc, #72]	@ (800c0ec <motors_torque_to_current_3508_gearbox+0x194>)
 800c0a4:	f7f4 fbd2 	bl	800084c <__aeabi_ddiv>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	a30b      	add	r3, pc, #44	@ (adr r3, 800c0e0 <motors_torque_to_current_3508_gearbox+0x188>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 fa9f 	bl	80005f8 <__aeabi_dmul>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4610      	mov	r0, r2
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f7f4 fd49 	bl	8000b58 <__aeabi_d2iz>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	b21a      	sxth	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
}
 800c0d0:	bf00      	nop
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	47ae147b 	.word	0x47ae147b
 800c0dc:	3fb47ae1 	.word	0x3fb47ae1
 800c0e0:	00000000 	.word	0x00000000
 800c0e4:	40d00040 	.word	0x40d00040
 800c0e8:	40120000 	.word	0x40120000
 800c0ec:	40340000 	.word	0x40340000

0800c0f0 <referee_processing_task>:
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;

queue_t referee_uart_q;

void referee_processing_task(void *argument) {
 800c0f0:	b5b0      	push	{r4, r5, r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
	g_referee_limiters.robot_level = 0;
 800c0f8:	4ba3      	ldr	r3, [pc, #652]	@ (800c388 <referee_processing_task+0x298>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	731a      	strb	r2, [r3, #12]
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	g_referee_limiters.feeding_speed = LV1_FEEDER;
 800c0fe:	4ba2      	ldr	r3, [pc, #648]	@ (800c388 <referee_processing_task+0x298>)
 800c100:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800c104:	801a      	strh	r2, [r3, #0]
	g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800c106:	4ba0      	ldr	r3, [pc, #640]	@ (800c388 <referee_processing_task+0x298>)
 800c108:	2213      	movs	r2, #19
 800c10a:	805a      	strh	r2, [r3, #2]
//	g_referee_limiters.wheel_power_limit = LV1_POWER;
	g_referee_limiters.robot_level = 1;
 800c10c:	4b9e      	ldr	r3, [pc, #632]	@ (800c388 <referee_processing_task+0x298>)
 800c10e:	2201      	movs	r2, #1
 800c110:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 800c112:	2100      	movs	r1, #0
 800c114:	2007      	movs	r0, #7
 800c116:	f7f5 ff4f 	bl	8001fb8 <status_led>
	status_led(8, off_led);
 800c11a:	2101      	movs	r1, #1
 800c11c:	2008      	movs	r0, #8
 800c11e:	f7f5 ff4b 	bl	8001fb8 <status_led>
	ref_robot_data.robot_id = 0;
 800c122:	4b9a      	ldr	r3, [pc, #616]	@ (800c38c <referee_processing_task+0x29c>)
 800c124:	2200      	movs	r2, #0
 800c126:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800c128:	f107 0108 	add.w	r1, r7, #8
 800c12c:	4b98      	ldr	r3, [pc, #608]	@ (800c390 <referee_processing_task+0x2a0>)
 800c12e:	2202      	movs	r2, #2
 800c130:	4898      	ldr	r0, [pc, #608]	@ (800c394 <referee_processing_task+0x2a4>)
 800c132:	f7f6 fcff 	bl	8002b34 <ref_usart_start>
	while (1) {

		uint8_t has_data = ulTaskNotifyTake(pdTRUE, 1000);
 800c136:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c13a:	2001      	movs	r0, #1
 800c13c:	f00e fa72 	bl	801a624 <ulTaskNotifyTake>
 800c140:	4603      	mov	r3, r0
 800c142:	75fb      	strb	r3, [r7, #23]
		status_led(5, on_led);
 800c144:	2100      	movs	r1, #0
 800c146:	2005      	movs	r0, #5
 800c148:	f7f5 ff36 	bl	8001fb8 <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 800c14c:	4890      	ldr	r0, [pc, #576]	@ (800c390 <referee_processing_task+0x2a0>)
 800c14e:	f7f6 f894 	bl	800227a <queue_get_size>
 800c152:	4603      	mov	r3, r0
 800c154:	2b07      	cmp	r3, #7
 800c156:	f240 80b8 	bls.w	800c2ca <referee_processing_task+0x1da>
			while (queue_get_size(&referee_uart_q) > 7) {
 800c15a:	e0ad      	b.n	800c2b8 <referee_processing_task+0x1c8>
				proc_status = ref_process_data(&referee_uart_q, &g_ref_msg_buffer);
 800c15c:	498e      	ldr	r1, [pc, #568]	@ (800c398 <referee_processing_task+0x2a8>)
 800c15e:	488c      	ldr	r0, [pc, #560]	@ (800c390 <referee_processing_task+0x2a0>)
 800c160:	f7f6 f9f8 	bl	8002554 <ref_process_data>
 800c164:	4603      	mov	r3, r0
 800c166:	75bb      	strb	r3, [r7, #22]
				if (proc_status == PROCESS_SUCCESS) {
 800c168:	7dbb      	ldrb	r3, [r7, #22]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f040 809f 	bne.w	800c2ae <referee_processing_task+0x1be>
					switch (g_ref_msg_buffer.cmd_id) {
 800c170:	4b89      	ldr	r3, [pc, #548]	@ (800c398 <referee_processing_task+0x2a8>)
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800c178:	f300 809d 	bgt.w	800c2b6 <referee_processing_task+0x1c6>
 800c17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c180:	dc04      	bgt.n	800c18c <referee_processing_task+0x9c>
 800c182:	2b01      	cmp	r3, #1
 800c184:	d029      	beq.n	800c1da <referee_processing_task+0xea>
 800c186:	2b03      	cmp	r3, #3
 800c188:	d071      	beq.n	800c26e <referee_processing_task+0x17e>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 800c18a:	e094      	b.n	800c2b6 <referee_processing_task+0x1c6>
					switch (g_ref_msg_buffer.cmd_id) {
 800c18c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800c190:	2b07      	cmp	r3, #7
 800c192:	f200 8090 	bhi.w	800c2b6 <referee_processing_task+0x1c6>
 800c196:	a201      	add	r2, pc, #4	@ (adr r2, 800c19c <referee_processing_task+0xac>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c1f5 	.word	0x0800c1f5
 800c1a0:	0800c23d 	.word	0x0800c23d
 800c1a4:	0800c223 	.word	0x0800c223
 800c1a8:	0800c2b7 	.word	0x0800c2b7
 800c1ac:	0800c2b7 	.word	0x0800c2b7
 800c1b0:	0800c25b 	.word	0x0800c25b
 800c1b4:	0800c1bd 	.word	0x0800c1bd
 800c1b8:	0800c295 	.word	0x0800c295
						memcpy(&ref_shoot_data, &g_ref_msg_buffer.data,
 800c1bc:	4a77      	ldr	r2, [pc, #476]	@ (800c39c <referee_processing_task+0x2ac>)
 800c1be:	4b76      	ldr	r3, [pc, #472]	@ (800c398 <referee_processing_task+0x2a8>)
 800c1c0:	3302      	adds	r3, #2
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	6010      	str	r0, [r2, #0]
 800c1c6:	8899      	ldrh	r1, [r3, #4]
 800c1c8:	799b      	ldrb	r3, [r3, #6]
 800c1ca:	8091      	strh	r1, [r2, #4]
 800c1cc:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 800c1ce:	4b74      	ldr	r3, [pc, #464]	@ (800c3a0 <referee_processing_task+0x2b0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	4a72      	ldr	r2, [pc, #456]	@ (800c3a0 <referee_processing_task+0x2b0>)
 800c1d6:	6013      	str	r3, [r2, #0]
						break;
 800c1d8:	e06e      	b.n	800c2b8 <referee_processing_task+0x1c8>
							memcpy(&ref_game_state, &g_ref_msg_buffer.data,
 800c1da:	4a72      	ldr	r2, [pc, #456]	@ (800c3a4 <referee_processing_task+0x2b4>)
 800c1dc:	4b6e      	ldr	r3, [pc, #440]	@ (800c398 <referee_processing_task+0x2a8>)
 800c1de:	3302      	adds	r3, #2
 800c1e0:	8819      	ldrh	r1, [r3, #0]
 800c1e2:	789b      	ldrb	r3, [r3, #2]
 800c1e4:	8011      	strh	r1, [r2, #0]
 800c1e6:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800c1e8:	4b6f      	ldr	r3, [pc, #444]	@ (800c3a8 <referee_processing_task+0x2b8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	4a6e      	ldr	r2, [pc, #440]	@ (800c3a8 <referee_processing_task+0x2b8>)
 800c1f0:	6013      	str	r3, [r2, #0]
							break;
 800c1f2:	e061      	b.n	800c2b8 <referee_processing_task+0x1c8>
						memcpy(&ref_robot_data, &g_ref_msg_buffer.data,
 800c1f4:	4a65      	ldr	r2, [pc, #404]	@ (800c38c <referee_processing_task+0x29c>)
 800c1f6:	4b68      	ldr	r3, [pc, #416]	@ (800c398 <referee_processing_task+0x2a8>)
 800c1f8:	4614      	mov	r4, r2
 800c1fa:	1c9d      	adds	r5, r3, #2
 800c1fc:	6828      	ldr	r0, [r5, #0]
 800c1fe:	6869      	ldr	r1, [r5, #4]
 800c200:	68aa      	ldr	r2, [r5, #8]
 800c202:	68eb      	ldr	r3, [r5, #12]
 800c204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c206:	6928      	ldr	r0, [r5, #16]
 800c208:	6969      	ldr	r1, [r5, #20]
 800c20a:	c403      	stmia	r4!, {r0, r1}
 800c20c:	8b2b      	ldrh	r3, [r5, #24]
 800c20e:	7eaa      	ldrb	r2, [r5, #26]
 800c210:	8023      	strh	r3, [r4, #0]
 800c212:	4613      	mov	r3, r2
 800c214:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800c216:	4b65      	ldr	r3, [pc, #404]	@ (800c3ac <referee_processing_task+0x2bc>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3301      	adds	r3, #1
 800c21c:	4a63      	ldr	r2, [pc, #396]	@ (800c3ac <referee_processing_task+0x2bc>)
 800c21e:	6013      	str	r3, [r2, #0]
						break;
 800c220:	e04a      	b.n	800c2b8 <referee_processing_task+0x1c8>
						memcpy(&ref_robot_pos, &g_ref_msg_buffer.data,
 800c222:	4b63      	ldr	r3, [pc, #396]	@ (800c3b0 <referee_processing_task+0x2c0>)
 800c224:	4a5c      	ldr	r2, [pc, #368]	@ (800c398 <referee_processing_task+0x2a8>)
 800c226:	3202      	adds	r2, #2
 800c228:	6810      	ldr	r0, [r2, #0]
 800c22a:	6851      	ldr	r1, [r2, #4]
 800c22c:	6892      	ldr	r2, [r2, #8]
 800c22e:	c307      	stmia	r3!, {r0, r1, r2}
						ref_robot_pos_txno++;
 800c230:	4b60      	ldr	r3, [pc, #384]	@ (800c3b4 <referee_processing_task+0x2c4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3301      	adds	r3, #1
 800c236:	4a5f      	ldr	r2, [pc, #380]	@ (800c3b4 <referee_processing_task+0x2c4>)
 800c238:	6013      	str	r3, [r2, #0]
						break;
 800c23a:	e03d      	b.n	800c2b8 <referee_processing_task+0x1c8>
						memcpy(&ref_power_data, &g_ref_msg_buffer.data,
 800c23c:	4a5e      	ldr	r2, [pc, #376]	@ (800c3b8 <referee_processing_task+0x2c8>)
 800c23e:	4b56      	ldr	r3, [pc, #344]	@ (800c398 <referee_processing_task+0x2a8>)
 800c240:	4614      	mov	r4, r2
 800c242:	3302      	adds	r3, #2
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	6859      	ldr	r1, [r3, #4]
 800c248:	689a      	ldr	r2, [r3, #8]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_power_data_txno++;
 800c24e:	4b5b      	ldr	r3, [pc, #364]	@ (800c3bc <referee_processing_task+0x2cc>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3301      	adds	r3, #1
 800c254:	4a59      	ldr	r2, [pc, #356]	@ (800c3bc <referee_processing_task+0x2cc>)
 800c256:	6013      	str	r3, [r2, #0]
						break;
 800c258:	e02e      	b.n	800c2b8 <referee_processing_task+0x1c8>
						memcpy(&ref_dmg_data, &g_ref_msg_buffer.data,
 800c25a:	4b4f      	ldr	r3, [pc, #316]	@ (800c398 <referee_processing_task+0x2a8>)
 800c25c:	789a      	ldrb	r2, [r3, #2]
 800c25e:	4b58      	ldr	r3, [pc, #352]	@ (800c3c0 <referee_processing_task+0x2d0>)
 800c260:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800c262:	4b58      	ldr	r3, [pc, #352]	@ (800c3c4 <referee_processing_task+0x2d4>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3301      	adds	r3, #1
 800c268:	4a56      	ldr	r2, [pc, #344]	@ (800c3c4 <referee_processing_task+0x2d4>)
 800c26a:	6013      	str	r3, [r2, #0]
						break;
 800c26c:	e024      	b.n	800c2b8 <referee_processing_task+0x1c8>
						memcpy(&ref_robot_hp, &g_ref_msg_buffer.data,
 800c26e:	4a56      	ldr	r2, [pc, #344]	@ (800c3c8 <referee_processing_task+0x2d8>)
 800c270:	4b49      	ldr	r3, [pc, #292]	@ (800c398 <referee_processing_task+0x2a8>)
 800c272:	4614      	mov	r4, r2
 800c274:	1c9d      	adds	r5, r3, #2
 800c276:	6828      	ldr	r0, [r5, #0]
 800c278:	6869      	ldr	r1, [r5, #4]
 800c27a:	68aa      	ldr	r2, [r5, #8]
 800c27c:	68eb      	ldr	r3, [r5, #12]
 800c27e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c280:	6928      	ldr	r0, [r5, #16]
 800c282:	6969      	ldr	r1, [r5, #20]
 800c284:	69aa      	ldr	r2, [r5, #24]
 800c286:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 800c288:	4b50      	ldr	r3, [pc, #320]	@ (800c3cc <referee_processing_task+0x2dc>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3301      	adds	r3, #1
 800c28e:	4a4f      	ldr	r2, [pc, #316]	@ (800c3cc <referee_processing_task+0x2dc>)
 800c290:	6013      	str	r3, [r2, #0]
						break;
 800c292:	e011      	b.n	800c2b8 <referee_processing_task+0x1c8>
						memcpy(&ref_mag_data, &g_ref_msg_buffer.data,
 800c294:	4a4e      	ldr	r2, [pc, #312]	@ (800c3d0 <referee_processing_task+0x2e0>)
 800c296:	4b40      	ldr	r3, [pc, #256]	@ (800c398 <referee_processing_task+0x2a8>)
 800c298:	3302      	adds	r3, #2
 800c29a:	6818      	ldr	r0, [r3, #0]
 800c29c:	6010      	str	r0, [r2, #0]
 800c29e:	889b      	ldrh	r3, [r3, #4]
 800c2a0:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 800c2a2:	4b4c      	ldr	r3, [pc, #304]	@ (800c3d4 <referee_processing_task+0x2e4>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	4a4a      	ldr	r2, [pc, #296]	@ (800c3d4 <referee_processing_task+0x2e4>)
 800c2aa:	6013      	str	r3, [r2, #0]
						break;
 800c2ac:	e004      	b.n	800c2b8 <referee_processing_task+0x1c8>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 800c2ae:	7dbb      	ldrb	r3, [r7, #22]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d009      	beq.n	800c2c8 <referee_processing_task+0x1d8>
 800c2b4:	e000      	b.n	800c2b8 <referee_processing_task+0x1c8>
						break;
 800c2b6:	bf00      	nop
			while (queue_get_size(&referee_uart_q) > 7) {
 800c2b8:	4835      	ldr	r0, [pc, #212]	@ (800c390 <referee_processing_task+0x2a0>)
 800c2ba:	f7f5 ffde 	bl	800227a <queue_get_size>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b07      	cmp	r3, #7
 800c2c2:	f63f af4b 	bhi.w	800c15c <referee_processing_task+0x6c>
 800c2c6:	e000      	b.n	800c2ca <referee_processing_task+0x1da>
					break;
 800c2c8:	bf00      	nop
				}
			}
		}
		if (!has_data){
 800c2ca:	7dfb      	ldrb	r3, [r7, #23]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10e      	bne.n	800c2ee <referee_processing_task+0x1fe>
		    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 800c2d0:	4b41      	ldr	r3, [pc, #260]	@ (800c3d8 <referee_processing_task+0x2e8>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	4b40      	ldr	r3, [pc, #256]	@ (800c3d8 <referee_processing_task+0x2e8>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f042 0201 	orr.w	r2, r2, #1
 800c2de:	601a      	str	r2, [r3, #0]
			ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c390 <referee_processing_task+0x2a0>)
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	482a      	ldr	r0, [pc, #168]	@ (800c394 <referee_processing_task+0x2a4>)
 800c2ea:	f7f6 fc23 	bl	8002b34 <ref_usart_start>

		}

		status_led(5, off_led);
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	2005      	movs	r0, #5
 800c2f2:	f7f5 fe61 	bl	8001fb8 <status_led>


		status_led(5, on_led);
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	2005      	movs	r0, #5
 800c2fa:	f7f5 fe5d 	bl	8001fb8 <status_led>
		if (ref_robot_data.robot_level == 1) {
 800c2fe:	4b23      	ldr	r3, [pc, #140]	@ (800c38c <referee_processing_task+0x29c>)
 800c300:	785b      	ldrb	r3, [r3, #1]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d112      	bne.n	800c32c <referee_processing_task+0x23c>
			g_referee_limiters.feeding_speed = LV1_FEEDER;
 800c306:	4b20      	ldr	r3, [pc, #128]	@ (800c388 <referee_processing_task+0x298>)
 800c308:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800c30c:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800c30e:	4b1e      	ldr	r3, [pc, #120]	@ (800c388 <referee_processing_task+0x298>)
 800c310:	2213      	movs	r2, #19
 800c312:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 1;
 800c314:	4b1c      	ldr	r3, [pc, #112]	@ (800c388 <referee_processing_task+0x298>)
 800c316:	2201      	movs	r2, #1
 800c318:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800c31a:	2100      	movs	r1, #0
 800c31c:	2007      	movs	r0, #7
 800c31e:	f7f5 fe4b 	bl	8001fb8 <status_led>
			status_led(8, off_led);
 800c322:	2101      	movs	r1, #1
 800c324:	2008      	movs	r0, #8
 800c326:	f7f5 fe47 	bl	8001fb8 <status_led>
 800c32a:	e05e      	b.n	800c3ea <referee_processing_task+0x2fa>
		} else if (ref_robot_data.robot_level == 2) {
 800c32c:	4b17      	ldr	r3, [pc, #92]	@ (800c38c <referee_processing_task+0x29c>)
 800c32e:	785b      	ldrb	r3, [r3, #1]
 800c330:	2b02      	cmp	r3, #2
 800c332:	d112      	bne.n	800c35a <referee_processing_task+0x26a>
			g_referee_limiters.feeding_speed = LV2_FEEDER;
 800c334:	4b14      	ldr	r3, [pc, #80]	@ (800c388 <referee_processing_task+0x298>)
 800c336:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800c33a:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV2_PROJECTILE;
 800c33c:	4b12      	ldr	r3, [pc, #72]	@ (800c388 <referee_processing_task+0x298>)
 800c33e:	2213      	movs	r2, #19
 800c340:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 2;
 800c342:	4b11      	ldr	r3, [pc, #68]	@ (800c388 <referee_processing_task+0x298>)
 800c344:	2202      	movs	r2, #2
 800c346:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 800c348:	2101      	movs	r1, #1
 800c34a:	2007      	movs	r0, #7
 800c34c:	f7f5 fe34 	bl	8001fb8 <status_led>
			status_led(8, on_led);
 800c350:	2100      	movs	r1, #0
 800c352:	2008      	movs	r0, #8
 800c354:	f7f5 fe30 	bl	8001fb8 <status_led>
 800c358:	e047      	b.n	800c3ea <referee_processing_task+0x2fa>
		} else if (ref_robot_data.robot_level == 3) {
 800c35a:	4b0c      	ldr	r3, [pc, #48]	@ (800c38c <referee_processing_task+0x29c>)
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d13c      	bne.n	800c3dc <referee_processing_task+0x2ec>
			g_referee_limiters.feeding_speed = LV3_FEEDER;
 800c362:	4b09      	ldr	r3, [pc, #36]	@ (800c388 <referee_processing_task+0x298>)
 800c364:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800c368:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV3_PROJECTILE;
 800c36a:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <referee_processing_task+0x298>)
 800c36c:	2213      	movs	r2, #19
 800c36e:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 3;
 800c370:	4b05      	ldr	r3, [pc, #20]	@ (800c388 <referee_processing_task+0x298>)
 800c372:	2203      	movs	r2, #3
 800c374:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800c376:	2100      	movs	r1, #0
 800c378:	2007      	movs	r0, #7
 800c37a:	f7f5 fe1d 	bl	8001fb8 <status_led>
			status_led(8, on_led);
 800c37e:	2100      	movs	r1, #0
 800c380:	2008      	movs	r0, #8
 800c382:	f7f5 fe19 	bl	8001fb8 <status_led>
 800c386:	e030      	b.n	800c3ea <referee_processing_task+0x2fa>
 800c388:	20003bbc 	.word	0x20003bbc
 800c38c:	20003c40 	.word	0x20003c40
 800c390:	20003ca8 	.word	0x20003ca8
 800c394:	20001ca0 	.word	0x20001ca0
 800c398:	20003bd4 	.word	0x20003bd4
 800c39c:	20003c8c 	.word	0x20003c8c
 800c3a0:	20003c94 	.word	0x20003c94
 800c3a4:	20003c18 	.word	0x20003c18
 800c3a8:	20003c1c 	.word	0x20003c1c
 800c3ac:	20003c5c 	.word	0x20003c5c
 800c3b0:	20003c74 	.word	0x20003c74
 800c3b4:	20003c80 	.word	0x20003c80
 800c3b8:	20003c60 	.word	0x20003c60
 800c3bc:	20003c70 	.word	0x20003c70
 800c3c0:	20003c84 	.word	0x20003c84
 800c3c4:	20003c88 	.word	0x20003c88
 800c3c8:	20003c20 	.word	0x20003c20
 800c3cc:	20003c3c 	.word	0x20003c3c
 800c3d0:	20003c98 	.word	0x20003c98
 800c3d4:	20003ca0 	.word	0x20003ca0
 800c3d8:	20001da4 	.word	0x20001da4
		} else {
			g_referee_limiters.feeding_speed = LV1_FEEDER;
 800c3dc:	4b43      	ldr	r3, [pc, #268]	@ (800c4ec <referee_processing_task+0x3fc>)
 800c3de:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800c3e2:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800c3e4:	4b41      	ldr	r3, [pc, #260]	@ (800c4ec <referee_processing_task+0x3fc>)
 800c3e6:	2213      	movs	r2, #19
 800c3e8:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 800c3ea:	4b41      	ldr	r3, [pc, #260]	@ (800c4f0 <referee_processing_task+0x400>)
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d070      	beq.n	800c4d4 <referee_processing_task+0x3e4>
			float temp_buffer = 1;
 800c3f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800c3f6:	61fb      	str	r3, [r7, #28]
			if (ref_power_data.buffer_energy < 50){
 800c3f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4f4 <referee_processing_task+0x404>)
 800c3fa:	891b      	ldrh	r3, [r3, #8]
 800c3fc:	2b31      	cmp	r3, #49	@ 0x31
 800c3fe:	d819      	bhi.n	800c434 <referee_processing_task+0x344>
			temp_buffer = (float)ref_power_data.buffer_energy/50;
 800c400:	4b3c      	ldr	r3, [pc, #240]	@ (800c4f4 <referee_processing_task+0x404>)
 800c402:	891b      	ldrh	r3, [r3, #8]
 800c404:	ee07 3a90 	vmov	s15, r3
 800c408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c40c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800c4f8 <referee_processing_task+0x408>
 800c410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c414:	edc7 7a07 	vstr	s15, [r7, #28]
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 800c418:	edd7 7a07 	vldr	s15, [r7, #28]
 800c41c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c420:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c428:	dd02      	ble.n	800c430 <referee_processing_task+0x340>
 800c42a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800c42e:	e000      	b.n	800c432 <referee_processing_task+0x342>
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	61fb      	str	r3, [r7, #28]
			}
#ifdef CHASSIS_POWER_BUFFER_LIMITER
			g_referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 800c434:	edd7 7a07 	vldr	s15, [r7, #28]
 800c438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c43c:	4b2b      	ldr	r3, [pc, #172]	@ (800c4ec <referee_processing_task+0x3fc>)
 800c43e:	edc3 7a02 	vstr	s15, [r3, #8]
#else
			g_referee_limiters.wheel_buffer_limit = 1;
#endif

			static float prev_chassis_power;
			float max_power = CHASSIS_MAX_POWER;
 800c442:	4b2e      	ldr	r3, [pc, #184]	@ (800c4fc <referee_processing_task+0x40c>)
 800c444:	61bb      	str	r3, [r7, #24]
			float curr_chassis_power = prev_chassis_power * 0.5 + ref_power_data.chassis_power * 0.5;
 800c446:	4b2e      	ldr	r3, [pc, #184]	@ (800c500 <referee_processing_task+0x410>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7f4 f87c 	bl	8000548 <__aeabi_f2d>
 800c450:	f04f 0200 	mov.w	r2, #0
 800c454:	4b2b      	ldr	r3, [pc, #172]	@ (800c504 <referee_processing_task+0x414>)
 800c456:	f7f4 f8cf 	bl	80005f8 <__aeabi_dmul>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4614      	mov	r4, r2
 800c460:	461d      	mov	r5, r3
 800c462:	4b24      	ldr	r3, [pc, #144]	@ (800c4f4 <referee_processing_task+0x404>)
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	4618      	mov	r0, r3
 800c468:	f7f4 f86e 	bl	8000548 <__aeabi_f2d>
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	4b24      	ldr	r3, [pc, #144]	@ (800c504 <referee_processing_task+0x414>)
 800c472:	f7f4 f8c1 	bl	80005f8 <__aeabi_dmul>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4620      	mov	r0, r4
 800c47c:	4629      	mov	r1, r5
 800c47e:	f7f3 ff05 	bl	800028c <__adddf3>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4610      	mov	r0, r2
 800c488:	4619      	mov	r1, r3
 800c48a:	f7f4 fbad 	bl	8000be8 <__aeabi_d2f>
 800c48e:	4603      	mov	r3, r0
 800c490:	613b      	str	r3, [r7, #16]
			prev_chassis_power = ref_power_data.chassis_power;
 800c492:	4b18      	ldr	r3, [pc, #96]	@ (800c4f4 <referee_processing_task+0x404>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	4a1a      	ldr	r2, [pc, #104]	@ (800c500 <referee_processing_task+0x410>)
 800c498:	6013      	str	r3, [r2, #0]
			if (ref_robot_data.chassis_power_limit < CHASSIS_MAX_POWER){
 800c49a:	4b15      	ldr	r3, [pc, #84]	@ (800c4f0 <referee_processing_task+0x400>)
 800c49c:	8b1b      	ldrh	r3, [r3, #24]
 800c49e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800c4a2:	d207      	bcs.n	800c4b4 <referee_processing_task+0x3c4>
				max_power = ref_robot_data.chassis_power_limit;
 800c4a4:	4b12      	ldr	r3, [pc, #72]	@ (800c4f0 <referee_processing_task+0x400>)
 800c4a6:	8b1b      	ldrh	r3, [r3, #24]
 800c4a8:	ee07 3a90 	vmov	s15, r3
 800c4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b0:	edc7 7a06 	vstr	s15, [r7, #24]
			}
			float temp_power = (float) ((curr_chassis_power)/(max_power - CHASSIS_POWER_MARGIN));
 800c4b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4b8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800c4bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c4c0:	edd7 6a04 	vldr	s13, [r7, #16]
 800c4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c8:	edc7 7a03 	vstr	s15, [r7, #12]
//			temp_power = (temp_power > 1) ? 1 : temp_power;
			g_referee_limiters.wheel_power_limit = temp_power;
 800c4cc:	4a07      	ldr	r2, [pc, #28]	@ (800c4ec <referee_processing_task+0x3fc>)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6053      	str	r3, [r2, #4]
 800c4d2:	e007      	b.n	800c4e4 <referee_processing_task+0x3f4>
//			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
		} else {
			g_referee_limiters.wheel_buffer_limit = 1;
 800c4d4:	4b05      	ldr	r3, [pc, #20]	@ (800c4ec <referee_processing_task+0x3fc>)
 800c4d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c4da:	609a      	str	r2, [r3, #8]
			g_referee_limiters.wheel_power_limit = 1;
 800c4dc:	4b03      	ldr	r3, [pc, #12]	@ (800c4ec <referee_processing_task+0x3fc>)
 800c4de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c4e2:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(2);
 800c4e4:	2002      	movs	r0, #2
 800c4e6:	f00d facd 	bl	8019a84 <vTaskDelay>
	while (1) {
 800c4ea:	e624      	b.n	800c136 <referee_processing_task+0x46>
 800c4ec:	20003bbc 	.word	0x20003bbc
 800c4f0:	20003c40 	.word	0x20003c40
 800c4f4:	20003c60 	.word	0x20003c60
 800c4f8:	42480000 	.word	0x42480000
 800c4fc:	43c80000 	.word	0x43c80000
 800c500:	20003db0 	.word	0x20003db0
 800c504:	3fe00000 	.word	0x3fe00000

0800c508 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 800c512:	683c      	ldr	r4, [r7, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800c51a:	2301      	movs	r3, #1
 800c51c:	461e      	mov	r6, r3
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295
 800c522:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <rtIsInf+0x58>)
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 fb00 	bl	8000b2c <__aeabi_dcmpun>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10b      	bne.n	800c54a <rtIsInf+0x42>
 800c532:	f04f 32ff 	mov.w	r2, #4294967295
 800c536:	4b0a      	ldr	r3, [pc, #40]	@ (800c560 <rtIsInf+0x58>)
 800c538:	4620      	mov	r0, r4
 800c53a:	4629      	mov	r1, r5
 800c53c:	f7f4 fad8 	bl	8000af0 <__aeabi_dcmple>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <rtIsInf+0x42>
 800c546:	2300      	movs	r3, #0
 800c548:	461e      	mov	r6, r3
 800c54a:	b2f3      	uxtb	r3, r6
 800c54c:	f083 0301 	eor.w	r3, r3, #1
 800c550:	b2db      	uxtb	r3, r3
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	b2db      	uxtb	r3, r3
}
 800c558:	4618      	mov	r0, r3
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c560:	7fefffff 	.word	0x7fefffff

0800c564 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800c56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c572:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c576:	f7f4 fad9 	bl	8000b2c <__aeabi_dcmpun>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <rtIsNaN+0x20>
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <rtIsNaN+0x22>
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <startup_task>:
#include "startup_task.h"
#include "gimbal_control_task.h"
#include "buzzing_task.h"
#include <can_msg_processor.h>

void startup_task() {
 800c58e:	b580      	push	{r7, lr}
 800c590:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 800c592:	f7f5 fceb 	bl	8001f6c <led_on>
	buzzer_init();
 800c596:	f7f4 fe0b 	bl	80011b0 <buzzer_init>
	imu_init();
 800c59a:	f7f5 faf1 	bl	8001b80 <imu_init>
	led_green_off();
 800c59e:	f7f5 fcd7 	bl	8001f50 <led_green_off>
	start_micros_timer();
 800c5a2:	f7f5 fde9 	bl	8002178 <start_micros_timer>
	led_toggle();
 800c5a6:	f7f5 fcff 	bl	8001fa8 <led_toggle>

}
 800c5aa:	bf00      	nop
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <usb_vcp_processing>:
uint8_t usb_waiting = 0;

//#define DATA_OUTPUT_MODE
#define USB_CONFIG_MODE

void usb_vcp_processing(uint8_t *buffer, uint32_t *len) {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b0c4      	sub	sp, #272	@ 0x110
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c5ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5be:	6018      	str	r0, [r3, #0]
 800c5c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c5c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c5c8:	6019      	str	r1, [r3, #0]
	uint8_t blank_buffer[MAX_CHAR_SIZE] = { 0 };
 800c5ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c5ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	22fc      	movs	r2, #252	@ 0xfc
 800c5da:	2100      	movs	r1, #0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f00f ff98 	bl	801c512 <memset>
	memcpy(blank_buffer, buffer, *len);
 800c5e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c5e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c5f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5f6:	f107 0010 	add.w	r0, r7, #16
 800c5fa:	6819      	ldr	r1, [r3, #0]
 800c5fc:	f010 f832 	bl	801c664 <memcpy>
	memcpy(usb_input_buffer, blank_buffer, MAX_CHAR_SIZE);
 800c600:	4a1a      	ldr	r2, [pc, #104]	@ (800c66c <usb_vcp_processing+0xbc>)
 800c602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c606:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c60a:	4610      	mov	r0, r2
 800c60c:	4619      	mov	r1, r3
 800c60e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c612:	461a      	mov	r2, r3
 800c614:	f010 f826 	bl	801c664 <memcpy>
	usb_input_len = *len;
 800c618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c61c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a12      	ldr	r2, [pc, #72]	@ (800c670 <usb_vcp_processing+0xc0>)
 800c626:	6013      	str	r3, [r2, #0]

	//Check if the currently running task needs to yield
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800c628:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c62c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c630:	2200      	movs	r2, #0
 800c632:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(usb_continue_semaphore, &xHigherPriorityTaskWoken);
 800c634:	4b0f      	ldr	r3, [pc, #60]	@ (800c674 <usb_vcp_processing+0xc4>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f107 020c 	add.w	r2, r7, #12
 800c63c:	4611      	mov	r1, r2
 800c63e:	4618      	mov	r0, r3
 800c640:	f00c fcd6 	bl	8018ff0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800c644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d007      	beq.n	800c662 <usb_vcp_processing+0xb2>
 800c652:	4b09      	ldr	r3, [pc, #36]	@ (800c678 <usb_vcp_processing+0xc8>)
 800c654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	f3bf 8f6f 	isb	sy
}
 800c662:	bf00      	nop
 800c664:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20003db4 	.word	0x20003db4
 800c670:	20003eb4 	.word	0x20003eb4
 800c674:	20003ba4 	.word	0x20003ba4
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <usb_task>:
	return 0;

}


void usb_task(void *argument) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
//						CDC_Transmit_FS(usb_input_buffer, len);
//					}
//				}
//			}
//		}
		vTaskDelay(100);
 800c684:	2064      	movs	r0, #100	@ 0x64
 800c686:	f00d f9fd 	bl	8019a84 <vTaskDelay>
 800c68a:	e7fb      	b.n	800c684 <usb_task+0x8>

0800c68c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c690:	4b0e      	ldr	r3, [pc, #56]	@ (800c6cc <HAL_Init+0x40>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a0d      	ldr	r2, [pc, #52]	@ (800c6cc <HAL_Init+0x40>)
 800c696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c69a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c69c:	4b0b      	ldr	r3, [pc, #44]	@ (800c6cc <HAL_Init+0x40>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6cc <HAL_Init+0x40>)
 800c6a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c6a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c6a8:	4b08      	ldr	r3, [pc, #32]	@ (800c6cc <HAL_Init+0x40>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a07      	ldr	r2, [pc, #28]	@ (800c6cc <HAL_Init+0x40>)
 800c6ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c6b4:	2003      	movs	r0, #3
 800c6b6:	f001 fa02 	bl	800dabe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c6ba:	200f      	movs	r0, #15
 800c6bc:	f7f7 fa06 	bl	8003acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c6c0:	f7f7 f9d8 	bl	8003a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	40023c00 	.word	0x40023c00

0800c6d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c6d4:	4b06      	ldr	r3, [pc, #24]	@ (800c6f0 <HAL_IncTick+0x20>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4b06      	ldr	r3, [pc, #24]	@ (800c6f4 <HAL_IncTick+0x24>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4413      	add	r3, r2
 800c6e0:	4a04      	ldr	r2, [pc, #16]	@ (800c6f4 <HAL_IncTick+0x24>)
 800c6e2:	6013      	str	r3, [r2, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	2000004c 	.word	0x2000004c
 800c6f4:	20003eb8 	.word	0x20003eb8

0800c6f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
  return uwTick;
 800c6fc:	4b03      	ldr	r3, [pc, #12]	@ (800c70c <HAL_GetTick+0x14>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
}
 800c700:	4618      	mov	r0, r3
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	20003eb8 	.word	0x20003eb8

0800c710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c718:	f7ff ffee 	bl	800c6f8 <HAL_GetTick>
 800c71c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c728:	d005      	beq.n	800c736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c72a:	4b0a      	ldr	r3, [pc, #40]	@ (800c754 <HAL_Delay+0x44>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	4413      	add	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c736:	bf00      	nop
 800c738:	f7ff ffde 	bl	800c6f8 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	429a      	cmp	r2, r3
 800c746:	d8f7      	bhi.n	800c738 <HAL_Delay+0x28>
  {
  }
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	2000004c 	.word	0x2000004c

0800c758 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d101      	bne.n	800c76e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e033      	b.n	800c7d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c772:	2b00      	cmp	r3, #0
 800c774:	d109      	bne.n	800c78a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7f6 fb0e 	bl	8002d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c78e:	f003 0310 	and.w	r3, r3, #16
 800c792:	2b00      	cmp	r3, #0
 800c794:	d118      	bne.n	800c7c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c79a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c79e:	f023 0302 	bic.w	r3, r3, #2
 800c7a2:	f043 0202 	orr.w	r2, r3, #2
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f93a 	bl	800ca24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ba:	f023 0303 	bic.w	r3, r3, #3
 800c7be:	f043 0201 	orr.w	r2, r3, #1
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	641a      	str	r2, [r3, #64]	@ 0x40
 800c7c6:	e001      	b.n	800c7cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d101      	bne.n	800c7fc <HAL_ADC_ConfigChannel+0x1c>
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	e105      	b.n	800ca08 <HAL_ADC_ConfigChannel+0x228>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b09      	cmp	r3, #9
 800c80a:	d925      	bls.n	800c858 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68d9      	ldr	r1, [r3, #12]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	b29b      	uxth	r3, r3
 800c818:	461a      	mov	r2, r3
 800c81a:	4613      	mov	r3, r2
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	4413      	add	r3, r2
 800c820:	3b1e      	subs	r3, #30
 800c822:	2207      	movs	r2, #7
 800c824:	fa02 f303 	lsl.w	r3, r2, r3
 800c828:	43da      	mvns	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	400a      	ands	r2, r1
 800c830:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68d9      	ldr	r1, [r3, #12]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	689a      	ldr	r2, [r3, #8]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	4618      	mov	r0, r3
 800c844:	4603      	mov	r3, r0
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	4403      	add	r3, r0
 800c84a:	3b1e      	subs	r3, #30
 800c84c:	409a      	lsls	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	60da      	str	r2, [r3, #12]
 800c856:	e022      	b.n	800c89e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6919      	ldr	r1, [r3, #16]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	b29b      	uxth	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	2207      	movs	r2, #7
 800c86e:	fa02 f303 	lsl.w	r3, r2, r3
 800c872:	43da      	mvns	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	400a      	ands	r2, r1
 800c87a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6919      	ldr	r1, [r3, #16]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	689a      	ldr	r2, [r3, #8]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	4618      	mov	r0, r3
 800c88e:	4603      	mov	r3, r0
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4403      	add	r3, r0
 800c894:	409a      	lsls	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	430a      	orrs	r2, r1
 800c89c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	2b06      	cmp	r3, #6
 800c8a4:	d824      	bhi.n	800c8f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	685a      	ldr	r2, [r3, #4]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	3b05      	subs	r3, #5
 800c8b8:	221f      	movs	r2, #31
 800c8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c8be:	43da      	mvns	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	400a      	ands	r2, r1
 800c8c6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	3b05      	subs	r3, #5
 800c8e2:	fa00 f203 	lsl.w	r2, r0, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	635a      	str	r2, [r3, #52]	@ 0x34
 800c8ee:	e04c      	b.n	800c98a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	2b0c      	cmp	r3, #12
 800c8f6:	d824      	bhi.n	800c942 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	4613      	mov	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4413      	add	r3, r2
 800c908:	3b23      	subs	r3, #35	@ 0x23
 800c90a:	221f      	movs	r2, #31
 800c90c:	fa02 f303 	lsl.w	r3, r2, r3
 800c910:	43da      	mvns	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	400a      	ands	r2, r1
 800c918:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	b29b      	uxth	r3, r3
 800c926:	4618      	mov	r0, r3
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	3b23      	subs	r3, #35	@ 0x23
 800c934:	fa00 f203 	lsl.w	r2, r0, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	430a      	orrs	r2, r1
 800c93e:	631a      	str	r2, [r3, #48]	@ 0x30
 800c940:	e023      	b.n	800c98a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	4613      	mov	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	3b41      	subs	r3, #65	@ 0x41
 800c954:	221f      	movs	r2, #31
 800c956:	fa02 f303 	lsl.w	r3, r2, r3
 800c95a:	43da      	mvns	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	400a      	ands	r2, r1
 800c962:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	4618      	mov	r0, r3
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4613      	mov	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	3b41      	subs	r3, #65	@ 0x41
 800c97e:	fa00 f203 	lsl.w	r2, r0, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c98a:	4b22      	ldr	r3, [pc, #136]	@ (800ca14 <HAL_ADC_ConfigChannel+0x234>)
 800c98c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a21      	ldr	r2, [pc, #132]	@ (800ca18 <HAL_ADC_ConfigChannel+0x238>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d109      	bne.n	800c9ac <HAL_ADC_ConfigChannel+0x1cc>
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b12      	cmp	r3, #18
 800c99e:	d105      	bne.n	800c9ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ca18 <HAL_ADC_ConfigChannel+0x238>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d123      	bne.n	800c9fe <HAL_ADC_ConfigChannel+0x21e>
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b10      	cmp	r3, #16
 800c9bc:	d003      	beq.n	800c9c6 <HAL_ADC_ConfigChannel+0x1e6>
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b11      	cmp	r3, #17
 800c9c4:	d11b      	bne.n	800c9fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b10      	cmp	r3, #16
 800c9d8:	d111      	bne.n	800c9fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c9da:	4b10      	ldr	r3, [pc, #64]	@ (800ca1c <HAL_ADC_ConfigChannel+0x23c>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a10      	ldr	r2, [pc, #64]	@ (800ca20 <HAL_ADC_ConfigChannel+0x240>)
 800c9e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e4:	0c9a      	lsrs	r2, r3, #18
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c9f0:	e002      	b.n	800c9f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1f9      	bne.n	800c9f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	40012300 	.word	0x40012300
 800ca18:	40012000 	.word	0x40012000
 800ca1c:	20000004 	.word	0x20000004
 800ca20:	431bde83 	.word	0x431bde83

0800ca24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ca2c:	4b79      	ldr	r3, [pc, #484]	@ (800cc14 <ADC_Init+0x1f0>)
 800ca2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	431a      	orrs	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6859      	ldr	r1, [r3, #4]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	021a      	lsls	r2, r3, #8
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800ca7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6859      	ldr	r1, [r3, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	689a      	ldr	r2, [r3, #8]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	430a      	orrs	r2, r1
 800ca8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ca9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6899      	ldr	r1, [r3, #8]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68da      	ldr	r2, [r3, #12]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	430a      	orrs	r2, r1
 800cab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab6:	4a58      	ldr	r2, [pc, #352]	@ (800cc18 <ADC_Init+0x1f4>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d022      	beq.n	800cb02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689a      	ldr	r2, [r3, #8]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800caca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6899      	ldr	r1, [r3, #8]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800caec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6899      	ldr	r1, [r3, #8]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	430a      	orrs	r2, r1
 800cafe:	609a      	str	r2, [r3, #8]
 800cb00:	e00f      	b.n	800cb22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cb10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cb20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f022 0202 	bic.w	r2, r2, #2
 800cb30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6899      	ldr	r1, [r3, #8]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7e1b      	ldrb	r3, [r3, #24]
 800cb3c:	005a      	lsls	r2, r3, #1
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d01b      	beq.n	800cb88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800cb6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6859      	ldr	r1, [r3, #4]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	035a      	lsls	r2, r3, #13
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	e007      	b.n	800cb98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cb96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	051a      	lsls	r2, r3, #20
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cbcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	6899      	ldr	r1, [r3, #8]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cbda:	025a      	lsls	r2, r3, #9
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	689a      	ldr	r2, [r3, #8]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6899      	ldr	r1, [r3, #8]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	029a      	lsls	r2, r3, #10
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	609a      	str	r2, [r3, #8]
}
 800cc08:	bf00      	nop
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	40012300 	.word	0x40012300
 800cc18:	0f000001 	.word	0x0f000001

0800cc1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e0ed      	b.n	800ce0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d102      	bne.n	800cc40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7f6 f95c 	bl	8002ef8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f042 0201 	orr.w	r2, r2, #1
 800cc4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc50:	f7ff fd52 	bl	800c6f8 <HAL_GetTick>
 800cc54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cc56:	e012      	b.n	800cc7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cc58:	f7ff fd4e 	bl	800c6f8 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2b0a      	cmp	r3, #10
 800cc64:	d90b      	bls.n	800cc7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2205      	movs	r2, #5
 800cc76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e0c5      	b.n	800ce0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d0e5      	beq.n	800cc58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f022 0202 	bic.w	r2, r2, #2
 800cc9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc9c:	f7ff fd2c 	bl	800c6f8 <HAL_GetTick>
 800cca0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cca2:	e012      	b.n	800ccca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cca4:	f7ff fd28 	bl	800c6f8 <HAL_GetTick>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	2b0a      	cmp	r3, #10
 800ccb0:	d90b      	bls.n	800ccca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2205      	movs	r2, #5
 800ccc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e09f      	b.n	800ce0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1e5      	bne.n	800cca4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7e1b      	ldrb	r3, [r3, #24]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d108      	bne.n	800ccf2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	e007      	b.n	800cd02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7e5b      	ldrb	r3, [r3, #25]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d108      	bne.n	800cd1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	e007      	b.n	800cd2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7e9b      	ldrb	r3, [r3, #26]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d108      	bne.n	800cd46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0220 	orr.w	r2, r2, #32
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	e007      	b.n	800cd56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0220 	bic.w	r2, r2, #32
 800cd54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7edb      	ldrb	r3, [r3, #27]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d108      	bne.n	800cd70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f022 0210 	bic.w	r2, r2, #16
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	e007      	b.n	800cd80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f042 0210 	orr.w	r2, r2, #16
 800cd7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	7f1b      	ldrb	r3, [r3, #28]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d108      	bne.n	800cd9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f042 0208 	orr.w	r2, r2, #8
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	e007      	b.n	800cdaa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0208 	bic.w	r2, r2, #8
 800cda8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7f5b      	ldrb	r3, [r3, #29]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d108      	bne.n	800cdc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f042 0204 	orr.w	r2, r2, #4
 800cdc0:	601a      	str	r2, [r3, #0]
 800cdc2:	e007      	b.n	800cdd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 0204 	bic.w	r2, r2, #4
 800cdd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	689a      	ldr	r2, [r3, #8]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	431a      	orrs	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	431a      	orrs	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	ea42 0103 	orr.w	r1, r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	1e5a      	subs	r2, r3, #1
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
	...

0800ce14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b087      	sub	sp, #28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ce2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800ce2c:	7cfb      	ldrb	r3, [r7, #19]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d003      	beq.n	800ce3a <HAL_CAN_ConfigFilter+0x26>
 800ce32:	7cfb      	ldrb	r3, [r7, #19]
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	f040 80be 	bne.w	800cfb6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800ce3a:	4b65      	ldr	r3, [pc, #404]	@ (800cfd0 <HAL_CAN_ConfigFilter+0x1bc>)
 800ce3c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ce44:	f043 0201 	orr.w	r2, r3, #1
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ce54:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce68:	021b      	lsls	r3, r3, #8
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	f003 031f 	and.w	r3, r3, #31
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce80:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	43db      	mvns	r3, r3
 800ce8c:	401a      	ands	r2, r3
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d123      	bne.n	800cee4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	43db      	mvns	r3, r3
 800cea6:	401a      	ands	r2, r3
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800cebe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	3248      	adds	r2, #72	@ 0x48
 800cec4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ced8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ceda:	6979      	ldr	r1, [r7, #20]
 800cedc:	3348      	adds	r3, #72	@ 0x48
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	440b      	add	r3, r1
 800cee2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	69db      	ldr	r3, [r3, #28]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d122      	bne.n	800cf32 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	431a      	orrs	r2, r3
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cf0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	3248      	adds	r2, #72	@ 0x48
 800cf12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cf26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cf28:	6979      	ldr	r1, [r7, #20]
 800cf2a:	3348      	adds	r3, #72	@ 0x48
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	440b      	add	r3, r1
 800cf30:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	43db      	mvns	r3, r3
 800cf44:	401a      	ands	r2, r3
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800cf4c:	e007      	b.n	800cf5e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	431a      	orrs	r2, r3
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d109      	bne.n	800cf7a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	43db      	mvns	r3, r3
 800cf70:	401a      	ands	r2, r3
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800cf78:	e007      	b.n	800cf8a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	431a      	orrs	r2, r3
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d107      	bne.n	800cfa2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800cfa8:	f023 0201 	bic.w	r2, r3, #1
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e006      	b.n	800cfc4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
  }
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	371c      	adds	r7, #28
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	40006400 	.word	0x40006400

0800cfd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d12e      	bne.n	800d046 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 0201 	bic.w	r2, r2, #1
 800cffe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d000:	f7ff fb7a 	bl	800c6f8 <HAL_GetTick>
 800d004:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d006:	e012      	b.n	800d02e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d008:	f7ff fb76 	bl	800c6f8 <HAL_GetTick>
 800d00c:	4602      	mov	r2, r0
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	2b0a      	cmp	r3, #10
 800d014:	d90b      	bls.n	800d02e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2205      	movs	r2, #5
 800d026:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e012      	b.n	800d054 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	f003 0301 	and.w	r3, r3, #1
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1e5      	bne.n	800d008 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800d042:	2300      	movs	r3, #0
 800d044:	e006      	b.n	800d054 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d04a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
  }
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b089      	sub	sp, #36	@ 0x24
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d070:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800d07a:	7ffb      	ldrb	r3, [r7, #31]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d003      	beq.n	800d088 <HAL_CAN_AddTxMessage+0x2c>
 800d080:	7ffb      	ldrb	r3, [r7, #31]
 800d082:	2b02      	cmp	r3, #2
 800d084:	f040 80b8 	bne.w	800d1f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d105      	bne.n	800d0a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 80a0 	beq.w	800d1e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	0e1b      	lsrs	r3, r3, #24
 800d0ac:	f003 0303 	and.w	r3, r3, #3
 800d0b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d907      	bls.n	800d0c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e09e      	b.n	800d206 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	409a      	lsls	r2, r3
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10d      	bne.n	800d0f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d0e4:	68f9      	ldr	r1, [r7, #12]
 800d0e6:	6809      	ldr	r1, [r1, #0]
 800d0e8:	431a      	orrs	r2, r3
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	3318      	adds	r3, #24
 800d0ee:	011b      	lsls	r3, r3, #4
 800d0f0:	440b      	add	r3, r1
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	e00f      	b.n	800d116 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d100:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d10a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	3318      	adds	r3, #24
 800d110:	011b      	lsls	r3, r3, #4
 800d112:	440b      	add	r3, r1
 800d114:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6819      	ldr	r1, [r3, #0]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	691a      	ldr	r2, [r3, #16]
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3318      	adds	r3, #24
 800d122:	011b      	lsls	r3, r3, #4
 800d124:	440b      	add	r3, r1
 800d126:	3304      	adds	r3, #4
 800d128:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	7d1b      	ldrb	r3, [r3, #20]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d111      	bne.n	800d156 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	3318      	adds	r3, #24
 800d13a:	011b      	lsls	r3, r3, #4
 800d13c:	4413      	add	r3, r2
 800d13e:	3304      	adds	r3, #4
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68fa      	ldr	r2, [r7, #12]
 800d144:	6811      	ldr	r1, [r2, #0]
 800d146:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	3318      	adds	r3, #24
 800d14e:	011b      	lsls	r3, r3, #4
 800d150:	440b      	add	r3, r1
 800d152:	3304      	adds	r3, #4
 800d154:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3307      	adds	r3, #7
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	061a      	lsls	r2, r3, #24
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3306      	adds	r3, #6
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	041b      	lsls	r3, r3, #16
 800d166:	431a      	orrs	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	3305      	adds	r3, #5
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	4313      	orrs	r3, r2
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	3204      	adds	r2, #4
 800d176:	7812      	ldrb	r2, [r2, #0]
 800d178:	4610      	mov	r0, r2
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	6811      	ldr	r1, [r2, #0]
 800d17e:	ea43 0200 	orr.w	r2, r3, r0
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	011b      	lsls	r3, r3, #4
 800d186:	440b      	add	r3, r1
 800d188:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800d18c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	3303      	adds	r3, #3
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	061a      	lsls	r2, r3, #24
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3302      	adds	r3, #2
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	041b      	lsls	r3, r3, #16
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	7812      	ldrb	r2, [r2, #0]
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	6811      	ldr	r1, [r2, #0]
 800d1b4:	ea43 0200 	orr.w	r2, r3, r0
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	011b      	lsls	r3, r3, #4
 800d1bc:	440b      	add	r3, r1
 800d1be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800d1c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	3318      	adds	r3, #24
 800d1cc:	011b      	lsls	r3, r3, #4
 800d1ce:	4413      	add	r3, r2
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	6811      	ldr	r1, [r2, #0]
 800d1d6:	f043 0201 	orr.w	r2, r3, #1
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	3318      	adds	r3, #24
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	440b      	add	r3, r1
 800d1e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	e00e      	b.n	800d206 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e006      	b.n	800d206 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
  }
}
 800d206:	4618      	mov	r0, r3
 800d208:	3724      	adds	r7, #36	@ 0x24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d212:	b480      	push	{r7}
 800d214:	b087      	sub	sp, #28
 800d216:	af00      	add	r7, sp, #0
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
 800d21e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d226:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d228:	7dfb      	ldrb	r3, [r7, #23]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d003      	beq.n	800d236 <HAL_CAN_GetRxMessage+0x24>
 800d22e:	7dfb      	ldrb	r3, [r7, #23]
 800d230:	2b02      	cmp	r3, #2
 800d232:	f040 80f3 	bne.w	800d41c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10e      	bne.n	800d25a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	f003 0303 	and.w	r3, r3, #3
 800d246:	2b00      	cmp	r3, #0
 800d248:	d116      	bne.n	800d278 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e0e7      	b.n	800d42a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	f003 0303 	and.w	r3, r3, #3
 800d264:	2b00      	cmp	r3, #0
 800d266:	d107      	bne.n	800d278 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d26c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e0d8      	b.n	800d42a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	331b      	adds	r3, #27
 800d280:	011b      	lsls	r3, r3, #4
 800d282:	4413      	add	r3, r2
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0204 	and.w	r2, r3, #4
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10c      	bne.n	800d2b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	331b      	adds	r3, #27
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	4413      	add	r3, r2
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	0d5b      	lsrs	r3, r3, #21
 800d2a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	e00b      	b.n	800d2c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	331b      	adds	r3, #27
 800d2b8:	011b      	lsls	r3, r3, #4
 800d2ba:	4413      	add	r3, r2
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	08db      	lsrs	r3, r3, #3
 800d2c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	331b      	adds	r3, #27
 800d2d0:	011b      	lsls	r3, r3, #4
 800d2d2:	4413      	add	r3, r2
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f003 0202 	and.w	r2, r3, #2
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	331b      	adds	r3, #27
 800d2e6:	011b      	lsls	r3, r3, #4
 800d2e8:	4413      	add	r3, r2
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 020f 	and.w	r2, r3, #15
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	331b      	adds	r3, #27
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	4413      	add	r3, r2
 800d302:	3304      	adds	r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	0a1b      	lsrs	r3, r3, #8
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	331b      	adds	r3, #27
 800d316:	011b      	lsls	r3, r3, #4
 800d318:	4413      	add	r3, r2
 800d31a:	3304      	adds	r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	0c1b      	lsrs	r3, r3, #16
 800d320:	b29a      	uxth	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	011b      	lsls	r3, r3, #4
 800d32e:	4413      	add	r3, r2
 800d330:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	b2da      	uxtb	r2, r3
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	011b      	lsls	r3, r3, #4
 800d344:	4413      	add	r3, r2
 800d346:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	0a1a      	lsrs	r2, r3, #8
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	3301      	adds	r3, #1
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	0c1a      	lsrs	r2, r3, #16
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	3302      	adds	r3, #2
 800d36c:	b2d2      	uxtb	r2, r2
 800d36e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	4413      	add	r3, r2
 800d37a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	0e1a      	lsrs	r2, r3, #24
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	3303      	adds	r3, #3
 800d386:	b2d2      	uxtb	r2, r2
 800d388:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	011b      	lsls	r3, r3, #4
 800d392:	4413      	add	r3, r2
 800d394:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	3304      	adds	r3, #4
 800d39e:	b2d2      	uxtb	r2, r2
 800d3a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	0a1a      	lsrs	r2, r3, #8
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	3305      	adds	r3, #5
 800d3b8:	b2d2      	uxtb	r2, r2
 800d3ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	011b      	lsls	r3, r3, #4
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	0c1a      	lsrs	r2, r3, #16
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	3306      	adds	r3, #6
 800d3d2:	b2d2      	uxtb	r2, r2
 800d3d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	0e1a      	lsrs	r2, r3, #24
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	3307      	adds	r3, #7
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d108      	bne.n	800d408 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f042 0220 	orr.w	r2, r2, #32
 800d404:	60da      	str	r2, [r3, #12]
 800d406:	e007      	b.n	800d418 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	691a      	ldr	r2, [r3, #16]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f042 0220 	orr.w	r2, r2, #32
 800d416:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	e006      	b.n	800d42a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d420:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
  }
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	371c      	adds	r7, #28
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800d436:	b480      	push	{r7}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d446:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d002      	beq.n	800d454 <HAL_CAN_ActivateNotification+0x1e>
 800d44e:	7bfb      	ldrb	r3, [r7, #15]
 800d450:	2b02      	cmp	r3, #2
 800d452:	d109      	bne.n	800d468 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6959      	ldr	r1, [r3, #20]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	e006      	b.n	800d476 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d46c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d474:	2301      	movs	r3, #1
  }
}
 800d476:	4618      	mov	r0, r3
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800d482:	b480      	push	{r7}
 800d484:	b085      	sub	sp, #20
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d492:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800d494:	7bfb      	ldrb	r3, [r7, #15]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d002      	beq.n	800d4a0 <HAL_CAN_DeactivateNotification+0x1e>
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d10a      	bne.n	800d4b6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6959      	ldr	r1, [r3, #20]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	43da      	mvns	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	400a      	ands	r2, r1
 800d4b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	e006      	b.n	800d4c4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
  }
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3714      	adds	r7, #20
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	@ 0x28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	f003 0301 	and.w	r3, r3, #1
 800d512:	2b00      	cmp	r3, #0
 800d514:	d07c      	beq.n	800d610 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d023      	beq.n	800d568 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2201      	movs	r2, #1
 800d526:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	f003 0302 	and.w	r3, r3, #2
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f983 	bl	800d83e <HAL_CAN_TxMailbox0CompleteCallback>
 800d538:	e016      	b.n	800d568 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	f003 0304 	and.w	r3, r3, #4
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d546:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d54c:	e00c      	b.n	800d568 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	f003 0308 	and.w	r3, r3, #8
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d55e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d560:	e002      	b.n	800d568 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f989 	bl	800d87a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d024      	beq.n	800d5bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d57a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f963 	bl	800d852 <HAL_CAN_TxMailbox1CompleteCallback>
 800d58c:	e016      	b.n	800d5bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d594:	2b00      	cmp	r3, #0
 800d596:	d004      	beq.n	800d5a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d59e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5a0:	e00c      	b.n	800d5bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d004      	beq.n	800d5b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d5b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5b4:	e002      	b.n	800d5bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f969 	bl	800d88e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d024      	beq.n	800d610 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d5ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d003      	beq.n	800d5e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f943 	bl	800d866 <HAL_CAN_TxMailbox2CompleteCallback>
 800d5e0:	e016      	b.n	800d610 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f4:	e00c      	b.n	800d610 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d606:	627b      	str	r3, [r7, #36]	@ 0x24
 800d608:	e002      	b.n	800d610 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f949 	bl	800d8a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	f003 0308 	and.w	r3, r3, #8
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00c      	beq.n	800d634 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f003 0310 	and.w	r3, r3, #16
 800d620:	2b00      	cmp	r3, #0
 800d622:	d007      	beq.n	800d634 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d62a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2210      	movs	r2, #16
 800d632:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	f003 0304 	and.w	r3, r3, #4
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f003 0308 	and.w	r3, r3, #8
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2208      	movs	r2, #8
 800d64e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f930 	bl	800d8b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	f003 0302 	and.w	r3, r3, #2
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d009      	beq.n	800d674 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	f003 0303 	and.w	r3, r3, #3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7f3 fdac 	bl	80011cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00c      	beq.n	800d698 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	f003 0310 	and.w	r3, r3, #16
 800d684:	2b00      	cmp	r3, #0
 800d686:	d007      	beq.n	800d698 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d68e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2210      	movs	r2, #16
 800d696:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	f003 0320 	and.w	r3, r3, #32
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00b      	beq.n	800d6ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f003 0308 	and.w	r3, r3, #8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d006      	beq.n	800d6ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f908 	bl	800d8ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	f003 0310 	and.w	r3, r3, #16
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d009      	beq.n	800d6d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	f003 0303 	and.w	r3, r3, #3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7f3 fd85 	bl	80011e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00b      	beq.n	800d6fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2210      	movs	r2, #16
 800d6f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f8f2 	bl	800d8de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00b      	beq.n	800d71c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	f003 0308 	and.w	r3, r3, #8
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d006      	beq.n	800d71c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2208      	movs	r2, #8
 800d714:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f8eb 	bl	800d8f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d07b      	beq.n	800d81e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d072      	beq.n	800d816 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d736:	2b00      	cmp	r3, #0
 800d738:	d008      	beq.n	800d74c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d740:	2b00      	cmp	r3, #0
 800d742:	d003      	beq.n	800d74c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d746:	f043 0301 	orr.w	r3, r3, #1
 800d74a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d752:	2b00      	cmp	r3, #0
 800d754:	d008      	beq.n	800d768 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d762:	f043 0302 	orr.w	r3, r3, #2
 800d766:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d008      	beq.n	800d784 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d003      	beq.n	800d784 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	f043 0304 	orr.w	r3, r3, #4
 800d782:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d043      	beq.n	800d816 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d794:	2b00      	cmp	r3, #0
 800d796:	d03e      	beq.n	800d816 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d79e:	2b60      	cmp	r3, #96	@ 0x60
 800d7a0:	d02b      	beq.n	800d7fa <HAL_CAN_IRQHandler+0x32a>
 800d7a2:	2b60      	cmp	r3, #96	@ 0x60
 800d7a4:	d82e      	bhi.n	800d804 <HAL_CAN_IRQHandler+0x334>
 800d7a6:	2b50      	cmp	r3, #80	@ 0x50
 800d7a8:	d022      	beq.n	800d7f0 <HAL_CAN_IRQHandler+0x320>
 800d7aa:	2b50      	cmp	r3, #80	@ 0x50
 800d7ac:	d82a      	bhi.n	800d804 <HAL_CAN_IRQHandler+0x334>
 800d7ae:	2b40      	cmp	r3, #64	@ 0x40
 800d7b0:	d019      	beq.n	800d7e6 <HAL_CAN_IRQHandler+0x316>
 800d7b2:	2b40      	cmp	r3, #64	@ 0x40
 800d7b4:	d826      	bhi.n	800d804 <HAL_CAN_IRQHandler+0x334>
 800d7b6:	2b30      	cmp	r3, #48	@ 0x30
 800d7b8:	d010      	beq.n	800d7dc <HAL_CAN_IRQHandler+0x30c>
 800d7ba:	2b30      	cmp	r3, #48	@ 0x30
 800d7bc:	d822      	bhi.n	800d804 <HAL_CAN_IRQHandler+0x334>
 800d7be:	2b10      	cmp	r3, #16
 800d7c0:	d002      	beq.n	800d7c8 <HAL_CAN_IRQHandler+0x2f8>
 800d7c2:	2b20      	cmp	r3, #32
 800d7c4:	d005      	beq.n	800d7d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800d7c6:	e01d      	b.n	800d804 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ca:	f043 0308 	orr.w	r3, r3, #8
 800d7ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d7d0:	e019      	b.n	800d806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d4:	f043 0310 	orr.w	r3, r3, #16
 800d7d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d7da:	e014      	b.n	800d806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7de:	f043 0320 	orr.w	r3, r3, #32
 800d7e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d7e4:	e00f      	b.n	800d806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d7ee:	e00a      	b.n	800d806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d7f8:	e005      	b.n	800d806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d800:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d802:	e000      	b.n	800d806 <HAL_CAN_IRQHandler+0x336>
            break;
 800d804:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	699a      	ldr	r2, [r3, #24]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d814:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2204      	movs	r2, #4
 800d81c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	2b00      	cmp	r3, #0
 800d822:	d008      	beq.n	800d836 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82a:	431a      	orrs	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f868 	bl	800d906 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800d836:	bf00      	nop
 800d838:	3728      	adds	r7, #40	@ 0x28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d83e:	b480      	push	{r7}
 800d840:	b083      	sub	sp, #12
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800d846:	bf00      	nop
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d852:	b480      	push	{r7}
 800d854:	b083      	sub	sp, #12
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800d85a:	bf00      	nop
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800d86e:	bf00      	nop
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr

0800d87a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d87a:	b480      	push	{r7}
 800d87c:	b083      	sub	sp, #12
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d882:	bf00      	nop
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b083      	sub	sp, #12
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d8aa:	bf00      	nop
 800d8ac:	370c      	adds	r7, #12
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b083      	sub	sp, #12
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d8be:	bf00      	nop
 800d8c0:	370c      	adds	r7, #12
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b083      	sub	sp, #12
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d8e6:	bf00      	nop
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800d8fa:	bf00      	nop
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
	...

0800d91c <__NVIC_SetPriorityGrouping>:
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f003 0307 	and.w	r3, r3, #7
 800d92a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d92c:	4b0c      	ldr	r3, [pc, #48]	@ (800d960 <__NVIC_SetPriorityGrouping+0x44>)
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d938:	4013      	ands	r3, r2
 800d93a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d94c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d94e:	4a04      	ldr	r2, [pc, #16]	@ (800d960 <__NVIC_SetPriorityGrouping+0x44>)
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	60d3      	str	r3, [r2, #12]
}
 800d954:	bf00      	nop
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr
 800d960:	e000ed00 	.word	0xe000ed00

0800d964 <__NVIC_GetPriorityGrouping>:
{
 800d964:	b480      	push	{r7}
 800d966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d968:	4b04      	ldr	r3, [pc, #16]	@ (800d97c <__NVIC_GetPriorityGrouping+0x18>)
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	0a1b      	lsrs	r3, r3, #8
 800d96e:	f003 0307 	and.w	r3, r3, #7
}
 800d972:	4618      	mov	r0, r3
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	e000ed00 	.word	0xe000ed00

0800d980 <__NVIC_EnableIRQ>:
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	4603      	mov	r3, r0
 800d988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d98a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	db0b      	blt.n	800d9aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	f003 021f 	and.w	r2, r3, #31
 800d998:	4907      	ldr	r1, [pc, #28]	@ (800d9b8 <__NVIC_EnableIRQ+0x38>)
 800d99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d99e:	095b      	lsrs	r3, r3, #5
 800d9a0:	2001      	movs	r0, #1
 800d9a2:	fa00 f202 	lsl.w	r2, r0, r2
 800d9a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d9aa:	bf00      	nop
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	e000e100 	.word	0xe000e100

0800d9bc <__NVIC_DisableIRQ>:
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d9c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	db12      	blt.n	800d9f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	f003 021f 	and.w	r2, r3, #31
 800d9d4:	490a      	ldr	r1, [pc, #40]	@ (800da00 <__NVIC_DisableIRQ+0x44>)
 800d9d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9da:	095b      	lsrs	r3, r3, #5
 800d9dc:	2001      	movs	r0, #1
 800d9de:	fa00 f202 	lsl.w	r2, r0, r2
 800d9e2:	3320      	adds	r3, #32
 800d9e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d9e8:	f3bf 8f4f 	dsb	sy
}
 800d9ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d9ee:	f3bf 8f6f 	isb	sy
}
 800d9f2:	bf00      	nop
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	e000e100 	.word	0xe000e100

0800da04 <__NVIC_SetPriority>:
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	6039      	str	r1, [r7, #0]
 800da0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da14:	2b00      	cmp	r3, #0
 800da16:	db0a      	blt.n	800da2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	490c      	ldr	r1, [pc, #48]	@ (800da50 <__NVIC_SetPriority+0x4c>)
 800da1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da22:	0112      	lsls	r2, r2, #4
 800da24:	b2d2      	uxtb	r2, r2
 800da26:	440b      	add	r3, r1
 800da28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800da2c:	e00a      	b.n	800da44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4908      	ldr	r1, [pc, #32]	@ (800da54 <__NVIC_SetPriority+0x50>)
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	f003 030f 	and.w	r3, r3, #15
 800da3a:	3b04      	subs	r3, #4
 800da3c:	0112      	lsls	r2, r2, #4
 800da3e:	b2d2      	uxtb	r2, r2
 800da40:	440b      	add	r3, r1
 800da42:	761a      	strb	r2, [r3, #24]
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	e000e100 	.word	0xe000e100
 800da54:	e000ed00 	.word	0xe000ed00

0800da58 <NVIC_EncodePriority>:
{
 800da58:	b480      	push	{r7}
 800da5a:	b089      	sub	sp, #36	@ 0x24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	f1c3 0307 	rsb	r3, r3, #7
 800da72:	2b04      	cmp	r3, #4
 800da74:	bf28      	it	cs
 800da76:	2304      	movcs	r3, #4
 800da78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	3304      	adds	r3, #4
 800da7e:	2b06      	cmp	r3, #6
 800da80:	d902      	bls.n	800da88 <NVIC_EncodePriority+0x30>
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	3b03      	subs	r3, #3
 800da86:	e000      	b.n	800da8a <NVIC_EncodePriority+0x32>
 800da88:	2300      	movs	r3, #0
 800da8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da8c:	f04f 32ff 	mov.w	r2, #4294967295
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	fa02 f303 	lsl.w	r3, r2, r3
 800da96:	43da      	mvns	r2, r3
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	401a      	ands	r2, r3
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800daa0:	f04f 31ff 	mov.w	r1, #4294967295
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	fa01 f303 	lsl.w	r3, r1, r3
 800daaa:	43d9      	mvns	r1, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dab0:	4313      	orrs	r3, r2
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3724      	adds	r7, #36	@ 0x24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b082      	sub	sp, #8
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7ff ff28 	bl	800d91c <__NVIC_SetPriorityGrouping>
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dae2:	2300      	movs	r3, #0
 800dae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dae6:	f7ff ff3d 	bl	800d964 <__NVIC_GetPriorityGrouping>
 800daea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	68b9      	ldr	r1, [r7, #8]
 800daf0:	6978      	ldr	r0, [r7, #20]
 800daf2:	f7ff ffb1 	bl	800da58 <NVIC_EncodePriority>
 800daf6:	4602      	mov	r2, r0
 800daf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff ff80 	bl	800da04 <__NVIC_SetPriority>
}
 800db04:	bf00      	nop
 800db06:	3718      	adds	r7, #24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800db16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7ff ff30 	bl	800d980 <__NVIC_EnableIRQ>
}
 800db20:	bf00      	nop
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800db32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff ff40 	bl	800d9bc <__NVIC_DisableIRQ>
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800db4c:	2300      	movs	r3, #0
 800db4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800db50:	f7fe fdd2 	bl	800c6f8 <HAL_GetTick>
 800db54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d101      	bne.n	800db60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e099      	b.n	800dc94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f022 0201 	bic.w	r2, r2, #1
 800db7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800db80:	e00f      	b.n	800dba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800db82:	f7fe fdb9 	bl	800c6f8 <HAL_GetTick>
 800db86:	4602      	mov	r2, r0
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	2b05      	cmp	r3, #5
 800db8e:	d908      	bls.n	800dba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2220      	movs	r2, #32
 800db94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2203      	movs	r2, #3
 800db9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800db9e:	2303      	movs	r3, #3
 800dba0:	e078      	b.n	800dc94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1e8      	bne.n	800db82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	4b38      	ldr	r3, [pc, #224]	@ (800dc9c <HAL_DMA_Init+0x158>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dbce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dbda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dbe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf8:	2b04      	cmp	r3, #4
 800dbfa:	d107      	bne.n	800dc0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc04:	4313      	orrs	r3, r2
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	f023 0307 	bic.w	r3, r3, #7
 800dc22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	d117      	bne.n	800dc66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00e      	beq.n	800dc66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fb0d 	bl	800e268 <DMA_CheckFifoParam>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d008      	beq.n	800dc66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2240      	movs	r2, #64	@ 0x40
 800dc58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800dc62:	2301      	movs	r3, #1
 800dc64:	e016      	b.n	800dc94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	697a      	ldr	r2, [r7, #20]
 800dc6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fac4 	bl	800e1fc <DMA_CalcBaseAndBitshift>
 800dc74:	4603      	mov	r3, r0
 800dc76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc7c:	223f      	movs	r2, #63	@ 0x3f
 800dc7e:	409a      	lsls	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3718      	adds	r7, #24
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	f010803f 	.word	0xf010803f

0800dca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d101      	bne.n	800dcc6 <HAL_DMA_Start_IT+0x26>
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	e040      	b.n	800dd48 <HAL_DMA_Start_IT+0xa8>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d12f      	bne.n	800dd3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2202      	movs	r2, #2
 800dcde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	68b9      	ldr	r1, [r7, #8]
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 fa56 	bl	800e1a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcf8:	223f      	movs	r2, #63	@ 0x3f
 800dcfa:	409a      	lsls	r2, r3
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f042 0216 	orr.w	r2, r2, #22
 800dd0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d007      	beq.n	800dd28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f042 0208 	orr.w	r2, r2, #8
 800dd26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f042 0201 	orr.w	r2, r2, #1
 800dd36:	601a      	str	r2, [r3, #0]
 800dd38:	e005      	b.n	800dd46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800dd42:	2302      	movs	r3, #2
 800dd44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800dd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800dd5e:	f7fe fccb 	bl	800c6f8 <HAL_GetTick>
 800dd62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d008      	beq.n	800dd82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2280      	movs	r2, #128	@ 0x80
 800dd74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e052      	b.n	800de28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 0216 	bic.w	r2, r2, #22
 800dd90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	695a      	ldr	r2, [r3, #20]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dda0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d103      	bne.n	800ddb2 <HAL_DMA_Abort+0x62>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d007      	beq.n	800ddc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f022 0208 	bic.w	r2, r2, #8
 800ddc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f022 0201 	bic.w	r2, r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ddd2:	e013      	b.n	800ddfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ddd4:	f7fe fc90 	bl	800c6f8 <HAL_GetTick>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	2b05      	cmp	r3, #5
 800dde0:	d90c      	bls.n	800ddfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2220      	movs	r2, #32
 800dde6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2203      	movs	r2, #3
 800ddec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800ddf8:	2303      	movs	r3, #3
 800ddfa:	e015      	b.n	800de28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1e4      	bne.n	800ddd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de0e:	223f      	movs	r2, #63	@ 0x3f
 800de10:	409a      	lsls	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800de26:	2300      	movs	r3, #0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b02      	cmp	r3, #2
 800de42:	d004      	beq.n	800de4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2280      	movs	r2, #128	@ 0x80
 800de48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e00c      	b.n	800de68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2205      	movs	r2, #5
 800de52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f022 0201 	bic.w	r2, r2, #1
 800de64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800de7c:	2300      	movs	r3, #0
 800de7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800de80:	4b8e      	ldr	r3, [pc, #568]	@ (800e0bc <HAL_DMA_IRQHandler+0x248>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a8e      	ldr	r2, [pc, #568]	@ (800e0c0 <HAL_DMA_IRQHandler+0x24c>)
 800de86:	fba2 2303 	umull	r2, r3, r2, r3
 800de8a:	0a9b      	lsrs	r3, r3, #10
 800de8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de9e:	2208      	movs	r2, #8
 800dea0:	409a      	lsls	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	4013      	ands	r3, r2
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d01a      	beq.n	800dee0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f003 0304 	and.w	r3, r3, #4
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d013      	beq.n	800dee0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f022 0204 	bic.w	r2, r2, #4
 800dec6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800decc:	2208      	movs	r2, #8
 800dece:	409a      	lsls	r2, r3
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ded8:	f043 0201 	orr.w	r2, r3, #1
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dee4:	2201      	movs	r2, #1
 800dee6:	409a      	lsls	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4013      	ands	r3, r2
 800deec:	2b00      	cmp	r3, #0
 800deee:	d012      	beq.n	800df16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df02:	2201      	movs	r2, #1
 800df04:	409a      	lsls	r2, r3
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df0e:	f043 0202 	orr.w	r2, r3, #2
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df1a:	2204      	movs	r2, #4
 800df1c:	409a      	lsls	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	4013      	ands	r3, r2
 800df22:	2b00      	cmp	r3, #0
 800df24:	d012      	beq.n	800df4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 0302 	and.w	r3, r3, #2
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df38:	2204      	movs	r2, #4
 800df3a:	409a      	lsls	r2, r3
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df44:	f043 0204 	orr.w	r2, r3, #4
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df50:	2210      	movs	r2, #16
 800df52:	409a      	lsls	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4013      	ands	r3, r2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d043      	beq.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 0308 	and.w	r3, r3, #8
 800df66:	2b00      	cmp	r3, #0
 800df68:	d03c      	beq.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df6e:	2210      	movs	r2, #16
 800df70:	409a      	lsls	r2, r3
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d018      	beq.n	800dfb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d108      	bne.n	800dfa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df96:	2b00      	cmp	r3, #0
 800df98:	d024      	beq.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	4798      	blx	r3
 800dfa2:	e01f      	b.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01b      	beq.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	4798      	blx	r3
 800dfb4:	e016      	b.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d107      	bne.n	800dfd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f022 0208 	bic.w	r2, r2, #8
 800dfd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d003      	beq.n	800dfe4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfe8:	2220      	movs	r2, #32
 800dfea:	409a      	lsls	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4013      	ands	r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 808f 	beq.w	800e114 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f003 0310 	and.w	r3, r3, #16
 800e000:	2b00      	cmp	r3, #0
 800e002:	f000 8087 	beq.w	800e114 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e00a:	2220      	movs	r2, #32
 800e00c:	409a      	lsls	r2, r3
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b05      	cmp	r3, #5
 800e01c:	d136      	bne.n	800e08c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f022 0216 	bic.w	r2, r2, #22
 800e02c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	695a      	ldr	r2, [r3, #20]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e03c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e042:	2b00      	cmp	r3, #0
 800e044:	d103      	bne.n	800e04e <HAL_DMA_IRQHandler+0x1da>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d007      	beq.n	800e05e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f022 0208 	bic.w	r2, r2, #8
 800e05c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e062:	223f      	movs	r2, #63	@ 0x3f
 800e064:	409a      	lsls	r2, r3
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d07e      	beq.n	800e180 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	4798      	blx	r3
        }
        return;
 800e08a:	e079      	b.n	800e180 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e096:	2b00      	cmp	r3, #0
 800e098:	d01d      	beq.n	800e0d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10d      	bne.n	800e0c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d031      	beq.n	800e114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	4798      	blx	r3
 800e0b8:	e02c      	b.n	800e114 <HAL_DMA_IRQHandler+0x2a0>
 800e0ba:	bf00      	nop
 800e0bc:	20000004 	.word	0x20000004
 800e0c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d023      	beq.n	800e114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	4798      	blx	r3
 800e0d4:	e01e      	b.n	800e114 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10f      	bne.n	800e104 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f022 0210 	bic.w	r2, r2, #16
 800e0f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d003      	beq.n	800e114 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d032      	beq.n	800e182 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e120:	f003 0301 	and.w	r3, r3, #1
 800e124:	2b00      	cmp	r3, #0
 800e126:	d022      	beq.n	800e16e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2205      	movs	r2, #5
 800e12c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 0201 	bic.w	r2, r2, #1
 800e13e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	3301      	adds	r3, #1
 800e144:	60bb      	str	r3, [r7, #8]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d307      	bcc.n	800e15c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 0301 	and.w	r3, r3, #1
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1f2      	bne.n	800e140 <HAL_DMA_IRQHandler+0x2cc>
 800e15a:	e000      	b.n	800e15e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800e15c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d005      	beq.n	800e182 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	4798      	blx	r3
 800e17e:	e000      	b.n	800e182 <HAL_DMA_IRQHandler+0x30e>
        return;
 800e180:	bf00      	nop
    }
  }
}
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800e194:	4618      	mov	r0, r3
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
 800e1ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e1bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	2b40      	cmp	r3, #64	@ 0x40
 800e1cc:	d108      	bne.n	800e1e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e1de:	e007      	b.n	800e1f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	60da      	str	r2, [r3, #12]
}
 800e1f0:	bf00      	nop
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	3b10      	subs	r3, #16
 800e20c:	4a14      	ldr	r2, [pc, #80]	@ (800e260 <DMA_CalcBaseAndBitshift+0x64>)
 800e20e:	fba2 2303 	umull	r2, r3, r2, r3
 800e212:	091b      	lsrs	r3, r3, #4
 800e214:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e216:	4a13      	ldr	r2, [pc, #76]	@ (800e264 <DMA_CalcBaseAndBitshift+0x68>)
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	4413      	add	r3, r2
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	461a      	mov	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2b03      	cmp	r3, #3
 800e228:	d909      	bls.n	800e23e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e232:	f023 0303 	bic.w	r3, r3, #3
 800e236:	1d1a      	adds	r2, r3, #4
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	659a      	str	r2, [r3, #88]	@ 0x58
 800e23c:	e007      	b.n	800e24e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e246:	f023 0303 	bic.w	r3, r3, #3
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e252:	4618      	mov	r0, r3
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	aaaaaaab 	.word	0xaaaaaaab
 800e264:	08023908 	.word	0x08023908

0800e268 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e278:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	699b      	ldr	r3, [r3, #24]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d11f      	bne.n	800e2c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b03      	cmp	r3, #3
 800e286:	d856      	bhi.n	800e336 <DMA_CheckFifoParam+0xce>
 800e288:	a201      	add	r2, pc, #4	@ (adr r2, 800e290 <DMA_CheckFifoParam+0x28>)
 800e28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e28e:	bf00      	nop
 800e290:	0800e2a1 	.word	0x0800e2a1
 800e294:	0800e2b3 	.word	0x0800e2b3
 800e298:	0800e2a1 	.word	0x0800e2a1
 800e29c:	0800e337 	.word	0x0800e337
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d046      	beq.n	800e33a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2b0:	e043      	b.n	800e33a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e2ba:	d140      	bne.n	800e33e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2c0:	e03d      	b.n	800e33e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2ca:	d121      	bne.n	800e310 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d837      	bhi.n	800e342 <DMA_CheckFifoParam+0xda>
 800e2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2d8 <DMA_CheckFifoParam+0x70>)
 800e2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d8:	0800e2e9 	.word	0x0800e2e9
 800e2dc:	0800e2ef 	.word	0x0800e2ef
 800e2e0:	0800e2e9 	.word	0x0800e2e9
 800e2e4:	0800e301 	.word	0x0800e301
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800e2ec:	e030      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d025      	beq.n	800e346 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2fe:	e022      	b.n	800e346 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e304:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e308:	d11f      	bne.n	800e34a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e30e:	e01c      	b.n	800e34a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d903      	bls.n	800e31e <DMA_CheckFifoParam+0xb6>
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d003      	beq.n	800e324 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e31c:	e018      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	73fb      	strb	r3, [r7, #15]
      break;
 800e322:	e015      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00e      	beq.n	800e34e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e330:	2301      	movs	r3, #1
 800e332:	73fb      	strb	r3, [r7, #15]
      break;
 800e334:	e00b      	b.n	800e34e <DMA_CheckFifoParam+0xe6>
      break;
 800e336:	bf00      	nop
 800e338:	e00a      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      break;
 800e33a:	bf00      	nop
 800e33c:	e008      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      break;
 800e33e:	bf00      	nop
 800e340:	e006      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      break;
 800e342:	bf00      	nop
 800e344:	e004      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      break;
 800e346:	bf00      	nop
 800e348:	e002      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      break;   
 800e34a:	bf00      	nop
 800e34c:	e000      	b.n	800e350 <DMA_CheckFifoParam+0xe8>
      break;
 800e34e:	bf00      	nop
    }
  } 
  
  return status; 
 800e350:	7bfb      	ldrb	r3, [r7, #15]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop

0800e360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e360:	b480      	push	{r7}
 800e362:	b089      	sub	sp, #36	@ 0x24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e36e:	2300      	movs	r3, #0
 800e370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e372:	2300      	movs	r3, #0
 800e374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e376:	2300      	movs	r3, #0
 800e378:	61fb      	str	r3, [r7, #28]
 800e37a:	e16b      	b.n	800e654 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e37c:	2201      	movs	r2, #1
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	fa02 f303 	lsl.w	r3, r2, r3
 800e384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	4013      	ands	r3, r2
 800e38e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	429a      	cmp	r2, r3
 800e396:	f040 815a 	bne.w	800e64e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	f003 0303 	and.w	r3, r3, #3
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d005      	beq.n	800e3b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d130      	bne.n	800e414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	2203      	movs	r2, #3
 800e3be:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c2:	43db      	mvns	r3, r3
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	68da      	ldr	r2, [r3, #12]
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3d6:	69ba      	ldr	r2, [r7, #24]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	69ba      	ldr	r2, [r7, #24]
 800e3e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f0:	43db      	mvns	r3, r3
 800e3f2:	69ba      	ldr	r2, [r7, #24]
 800e3f4:	4013      	ands	r3, r2
 800e3f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	091b      	lsrs	r3, r3, #4
 800e3fe:	f003 0201 	and.w	r2, r3, #1
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	fa02 f303 	lsl.w	r3, r2, r3
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	4313      	orrs	r3, r2
 800e40c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	69ba      	ldr	r2, [r7, #24]
 800e412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	f003 0303 	and.w	r3, r3, #3
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d017      	beq.n	800e450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	2203      	movs	r2, #3
 800e42c:	fa02 f303 	lsl.w	r3, r2, r3
 800e430:	43db      	mvns	r3, r3
 800e432:	69ba      	ldr	r2, [r7, #24]
 800e434:	4013      	ands	r3, r2
 800e436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	689a      	ldr	r2, [r3, #8]
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	fa02 f303 	lsl.w	r3, r2, r3
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	4313      	orrs	r3, r2
 800e448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	f003 0303 	and.w	r3, r3, #3
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d123      	bne.n	800e4a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	08da      	lsrs	r2, r3, #3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3208      	adds	r2, #8
 800e464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	f003 0307 	and.w	r3, r3, #7
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	220f      	movs	r2, #15
 800e474:	fa02 f303 	lsl.w	r3, r2, r3
 800e478:	43db      	mvns	r3, r3
 800e47a:	69ba      	ldr	r2, [r7, #24]
 800e47c:	4013      	ands	r3, r2
 800e47e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	691a      	ldr	r2, [r3, #16]
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	f003 0307 	and.w	r3, r3, #7
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	fa02 f303 	lsl.w	r3, r2, r3
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	4313      	orrs	r3, r2
 800e494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	08da      	lsrs	r2, r3, #3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3208      	adds	r2, #8
 800e49e:	69b9      	ldr	r1, [r7, #24]
 800e4a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	2203      	movs	r2, #3
 800e4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b4:	43db      	mvns	r3, r3
 800e4b6:	69ba      	ldr	r2, [r7, #24]
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f003 0203 	and.w	r2, r3, #3
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69ba      	ldr	r2, [r7, #24]
 800e4d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 80b4 	beq.w	800e64e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]
 800e4ea:	4b60      	ldr	r3, [pc, #384]	@ (800e66c <HAL_GPIO_Init+0x30c>)
 800e4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ee:	4a5f      	ldr	r2, [pc, #380]	@ (800e66c <HAL_GPIO_Init+0x30c>)
 800e4f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4f4:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4f6:	4b5d      	ldr	r3, [pc, #372]	@ (800e66c <HAL_GPIO_Init+0x30c>)
 800e4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e502:	4a5b      	ldr	r2, [pc, #364]	@ (800e670 <HAL_GPIO_Init+0x310>)
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	089b      	lsrs	r3, r3, #2
 800e508:	3302      	adds	r3, #2
 800e50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e50e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	f003 0303 	and.w	r3, r3, #3
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	220f      	movs	r2, #15
 800e51a:	fa02 f303 	lsl.w	r3, r2, r3
 800e51e:	43db      	mvns	r3, r3
 800e520:	69ba      	ldr	r2, [r7, #24]
 800e522:	4013      	ands	r3, r2
 800e524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a52      	ldr	r2, [pc, #328]	@ (800e674 <HAL_GPIO_Init+0x314>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d02b      	beq.n	800e586 <HAL_GPIO_Init+0x226>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a51      	ldr	r2, [pc, #324]	@ (800e678 <HAL_GPIO_Init+0x318>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d025      	beq.n	800e582 <HAL_GPIO_Init+0x222>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a50      	ldr	r2, [pc, #320]	@ (800e67c <HAL_GPIO_Init+0x31c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d01f      	beq.n	800e57e <HAL_GPIO_Init+0x21e>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a4f      	ldr	r2, [pc, #316]	@ (800e680 <HAL_GPIO_Init+0x320>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d019      	beq.n	800e57a <HAL_GPIO_Init+0x21a>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a4e      	ldr	r2, [pc, #312]	@ (800e684 <HAL_GPIO_Init+0x324>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d013      	beq.n	800e576 <HAL_GPIO_Init+0x216>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a4d      	ldr	r2, [pc, #308]	@ (800e688 <HAL_GPIO_Init+0x328>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d00d      	beq.n	800e572 <HAL_GPIO_Init+0x212>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a4c      	ldr	r2, [pc, #304]	@ (800e68c <HAL_GPIO_Init+0x32c>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d007      	beq.n	800e56e <HAL_GPIO_Init+0x20e>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a4b      	ldr	r2, [pc, #300]	@ (800e690 <HAL_GPIO_Init+0x330>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d101      	bne.n	800e56a <HAL_GPIO_Init+0x20a>
 800e566:	2307      	movs	r3, #7
 800e568:	e00e      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e56a:	2308      	movs	r3, #8
 800e56c:	e00c      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e56e:	2306      	movs	r3, #6
 800e570:	e00a      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e572:	2305      	movs	r3, #5
 800e574:	e008      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e576:	2304      	movs	r3, #4
 800e578:	e006      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e57a:	2303      	movs	r3, #3
 800e57c:	e004      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e57e:	2302      	movs	r3, #2
 800e580:	e002      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e582:	2301      	movs	r3, #1
 800e584:	e000      	b.n	800e588 <HAL_GPIO_Init+0x228>
 800e586:	2300      	movs	r3, #0
 800e588:	69fa      	ldr	r2, [r7, #28]
 800e58a:	f002 0203 	and.w	r2, r2, #3
 800e58e:	0092      	lsls	r2, r2, #2
 800e590:	4093      	lsls	r3, r2
 800e592:	69ba      	ldr	r2, [r7, #24]
 800e594:	4313      	orrs	r3, r2
 800e596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e598:	4935      	ldr	r1, [pc, #212]	@ (800e670 <HAL_GPIO_Init+0x310>)
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	089b      	lsrs	r3, r3, #2
 800e59e:	3302      	adds	r3, #2
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e5a6:	4b3b      	ldr	r3, [pc, #236]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	43db      	mvns	r3, r3
 800e5b0:	69ba      	ldr	r2, [r7, #24]
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d003      	beq.n	800e5ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800e5c2:	69ba      	ldr	r2, [r7, #24]
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e5ca:	4a32      	ldr	r2, [pc, #200]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e5d0:	4b30      	ldr	r3, [pc, #192]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	43db      	mvns	r3, r3
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	4013      	ands	r3, r2
 800e5de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e5f4:	4a27      	ldr	r2, [pc, #156]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e5fa:	4b26      	ldr	r3, [pc, #152]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	43db      	mvns	r3, r3
 800e604:	69ba      	ldr	r2, [r7, #24]
 800e606:	4013      	ands	r3, r2
 800e608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e612:	2b00      	cmp	r3, #0
 800e614:	d003      	beq.n	800e61e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800e616:	69ba      	ldr	r2, [r7, #24]
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e61e:	4a1d      	ldr	r2, [pc, #116]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e624:	4b1b      	ldr	r3, [pc, #108]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	43db      	mvns	r3, r3
 800e62e:	69ba      	ldr	r2, [r7, #24]
 800e630:	4013      	ands	r3, r2
 800e632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800e640:	69ba      	ldr	r2, [r7, #24]
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	4313      	orrs	r3, r2
 800e646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e648:	4a12      	ldr	r2, [pc, #72]	@ (800e694 <HAL_GPIO_Init+0x334>)
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	3301      	adds	r3, #1
 800e652:	61fb      	str	r3, [r7, #28]
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	2b0f      	cmp	r3, #15
 800e658:	f67f ae90 	bls.w	800e37c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	3724      	adds	r7, #36	@ 0x24
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	40023800 	.word	0x40023800
 800e670:	40013800 	.word	0x40013800
 800e674:	40020000 	.word	0x40020000
 800e678:	40020400 	.word	0x40020400
 800e67c:	40020800 	.word	0x40020800
 800e680:	40020c00 	.word	0x40020c00
 800e684:	40021000 	.word	0x40021000
 800e688:	40021400 	.word	0x40021400
 800e68c:	40021800 	.word	0x40021800
 800e690:	40021c00 	.word	0x40021c00
 800e694:	40013c00 	.word	0x40013c00

0800e698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	807b      	strh	r3, [r7, #2]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e6a8:	787b      	ldrb	r3, [r7, #1]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e6ae:	887a      	ldrh	r2, [r7, #2]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e6b4:	e003      	b.n	800e6be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e6b6:	887b      	ldrh	r3, [r7, #2]
 800e6b8:	041a      	lsls	r2, r3, #16
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	619a      	str	r2, [r3, #24]
}
 800e6be:	bf00      	nop
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
	...

0800e6cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e6d6:	4b08      	ldr	r3, [pc, #32]	@ (800e6f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e6d8:	695a      	ldr	r2, [r3, #20]
 800e6da:	88fb      	ldrh	r3, [r7, #6]
 800e6dc:	4013      	ands	r3, r2
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e6e2:	4a05      	ldr	r2, [pc, #20]	@ (800e6f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e6e4:	88fb      	ldrh	r3, [r7, #6]
 800e6e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e6e8:	88fb      	ldrh	r3, [r7, #6]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7f3 fbc2 	bl	8001e74 <HAL_GPIO_EXTI_Callback>
  }
}
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	40013c00 	.word	0x40013c00

0800e6fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e12b      	b.n	800e966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d106      	bne.n	800e728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7f4 fee6 	bl	80034f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2224      	movs	r2, #36	@ 0x24
 800e72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f022 0201 	bic.w	r2, r2, #1
 800e73e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e74e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e75e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800e760:	f003 fc04 	bl	8011f6c <HAL_RCC_GetPCLK1Freq>
 800e764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	4a81      	ldr	r2, [pc, #516]	@ (800e970 <HAL_I2C_Init+0x274>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d807      	bhi.n	800e780 <HAL_I2C_Init+0x84>
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4a80      	ldr	r2, [pc, #512]	@ (800e974 <HAL_I2C_Init+0x278>)
 800e774:	4293      	cmp	r3, r2
 800e776:	bf94      	ite	ls
 800e778:	2301      	movls	r3, #1
 800e77a:	2300      	movhi	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	e006      	b.n	800e78e <HAL_I2C_Init+0x92>
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	4a7d      	ldr	r2, [pc, #500]	@ (800e978 <HAL_I2C_Init+0x27c>)
 800e784:	4293      	cmp	r3, r2
 800e786:	bf94      	ite	ls
 800e788:	2301      	movls	r3, #1
 800e78a:	2300      	movhi	r3, #0
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e0e7      	b.n	800e966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	4a78      	ldr	r2, [pc, #480]	@ (800e97c <HAL_I2C_Init+0x280>)
 800e79a:	fba2 2303 	umull	r2, r3, r2, r3
 800e79e:	0c9b      	lsrs	r3, r3, #18
 800e7a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6a1b      	ldr	r3, [r3, #32]
 800e7bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	4a6a      	ldr	r2, [pc, #424]	@ (800e970 <HAL_I2C_Init+0x274>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d802      	bhi.n	800e7d0 <HAL_I2C_Init+0xd4>
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	e009      	b.n	800e7e4 <HAL_I2C_Init+0xe8>
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e7d6:	fb02 f303 	mul.w	r3, r2, r3
 800e7da:	4a69      	ldr	r2, [pc, #420]	@ (800e980 <HAL_I2C_Init+0x284>)
 800e7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e7e0:	099b      	lsrs	r3, r3, #6
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	6812      	ldr	r2, [r2, #0]
 800e7e8:	430b      	orrs	r3, r1
 800e7ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	69db      	ldr	r3, [r3, #28]
 800e7f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800e7f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	495c      	ldr	r1, [pc, #368]	@ (800e970 <HAL_I2C_Init+0x274>)
 800e800:	428b      	cmp	r3, r1
 800e802:	d819      	bhi.n	800e838 <HAL_I2C_Init+0x13c>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	1e59      	subs	r1, r3, #1
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e812:	1c59      	adds	r1, r3, #1
 800e814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800e818:	400b      	ands	r3, r1
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00a      	beq.n	800e834 <HAL_I2C_Init+0x138>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	1e59      	subs	r1, r3, #1
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	fbb1 f3f3 	udiv	r3, r1, r3
 800e82c:	3301      	adds	r3, #1
 800e82e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e832:	e051      	b.n	800e8d8 <HAL_I2C_Init+0x1dc>
 800e834:	2304      	movs	r3, #4
 800e836:	e04f      	b.n	800e8d8 <HAL_I2C_Init+0x1dc>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d111      	bne.n	800e864 <HAL_I2C_Init+0x168>
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	1e58      	subs	r0, r3, #1
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6859      	ldr	r1, [r3, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	440b      	add	r3, r1
 800e84e:	fbb0 f3f3 	udiv	r3, r0, r3
 800e852:	3301      	adds	r3, #1
 800e854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e858:	2b00      	cmp	r3, #0
 800e85a:	bf0c      	ite	eq
 800e85c:	2301      	moveq	r3, #1
 800e85e:	2300      	movne	r3, #0
 800e860:	b2db      	uxtb	r3, r3
 800e862:	e012      	b.n	800e88a <HAL_I2C_Init+0x18e>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	1e58      	subs	r0, r3, #1
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6859      	ldr	r1, [r3, #4]
 800e86c:	460b      	mov	r3, r1
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	440b      	add	r3, r1
 800e872:	0099      	lsls	r1, r3, #2
 800e874:	440b      	add	r3, r1
 800e876:	fbb0 f3f3 	udiv	r3, r0, r3
 800e87a:	3301      	adds	r3, #1
 800e87c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e880:	2b00      	cmp	r3, #0
 800e882:	bf0c      	ite	eq
 800e884:	2301      	moveq	r3, #1
 800e886:	2300      	movne	r3, #0
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <HAL_I2C_Init+0x196>
 800e88e:	2301      	movs	r3, #1
 800e890:	e022      	b.n	800e8d8 <HAL_I2C_Init+0x1dc>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10e      	bne.n	800e8b8 <HAL_I2C_Init+0x1bc>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	1e58      	subs	r0, r3, #1
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6859      	ldr	r1, [r3, #4]
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	440b      	add	r3, r1
 800e8a8:	fbb0 f3f3 	udiv	r3, r0, r3
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8b6:	e00f      	b.n	800e8d8 <HAL_I2C_Init+0x1dc>
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	1e58      	subs	r0, r3, #1
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6859      	ldr	r1, [r3, #4]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	440b      	add	r3, r1
 800e8c6:	0099      	lsls	r1, r3, #2
 800e8c8:	440b      	add	r3, r1
 800e8ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	6809      	ldr	r1, [r1, #0]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	69da      	ldr	r2, [r3, #28]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	431a      	orrs	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800e906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	6911      	ldr	r1, [r2, #16]
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	68d2      	ldr	r2, [r2, #12]
 800e912:	4311      	orrs	r1, r2
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	6812      	ldr	r2, [r2, #0]
 800e918:	430b      	orrs	r3, r1
 800e91a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	695a      	ldr	r2, [r3, #20]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	431a      	orrs	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	430a      	orrs	r2, r1
 800e936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f042 0201 	orr.w	r2, r2, #1
 800e946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2220      	movs	r2, #32
 800e952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	000186a0 	.word	0x000186a0
 800e974:	001e847f 	.word	0x001e847f
 800e978:	003d08ff 	.word	0x003d08ff
 800e97c:	431bde83 	.word	0x431bde83
 800e980:	10624dd3 	.word	0x10624dd3

0800e984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b088      	sub	sp, #32
 800e988:	af02      	add	r7, sp, #8
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	4608      	mov	r0, r1
 800e98e:	4611      	mov	r1, r2
 800e990:	461a      	mov	r2, r3
 800e992:	4603      	mov	r3, r0
 800e994:	817b      	strh	r3, [r7, #10]
 800e996:	460b      	mov	r3, r1
 800e998:	813b      	strh	r3, [r7, #8]
 800e99a:	4613      	mov	r3, r2
 800e99c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e99e:	f7fd feab 	bl	800c6f8 <HAL_GetTick>
 800e9a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b20      	cmp	r3, #32
 800e9ae:	f040 80d9 	bne.w	800eb64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	2319      	movs	r3, #25
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	496d      	ldr	r1, [pc, #436]	@ (800eb70 <HAL_I2C_Mem_Write+0x1ec>)
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f001 fa4b 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d001      	beq.n	800e9cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	e0cc      	b.n	800eb66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d101      	bne.n	800e9da <HAL_I2C_Mem_Write+0x56>
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	e0c5      	b.n	800eb66 <HAL_I2C_Mem_Write+0x1e2>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f003 0301 	and.w	r3, r3, #1
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d007      	beq.n	800ea00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f042 0201 	orr.w	r2, r2, #1
 800e9fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ea0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2221      	movs	r2, #33	@ 0x21
 800ea14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2240      	movs	r2, #64	@ 0x40
 800ea1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6a3a      	ldr	r2, [r7, #32]
 800ea2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	4a4d      	ldr	r2, [pc, #308]	@ (800eb74 <HAL_I2C_Mem_Write+0x1f0>)
 800ea40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea42:	88f8      	ldrh	r0, [r7, #6]
 800ea44:	893a      	ldrh	r2, [r7, #8]
 800ea46:	8979      	ldrh	r1, [r7, #10]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	4603      	mov	r3, r0
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 fec8 	bl	800f7e8 <I2C_RequestMemoryWrite>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d052      	beq.n	800eb04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e081      	b.n	800eb66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	f001 facc 	bl	8010004 <I2C_WaitOnTXEFlagUntilTimeout>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00d      	beq.n	800ea8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea76:	2b04      	cmp	r3, #4
 800ea78:	d107      	bne.n	800ea8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e06b      	b.n	800eb66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea92:	781a      	ldrb	r2, [r3, #0]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea9e:	1c5a      	adds	r2, r3, #1
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	3b01      	subs	r3, #1
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b04      	cmp	r3, #4
 800eaca:	d11b      	bne.n	800eb04 <HAL_I2C_Mem_Write+0x180>
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d017      	beq.n	800eb04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead8:	781a      	ldrb	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eae4:	1c5a      	adds	r2, r3, #1
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	3b01      	subs	r3, #1
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1aa      	bne.n	800ea62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f001 fab8 	bl	8010086 <I2C_WaitOnBTFFlagUntilTimeout>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00d      	beq.n	800eb38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d107      	bne.n	800eb34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eb32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800eb34:	2301      	movs	r3, #1
 800eb36:	e016      	b.n	800eb66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eb46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2220      	movs	r2, #32
 800eb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	e000      	b.n	800eb66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800eb64:	2302      	movs	r3, #2
  }
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3718      	adds	r7, #24
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	00100002 	.word	0x00100002
 800eb74:	ffff0000 	.word	0xffff0000

0800eb78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08c      	sub	sp, #48	@ 0x30
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	4608      	mov	r0, r1
 800eb82:	4611      	mov	r1, r2
 800eb84:	461a      	mov	r2, r3
 800eb86:	4603      	mov	r3, r0
 800eb88:	817b      	strh	r3, [r7, #10]
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	813b      	strh	r3, [r7, #8]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800eb92:	f7fd fdb1 	bl	800c6f8 <HAL_GetTick>
 800eb96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b20      	cmp	r3, #32
 800eba2:	f040 8208 	bne.w	800efb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800eba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	2319      	movs	r3, #25
 800ebac:	2201      	movs	r2, #1
 800ebae:	497b      	ldr	r1, [pc, #492]	@ (800ed9c <HAL_I2C_Mem_Read+0x224>)
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f001 f951 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	e1fb      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	d101      	bne.n	800ebce <HAL_I2C_Mem_Read+0x56>
 800ebca:	2302      	movs	r3, #2
 800ebcc:	e1f4      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d007      	beq.n	800ebf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f042 0201 	orr.w	r2, r2, #1
 800ebf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ec02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2222      	movs	r2, #34	@ 0x22
 800ec08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2240      	movs	r2, #64	@ 0x40
 800ec10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ec24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4a5b      	ldr	r2, [pc, #364]	@ (800eda0 <HAL_I2C_Mem_Read+0x228>)
 800ec34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ec36:	88f8      	ldrh	r0, [r7, #6]
 800ec38:	893a      	ldrh	r2, [r7, #8]
 800ec3a:	8979      	ldrh	r1, [r7, #10]
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	4603      	mov	r3, r0
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 fe64 	bl	800f914 <I2C_RequestMemoryRead>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d001      	beq.n	800ec56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ec52:	2301      	movs	r3, #1
 800ec54:	e1b0      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d113      	bne.n	800ec86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ec5e:	2300      	movs	r3, #0
 800ec60:	623b      	str	r3, [r7, #32]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	623b      	str	r3, [r7, #32]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	699b      	ldr	r3, [r3, #24]
 800ec70:	623b      	str	r3, [r7, #32]
 800ec72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	e184      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d11b      	bne.n	800ecc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ec9e:	2300      	movs	r3, #0
 800eca0:	61fb      	str	r3, [r7, #28]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	695b      	ldr	r3, [r3, #20]
 800eca8:	61fb      	str	r3, [r7, #28]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	61fb      	str	r3, [r7, #28]
 800ecb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	e164      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d11b      	bne.n	800ed06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ecee:	2300      	movs	r3, #0
 800ecf0:	61bb      	str	r3, [r7, #24]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	695b      	ldr	r3, [r3, #20]
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	699b      	ldr	r3, [r3, #24]
 800ed00:	61bb      	str	r3, [r7, #24]
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	e144      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ed06:	2300      	movs	r3, #0
 800ed08:	617b      	str	r3, [r7, #20]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	695b      	ldr	r3, [r3, #20]
 800ed10:	617b      	str	r3, [r7, #20]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	617b      	str	r3, [r7, #20]
 800ed1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ed1c:	e138      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	f200 80f1 	bhi.w	800ef0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d123      	bne.n	800ed78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f001 f9e7 	bl	8010108 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e139      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	691a      	ldr	r2, [r3, #16]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed60:	3b01      	subs	r3, #1
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ed76:	e10b      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d14e      	bne.n	800ee1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ed80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed86:	2200      	movs	r2, #0
 800ed88:	4906      	ldr	r1, [pc, #24]	@ (800eda4 <HAL_I2C_Mem_Read+0x22c>)
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f001 f864 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d008      	beq.n	800eda8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	e10e      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
 800ed9a:	bf00      	nop
 800ed9c:	00100002 	.word	0x00100002
 800eda0:	ffff0000 	.word	0xffff0000
 800eda4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800edb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	691a      	ldr	r2, [r3, #16]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edc2:	b2d2      	uxtb	r2, r2
 800edc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edd4:	3b01      	subs	r3, #1
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	3b01      	subs	r3, #1
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	691a      	ldr	r2, [r3, #16]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edf4:	b2d2      	uxtb	r2, r2
 800edf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfc:	1c5a      	adds	r2, r3, #1
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee06:	3b01      	subs	r3, #1
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	3b01      	subs	r3, #1
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee1c:	e0b8      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee24:	2200      	movs	r2, #0
 800ee26:	4966      	ldr	r1, [pc, #408]	@ (800efc0 <HAL_I2C_Mem_Read+0x448>)
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f001 f815 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ee34:	2301      	movs	r3, #1
 800ee36:	e0bf      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	691a      	ldr	r2, [r3, #16]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee52:	b2d2      	uxtb	r2, r2
 800ee54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee64:	3b01      	subs	r3, #1
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee80:	2200      	movs	r2, #0
 800ee82:	494f      	ldr	r1, [pc, #316]	@ (800efc0 <HAL_I2C_Mem_Read+0x448>)
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f000 ffe7 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ee90:	2301      	movs	r3, #1
 800ee92:	e091      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	691a      	ldr	r2, [r3, #16]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeae:	b2d2      	uxtb	r2, r2
 800eeb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eec0:	3b01      	subs	r3, #1
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3b01      	subs	r3, #1
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	691a      	ldr	r2, [r3, #16]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee0:	b2d2      	uxtb	r2, r2
 800eee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee8:	1c5a      	adds	r2, r3, #1
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eef2:	3b01      	subs	r3, #1
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	3b01      	subs	r3, #1
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ef08:	e042      	b.n	800ef90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f001 f8fa 	bl	8010108 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e04c      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	691a      	ldr	r2, [r3, #16]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef28:	b2d2      	uxtb	r2, r2
 800ef2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	695b      	ldr	r3, [r3, #20]
 800ef56:	f003 0304 	and.w	r3, r3, #4
 800ef5a:	2b04      	cmp	r3, #4
 800ef5c:	d118      	bne.n	800ef90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef68:	b2d2      	uxtb	r2, r2
 800ef6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef70:	1c5a      	adds	r2, r3, #1
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f47f aec2 	bne.w	800ed1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2220      	movs	r2, #32
 800ef9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	e000      	b.n	800efb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800efb6:	2302      	movs	r3, #2
  }
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3728      	adds	r7, #40	@ 0x28
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	00010004 	.word	0x00010004

0800efc4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08c      	sub	sp, #48	@ 0x30
 800efc8:	af02      	add	r7, sp, #8
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	4608      	mov	r0, r1
 800efce:	4611      	mov	r1, r2
 800efd0:	461a      	mov	r2, r3
 800efd2:	4603      	mov	r3, r0
 800efd4:	817b      	strh	r3, [r7, #10]
 800efd6:	460b      	mov	r3, r1
 800efd8:	813b      	strh	r3, [r7, #8]
 800efda:	4613      	mov	r3, r2
 800efdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800efde:	f7fd fb8b 	bl	800c6f8 <HAL_GetTick>
 800efe2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800efe4:	2300      	movs	r3, #0
 800efe6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2b20      	cmp	r3, #32
 800eff2:	f040 8176 	bne.w	800f2e2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800eff6:	4b95      	ldr	r3, [pc, #596]	@ (800f24c <HAL_I2C_Mem_Read_DMA+0x288>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	08db      	lsrs	r3, r3, #3
 800effc:	4a94      	ldr	r2, [pc, #592]	@ (800f250 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800effe:	fba2 2303 	umull	r2, r3, r2, r3
 800f002:	0a1a      	lsrs	r2, r3, #8
 800f004:	4613      	mov	r3, r2
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	4413      	add	r3, r2
 800f00a:	009a      	lsls	r2, r3, #2
 800f00c:	4413      	add	r3, r2
 800f00e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	3b01      	subs	r3, #1
 800f014:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d116      	bne.n	800f04a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2200      	movs	r2, #0
 800f020:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2220      	movs	r2, #32
 800f026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f036:	f043 0220 	orr.w	r2, r3, #32
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	e14c      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	699b      	ldr	r3, [r3, #24]
 800f050:	f003 0302 	and.w	r3, r3, #2
 800f054:	2b02      	cmp	r3, #2
 800f056:	d0db      	beq.n	800f010 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d101      	bne.n	800f066 <HAL_I2C_Mem_Read_DMA+0xa2>
 800f062:	2302      	movs	r3, #2
 800f064:	e13e      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2201      	movs	r2, #1
 800f06a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d007      	beq.n	800f08c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f042 0201 	orr.w	r2, r2, #1
 800f08a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f09a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2222      	movs	r2, #34	@ 0x22
 800f0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2240      	movs	r2, #64	@ 0x40
 800f0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800f0bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	4a62      	ldr	r2, [pc, #392]	@ (800f254 <HAL_I2C_Mem_Read_DMA+0x290>)
 800f0cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800f0ce:	897a      	ldrh	r2, [r7, #10]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800f0d4:	893a      	ldrh	r2, [r7, #8]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800f0da:	88fa      	ldrh	r2, [r7, #6]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f000 80cc 	beq.w	800f288 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d02d      	beq.n	800f154 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0fc:	4a56      	ldr	r2, [pc, #344]	@ (800f258 <HAL_I2C_Mem_Read_DMA+0x294>)
 800f0fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f104:	4a55      	ldr	r2, [pc, #340]	@ (800f25c <HAL_I2C_Mem_Read_DMA+0x298>)
 800f106:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f10c:	2200      	movs	r2, #0
 800f10e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f114:	2200      	movs	r2, #0
 800f116:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11c:	2200      	movs	r2, #0
 800f11e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f124:	2200      	movs	r2, #0
 800f126:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3310      	adds	r3, #16
 800f132:	4619      	mov	r1, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f138:	461a      	mov	r2, r3
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f13e:	f7fe fdaf 	bl	800dca0 <HAL_DMA_Start_IT>
 800f142:	4603      	mov	r3, r0
 800f144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f040 8087 	bne.w	800f260 <HAL_I2C_Mem_Read_DMA+0x29c>
 800f152:	e013      	b.n	800f17c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2220      	movs	r2, #32
 800f158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f168:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	e0b3      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800f17c:	88f8      	ldrh	r0, [r7, #6]
 800f17e:	893a      	ldrh	r2, [r7, #8]
 800f180:	8979      	ldrh	r1, [r7, #10]
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	9301      	str	r3, [sp, #4]
 800f186:	2323      	movs	r3, #35	@ 0x23
 800f188:	9300      	str	r3, [sp, #0]
 800f18a:	4603      	mov	r3, r0
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f000 fbc1 	bl	800f914 <I2C_RequestMemoryRead>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d023      	beq.n	800f1e0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fe fe47 	bl	800de30 <HAL_DMA_Abort_IT>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1be:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f022 0201 	bic.w	r2, r2, #1
 800f1da:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e081      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d108      	bne.n	800f1fa <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1f6:	601a      	str	r2, [r3, #0]
 800f1f8:	e007      	b.n	800f20a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f208:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f20a:	2300      	movs	r3, #0
 800f20c:	61bb      	str	r3, [r7, #24]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	61bb      	str	r3, [r7, #24]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	61bb      	str	r3, [r7, #24]
 800f21e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2200      	movs	r2, #0
 800f224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	685a      	ldr	r2, [r3, #4]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f236:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685a      	ldr	r2, [r3, #4]
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f246:	605a      	str	r2, [r3, #4]
 800f248:	e049      	b.n	800f2de <HAL_I2C_Mem_Read_DMA+0x31a>
 800f24a:	bf00      	nop
 800f24c:	20000004 	.word	0x20000004
 800f250:	14f8b589 	.word	0x14f8b589
 800f254:	ffff0000 	.word	0xffff0000
 800f258:	0800fae5 	.word	0x0800fae5
 800f25c:	0800fc8f 	.word	0x0800fc8f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2220      	movs	r2, #32
 800f264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f274:	f043 0210 	orr.w	r2, r3, #16
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f284:	2301      	movs	r3, #1
 800f286:	e02d      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800f288:	88f8      	ldrh	r0, [r7, #6]
 800f28a:	893a      	ldrh	r2, [r7, #8]
 800f28c:	8979      	ldrh	r1, [r7, #10]
 800f28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	2323      	movs	r3, #35	@ 0x23
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	4603      	mov	r3, r0
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 fb3b 	bl	800f914 <I2C_RequestMemoryRead>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e01d      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	617b      	str	r3, [r7, #20]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	617b      	str	r3, [r7, #20]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	617b      	str	r3, [r7, #20]
 800f2bc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f2cc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2220      	movs	r2, #32
 800f2d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e000      	b.n	800f2e4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800f2e2:	2302      	movs	r3, #2
  }
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3728      	adds	r7, #40	@ 0x28
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b08a      	sub	sp, #40	@ 0x28
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f304:	2300      	movs	r3, #0
 800f306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f30e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f310:	6a3b      	ldr	r3, [r7, #32]
 800f312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00d      	beq.n	800f336 <HAL_I2C_ER_IRQHandler+0x4a>
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f320:	2b00      	cmp	r3, #0
 800f322:	d008      	beq.n	800f336 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f326:	f043 0301 	orr.w	r3, r3, #1
 800f32a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f334:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00d      	beq.n	800f35c <HAL_I2C_ER_IRQHandler+0x70>
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f346:	2b00      	cmp	r3, #0
 800f348:	d008      	beq.n	800f35c <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34c:	f043 0302 	orr.w	r3, r3, #2
 800f350:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800f35a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f362:	2b00      	cmp	r3, #0
 800f364:	d03e      	beq.n	800f3e4 <HAL_I2C_ER_IRQHandler+0xf8>
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d039      	beq.n	800f3e4 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800f370:	7efb      	ldrb	r3, [r7, #27]
 800f372:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f378:	b29b      	uxth	r3, r3
 800f37a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f382:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f388:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f38a:	7ebb      	ldrb	r3, [r7, #26]
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	d112      	bne.n	800f3b6 <HAL_I2C_ER_IRQHandler+0xca>
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10f      	bne.n	800f3b6 <HAL_I2C_ER_IRQHandler+0xca>
 800f396:	7cfb      	ldrb	r3, [r7, #19]
 800f398:	2b21      	cmp	r3, #33	@ 0x21
 800f39a:	d008      	beq.n	800f3ae <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f39c:	7cfb      	ldrb	r3, [r7, #19]
 800f39e:	2b29      	cmp	r3, #41	@ 0x29
 800f3a0:	d005      	beq.n	800f3ae <HAL_I2C_ER_IRQHandler+0xc2>
 800f3a2:	7cfb      	ldrb	r3, [r7, #19]
 800f3a4:	2b28      	cmp	r3, #40	@ 0x28
 800f3a6:	d106      	bne.n	800f3b6 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b21      	cmp	r3, #33	@ 0x21
 800f3ac:	d103      	bne.n	800f3b6 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 f878 	bl	800f4a4 <I2C_Slave_AF>
 800f3b4:	e016      	b.n	800f3e4 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f3be:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c2:	f043 0304 	orr.w	r3, r3, #4
 800f3c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f3c8:	7efb      	ldrb	r3, [r7, #27]
 800f3ca:	2b10      	cmp	r3, #16
 800f3cc:	d002      	beq.n	800f3d4 <HAL_I2C_ER_IRQHandler+0xe8>
 800f3ce:	7efb      	ldrb	r3, [r7, #27]
 800f3d0:	2b40      	cmp	r3, #64	@ 0x40
 800f3d2:	d107      	bne.n	800f3e4 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f3e2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d00d      	beq.n	800f40a <HAL_I2C_ER_IRQHandler+0x11e>
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d008      	beq.n	800f40a <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fa:	f043 0308 	orr.w	r3, r3, #8
 800f3fe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800f408:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d008      	beq.n	800f422 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f416:	431a      	orrs	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 f8b1 	bl	800f584 <I2C_ITError>
  }
}
 800f422:	bf00      	nop
 800f424:	3728      	adds	r7, #40	@ 0x28
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b083      	sub	sp, #12
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f432:	bf00      	nop
 800f434:	370c      	adds	r7, #12
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f43e:	b480      	push	{r7}
 800f440:	b083      	sub	sp, #12
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f446:	bf00      	nop
 800f448:	370c      	adds	r7, #12
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr

0800f452 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f452:	b480      	push	{r7}
 800f454:	b083      	sub	sp, #12
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f45a:	bf00      	nop
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f466:	b480      	push	{r7}
 800f468:	b083      	sub	sp, #12
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f46e:	bf00      	nop
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f47a:	b480      	push	{r7}
 800f47c:	b083      	sub	sp, #12
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f482:	bf00      	nop
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f48e:	b480      	push	{r7}
 800f490:	b083      	sub	sp, #12
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f496:	bf00      	nop
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
	...

0800f4a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b08      	cmp	r3, #8
 800f4be:	d002      	beq.n	800f4c6 <I2C_Slave_AF+0x22>
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2b20      	cmp	r3, #32
 800f4c4:	d129      	bne.n	800f51a <I2C_Slave_AF+0x76>
 800f4c6:	7bfb      	ldrb	r3, [r7, #15]
 800f4c8:	2b28      	cmp	r3, #40	@ 0x28
 800f4ca:	d126      	bne.n	800f51a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4a2c      	ldr	r2, [pc, #176]	@ (800f580 <I2C_Slave_AF+0xdc>)
 800f4d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	685a      	ldr	r2, [r3, #4]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f4e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f4ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f4fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2220      	movs	r2, #32
 800f506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7ff ffa7 	bl	800f466 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800f518:	e02e      	b.n	800f578 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800f51a:	7bfb      	ldrb	r3, [r7, #15]
 800f51c:	2b21      	cmp	r3, #33	@ 0x21
 800f51e:	d126      	bne.n	800f56e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a17      	ldr	r2, [pc, #92]	@ (800f580 <I2C_Slave_AF+0xdc>)
 800f524:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2221      	movs	r2, #33	@ 0x21
 800f52a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2220      	movs	r2, #32
 800f530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f54a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f554:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f564:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f7ff ff69 	bl	800f43e <HAL_I2C_SlaveTxCpltCallback>
}
 800f56c:	e004      	b.n	800f578 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f576:	615a      	str	r2, [r3, #20]
}
 800f578:	bf00      	nop
 800f57a:	3710      	adds	r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	ffff0000 	.word	0xffff0000

0800f584 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f592:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f59a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800f59c:	7bbb      	ldrb	r3, [r7, #14]
 800f59e:	2b10      	cmp	r3, #16
 800f5a0:	d002      	beq.n	800f5a8 <I2C_ITError+0x24>
 800f5a2:	7bbb      	ldrb	r3, [r7, #14]
 800f5a4:	2b40      	cmp	r3, #64	@ 0x40
 800f5a6:	d10a      	bne.n	800f5be <I2C_ITError+0x3a>
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	2b22      	cmp	r3, #34	@ 0x22
 800f5ac:	d107      	bne.n	800f5be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f5bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f5c4:	2b28      	cmp	r3, #40	@ 0x28
 800f5c6:	d107      	bne.n	800f5d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2228      	movs	r2, #40	@ 0x28
 800f5d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f5d6:	e015      	b.n	800f604 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f5e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5e6:	d00a      	beq.n	800f5fe <I2C_ITError+0x7a>
 800f5e8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ea:	2b60      	cmp	r3, #96	@ 0x60
 800f5ec:	d007      	beq.n	800f5fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2220      	movs	r2, #32
 800f5f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f60e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f612:	d162      	bne.n	800f6da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	685a      	ldr	r2, [r3, #4]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f622:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f628:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d020      	beq.n	800f674 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f636:	4a6a      	ldr	r2, [pc, #424]	@ (800f7e0 <I2C_ITError+0x25c>)
 800f638:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fbf6 	bl	800de30 <HAL_DMA_Abort_IT>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	f000 8089 	beq.w	800f75e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f022 0201 	bic.w	r2, r2, #1
 800f65a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2220      	movs	r2, #32
 800f660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f66e:	4610      	mov	r0, r2
 800f670:	4798      	blx	r3
 800f672:	e074      	b.n	800f75e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f678:	4a59      	ldr	r2, [pc, #356]	@ (800f7e0 <I2C_ITError+0x25c>)
 800f67a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f680:	4618      	mov	r0, r3
 800f682:	f7fe fbd5 	bl	800de30 <HAL_DMA_Abort_IT>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d068      	beq.n	800f75e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	695b      	ldr	r3, [r3, #20]
 800f692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f696:	2b40      	cmp	r3, #64	@ 0x40
 800f698:	d10b      	bne.n	800f6b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	691a      	ldr	r2, [r3, #16]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6a4:	b2d2      	uxtb	r2, r2
 800f6a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ac:	1c5a      	adds	r2, r3, #1
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f022 0201 	bic.w	r2, r2, #1
 800f6c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2220      	movs	r2, #32
 800f6c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	4798      	blx	r3
 800f6d8:	e041      	b.n	800f75e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b60      	cmp	r3, #96	@ 0x60
 800f6e4:	d125      	bne.n	800f732 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2220      	movs	r2, #32
 800f6ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6fe:	2b40      	cmp	r3, #64	@ 0x40
 800f700:	d10b      	bne.n	800f71a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	691a      	ldr	r2, [r3, #16]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f70c:	b2d2      	uxtb	r2, r2
 800f70e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f022 0201 	bic.w	r2, r2, #1
 800f728:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff feaf 	bl	800f48e <HAL_I2C_AbortCpltCallback>
 800f730:	e015      	b.n	800f75e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f73c:	2b40      	cmp	r3, #64	@ 0x40
 800f73e:	d10b      	bne.n	800f758 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	691a      	ldr	r2, [r3, #16]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f74a:	b2d2      	uxtb	r2, r2
 800f74c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f752:	1c5a      	adds	r2, r3, #1
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff fe8e 	bl	800f47a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f762:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10e      	bne.n	800f78c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800f774:	2b00      	cmp	r3, #0
 800f776:	d109      	bne.n	800f78c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d104      	bne.n	800f78c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d007      	beq.n	800f79c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	685a      	ldr	r2, [r3, #4]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f79a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7a8:	f003 0304 	and.w	r3, r3, #4
 800f7ac:	2b04      	cmp	r3, #4
 800f7ae:	d113      	bne.n	800f7d8 <I2C_ITError+0x254>
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	2b28      	cmp	r3, #40	@ 0x28
 800f7b4:	d110      	bne.n	800f7d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4a0a      	ldr	r2, [pc, #40]	@ (800f7e4 <I2C_ITError+0x260>)
 800f7ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2220      	movs	r2, #32
 800f7c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7ff fe47 	bl	800f466 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f7d8:	bf00      	nop
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	0800fd09 	.word	0x0800fd09
 800f7e4:	ffff0000 	.word	0xffff0000

0800f7e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b088      	sub	sp, #32
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	817b      	strh	r3, [r7, #10]
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	813b      	strh	r3, [r7, #8]
 800f7fe:	4613      	mov	r3, r2
 800f800:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	2200      	movs	r2, #0
 800f81a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f000 fb1a 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00d      	beq.n	800f846 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f838:	d103      	bne.n	800f842 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f840:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f842:	2303      	movs	r3, #3
 800f844:	e05f      	b.n	800f906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f846:	897b      	ldrh	r3, [r7, #10]
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	461a      	mov	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	6a3a      	ldr	r2, [r7, #32]
 800f85a:	492d      	ldr	r1, [pc, #180]	@ (800f910 <I2C_RequestMemoryWrite+0x128>)
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f000 fb52 	bl	800ff06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d001      	beq.n	800f86c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800f868:	2301      	movs	r3, #1
 800f86a:	e04c      	b.n	800f906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f86c:	2300      	movs	r3, #0
 800f86e:	617b      	str	r3, [r7, #20]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	695b      	ldr	r3, [r3, #20]
 800f876:	617b      	str	r3, [r7, #20]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	699b      	ldr	r3, [r3, #24]
 800f87e:	617b      	str	r3, [r7, #20]
 800f880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f884:	6a39      	ldr	r1, [r7, #32]
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f000 fbbc 	bl	8010004 <I2C_WaitOnTXEFlagUntilTimeout>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00d      	beq.n	800f8ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f896:	2b04      	cmp	r3, #4
 800f898:	d107      	bne.n	800f8aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f8a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e02b      	b.n	800f906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f8ae:	88fb      	ldrh	r3, [r7, #6]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d105      	bne.n	800f8c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f8b4:	893b      	ldrh	r3, [r7, #8]
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	611a      	str	r2, [r3, #16]
 800f8be:	e021      	b.n	800f904 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f8c0:	893b      	ldrh	r3, [r7, #8]
 800f8c2:	0a1b      	lsrs	r3, r3, #8
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8d0:	6a39      	ldr	r1, [r7, #32]
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f000 fb96 	bl	8010004 <I2C_WaitOnTXEFlagUntilTimeout>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00d      	beq.n	800f8fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8e2:	2b04      	cmp	r3, #4
 800f8e4:	d107      	bne.n	800f8f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f8f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e005      	b.n	800f906 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f8fa:	893b      	ldrh	r3, [r7, #8]
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	00010002 	.word	0x00010002

0800f914 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af02      	add	r7, sp, #8
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	4608      	mov	r0, r1
 800f91e:	4611      	mov	r1, r2
 800f920:	461a      	mov	r2, r3
 800f922:	4603      	mov	r3, r0
 800f924:	817b      	strh	r3, [r7, #10]
 800f926:	460b      	mov	r3, r1
 800f928:	813b      	strh	r3, [r7, #8]
 800f92a:	4613      	mov	r3, r2
 800f92c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f93c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f94c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	2200      	movs	r2, #0
 800f956:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f000 fa7c 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00d      	beq.n	800f982 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f974:	d103      	bne.n	800f97e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f97c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e0aa      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f982:	897b      	ldrh	r3, [r7, #10]
 800f984:	b2db      	uxtb	r3, r3
 800f986:	461a      	mov	r2, r3
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f994:	6a3a      	ldr	r2, [r7, #32]
 800f996:	4952      	ldr	r1, [pc, #328]	@ (800fae0 <I2C_RequestMemoryRead+0x1cc>)
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 fab4 	bl	800ff06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e097      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	617b      	str	r3, [r7, #20]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	695b      	ldr	r3, [r3, #20]
 800f9b2:	617b      	str	r3, [r7, #20]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	699b      	ldr	r3, [r3, #24]
 800f9ba:	617b      	str	r3, [r7, #20]
 800f9bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9c0:	6a39      	ldr	r1, [r7, #32]
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f000 fb1e 	bl	8010004 <I2C_WaitOnTXEFlagUntilTimeout>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00d      	beq.n	800f9ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9d2:	2b04      	cmp	r3, #4
 800f9d4:	d107      	bne.n	800f9e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f9e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e076      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f9ea:	88fb      	ldrh	r3, [r7, #6]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d105      	bne.n	800f9fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f9f0:	893b      	ldrh	r3, [r7, #8]
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	611a      	str	r2, [r3, #16]
 800f9fa:	e021      	b.n	800fa40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f9fc:	893b      	ldrh	r3, [r7, #8]
 800f9fe:	0a1b      	lsrs	r3, r3, #8
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	b2da      	uxtb	r2, r3
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa0c:	6a39      	ldr	r1, [r7, #32]
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f000 faf8 	bl	8010004 <I2C_WaitOnTXEFlagUntilTimeout>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00d      	beq.n	800fa36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa1e:	2b04      	cmp	r3, #4
 800fa20:	d107      	bne.n	800fa32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fa30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800fa32:	2301      	movs	r3, #1
 800fa34:	e050      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800fa36:	893b      	ldrh	r3, [r7, #8]
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa42:	6a39      	ldr	r1, [r7, #32]
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f000 fadd 	bl	8010004 <I2C_WaitOnTXEFlagUntilTimeout>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00d      	beq.n	800fa6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa54:	2b04      	cmp	r3, #4
 800fa56:	d107      	bne.n	800fa68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fa66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e035      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fa7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	6a3b      	ldr	r3, [r7, #32]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f000 f9e5 	bl	800fe58 <I2C_WaitOnFlagUntilTimeout>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00d      	beq.n	800fab0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faa2:	d103      	bne.n	800faac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800faac:	2303      	movs	r3, #3
 800faae:	e013      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800fab0:	897b      	ldrh	r3, [r7, #10]
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	f043 0301 	orr.w	r3, r3, #1
 800fab8:	b2da      	uxtb	r2, r3
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800fac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac2:	6a3a      	ldr	r2, [r7, #32]
 800fac4:	4906      	ldr	r1, [pc, #24]	@ (800fae0 <I2C_RequestMemoryRead+0x1cc>)
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f000 fa1d 	bl	800ff06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800fad2:	2301      	movs	r3, #1
 800fad4:	e000      	b.n	800fad8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	00010002 	.word	0x00010002

0800fae4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800faf8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fb00:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb06:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800fb16:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb24:	2200      	movs	r2, #0
 800fb26:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d003      	beq.n	800fb38 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb34:	2200      	movs	r2, #0
 800fb36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800fb38:	7cfb      	ldrb	r3, [r7, #19]
 800fb3a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800fb3e:	2b21      	cmp	r3, #33	@ 0x21
 800fb40:	d007      	beq.n	800fb52 <I2C_DMAXferCplt+0x6e>
 800fb42:	7cfb      	ldrb	r3, [r7, #19]
 800fb44:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800fb48:	2b22      	cmp	r3, #34	@ 0x22
 800fb4a:	d131      	bne.n	800fbb0 <I2C_DMAXferCplt+0xcc>
 800fb4c:	7cbb      	ldrb	r3, [r7, #18]
 800fb4e:	2b20      	cmp	r3, #32
 800fb50:	d12e      	bne.n	800fbb0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fb60:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	2200      	movs	r2, #0
 800fb66:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fb68:	7cfb      	ldrb	r3, [r7, #19]
 800fb6a:	2b29      	cmp	r3, #41	@ 0x29
 800fb6c:	d10a      	bne.n	800fb84 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	2221      	movs	r2, #33	@ 0x21
 800fb72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	2228      	movs	r2, #40	@ 0x28
 800fb78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fb7c:	6978      	ldr	r0, [r7, #20]
 800fb7e:	f7ff fc5e 	bl	800f43e <HAL_I2C_SlaveTxCpltCallback>
 800fb82:	e00c      	b.n	800fb9e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fb84:	7cfb      	ldrb	r3, [r7, #19]
 800fb86:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb88:	d109      	bne.n	800fb9e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	2222      	movs	r2, #34	@ 0x22
 800fb8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2228      	movs	r2, #40	@ 0x28
 800fb94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fb98:	6978      	ldr	r0, [r7, #20]
 800fb9a:	f7ff fc5a 	bl	800f452 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800fbac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800fbae:	e06a      	b.n	800fc86 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d064      	beq.n	800fc86 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d107      	bne.n	800fbd6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fbd4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800fbe4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fbec:	d009      	beq.n	800fc02 <I2C_DMAXferCplt+0x11e>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2b08      	cmp	r3, #8
 800fbf2:	d006      	beq.n	800fc02 <I2C_DMAXferCplt+0x11e>
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800fbfa:	d002      	beq.n	800fc02 <I2C_DMAXferCplt+0x11e>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b20      	cmp	r3, #32
 800fc00:	d107      	bne.n	800fc12 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fc10:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	685a      	ldr	r2, [r3, #4]
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800fc20:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fc30:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	2200      	movs	r2, #0
 800fc36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d003      	beq.n	800fc48 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800fc40:	6978      	ldr	r0, [r7, #20]
 800fc42:	f7ff fc1a 	bl	800f47a <HAL_I2C_ErrorCallback>
}
 800fc46:	e01e      	b.n	800fc86 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	2220      	movs	r2, #32
 800fc4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b40      	cmp	r3, #64	@ 0x40
 800fc5a:	d10a      	bne.n	800fc72 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	2200      	movs	r2, #0
 800fc68:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800fc6a:	6978      	ldr	r0, [r7, #20]
 800fc6c:	f7f2 f934 	bl	8001ed8 <HAL_I2C_MemRxCpltCallback>
}
 800fc70:	e009      	b.n	800fc86 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	2212      	movs	r2, #18
 800fc7e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800fc80:	6978      	ldr	r0, [r7, #20]
 800fc82:	f7ff fbd2 	bl	800f42a <HAL_I2C_MasterRxCpltCallback>
}
 800fc86:	bf00      	nop
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b084      	sub	sp, #16
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc9a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d003      	beq.n	800fcac <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fca8:	2200      	movs	r2, #0
 800fcaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d003      	beq.n	800fcbc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb8:	2200      	movs	r2, #0
 800fcba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7fe fa63 	bl	800e188 <HAL_DMA_GetError>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	d01b      	beq.n	800fd00 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fcd6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2220      	movs	r2, #32
 800fce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcf2:	f043 0210 	orr.w	r2, r3, #16
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f7ff fbbd 	bl	800f47a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fd00:	bf00      	nop
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b086      	sub	sp, #24
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fd10:	2300      	movs	r3, #0
 800fd12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800fd22:	4b4b      	ldr	r3, [pc, #300]	@ (800fe50 <I2C_DMAAbort+0x148>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	08db      	lsrs	r3, r3, #3
 800fd28:	4a4a      	ldr	r2, [pc, #296]	@ (800fe54 <I2C_DMAAbort+0x14c>)
 800fd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd2e:	0a1a      	lsrs	r2, r3, #8
 800fd30:	4613      	mov	r3, r2
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	4413      	add	r3, r2
 800fd36:	00da      	lsls	r2, r3, #3
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd46:	f043 0220 	orr.w	r2, r3, #32
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800fd4e:	e00a      	b.n	800fd66 <I2C_DMAAbort+0x5e>
    }
    count--;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	3b01      	subs	r3, #1
 800fd54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd64:	d0ea      	beq.n	800fd3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d003      	beq.n	800fd76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd72:	2200      	movs	r2, #0
 800fd74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d003      	beq.n	800fd86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd82:	2200      	movs	r2, #0
 800fd84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d003      	beq.n	800fdac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fda8:	2200      	movs	r2, #0
 800fdaa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d003      	beq.n	800fdbc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb8:	2200      	movs	r2, #0
 800fdba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f022 0201 	bic.w	r2, r2, #1
 800fdca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b60      	cmp	r3, #96	@ 0x60
 800fdd6:	d10e      	bne.n	800fdf6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	2220      	movs	r2, #32
 800fddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	2200      	movs	r2, #0
 800fde4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	2200      	movs	r2, #0
 800fdec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fdee:	6978      	ldr	r0, [r7, #20]
 800fdf0:	f7ff fb4d 	bl	800f48e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fdf4:	e027      	b.n	800fe46 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fdf6:	7cfb      	ldrb	r3, [r7, #19]
 800fdf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fdfc:	2b28      	cmp	r3, #40	@ 0x28
 800fdfe:	d117      	bne.n	800fe30 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f042 0201 	orr.w	r2, r2, #1
 800fe0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fe1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	2200      	movs	r2, #0
 800fe24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	2228      	movs	r2, #40	@ 0x28
 800fe2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fe2e:	e007      	b.n	800fe40 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	2220      	movs	r2, #32
 800fe34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800fe40:	6978      	ldr	r0, [r7, #20]
 800fe42:	f7ff fb1a 	bl	800f47a <HAL_I2C_ErrorCallback>
}
 800fe46:	bf00      	nop
 800fe48:	3718      	adds	r7, #24
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	20000004 	.word	0x20000004
 800fe54:	14f8b589 	.word	0x14f8b589

0800fe58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	603b      	str	r3, [r7, #0]
 800fe64:	4613      	mov	r3, r2
 800fe66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fe68:	e025      	b.n	800feb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe70:	d021      	beq.n	800feb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe72:	f7fc fc41 	bl	800c6f8 <HAL_GetTick>
 800fe76:	4602      	mov	r2, r0
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	683a      	ldr	r2, [r7, #0]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d302      	bcc.n	800fe88 <I2C_WaitOnFlagUntilTimeout+0x30>
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d116      	bne.n	800feb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2220      	movs	r2, #32
 800fe92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fea2:	f043 0220 	orr.w	r2, r3, #32
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800feb2:	2301      	movs	r3, #1
 800feb4:	e023      	b.n	800fefe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	0c1b      	lsrs	r3, r3, #16
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2b01      	cmp	r3, #1
 800febe:	d10d      	bne.n	800fedc <I2C_WaitOnFlagUntilTimeout+0x84>
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	695b      	ldr	r3, [r3, #20]
 800fec6:	43da      	mvns	r2, r3
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	4013      	ands	r3, r2
 800fecc:	b29b      	uxth	r3, r3
 800fece:	2b00      	cmp	r3, #0
 800fed0:	bf0c      	ite	eq
 800fed2:	2301      	moveq	r3, #1
 800fed4:	2300      	movne	r3, #0
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	461a      	mov	r2, r3
 800feda:	e00c      	b.n	800fef6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	699b      	ldr	r3, [r3, #24]
 800fee2:	43da      	mvns	r2, r3
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	4013      	ands	r3, r2
 800fee8:	b29b      	uxth	r3, r3
 800feea:	2b00      	cmp	r3, #0
 800feec:	bf0c      	ite	eq
 800feee:	2301      	moveq	r3, #1
 800fef0:	2300      	movne	r3, #0
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	461a      	mov	r2, r3
 800fef6:	79fb      	ldrb	r3, [r7, #7]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d0b6      	beq.n	800fe6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b084      	sub	sp, #16
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	60f8      	str	r0, [r7, #12]
 800ff0e:	60b9      	str	r1, [r7, #8]
 800ff10:	607a      	str	r2, [r7, #4]
 800ff12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ff14:	e051      	b.n	800ffba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	695b      	ldr	r3, [r3, #20]
 800ff1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ff20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff24:	d123      	bne.n	800ff6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ff34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ff3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2200      	movs	r2, #0
 800ff44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2220      	movs	r2, #32
 800ff4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff5a:	f043 0204 	orr.w	r2, r3, #4
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e046      	b.n	800fffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff74:	d021      	beq.n	800ffba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff76:	f7fc fbbf 	bl	800c6f8 <HAL_GetTick>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d302      	bcc.n	800ff8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d116      	bne.n	800ffba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2220      	movs	r2, #32
 800ff96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffa6:	f043 0220 	orr.w	r2, r3, #32
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e020      	b.n	800fffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	0c1b      	lsrs	r3, r3, #16
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d10c      	bne.n	800ffde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	695b      	ldr	r3, [r3, #20]
 800ffca:	43da      	mvns	r2, r3
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	4013      	ands	r3, r2
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	bf14      	ite	ne
 800ffd6:	2301      	movne	r3, #1
 800ffd8:	2300      	moveq	r3, #0
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	e00b      	b.n	800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	43da      	mvns	r2, r3
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	4013      	ands	r3, r2
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	bf14      	ite	ne
 800fff0:	2301      	movne	r3, #1
 800fff2:	2300      	moveq	r3, #0
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d18d      	bne.n	800ff16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010010:	e02d      	b.n	801006e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f000 f8ce 	bl	80101b4 <I2C_IsAcknowledgeFailed>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	e02d      	b.n	801007e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010028:	d021      	beq.n	801006e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801002a:	f7fc fb65 	bl	800c6f8 <HAL_GetTick>
 801002e:	4602      	mov	r2, r0
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	429a      	cmp	r2, r3
 8010038:	d302      	bcc.n	8010040 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d116      	bne.n	801006e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2220      	movs	r2, #32
 801004a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801005a:	f043 0220 	orr.w	r2, r3, #32
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	e007      	b.n	801007e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010078:	2b80      	cmp	r3, #128	@ 0x80
 801007a:	d1ca      	bne.n	8010012 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b084      	sub	sp, #16
 801008a:	af00      	add	r7, sp, #0
 801008c:	60f8      	str	r0, [r7, #12]
 801008e:	60b9      	str	r1, [r7, #8]
 8010090:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010092:	e02d      	b.n	80100f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f000 f88d 	bl	80101b4 <I2C_IsAcknowledgeFailed>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80100a0:	2301      	movs	r3, #1
 80100a2:	e02d      	b.n	8010100 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100aa:	d021      	beq.n	80100f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100ac:	f7fc fb24 	bl	800c6f8 <HAL_GetTick>
 80100b0:	4602      	mov	r2, r0
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	68ba      	ldr	r2, [r7, #8]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d302      	bcc.n	80100c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d116      	bne.n	80100f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2200      	movs	r2, #0
 80100c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2220      	movs	r2, #32
 80100cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100dc:	f043 0220 	orr.w	r2, r3, #32
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2200      	movs	r2, #0
 80100e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e007      	b.n	8010100 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	f003 0304 	and.w	r3, r3, #4
 80100fa:	2b04      	cmp	r3, #4
 80100fc:	d1ca      	bne.n	8010094 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80100fe:	2300      	movs	r3, #0
}
 8010100:	4618      	mov	r0, r3
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010114:	e042      	b.n	801019c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	695b      	ldr	r3, [r3, #20]
 801011c:	f003 0310 	and.w	r3, r3, #16
 8010120:	2b10      	cmp	r3, #16
 8010122:	d119      	bne.n	8010158 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f06f 0210 	mvn.w	r2, #16
 801012c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2200      	movs	r2, #0
 8010132:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2220      	movs	r2, #32
 8010138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2200      	movs	r2, #0
 8010140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8010154:	2301      	movs	r3, #1
 8010156:	e029      	b.n	80101ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010158:	f7fc face 	bl	800c6f8 <HAL_GetTick>
 801015c:	4602      	mov	r2, r0
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	429a      	cmp	r2, r3
 8010166:	d302      	bcc.n	801016e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d116      	bne.n	801019c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2200      	movs	r2, #0
 8010172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2220      	movs	r2, #32
 8010178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2200      	movs	r2, #0
 8010180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010188:	f043 0220 	orr.w	r2, r3, #32
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	e007      	b.n	80101ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	695b      	ldr	r3, [r3, #20]
 80101a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a6:	2b40      	cmp	r3, #64	@ 0x40
 80101a8:	d1b5      	bne.n	8010116 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3710      	adds	r7, #16
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	695b      	ldr	r3, [r3, #20]
 80101c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80101c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101ca:	d11b      	bne.n	8010204 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80101d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2220      	movs	r2, #32
 80101e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101f0:	f043 0204 	orr.w	r2, r3, #4
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8010200:	2301      	movs	r3, #1
 8010202:	e000      	b.n	8010206 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010214:	b08f      	sub	sp, #60	@ 0x3c
 8010216:	af0a      	add	r7, sp, #40	@ 0x28
 8010218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d101      	bne.n	8010224 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010220:	2301      	movs	r3, #1
 8010222:	e10f      	b.n	8010444 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	d106      	bne.n	8010244 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f00b fd1a 	bl	801bc78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2203      	movs	r2, #3
 8010248:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010254:	2b00      	cmp	r3, #0
 8010256:	d102      	bne.n	801025e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4618      	mov	r0, r3
 8010264:	f004 ff2b 	bl	80150be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	603b      	str	r3, [r7, #0]
 801026e:	687e      	ldr	r6, [r7, #4]
 8010270:	466d      	mov	r5, sp
 8010272:	f106 0410 	add.w	r4, r6, #16
 8010276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801027a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801027c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801027e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010282:	e885 0003 	stmia.w	r5, {r0, r1}
 8010286:	1d33      	adds	r3, r6, #4
 8010288:	cb0e      	ldmia	r3, {r1, r2, r3}
 801028a:	6838      	ldr	r0, [r7, #0]
 801028c:	f004 fe02 	bl	8014e94 <USB_CoreInit>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2202      	movs	r2, #2
 801029a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 801029e:	2301      	movs	r3, #1
 80102a0:	e0d0      	b.n	8010444 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2100      	movs	r1, #0
 80102a8:	4618      	mov	r0, r3
 80102aa:	f004 ff19 	bl	80150e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80102ae:	2300      	movs	r3, #0
 80102b0:	73fb      	strb	r3, [r7, #15]
 80102b2:	e04a      	b.n	801034a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80102b4:	7bfa      	ldrb	r2, [r7, #15]
 80102b6:	6879      	ldr	r1, [r7, #4]
 80102b8:	4613      	mov	r3, r2
 80102ba:	00db      	lsls	r3, r3, #3
 80102bc:	4413      	add	r3, r2
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	440b      	add	r3, r1
 80102c2:	333d      	adds	r3, #61	@ 0x3d
 80102c4:	2201      	movs	r2, #1
 80102c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80102c8:	7bfa      	ldrb	r2, [r7, #15]
 80102ca:	6879      	ldr	r1, [r7, #4]
 80102cc:	4613      	mov	r3, r2
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	4413      	add	r3, r2
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	440b      	add	r3, r1
 80102d6:	333c      	adds	r3, #60	@ 0x3c
 80102d8:	7bfa      	ldrb	r2, [r7, #15]
 80102da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80102dc:	7bfa      	ldrb	r2, [r7, #15]
 80102de:	7bfb      	ldrb	r3, [r7, #15]
 80102e0:	b298      	uxth	r0, r3
 80102e2:	6879      	ldr	r1, [r7, #4]
 80102e4:	4613      	mov	r3, r2
 80102e6:	00db      	lsls	r3, r3, #3
 80102e8:	4413      	add	r3, r2
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	440b      	add	r3, r1
 80102ee:	3344      	adds	r3, #68	@ 0x44
 80102f0:	4602      	mov	r2, r0
 80102f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80102f4:	7bfa      	ldrb	r2, [r7, #15]
 80102f6:	6879      	ldr	r1, [r7, #4]
 80102f8:	4613      	mov	r3, r2
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	4413      	add	r3, r2
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	440b      	add	r3, r1
 8010302:	3340      	adds	r3, #64	@ 0x40
 8010304:	2200      	movs	r2, #0
 8010306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8010308:	7bfa      	ldrb	r2, [r7, #15]
 801030a:	6879      	ldr	r1, [r7, #4]
 801030c:	4613      	mov	r3, r2
 801030e:	00db      	lsls	r3, r3, #3
 8010310:	4413      	add	r3, r2
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	440b      	add	r3, r1
 8010316:	3348      	adds	r3, #72	@ 0x48
 8010318:	2200      	movs	r2, #0
 801031a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801031c:	7bfa      	ldrb	r2, [r7, #15]
 801031e:	6879      	ldr	r1, [r7, #4]
 8010320:	4613      	mov	r3, r2
 8010322:	00db      	lsls	r3, r3, #3
 8010324:	4413      	add	r3, r2
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	440b      	add	r3, r1
 801032a:	334c      	adds	r3, #76	@ 0x4c
 801032c:	2200      	movs	r2, #0
 801032e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8010330:	7bfa      	ldrb	r2, [r7, #15]
 8010332:	6879      	ldr	r1, [r7, #4]
 8010334:	4613      	mov	r3, r2
 8010336:	00db      	lsls	r3, r3, #3
 8010338:	4413      	add	r3, r2
 801033a:	009b      	lsls	r3, r3, #2
 801033c:	440b      	add	r3, r1
 801033e:	3354      	adds	r3, #84	@ 0x54
 8010340:	2200      	movs	r2, #0
 8010342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010344:	7bfb      	ldrb	r3, [r7, #15]
 8010346:	3301      	adds	r3, #1
 8010348:	73fb      	strb	r3, [r7, #15]
 801034a:	7bfa      	ldrb	r2, [r7, #15]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	d3af      	bcc.n	80102b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010354:	2300      	movs	r3, #0
 8010356:	73fb      	strb	r3, [r7, #15]
 8010358:	e044      	b.n	80103e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801035a:	7bfa      	ldrb	r2, [r7, #15]
 801035c:	6879      	ldr	r1, [r7, #4]
 801035e:	4613      	mov	r3, r2
 8010360:	00db      	lsls	r3, r3, #3
 8010362:	4413      	add	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	440b      	add	r3, r1
 8010368:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 801036c:	2200      	movs	r2, #0
 801036e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8010370:	7bfa      	ldrb	r2, [r7, #15]
 8010372:	6879      	ldr	r1, [r7, #4]
 8010374:	4613      	mov	r3, r2
 8010376:	00db      	lsls	r3, r3, #3
 8010378:	4413      	add	r3, r2
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	440b      	add	r3, r1
 801037e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8010382:	7bfa      	ldrb	r2, [r7, #15]
 8010384:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010386:	7bfa      	ldrb	r2, [r7, #15]
 8010388:	6879      	ldr	r1, [r7, #4]
 801038a:	4613      	mov	r3, r2
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	4413      	add	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	440b      	add	r3, r1
 8010394:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8010398:	2200      	movs	r2, #0
 801039a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801039c:	7bfa      	ldrb	r2, [r7, #15]
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	4613      	mov	r3, r2
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	4413      	add	r3, r2
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	440b      	add	r3, r1
 80103aa:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80103ae:	2200      	movs	r2, #0
 80103b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80103b2:	7bfa      	ldrb	r2, [r7, #15]
 80103b4:	6879      	ldr	r1, [r7, #4]
 80103b6:	4613      	mov	r3, r2
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	440b      	add	r3, r1
 80103c0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80103c4:	2200      	movs	r2, #0
 80103c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80103c8:	7bfa      	ldrb	r2, [r7, #15]
 80103ca:	6879      	ldr	r1, [r7, #4]
 80103cc:	4613      	mov	r3, r2
 80103ce:	00db      	lsls	r3, r3, #3
 80103d0:	4413      	add	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	440b      	add	r3, r1
 80103d6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80103da:	2200      	movs	r2, #0
 80103dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80103de:	7bfb      	ldrb	r3, [r7, #15]
 80103e0:	3301      	adds	r3, #1
 80103e2:	73fb      	strb	r3, [r7, #15]
 80103e4:	7bfa      	ldrb	r2, [r7, #15]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d3b5      	bcc.n	801035a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	603b      	str	r3, [r7, #0]
 80103f4:	687e      	ldr	r6, [r7, #4]
 80103f6:	466d      	mov	r5, sp
 80103f8:	f106 0410 	add.w	r4, r6, #16
 80103fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010408:	e885 0003 	stmia.w	r5, {r0, r1}
 801040c:	1d33      	adds	r3, r6, #4
 801040e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010410:	6838      	ldr	r0, [r7, #0]
 8010412:	f004 feb1 	bl	8015178 <USB_DevInit>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d005      	beq.n	8010428 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2202      	movs	r2, #2
 8010420:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8010424:	2301      	movs	r3, #1
 8010426:	e00d      	b.n	8010444 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2200      	movs	r2, #0
 801042c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4618      	mov	r0, r3
 801043e:	f006 f800 	bl	8016442 <USB_DevDisconnect>

  return HAL_OK;
 8010442:	2300      	movs	r3, #0
}
 8010444:	4618      	mov	r0, r3
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801044c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8010460:	2b01      	cmp	r3, #1
 8010462:	d101      	bne.n	8010468 <HAL_PCD_Start+0x1c>
 8010464:	2302      	movs	r3, #2
 8010466:	e020      	b.n	80104aa <HAL_PCD_Start+0x5e>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2201      	movs	r2, #1
 801046c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010474:	2b01      	cmp	r3, #1
 8010476:	d109      	bne.n	801048c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801047c:	2b01      	cmp	r3, #1
 801047e:	d005      	beq.n	801048c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010484:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4618      	mov	r0, r3
 8010492:	f004 fe03 	bl	801509c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4618      	mov	r0, r3
 801049c:	f005 ffb0 	bl	8016400 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80104b2:	b590      	push	{r4, r7, lr}
 80104b4:	b08d      	sub	sp, #52	@ 0x34
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f006 f86e 	bl	80165aa <USB_GetMode>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	f040 848a 	bne.w	8010dea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4618      	mov	r0, r3
 80104dc:	f005 ffd2 	bl	8016484 <USB_ReadInterrupts>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f000 8480 	beq.w	8010de8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	0a1b      	lsrs	r3, r3, #8
 80104f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4618      	mov	r0, r3
 8010502:	f005 ffbf 	bl	8016484 <USB_ReadInterrupts>
 8010506:	4603      	mov	r3, r0
 8010508:	f003 0302 	and.w	r3, r3, #2
 801050c:	2b02      	cmp	r3, #2
 801050e:	d107      	bne.n	8010520 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	695a      	ldr	r2, [r3, #20]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f002 0202 	and.w	r2, r2, #2
 801051e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4618      	mov	r0, r3
 8010526:	f005 ffad 	bl	8016484 <USB_ReadInterrupts>
 801052a:	4603      	mov	r3, r0
 801052c:	f003 0310 	and.w	r3, r3, #16
 8010530:	2b10      	cmp	r3, #16
 8010532:	d161      	bne.n	80105f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	699a      	ldr	r2, [r3, #24]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f022 0210 	bic.w	r2, r2, #16
 8010542:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8010544:	6a3b      	ldr	r3, [r7, #32]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	f003 020f 	and.w	r2, r3, #15
 8010550:	4613      	mov	r3, r2
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	4413      	add	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	4413      	add	r3, r2
 8010560:	3304      	adds	r3, #4
 8010562:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	0c5b      	lsrs	r3, r3, #17
 8010568:	f003 030f 	and.w	r3, r3, #15
 801056c:	2b02      	cmp	r3, #2
 801056e:	d124      	bne.n	80105ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8010570:	69ba      	ldr	r2, [r7, #24]
 8010572:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8010576:	4013      	ands	r3, r2
 8010578:	2b00      	cmp	r3, #0
 801057a:	d035      	beq.n	80105e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	091b      	lsrs	r3, r3, #4
 8010584:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801058a:	b29b      	uxth	r3, r3
 801058c:	461a      	mov	r2, r3
 801058e:	6a38      	ldr	r0, [r7, #32]
 8010590:	f005 fde4 	bl	801615c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	691a      	ldr	r2, [r3, #16]
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	091b      	lsrs	r3, r3, #4
 801059c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105a0:	441a      	add	r2, r3
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	6a1a      	ldr	r2, [r3, #32]
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	091b      	lsrs	r3, r3, #4
 80105ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105b2:	441a      	add	r2, r3
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	621a      	str	r2, [r3, #32]
 80105b8:	e016      	b.n	80105e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	0c5b      	lsrs	r3, r3, #17
 80105be:	f003 030f 	and.w	r3, r3, #15
 80105c2:	2b06      	cmp	r3, #6
 80105c4:	d110      	bne.n	80105e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80105cc:	2208      	movs	r2, #8
 80105ce:	4619      	mov	r1, r3
 80105d0:	6a38      	ldr	r0, [r7, #32]
 80105d2:	f005 fdc3 	bl	801615c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	6a1a      	ldr	r2, [r3, #32]
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	091b      	lsrs	r3, r3, #4
 80105de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105e2:	441a      	add	r2, r3
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	699a      	ldr	r2, [r3, #24]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f042 0210 	orr.w	r2, r2, #16
 80105f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4618      	mov	r0, r3
 80105fe:	f005 ff41 	bl	8016484 <USB_ReadInterrupts>
 8010602:	4603      	mov	r3, r0
 8010604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010608:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801060c:	f040 80a7 	bne.w	801075e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010610:	2300      	movs	r3, #0
 8010612:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4618      	mov	r0, r3
 801061a:	f005 ff46 	bl	80164aa <USB_ReadDevAllOutEpInterrupt>
 801061e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8010620:	e099      	b.n	8010756 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010624:	f003 0301 	and.w	r3, r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	f000 808e 	beq.w	801074a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010634:	b2d2      	uxtb	r2, r2
 8010636:	4611      	mov	r1, r2
 8010638:	4618      	mov	r0, r3
 801063a:	f005 ff6a 	bl	8016512 <USB_ReadDevOutEPInterrupt>
 801063e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	f003 0301 	and.w	r3, r3, #1
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00c      	beq.n	8010664 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064c:	015a      	lsls	r2, r3, #5
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	4413      	add	r3, r2
 8010652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010656:	461a      	mov	r2, r3
 8010658:	2301      	movs	r3, #1
 801065a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801065c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fec2 	bl	80113e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	f003 0308 	and.w	r3, r3, #8
 801066a:	2b00      	cmp	r3, #0
 801066c:	d00c      	beq.n	8010688 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010670:	015a      	lsls	r2, r3, #5
 8010672:	69fb      	ldr	r3, [r7, #28]
 8010674:	4413      	add	r3, r2
 8010676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801067a:	461a      	mov	r2, r3
 801067c:	2308      	movs	r3, #8
 801067e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 ff98 	bl	80115b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	f003 0310 	and.w	r3, r3, #16
 801068e:	2b00      	cmp	r3, #0
 8010690:	d008      	beq.n	80106a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010694:	015a      	lsls	r2, r3, #5
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	4413      	add	r3, r2
 801069a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801069e:	461a      	mov	r2, r3
 80106a0:	2310      	movs	r3, #16
 80106a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	f003 0302 	and.w	r3, r3, #2
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d030      	beq.n	8010710 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	695b      	ldr	r3, [r3, #20]
 80106b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106b6:	2b80      	cmp	r3, #128	@ 0x80
 80106b8:	d109      	bne.n	80106ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	69fa      	ldr	r2, [r7, #28]
 80106c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80106c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80106cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80106ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106d0:	4613      	mov	r3, r2
 80106d2:	00db      	lsls	r3, r3, #3
 80106d4:	4413      	add	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80106dc:	687a      	ldr	r2, [r7, #4]
 80106de:	4413      	add	r3, r2
 80106e0:	3304      	adds	r3, #4
 80106e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	78db      	ldrb	r3, [r3, #3]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d108      	bne.n	80106fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2200      	movs	r2, #0
 80106f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80106f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	4619      	mov	r1, r3
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f00b fbc3 	bl	801be84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80106fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010700:	015a      	lsls	r2, r3, #5
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	4413      	add	r3, r2
 8010706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801070a:	461a      	mov	r2, r3
 801070c:	2302      	movs	r3, #2
 801070e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	f003 0320 	and.w	r3, r3, #32
 8010716:	2b00      	cmp	r3, #0
 8010718:	d008      	beq.n	801072c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071c:	015a      	lsls	r2, r3, #5
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	4413      	add	r3, r2
 8010722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010726:	461a      	mov	r2, r3
 8010728:	2320      	movs	r3, #32
 801072a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010732:	2b00      	cmp	r3, #0
 8010734:	d009      	beq.n	801074a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010738:	015a      	lsls	r2, r3, #5
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	4413      	add	r3, r2
 801073e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010742:	461a      	mov	r2, r3
 8010744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010748:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074c:	3301      	adds	r3, #1
 801074e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8010750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010752:	085b      	lsrs	r3, r3, #1
 8010754:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8010756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010758:	2b00      	cmp	r3, #0
 801075a:	f47f af62 	bne.w	8010622 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4618      	mov	r0, r3
 8010764:	f005 fe8e 	bl	8016484 <USB_ReadInterrupts>
 8010768:	4603      	mov	r3, r0
 801076a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801076e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010772:	f040 80db 	bne.w	801092c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4618      	mov	r0, r3
 801077c:	f005 feaf 	bl	80164de <USB_ReadDevAllInEpInterrupt>
 8010780:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8010782:	2300      	movs	r3, #0
 8010784:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8010786:	e0cd      	b.n	8010924 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 80c2 	beq.w	8010918 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801079a:	b2d2      	uxtb	r2, r2
 801079c:	4611      	mov	r1, r2
 801079e:	4618      	mov	r0, r3
 80107a0:	f005 fed5 	bl	801654e <USB_ReadDevInEPInterrupt>
 80107a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d057      	beq.n	8010860 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80107b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b2:	f003 030f 	and.w	r3, r3, #15
 80107b6:	2201      	movs	r2, #1
 80107b8:	fa02 f303 	lsl.w	r3, r2, r3
 80107bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	43db      	mvns	r3, r3
 80107ca:	69f9      	ldr	r1, [r7, #28]
 80107cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80107d0:	4013      	ands	r3, r2
 80107d2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80107d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d6:	015a      	lsls	r2, r3, #5
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	4413      	add	r3, r2
 80107dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107e0:	461a      	mov	r2, r3
 80107e2:	2301      	movs	r3, #1
 80107e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	691b      	ldr	r3, [r3, #16]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d132      	bne.n	8010854 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107f2:	4613      	mov	r3, r2
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	4413      	add	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	440b      	add	r3, r1
 80107fc:	334c      	adds	r3, #76	@ 0x4c
 80107fe:	6819      	ldr	r1, [r3, #0]
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010804:	4613      	mov	r3, r2
 8010806:	00db      	lsls	r3, r3, #3
 8010808:	4413      	add	r3, r2
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4403      	add	r3, r0
 801080e:	3348      	adds	r3, #72	@ 0x48
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4419      	add	r1, r3
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010818:	4613      	mov	r3, r2
 801081a:	00db      	lsls	r3, r3, #3
 801081c:	4413      	add	r3, r2
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	4403      	add	r3, r0
 8010822:	334c      	adds	r3, #76	@ 0x4c
 8010824:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010828:	2b00      	cmp	r3, #0
 801082a:	d113      	bne.n	8010854 <HAL_PCD_IRQHandler+0x3a2>
 801082c:	6879      	ldr	r1, [r7, #4]
 801082e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010830:	4613      	mov	r3, r2
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	4413      	add	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	440b      	add	r3, r1
 801083a:	3354      	adds	r3, #84	@ 0x54
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d108      	bne.n	8010854 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6818      	ldr	r0, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801084c:	461a      	mov	r2, r3
 801084e:	2101      	movs	r1, #1
 8010850:	f005 fedc 	bl	801660c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010856:	b2db      	uxtb	r3, r3
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f00b fa8d 	bl	801bd7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f003 0308 	and.w	r3, r3, #8
 8010866:	2b00      	cmp	r3, #0
 8010868:	d008      	beq.n	801087c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801086c:	015a      	lsls	r2, r3, #5
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	4413      	add	r3, r2
 8010872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010876:	461a      	mov	r2, r3
 8010878:	2308      	movs	r3, #8
 801087a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f003 0310 	and.w	r3, r3, #16
 8010882:	2b00      	cmp	r3, #0
 8010884:	d008      	beq.n	8010898 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010892:	461a      	mov	r2, r3
 8010894:	2310      	movs	r3, #16
 8010896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d008      	beq.n	80108b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80108a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108a4:	015a      	lsls	r2, r3, #5
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	4413      	add	r3, r2
 80108aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108ae:	461a      	mov	r2, r3
 80108b0:	2340      	movs	r3, #64	@ 0x40
 80108b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	f003 0302 	and.w	r3, r3, #2
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d023      	beq.n	8010906 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80108be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108c0:	6a38      	ldr	r0, [r7, #32]
 80108c2:	f004 fdbd 	bl	8015440 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80108c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108c8:	4613      	mov	r3, r2
 80108ca:	00db      	lsls	r3, r3, #3
 80108cc:	4413      	add	r3, r2
 80108ce:	009b      	lsls	r3, r3, #2
 80108d0:	3338      	adds	r3, #56	@ 0x38
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	4413      	add	r3, r2
 80108d6:	3304      	adds	r3, #4
 80108d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	78db      	ldrb	r3, [r3, #3]
 80108de:	2b01      	cmp	r3, #1
 80108e0:	d108      	bne.n	80108f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	2200      	movs	r2, #0
 80108e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80108e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f00b fada 	bl	801bea8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80108f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f6:	015a      	lsls	r2, r3, #5
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	4413      	add	r3, r2
 80108fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010900:	461a      	mov	r2, r3
 8010902:	2302      	movs	r3, #2
 8010904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801090c:	2b00      	cmp	r3, #0
 801090e:	d003      	beq.n	8010918 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8010910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 fcdb 	bl	80112ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8010918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091a:	3301      	adds	r3, #1
 801091c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 801091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010920:	085b      	lsrs	r3, r3, #1
 8010922:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8010924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010926:	2b00      	cmp	r3, #0
 8010928:	f47f af2e 	bne.w	8010788 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4618      	mov	r0, r3
 8010932:	f005 fda7 	bl	8016484 <USB_ReadInterrupts>
 8010936:	4603      	mov	r3, r0
 8010938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801093c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010940:	d122      	bne.n	8010988 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	69fa      	ldr	r2, [r7, #28]
 801094c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010950:	f023 0301 	bic.w	r3, r3, #1
 8010954:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 801095c:	2b01      	cmp	r3, #1
 801095e:	d108      	bne.n	8010972 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010968:	2100      	movs	r1, #0
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fec2 	bl	80116f4 <HAL_PCDEx_LPM_Callback>
 8010970:	e002      	b.n	8010978 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f00b fa78 	bl	801be68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	695a      	ldr	r2, [r3, #20]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8010986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4618      	mov	r0, r3
 801098e:	f005 fd79 	bl	8016484 <USB_ReadInterrupts>
 8010992:	4603      	mov	r3, r0
 8010994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801099c:	d112      	bne.n	80109c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d102      	bne.n	80109b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f00b fa34 	bl	801be1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	695a      	ldr	r2, [r3, #20]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80109c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f005 fd5b 	bl	8016484 <USB_ReadInterrupts>
 80109ce:	4603      	mov	r3, r0
 80109d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80109d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109d8:	f040 80b7 	bne.w	8010b4a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	69fa      	ldr	r2, [r7, #28]
 80109e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80109ea:	f023 0301 	bic.w	r3, r3, #1
 80109ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2110      	movs	r1, #16
 80109f6:	4618      	mov	r0, r3
 80109f8:	f004 fd22 	bl	8015440 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80109fc:	2300      	movs	r3, #0
 80109fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a00:	e046      	b.n	8010a90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8010a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a04:	015a      	lsls	r2, r3, #5
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	4413      	add	r3, r2
 8010a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a0e:	461a      	mov	r2, r3
 8010a10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010a14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a18:	015a      	lsls	r2, r3, #5
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a26:	0151      	lsls	r1, r2, #5
 8010a28:	69fa      	ldr	r2, [r7, #28]
 8010a2a:	440a      	add	r2, r1
 8010a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010a30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010a34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8010a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a38:	015a      	lsls	r2, r3, #5
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a42:	461a      	mov	r2, r3
 8010a44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010a48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4c:	015a      	lsls	r2, r3, #5
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	4413      	add	r3, r2
 8010a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a5a:	0151      	lsls	r1, r2, #5
 8010a5c:	69fa      	ldr	r2, [r7, #28]
 8010a5e:	440a      	add	r2, r1
 8010a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010a68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6c:	015a      	lsls	r2, r3, #5
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	4413      	add	r3, r2
 8010a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a7a:	0151      	lsls	r1, r2, #5
 8010a7c:	69fa      	ldr	r2, [r7, #28]
 8010a7e:	440a      	add	r2, r1
 8010a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010a88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d3b3      	bcc.n	8010a02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010aa0:	69db      	ldr	r3, [r3, #28]
 8010aa2:	69fa      	ldr	r2, [r7, #28]
 8010aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010aa8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8010aac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d016      	beq.n	8010ae4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ac0:	69fa      	ldr	r2, [r7, #28]
 8010ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ac6:	f043 030b 	orr.w	r3, r3, #11
 8010aca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ad6:	69fa      	ldr	r2, [r7, #28]
 8010ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010adc:	f043 030b 	orr.w	r3, r3, #11
 8010ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8010ae2:	e015      	b.n	8010b10 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010aea:	695b      	ldr	r3, [r3, #20]
 8010aec:	69fa      	ldr	r2, [r7, #28]
 8010aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010af6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8010afa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b02:	691b      	ldr	r3, [r3, #16]
 8010b04:	69fa      	ldr	r2, [r7, #28]
 8010b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b0a:	f043 030b 	orr.w	r3, r3, #11
 8010b0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	69fa      	ldr	r2, [r7, #28]
 8010b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010b22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6818      	ldr	r0, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010b34:	461a      	mov	r2, r3
 8010b36:	f005 fd69 	bl	801660c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	695a      	ldr	r2, [r3, #20]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8010b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f005 fc98 	bl	8016484 <USB_ReadInterrupts>
 8010b54:	4603      	mov	r3, r0
 8010b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b5e:	d124      	bne.n	8010baa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f005 fd2e 	bl	80165c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f004 fce3 	bl	801553a <USB_GetDevSpeed>
 8010b74:	4603      	mov	r3, r0
 8010b76:	461a      	mov	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681c      	ldr	r4, [r3, #0]
 8010b80:	f001 f9e8 	bl	8011f54 <HAL_RCC_GetHCLKFreq>
 8010b84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f004 f9e2 	bl	8014f58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f00b f918 	bl	801bdca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	695a      	ldr	r2, [r3, #20]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8010ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f005 fc68 	bl	8016484 <USB_ReadInterrupts>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	f003 0308 	and.w	r3, r3, #8
 8010bba:	2b08      	cmp	r3, #8
 8010bbc:	d10a      	bne.n	8010bd4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f00b f8f5 	bl	801bdae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	695a      	ldr	r2, [r3, #20]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f002 0208 	and.w	r2, r2, #8
 8010bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f005 fc53 	bl	8016484 <USB_ReadInterrupts>
 8010bde:	4603      	mov	r3, r0
 8010be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010be4:	2b80      	cmp	r3, #128	@ 0x80
 8010be6:	d122      	bne.n	8010c2e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8010be8:	6a3b      	ldr	r3, [r7, #32]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bf8:	e014      	b.n	8010c24 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8010bfa:	6879      	ldr	r1, [r7, #4]
 8010bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bfe:	4613      	mov	r3, r2
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	4413      	add	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	440b      	add	r3, r1
 8010c08:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d105      	bne.n	8010c1e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8010c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	4619      	mov	r1, r3
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 fb27 	bl	801126c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c20:	3301      	adds	r3, #1
 8010c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d3e5      	bcc.n	8010bfa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4618      	mov	r0, r3
 8010c34:	f005 fc26 	bl	8016484 <USB_ReadInterrupts>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c42:	d13b      	bne.n	8010cbc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010c44:	2301      	movs	r3, #1
 8010c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c48:	e02b      	b.n	8010ca2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4c:	015a      	lsls	r2, r3, #5
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	4413      	add	r3, r2
 8010c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8010c5a:	6879      	ldr	r1, [r7, #4]
 8010c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c5e:	4613      	mov	r3, r2
 8010c60:	00db      	lsls	r3, r3, #3
 8010c62:	4413      	add	r3, r2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	440b      	add	r3, r1
 8010c68:	3340      	adds	r3, #64	@ 0x40
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d115      	bne.n	8010c9c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8010c70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	da12      	bge.n	8010c9c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8010c76:	6879      	ldr	r1, [r7, #4]
 8010c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	00db      	lsls	r3, r3, #3
 8010c7e:	4413      	add	r3, r2
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	440b      	add	r3, r1
 8010c84:	333f      	adds	r3, #63	@ 0x3f
 8010c86:	2201      	movs	r2, #1
 8010c88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	4619      	mov	r1, r3
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 fae8 	bl	801126c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d3ce      	bcc.n	8010c4a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	695a      	ldr	r2, [r3, #20]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8010cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f005 fbdf 	bl	8016484 <USB_ReadInterrupts>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010cd0:	d155      	bne.n	8010d7e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cd6:	e045      	b.n	8010d64 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cda:	015a      	lsls	r2, r3, #5
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	4413      	add	r3, r2
 8010ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8010ce8:	6879      	ldr	r1, [r7, #4]
 8010cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cec:	4613      	mov	r3, r2
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	4413      	add	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	440b      	add	r3, r1
 8010cf6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d12e      	bne.n	8010d5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8010d00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	da2b      	bge.n	8010d5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8010d12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d121      	bne.n	8010d5e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8010d1a:	6879      	ldr	r1, [r7, #4]
 8010d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d1e:	4613      	mov	r3, r2
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	4413      	add	r3, r2
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	440b      	add	r3, r1
 8010d28:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8010d30:	6a3b      	ldr	r3, [r7, #32]
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010d38:	6a3b      	ldr	r3, [r7, #32]
 8010d3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	695b      	ldr	r3, [r3, #20]
 8010d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10a      	bne.n	8010d5e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	69fa      	ldr	r2, [r7, #28]
 8010d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010d5a:	6053      	str	r3, [r2, #4]
            break;
 8010d5c:	e007      	b.n	8010d6e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d60:	3301      	adds	r3, #1
 8010d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d3b4      	bcc.n	8010cd8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	695a      	ldr	r2, [r3, #20]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8010d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f005 fb7e 	bl	8016484 <USB_ReadInterrupts>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d92:	d10a      	bne.n	8010daa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f00b f899 	bl	801becc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	695a      	ldr	r2, [r3, #20]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8010da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f005 fb68 	bl	8016484 <USB_ReadInterrupts>
 8010db4:	4603      	mov	r3, r0
 8010db6:	f003 0304 	and.w	r3, r3, #4
 8010dba:	2b04      	cmp	r3, #4
 8010dbc:	d115      	bne.n	8010dea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f00b f889 	bl	801bee8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	6859      	ldr	r1, [r3, #4]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	69ba      	ldr	r2, [r7, #24]
 8010de2:	430a      	orrs	r2, r1
 8010de4:	605a      	str	r2, [r3, #4]
 8010de6:	e000      	b.n	8010dea <HAL_PCD_IRQHandler+0x938>
      return;
 8010de8:	bf00      	nop
    }
  }
}
 8010dea:	3734      	adds	r7, #52	@ 0x34
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}

08010df0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d101      	bne.n	8010e0a <HAL_PCD_SetAddress+0x1a>
 8010e06:	2302      	movs	r3, #2
 8010e08:	e013      	b.n	8010e32 <HAL_PCD_SetAddress+0x42>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	78fa      	ldrb	r2, [r7, #3]
 8010e16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	78fa      	ldrb	r2, [r7, #3]
 8010e20:	4611      	mov	r1, r2
 8010e22:	4618      	mov	r0, r3
 8010e24:	f005 fac6 	bl	80163b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b084      	sub	sp, #16
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	4608      	mov	r0, r1
 8010e44:	4611      	mov	r1, r2
 8010e46:	461a      	mov	r2, r3
 8010e48:	4603      	mov	r3, r0
 8010e4a:	70fb      	strb	r3, [r7, #3]
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	803b      	strh	r3, [r7, #0]
 8010e50:	4613      	mov	r3, r2
 8010e52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8010e54:	2300      	movs	r3, #0
 8010e56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	da0f      	bge.n	8010e80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	f003 020f 	and.w	r2, r3, #15
 8010e66:	4613      	mov	r3, r2
 8010e68:	00db      	lsls	r3, r3, #3
 8010e6a:	4413      	add	r3, r2
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	3338      	adds	r3, #56	@ 0x38
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	4413      	add	r3, r2
 8010e74:	3304      	adds	r3, #4
 8010e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	705a      	strb	r2, [r3, #1]
 8010e7e:	e00f      	b.n	8010ea0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010e80:	78fb      	ldrb	r3, [r7, #3]
 8010e82:	f003 020f 	and.w	r2, r3, #15
 8010e86:	4613      	mov	r3, r2
 8010e88:	00db      	lsls	r3, r3, #3
 8010e8a:	4413      	add	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	4413      	add	r3, r2
 8010e96:	3304      	adds	r3, #4
 8010e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8010ea0:	78fb      	ldrb	r3, [r7, #3]
 8010ea2:	f003 030f 	and.w	r3, r3, #15
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8010eac:	883a      	ldrh	r2, [r7, #0]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	78ba      	ldrb	r2, [r7, #2]
 8010eb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	785b      	ldrb	r3, [r3, #1]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d004      	beq.n	8010eca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010eca:	78bb      	ldrb	r3, [r7, #2]
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d102      	bne.n	8010ed6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d101      	bne.n	8010ee4 <HAL_PCD_EP_Open+0xaa>
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	e00e      	b.n	8010f02 <HAL_PCD_EP_Open+0xc8>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	68f9      	ldr	r1, [r7, #12]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f004 fb46 	bl	8015584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8010f00:	7afb      	ldrb	r3, [r7, #11]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3710      	adds	r7, #16
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b084      	sub	sp, #16
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	460b      	mov	r3, r1
 8010f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da0f      	bge.n	8010f3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010f1e:	78fb      	ldrb	r3, [r7, #3]
 8010f20:	f003 020f 	and.w	r2, r3, #15
 8010f24:	4613      	mov	r3, r2
 8010f26:	00db      	lsls	r3, r3, #3
 8010f28:	4413      	add	r3, r2
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	3338      	adds	r3, #56	@ 0x38
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	4413      	add	r3, r2
 8010f32:	3304      	adds	r3, #4
 8010f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2201      	movs	r2, #1
 8010f3a:	705a      	strb	r2, [r3, #1]
 8010f3c:	e00f      	b.n	8010f5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010f3e:	78fb      	ldrb	r3, [r7, #3]
 8010f40:	f003 020f 	and.w	r2, r3, #15
 8010f44:	4613      	mov	r3, r2
 8010f46:	00db      	lsls	r3, r3, #3
 8010f48:	4413      	add	r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	4413      	add	r3, r2
 8010f54:	3304      	adds	r3, #4
 8010f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8010f5e:	78fb      	ldrb	r3, [r7, #3]
 8010f60:	f003 030f 	and.w	r3, r3, #15
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d101      	bne.n	8010f78 <HAL_PCD_EP_Close+0x6e>
 8010f74:	2302      	movs	r3, #2
 8010f76:	e00e      	b.n	8010f96 <HAL_PCD_EP_Close+0x8c>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68f9      	ldr	r1, [r7, #12]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f004 fb84 	bl	8015694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b086      	sub	sp, #24
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	60f8      	str	r0, [r7, #12]
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	603b      	str	r3, [r7, #0]
 8010faa:	460b      	mov	r3, r1
 8010fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010fae:	7afb      	ldrb	r3, [r7, #11]
 8010fb0:	f003 020f 	and.w	r2, r3, #15
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	4413      	add	r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	683a      	ldr	r2, [r7, #0]
 8010fd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010fe0:	7afb      	ldrb	r3, [r7, #11]
 8010fe2:	f003 030f 	and.w	r3, r3, #15
 8010fe6:	b2da      	uxtb	r2, r3
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	691b      	ldr	r3, [r3, #16]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d102      	bne.n	8010ffa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010ffa:	7afb      	ldrb	r3, [r7, #11]
 8010ffc:	f003 030f 	and.w	r3, r3, #15
 8011000:	2b00      	cmp	r3, #0
 8011002:	d109      	bne.n	8011018 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6818      	ldr	r0, [r3, #0]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	691b      	ldr	r3, [r3, #16]
 801100c:	b2db      	uxtb	r3, r3
 801100e:	461a      	mov	r2, r3
 8011010:	6979      	ldr	r1, [r7, #20]
 8011012:	f004 fe63 	bl	8015cdc <USB_EP0StartXfer>
 8011016:	e008      	b.n	801102a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6818      	ldr	r0, [r3, #0]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	b2db      	uxtb	r3, r3
 8011022:	461a      	mov	r2, r3
 8011024:	6979      	ldr	r1, [r7, #20]
 8011026:	f004 fc11 	bl	801584c <USB_EPStartXfer>
  }

  return HAL_OK;
 801102a:	2300      	movs	r3, #0
}
 801102c:	4618      	mov	r0, r3
 801102e:	3718      	adds	r7, #24
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	460b      	mov	r3, r1
 801103e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8011040:	78fb      	ldrb	r3, [r7, #3]
 8011042:	f003 020f 	and.w	r2, r3, #15
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	4613      	mov	r3, r2
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	4413      	add	r3, r2
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	440b      	add	r3, r1
 8011052:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8011056:	681b      	ldr	r3, [r3, #0]
}
 8011058:	4618      	mov	r0, r3
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	607a      	str	r2, [r7, #4]
 801106e:	603b      	str	r3, [r7, #0]
 8011070:	460b      	mov	r3, r1
 8011072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011074:	7afb      	ldrb	r3, [r7, #11]
 8011076:	f003 020f 	and.w	r2, r3, #15
 801107a:	4613      	mov	r3, r2
 801107c:	00db      	lsls	r3, r3, #3
 801107e:	4413      	add	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	3338      	adds	r3, #56	@ 0x38
 8011084:	68fa      	ldr	r2, [r7, #12]
 8011086:	4413      	add	r3, r2
 8011088:	3304      	adds	r3, #4
 801108a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	2200      	movs	r2, #0
 801109c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	2201      	movs	r2, #1
 80110a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80110a4:	7afb      	ldrb	r3, [r7, #11]
 80110a6:	f003 030f 	and.w	r3, r3, #15
 80110aa:	b2da      	uxtb	r2, r3
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d102      	bne.n	80110be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80110be:	7afb      	ldrb	r3, [r7, #11]
 80110c0:	f003 030f 	and.w	r3, r3, #15
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d109      	bne.n	80110dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	6818      	ldr	r0, [r3, #0]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	691b      	ldr	r3, [r3, #16]
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	461a      	mov	r2, r3
 80110d4:	6979      	ldr	r1, [r7, #20]
 80110d6:	f004 fe01 	bl	8015cdc <USB_EP0StartXfer>
 80110da:	e008      	b.n	80110ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6818      	ldr	r0, [r3, #0]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	691b      	ldr	r3, [r3, #16]
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	461a      	mov	r2, r3
 80110e8:	6979      	ldr	r1, [r7, #20]
 80110ea:	f004 fbaf 	bl	801584c <USB_EPStartXfer>
  }

  return HAL_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3718      	adds	r7, #24
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8011104:	78fb      	ldrb	r3, [r7, #3]
 8011106:	f003 020f 	and.w	r2, r3, #15
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	429a      	cmp	r2, r3
 8011110:	d901      	bls.n	8011116 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8011112:	2301      	movs	r3, #1
 8011114:	e050      	b.n	80111b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801111a:	2b00      	cmp	r3, #0
 801111c:	da0f      	bge.n	801113e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801111e:	78fb      	ldrb	r3, [r7, #3]
 8011120:	f003 020f 	and.w	r2, r3, #15
 8011124:	4613      	mov	r3, r2
 8011126:	00db      	lsls	r3, r3, #3
 8011128:	4413      	add	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	3338      	adds	r3, #56	@ 0x38
 801112e:	687a      	ldr	r2, [r7, #4]
 8011130:	4413      	add	r3, r2
 8011132:	3304      	adds	r3, #4
 8011134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2201      	movs	r2, #1
 801113a:	705a      	strb	r2, [r3, #1]
 801113c:	e00d      	b.n	801115a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801113e:	78fa      	ldrb	r2, [r7, #3]
 8011140:	4613      	mov	r3, r2
 8011142:	00db      	lsls	r3, r3, #3
 8011144:	4413      	add	r3, r2
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	4413      	add	r3, r2
 8011150:	3304      	adds	r3, #4
 8011152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2200      	movs	r2, #0
 8011158:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2201      	movs	r2, #1
 801115e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	f003 030f 	and.w	r3, r3, #15
 8011166:	b2da      	uxtb	r2, r3
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8011172:	2b01      	cmp	r3, #1
 8011174:	d101      	bne.n	801117a <HAL_PCD_EP_SetStall+0x82>
 8011176:	2302      	movs	r3, #2
 8011178:	e01e      	b.n	80111b8 <HAL_PCD_EP_SetStall+0xc0>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2201      	movs	r2, #1
 801117e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	68f9      	ldr	r1, [r7, #12]
 8011188:	4618      	mov	r0, r3
 801118a:	f005 f83f 	bl	801620c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801118e:	78fb      	ldrb	r3, [r7, #3]
 8011190:	f003 030f 	and.w	r3, r3, #15
 8011194:	2b00      	cmp	r3, #0
 8011196:	d10a      	bne.n	80111ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6818      	ldr	r0, [r3, #0]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	b2d9      	uxtb	r1, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80111a8:	461a      	mov	r2, r3
 80111aa:	f005 fa2f 	bl	801660c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80111b6:	2300      	movs	r3, #0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3710      	adds	r7, #16
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	460b      	mov	r3, r1
 80111ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80111cc:	78fb      	ldrb	r3, [r7, #3]
 80111ce:	f003 020f 	and.w	r2, r3, #15
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d901      	bls.n	80111de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	e042      	b.n	8011264 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80111de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	da0f      	bge.n	8011206 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80111e6:	78fb      	ldrb	r3, [r7, #3]
 80111e8:	f003 020f 	and.w	r2, r3, #15
 80111ec:	4613      	mov	r3, r2
 80111ee:	00db      	lsls	r3, r3, #3
 80111f0:	4413      	add	r3, r2
 80111f2:	009b      	lsls	r3, r3, #2
 80111f4:	3338      	adds	r3, #56	@ 0x38
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	4413      	add	r3, r2
 80111fa:	3304      	adds	r3, #4
 80111fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2201      	movs	r2, #1
 8011202:	705a      	strb	r2, [r3, #1]
 8011204:	e00f      	b.n	8011226 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011206:	78fb      	ldrb	r3, [r7, #3]
 8011208:	f003 020f 	and.w	r2, r3, #15
 801120c:	4613      	mov	r3, r2
 801120e:	00db      	lsls	r3, r3, #3
 8011210:	4413      	add	r3, r2
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	4413      	add	r3, r2
 801121c:	3304      	adds	r3, #4
 801121e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2200      	movs	r2, #0
 8011224:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2200      	movs	r2, #0
 801122a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801122c:	78fb      	ldrb	r3, [r7, #3]
 801122e:	f003 030f 	and.w	r3, r3, #15
 8011232:	b2da      	uxtb	r2, r3
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 801123e:	2b01      	cmp	r3, #1
 8011240:	d101      	bne.n	8011246 <HAL_PCD_EP_ClrStall+0x86>
 8011242:	2302      	movs	r3, #2
 8011244:	e00e      	b.n	8011264 <HAL_PCD_EP_ClrStall+0xa4>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2201      	movs	r2, #1
 801124a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	68f9      	ldr	r1, [r7, #12]
 8011254:	4618      	mov	r0, r3
 8011256:	f005 f847 	bl	80162e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2200      	movs	r2, #0
 801125e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8011262:	2300      	movs	r3, #0
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	460b      	mov	r3, r1
 8011276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8011278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801127c:	2b00      	cmp	r3, #0
 801127e:	da0c      	bge.n	801129a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011280:	78fb      	ldrb	r3, [r7, #3]
 8011282:	f003 020f 	and.w	r2, r3, #15
 8011286:	4613      	mov	r3, r2
 8011288:	00db      	lsls	r3, r3, #3
 801128a:	4413      	add	r3, r2
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	3338      	adds	r3, #56	@ 0x38
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	4413      	add	r3, r2
 8011294:	3304      	adds	r3, #4
 8011296:	60fb      	str	r3, [r7, #12]
 8011298:	e00c      	b.n	80112b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801129a:	78fb      	ldrb	r3, [r7, #3]
 801129c:	f003 020f 	and.w	r2, r3, #15
 80112a0:	4613      	mov	r3, r2
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	4413      	add	r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	4413      	add	r3, r2
 80112b0:	3304      	adds	r3, #4
 80112b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	68f9      	ldr	r1, [r7, #12]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f004 fe66 	bl	8015f8c <USB_EPStopXfer>
 80112c0:	4603      	mov	r3, r0
 80112c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80112c4:	7afb      	ldrb	r3, [r7, #11]
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3710      	adds	r7, #16
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}

080112ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80112ce:	b580      	push	{r7, lr}
 80112d0:	b08a      	sub	sp, #40	@ 0x28
 80112d2:	af02      	add	r7, sp, #8
 80112d4:	6078      	str	r0, [r7, #4]
 80112d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	4613      	mov	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	3338      	adds	r3, #56	@ 0x38
 80112ee:	687a      	ldr	r2, [r7, #4]
 80112f0:	4413      	add	r3, r2
 80112f2:	3304      	adds	r3, #4
 80112f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6a1a      	ldr	r2, [r3, #32]
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	699b      	ldr	r3, [r3, #24]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d901      	bls.n	8011306 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8011302:	2301      	movs	r3, #1
 8011304:	e06c      	b.n	80113e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	699a      	ldr	r2, [r3, #24]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6a1b      	ldr	r3, [r3, #32]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	69fa      	ldr	r2, [r7, #28]
 8011318:	429a      	cmp	r2, r3
 801131a:	d902      	bls.n	8011322 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	3303      	adds	r3, #3
 8011326:	089b      	lsrs	r3, r3, #2
 8011328:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801132a:	e02b      	b.n	8011384 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	699a      	ldr	r2, [r3, #24]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6a1b      	ldr	r3, [r3, #32]
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	69fa      	ldr	r2, [r7, #28]
 801133e:	429a      	cmp	r2, r3
 8011340:	d902      	bls.n	8011348 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	3303      	adds	r3, #3
 801134c:	089b      	lsrs	r3, r3, #2
 801134e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6919      	ldr	r1, [r3, #16]
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	b2da      	uxtb	r2, r3
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8011360:	b2db      	uxtb	r3, r3
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	4603      	mov	r3, r0
 8011366:	6978      	ldr	r0, [r7, #20]
 8011368:	f004 feba 	bl	80160e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	691a      	ldr	r2, [r3, #16]
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	441a      	add	r2, r3
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6a1a      	ldr	r2, [r3, #32]
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	441a      	add	r2, r3
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	015a      	lsls	r2, r3, #5
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	4413      	add	r3, r2
 801138c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011390:	699b      	ldr	r3, [r3, #24]
 8011392:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011394:	69ba      	ldr	r2, [r7, #24]
 8011396:	429a      	cmp	r2, r3
 8011398:	d809      	bhi.n	80113ae <PCD_WriteEmptyTxFifo+0xe0>
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	6a1a      	ldr	r2, [r3, #32]
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d203      	bcs.n	80113ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	699b      	ldr	r3, [r3, #24]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1be      	bne.n	801132c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	699a      	ldr	r2, [r3, #24]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	6a1b      	ldr	r3, [r3, #32]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d811      	bhi.n	80113de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	f003 030f 	and.w	r3, r3, #15
 80113c0:	2201      	movs	r2, #1
 80113c2:	fa02 f303 	lsl.w	r3, r2, r3
 80113c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	43db      	mvns	r3, r3
 80113d4:	6939      	ldr	r1, [r7, #16]
 80113d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80113da:	4013      	ands	r3, r2
 80113dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80113de:	2300      	movs	r3, #0
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3720      	adds	r7, #32
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b088      	sub	sp, #32
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	333c      	adds	r3, #60	@ 0x3c
 8011400:	3304      	adds	r3, #4
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	015a      	lsls	r2, r3, #5
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	4413      	add	r3, r2
 801140e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	691b      	ldr	r3, [r3, #16]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d17b      	bne.n	8011516 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	f003 0308 	and.w	r3, r3, #8
 8011424:	2b00      	cmp	r3, #0
 8011426:	d015      	beq.n	8011454 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	4a61      	ldr	r2, [pc, #388]	@ (80115b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801142c:	4293      	cmp	r3, r2
 801142e:	f240 80b9 	bls.w	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 80b3 	beq.w	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	015a      	lsls	r2, r3, #5
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	4413      	add	r3, r2
 8011446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801144a:	461a      	mov	r2, r3
 801144c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011450:	6093      	str	r3, [r2, #8]
 8011452:	e0a7      	b.n	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f003 0320 	and.w	r3, r3, #32
 801145a:	2b00      	cmp	r3, #0
 801145c:	d009      	beq.n	8011472 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	015a      	lsls	r2, r3, #5
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	4413      	add	r3, r2
 8011466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801146a:	461a      	mov	r2, r3
 801146c:	2320      	movs	r3, #32
 801146e:	6093      	str	r3, [r2, #8]
 8011470:	e098      	b.n	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8011478:	2b00      	cmp	r3, #0
 801147a:	f040 8093 	bne.w	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	4a4b      	ldr	r2, [pc, #300]	@ (80115b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d90f      	bls.n	80114a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00a      	beq.n	80114a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	015a      	lsls	r2, r3, #5
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	4413      	add	r3, r2
 8011498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801149c:	461a      	mov	r2, r3
 801149e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80114a2:	6093      	str	r3, [r2, #8]
 80114a4:	e07e      	b.n	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80114a6:	683a      	ldr	r2, [r7, #0]
 80114a8:	4613      	mov	r3, r2
 80114aa:	00db      	lsls	r3, r3, #3
 80114ac:	4413      	add	r3, r2
 80114ae:	009b      	lsls	r3, r3, #2
 80114b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	4413      	add	r3, r2
 80114b8:	3304      	adds	r3, #4
 80114ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	69da      	ldr	r2, [r3, #28]
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	0159      	lsls	r1, r3, #5
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	440b      	add	r3, r1
 80114c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80114d2:	1ad2      	subs	r2, r2, r3
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d114      	bne.n	8011508 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	699b      	ldr	r3, [r3, #24]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d109      	bne.n	80114fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6818      	ldr	r0, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80114f0:	461a      	mov	r2, r3
 80114f2:	2101      	movs	r1, #1
 80114f4:	f005 f88a 	bl	801660c <USB_EP0_OutStart>
 80114f8:	e006      	b.n	8011508 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	691a      	ldr	r2, [r3, #16]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	441a      	add	r2, r3
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	b2db      	uxtb	r3, r3
 801150c:	4619      	mov	r1, r3
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f00a fc18 	bl	801bd44 <HAL_PCD_DataOutStageCallback>
 8011514:	e046      	b.n	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	4a26      	ldr	r2, [pc, #152]	@ (80115b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d124      	bne.n	8011568 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00a      	beq.n	801153e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	015a      	lsls	r2, r3, #5
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	4413      	add	r3, r2
 8011530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011534:	461a      	mov	r2, r3
 8011536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801153a:	6093      	str	r3, [r2, #8]
 801153c:	e032      	b.n	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	f003 0320 	and.w	r3, r3, #32
 8011544:	2b00      	cmp	r3, #0
 8011546:	d008      	beq.n	801155a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	015a      	lsls	r2, r3, #5
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	4413      	add	r3, r2
 8011550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011554:	461a      	mov	r2, r3
 8011556:	2320      	movs	r3, #32
 8011558:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	b2db      	uxtb	r3, r3
 801155e:	4619      	mov	r1, r3
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f00a fbef 	bl	801bd44 <HAL_PCD_DataOutStageCallback>
 8011566:	e01d      	b.n	80115a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d114      	bne.n	8011598 <PCD_EP_OutXfrComplete_int+0x1b0>
 801156e:	6879      	ldr	r1, [r7, #4]
 8011570:	683a      	ldr	r2, [r7, #0]
 8011572:	4613      	mov	r3, r2
 8011574:	00db      	lsls	r3, r3, #3
 8011576:	4413      	add	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	440b      	add	r3, r1
 801157c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d108      	bne.n	8011598 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011590:	461a      	mov	r2, r3
 8011592:	2100      	movs	r1, #0
 8011594:	f005 f83a 	bl	801660c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	b2db      	uxtb	r3, r3
 801159c:	4619      	mov	r1, r3
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f00a fbd0 	bl	801bd44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80115a4:	2300      	movs	r3, #0
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3720      	adds	r7, #32
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	4f54300a 	.word	0x4f54300a
 80115b4:	4f54310a 	.word	0x4f54310a

080115b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b086      	sub	sp, #24
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	333c      	adds	r3, #60	@ 0x3c
 80115d0:	3304      	adds	r3, #4
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	015a      	lsls	r2, r3, #5
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	4413      	add	r3, r2
 80115de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	4a15      	ldr	r2, [pc, #84]	@ (8011640 <PCD_EP_OutSetupPacket_int+0x88>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d90e      	bls.n	801160c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d009      	beq.n	801160c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	015a      	lsls	r2, r3, #5
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	4413      	add	r3, r2
 8011600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011604:	461a      	mov	r2, r3
 8011606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801160a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f00a fb87 	bl	801bd20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	4a0a      	ldr	r2, [pc, #40]	@ (8011640 <PCD_EP_OutSetupPacket_int+0x88>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d90c      	bls.n	8011634 <PCD_EP_OutSetupPacket_int+0x7c>
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	691b      	ldr	r3, [r3, #16]
 801161e:	2b01      	cmp	r3, #1
 8011620:	d108      	bne.n	8011634 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6818      	ldr	r0, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801162c:	461a      	mov	r2, r3
 801162e:	2101      	movs	r1, #1
 8011630:	f004 ffec 	bl	801660c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8011634:	2300      	movs	r3, #0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3718      	adds	r7, #24
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	4f54300a 	.word	0x4f54300a

08011644 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	460b      	mov	r3, r1
 801164e:	70fb      	strb	r3, [r7, #3]
 8011650:	4613      	mov	r3, r2
 8011652:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801165a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801165c:	78fb      	ldrb	r3, [r7, #3]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d107      	bne.n	8011672 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011662:	883b      	ldrh	r3, [r7, #0]
 8011664:	0419      	lsls	r1, r3, #16
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	68ba      	ldr	r2, [r7, #8]
 801166c:	430a      	orrs	r2, r1
 801166e:	629a      	str	r2, [r3, #40]	@ 0x28
 8011670:	e028      	b.n	80116c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011678:	0c1b      	lsrs	r3, r3, #16
 801167a:	68ba      	ldr	r2, [r7, #8]
 801167c:	4413      	add	r3, r2
 801167e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011680:	2300      	movs	r3, #0
 8011682:	73fb      	strb	r3, [r7, #15]
 8011684:	e00d      	b.n	80116a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	7bfb      	ldrb	r3, [r7, #15]
 801168c:	3340      	adds	r3, #64	@ 0x40
 801168e:	009b      	lsls	r3, r3, #2
 8011690:	4413      	add	r3, r2
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	0c1b      	lsrs	r3, r3, #16
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	4413      	add	r3, r2
 801169a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801169c:	7bfb      	ldrb	r3, [r7, #15]
 801169e:	3301      	adds	r3, #1
 80116a0:	73fb      	strb	r3, [r7, #15]
 80116a2:	7bfa      	ldrb	r2, [r7, #15]
 80116a4:	78fb      	ldrb	r3, [r7, #3]
 80116a6:	3b01      	subs	r3, #1
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d3ec      	bcc.n	8011686 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80116ac:	883b      	ldrh	r3, [r7, #0]
 80116ae:	0418      	lsls	r0, r3, #16
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6819      	ldr	r1, [r3, #0]
 80116b4:	78fb      	ldrb	r3, [r7, #3]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	4302      	orrs	r2, r0
 80116bc:	3340      	adds	r3, #64	@ 0x40
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	440b      	add	r3, r1
 80116c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80116c4:	2300      	movs	r3, #0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3714      	adds	r7, #20
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80116d2:	b480      	push	{r7}
 80116d4:	b083      	sub	sp, #12
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	460b      	mov	r3, r1
 80116dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	887a      	ldrh	r2, [r7, #2]
 80116e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80116e6:	2300      	movs	r3, #0
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	460b      	mov	r3, r1
 80116fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011700:	bf00      	nop
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d101      	bne.n	801171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801171a:	2301      	movs	r3, #1
 801171c:	e267      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d075      	beq.n	8011816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801172a:	4b88      	ldr	r3, [pc, #544]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	f003 030c 	and.w	r3, r3, #12
 8011732:	2b04      	cmp	r3, #4
 8011734:	d00c      	beq.n	8011750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011736:	4b85      	ldr	r3, [pc, #532]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801173e:	2b08      	cmp	r3, #8
 8011740:	d112      	bne.n	8011768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011742:	4b82      	ldr	r3, [pc, #520]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801174e:	d10b      	bne.n	8011768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011750:	4b7e      	ldr	r3, [pc, #504]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011758:	2b00      	cmp	r3, #0
 801175a:	d05b      	beq.n	8011814 <HAL_RCC_OscConfig+0x108>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d157      	bne.n	8011814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011764:	2301      	movs	r3, #1
 8011766:	e242      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011770:	d106      	bne.n	8011780 <HAL_RCC_OscConfig+0x74>
 8011772:	4b76      	ldr	r3, [pc, #472]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	4a75      	ldr	r2, [pc, #468]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	e01d      	b.n	80117bc <HAL_RCC_OscConfig+0xb0>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011788:	d10c      	bne.n	80117a4 <HAL_RCC_OscConfig+0x98>
 801178a:	4b70      	ldr	r3, [pc, #448]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a6f      	ldr	r2, [pc, #444]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011794:	6013      	str	r3, [r2, #0]
 8011796:	4b6d      	ldr	r3, [pc, #436]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4a6c      	ldr	r2, [pc, #432]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 801179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80117a0:	6013      	str	r3, [r2, #0]
 80117a2:	e00b      	b.n	80117bc <HAL_RCC_OscConfig+0xb0>
 80117a4:	4b69      	ldr	r3, [pc, #420]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4a68      	ldr	r2, [pc, #416]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80117aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	4b66      	ldr	r3, [pc, #408]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4a65      	ldr	r2, [pc, #404]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80117b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80117ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d013      	beq.n	80117ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117c4:	f7fa ff98 	bl	800c6f8 <HAL_GetTick>
 80117c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117ca:	e008      	b.n	80117de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117cc:	f7fa ff94 	bl	800c6f8 <HAL_GetTick>
 80117d0:	4602      	mov	r2, r0
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	2b64      	cmp	r3, #100	@ 0x64
 80117d8:	d901      	bls.n	80117de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80117da:	2303      	movs	r3, #3
 80117dc:	e207      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117de:	4b5b      	ldr	r3, [pc, #364]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d0f0      	beq.n	80117cc <HAL_RCC_OscConfig+0xc0>
 80117ea:	e014      	b.n	8011816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117ec:	f7fa ff84 	bl	800c6f8 <HAL_GetTick>
 80117f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80117f2:	e008      	b.n	8011806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117f4:	f7fa ff80 	bl	800c6f8 <HAL_GetTick>
 80117f8:	4602      	mov	r2, r0
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	2b64      	cmp	r3, #100	@ 0x64
 8011800:	d901      	bls.n	8011806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011802:	2303      	movs	r3, #3
 8011804:	e1f3      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011806:	4b51      	ldr	r3, [pc, #324]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1f0      	bne.n	80117f4 <HAL_RCC_OscConfig+0xe8>
 8011812:	e000      	b.n	8011816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f003 0302 	and.w	r3, r3, #2
 801181e:	2b00      	cmp	r3, #0
 8011820:	d063      	beq.n	80118ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011822:	4b4a      	ldr	r3, [pc, #296]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	f003 030c 	and.w	r3, r3, #12
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00b      	beq.n	8011846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801182e:	4b47      	ldr	r3, [pc, #284]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011836:	2b08      	cmp	r3, #8
 8011838:	d11c      	bne.n	8011874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801183a:	4b44      	ldr	r3, [pc, #272]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011842:	2b00      	cmp	r3, #0
 8011844:	d116      	bne.n	8011874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011846:	4b41      	ldr	r3, [pc, #260]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f003 0302 	and.w	r3, r3, #2
 801184e:	2b00      	cmp	r3, #0
 8011850:	d005      	beq.n	801185e <HAL_RCC_OscConfig+0x152>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	2b01      	cmp	r3, #1
 8011858:	d001      	beq.n	801185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801185a:	2301      	movs	r3, #1
 801185c:	e1c7      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801185e:	4b3b      	ldr	r3, [pc, #236]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	691b      	ldr	r3, [r3, #16]
 801186a:	00db      	lsls	r3, r3, #3
 801186c:	4937      	ldr	r1, [pc, #220]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 801186e:	4313      	orrs	r3, r2
 8011870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011872:	e03a      	b.n	80118ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d020      	beq.n	80118be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801187c:	4b34      	ldr	r3, [pc, #208]	@ (8011950 <HAL_RCC_OscConfig+0x244>)
 801187e:	2201      	movs	r2, #1
 8011880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011882:	f7fa ff39 	bl	800c6f8 <HAL_GetTick>
 8011886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011888:	e008      	b.n	801189c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801188a:	f7fa ff35 	bl	800c6f8 <HAL_GetTick>
 801188e:	4602      	mov	r2, r0
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	2b02      	cmp	r3, #2
 8011896:	d901      	bls.n	801189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011898:	2303      	movs	r3, #3
 801189a:	e1a8      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801189c:	4b2b      	ldr	r3, [pc, #172]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f003 0302 	and.w	r3, r3, #2
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d0f0      	beq.n	801188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80118a8:	4b28      	ldr	r3, [pc, #160]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	00db      	lsls	r3, r3, #3
 80118b6:	4925      	ldr	r1, [pc, #148]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80118b8:	4313      	orrs	r3, r2
 80118ba:	600b      	str	r3, [r1, #0]
 80118bc:	e015      	b.n	80118ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80118be:	4b24      	ldr	r3, [pc, #144]	@ (8011950 <HAL_RCC_OscConfig+0x244>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118c4:	f7fa ff18 	bl	800c6f8 <HAL_GetTick>
 80118c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80118ca:	e008      	b.n	80118de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80118cc:	f7fa ff14 	bl	800c6f8 <HAL_GetTick>
 80118d0:	4602      	mov	r2, r0
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d901      	bls.n	80118de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80118da:	2303      	movs	r3, #3
 80118dc:	e187      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80118de:	4b1b      	ldr	r3, [pc, #108]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1f0      	bne.n	80118cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f003 0308 	and.w	r3, r3, #8
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d036      	beq.n	8011964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d016      	beq.n	801192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80118fe:	4b15      	ldr	r3, [pc, #84]	@ (8011954 <HAL_RCC_OscConfig+0x248>)
 8011900:	2201      	movs	r2, #1
 8011902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011904:	f7fa fef8 	bl	800c6f8 <HAL_GetTick>
 8011908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801190a:	e008      	b.n	801191e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801190c:	f7fa fef4 	bl	800c6f8 <HAL_GetTick>
 8011910:	4602      	mov	r2, r0
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	2b02      	cmp	r3, #2
 8011918:	d901      	bls.n	801191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801191a:	2303      	movs	r3, #3
 801191c:	e167      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801191e:	4b0b      	ldr	r3, [pc, #44]	@ (801194c <HAL_RCC_OscConfig+0x240>)
 8011920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011922:	f003 0302 	and.w	r3, r3, #2
 8011926:	2b00      	cmp	r3, #0
 8011928:	d0f0      	beq.n	801190c <HAL_RCC_OscConfig+0x200>
 801192a:	e01b      	b.n	8011964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801192c:	4b09      	ldr	r3, [pc, #36]	@ (8011954 <HAL_RCC_OscConfig+0x248>)
 801192e:	2200      	movs	r2, #0
 8011930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011932:	f7fa fee1 	bl	800c6f8 <HAL_GetTick>
 8011936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011938:	e00e      	b.n	8011958 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801193a:	f7fa fedd 	bl	800c6f8 <HAL_GetTick>
 801193e:	4602      	mov	r2, r0
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	2b02      	cmp	r3, #2
 8011946:	d907      	bls.n	8011958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011948:	2303      	movs	r3, #3
 801194a:	e150      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
 801194c:	40023800 	.word	0x40023800
 8011950:	42470000 	.word	0x42470000
 8011954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011958:	4b88      	ldr	r3, [pc, #544]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 801195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801195c:	f003 0302 	and.w	r3, r3, #2
 8011960:	2b00      	cmp	r3, #0
 8011962:	d1ea      	bne.n	801193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f003 0304 	and.w	r3, r3, #4
 801196c:	2b00      	cmp	r3, #0
 801196e:	f000 8097 	beq.w	8011aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011972:	2300      	movs	r3, #0
 8011974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011976:	4b81      	ldr	r3, [pc, #516]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801197e:	2b00      	cmp	r3, #0
 8011980:	d10f      	bne.n	80119a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011982:	2300      	movs	r3, #0
 8011984:	60bb      	str	r3, [r7, #8]
 8011986:	4b7d      	ldr	r3, [pc, #500]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801198a:	4a7c      	ldr	r2, [pc, #496]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 801198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011990:	6413      	str	r3, [r2, #64]	@ 0x40
 8011992:	4b7a      	ldr	r3, [pc, #488]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801199a:	60bb      	str	r3, [r7, #8]
 801199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801199e:	2301      	movs	r3, #1
 80119a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119a2:	4b77      	ldr	r3, [pc, #476]	@ (8011b80 <HAL_RCC_OscConfig+0x474>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d118      	bne.n	80119e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80119ae:	4b74      	ldr	r3, [pc, #464]	@ (8011b80 <HAL_RCC_OscConfig+0x474>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4a73      	ldr	r2, [pc, #460]	@ (8011b80 <HAL_RCC_OscConfig+0x474>)
 80119b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80119b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80119ba:	f7fa fe9d 	bl	800c6f8 <HAL_GetTick>
 80119be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119c0:	e008      	b.n	80119d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119c2:	f7fa fe99 	bl	800c6f8 <HAL_GetTick>
 80119c6:	4602      	mov	r2, r0
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d901      	bls.n	80119d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80119d0:	2303      	movs	r3, #3
 80119d2:	e10c      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119d4:	4b6a      	ldr	r3, [pc, #424]	@ (8011b80 <HAL_RCC_OscConfig+0x474>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d0f0      	beq.n	80119c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d106      	bne.n	80119f6 <HAL_RCC_OscConfig+0x2ea>
 80119e8:	4b64      	ldr	r3, [pc, #400]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 80119ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119ec:	4a63      	ldr	r2, [pc, #396]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 80119ee:	f043 0301 	orr.w	r3, r3, #1
 80119f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80119f4:	e01c      	b.n	8011a30 <HAL_RCC_OscConfig+0x324>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	2b05      	cmp	r3, #5
 80119fc:	d10c      	bne.n	8011a18 <HAL_RCC_OscConfig+0x30c>
 80119fe:	4b5f      	ldr	r3, [pc, #380]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a02:	4a5e      	ldr	r2, [pc, #376]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a04:	f043 0304 	orr.w	r3, r3, #4
 8011a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a10:	f043 0301 	orr.w	r3, r3, #1
 8011a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a16:	e00b      	b.n	8011a30 <HAL_RCC_OscConfig+0x324>
 8011a18:	4b58      	ldr	r3, [pc, #352]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a1c:	4a57      	ldr	r2, [pc, #348]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a1e:	f023 0301 	bic.w	r3, r3, #1
 8011a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a24:	4b55      	ldr	r3, [pc, #340]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a28:	4a54      	ldr	r2, [pc, #336]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a2a:	f023 0304 	bic.w	r3, r3, #4
 8011a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d015      	beq.n	8011a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a38:	f7fa fe5e 	bl	800c6f8 <HAL_GetTick>
 8011a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a3e:	e00a      	b.n	8011a56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a40:	f7fa fe5a 	bl	800c6f8 <HAL_GetTick>
 8011a44:	4602      	mov	r2, r0
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d901      	bls.n	8011a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011a52:	2303      	movs	r3, #3
 8011a54:	e0cb      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a56:	4b49      	ldr	r3, [pc, #292]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a5a:	f003 0302 	and.w	r3, r3, #2
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d0ee      	beq.n	8011a40 <HAL_RCC_OscConfig+0x334>
 8011a62:	e014      	b.n	8011a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a64:	f7fa fe48 	bl	800c6f8 <HAL_GetTick>
 8011a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a6a:	e00a      	b.n	8011a82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a6c:	f7fa fe44 	bl	800c6f8 <HAL_GetTick>
 8011a70:	4602      	mov	r2, r0
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d901      	bls.n	8011a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011a7e:	2303      	movs	r3, #3
 8011a80:	e0b5      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a82:	4b3e      	ldr	r3, [pc, #248]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a86:	f003 0302 	and.w	r3, r3, #2
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d1ee      	bne.n	8011a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011a8e:	7dfb      	ldrb	r3, [r7, #23]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d105      	bne.n	8011aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a94:	4b39      	ldr	r3, [pc, #228]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a98:	4a38      	ldr	r2, [pc, #224]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	699b      	ldr	r3, [r3, #24]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	f000 80a1 	beq.w	8011bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011aaa:	4b34      	ldr	r3, [pc, #208]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	f003 030c 	and.w	r3, r3, #12
 8011ab2:	2b08      	cmp	r3, #8
 8011ab4:	d05c      	beq.n	8011b70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	699b      	ldr	r3, [r3, #24]
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	d141      	bne.n	8011b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011abe:	4b31      	ldr	r3, [pc, #196]	@ (8011b84 <HAL_RCC_OscConfig+0x478>)
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ac4:	f7fa fe18 	bl	800c6f8 <HAL_GetTick>
 8011ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011aca:	e008      	b.n	8011ade <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011acc:	f7fa fe14 	bl	800c6f8 <HAL_GetTick>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	2b02      	cmp	r3, #2
 8011ad8:	d901      	bls.n	8011ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011ada:	2303      	movs	r3, #3
 8011adc:	e087      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011ade:	4b27      	ldr	r3, [pc, #156]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d1f0      	bne.n	8011acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	69da      	ldr	r2, [r3, #28]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	431a      	orrs	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011af8:	019b      	lsls	r3, r3, #6
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b00:	085b      	lsrs	r3, r3, #1
 8011b02:	3b01      	subs	r3, #1
 8011b04:	041b      	lsls	r3, r3, #16
 8011b06:	431a      	orrs	r2, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b0c:	061b      	lsls	r3, r3, #24
 8011b0e:	491b      	ldr	r1, [pc, #108]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011b10:	4313      	orrs	r3, r2
 8011b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011b14:	4b1b      	ldr	r3, [pc, #108]	@ (8011b84 <HAL_RCC_OscConfig+0x478>)
 8011b16:	2201      	movs	r2, #1
 8011b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b1a:	f7fa fded 	bl	800c6f8 <HAL_GetTick>
 8011b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011b20:	e008      	b.n	8011b34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b22:	f7fa fde9 	bl	800c6f8 <HAL_GetTick>
 8011b26:	4602      	mov	r2, r0
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	2b02      	cmp	r3, #2
 8011b2e:	d901      	bls.n	8011b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011b30:	2303      	movs	r3, #3
 8011b32:	e05c      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011b34:	4b11      	ldr	r3, [pc, #68]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d0f0      	beq.n	8011b22 <HAL_RCC_OscConfig+0x416>
 8011b40:	e054      	b.n	8011bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b42:	4b10      	ldr	r3, [pc, #64]	@ (8011b84 <HAL_RCC_OscConfig+0x478>)
 8011b44:	2200      	movs	r2, #0
 8011b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b48:	f7fa fdd6 	bl	800c6f8 <HAL_GetTick>
 8011b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011b4e:	e008      	b.n	8011b62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b50:	f7fa fdd2 	bl	800c6f8 <HAL_GetTick>
 8011b54:	4602      	mov	r2, r0
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	1ad3      	subs	r3, r2, r3
 8011b5a:	2b02      	cmp	r3, #2
 8011b5c:	d901      	bls.n	8011b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	e045      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011b62:	4b06      	ldr	r3, [pc, #24]	@ (8011b7c <HAL_RCC_OscConfig+0x470>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1f0      	bne.n	8011b50 <HAL_RCC_OscConfig+0x444>
 8011b6e:	e03d      	b.n	8011bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	699b      	ldr	r3, [r3, #24]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d107      	bne.n	8011b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e038      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
 8011b7c:	40023800 	.word	0x40023800
 8011b80:	40007000 	.word	0x40007000
 8011b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011b88:	4b1b      	ldr	r3, [pc, #108]	@ (8011bf8 <HAL_RCC_OscConfig+0x4ec>)
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	699b      	ldr	r3, [r3, #24]
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d028      	beq.n	8011be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d121      	bne.n	8011be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d11a      	bne.n	8011be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8011bb8:	4013      	ands	r3, r2
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d111      	bne.n	8011be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bce:	085b      	lsrs	r3, r3, #1
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d107      	bne.n	8011be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d001      	beq.n	8011bec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011be8:	2301      	movs	r3, #1
 8011bea:	e000      	b.n	8011bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3718      	adds	r7, #24
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	40023800 	.word	0x40023800

08011bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e0cc      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011c10:	4b68      	ldr	r3, [pc, #416]	@ (8011db4 <HAL_RCC_ClockConfig+0x1b8>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f003 0307 	and.w	r3, r3, #7
 8011c18:	683a      	ldr	r2, [r7, #0]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d90c      	bls.n	8011c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c1e:	4b65      	ldr	r3, [pc, #404]	@ (8011db4 <HAL_RCC_ClockConfig+0x1b8>)
 8011c20:	683a      	ldr	r2, [r7, #0]
 8011c22:	b2d2      	uxtb	r2, r2
 8011c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c26:	4b63      	ldr	r3, [pc, #396]	@ (8011db4 <HAL_RCC_ClockConfig+0x1b8>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f003 0307 	and.w	r3, r3, #7
 8011c2e:	683a      	ldr	r2, [r7, #0]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d001      	beq.n	8011c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011c34:	2301      	movs	r3, #1
 8011c36:	e0b8      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f003 0302 	and.w	r3, r3, #2
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d020      	beq.n	8011c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f003 0304 	and.w	r3, r3, #4
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d005      	beq.n	8011c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011c50:	4b59      	ldr	r3, [pc, #356]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c52:	689b      	ldr	r3, [r3, #8]
 8011c54:	4a58      	ldr	r2, [pc, #352]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8011c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f003 0308 	and.w	r3, r3, #8
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d005      	beq.n	8011c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011c68:	4b53      	ldr	r3, [pc, #332]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	4a52      	ldr	r2, [pc, #328]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8011c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c74:	4b50      	ldr	r3, [pc, #320]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	494d      	ldr	r1, [pc, #308]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c82:	4313      	orrs	r3, r2
 8011c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f003 0301 	and.w	r3, r3, #1
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d044      	beq.n	8011d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d107      	bne.n	8011caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c9a:	4b47      	ldr	r3, [pc, #284]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d119      	bne.n	8011cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e07f      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	2b02      	cmp	r3, #2
 8011cb0:	d003      	beq.n	8011cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011cb6:	2b03      	cmp	r3, #3
 8011cb8:	d107      	bne.n	8011cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011cba:	4b3f      	ldr	r3, [pc, #252]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d109      	bne.n	8011cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e06f      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011cca:	4b3b      	ldr	r3, [pc, #236]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f003 0302 	and.w	r3, r3, #2
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d101      	bne.n	8011cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	e067      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011cda:	4b37      	ldr	r3, [pc, #220]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	f023 0203 	bic.w	r2, r3, #3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	4934      	ldr	r1, [pc, #208]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011ce8:	4313      	orrs	r3, r2
 8011cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011cec:	f7fa fd04 	bl	800c6f8 <HAL_GetTick>
 8011cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011cf2:	e00a      	b.n	8011d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cf4:	f7fa fd00 	bl	800c6f8 <HAL_GetTick>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011d02:	4293      	cmp	r3, r2
 8011d04:	d901      	bls.n	8011d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011d06:	2303      	movs	r3, #3
 8011d08:	e04f      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	f003 020c 	and.w	r2, r3, #12
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d1eb      	bne.n	8011cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011d1c:	4b25      	ldr	r3, [pc, #148]	@ (8011db4 <HAL_RCC_ClockConfig+0x1b8>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f003 0307 	and.w	r3, r3, #7
 8011d24:	683a      	ldr	r2, [r7, #0]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d20c      	bcs.n	8011d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d2a:	4b22      	ldr	r3, [pc, #136]	@ (8011db4 <HAL_RCC_ClockConfig+0x1b8>)
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	b2d2      	uxtb	r2, r2
 8011d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011d32:	4b20      	ldr	r3, [pc, #128]	@ (8011db4 <HAL_RCC_ClockConfig+0x1b8>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f003 0307 	and.w	r3, r3, #7
 8011d3a:	683a      	ldr	r2, [r7, #0]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d001      	beq.n	8011d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011d40:	2301      	movs	r3, #1
 8011d42:	e032      	b.n	8011daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f003 0304 	and.w	r3, r3, #4
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d008      	beq.n	8011d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011d50:	4b19      	ldr	r3, [pc, #100]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	4916      	ldr	r1, [pc, #88]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f003 0308 	and.w	r3, r3, #8
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d009      	beq.n	8011d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011d6e:	4b12      	ldr	r3, [pc, #72]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011d70:	689b      	ldr	r3, [r3, #8]
 8011d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	691b      	ldr	r3, [r3, #16]
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	490e      	ldr	r1, [pc, #56]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011d82:	f000 f821 	bl	8011dc8 <HAL_RCC_GetSysClockFreq>
 8011d86:	4602      	mov	r2, r0
 8011d88:	4b0b      	ldr	r3, [pc, #44]	@ (8011db8 <HAL_RCC_ClockConfig+0x1bc>)
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	091b      	lsrs	r3, r3, #4
 8011d8e:	f003 030f 	and.w	r3, r3, #15
 8011d92:	490a      	ldr	r1, [pc, #40]	@ (8011dbc <HAL_RCC_ClockConfig+0x1c0>)
 8011d94:	5ccb      	ldrb	r3, [r1, r3]
 8011d96:	fa22 f303 	lsr.w	r3, r2, r3
 8011d9a:	4a09      	ldr	r2, [pc, #36]	@ (8011dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8011d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011d9e:	4b09      	ldr	r3, [pc, #36]	@ (8011dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f1 fe92 	bl	8003acc <HAL_InitTick>

  return HAL_OK;
 8011da8:	2300      	movs	r3, #0
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3710      	adds	r7, #16
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	40023c00 	.word	0x40023c00
 8011db8:	40023800 	.word	0x40023800
 8011dbc:	08023600 	.word	0x08023600
 8011dc0:	20000004 	.word	0x20000004
 8011dc4:	20000048 	.word	0x20000048

08011dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011dcc:	b090      	sub	sp, #64	@ 0x40
 8011dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011dd8:	2300      	movs	r3, #0
 8011dda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011de0:	4b59      	ldr	r3, [pc, #356]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	f003 030c 	and.w	r3, r3, #12
 8011de8:	2b08      	cmp	r3, #8
 8011dea:	d00d      	beq.n	8011e08 <HAL_RCC_GetSysClockFreq+0x40>
 8011dec:	2b08      	cmp	r3, #8
 8011dee:	f200 80a1 	bhi.w	8011f34 <HAL_RCC_GetSysClockFreq+0x16c>
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d002      	beq.n	8011dfc <HAL_RCC_GetSysClockFreq+0x34>
 8011df6:	2b04      	cmp	r3, #4
 8011df8:	d003      	beq.n	8011e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8011dfa:	e09b      	b.n	8011f34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011dfc:	4b53      	ldr	r3, [pc, #332]	@ (8011f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8011dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8011e00:	e09b      	b.n	8011f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011e02:	4b53      	ldr	r3, [pc, #332]	@ (8011f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8011e04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8011e06:	e098      	b.n	8011f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011e08:	4b4f      	ldr	r3, [pc, #316]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e10:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011e12:	4b4d      	ldr	r3, [pc, #308]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d028      	beq.n	8011e70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	099b      	lsrs	r3, r3, #6
 8011e24:	2200      	movs	r2, #0
 8011e26:	623b      	str	r3, [r7, #32]
 8011e28:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e2a:	6a3b      	ldr	r3, [r7, #32]
 8011e2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8011e30:	2100      	movs	r1, #0
 8011e32:	4b47      	ldr	r3, [pc, #284]	@ (8011f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8011e34:	fb03 f201 	mul.w	r2, r3, r1
 8011e38:	2300      	movs	r3, #0
 8011e3a:	fb00 f303 	mul.w	r3, r0, r3
 8011e3e:	4413      	add	r3, r2
 8011e40:	4a43      	ldr	r2, [pc, #268]	@ (8011f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8011e42:	fba0 1202 	umull	r1, r2, r0, r2
 8011e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011e48:	460a      	mov	r2, r1
 8011e4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e4e:	4413      	add	r3, r2
 8011e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e54:	2200      	movs	r2, #0
 8011e56:	61bb      	str	r3, [r7, #24]
 8011e58:	61fa      	str	r2, [r7, #28]
 8011e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011e5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8011e62:	f7ee ff11 	bl	8000c88 <__aeabi_uldivmod>
 8011e66:	4602      	mov	r2, r0
 8011e68:	460b      	mov	r3, r1
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011e6e:	e053      	b.n	8011f18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011e70:	4b35      	ldr	r3, [pc, #212]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	099b      	lsrs	r3, r3, #6
 8011e76:	2200      	movs	r2, #0
 8011e78:	613b      	str	r3, [r7, #16]
 8011e7a:	617a      	str	r2, [r7, #20]
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8011e82:	f04f 0b00 	mov.w	fp, #0
 8011e86:	4652      	mov	r2, sl
 8011e88:	465b      	mov	r3, fp
 8011e8a:	f04f 0000 	mov.w	r0, #0
 8011e8e:	f04f 0100 	mov.w	r1, #0
 8011e92:	0159      	lsls	r1, r3, #5
 8011e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011e98:	0150      	lsls	r0, r2, #5
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	ebb2 080a 	subs.w	r8, r2, sl
 8011ea2:	eb63 090b 	sbc.w	r9, r3, fp
 8011ea6:	f04f 0200 	mov.w	r2, #0
 8011eaa:	f04f 0300 	mov.w	r3, #0
 8011eae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8011eb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8011eb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8011eba:	ebb2 0408 	subs.w	r4, r2, r8
 8011ebe:	eb63 0509 	sbc.w	r5, r3, r9
 8011ec2:	f04f 0200 	mov.w	r2, #0
 8011ec6:	f04f 0300 	mov.w	r3, #0
 8011eca:	00eb      	lsls	r3, r5, #3
 8011ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011ed0:	00e2      	lsls	r2, r4, #3
 8011ed2:	4614      	mov	r4, r2
 8011ed4:	461d      	mov	r5, r3
 8011ed6:	eb14 030a 	adds.w	r3, r4, sl
 8011eda:	603b      	str	r3, [r7, #0]
 8011edc:	eb45 030b 	adc.w	r3, r5, fp
 8011ee0:	607b      	str	r3, [r7, #4]
 8011ee2:	f04f 0200 	mov.w	r2, #0
 8011ee6:	f04f 0300 	mov.w	r3, #0
 8011eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011eee:	4629      	mov	r1, r5
 8011ef0:	028b      	lsls	r3, r1, #10
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011ef8:	4621      	mov	r1, r4
 8011efa:	028a      	lsls	r2, r1, #10
 8011efc:	4610      	mov	r0, r2
 8011efe:	4619      	mov	r1, r3
 8011f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f02:	2200      	movs	r2, #0
 8011f04:	60bb      	str	r3, [r7, #8]
 8011f06:	60fa      	str	r2, [r7, #12]
 8011f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011f0c:	f7ee febc 	bl	8000c88 <__aeabi_uldivmod>
 8011f10:	4602      	mov	r2, r0
 8011f12:	460b      	mov	r3, r1
 8011f14:	4613      	mov	r3, r2
 8011f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011f18:	4b0b      	ldr	r3, [pc, #44]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	0c1b      	lsrs	r3, r3, #16
 8011f1e:	f003 0303 	and.w	r3, r3, #3
 8011f22:	3301      	adds	r3, #1
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8011f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8011f32:	e002      	b.n	8011f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011f34:	4b05      	ldr	r3, [pc, #20]	@ (8011f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8011f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8011f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3740      	adds	r7, #64	@ 0x40
 8011f40:	46bd      	mov	sp, r7
 8011f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011f46:	bf00      	nop
 8011f48:	40023800 	.word	0x40023800
 8011f4c:	00f42400 	.word	0x00f42400
 8011f50:	00b71b00 	.word	0x00b71b00

08011f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011f54:	b480      	push	{r7}
 8011f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011f58:	4b03      	ldr	r3, [pc, #12]	@ (8011f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	20000004 	.word	0x20000004

08011f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011f70:	f7ff fff0 	bl	8011f54 <HAL_RCC_GetHCLKFreq>
 8011f74:	4602      	mov	r2, r0
 8011f76:	4b05      	ldr	r3, [pc, #20]	@ (8011f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8011f78:	689b      	ldr	r3, [r3, #8]
 8011f7a:	0a9b      	lsrs	r3, r3, #10
 8011f7c:	f003 0307 	and.w	r3, r3, #7
 8011f80:	4903      	ldr	r1, [pc, #12]	@ (8011f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011f82:	5ccb      	ldrb	r3, [r1, r3]
 8011f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	40023800 	.word	0x40023800
 8011f90:	08023610 	.word	0x08023610

08011f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011f98:	f7ff ffdc 	bl	8011f54 <HAL_RCC_GetHCLKFreq>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	4b05      	ldr	r3, [pc, #20]	@ (8011fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011fa0:	689b      	ldr	r3, [r3, #8]
 8011fa2:	0b5b      	lsrs	r3, r3, #13
 8011fa4:	f003 0307 	and.w	r3, r3, #7
 8011fa8:	4903      	ldr	r1, [pc, #12]	@ (8011fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011faa:	5ccb      	ldrb	r3, [r1, r3]
 8011fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	40023800 	.word	0x40023800
 8011fb8:	08023610 	.word	0x08023610

08011fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	220f      	movs	r2, #15
 8011fca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011fcc:	4b12      	ldr	r3, [pc, #72]	@ (8012018 <HAL_RCC_GetClockConfig+0x5c>)
 8011fce:	689b      	ldr	r3, [r3, #8]
 8011fd0:	f003 0203 	and.w	r2, r3, #3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8012018 <HAL_RCC_GetClockConfig+0x5c>)
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8012018 <HAL_RCC_GetClockConfig+0x5c>)
 8011fe6:	689b      	ldr	r3, [r3, #8]
 8011fe8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011ff0:	4b09      	ldr	r3, [pc, #36]	@ (8012018 <HAL_RCC_GetClockConfig+0x5c>)
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	08db      	lsrs	r3, r3, #3
 8011ff6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011ffe:	4b07      	ldr	r3, [pc, #28]	@ (801201c <HAL_RCC_GetClockConfig+0x60>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f003 0207 	and.w	r2, r3, #7
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	601a      	str	r2, [r3, #0]
}
 801200a:	bf00      	nop
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop
 8012018:	40023800 	.word	0x40023800
 801201c:	40023c00 	.word	0x40023c00

08012020 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801202e:	2301      	movs	r3, #1
 8012030:	e01c      	b.n	801206c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	795b      	ldrb	r3, [r3, #5]
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b00      	cmp	r3, #0
 801203a:	d105      	bne.n	8012048 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7f1 fbf2 	bl	800382c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2202      	movs	r2, #2
 801204c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f042 0204 	orr.w	r2, r2, #4
 801205c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2201      	movs	r2, #1
 8012062:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801206a:	2300      	movs	r3, #0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d101      	bne.n	8012086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	e07b      	b.n	801217e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801208a:	2b00      	cmp	r3, #0
 801208c:	d108      	bne.n	80120a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012096:	d009      	beq.n	80120ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	61da      	str	r2, [r3, #28]
 801209e:	e005      	b.n	80120ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2200      	movs	r2, #0
 80120aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d106      	bne.n	80120cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7f1 fc08 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2202      	movs	r2, #2
 80120d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80120e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80120f4:	431a      	orrs	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80120fe:	431a      	orrs	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	691b      	ldr	r3, [r3, #16]
 8012104:	f003 0302 	and.w	r3, r3, #2
 8012108:	431a      	orrs	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	695b      	ldr	r3, [r3, #20]
 801210e:	f003 0301 	and.w	r3, r3, #1
 8012112:	431a      	orrs	r2, r3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	699b      	ldr	r3, [r3, #24]
 8012118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801211c:	431a      	orrs	r2, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	69db      	ldr	r3, [r3, #28]
 8012122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012126:	431a      	orrs	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6a1b      	ldr	r3, [r3, #32]
 801212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012130:	ea42 0103 	orr.w	r1, r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012138:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	430a      	orrs	r2, r1
 8012142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	699b      	ldr	r3, [r3, #24]
 8012148:	0c1b      	lsrs	r3, r3, #16
 801214a:	f003 0104 	and.w	r1, r3, #4
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012152:	f003 0210 	and.w	r2, r3, #16
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	430a      	orrs	r2, r1
 801215c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	69da      	ldr	r2, [r3, #28]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801216c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2201      	movs	r2, #1
 8012178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 801217c:	2300      	movs	r3, #0
}
 801217e:	4618      	mov	r0, r3
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012186:	b580      	push	{r7, lr}
 8012188:	b088      	sub	sp, #32
 801218a:	af02      	add	r7, sp, #8
 801218c:	60f8      	str	r0, [r7, #12]
 801218e:	60b9      	str	r1, [r7, #8]
 8012190:	603b      	str	r3, [r7, #0]
 8012192:	4613      	mov	r3, r2
 8012194:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012196:	2300      	movs	r3, #0
 8012198:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80121a2:	d112      	bne.n	80121ca <HAL_SPI_Receive+0x44>
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d10e      	bne.n	80121ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2204      	movs	r2, #4
 80121b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80121b4:	88fa      	ldrh	r2, [r7, #6]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	4613      	mov	r3, r2
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f000 f8f1 	bl	80123a8 <HAL_SPI_TransmitReceive>
 80121c6:	4603      	mov	r3, r0
 80121c8:	e0ea      	b.n	80123a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d101      	bne.n	80121d8 <HAL_SPI_Receive+0x52>
 80121d4:	2302      	movs	r3, #2
 80121d6:	e0e3      	b.n	80123a0 <HAL_SPI_Receive+0x21a>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2201      	movs	r2, #1
 80121dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80121e0:	f7fa fa8a 	bl	800c6f8 <HAL_GetTick>
 80121e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d002      	beq.n	80121f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80121f2:	2302      	movs	r3, #2
 80121f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80121f6:	e0ca      	b.n	801238e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d002      	beq.n	8012204 <HAL_SPI_Receive+0x7e>
 80121fe:	88fb      	ldrh	r3, [r7, #6]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d102      	bne.n	801220a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012204:	2301      	movs	r3, #1
 8012206:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012208:	e0c1      	b.n	801238e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2204      	movs	r2, #4
 801220e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	68ba      	ldr	r2, [r7, #8]
 801221c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	88fa      	ldrh	r2, [r7, #6]
 8012222:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	88fa      	ldrh	r2, [r7, #6]
 8012228:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2200      	movs	r2, #0
 801222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	2200      	movs	r2, #0
 8012234:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2200      	movs	r2, #0
 801223a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2200      	movs	r2, #0
 8012240:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2200      	movs	r2, #0
 8012246:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012250:	d10f      	bne.n	8012272 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	681a      	ldr	r2, [r3, #0]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012270:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801227c:	2b40      	cmp	r3, #64	@ 0x40
 801227e:	d007      	beq.n	8012290 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801228e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d162      	bne.n	801235e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012298:	e02e      	b.n	80122f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	689b      	ldr	r3, [r3, #8]
 80122a0:	f003 0301 	and.w	r3, r3, #1
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d115      	bne.n	80122d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f103 020c 	add.w	r2, r3, #12
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122b4:	7812      	ldrb	r2, [r2, #0]
 80122b6:	b2d2      	uxtb	r2, r2
 80122b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122be:	1c5a      	adds	r2, r3, #1
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	3b01      	subs	r3, #1
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80122d2:	e011      	b.n	80122f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80122d4:	f7fa fa10 	bl	800c6f8 <HAL_GetTick>
 80122d8:	4602      	mov	r2, r0
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	683a      	ldr	r2, [r7, #0]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d803      	bhi.n	80122ec <HAL_SPI_Receive+0x166>
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ea:	d102      	bne.n	80122f2 <HAL_SPI_Receive+0x16c>
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d102      	bne.n	80122f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80122f2:	2303      	movs	r3, #3
 80122f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80122f6:	e04a      	b.n	801238e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1cb      	bne.n	801229a <HAL_SPI_Receive+0x114>
 8012302:	e031      	b.n	8012368 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	f003 0301 	and.w	r3, r3, #1
 801230e:	2b01      	cmp	r3, #1
 8012310:	d113      	bne.n	801233a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	68da      	ldr	r2, [r3, #12]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801231c:	b292      	uxth	r2, r2
 801231e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012324:	1c9a      	adds	r2, r3, #2
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801232e:	b29b      	uxth	r3, r3
 8012330:	3b01      	subs	r3, #1
 8012332:	b29a      	uxth	r2, r3
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012338:	e011      	b.n	801235e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801233a:	f7fa f9dd 	bl	800c6f8 <HAL_GetTick>
 801233e:	4602      	mov	r2, r0
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	1ad3      	subs	r3, r2, r3
 8012344:	683a      	ldr	r2, [r7, #0]
 8012346:	429a      	cmp	r2, r3
 8012348:	d803      	bhi.n	8012352 <HAL_SPI_Receive+0x1cc>
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012350:	d102      	bne.n	8012358 <HAL_SPI_Receive+0x1d2>
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d102      	bne.n	801235e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8012358:	2303      	movs	r3, #3
 801235a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801235c:	e017      	b.n	801238e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012362:	b29b      	uxth	r3, r3
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1cd      	bne.n	8012304 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012368:	693a      	ldr	r2, [r7, #16]
 801236a:	6839      	ldr	r1, [r7, #0]
 801236c:	68f8      	ldr	r0, [r7, #12]
 801236e:	f000 fa45 	bl	80127fc <SPI_EndRxTransaction>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2220      	movs	r2, #32
 801237c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012382:	2b00      	cmp	r3, #0
 8012384:	d002      	beq.n	801238c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8012386:	2301      	movs	r3, #1
 8012388:	75fb      	strb	r3, [r7, #23]
 801238a:	e000      	b.n	801238e <HAL_SPI_Receive+0x208>
  }

error :
 801238c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2201      	movs	r2, #1
 8012392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 801239e:	7dfb      	ldrb	r3, [r7, #23]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3718      	adds	r7, #24
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b08c      	sub	sp, #48	@ 0x30
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	607a      	str	r2, [r7, #4]
 80123b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80123b6:	2301      	movs	r3, #1
 80123b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80123ba:	2300      	movs	r3, #0
 80123bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80123c6:	2b01      	cmp	r3, #1
 80123c8:	d101      	bne.n	80123ce <HAL_SPI_TransmitReceive+0x26>
 80123ca:	2302      	movs	r3, #2
 80123cc:	e18a      	b.n	80126e4 <HAL_SPI_TransmitReceive+0x33c>
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2201      	movs	r2, #1
 80123d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80123d6:	f7fa f98f 	bl	800c6f8 <HAL_GetTick>
 80123da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80123e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80123ec:	887b      	ldrh	r3, [r7, #2]
 80123ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80123f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d00f      	beq.n	8012418 <HAL_SPI_TransmitReceive+0x70>
 80123f8:	69fb      	ldr	r3, [r7, #28]
 80123fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80123fe:	d107      	bne.n	8012410 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	689b      	ldr	r3, [r3, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d103      	bne.n	8012410 <HAL_SPI_TransmitReceive+0x68>
 8012408:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801240c:	2b04      	cmp	r3, #4
 801240e:	d003      	beq.n	8012418 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012410:	2302      	movs	r3, #2
 8012412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8012416:	e15b      	b.n	80126d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d005      	beq.n	801242a <HAL_SPI_TransmitReceive+0x82>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d002      	beq.n	801242a <HAL_SPI_TransmitReceive+0x82>
 8012424:	887b      	ldrh	r3, [r7, #2]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d103      	bne.n	8012432 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801242a:	2301      	movs	r3, #1
 801242c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8012430:	e14e      	b.n	80126d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012438:	b2db      	uxtb	r3, r3
 801243a:	2b04      	cmp	r3, #4
 801243c:	d003      	beq.n	8012446 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2205      	movs	r2, #5
 8012442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	2200      	movs	r2, #0
 801244a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	887a      	ldrh	r2, [r7, #2]
 8012456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	887a      	ldrh	r2, [r7, #2]
 801245c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	887a      	ldrh	r2, [r7, #2]
 8012468:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	887a      	ldrh	r2, [r7, #2]
 801246e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2200      	movs	r2, #0
 8012474:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	2200      	movs	r2, #0
 801247a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012486:	2b40      	cmp	r3, #64	@ 0x40
 8012488:	d007      	beq.n	801249a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012498:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80124a2:	d178      	bne.n	8012596 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d002      	beq.n	80124b2 <HAL_SPI_TransmitReceive+0x10a>
 80124ac:	8b7b      	ldrh	r3, [r7, #26]
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	d166      	bne.n	8012580 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124b6:	881a      	ldrh	r2, [r3, #0]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124c2:	1c9a      	adds	r2, r3, #2
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	3b01      	subs	r3, #1
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124d6:	e053      	b.n	8012580 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	f003 0302 	and.w	r3, r3, #2
 80124e2:	2b02      	cmp	r3, #2
 80124e4:	d11b      	bne.n	801251e <HAL_SPI_TransmitReceive+0x176>
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d016      	beq.n	801251e <HAL_SPI_TransmitReceive+0x176>
 80124f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d113      	bne.n	801251e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124fa:	881a      	ldrh	r2, [r3, #0]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012506:	1c9a      	adds	r2, r3, #2
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012510:	b29b      	uxth	r3, r3
 8012512:	3b01      	subs	r3, #1
 8012514:	b29a      	uxth	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801251a:	2300      	movs	r3, #0
 801251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	689b      	ldr	r3, [r3, #8]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	2b01      	cmp	r3, #1
 801252a:	d119      	bne.n	8012560 <HAL_SPI_TransmitReceive+0x1b8>
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012530:	b29b      	uxth	r3, r3
 8012532:	2b00      	cmp	r3, #0
 8012534:	d014      	beq.n	8012560 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	68da      	ldr	r2, [r3, #12]
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012540:	b292      	uxth	r2, r2
 8012542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012548:	1c9a      	adds	r2, r3, #2
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012552:	b29b      	uxth	r3, r3
 8012554:	3b01      	subs	r3, #1
 8012556:	b29a      	uxth	r2, r3
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801255c:	2301      	movs	r3, #1
 801255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012560:	f7fa f8ca 	bl	800c6f8 <HAL_GetTick>
 8012564:	4602      	mov	r2, r0
 8012566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801256c:	429a      	cmp	r2, r3
 801256e:	d807      	bhi.n	8012580 <HAL_SPI_TransmitReceive+0x1d8>
 8012570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012576:	d003      	beq.n	8012580 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8012578:	2303      	movs	r3, #3
 801257a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 801257e:	e0a7      	b.n	80126d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012584:	b29b      	uxth	r3, r3
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1a6      	bne.n	80124d8 <HAL_SPI_TransmitReceive+0x130>
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801258e:	b29b      	uxth	r3, r3
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1a1      	bne.n	80124d8 <HAL_SPI_TransmitReceive+0x130>
 8012594:	e07c      	b.n	8012690 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d002      	beq.n	80125a4 <HAL_SPI_TransmitReceive+0x1fc>
 801259e:	8b7b      	ldrh	r3, [r7, #26]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d16b      	bne.n	801267c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	330c      	adds	r3, #12
 80125ae:	7812      	ldrb	r2, [r2, #0]
 80125b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125b6:	1c5a      	adds	r2, r3, #1
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	3b01      	subs	r3, #1
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80125ca:	e057      	b.n	801267c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	f003 0302 	and.w	r3, r3, #2
 80125d6:	2b02      	cmp	r3, #2
 80125d8:	d11c      	bne.n	8012614 <HAL_SPI_TransmitReceive+0x26c>
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80125de:	b29b      	uxth	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d017      	beq.n	8012614 <HAL_SPI_TransmitReceive+0x26c>
 80125e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d114      	bne.n	8012614 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	330c      	adds	r3, #12
 80125f4:	7812      	ldrb	r2, [r2, #0]
 80125f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125fc:	1c5a      	adds	r2, r3, #1
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012606:	b29b      	uxth	r3, r3
 8012608:	3b01      	subs	r3, #1
 801260a:	b29a      	uxth	r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012610:	2300      	movs	r3, #0
 8012612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	f003 0301 	and.w	r3, r3, #1
 801261e:	2b01      	cmp	r3, #1
 8012620:	d119      	bne.n	8012656 <HAL_SPI_TransmitReceive+0x2ae>
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012626:	b29b      	uxth	r3, r3
 8012628:	2b00      	cmp	r3, #0
 801262a:	d014      	beq.n	8012656 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	68da      	ldr	r2, [r3, #12]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012636:	b2d2      	uxtb	r2, r2
 8012638:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801263e:	1c5a      	adds	r2, r3, #1
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012648:	b29b      	uxth	r3, r3
 801264a:	3b01      	subs	r3, #1
 801264c:	b29a      	uxth	r2, r3
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012652:	2301      	movs	r3, #1
 8012654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012656:	f7fa f84f 	bl	800c6f8 <HAL_GetTick>
 801265a:	4602      	mov	r2, r0
 801265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265e:	1ad3      	subs	r3, r2, r3
 8012660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012662:	429a      	cmp	r2, r3
 8012664:	d803      	bhi.n	801266e <HAL_SPI_TransmitReceive+0x2c6>
 8012666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801266c:	d102      	bne.n	8012674 <HAL_SPI_TransmitReceive+0x2cc>
 801266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012670:	2b00      	cmp	r3, #0
 8012672:	d103      	bne.n	801267c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8012674:	2303      	movs	r3, #3
 8012676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 801267a:	e029      	b.n	80126d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012680:	b29b      	uxth	r3, r3
 8012682:	2b00      	cmp	r3, #0
 8012684:	d1a2      	bne.n	80125cc <HAL_SPI_TransmitReceive+0x224>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801268a:	b29b      	uxth	r3, r3
 801268c:	2b00      	cmp	r3, #0
 801268e:	d19d      	bne.n	80125cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012692:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012694:	68f8      	ldr	r0, [r7, #12]
 8012696:	f000 f917 	bl	80128c8 <SPI_EndRxTxTransaction>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d006      	beq.n	80126ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80126a0:	2301      	movs	r3, #1
 80126a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	2220      	movs	r2, #32
 80126aa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80126ac:	e010      	b.n	80126d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d10b      	bne.n	80126ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80126b6:	2300      	movs	r3, #0
 80126b8:	617b      	str	r3, [r7, #20]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	617b      	str	r3, [r7, #20]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	617b      	str	r3, [r7, #20]
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	e000      	b.n	80126d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80126ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2201      	movs	r2, #1
 80126d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2200      	movs	r2, #0
 80126dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80126e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3730      	adds	r7, #48	@ 0x30
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b088      	sub	sp, #32
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	603b      	str	r3, [r7, #0]
 80126f8:	4613      	mov	r3, r2
 80126fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80126fc:	f7f9 fffc 	bl	800c6f8 <HAL_GetTick>
 8012700:	4602      	mov	r2, r0
 8012702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012704:	1a9b      	subs	r3, r3, r2
 8012706:	683a      	ldr	r2, [r7, #0]
 8012708:	4413      	add	r3, r2
 801270a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801270c:	f7f9 fff4 	bl	800c6f8 <HAL_GetTick>
 8012710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012712:	4b39      	ldr	r3, [pc, #228]	@ (80127f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	015b      	lsls	r3, r3, #5
 8012718:	0d1b      	lsrs	r3, r3, #20
 801271a:	69fa      	ldr	r2, [r7, #28]
 801271c:	fb02 f303 	mul.w	r3, r2, r3
 8012720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012722:	e054      	b.n	80127ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272a:	d050      	beq.n	80127ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801272c:	f7f9 ffe4 	bl	800c6f8 <HAL_GetTick>
 8012730:	4602      	mov	r2, r0
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	1ad3      	subs	r3, r2, r3
 8012736:	69fa      	ldr	r2, [r7, #28]
 8012738:	429a      	cmp	r2, r3
 801273a:	d902      	bls.n	8012742 <SPI_WaitFlagStateUntilTimeout+0x56>
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d13d      	bne.n	80127be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	685a      	ldr	r2, [r3, #4]
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801275a:	d111      	bne.n	8012780 <SPI_WaitFlagStateUntilTimeout+0x94>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012764:	d004      	beq.n	8012770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	689b      	ldr	r3, [r3, #8]
 801276a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801276e:	d107      	bne.n	8012780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801277e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012788:	d10f      	bne.n	80127aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012798:	601a      	str	r2, [r3, #0]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80127a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2201      	movs	r2, #1
 80127ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2200      	movs	r2, #0
 80127b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80127ba:	2303      	movs	r3, #3
 80127bc:	e017      	b.n	80127ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d101      	bne.n	80127c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80127c4:	2300      	movs	r3, #0
 80127c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	3b01      	subs	r3, #1
 80127cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	689a      	ldr	r2, [r3, #8]
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	4013      	ands	r3, r2
 80127d8:	68ba      	ldr	r2, [r7, #8]
 80127da:	429a      	cmp	r2, r3
 80127dc:	bf0c      	ite	eq
 80127de:	2301      	moveq	r3, #1
 80127e0:	2300      	movne	r3, #0
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	461a      	mov	r2, r3
 80127e6:	79fb      	ldrb	r3, [r7, #7]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d19b      	bne.n	8012724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80127ec:	2300      	movs	r3, #0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3720      	adds	r7, #32
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	20000004 	.word	0x20000004

080127fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b086      	sub	sp, #24
 8012800:	af02      	add	r7, sp, #8
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012810:	d111      	bne.n	8012836 <SPI_EndRxTransaction+0x3a>
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	689b      	ldr	r3, [r3, #8]
 8012816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801281a:	d004      	beq.n	8012826 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	689b      	ldr	r3, [r3, #8]
 8012820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012824:	d107      	bne.n	8012836 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012834:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801283e:	d12a      	bne.n	8012896 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	689b      	ldr	r3, [r3, #8]
 8012844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012848:	d012      	beq.n	8012870 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	2200      	movs	r2, #0
 8012852:	2180      	movs	r1, #128	@ 0x80
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	f7ff ff49 	bl	80126ec <SPI_WaitFlagStateUntilTimeout>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d02d      	beq.n	80128bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012864:	f043 0220 	orr.w	r2, r3, #32
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801286c:	2303      	movs	r3, #3
 801286e:	e026      	b.n	80128be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	2200      	movs	r2, #0
 8012878:	2101      	movs	r1, #1
 801287a:	68f8      	ldr	r0, [r7, #12]
 801287c:	f7ff ff36 	bl	80126ec <SPI_WaitFlagStateUntilTimeout>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d01a      	beq.n	80128bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801288a:	f043 0220 	orr.w	r2, r3, #32
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8012892:	2303      	movs	r3, #3
 8012894:	e013      	b.n	80128be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	2200      	movs	r2, #0
 801289e:	2101      	movs	r1, #1
 80128a0:	68f8      	ldr	r0, [r7, #12]
 80128a2:	f7ff ff23 	bl	80126ec <SPI_WaitFlagStateUntilTimeout>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d007      	beq.n	80128bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128b0:	f043 0220 	orr.w	r2, r3, #32
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80128b8:	2303      	movs	r3, #3
 80128ba:	e000      	b.n	80128be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80128bc:	2300      	movs	r3, #0
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3710      	adds	r7, #16
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
	...

080128c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b088      	sub	sp, #32
 80128cc:	af02      	add	r7, sp, #8
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	60b9      	str	r1, [r7, #8]
 80128d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80128d4:	4b1b      	ldr	r3, [pc, #108]	@ (8012944 <SPI_EndRxTxTransaction+0x7c>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a1b      	ldr	r2, [pc, #108]	@ (8012948 <SPI_EndRxTxTransaction+0x80>)
 80128da:	fba2 2303 	umull	r2, r3, r2, r3
 80128de:	0d5b      	lsrs	r3, r3, #21
 80128e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80128e4:	fb02 f303 	mul.w	r3, r2, r3
 80128e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80128f2:	d112      	bne.n	801291a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	2200      	movs	r2, #0
 80128fc:	2180      	movs	r1, #128	@ 0x80
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f7ff fef4 	bl	80126ec <SPI_WaitFlagStateUntilTimeout>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d016      	beq.n	8012938 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801290e:	f043 0220 	orr.w	r2, r3, #32
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8012916:	2303      	movs	r3, #3
 8012918:	e00f      	b.n	801293a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d00a      	beq.n	8012936 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	3b01      	subs	r3, #1
 8012924:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012930:	2b80      	cmp	r3, #128	@ 0x80
 8012932:	d0f2      	beq.n	801291a <SPI_EndRxTxTransaction+0x52>
 8012934:	e000      	b.n	8012938 <SPI_EndRxTxTransaction+0x70>
        break;
 8012936:	bf00      	nop
  }

  return HAL_OK;
 8012938:	2300      	movs	r3, #0
}
 801293a:	4618      	mov	r0, r3
 801293c:	3718      	adds	r7, #24
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	20000004 	.word	0x20000004
 8012948:	165e9f81 	.word	0x165e9f81

0801294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d101      	bne.n	801295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801295a:	2301      	movs	r3, #1
 801295c:	e041      	b.n	80129e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012964:	b2db      	uxtb	r3, r3
 8012966:	2b00      	cmp	r3, #0
 8012968:	d106      	bne.n	8012978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7f1 fd1a 	bl	80043ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2202      	movs	r2, #2
 801297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	3304      	adds	r3, #4
 8012988:	4619      	mov	r1, r3
 801298a:	4610      	mov	r0, r2
 801298c:	f000 fd24 	bl	80133d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2201      	movs	r2, #1
 80129ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2201      	movs	r2, #1
 80129cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2201      	movs	r2, #1
 80129d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2201      	movs	r2, #1
 80129dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b085      	sub	sp, #20
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80129fa:	b2db      	uxtb	r3, r3
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	d001      	beq.n	8012a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012a00:	2301      	movs	r3, #1
 8012a02:	e04e      	b.n	8012aa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2202      	movs	r2, #2
 8012a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	68da      	ldr	r2, [r3, #12]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f042 0201 	orr.w	r2, r2, #1
 8012a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4a23      	ldr	r2, [pc, #140]	@ (8012ab0 <HAL_TIM_Base_Start_IT+0xc4>)
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d022      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a2e:	d01d      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	4a1f      	ldr	r2, [pc, #124]	@ (8012ab4 <HAL_TIM_Base_Start_IT+0xc8>)
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d018      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8012ab8 <HAL_TIM_Base_Start_IT+0xcc>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d013      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	4a1c      	ldr	r2, [pc, #112]	@ (8012abc <HAL_TIM_Base_Start_IT+0xd0>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d00e      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4a1b      	ldr	r2, [pc, #108]	@ (8012ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d009      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a19      	ldr	r2, [pc, #100]	@ (8012ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d004      	beq.n	8012a6c <HAL_TIM_Base_Start_IT+0x80>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a18      	ldr	r2, [pc, #96]	@ (8012ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d111      	bne.n	8012a90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	f003 0307 	and.w	r3, r3, #7
 8012a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2b06      	cmp	r3, #6
 8012a7c:	d010      	beq.n	8012aa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f042 0201 	orr.w	r2, r2, #1
 8012a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a8e:	e007      	b.n	8012aa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f042 0201 	orr.w	r2, r2, #1
 8012a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012aa0:	2300      	movs	r3, #0
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	40010000 	.word	0x40010000
 8012ab4:	40000400 	.word	0x40000400
 8012ab8:	40000800 	.word	0x40000800
 8012abc:	40000c00 	.word	0x40000c00
 8012ac0:	40010400 	.word	0x40010400
 8012ac4:	40014000 	.word	0x40014000
 8012ac8:	40001800 	.word	0x40001800

08012acc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d101      	bne.n	8012ade <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012ada:	2301      	movs	r3, #1
 8012adc:	e041      	b.n	8012b62 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d106      	bne.n	8012af8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2200      	movs	r2, #0
 8012aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f000 f839 	bl	8012b6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2202      	movs	r2, #2
 8012afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	3304      	adds	r3, #4
 8012b08:	4619      	mov	r1, r3
 8012b0a:	4610      	mov	r0, r2
 8012b0c:	f000 fc64 	bl	80133d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2201      	movs	r2, #1
 8012b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2201      	movs	r2, #1
 8012b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2201      	movs	r2, #1
 8012b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2201      	movs	r2, #1
 8012b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012b60:	2300      	movs	r3, #0
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3708      	adds	r7, #8
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012b6a:	b480      	push	{r7}
 8012b6c:	b083      	sub	sp, #12
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012b72:	bf00      	nop
 8012b74:	370c      	adds	r7, #12
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr

08012b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b082      	sub	sp, #8
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d101      	bne.n	8012b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e041      	b.n	8012c14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d106      	bne.n	8012baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7f1 fc3f 	bl	8004428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2202      	movs	r2, #2
 8012bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	f000 fc0b 	bl	80133d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2201      	movs	r2, #1
 8012bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2201      	movs	r2, #1
 8012be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2201      	movs	r2, #1
 8012bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b084      	sub	sp, #16
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d109      	bne.n	8012c40 <HAL_TIM_PWM_Start+0x24>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	bf14      	ite	ne
 8012c38:	2301      	movne	r3, #1
 8012c3a:	2300      	moveq	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	e022      	b.n	8012c86 <HAL_TIM_PWM_Start+0x6a>
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	2b04      	cmp	r3, #4
 8012c44:	d109      	bne.n	8012c5a <HAL_TIM_PWM_Start+0x3e>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	bf14      	ite	ne
 8012c52:	2301      	movne	r3, #1
 8012c54:	2300      	moveq	r3, #0
 8012c56:	b2db      	uxtb	r3, r3
 8012c58:	e015      	b.n	8012c86 <HAL_TIM_PWM_Start+0x6a>
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	2b08      	cmp	r3, #8
 8012c5e:	d109      	bne.n	8012c74 <HAL_TIM_PWM_Start+0x58>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	bf14      	ite	ne
 8012c6c:	2301      	movne	r3, #1
 8012c6e:	2300      	moveq	r3, #0
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	e008      	b.n	8012c86 <HAL_TIM_PWM_Start+0x6a>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	bf14      	ite	ne
 8012c80:	2301      	movne	r3, #1
 8012c82:	2300      	moveq	r3, #0
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e07c      	b.n	8012d88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d104      	bne.n	8012c9e <HAL_TIM_PWM_Start+0x82>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2202      	movs	r2, #2
 8012c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c9c:	e013      	b.n	8012cc6 <HAL_TIM_PWM_Start+0xaa>
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	2b04      	cmp	r3, #4
 8012ca2:	d104      	bne.n	8012cae <HAL_TIM_PWM_Start+0x92>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2202      	movs	r2, #2
 8012ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012cac:	e00b      	b.n	8012cc6 <HAL_TIM_PWM_Start+0xaa>
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	2b08      	cmp	r3, #8
 8012cb2:	d104      	bne.n	8012cbe <HAL_TIM_PWM_Start+0xa2>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2202      	movs	r2, #2
 8012cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012cbc:	e003      	b.n	8012cc6 <HAL_TIM_PWM_Start+0xaa>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2202      	movs	r2, #2
 8012cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	6839      	ldr	r1, [r7, #0]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f000 fe6c 	bl	80139ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8012d90 <HAL_TIM_PWM_Start+0x174>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d004      	beq.n	8012ce8 <HAL_TIM_PWM_Start+0xcc>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8012d94 <HAL_TIM_PWM_Start+0x178>)
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	d101      	bne.n	8012cec <HAL_TIM_PWM_Start+0xd0>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e000      	b.n	8012cee <HAL_TIM_PWM_Start+0xd2>
 8012cec:	2300      	movs	r3, #0
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d007      	beq.n	8012d02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012d00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	4a22      	ldr	r2, [pc, #136]	@ (8012d90 <HAL_TIM_PWM_Start+0x174>)
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	d022      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d14:	d01d      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8012d98 <HAL_TIM_PWM_Start+0x17c>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d018      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	4a1d      	ldr	r2, [pc, #116]	@ (8012d9c <HAL_TIM_PWM_Start+0x180>)
 8012d26:	4293      	cmp	r3, r2
 8012d28:	d013      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8012da0 <HAL_TIM_PWM_Start+0x184>)
 8012d30:	4293      	cmp	r3, r2
 8012d32:	d00e      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a16      	ldr	r2, [pc, #88]	@ (8012d94 <HAL_TIM_PWM_Start+0x178>)
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d009      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	4a18      	ldr	r2, [pc, #96]	@ (8012da4 <HAL_TIM_PWM_Start+0x188>)
 8012d44:	4293      	cmp	r3, r2
 8012d46:	d004      	beq.n	8012d52 <HAL_TIM_PWM_Start+0x136>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	4a16      	ldr	r2, [pc, #88]	@ (8012da8 <HAL_TIM_PWM_Start+0x18c>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d111      	bne.n	8012d76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	689b      	ldr	r3, [r3, #8]
 8012d58:	f003 0307 	and.w	r3, r3, #7
 8012d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2b06      	cmp	r3, #6
 8012d62:	d010      	beq.n	8012d86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f042 0201 	orr.w	r2, r2, #1
 8012d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d74:	e007      	b.n	8012d86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	681a      	ldr	r2, [r3, #0]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f042 0201 	orr.w	r2, r2, #1
 8012d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3710      	adds	r7, #16
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	40010000 	.word	0x40010000
 8012d94:	40010400 	.word	0x40010400
 8012d98:	40000400 	.word	0x40000400
 8012d9c:	40000800 	.word	0x40000800
 8012da0:	40000c00 	.word	0x40000c00
 8012da4:	40014000 	.word	0x40014000
 8012da8:	40001800 	.word	0x40001800

08012dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	691b      	ldr	r3, [r3, #16]
 8012dba:	f003 0302 	and.w	r3, r3, #2
 8012dbe:	2b02      	cmp	r3, #2
 8012dc0:	d122      	bne.n	8012e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	f003 0302 	and.w	r3, r3, #2
 8012dcc:	2b02      	cmp	r3, #2
 8012dce:	d11b      	bne.n	8012e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f06f 0202 	mvn.w	r2, #2
 8012dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2201      	movs	r2, #1
 8012dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	699b      	ldr	r3, [r3, #24]
 8012de6:	f003 0303 	and.w	r3, r3, #3
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d003      	beq.n	8012df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f000 fad3 	bl	801339a <HAL_TIM_IC_CaptureCallback>
 8012df4:	e005      	b.n	8012e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f000 fac5 	bl	8013386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 fad6 	bl	80133ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2200      	movs	r2, #0
 8012e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	691b      	ldr	r3, [r3, #16]
 8012e0e:	f003 0304 	and.w	r3, r3, #4
 8012e12:	2b04      	cmp	r3, #4
 8012e14:	d122      	bne.n	8012e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	f003 0304 	and.w	r3, r3, #4
 8012e20:	2b04      	cmp	r3, #4
 8012e22:	d11b      	bne.n	8012e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f06f 0204 	mvn.w	r2, #4
 8012e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2202      	movs	r2, #2
 8012e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	699b      	ldr	r3, [r3, #24]
 8012e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d003      	beq.n	8012e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 faa9 	bl	801339a <HAL_TIM_IC_CaptureCallback>
 8012e48:	e005      	b.n	8012e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f000 fa9b 	bl	8013386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f000 faac 	bl	80133ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	f003 0308 	and.w	r3, r3, #8
 8012e66:	2b08      	cmp	r3, #8
 8012e68:	d122      	bne.n	8012eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	f003 0308 	and.w	r3, r3, #8
 8012e74:	2b08      	cmp	r3, #8
 8012e76:	d11b      	bne.n	8012eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f06f 0208 	mvn.w	r2, #8
 8012e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2204      	movs	r2, #4
 8012e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	69db      	ldr	r3, [r3, #28]
 8012e8e:	f003 0303 	and.w	r3, r3, #3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d003      	beq.n	8012e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f000 fa7f 	bl	801339a <HAL_TIM_IC_CaptureCallback>
 8012e9c:	e005      	b.n	8012eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f000 fa71 	bl	8013386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 fa82 	bl	80133ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	691b      	ldr	r3, [r3, #16]
 8012eb6:	f003 0310 	and.w	r3, r3, #16
 8012eba:	2b10      	cmp	r3, #16
 8012ebc:	d122      	bne.n	8012f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	68db      	ldr	r3, [r3, #12]
 8012ec4:	f003 0310 	and.w	r3, r3, #16
 8012ec8:	2b10      	cmp	r3, #16
 8012eca:	d11b      	bne.n	8012f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f06f 0210 	mvn.w	r2, #16
 8012ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2208      	movs	r2, #8
 8012eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	69db      	ldr	r3, [r3, #28]
 8012ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d003      	beq.n	8012ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 fa55 	bl	801339a <HAL_TIM_IC_CaptureCallback>
 8012ef0:	e005      	b.n	8012efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 fa47 	bl	8013386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 fa58 	bl	80133ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	691b      	ldr	r3, [r3, #16]
 8012f0a:	f003 0301 	and.w	r3, r3, #1
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d10e      	bne.n	8012f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	f003 0301 	and.w	r3, r3, #1
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	d107      	bne.n	8012f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f06f 0201 	mvn.w	r2, #1
 8012f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7f0 fc52 	bl	80037d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	691b      	ldr	r3, [r3, #16]
 8012f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012f3a:	2b80      	cmp	r3, #128	@ 0x80
 8012f3c:	d10e      	bne.n	8012f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	68db      	ldr	r3, [r3, #12]
 8012f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012f48:	2b80      	cmp	r3, #128	@ 0x80
 8012f4a:	d107      	bne.n	8012f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8012f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 fdd4 	bl	8013b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	691b      	ldr	r3, [r3, #16]
 8012f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f66:	2b40      	cmp	r3, #64	@ 0x40
 8012f68:	d10e      	bne.n	8012f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	68db      	ldr	r3, [r3, #12]
 8012f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f74:	2b40      	cmp	r3, #64	@ 0x40
 8012f76:	d107      	bne.n	8012f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 fa1d 	bl	80133c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	f003 0320 	and.w	r3, r3, #32
 8012f92:	2b20      	cmp	r3, #32
 8012f94:	d10e      	bne.n	8012fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	f003 0320 	and.w	r3, r3, #32
 8012fa0:	2b20      	cmp	r3, #32
 8012fa2:	d107      	bne.n	8012fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	f06f 0220 	mvn.w	r2, #32
 8012fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fd9e 	bl	8013af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d101      	bne.n	8012fda <HAL_TIM_OC_ConfigChannel+0x1e>
 8012fd6:	2302      	movs	r3, #2
 8012fd8:	e048      	b.n	801306c <HAL_TIM_OC_ConfigChannel+0xb0>
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b0c      	cmp	r3, #12
 8012fe6:	d839      	bhi.n	801305c <HAL_TIM_OC_ConfigChannel+0xa0>
 8012fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8012ff0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8012fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fee:	bf00      	nop
 8012ff0:	08013025 	.word	0x08013025
 8012ff4:	0801305d 	.word	0x0801305d
 8012ff8:	0801305d 	.word	0x0801305d
 8012ffc:	0801305d 	.word	0x0801305d
 8013000:	08013033 	.word	0x08013033
 8013004:	0801305d 	.word	0x0801305d
 8013008:	0801305d 	.word	0x0801305d
 801300c:	0801305d 	.word	0x0801305d
 8013010:	08013041 	.word	0x08013041
 8013014:	0801305d 	.word	0x0801305d
 8013018:	0801305d 	.word	0x0801305d
 801301c:	0801305d 	.word	0x0801305d
 8013020:	0801304f 	.word	0x0801304f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	4618      	mov	r0, r3
 801302c:	f000 fa74 	bl	8013518 <TIM_OC1_SetConfig>
      break;
 8013030:	e017      	b.n	8013062 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	68b9      	ldr	r1, [r7, #8]
 8013038:	4618      	mov	r0, r3
 801303a:	f000 fadd 	bl	80135f8 <TIM_OC2_SetConfig>
      break;
 801303e:	e010      	b.n	8013062 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68b9      	ldr	r1, [r7, #8]
 8013046:	4618      	mov	r0, r3
 8013048:	f000 fb4c 	bl	80136e4 <TIM_OC3_SetConfig>
      break;
 801304c:	e009      	b.n	8013062 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	68b9      	ldr	r1, [r7, #8]
 8013054:	4618      	mov	r0, r3
 8013056:	f000 fbb9 	bl	80137cc <TIM_OC4_SetConfig>
      break;
 801305a:	e002      	b.n	8013062 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801305c:	2301      	movs	r3, #1
 801305e:	75fb      	strb	r3, [r7, #23]
      break;
 8013060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2200      	movs	r2, #0
 8013066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801306a:	7dfb      	ldrb	r3, [r7, #23]
}
 801306c:	4618      	mov	r0, r3
 801306e:	3718      	adds	r7, #24
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b086      	sub	sp, #24
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013080:	2300      	movs	r3, #0
 8013082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801308a:	2b01      	cmp	r3, #1
 801308c:	d101      	bne.n	8013092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801308e:	2302      	movs	r3, #2
 8013090:	e0ae      	b.n	80131f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2201      	movs	r2, #1
 8013096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2b0c      	cmp	r3, #12
 801309e:	f200 809f 	bhi.w	80131e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80130a2:	a201      	add	r2, pc, #4	@ (adr r2, 80130a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80130a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a8:	080130dd 	.word	0x080130dd
 80130ac:	080131e1 	.word	0x080131e1
 80130b0:	080131e1 	.word	0x080131e1
 80130b4:	080131e1 	.word	0x080131e1
 80130b8:	0801311d 	.word	0x0801311d
 80130bc:	080131e1 	.word	0x080131e1
 80130c0:	080131e1 	.word	0x080131e1
 80130c4:	080131e1 	.word	0x080131e1
 80130c8:	0801315f 	.word	0x0801315f
 80130cc:	080131e1 	.word	0x080131e1
 80130d0:	080131e1 	.word	0x080131e1
 80130d4:	080131e1 	.word	0x080131e1
 80130d8:	0801319f 	.word	0x0801319f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	68b9      	ldr	r1, [r7, #8]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f000 fa18 	bl	8013518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	699a      	ldr	r2, [r3, #24]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f042 0208 	orr.w	r2, r2, #8
 80130f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	699a      	ldr	r2, [r3, #24]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f022 0204 	bic.w	r2, r2, #4
 8013106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	6999      	ldr	r1, [r3, #24]
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	691a      	ldr	r2, [r3, #16]
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	430a      	orrs	r2, r1
 8013118:	619a      	str	r2, [r3, #24]
      break;
 801311a:	e064      	b.n	80131e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68b9      	ldr	r1, [r7, #8]
 8013122:	4618      	mov	r0, r3
 8013124:	f000 fa68 	bl	80135f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	699a      	ldr	r2, [r3, #24]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	699a      	ldr	r2, [r3, #24]
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6999      	ldr	r1, [r3, #24]
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	691b      	ldr	r3, [r3, #16]
 8013152:	021a      	lsls	r2, r3, #8
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	430a      	orrs	r2, r1
 801315a:	619a      	str	r2, [r3, #24]
      break;
 801315c:	e043      	b.n	80131e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	68b9      	ldr	r1, [r7, #8]
 8013164:	4618      	mov	r0, r3
 8013166:	f000 fabd 	bl	80136e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	69da      	ldr	r2, [r3, #28]
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f042 0208 	orr.w	r2, r2, #8
 8013178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	69da      	ldr	r2, [r3, #28]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f022 0204 	bic.w	r2, r2, #4
 8013188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	69d9      	ldr	r1, [r3, #28]
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	691a      	ldr	r2, [r3, #16]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	430a      	orrs	r2, r1
 801319a:	61da      	str	r2, [r3, #28]
      break;
 801319c:	e023      	b.n	80131e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	68b9      	ldr	r1, [r7, #8]
 80131a4:	4618      	mov	r0, r3
 80131a6:	f000 fb11 	bl	80137cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	69da      	ldr	r2, [r3, #28]
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80131b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	69da      	ldr	r2, [r3, #28]
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80131c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	69d9      	ldr	r1, [r3, #28]
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	021a      	lsls	r2, r3, #8
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	430a      	orrs	r2, r1
 80131dc:	61da      	str	r2, [r3, #28]
      break;
 80131de:	e002      	b.n	80131e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80131e0:	2301      	movs	r3, #1
 80131e2:	75fb      	strb	r3, [r7, #23]
      break;
 80131e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2200      	movs	r2, #0
 80131ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80131ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	3718      	adds	r7, #24
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013202:	2300      	movs	r3, #0
 8013204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801320c:	2b01      	cmp	r3, #1
 801320e:	d101      	bne.n	8013214 <HAL_TIM_ConfigClockSource+0x1c>
 8013210:	2302      	movs	r3, #2
 8013212:	e0b4      	b.n	801337e <HAL_TIM_ConfigClockSource+0x186>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2202      	movs	r2, #2
 8013220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801323a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	68ba      	ldr	r2, [r7, #8]
 8013242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801324c:	d03e      	beq.n	80132cc <HAL_TIM_ConfigClockSource+0xd4>
 801324e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013252:	f200 8087 	bhi.w	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 8013256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801325a:	f000 8086 	beq.w	801336a <HAL_TIM_ConfigClockSource+0x172>
 801325e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013262:	d87f      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 8013264:	2b70      	cmp	r3, #112	@ 0x70
 8013266:	d01a      	beq.n	801329e <HAL_TIM_ConfigClockSource+0xa6>
 8013268:	2b70      	cmp	r3, #112	@ 0x70
 801326a:	d87b      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 801326c:	2b60      	cmp	r3, #96	@ 0x60
 801326e:	d050      	beq.n	8013312 <HAL_TIM_ConfigClockSource+0x11a>
 8013270:	2b60      	cmp	r3, #96	@ 0x60
 8013272:	d877      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 8013274:	2b50      	cmp	r3, #80	@ 0x50
 8013276:	d03c      	beq.n	80132f2 <HAL_TIM_ConfigClockSource+0xfa>
 8013278:	2b50      	cmp	r3, #80	@ 0x50
 801327a:	d873      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 801327c:	2b40      	cmp	r3, #64	@ 0x40
 801327e:	d058      	beq.n	8013332 <HAL_TIM_ConfigClockSource+0x13a>
 8013280:	2b40      	cmp	r3, #64	@ 0x40
 8013282:	d86f      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 8013284:	2b30      	cmp	r3, #48	@ 0x30
 8013286:	d064      	beq.n	8013352 <HAL_TIM_ConfigClockSource+0x15a>
 8013288:	2b30      	cmp	r3, #48	@ 0x30
 801328a:	d86b      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 801328c:	2b20      	cmp	r3, #32
 801328e:	d060      	beq.n	8013352 <HAL_TIM_ConfigClockSource+0x15a>
 8013290:	2b20      	cmp	r3, #32
 8013292:	d867      	bhi.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
 8013294:	2b00      	cmp	r3, #0
 8013296:	d05c      	beq.n	8013352 <HAL_TIM_ConfigClockSource+0x15a>
 8013298:	2b10      	cmp	r3, #16
 801329a:	d05a      	beq.n	8013352 <HAL_TIM_ConfigClockSource+0x15a>
 801329c:	e062      	b.n	8013364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6818      	ldr	r0, [r3, #0]
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	6899      	ldr	r1, [r3, #8]
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	685a      	ldr	r2, [r3, #4]
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	f000 fb5d 	bl	801396c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	689b      	ldr	r3, [r3, #8]
 80132b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80132c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	68ba      	ldr	r2, [r7, #8]
 80132c8:	609a      	str	r2, [r3, #8]
      break;
 80132ca:	e04f      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6818      	ldr	r0, [r3, #0]
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	6899      	ldr	r1, [r3, #8]
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	685a      	ldr	r2, [r3, #4]
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	f000 fb46 	bl	801396c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	689a      	ldr	r2, [r3, #8]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80132ee:	609a      	str	r2, [r3, #8]
      break;
 80132f0:	e03c      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	6818      	ldr	r0, [r3, #0]
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	6859      	ldr	r1, [r3, #4]
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	461a      	mov	r2, r3
 8013300:	f000 faba 	bl	8013878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2150      	movs	r1, #80	@ 0x50
 801330a:	4618      	mov	r0, r3
 801330c:	f000 fb13 	bl	8013936 <TIM_ITRx_SetConfig>
      break;
 8013310:	e02c      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6818      	ldr	r0, [r3, #0]
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	6859      	ldr	r1, [r3, #4]
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	68db      	ldr	r3, [r3, #12]
 801331e:	461a      	mov	r2, r3
 8013320:	f000 fad9 	bl	80138d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2160      	movs	r1, #96	@ 0x60
 801332a:	4618      	mov	r0, r3
 801332c:	f000 fb03 	bl	8013936 <TIM_ITRx_SetConfig>
      break;
 8013330:	e01c      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	6818      	ldr	r0, [r3, #0]
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	6859      	ldr	r1, [r3, #4]
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	68db      	ldr	r3, [r3, #12]
 801333e:	461a      	mov	r2, r3
 8013340:	f000 fa9a 	bl	8013878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	2140      	movs	r1, #64	@ 0x40
 801334a:	4618      	mov	r0, r3
 801334c:	f000 faf3 	bl	8013936 <TIM_ITRx_SetConfig>
      break;
 8013350:	e00c      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4619      	mov	r1, r3
 801335c:	4610      	mov	r0, r2
 801335e:	f000 faea 	bl	8013936 <TIM_ITRx_SetConfig>
      break;
 8013362:	e003      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8013364:	2301      	movs	r3, #1
 8013366:	73fb      	strb	r3, [r7, #15]
      break;
 8013368:	e000      	b.n	801336c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801336a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2201      	movs	r2, #1
 8013370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801337c:	7bfb      	ldrb	r3, [r7, #15]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3710      	adds	r7, #16
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013386:	b480      	push	{r7}
 8013388:	b083      	sub	sp, #12
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801338e:	bf00      	nop
 8013390:	370c      	adds	r7, #12
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr

0801339a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801339a:	b480      	push	{r7}
 801339c:	b083      	sub	sp, #12
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80133a2:	bf00      	nop
 80133a4:	370c      	adds	r7, #12
 80133a6:	46bd      	mov	sp, r7
 80133a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ac:	4770      	bx	lr

080133ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80133ae:	b480      	push	{r7}
 80133b0:	b083      	sub	sp, #12
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80133b6:	bf00      	nop
 80133b8:	370c      	adds	r7, #12
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr

080133c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80133c2:	b480      	push	{r7}
 80133c4:	b083      	sub	sp, #12
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80133ca:	bf00      	nop
 80133cc:	370c      	adds	r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
	...

080133d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80133d8:	b480      	push	{r7}
 80133da:	b085      	sub	sp, #20
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4a40      	ldr	r2, [pc, #256]	@ (80134ec <TIM_Base_SetConfig+0x114>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d013      	beq.n	8013418 <TIM_Base_SetConfig+0x40>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133f6:	d00f      	beq.n	8013418 <TIM_Base_SetConfig+0x40>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4a3d      	ldr	r2, [pc, #244]	@ (80134f0 <TIM_Base_SetConfig+0x118>)
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d00b      	beq.n	8013418 <TIM_Base_SetConfig+0x40>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	4a3c      	ldr	r2, [pc, #240]	@ (80134f4 <TIM_Base_SetConfig+0x11c>)
 8013404:	4293      	cmp	r3, r2
 8013406:	d007      	beq.n	8013418 <TIM_Base_SetConfig+0x40>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4a3b      	ldr	r2, [pc, #236]	@ (80134f8 <TIM_Base_SetConfig+0x120>)
 801340c:	4293      	cmp	r3, r2
 801340e:	d003      	beq.n	8013418 <TIM_Base_SetConfig+0x40>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	4a3a      	ldr	r2, [pc, #232]	@ (80134fc <TIM_Base_SetConfig+0x124>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d108      	bne.n	801342a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801341e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	68fa      	ldr	r2, [r7, #12]
 8013426:	4313      	orrs	r3, r2
 8013428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4a2f      	ldr	r2, [pc, #188]	@ (80134ec <TIM_Base_SetConfig+0x114>)
 801342e:	4293      	cmp	r3, r2
 8013430:	d02b      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013438:	d027      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4a2c      	ldr	r2, [pc, #176]	@ (80134f0 <TIM_Base_SetConfig+0x118>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d023      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4a2b      	ldr	r2, [pc, #172]	@ (80134f4 <TIM_Base_SetConfig+0x11c>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d01f      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4a2a      	ldr	r2, [pc, #168]	@ (80134f8 <TIM_Base_SetConfig+0x120>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d01b      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4a29      	ldr	r2, [pc, #164]	@ (80134fc <TIM_Base_SetConfig+0x124>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d017      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	4a28      	ldr	r2, [pc, #160]	@ (8013500 <TIM_Base_SetConfig+0x128>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d013      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4a27      	ldr	r2, [pc, #156]	@ (8013504 <TIM_Base_SetConfig+0x12c>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d00f      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4a26      	ldr	r2, [pc, #152]	@ (8013508 <TIM_Base_SetConfig+0x130>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d00b      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4a25      	ldr	r2, [pc, #148]	@ (801350c <TIM_Base_SetConfig+0x134>)
 8013476:	4293      	cmp	r3, r2
 8013478:	d007      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	4a24      	ldr	r2, [pc, #144]	@ (8013510 <TIM_Base_SetConfig+0x138>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d003      	beq.n	801348a <TIM_Base_SetConfig+0xb2>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4a23      	ldr	r2, [pc, #140]	@ (8013514 <TIM_Base_SetConfig+0x13c>)
 8013486:	4293      	cmp	r3, r2
 8013488:	d108      	bne.n	801349c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	4313      	orrs	r3, r2
 801349a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	695b      	ldr	r3, [r3, #20]
 80134a6:	4313      	orrs	r3, r2
 80134a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	68fa      	ldr	r2, [r7, #12]
 80134ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	689a      	ldr	r2, [r3, #8]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4a0a      	ldr	r2, [pc, #40]	@ (80134ec <TIM_Base_SetConfig+0x114>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d003      	beq.n	80134d0 <TIM_Base_SetConfig+0xf8>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4a0c      	ldr	r2, [pc, #48]	@ (80134fc <TIM_Base_SetConfig+0x124>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d103      	bne.n	80134d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	691a      	ldr	r2, [r3, #16]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2201      	movs	r2, #1
 80134dc:	615a      	str	r2, [r3, #20]
}
 80134de:	bf00      	nop
 80134e0:	3714      	adds	r7, #20
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr
 80134ea:	bf00      	nop
 80134ec:	40010000 	.word	0x40010000
 80134f0:	40000400 	.word	0x40000400
 80134f4:	40000800 	.word	0x40000800
 80134f8:	40000c00 	.word	0x40000c00
 80134fc:	40010400 	.word	0x40010400
 8013500:	40014000 	.word	0x40014000
 8013504:	40014400 	.word	0x40014400
 8013508:	40014800 	.word	0x40014800
 801350c:	40001800 	.word	0x40001800
 8013510:	40001c00 	.word	0x40001c00
 8013514:	40002000 	.word	0x40002000

08013518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013518:	b480      	push	{r7}
 801351a:	b087      	sub	sp, #28
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6a1b      	ldr	r3, [r3, #32]
 8013526:	f023 0201 	bic.w	r2, r3, #1
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6a1b      	ldr	r3, [r3, #32]
 8013532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	699b      	ldr	r3, [r3, #24]
 801353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f023 0303 	bic.w	r3, r3, #3
 801354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	68fa      	ldr	r2, [r7, #12]
 8013556:	4313      	orrs	r3, r2
 8013558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	f023 0302 	bic.w	r3, r3, #2
 8013560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	689b      	ldr	r3, [r3, #8]
 8013566:	697a      	ldr	r2, [r7, #20]
 8013568:	4313      	orrs	r3, r2
 801356a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4a20      	ldr	r2, [pc, #128]	@ (80135f0 <TIM_OC1_SetConfig+0xd8>)
 8013570:	4293      	cmp	r3, r2
 8013572:	d003      	beq.n	801357c <TIM_OC1_SetConfig+0x64>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4a1f      	ldr	r2, [pc, #124]	@ (80135f4 <TIM_OC1_SetConfig+0xdc>)
 8013578:	4293      	cmp	r3, r2
 801357a:	d10c      	bne.n	8013596 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	f023 0308 	bic.w	r3, r3, #8
 8013582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	697a      	ldr	r2, [r7, #20]
 801358a:	4313      	orrs	r3, r2
 801358c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	f023 0304 	bic.w	r3, r3, #4
 8013594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	4a15      	ldr	r2, [pc, #84]	@ (80135f0 <TIM_OC1_SetConfig+0xd8>)
 801359a:	4293      	cmp	r3, r2
 801359c:	d003      	beq.n	80135a6 <TIM_OC1_SetConfig+0x8e>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	4a14      	ldr	r2, [pc, #80]	@ (80135f4 <TIM_OC1_SetConfig+0xdc>)
 80135a2:	4293      	cmp	r3, r2
 80135a4:	d111      	bne.n	80135ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80135ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80135b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	695b      	ldr	r3, [r3, #20]
 80135ba:	693a      	ldr	r2, [r7, #16]
 80135bc:	4313      	orrs	r3, r2
 80135be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	699b      	ldr	r3, [r3, #24]
 80135c4:	693a      	ldr	r2, [r7, #16]
 80135c6:	4313      	orrs	r3, r2
 80135c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	693a      	ldr	r2, [r7, #16]
 80135ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	685a      	ldr	r2, [r3, #4]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	697a      	ldr	r2, [r7, #20]
 80135e2:	621a      	str	r2, [r3, #32]
}
 80135e4:	bf00      	nop
 80135e6:	371c      	adds	r7, #28
 80135e8:	46bd      	mov	sp, r7
 80135ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ee:	4770      	bx	lr
 80135f0:	40010000 	.word	0x40010000
 80135f4:	40010400 	.word	0x40010400

080135f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b087      	sub	sp, #28
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a1b      	ldr	r3, [r3, #32]
 8013606:	f023 0210 	bic.w	r2, r3, #16
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6a1b      	ldr	r3, [r3, #32]
 8013612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	699b      	ldr	r3, [r3, #24]
 801361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801362e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	021b      	lsls	r3, r3, #8
 8013636:	68fa      	ldr	r2, [r7, #12]
 8013638:	4313      	orrs	r3, r2
 801363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	f023 0320 	bic.w	r3, r3, #32
 8013642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	689b      	ldr	r3, [r3, #8]
 8013648:	011b      	lsls	r3, r3, #4
 801364a:	697a      	ldr	r2, [r7, #20]
 801364c:	4313      	orrs	r3, r2
 801364e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4a22      	ldr	r2, [pc, #136]	@ (80136dc <TIM_OC2_SetConfig+0xe4>)
 8013654:	4293      	cmp	r3, r2
 8013656:	d003      	beq.n	8013660 <TIM_OC2_SetConfig+0x68>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	4a21      	ldr	r2, [pc, #132]	@ (80136e0 <TIM_OC2_SetConfig+0xe8>)
 801365c:	4293      	cmp	r3, r2
 801365e:	d10d      	bne.n	801367c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	011b      	lsls	r3, r3, #4
 801366e:	697a      	ldr	r2, [r7, #20]
 8013670:	4313      	orrs	r3, r2
 8013672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801367a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	4a17      	ldr	r2, [pc, #92]	@ (80136dc <TIM_OC2_SetConfig+0xe4>)
 8013680:	4293      	cmp	r3, r2
 8013682:	d003      	beq.n	801368c <TIM_OC2_SetConfig+0x94>
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	4a16      	ldr	r2, [pc, #88]	@ (80136e0 <TIM_OC2_SetConfig+0xe8>)
 8013688:	4293      	cmp	r3, r2
 801368a:	d113      	bne.n	80136b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801369a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	695b      	ldr	r3, [r3, #20]
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	693a      	ldr	r2, [r7, #16]
 80136a4:	4313      	orrs	r3, r2
 80136a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	699b      	ldr	r3, [r3, #24]
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	693a      	ldr	r2, [r7, #16]
 80136b0:	4313      	orrs	r3, r2
 80136b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	693a      	ldr	r2, [r7, #16]
 80136b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	68fa      	ldr	r2, [r7, #12]
 80136be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	685a      	ldr	r2, [r3, #4]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	697a      	ldr	r2, [r7, #20]
 80136cc:	621a      	str	r2, [r3, #32]
}
 80136ce:	bf00      	nop
 80136d0:	371c      	adds	r7, #28
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop
 80136dc:	40010000 	.word	0x40010000
 80136e0:	40010400 	.word	0x40010400

080136e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b087      	sub	sp, #28
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6a1b      	ldr	r3, [r3, #32]
 80136f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6a1b      	ldr	r3, [r3, #32]
 80136fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	69db      	ldr	r3, [r3, #28]
 801370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f023 0303 	bic.w	r3, r3, #3
 801371a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	4313      	orrs	r3, r2
 8013724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801372c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	021b      	lsls	r3, r3, #8
 8013734:	697a      	ldr	r2, [r7, #20]
 8013736:	4313      	orrs	r3, r2
 8013738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	4a21      	ldr	r2, [pc, #132]	@ (80137c4 <TIM_OC3_SetConfig+0xe0>)
 801373e:	4293      	cmp	r3, r2
 8013740:	d003      	beq.n	801374a <TIM_OC3_SetConfig+0x66>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4a20      	ldr	r2, [pc, #128]	@ (80137c8 <TIM_OC3_SetConfig+0xe4>)
 8013746:	4293      	cmp	r3, r2
 8013748:	d10d      	bne.n	8013766 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	021b      	lsls	r3, r3, #8
 8013758:	697a      	ldr	r2, [r7, #20]
 801375a:	4313      	orrs	r3, r2
 801375c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	4a16      	ldr	r2, [pc, #88]	@ (80137c4 <TIM_OC3_SetConfig+0xe0>)
 801376a:	4293      	cmp	r3, r2
 801376c:	d003      	beq.n	8013776 <TIM_OC3_SetConfig+0x92>
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	4a15      	ldr	r2, [pc, #84]	@ (80137c8 <TIM_OC3_SetConfig+0xe4>)
 8013772:	4293      	cmp	r3, r2
 8013774:	d113      	bne.n	801379e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801377c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	695b      	ldr	r3, [r3, #20]
 801378a:	011b      	lsls	r3, r3, #4
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	4313      	orrs	r3, r2
 8013790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	699b      	ldr	r3, [r3, #24]
 8013796:	011b      	lsls	r3, r3, #4
 8013798:	693a      	ldr	r2, [r7, #16]
 801379a:	4313      	orrs	r3, r2
 801379c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	693a      	ldr	r2, [r7, #16]
 80137a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68fa      	ldr	r2, [r7, #12]
 80137a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	685a      	ldr	r2, [r3, #4]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	621a      	str	r2, [r3, #32]
}
 80137b8:	bf00      	nop
 80137ba:	371c      	adds	r7, #28
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	40010000 	.word	0x40010000
 80137c8:	40010400 	.word	0x40010400

080137cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80137cc:	b480      	push	{r7}
 80137ce:	b087      	sub	sp, #28
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a1b      	ldr	r3, [r3, #32]
 80137da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6a1b      	ldr	r3, [r3, #32]
 80137e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	685b      	ldr	r3, [r3, #4]
 80137ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	69db      	ldr	r3, [r3, #28]
 80137f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80137fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	021b      	lsls	r3, r3, #8
 801380a:	68fa      	ldr	r2, [r7, #12]
 801380c:	4313      	orrs	r3, r2
 801380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	031b      	lsls	r3, r3, #12
 801381e:	693a      	ldr	r2, [r7, #16]
 8013820:	4313      	orrs	r3, r2
 8013822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	4a12      	ldr	r2, [pc, #72]	@ (8013870 <TIM_OC4_SetConfig+0xa4>)
 8013828:	4293      	cmp	r3, r2
 801382a:	d003      	beq.n	8013834 <TIM_OC4_SetConfig+0x68>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	4a11      	ldr	r2, [pc, #68]	@ (8013874 <TIM_OC4_SetConfig+0xa8>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d109      	bne.n	8013848 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801383a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	019b      	lsls	r3, r3, #6
 8013842:	697a      	ldr	r2, [r7, #20]
 8013844:	4313      	orrs	r3, r2
 8013846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	697a      	ldr	r2, [r7, #20]
 801384c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	685a      	ldr	r2, [r3, #4]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	693a      	ldr	r2, [r7, #16]
 8013860:	621a      	str	r2, [r3, #32]
}
 8013862:	bf00      	nop
 8013864:	371c      	adds	r7, #28
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr
 801386e:	bf00      	nop
 8013870:	40010000 	.word	0x40010000
 8013874:	40010400 	.word	0x40010400

08013878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013878:	b480      	push	{r7}
 801387a:	b087      	sub	sp, #28
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	6a1b      	ldr	r3, [r3, #32]
 8013888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	6a1b      	ldr	r3, [r3, #32]
 801388e:	f023 0201 	bic.w	r2, r3, #1
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	699b      	ldr	r3, [r3, #24]
 801389a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80138a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	011b      	lsls	r3, r3, #4
 80138a8:	693a      	ldr	r2, [r7, #16]
 80138aa:	4313      	orrs	r3, r2
 80138ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	f023 030a 	bic.w	r3, r3, #10
 80138b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80138b6:	697a      	ldr	r2, [r7, #20]
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	4313      	orrs	r3, r2
 80138bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	693a      	ldr	r2, [r7, #16]
 80138c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	697a      	ldr	r2, [r7, #20]
 80138c8:	621a      	str	r2, [r3, #32]
}
 80138ca:	bf00      	nop
 80138cc:	371c      	adds	r7, #28
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80138d6:	b480      	push	{r7}
 80138d8:	b087      	sub	sp, #28
 80138da:	af00      	add	r7, sp, #0
 80138dc:	60f8      	str	r0, [r7, #12]
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	6a1b      	ldr	r3, [r3, #32]
 80138e6:	f023 0210 	bic.w	r2, r3, #16
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	699b      	ldr	r3, [r3, #24]
 80138f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	6a1b      	ldr	r3, [r3, #32]
 80138f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	031b      	lsls	r3, r3, #12
 8013906:	697a      	ldr	r2, [r7, #20]
 8013908:	4313      	orrs	r3, r2
 801390a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	011b      	lsls	r3, r3, #4
 8013918:	693a      	ldr	r2, [r7, #16]
 801391a:	4313      	orrs	r3, r2
 801391c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	697a      	ldr	r2, [r7, #20]
 8013922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	693a      	ldr	r2, [r7, #16]
 8013928:	621a      	str	r2, [r3, #32]
}
 801392a:	bf00      	nop
 801392c:	371c      	adds	r7, #28
 801392e:	46bd      	mov	sp, r7
 8013930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013934:	4770      	bx	lr

08013936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013936:	b480      	push	{r7}
 8013938:	b085      	sub	sp, #20
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
 801393e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801394c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801394e:	683a      	ldr	r2, [r7, #0]
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	4313      	orrs	r3, r2
 8013954:	f043 0307 	orr.w	r3, r3, #7
 8013958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	68fa      	ldr	r2, [r7, #12]
 801395e:	609a      	str	r2, [r3, #8]
}
 8013960:	bf00      	nop
 8013962:	3714      	adds	r7, #20
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801396c:	b480      	push	{r7}
 801396e:	b087      	sub	sp, #28
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
 8013978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	689b      	ldr	r3, [r3, #8]
 801397e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	021a      	lsls	r2, r3, #8
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	431a      	orrs	r2, r3
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	4313      	orrs	r3, r2
 8013994:	697a      	ldr	r2, [r7, #20]
 8013996:	4313      	orrs	r3, r2
 8013998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	697a      	ldr	r2, [r7, #20]
 801399e:	609a      	str	r2, [r3, #8]
}
 80139a0:	bf00      	nop
 80139a2:	371c      	adds	r7, #28
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b087      	sub	sp, #28
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	f003 031f 	and.w	r3, r3, #31
 80139be:	2201      	movs	r2, #1
 80139c0:	fa02 f303 	lsl.w	r3, r2, r3
 80139c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	6a1a      	ldr	r2, [r3, #32]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	43db      	mvns	r3, r3
 80139ce:	401a      	ands	r2, r3
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	6a1a      	ldr	r2, [r3, #32]
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	f003 031f 	and.w	r3, r3, #31
 80139de:	6879      	ldr	r1, [r7, #4]
 80139e0:	fa01 f303 	lsl.w	r3, r1, r3
 80139e4:	431a      	orrs	r2, r3
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	621a      	str	r2, [r3, #32]
}
 80139ea:	bf00      	nop
 80139ec:	371c      	adds	r7, #28
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr
	...

080139f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d101      	bne.n	8013a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	e05a      	b.n	8013ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2201      	movs	r2, #1
 8013a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2202      	movs	r2, #2
 8013a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	689b      	ldr	r3, [r3, #8]
 8013a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	68fa      	ldr	r2, [r7, #12]
 8013a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	4a21      	ldr	r2, [pc, #132]	@ (8013ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d022      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a5c:	d01d      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4a1d      	ldr	r2, [pc, #116]	@ (8013ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d018      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8013adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d013      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4a1a      	ldr	r2, [pc, #104]	@ (8013ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d00e      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4a18      	ldr	r2, [pc, #96]	@ (8013ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d009      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a17      	ldr	r2, [pc, #92]	@ (8013ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	d004      	beq.n	8013a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	4a15      	ldr	r2, [pc, #84]	@ (8013aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013a96:	4293      	cmp	r3, r2
 8013a98:	d10c      	bne.n	8013ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	68ba      	ldr	r2, [r7, #8]
 8013ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2201      	movs	r2, #1
 8013ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013ac4:	2300      	movs	r3, #0
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3714      	adds	r7, #20
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr
 8013ad2:	bf00      	nop
 8013ad4:	40010000 	.word	0x40010000
 8013ad8:	40000400 	.word	0x40000400
 8013adc:	40000800 	.word	0x40000800
 8013ae0:	40000c00 	.word	0x40000c00
 8013ae4:	40010400 	.word	0x40010400
 8013ae8:	40014000 	.word	0x40014000
 8013aec:	40001800 	.word	0x40001800

08013af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013af8:	bf00      	nop
 8013afa:	370c      	adds	r7, #12
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013b0c:	bf00      	nop
 8013b0e:	370c      	adds	r7, #12
 8013b10:	46bd      	mov	sp, r7
 8013b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b16:	4770      	bx	lr

08013b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d101      	bne.n	8013b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013b26:	2301      	movs	r3, #1
 8013b28:	e03f      	b.n	8013baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d106      	bne.n	8013b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f7f0 fdb6 	bl	80046b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2224      	movs	r2, #36	@ 0x24
 8013b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	68da      	ldr	r2, [r3, #12]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 fe51 	bl	8014804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	691a      	ldr	r2, [r3, #16]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	695a      	ldr	r2, [r3, #20]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	68da      	ldr	r2, [r3, #12]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2200      	movs	r2, #0
 8013b96:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2220      	movs	r2, #32
 8013b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2220      	movs	r2, #32
 8013ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
	...

08013bb4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b08c      	sub	sp, #48	@ 0x30
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	60f8      	str	r0, [r7, #12]
 8013bbc:	60b9      	str	r1, [r7, #8]
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013bc8:	b2db      	uxtb	r3, r3
 8013bca:	2b20      	cmp	r3, #32
 8013bcc:	d165      	bne.n	8013c9a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <HAL_UART_Transmit_DMA+0x26>
 8013bd4:	88fb      	ldrh	r3, [r7, #6]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e05e      	b.n	8013c9c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d101      	bne.n	8013bec <HAL_UART_Transmit_DMA+0x38>
 8013be8:	2302      	movs	r3, #2
 8013bea:	e057      	b.n	8013c9c <HAL_UART_Transmit_DMA+0xe8>
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8013bf4:	68ba      	ldr	r2, [r7, #8]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	88fa      	ldrh	r2, [r7, #6]
 8013bfe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	88fa      	ldrh	r2, [r7, #6]
 8013c04:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2221      	movs	r2, #33	@ 0x21
 8013c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c18:	4a22      	ldr	r2, [pc, #136]	@ (8013ca4 <HAL_UART_Transmit_DMA+0xf0>)
 8013c1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c20:	4a21      	ldr	r2, [pc, #132]	@ (8013ca8 <HAL_UART_Transmit_DMA+0xf4>)
 8013c22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c28:	4a20      	ldr	r2, [pc, #128]	@ (8013cac <HAL_UART_Transmit_DMA+0xf8>)
 8013c2a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c30:	2200      	movs	r2, #0
 8013c32:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8013c34:	f107 0308 	add.w	r3, r7, #8
 8013c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c40:	6819      	ldr	r1, [r3, #0]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	3304      	adds	r3, #4
 8013c48:	461a      	mov	r2, r3
 8013c4a:	88fb      	ldrh	r3, [r7, #6]
 8013c4c:	f7fa f828 	bl	800dca0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8013c58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	3314      	adds	r3, #20
 8013c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	e853 3f00 	ldrex	r3, [r3]
 8013c70:	617b      	str	r3, [r7, #20]
   return(result);
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	3314      	adds	r3, #20
 8013c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c82:	627a      	str	r2, [r7, #36]	@ 0x24
 8013c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c86:	6a39      	ldr	r1, [r7, #32]
 8013c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c8a:	e841 2300 	strex	r3, r2, [r1]
 8013c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1e5      	bne.n	8013c62 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8013c96:	2300      	movs	r3, #0
 8013c98:	e000      	b.n	8013c9c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8013c9a:	2302      	movs	r3, #2
  }
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3730      	adds	r7, #48	@ 0x30
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	08014335 	.word	0x08014335
 8013ca8:	080143cf 	.word	0x080143cf
 8013cac:	080143eb 	.word	0x080143eb

08013cb0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b090      	sub	sp, #64	@ 0x40
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	695b      	ldr	r3, [r3, #20]
 8013cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013cc6:	2b80      	cmp	r3, #128	@ 0x80
 8013cc8:	bf0c      	ite	eq
 8013cca:	2301      	moveq	r3, #1
 8013ccc:	2300      	movne	r3, #0
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013cd8:	b2db      	uxtb	r3, r3
 8013cda:	2b21      	cmp	r3, #33	@ 0x21
 8013cdc:	d128      	bne.n	8013d30 <HAL_UART_DMAStop+0x80>
 8013cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d025      	beq.n	8013d30 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	3314      	adds	r3, #20
 8013cea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cee:	e853 3f00 	ldrex	r3, [r3]
 8013cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8013cf4:	6a3b      	ldr	r3, [r7, #32]
 8013cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	3314      	adds	r3, #20
 8013d02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d04:	633a      	str	r2, [r7, #48]	@ 0x30
 8013d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d0c:	e841 2300 	strex	r3, r2, [r1]
 8013d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d1e5      	bne.n	8013ce4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d004      	beq.n	8013d2a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7fa f813 	bl	800dd50 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 fba7 	bl	801447e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	695b      	ldr	r3, [r3, #20]
 8013d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d3a:	2b40      	cmp	r3, #64	@ 0x40
 8013d3c:	bf0c      	ite	eq
 8013d3e:	2301      	moveq	r3, #1
 8013d40:	2300      	movne	r3, #0
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013d4c:	b2db      	uxtb	r3, r3
 8013d4e:	2b22      	cmp	r3, #34	@ 0x22
 8013d50:	d128      	bne.n	8013da4 <HAL_UART_DMAStop+0xf4>
 8013d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d025      	beq.n	8013da4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	3314      	adds	r3, #20
 8013d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	e853 3f00 	ldrex	r3, [r3]
 8013d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	3314      	adds	r3, #20
 8013d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d78:	61fa      	str	r2, [r7, #28]
 8013d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d7c:	69b9      	ldr	r1, [r7, #24]
 8013d7e:	69fa      	ldr	r2, [r7, #28]
 8013d80:	e841 2300 	strex	r3, r2, [r1]
 8013d84:	617b      	str	r3, [r7, #20]
   return(result);
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d1e5      	bne.n	8013d58 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d004      	beq.n	8013d9e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7f9 ffd9 	bl	800dd50 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f000 fb95 	bl	80144ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3740      	adds	r7, #64	@ 0x40
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
	...

08013db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b0ba      	sub	sp, #232	@ 0xe8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	695b      	ldr	r3, [r3, #20]
 8013dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013de6:	f003 030f 	and.w	r3, r3, #15
 8013dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8013dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d10f      	bne.n	8013e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013dfa:	f003 0320 	and.w	r3, r3, #32
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d009      	beq.n	8013e16 <HAL_UART_IRQHandler+0x66>
 8013e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013e06:	f003 0320 	and.w	r3, r3, #32
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d003      	beq.n	8013e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f000 fc3c 	bl	801468c <UART_Receive_IT>
      return;
 8013e14:	e256      	b.n	80142c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8013e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 80de 	beq.w	8013fdc <HAL_UART_IRQHandler+0x22c>
 8013e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013e24:	f003 0301 	and.w	r3, r3, #1
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d106      	bne.n	8013e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013e30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f000 80d1 	beq.w	8013fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013e3e:	f003 0301 	and.w	r3, r3, #1
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d00b      	beq.n	8013e5e <HAL_UART_IRQHandler+0xae>
 8013e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d005      	beq.n	8013e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e56:	f043 0201 	orr.w	r2, r3, #1
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013e62:	f003 0304 	and.w	r3, r3, #4
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d00b      	beq.n	8013e82 <HAL_UART_IRQHandler+0xd2>
 8013e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013e6e:	f003 0301 	and.w	r3, r3, #1
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d005      	beq.n	8013e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e7a:	f043 0202 	orr.w	r2, r3, #2
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013e86:	f003 0302 	and.w	r3, r3, #2
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d00b      	beq.n	8013ea6 <HAL_UART_IRQHandler+0xf6>
 8013e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013e92:	f003 0301 	and.w	r3, r3, #1
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d005      	beq.n	8013ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e9e:	f043 0204 	orr.w	r2, r3, #4
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8013ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013eaa:	f003 0308 	and.w	r3, r3, #8
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d011      	beq.n	8013ed6 <HAL_UART_IRQHandler+0x126>
 8013eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013eb6:	f003 0320 	and.w	r3, r3, #32
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d105      	bne.n	8013eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8013ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013ec2:	f003 0301 	and.w	r3, r3, #1
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d005      	beq.n	8013ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ece:	f043 0208 	orr.w	r2, r3, #8
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	f000 81ed 	beq.w	80142ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013ee4:	f003 0320 	and.w	r3, r3, #32
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d008      	beq.n	8013efe <HAL_UART_IRQHandler+0x14e>
 8013eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013ef0:	f003 0320 	and.w	r3, r3, #32
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d002      	beq.n	8013efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f000 fbc7 	bl	801468c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	695b      	ldr	r3, [r3, #20]
 8013f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f08:	2b40      	cmp	r3, #64	@ 0x40
 8013f0a:	bf0c      	ite	eq
 8013f0c:	2301      	moveq	r3, #1
 8013f0e:	2300      	movne	r3, #0
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f1a:	f003 0308 	and.w	r3, r3, #8
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d103      	bne.n	8013f2a <HAL_UART_IRQHandler+0x17a>
 8013f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d04f      	beq.n	8013fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f000 facf 	bl	80144ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	695b      	ldr	r3, [r3, #20]
 8013f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f3a:	2b40      	cmp	r3, #64	@ 0x40
 8013f3c:	d141      	bne.n	8013fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	3314      	adds	r3, #20
 8013f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013f4c:	e853 3f00 	ldrex	r3, [r3]
 8013f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8013f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	3314      	adds	r3, #20
 8013f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013f7a:	e841 2300 	strex	r3, r2, [r1]
 8013f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8013f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1d9      	bne.n	8013f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d013      	beq.n	8013fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f96:	4a7d      	ldr	r2, [pc, #500]	@ (801418c <HAL_UART_IRQHandler+0x3dc>)
 8013f98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7f9 ff46 	bl	800de30 <HAL_DMA_Abort_IT>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d016      	beq.n	8013fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8013fb4:	4610      	mov	r0, r2
 8013fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fb8:	e00e      	b.n	8013fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f000 f9a4 	bl	8014308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fc0:	e00a      	b.n	8013fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f000 f9a0 	bl	8014308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fc8:	e006      	b.n	8013fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f000 f99c 	bl	8014308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8013fd6:	e170      	b.n	80142ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fd8:	bf00      	nop
    return;
 8013fda:	e16e      	b.n	80142ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	f040 814a 	bne.w	801427a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8013fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fea:	f003 0310 	and.w	r3, r3, #16
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	f000 8143 	beq.w	801427a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8013ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013ff8:	f003 0310 	and.w	r3, r3, #16
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f000 813c 	beq.w	801427a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014002:	2300      	movs	r3, #0
 8014004:	60bb      	str	r3, [r7, #8]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	60bb      	str	r3, [r7, #8]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	60bb      	str	r3, [r7, #8]
 8014016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	695b      	ldr	r3, [r3, #20]
 801401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014022:	2b40      	cmp	r3, #64	@ 0x40
 8014024:	f040 80b4 	bne.w	8014190 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014038:	2b00      	cmp	r3, #0
 801403a:	f000 8140 	beq.w	80142be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014046:	429a      	cmp	r2, r3
 8014048:	f080 8139 	bcs.w	80142be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014052:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014058:	69db      	ldr	r3, [r3, #28]
 801405a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801405e:	f000 8088 	beq.w	8014172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	330c      	adds	r3, #12
 8014068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801406c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014070:	e853 3f00 	ldrex	r3, [r3]
 8014074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8014078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	330c      	adds	r3, #12
 801408a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801408e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8014092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801409a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801409e:	e841 2300 	strex	r3, r2, [r1]
 80140a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80140a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d1d9      	bne.n	8014062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	3314      	adds	r3, #20
 80140b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80140b8:	e853 3f00 	ldrex	r3, [r3]
 80140bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80140be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80140c0:	f023 0301 	bic.w	r3, r3, #1
 80140c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	3314      	adds	r3, #20
 80140ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80140d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80140d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80140da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80140de:	e841 2300 	strex	r3, r2, [r1]
 80140e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80140e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1e1      	bne.n	80140ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	3314      	adds	r3, #20
 80140f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140f4:	e853 3f00 	ldrex	r3, [r3]
 80140f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80140fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	3314      	adds	r3, #20
 801410a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801410e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014116:	e841 2300 	strex	r3, r2, [r1]
 801411a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801411c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801411e:	2b00      	cmp	r3, #0
 8014120:	d1e3      	bne.n	80140ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2220      	movs	r2, #32
 8014126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2200      	movs	r2, #0
 801412e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	330c      	adds	r3, #12
 8014136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801413a:	e853 3f00 	ldrex	r3, [r3]
 801413e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014142:	f023 0310 	bic.w	r3, r3, #16
 8014146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	330c      	adds	r3, #12
 8014150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014154:	65ba      	str	r2, [r7, #88]	@ 0x58
 8014156:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014158:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801415a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801415c:	e841 2300 	strex	r3, r2, [r1]
 8014160:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014164:	2b00      	cmp	r3, #0
 8014166:	d1e3      	bne.n	8014130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801416c:	4618      	mov	r0, r3
 801416e:	f7f9 fdef 	bl	800dd50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801417a:	b29b      	uxth	r3, r3
 801417c:	1ad3      	subs	r3, r2, r3
 801417e:	b29b      	uxth	r3, r3
 8014180:	4619      	mov	r1, r3
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 f8ca 	bl	801431c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8014188:	e099      	b.n	80142be <HAL_UART_IRQHandler+0x50e>
 801418a:	bf00      	nop
 801418c:	08014595 	.word	0x08014595
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014198:	b29b      	uxth	r3, r3
 801419a:	1ad3      	subs	r3, r2, r3
 801419c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	f000 808b 	beq.w	80142c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80141ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	f000 8086 	beq.w	80142c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	330c      	adds	r3, #12
 80141bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141c0:	e853 3f00 	ldrex	r3, [r3]
 80141c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80141c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80141cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	330c      	adds	r3, #12
 80141d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80141da:	647a      	str	r2, [r7, #68]	@ 0x44
 80141dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80141e2:	e841 2300 	strex	r3, r2, [r1]
 80141e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80141e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d1e3      	bne.n	80141b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	3314      	adds	r3, #20
 80141f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f8:	e853 3f00 	ldrex	r3, [r3]
 80141fc:	623b      	str	r3, [r7, #32]
   return(result);
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	f023 0301 	bic.w	r3, r3, #1
 8014204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	3314      	adds	r3, #20
 801420e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014212:	633a      	str	r2, [r7, #48]	@ 0x30
 8014214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801421a:	e841 2300 	strex	r3, r2, [r1]
 801421e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014222:	2b00      	cmp	r3, #0
 8014224:	d1e3      	bne.n	80141ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2220      	movs	r2, #32
 801422a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	330c      	adds	r3, #12
 801423a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	e853 3f00 	ldrex	r3, [r3]
 8014242:	60fb      	str	r3, [r7, #12]
   return(result);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f023 0310 	bic.w	r3, r3, #16
 801424a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	330c      	adds	r3, #12
 8014254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8014258:	61fa      	str	r2, [r7, #28]
 801425a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801425c:	69b9      	ldr	r1, [r7, #24]
 801425e:	69fa      	ldr	r2, [r7, #28]
 8014260:	e841 2300 	strex	r3, r2, [r1]
 8014264:	617b      	str	r3, [r7, #20]
   return(result);
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d1e3      	bne.n	8014234 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801426c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014270:	4619      	mov	r1, r3
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f000 f852 	bl	801431c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8014278:	e023      	b.n	80142c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801427e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014282:	2b00      	cmp	r3, #0
 8014284:	d009      	beq.n	801429a <HAL_UART_IRQHandler+0x4ea>
 8014286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801428e:	2b00      	cmp	r3, #0
 8014290:	d003      	beq.n	801429a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f000 f992 	bl	80145bc <UART_Transmit_IT>
    return;
 8014298:	e014      	b.n	80142c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00e      	beq.n	80142c4 <HAL_UART_IRQHandler+0x514>
 80142a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d008      	beq.n	80142c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f000 f9d2 	bl	801465c <UART_EndTransmit_IT>
    return;
 80142b8:	e004      	b.n	80142c4 <HAL_UART_IRQHandler+0x514>
    return;
 80142ba:	bf00      	nop
 80142bc:	e002      	b.n	80142c4 <HAL_UART_IRQHandler+0x514>
      return;
 80142be:	bf00      	nop
 80142c0:	e000      	b.n	80142c4 <HAL_UART_IRQHandler+0x514>
      return;
 80142c2:	bf00      	nop
  }
}
 80142c4:	37e8      	adds	r7, #232	@ 0xe8
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop

080142cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80142d4:	bf00      	nop
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80142e8:	bf00      	nop
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr

080142f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80142fc:	bf00      	nop
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014310:	bf00      	nop
 8014312:	370c      	adds	r7, #12
 8014314:	46bd      	mov	sp, r7
 8014316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431a:	4770      	bx	lr

0801431c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801431c:	b480      	push	{r7}
 801431e:	b083      	sub	sp, #12
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	460b      	mov	r3, r1
 8014326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014328:	bf00      	nop
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b090      	sub	sp, #64	@ 0x40
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801434c:	2b00      	cmp	r3, #0
 801434e:	d137      	bne.n	80143c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8014350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014352:	2200      	movs	r2, #0
 8014354:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	3314      	adds	r3, #20
 801435c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014360:	e853 3f00 	ldrex	r3, [r3]
 8014364:	623b      	str	r3, [r7, #32]
   return(result);
 8014366:	6a3b      	ldr	r3, [r7, #32]
 8014368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801436c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801436e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	3314      	adds	r3, #20
 8014374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014376:	633a      	str	r2, [r7, #48]	@ 0x30
 8014378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801437a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801437c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801437e:	e841 2300 	strex	r3, r2, [r1]
 8014382:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014386:	2b00      	cmp	r3, #0
 8014388:	d1e5      	bne.n	8014356 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801438a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	330c      	adds	r3, #12
 8014390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	e853 3f00 	ldrex	r3, [r3]
 8014398:	60fb      	str	r3, [r7, #12]
   return(result);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80143a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	330c      	adds	r3, #12
 80143a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80143aa:	61fa      	str	r2, [r7, #28]
 80143ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ae:	69b9      	ldr	r1, [r7, #24]
 80143b0:	69fa      	ldr	r2, [r7, #28]
 80143b2:	e841 2300 	strex	r3, r2, [r1]
 80143b6:	617b      	str	r3, [r7, #20]
   return(result);
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1e5      	bne.n	801438a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80143be:	e002      	b.n	80143c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80143c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80143c2:	f7ff ff83 	bl	80142cc <HAL_UART_TxCpltCallback>
}
 80143c6:	bf00      	nop
 80143c8:	3740      	adds	r7, #64	@ 0x40
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b084      	sub	sp, #16
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	f7ff ff7f 	bl	80142e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80143e2:	bf00      	nop
 80143e4:	3710      	adds	r7, #16
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}

080143ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80143ea:	b580      	push	{r7, lr}
 80143ec:	b084      	sub	sp, #16
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80143f2:	2300      	movs	r3, #0
 80143f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	695b      	ldr	r3, [r3, #20]
 8014402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014406:	2b80      	cmp	r3, #128	@ 0x80
 8014408:	bf0c      	ite	eq
 801440a:	2301      	moveq	r3, #1
 801440c:	2300      	movne	r3, #0
 801440e:	b2db      	uxtb	r3, r3
 8014410:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014418:	b2db      	uxtb	r3, r3
 801441a:	2b21      	cmp	r3, #33	@ 0x21
 801441c:	d108      	bne.n	8014430 <UART_DMAError+0x46>
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d005      	beq.n	8014430 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	2200      	movs	r2, #0
 8014428:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 801442a:	68b8      	ldr	r0, [r7, #8]
 801442c:	f000 f827 	bl	801447e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	695b      	ldr	r3, [r3, #20]
 8014436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801443a:	2b40      	cmp	r3, #64	@ 0x40
 801443c:	bf0c      	ite	eq
 801443e:	2301      	moveq	r3, #1
 8014440:	2300      	movne	r3, #0
 8014442:	b2db      	uxtb	r3, r3
 8014444:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801444c:	b2db      	uxtb	r3, r3
 801444e:	2b22      	cmp	r3, #34	@ 0x22
 8014450:	d108      	bne.n	8014464 <UART_DMAError+0x7a>
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d005      	beq.n	8014464 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	2200      	movs	r2, #0
 801445c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 801445e:	68b8      	ldr	r0, [r7, #8]
 8014460:	f000 f835 	bl	80144ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014468:	f043 0210 	orr.w	r2, r3, #16
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014470:	68b8      	ldr	r0, [r7, #8]
 8014472:	f7ff ff49 	bl	8014308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014476:	bf00      	nop
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}

0801447e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801447e:	b480      	push	{r7}
 8014480:	b089      	sub	sp, #36	@ 0x24
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	330c      	adds	r3, #12
 801448c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	e853 3f00 	ldrex	r3, [r3]
 8014494:	60bb      	str	r3, [r7, #8]
   return(result);
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801449c:	61fb      	str	r3, [r7, #28]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	330c      	adds	r3, #12
 80144a4:	69fa      	ldr	r2, [r7, #28]
 80144a6:	61ba      	str	r2, [r7, #24]
 80144a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144aa:	6979      	ldr	r1, [r7, #20]
 80144ac:	69ba      	ldr	r2, [r7, #24]
 80144ae:	e841 2300 	strex	r3, r2, [r1]
 80144b2:	613b      	str	r3, [r7, #16]
   return(result);
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d1e5      	bne.n	8014486 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2220      	movs	r2, #32
 80144be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80144c2:	bf00      	nop
 80144c4:	3724      	adds	r7, #36	@ 0x24
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80144ce:	b480      	push	{r7}
 80144d0:	b095      	sub	sp, #84	@ 0x54
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	330c      	adds	r3, #12
 80144dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144e0:	e853 3f00 	ldrex	r3, [r3]
 80144e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80144e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80144ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	330c      	adds	r3, #12
 80144f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80144f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80144f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80144fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80144fe:	e841 2300 	strex	r3, r2, [r1]
 8014502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1e5      	bne.n	80144d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	3314      	adds	r3, #20
 8014510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014512:	6a3b      	ldr	r3, [r7, #32]
 8014514:	e853 3f00 	ldrex	r3, [r3]
 8014518:	61fb      	str	r3, [r7, #28]
   return(result);
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	f023 0301 	bic.w	r3, r3, #1
 8014520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	3314      	adds	r3, #20
 8014528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801452a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801452c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801452e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014532:	e841 2300 	strex	r3, r2, [r1]
 8014536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801453a:	2b00      	cmp	r3, #0
 801453c:	d1e5      	bne.n	801450a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014542:	2b01      	cmp	r3, #1
 8014544:	d119      	bne.n	801457a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	330c      	adds	r3, #12
 801454c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	e853 3f00 	ldrex	r3, [r3]
 8014554:	60bb      	str	r3, [r7, #8]
   return(result);
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	f023 0310 	bic.w	r3, r3, #16
 801455c:	647b      	str	r3, [r7, #68]	@ 0x44
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	330c      	adds	r3, #12
 8014564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014566:	61ba      	str	r2, [r7, #24]
 8014568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801456a:	6979      	ldr	r1, [r7, #20]
 801456c:	69ba      	ldr	r2, [r7, #24]
 801456e:	e841 2300 	strex	r3, r2, [r1]
 8014572:	613b      	str	r3, [r7, #16]
   return(result);
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d1e5      	bne.n	8014546 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2220      	movs	r2, #32
 801457e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2200      	movs	r2, #0
 8014586:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8014588:	bf00      	nop
 801458a:	3754      	adds	r7, #84	@ 0x54
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2200      	movs	r2, #0
 80145ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f7ff feaa 	bl	8014308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80145b4:	bf00      	nop
 80145b6:	3710      	adds	r7, #16
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b21      	cmp	r3, #33	@ 0x21
 80145ce:	d13e      	bne.n	801464e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80145d8:	d114      	bne.n	8014604 <UART_Transmit_IT+0x48>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	691b      	ldr	r3, [r3, #16]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d110      	bne.n	8014604 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6a1b      	ldr	r3, [r3, #32]
 80145e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	881b      	ldrh	r3, [r3, #0]
 80145ec:	461a      	mov	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80145f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6a1b      	ldr	r3, [r3, #32]
 80145fc:	1c9a      	adds	r2, r3, #2
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	621a      	str	r2, [r3, #32]
 8014602:	e008      	b.n	8014616 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6a1b      	ldr	r3, [r3, #32]
 8014608:	1c59      	adds	r1, r3, #1
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	6211      	str	r1, [r2, #32]
 801460e:	781a      	ldrb	r2, [r3, #0]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801461a:	b29b      	uxth	r3, r3
 801461c:	3b01      	subs	r3, #1
 801461e:	b29b      	uxth	r3, r3
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	4619      	mov	r1, r3
 8014624:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8014626:	2b00      	cmp	r3, #0
 8014628:	d10f      	bne.n	801464a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	68da      	ldr	r2, [r3, #12]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014638:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68da      	ldr	r2, [r3, #12]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014648:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801464a:	2300      	movs	r3, #0
 801464c:	e000      	b.n	8014650 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801464e:	2302      	movs	r3, #2
  }
}
 8014650:	4618      	mov	r0, r3
 8014652:	3714      	adds	r7, #20
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	68da      	ldr	r2, [r3, #12]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014672:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2220      	movs	r2, #32
 8014678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7ff fe25 	bl	80142cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014682:	2300      	movs	r3, #0
}
 8014684:	4618      	mov	r0, r3
 8014686:	3708      	adds	r7, #8
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b08c      	sub	sp, #48	@ 0x30
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801469a:	b2db      	uxtb	r3, r3
 801469c:	2b22      	cmp	r3, #34	@ 0x22
 801469e:	f040 80ab 	bne.w	80147f8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	689b      	ldr	r3, [r3, #8]
 80146a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80146aa:	d117      	bne.n	80146dc <UART_Receive_IT+0x50>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d113      	bne.n	80146dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80146b4:	2300      	movs	r3, #0
 80146b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146ca:	b29a      	uxth	r2, r3
 80146cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146d4:	1c9a      	adds	r2, r3, #2
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80146da:	e026      	b.n	801472a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80146e2:	2300      	movs	r3, #0
 80146e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80146ee:	d007      	beq.n	8014700 <UART_Receive_IT+0x74>
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	689b      	ldr	r3, [r3, #8]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d10a      	bne.n	801470e <UART_Receive_IT+0x82>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	691b      	ldr	r3, [r3, #16]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d106      	bne.n	801470e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	b2da      	uxtb	r2, r3
 8014708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801470a:	701a      	strb	r2, [r3, #0]
 801470c:	e008      	b.n	8014720 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	b2db      	uxtb	r3, r3
 8014716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801471a:	b2da      	uxtb	r2, r3
 801471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801471e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014724:	1c5a      	adds	r2, r3, #1
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801472e:	b29b      	uxth	r3, r3
 8014730:	3b01      	subs	r3, #1
 8014732:	b29b      	uxth	r3, r3
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	4619      	mov	r1, r3
 8014738:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 801473a:	2b00      	cmp	r3, #0
 801473c:	d15a      	bne.n	80147f4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	68da      	ldr	r2, [r3, #12]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	f022 0220 	bic.w	r2, r2, #32
 801474c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	68da      	ldr	r2, [r3, #12]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801475c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	695a      	ldr	r2, [r3, #20]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	f022 0201 	bic.w	r2, r2, #1
 801476c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2220      	movs	r2, #32
 8014772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801477a:	2b01      	cmp	r3, #1
 801477c:	d135      	bne.n	80147ea <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	330c      	adds	r3, #12
 801478a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	e853 3f00 	ldrex	r3, [r3]
 8014792:	613b      	str	r3, [r7, #16]
   return(result);
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	f023 0310 	bic.w	r3, r3, #16
 801479a:	627b      	str	r3, [r7, #36]	@ 0x24
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	330c      	adds	r3, #12
 80147a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147a4:	623a      	str	r2, [r7, #32]
 80147a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147a8:	69f9      	ldr	r1, [r7, #28]
 80147aa:	6a3a      	ldr	r2, [r7, #32]
 80147ac:	e841 2300 	strex	r3, r2, [r1]
 80147b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d1e5      	bne.n	8014784 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f003 0310 	and.w	r3, r3, #16
 80147c2:	2b10      	cmp	r3, #16
 80147c4:	d10a      	bne.n	80147dc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80147c6:	2300      	movs	r3, #0
 80147c8:	60fb      	str	r3, [r7, #12]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	60fb      	str	r3, [r7, #12]
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	685b      	ldr	r3, [r3, #4]
 80147d8:	60fb      	str	r3, [r7, #12]
 80147da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80147e0:	4619      	mov	r1, r3
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7ff fd9a 	bl	801431c <HAL_UARTEx_RxEventCallback>
 80147e8:	e002      	b.n	80147f0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7ff fd82 	bl	80142f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80147f0:	2300      	movs	r3, #0
 80147f2:	e002      	b.n	80147fa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80147f4:	2300      	movs	r3, #0
 80147f6:	e000      	b.n	80147fa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80147f8:	2302      	movs	r3, #2
  }
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3730      	adds	r7, #48	@ 0x30
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
	...

08014804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014808:	b0c0      	sub	sp, #256	@ 0x100
 801480a:	af00      	add	r7, sp, #0
 801480c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	691b      	ldr	r3, [r3, #16]
 8014818:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014820:	68d9      	ldr	r1, [r3, #12]
 8014822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	ea40 0301 	orr.w	r3, r0, r1
 801482c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014832:	689a      	ldr	r2, [r3, #8]
 8014834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014838:	691b      	ldr	r3, [r3, #16]
 801483a:	431a      	orrs	r2, r3
 801483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014840:	695b      	ldr	r3, [r3, #20]
 8014842:	431a      	orrs	r2, r3
 8014844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014848:	69db      	ldr	r3, [r3, #28]
 801484a:	4313      	orrs	r3, r2
 801484c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8014850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801485c:	f021 010c 	bic.w	r1, r1, #12
 8014860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801486a:	430b      	orrs	r3, r1
 801486c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	695b      	ldr	r3, [r3, #20]
 8014876:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801487e:	6999      	ldr	r1, [r3, #24]
 8014880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	ea40 0301 	orr.w	r3, r0, r1
 801488a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014890:	681a      	ldr	r2, [r3, #0]
 8014892:	4b8f      	ldr	r3, [pc, #572]	@ (8014ad0 <UART_SetConfig+0x2cc>)
 8014894:	429a      	cmp	r2, r3
 8014896:	d005      	beq.n	80148a4 <UART_SetConfig+0xa0>
 8014898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801489c:	681a      	ldr	r2, [r3, #0]
 801489e:	4b8d      	ldr	r3, [pc, #564]	@ (8014ad4 <UART_SetConfig+0x2d0>)
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d104      	bne.n	80148ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80148a4:	f7fd fb76 	bl	8011f94 <HAL_RCC_GetPCLK2Freq>
 80148a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80148ac:	e003      	b.n	80148b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80148ae:	f7fd fb5d 	bl	8011f6c <HAL_RCC_GetPCLK1Freq>
 80148b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80148b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80148ba:	69db      	ldr	r3, [r3, #28]
 80148bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80148c0:	f040 810c 	bne.w	8014adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80148c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80148c8:	2200      	movs	r2, #0
 80148ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80148ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80148d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80148d6:	4622      	mov	r2, r4
 80148d8:	462b      	mov	r3, r5
 80148da:	1891      	adds	r1, r2, r2
 80148dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80148de:	415b      	adcs	r3, r3
 80148e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80148e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80148e6:	4621      	mov	r1, r4
 80148e8:	eb12 0801 	adds.w	r8, r2, r1
 80148ec:	4629      	mov	r1, r5
 80148ee:	eb43 0901 	adc.w	r9, r3, r1
 80148f2:	f04f 0200 	mov.w	r2, #0
 80148f6:	f04f 0300 	mov.w	r3, #0
 80148fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80148fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8014902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014906:	4690      	mov	r8, r2
 8014908:	4699      	mov	r9, r3
 801490a:	4623      	mov	r3, r4
 801490c:	eb18 0303 	adds.w	r3, r8, r3
 8014910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014914:	462b      	mov	r3, r5
 8014916:	eb49 0303 	adc.w	r3, r9, r3
 801491a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	2200      	movs	r2, #0
 8014926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801492a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801492e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014932:	460b      	mov	r3, r1
 8014934:	18db      	adds	r3, r3, r3
 8014936:	653b      	str	r3, [r7, #80]	@ 0x50
 8014938:	4613      	mov	r3, r2
 801493a:	eb42 0303 	adc.w	r3, r2, r3
 801493e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8014944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8014948:	f7ec f99e 	bl	8000c88 <__aeabi_uldivmod>
 801494c:	4602      	mov	r2, r0
 801494e:	460b      	mov	r3, r1
 8014950:	4b61      	ldr	r3, [pc, #388]	@ (8014ad8 <UART_SetConfig+0x2d4>)
 8014952:	fba3 2302 	umull	r2, r3, r3, r2
 8014956:	095b      	lsrs	r3, r3, #5
 8014958:	011c      	lsls	r4, r3, #4
 801495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801495e:	2200      	movs	r2, #0
 8014960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014964:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8014968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801496c:	4642      	mov	r2, r8
 801496e:	464b      	mov	r3, r9
 8014970:	1891      	adds	r1, r2, r2
 8014972:	64b9      	str	r1, [r7, #72]	@ 0x48
 8014974:	415b      	adcs	r3, r3
 8014976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801497c:	4641      	mov	r1, r8
 801497e:	eb12 0a01 	adds.w	sl, r2, r1
 8014982:	4649      	mov	r1, r9
 8014984:	eb43 0b01 	adc.w	fp, r3, r1
 8014988:	f04f 0200 	mov.w	r2, #0
 801498c:	f04f 0300 	mov.w	r3, #0
 8014990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8014998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801499c:	4692      	mov	sl, r2
 801499e:	469b      	mov	fp, r3
 80149a0:	4643      	mov	r3, r8
 80149a2:	eb1a 0303 	adds.w	r3, sl, r3
 80149a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80149aa:	464b      	mov	r3, r9
 80149ac:	eb4b 0303 	adc.w	r3, fp, r3
 80149b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80149b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80149c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80149c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80149c8:	460b      	mov	r3, r1
 80149ca:	18db      	adds	r3, r3, r3
 80149cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80149ce:	4613      	mov	r3, r2
 80149d0:	eb42 0303 	adc.w	r3, r2, r3
 80149d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80149d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80149da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80149de:	f7ec f953 	bl	8000c88 <__aeabi_uldivmod>
 80149e2:	4602      	mov	r2, r0
 80149e4:	460b      	mov	r3, r1
 80149e6:	4611      	mov	r1, r2
 80149e8:	4b3b      	ldr	r3, [pc, #236]	@ (8014ad8 <UART_SetConfig+0x2d4>)
 80149ea:	fba3 2301 	umull	r2, r3, r3, r1
 80149ee:	095b      	lsrs	r3, r3, #5
 80149f0:	2264      	movs	r2, #100	@ 0x64
 80149f2:	fb02 f303 	mul.w	r3, r2, r3
 80149f6:	1acb      	subs	r3, r1, r3
 80149f8:	00db      	lsls	r3, r3, #3
 80149fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80149fe:	4b36      	ldr	r3, [pc, #216]	@ (8014ad8 <UART_SetConfig+0x2d4>)
 8014a00:	fba3 2302 	umull	r2, r3, r3, r2
 8014a04:	095b      	lsrs	r3, r3, #5
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8014a0c:	441c      	add	r4, r3
 8014a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014a12:	2200      	movs	r2, #0
 8014a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014a18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8014a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8014a20:	4642      	mov	r2, r8
 8014a22:	464b      	mov	r3, r9
 8014a24:	1891      	adds	r1, r2, r2
 8014a26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014a28:	415b      	adcs	r3, r3
 8014a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8014a30:	4641      	mov	r1, r8
 8014a32:	1851      	adds	r1, r2, r1
 8014a34:	6339      	str	r1, [r7, #48]	@ 0x30
 8014a36:	4649      	mov	r1, r9
 8014a38:	414b      	adcs	r3, r1
 8014a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a3c:	f04f 0200 	mov.w	r2, #0
 8014a40:	f04f 0300 	mov.w	r3, #0
 8014a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8014a48:	4659      	mov	r1, fp
 8014a4a:	00cb      	lsls	r3, r1, #3
 8014a4c:	4651      	mov	r1, sl
 8014a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014a52:	4651      	mov	r1, sl
 8014a54:	00ca      	lsls	r2, r1, #3
 8014a56:	4610      	mov	r0, r2
 8014a58:	4619      	mov	r1, r3
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	4642      	mov	r2, r8
 8014a5e:	189b      	adds	r3, r3, r2
 8014a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014a64:	464b      	mov	r3, r9
 8014a66:	460a      	mov	r2, r1
 8014a68:	eb42 0303 	adc.w	r3, r2, r3
 8014a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	2200      	movs	r2, #0
 8014a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8014a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8014a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014a84:	460b      	mov	r3, r1
 8014a86:	18db      	adds	r3, r3, r3
 8014a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014a8a:	4613      	mov	r3, r2
 8014a8c:	eb42 0303 	adc.w	r3, r2, r3
 8014a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8014a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8014a9a:	f7ec f8f5 	bl	8000c88 <__aeabi_uldivmod>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	460b      	mov	r3, r1
 8014aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ad8 <UART_SetConfig+0x2d4>)
 8014aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8014aa8:	095b      	lsrs	r3, r3, #5
 8014aaa:	2164      	movs	r1, #100	@ 0x64
 8014aac:	fb01 f303 	mul.w	r3, r1, r3
 8014ab0:	1ad3      	subs	r3, r2, r3
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	3332      	adds	r3, #50	@ 0x32
 8014ab6:	4a08      	ldr	r2, [pc, #32]	@ (8014ad8 <UART_SetConfig+0x2d4>)
 8014ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8014abc:	095b      	lsrs	r3, r3, #5
 8014abe:	f003 0207 	and.w	r2, r3, #7
 8014ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	4422      	add	r2, r4
 8014aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014acc:	e106      	b.n	8014cdc <UART_SetConfig+0x4d8>
 8014ace:	bf00      	nop
 8014ad0:	40011000 	.word	0x40011000
 8014ad4:	40011400 	.word	0x40011400
 8014ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8014ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8014aee:	4642      	mov	r2, r8
 8014af0:	464b      	mov	r3, r9
 8014af2:	1891      	adds	r1, r2, r2
 8014af4:	6239      	str	r1, [r7, #32]
 8014af6:	415b      	adcs	r3, r3
 8014af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014afe:	4641      	mov	r1, r8
 8014b00:	1854      	adds	r4, r2, r1
 8014b02:	4649      	mov	r1, r9
 8014b04:	eb43 0501 	adc.w	r5, r3, r1
 8014b08:	f04f 0200 	mov.w	r2, #0
 8014b0c:	f04f 0300 	mov.w	r3, #0
 8014b10:	00eb      	lsls	r3, r5, #3
 8014b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014b16:	00e2      	lsls	r2, r4, #3
 8014b18:	4614      	mov	r4, r2
 8014b1a:	461d      	mov	r5, r3
 8014b1c:	4643      	mov	r3, r8
 8014b1e:	18e3      	adds	r3, r4, r3
 8014b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014b24:	464b      	mov	r3, r9
 8014b26:	eb45 0303 	adc.w	r3, r5, r3
 8014b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014b32:	685b      	ldr	r3, [r3, #4]
 8014b34:	2200      	movs	r2, #0
 8014b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8014b3e:	f04f 0200 	mov.w	r2, #0
 8014b42:	f04f 0300 	mov.w	r3, #0
 8014b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	008b      	lsls	r3, r1, #2
 8014b4e:	4621      	mov	r1, r4
 8014b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014b54:	4621      	mov	r1, r4
 8014b56:	008a      	lsls	r2, r1, #2
 8014b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8014b5c:	f7ec f894 	bl	8000c88 <__aeabi_uldivmod>
 8014b60:	4602      	mov	r2, r0
 8014b62:	460b      	mov	r3, r1
 8014b64:	4b60      	ldr	r3, [pc, #384]	@ (8014ce8 <UART_SetConfig+0x4e4>)
 8014b66:	fba3 2302 	umull	r2, r3, r3, r2
 8014b6a:	095b      	lsrs	r3, r3, #5
 8014b6c:	011c      	lsls	r4, r3, #4
 8014b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014b72:	2200      	movs	r2, #0
 8014b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8014b80:	4642      	mov	r2, r8
 8014b82:	464b      	mov	r3, r9
 8014b84:	1891      	adds	r1, r2, r2
 8014b86:	61b9      	str	r1, [r7, #24]
 8014b88:	415b      	adcs	r3, r3
 8014b8a:	61fb      	str	r3, [r7, #28]
 8014b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014b90:	4641      	mov	r1, r8
 8014b92:	1851      	adds	r1, r2, r1
 8014b94:	6139      	str	r1, [r7, #16]
 8014b96:	4649      	mov	r1, r9
 8014b98:	414b      	adcs	r3, r1
 8014b9a:	617b      	str	r3, [r7, #20]
 8014b9c:	f04f 0200 	mov.w	r2, #0
 8014ba0:	f04f 0300 	mov.w	r3, #0
 8014ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014ba8:	4659      	mov	r1, fp
 8014baa:	00cb      	lsls	r3, r1, #3
 8014bac:	4651      	mov	r1, sl
 8014bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014bb2:	4651      	mov	r1, sl
 8014bb4:	00ca      	lsls	r2, r1, #3
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	4619      	mov	r1, r3
 8014bba:	4603      	mov	r3, r0
 8014bbc:	4642      	mov	r2, r8
 8014bbe:	189b      	adds	r3, r3, r2
 8014bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014bc4:	464b      	mov	r3, r9
 8014bc6:	460a      	mov	r2, r1
 8014bc8:	eb42 0303 	adc.w	r3, r2, r3
 8014bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8014bdc:	f04f 0200 	mov.w	r2, #0
 8014be0:	f04f 0300 	mov.w	r3, #0
 8014be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8014be8:	4649      	mov	r1, r9
 8014bea:	008b      	lsls	r3, r1, #2
 8014bec:	4641      	mov	r1, r8
 8014bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014bf2:	4641      	mov	r1, r8
 8014bf4:	008a      	lsls	r2, r1, #2
 8014bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014bfa:	f7ec f845 	bl	8000c88 <__aeabi_uldivmod>
 8014bfe:	4602      	mov	r2, r0
 8014c00:	460b      	mov	r3, r1
 8014c02:	4611      	mov	r1, r2
 8014c04:	4b38      	ldr	r3, [pc, #224]	@ (8014ce8 <UART_SetConfig+0x4e4>)
 8014c06:	fba3 2301 	umull	r2, r3, r3, r1
 8014c0a:	095b      	lsrs	r3, r3, #5
 8014c0c:	2264      	movs	r2, #100	@ 0x64
 8014c0e:	fb02 f303 	mul.w	r3, r2, r3
 8014c12:	1acb      	subs	r3, r1, r3
 8014c14:	011b      	lsls	r3, r3, #4
 8014c16:	3332      	adds	r3, #50	@ 0x32
 8014c18:	4a33      	ldr	r2, [pc, #204]	@ (8014ce8 <UART_SetConfig+0x4e4>)
 8014c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c1e:	095b      	lsrs	r3, r3, #5
 8014c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014c24:	441c      	add	r4, r3
 8014c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8014c2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8014c30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8014c34:	4642      	mov	r2, r8
 8014c36:	464b      	mov	r3, r9
 8014c38:	1891      	adds	r1, r2, r2
 8014c3a:	60b9      	str	r1, [r7, #8]
 8014c3c:	415b      	adcs	r3, r3
 8014c3e:	60fb      	str	r3, [r7, #12]
 8014c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014c44:	4641      	mov	r1, r8
 8014c46:	1851      	adds	r1, r2, r1
 8014c48:	6039      	str	r1, [r7, #0]
 8014c4a:	4649      	mov	r1, r9
 8014c4c:	414b      	adcs	r3, r1
 8014c4e:	607b      	str	r3, [r7, #4]
 8014c50:	f04f 0200 	mov.w	r2, #0
 8014c54:	f04f 0300 	mov.w	r3, #0
 8014c58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014c5c:	4659      	mov	r1, fp
 8014c5e:	00cb      	lsls	r3, r1, #3
 8014c60:	4651      	mov	r1, sl
 8014c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014c66:	4651      	mov	r1, sl
 8014c68:	00ca      	lsls	r2, r1, #3
 8014c6a:	4610      	mov	r0, r2
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	4603      	mov	r3, r0
 8014c70:	4642      	mov	r2, r8
 8014c72:	189b      	adds	r3, r3, r2
 8014c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c76:	464b      	mov	r3, r9
 8014c78:	460a      	mov	r2, r1
 8014c7a:	eb42 0303 	adc.w	r3, r2, r3
 8014c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	2200      	movs	r2, #0
 8014c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8014c8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8014c8c:	f04f 0200 	mov.w	r2, #0
 8014c90:	f04f 0300 	mov.w	r3, #0
 8014c94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8014c98:	4649      	mov	r1, r9
 8014c9a:	008b      	lsls	r3, r1, #2
 8014c9c:	4641      	mov	r1, r8
 8014c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014ca2:	4641      	mov	r1, r8
 8014ca4:	008a      	lsls	r2, r1, #2
 8014ca6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8014caa:	f7eb ffed 	bl	8000c88 <__aeabi_uldivmod>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ce8 <UART_SetConfig+0x4e4>)
 8014cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8014cb8:	095b      	lsrs	r3, r3, #5
 8014cba:	2164      	movs	r1, #100	@ 0x64
 8014cbc:	fb01 f303 	mul.w	r3, r1, r3
 8014cc0:	1ad3      	subs	r3, r2, r3
 8014cc2:	011b      	lsls	r3, r3, #4
 8014cc4:	3332      	adds	r3, #50	@ 0x32
 8014cc6:	4a08      	ldr	r2, [pc, #32]	@ (8014ce8 <UART_SetConfig+0x4e4>)
 8014cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8014ccc:	095b      	lsrs	r3, r3, #5
 8014cce:	f003 020f 	and.w	r2, r3, #15
 8014cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4422      	add	r2, r4
 8014cda:	609a      	str	r2, [r3, #8]
}
 8014cdc:	bf00      	nop
 8014cde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014ce8:	51eb851f 	.word	0x51eb851f

08014cec <LL_TIM_SetPrescaler>:
{
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	683a      	ldr	r2, [r7, #0]
 8014cfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014cfc:	bf00      	nop
 8014cfe:	370c      	adds	r7, #12
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr

08014d08 <LL_TIM_SetAutoReload>:
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	683a      	ldr	r2, [r7, #0]
 8014d16:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8014d18:	bf00      	nop
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <LL_TIM_SetRepetitionCounter>:
{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	683a      	ldr	r2, [r7, #0]
 8014d32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8014d34:	bf00      	nop
 8014d36:	370c      	adds	r7, #12
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr

08014d40 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8014d40:	b480      	push	{r7}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	695b      	ldr	r3, [r3, #20]
 8014d4c:	f043 0201 	orr.w	r2, r3, #1
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	615a      	str	r2, [r3, #20]
}
 8014d54:	bf00      	nop
 8014d56:	370c      	adds	r7, #12
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	4a3d      	ldr	r2, [pc, #244]	@ (8014e68 <LL_TIM_Init+0x108>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d013      	beq.n	8014da0 <LL_TIM_Init+0x40>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014d7e:	d00f      	beq.n	8014da0 <LL_TIM_Init+0x40>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4a3a      	ldr	r2, [pc, #232]	@ (8014e6c <LL_TIM_Init+0x10c>)
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d00b      	beq.n	8014da0 <LL_TIM_Init+0x40>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	4a39      	ldr	r2, [pc, #228]	@ (8014e70 <LL_TIM_Init+0x110>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d007      	beq.n	8014da0 <LL_TIM_Init+0x40>
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	4a38      	ldr	r2, [pc, #224]	@ (8014e74 <LL_TIM_Init+0x114>)
 8014d94:	4293      	cmp	r3, r2
 8014d96:	d003      	beq.n	8014da0 <LL_TIM_Init+0x40>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	4a37      	ldr	r2, [pc, #220]	@ (8014e78 <LL_TIM_Init+0x118>)
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	d106      	bne.n	8014dae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	4313      	orrs	r3, r2
 8014dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	4a2d      	ldr	r2, [pc, #180]	@ (8014e68 <LL_TIM_Init+0x108>)
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d02b      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014dbc:	d027      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8014e6c <LL_TIM_Init+0x10c>)
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d023      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	4a29      	ldr	r2, [pc, #164]	@ (8014e70 <LL_TIM_Init+0x110>)
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	d01f      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	4a28      	ldr	r2, [pc, #160]	@ (8014e74 <LL_TIM_Init+0x114>)
 8014dd2:	4293      	cmp	r3, r2
 8014dd4:	d01b      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4a27      	ldr	r2, [pc, #156]	@ (8014e78 <LL_TIM_Init+0x118>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d017      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	4a26      	ldr	r2, [pc, #152]	@ (8014e7c <LL_TIM_Init+0x11c>)
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d013      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	4a25      	ldr	r2, [pc, #148]	@ (8014e80 <LL_TIM_Init+0x120>)
 8014dea:	4293      	cmp	r3, r2
 8014dec:	d00f      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4a24      	ldr	r2, [pc, #144]	@ (8014e84 <LL_TIM_Init+0x124>)
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d00b      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	4a23      	ldr	r2, [pc, #140]	@ (8014e88 <LL_TIM_Init+0x128>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d007      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	4a22      	ldr	r2, [pc, #136]	@ (8014e8c <LL_TIM_Init+0x12c>)
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d003      	beq.n	8014e0e <LL_TIM_Init+0xae>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	4a21      	ldr	r2, [pc, #132]	@ (8014e90 <LL_TIM_Init+0x130>)
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d106      	bne.n	8014e1c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	68db      	ldr	r3, [r3, #12]
 8014e18:	4313      	orrs	r3, r2
 8014e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	689b      	ldr	r3, [r3, #8]
 8014e26:	4619      	mov	r1, r3
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7ff ff6d 	bl	8014d08 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	881b      	ldrh	r3, [r3, #0]
 8014e32:	4619      	mov	r1, r3
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7ff ff59 	bl	8014cec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8014e68 <LL_TIM_Init+0x108>)
 8014e3e:	4293      	cmp	r3, r2
 8014e40:	d003      	beq.n	8014e4a <LL_TIM_Init+0xea>
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	4a0c      	ldr	r2, [pc, #48]	@ (8014e78 <LL_TIM_Init+0x118>)
 8014e46:	4293      	cmp	r3, r2
 8014e48:	d105      	bne.n	8014e56 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	691b      	ldr	r3, [r3, #16]
 8014e4e:	4619      	mov	r1, r3
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff ff67 	bl	8014d24 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f7ff ff72 	bl	8014d40 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8014e5c:	2300      	movs	r3, #0
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3710      	adds	r7, #16
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	40010000 	.word	0x40010000
 8014e6c:	40000400 	.word	0x40000400
 8014e70:	40000800 	.word	0x40000800
 8014e74:	40000c00 	.word	0x40000c00
 8014e78:	40010400 	.word	0x40010400
 8014e7c:	40014000 	.word	0x40014000
 8014e80:	40014400 	.word	0x40014400
 8014e84:	40014800 	.word	0x40014800
 8014e88:	40001800 	.word	0x40001800
 8014e8c:	40001c00 	.word	0x40001c00
 8014e90:	40002000 	.word	0x40002000

08014e94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014e94:	b084      	sub	sp, #16
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b084      	sub	sp, #16
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	6078      	str	r0, [r7, #4]
 8014e9e:	f107 001c 	add.w	r0, r7, #28
 8014ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d122      	bne.n	8014ef2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014eb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8014ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ed6:	2b01      	cmp	r3, #1
 8014ed8:	d105      	bne.n	8014ee6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f001 fbee 	bl	80166c8 <USB_CoreReset>
 8014eec:	4603      	mov	r3, r0
 8014eee:	73fb      	strb	r3, [r7, #15]
 8014ef0:	e01a      	b.n	8014f28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	68db      	ldr	r3, [r3, #12]
 8014ef6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f001 fbe2 	bl	80166c8 <USB_CoreReset>
 8014f04:	4603      	mov	r3, r0
 8014f06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d106      	bne.n	8014f1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	639a      	str	r2, [r3, #56]	@ 0x38
 8014f1a:	e005      	b.n	8014f28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d10b      	bne.n	8014f46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	689b      	ldr	r3, [r3, #8]
 8014f32:	f043 0206 	orr.w	r2, r3, #6
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	689b      	ldr	r3, [r3, #8]
 8014f3e:	f043 0220 	orr.w	r2, r3, #32
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3710      	adds	r7, #16
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014f52:	b004      	add	sp, #16
 8014f54:	4770      	bx	lr
	...

08014f58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b087      	sub	sp, #28
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	60b9      	str	r1, [r7, #8]
 8014f62:	4613      	mov	r3, r2
 8014f64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014f66:	79fb      	ldrb	r3, [r7, #7]
 8014f68:	2b02      	cmp	r3, #2
 8014f6a:	d165      	bne.n	8015038 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	4a41      	ldr	r2, [pc, #260]	@ (8015074 <USB_SetTurnaroundTime+0x11c>)
 8014f70:	4293      	cmp	r3, r2
 8014f72:	d906      	bls.n	8014f82 <USB_SetTurnaroundTime+0x2a>
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	4a40      	ldr	r2, [pc, #256]	@ (8015078 <USB_SetTurnaroundTime+0x120>)
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d202      	bcs.n	8014f82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014f7c:	230f      	movs	r3, #15
 8014f7e:	617b      	str	r3, [r7, #20]
 8014f80:	e062      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	4a3c      	ldr	r2, [pc, #240]	@ (8015078 <USB_SetTurnaroundTime+0x120>)
 8014f86:	4293      	cmp	r3, r2
 8014f88:	d306      	bcc.n	8014f98 <USB_SetTurnaroundTime+0x40>
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	4a3b      	ldr	r2, [pc, #236]	@ (801507c <USB_SetTurnaroundTime+0x124>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d202      	bcs.n	8014f98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014f92:	230e      	movs	r3, #14
 8014f94:	617b      	str	r3, [r7, #20]
 8014f96:	e057      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	4a38      	ldr	r2, [pc, #224]	@ (801507c <USB_SetTurnaroundTime+0x124>)
 8014f9c:	4293      	cmp	r3, r2
 8014f9e:	d306      	bcc.n	8014fae <USB_SetTurnaroundTime+0x56>
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	4a37      	ldr	r2, [pc, #220]	@ (8015080 <USB_SetTurnaroundTime+0x128>)
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d202      	bcs.n	8014fae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014fa8:	230d      	movs	r3, #13
 8014faa:	617b      	str	r3, [r7, #20]
 8014fac:	e04c      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	4a33      	ldr	r2, [pc, #204]	@ (8015080 <USB_SetTurnaroundTime+0x128>)
 8014fb2:	4293      	cmp	r3, r2
 8014fb4:	d306      	bcc.n	8014fc4 <USB_SetTurnaroundTime+0x6c>
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	4a32      	ldr	r2, [pc, #200]	@ (8015084 <USB_SetTurnaroundTime+0x12c>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d802      	bhi.n	8014fc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014fbe:	230c      	movs	r3, #12
 8014fc0:	617b      	str	r3, [r7, #20]
 8014fc2:	e041      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8015084 <USB_SetTurnaroundTime+0x12c>)
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	d906      	bls.n	8014fda <USB_SetTurnaroundTime+0x82>
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	4a2e      	ldr	r2, [pc, #184]	@ (8015088 <USB_SetTurnaroundTime+0x130>)
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	d802      	bhi.n	8014fda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014fd4:	230b      	movs	r3, #11
 8014fd6:	617b      	str	r3, [r7, #20]
 8014fd8:	e036      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8015088 <USB_SetTurnaroundTime+0x130>)
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	d906      	bls.n	8014ff0 <USB_SetTurnaroundTime+0x98>
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	4a29      	ldr	r2, [pc, #164]	@ (801508c <USB_SetTurnaroundTime+0x134>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d802      	bhi.n	8014ff0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014fea:	230a      	movs	r3, #10
 8014fec:	617b      	str	r3, [r7, #20]
 8014fee:	e02b      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	4a26      	ldr	r2, [pc, #152]	@ (801508c <USB_SetTurnaroundTime+0x134>)
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	d906      	bls.n	8015006 <USB_SetTurnaroundTime+0xae>
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	4a25      	ldr	r2, [pc, #148]	@ (8015090 <USB_SetTurnaroundTime+0x138>)
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d202      	bcs.n	8015006 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015000:	2309      	movs	r3, #9
 8015002:	617b      	str	r3, [r7, #20]
 8015004:	e020      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	4a21      	ldr	r2, [pc, #132]	@ (8015090 <USB_SetTurnaroundTime+0x138>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d306      	bcc.n	801501c <USB_SetTurnaroundTime+0xc4>
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	4a20      	ldr	r2, [pc, #128]	@ (8015094 <USB_SetTurnaroundTime+0x13c>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d802      	bhi.n	801501c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015016:	2308      	movs	r3, #8
 8015018:	617b      	str	r3, [r7, #20]
 801501a:	e015      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	4a1d      	ldr	r2, [pc, #116]	@ (8015094 <USB_SetTurnaroundTime+0x13c>)
 8015020:	4293      	cmp	r3, r2
 8015022:	d906      	bls.n	8015032 <USB_SetTurnaroundTime+0xda>
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	4a1c      	ldr	r2, [pc, #112]	@ (8015098 <USB_SetTurnaroundTime+0x140>)
 8015028:	4293      	cmp	r3, r2
 801502a:	d202      	bcs.n	8015032 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801502c:	2307      	movs	r3, #7
 801502e:	617b      	str	r3, [r7, #20]
 8015030:	e00a      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015032:	2306      	movs	r3, #6
 8015034:	617b      	str	r3, [r7, #20]
 8015036:	e007      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015038:	79fb      	ldrb	r3, [r7, #7]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d102      	bne.n	8015044 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801503e:	2309      	movs	r3, #9
 8015040:	617b      	str	r3, [r7, #20]
 8015042:	e001      	b.n	8015048 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015044:	2309      	movs	r3, #9
 8015046:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	68db      	ldr	r3, [r3, #12]
 801504c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	68da      	ldr	r2, [r3, #12]
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	029b      	lsls	r3, r3, #10
 801505c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8015060:	431a      	orrs	r2, r3
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015066:	2300      	movs	r3, #0
}
 8015068:	4618      	mov	r0, r3
 801506a:	371c      	adds	r7, #28
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr
 8015074:	00d8acbf 	.word	0x00d8acbf
 8015078:	00e4e1c0 	.word	0x00e4e1c0
 801507c:	00f42400 	.word	0x00f42400
 8015080:	01067380 	.word	0x01067380
 8015084:	011a499f 	.word	0x011a499f
 8015088:	01312cff 	.word	0x01312cff
 801508c:	014ca43f 	.word	0x014ca43f
 8015090:	016e3600 	.word	0x016e3600
 8015094:	01a6ab1f 	.word	0x01a6ab1f
 8015098:	01e84800 	.word	0x01e84800

0801509c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	689b      	ldr	r3, [r3, #8]
 80150a8:	f043 0201 	orr.w	r2, r3, #1
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80150b0:	2300      	movs	r3, #0
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	370c      	adds	r7, #12
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr

080150be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80150be:	b480      	push	{r7}
 80150c0:	b083      	sub	sp, #12
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	689b      	ldr	r3, [r3, #8]
 80150ca:	f023 0201 	bic.w	r2, r3, #1
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	370c      	adds	r7, #12
 80150d8:	46bd      	mov	sp, r7
 80150da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150de:	4770      	bx	lr

080150e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b084      	sub	sp, #16
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	460b      	mov	r3, r1
 80150ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80150ec:	2300      	movs	r3, #0
 80150ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80150fc:	78fb      	ldrb	r3, [r7, #3]
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d115      	bne.n	801512e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	68db      	ldr	r3, [r3, #12]
 8015106:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801510e:	2001      	movs	r0, #1
 8015110:	f7f7 fafe 	bl	800c710 <HAL_Delay>
      ms++;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	3301      	adds	r3, #1
 8015118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f001 fa45 	bl	80165aa <USB_GetMode>
 8015120:	4603      	mov	r3, r0
 8015122:	2b01      	cmp	r3, #1
 8015124:	d01e      	beq.n	8015164 <USB_SetCurrentMode+0x84>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2b31      	cmp	r3, #49	@ 0x31
 801512a:	d9f0      	bls.n	801510e <USB_SetCurrentMode+0x2e>
 801512c:	e01a      	b.n	8015164 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801512e:	78fb      	ldrb	r3, [r7, #3]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d115      	bne.n	8015160 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	68db      	ldr	r3, [r3, #12]
 8015138:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015140:	2001      	movs	r0, #1
 8015142:	f7f7 fae5 	bl	800c710 <HAL_Delay>
      ms++;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	3301      	adds	r3, #1
 801514a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f001 fa2c 	bl	80165aa <USB_GetMode>
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	d005      	beq.n	8015164 <USB_SetCurrentMode+0x84>
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2b31      	cmp	r3, #49	@ 0x31
 801515c:	d9f0      	bls.n	8015140 <USB_SetCurrentMode+0x60>
 801515e:	e001      	b.n	8015164 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015160:	2301      	movs	r3, #1
 8015162:	e005      	b.n	8015170 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	2b32      	cmp	r3, #50	@ 0x32
 8015168:	d101      	bne.n	801516e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801516a:	2301      	movs	r3, #1
 801516c:	e000      	b.n	8015170 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015178:	b084      	sub	sp, #16
 801517a:	b580      	push	{r7, lr}
 801517c:	b086      	sub	sp, #24
 801517e:	af00      	add	r7, sp, #0
 8015180:	6078      	str	r0, [r7, #4]
 8015182:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8015186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801518a:	2300      	movs	r3, #0
 801518c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015192:	2300      	movs	r3, #0
 8015194:	613b      	str	r3, [r7, #16]
 8015196:	e009      	b.n	80151ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	3340      	adds	r3, #64	@ 0x40
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	4413      	add	r3, r2
 80151a2:	2200      	movs	r2, #0
 80151a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	3301      	adds	r3, #1
 80151aa:	613b      	str	r3, [r7, #16]
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	2b0e      	cmp	r3, #14
 80151b0:	d9f2      	bls.n	8015198 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80151b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d11c      	bne.n	80151f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80151c6:	f043 0302 	orr.w	r3, r3, #2
 80151ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151dc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151e8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80151f0:	e00b      	b.n	801520a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015202:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015210:	461a      	mov	r2, r3
 8015212:	2300      	movs	r3, #0
 8015214:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801521c:	4619      	mov	r1, r3
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015224:	461a      	mov	r2, r3
 8015226:	680b      	ldr	r3, [r1, #0]
 8015228:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801522a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801522c:	2b01      	cmp	r3, #1
 801522e:	d10c      	bne.n	801524a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015232:	2b00      	cmp	r3, #0
 8015234:	d104      	bne.n	8015240 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015236:	2100      	movs	r1, #0
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f000 f965 	bl	8015508 <USB_SetDevSpeed>
 801523e:	e008      	b.n	8015252 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015240:	2101      	movs	r1, #1
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f000 f960 	bl	8015508 <USB_SetDevSpeed>
 8015248:	e003      	b.n	8015252 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801524a:	2103      	movs	r1, #3
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f000 f95b 	bl	8015508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015252:	2110      	movs	r1, #16
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f000 f8f3 	bl	8015440 <USB_FlushTxFifo>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d001      	beq.n	8015264 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8015260:	2301      	movs	r3, #1
 8015262:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 f91f 	bl	80154a8 <USB_FlushRxFifo>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	d001      	beq.n	8015274 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8015270:	2301      	movs	r3, #1
 8015272:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801527a:	461a      	mov	r2, r3
 801527c:	2300      	movs	r3, #0
 801527e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015286:	461a      	mov	r2, r3
 8015288:	2300      	movs	r3, #0
 801528a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015292:	461a      	mov	r2, r3
 8015294:	2300      	movs	r3, #0
 8015296:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015298:	2300      	movs	r3, #0
 801529a:	613b      	str	r3, [r7, #16]
 801529c:	e043      	b.n	8015326 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	015a      	lsls	r2, r3, #5
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	4413      	add	r3, r2
 80152a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80152b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80152b4:	d118      	bne.n	80152e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d10a      	bne.n	80152d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	015a      	lsls	r2, r3, #5
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	4413      	add	r3, r2
 80152c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152c8:	461a      	mov	r2, r3
 80152ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80152ce:	6013      	str	r3, [r2, #0]
 80152d0:	e013      	b.n	80152fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	015a      	lsls	r2, r3, #5
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	4413      	add	r3, r2
 80152da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152de:	461a      	mov	r2, r3
 80152e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80152e4:	6013      	str	r3, [r2, #0]
 80152e6:	e008      	b.n	80152fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	015a      	lsls	r2, r3, #5
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	4413      	add	r3, r2
 80152f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152f4:	461a      	mov	r2, r3
 80152f6:	2300      	movs	r3, #0
 80152f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	015a      	lsls	r2, r3, #5
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	4413      	add	r3, r2
 8015302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015306:	461a      	mov	r2, r3
 8015308:	2300      	movs	r3, #0
 801530a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	015a      	lsls	r2, r3, #5
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	4413      	add	r3, r2
 8015314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015318:	461a      	mov	r2, r3
 801531a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801531e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	3301      	adds	r3, #1
 8015324:	613b      	str	r3, [r7, #16]
 8015326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015328:	693a      	ldr	r2, [r7, #16]
 801532a:	429a      	cmp	r2, r3
 801532c:	d3b7      	bcc.n	801529e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801532e:	2300      	movs	r3, #0
 8015330:	613b      	str	r3, [r7, #16]
 8015332:	e043      	b.n	80153bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	015a      	lsls	r2, r3, #5
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	4413      	add	r3, r2
 801533c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801534a:	d118      	bne.n	801537e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d10a      	bne.n	8015368 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	015a      	lsls	r2, r3, #5
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	4413      	add	r3, r2
 801535a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801535e:	461a      	mov	r2, r3
 8015360:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015364:	6013      	str	r3, [r2, #0]
 8015366:	e013      	b.n	8015390 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	015a      	lsls	r2, r3, #5
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	4413      	add	r3, r2
 8015370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015374:	461a      	mov	r2, r3
 8015376:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801537a:	6013      	str	r3, [r2, #0]
 801537c:	e008      	b.n	8015390 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	015a      	lsls	r2, r3, #5
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	4413      	add	r3, r2
 8015386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801538a:	461a      	mov	r2, r3
 801538c:	2300      	movs	r3, #0
 801538e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	015a      	lsls	r2, r3, #5
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	4413      	add	r3, r2
 8015398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801539c:	461a      	mov	r2, r3
 801539e:	2300      	movs	r3, #0
 80153a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	015a      	lsls	r2, r3, #5
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	4413      	add	r3, r2
 80153aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153ae:	461a      	mov	r2, r3
 80153b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80153b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	3301      	adds	r3, #1
 80153ba:	613b      	str	r3, [r7, #16]
 80153bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153be:	693a      	ldr	r2, [r7, #16]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d3b7      	bcc.n	8015334 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153ca:	691b      	ldr	r3, [r3, #16]
 80153cc:	68fa      	ldr	r2, [r7, #12]
 80153ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80153d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80153d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2200      	movs	r2, #0
 80153dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80153e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80153e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d105      	bne.n	80153f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	699b      	ldr	r3, [r3, #24]
 80153f0:	f043 0210 	orr.w	r2, r3, #16
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	699a      	ldr	r2, [r3, #24]
 80153fc:	4b0f      	ldr	r3, [pc, #60]	@ (801543c <USB_DevInit+0x2c4>)
 80153fe:	4313      	orrs	r3, r2
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015406:	2b00      	cmp	r3, #0
 8015408:	d005      	beq.n	8015416 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	699b      	ldr	r3, [r3, #24]
 801540e:	f043 0208 	orr.w	r2, r3, #8
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015418:	2b01      	cmp	r3, #1
 801541a:	d107      	bne.n	801542c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	699b      	ldr	r3, [r3, #24]
 8015420:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015424:	f043 0304 	orr.w	r3, r3, #4
 8015428:	687a      	ldr	r2, [r7, #4]
 801542a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801542c:	7dfb      	ldrb	r3, [r7, #23]
}
 801542e:	4618      	mov	r0, r3
 8015430:	3718      	adds	r7, #24
 8015432:	46bd      	mov	sp, r7
 8015434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015438:	b004      	add	sp, #16
 801543a:	4770      	bx	lr
 801543c:	803c3800 	.word	0x803c3800

08015440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015440:	b480      	push	{r7}
 8015442:	b085      	sub	sp, #20
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801544a:	2300      	movs	r3, #0
 801544c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	3301      	adds	r3, #1
 8015452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	4a13      	ldr	r2, [pc, #76]	@ (80154a4 <USB_FlushTxFifo+0x64>)
 8015458:	4293      	cmp	r3, r2
 801545a:	d901      	bls.n	8015460 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801545c:	2303      	movs	r3, #3
 801545e:	e01b      	b.n	8015498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	691b      	ldr	r3, [r3, #16]
 8015464:	2b00      	cmp	r3, #0
 8015466:	daf2      	bge.n	801544e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015468:	2300      	movs	r3, #0
 801546a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	019b      	lsls	r3, r3, #6
 8015470:	f043 0220 	orr.w	r2, r3, #32
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	3301      	adds	r3, #1
 801547c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	4a08      	ldr	r2, [pc, #32]	@ (80154a4 <USB_FlushTxFifo+0x64>)
 8015482:	4293      	cmp	r3, r2
 8015484:	d901      	bls.n	801548a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015486:	2303      	movs	r3, #3
 8015488:	e006      	b.n	8015498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	691b      	ldr	r3, [r3, #16]
 801548e:	f003 0320 	and.w	r3, r3, #32
 8015492:	2b20      	cmp	r3, #32
 8015494:	d0f0      	beq.n	8015478 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015496:	2300      	movs	r3, #0
}
 8015498:	4618      	mov	r0, r3
 801549a:	3714      	adds	r7, #20
 801549c:	46bd      	mov	sp, r7
 801549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a2:	4770      	bx	lr
 80154a4:	00030d40 	.word	0x00030d40

080154a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80154a8:	b480      	push	{r7}
 80154aa:	b085      	sub	sp, #20
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80154b0:	2300      	movs	r3, #0
 80154b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	3301      	adds	r3, #1
 80154b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	4a11      	ldr	r2, [pc, #68]	@ (8015504 <USB_FlushRxFifo+0x5c>)
 80154be:	4293      	cmp	r3, r2
 80154c0:	d901      	bls.n	80154c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80154c2:	2303      	movs	r3, #3
 80154c4:	e018      	b.n	80154f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	691b      	ldr	r3, [r3, #16]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	daf2      	bge.n	80154b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80154ce:	2300      	movs	r3, #0
 80154d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2210      	movs	r2, #16
 80154d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	3301      	adds	r3, #1
 80154dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	4a08      	ldr	r2, [pc, #32]	@ (8015504 <USB_FlushRxFifo+0x5c>)
 80154e2:	4293      	cmp	r3, r2
 80154e4:	d901      	bls.n	80154ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80154e6:	2303      	movs	r3, #3
 80154e8:	e006      	b.n	80154f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	691b      	ldr	r3, [r3, #16]
 80154ee:	f003 0310 	and.w	r3, r3, #16
 80154f2:	2b10      	cmp	r3, #16
 80154f4:	d0f0      	beq.n	80154d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80154f6:	2300      	movs	r3, #0
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	3714      	adds	r7, #20
 80154fc:	46bd      	mov	sp, r7
 80154fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015502:	4770      	bx	lr
 8015504:	00030d40 	.word	0x00030d40

08015508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	460b      	mov	r3, r1
 8015512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	78fb      	ldrb	r3, [r7, #3]
 8015522:	68f9      	ldr	r1, [r7, #12]
 8015524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015528:	4313      	orrs	r3, r2
 801552a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801552c:	2300      	movs	r3, #0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3714      	adds	r7, #20
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr

0801553a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801553a:	b480      	push	{r7}
 801553c:	b087      	sub	sp, #28
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801554c:	689b      	ldr	r3, [r3, #8]
 801554e:	f003 0306 	and.w	r3, r3, #6
 8015552:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d102      	bne.n	8015560 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801555a:	2300      	movs	r3, #0
 801555c:	75fb      	strb	r3, [r7, #23]
 801555e:	e00a      	b.n	8015576 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2b02      	cmp	r3, #2
 8015564:	d002      	beq.n	801556c <USB_GetDevSpeed+0x32>
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2b06      	cmp	r3, #6
 801556a:	d102      	bne.n	8015572 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801556c:	2302      	movs	r3, #2
 801556e:	75fb      	strb	r3, [r7, #23]
 8015570:	e001      	b.n	8015576 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015572:	230f      	movs	r3, #15
 8015574:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015576:	7dfb      	ldrb	r3, [r7, #23]
}
 8015578:	4618      	mov	r0, r3
 801557a:	371c      	adds	r7, #28
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr

08015584 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015584:	b480      	push	{r7}
 8015586:	b085      	sub	sp, #20
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	785b      	ldrb	r3, [r3, #1]
 801559c:	2b01      	cmp	r3, #1
 801559e:	d13a      	bne.n	8015616 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155a6:	69da      	ldr	r2, [r3, #28]
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	f003 030f 	and.w	r3, r3, #15
 80155b0:	2101      	movs	r1, #1
 80155b2:	fa01 f303 	lsl.w	r3, r1, r3
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	68f9      	ldr	r1, [r7, #12]
 80155ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80155be:	4313      	orrs	r3, r2
 80155c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	015a      	lsls	r2, r3, #5
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	4413      	add	r3, r2
 80155ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d155      	bne.n	8015684 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	015a      	lsls	r2, r3, #5
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	4413      	add	r3, r2
 80155e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155e4:	681a      	ldr	r2, [r3, #0]
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	791b      	ldrb	r3, [r3, #4]
 80155f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80155f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	059b      	lsls	r3, r3, #22
 80155fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80155fc:	4313      	orrs	r3, r2
 80155fe:	68ba      	ldr	r2, [r7, #8]
 8015600:	0151      	lsls	r1, r2, #5
 8015602:	68fa      	ldr	r2, [r7, #12]
 8015604:	440a      	add	r2, r1
 8015606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801560a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801560e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015612:	6013      	str	r3, [r2, #0]
 8015614:	e036      	b.n	8015684 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801561c:	69da      	ldr	r2, [r3, #28]
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	f003 030f 	and.w	r3, r3, #15
 8015626:	2101      	movs	r1, #1
 8015628:	fa01 f303 	lsl.w	r3, r1, r3
 801562c:	041b      	lsls	r3, r3, #16
 801562e:	68f9      	ldr	r1, [r7, #12]
 8015630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015634:	4313      	orrs	r3, r2
 8015636:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	015a      	lsls	r2, r3, #5
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	4413      	add	r3, r2
 8015640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801564a:	2b00      	cmp	r3, #0
 801564c:	d11a      	bne.n	8015684 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	015a      	lsls	r2, r3, #5
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	4413      	add	r3, r2
 8015656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	791b      	ldrb	r3, [r3, #4]
 8015668:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801566a:	430b      	orrs	r3, r1
 801566c:	4313      	orrs	r3, r2
 801566e:	68ba      	ldr	r2, [r7, #8]
 8015670:	0151      	lsls	r1, r2, #5
 8015672:	68fa      	ldr	r2, [r7, #12]
 8015674:	440a      	add	r2, r1
 8015676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801567a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801567e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015682:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015684:	2300      	movs	r3, #0
}
 8015686:	4618      	mov	r0, r3
 8015688:	3714      	adds	r7, #20
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr
	...

08015694 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015694:	b480      	push	{r7}
 8015696:	b085      	sub	sp, #20
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	785b      	ldrb	r3, [r3, #1]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d161      	bne.n	8015774 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	015a      	lsls	r2, r3, #5
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	4413      	add	r3, r2
 80156b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80156c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80156c6:	d11f      	bne.n	8015708 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	015a      	lsls	r2, r3, #5
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	4413      	add	r3, r2
 80156d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	68ba      	ldr	r2, [r7, #8]
 80156d8:	0151      	lsls	r1, r2, #5
 80156da:	68fa      	ldr	r2, [r7, #12]
 80156dc:	440a      	add	r2, r1
 80156de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80156e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80156e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	015a      	lsls	r2, r3, #5
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	4413      	add	r3, r2
 80156f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	68ba      	ldr	r2, [r7, #8]
 80156f8:	0151      	lsls	r1, r2, #5
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	440a      	add	r2, r1
 80156fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015702:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801570e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	781b      	ldrb	r3, [r3, #0]
 8015714:	f003 030f 	and.w	r3, r3, #15
 8015718:	2101      	movs	r1, #1
 801571a:	fa01 f303 	lsl.w	r3, r1, r3
 801571e:	b29b      	uxth	r3, r3
 8015720:	43db      	mvns	r3, r3
 8015722:	68f9      	ldr	r1, [r7, #12]
 8015724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015728:	4013      	ands	r3, r2
 801572a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015732:	69da      	ldr	r2, [r3, #28]
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	781b      	ldrb	r3, [r3, #0]
 8015738:	f003 030f 	and.w	r3, r3, #15
 801573c:	2101      	movs	r1, #1
 801573e:	fa01 f303 	lsl.w	r3, r1, r3
 8015742:	b29b      	uxth	r3, r3
 8015744:	43db      	mvns	r3, r3
 8015746:	68f9      	ldr	r1, [r7, #12]
 8015748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801574c:	4013      	ands	r3, r2
 801574e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	015a      	lsls	r2, r3, #5
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	4413      	add	r3, r2
 8015758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801575c:	681a      	ldr	r2, [r3, #0]
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	0159      	lsls	r1, r3, #5
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	440b      	add	r3, r1
 8015766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801576a:	4619      	mov	r1, r3
 801576c:	4b35      	ldr	r3, [pc, #212]	@ (8015844 <USB_DeactivateEndpoint+0x1b0>)
 801576e:	4013      	ands	r3, r2
 8015770:	600b      	str	r3, [r1, #0]
 8015772:	e060      	b.n	8015836 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	015a      	lsls	r2, r3, #5
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	4413      	add	r3, r2
 801577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801578a:	d11f      	bne.n	80157cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	015a      	lsls	r2, r3, #5
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	4413      	add	r3, r2
 8015794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	68ba      	ldr	r2, [r7, #8]
 801579c:	0151      	lsls	r1, r2, #5
 801579e:	68fa      	ldr	r2, [r7, #12]
 80157a0:	440a      	add	r2, r1
 80157a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80157a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80157aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	015a      	lsls	r2, r3, #5
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	4413      	add	r3, r2
 80157b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	68ba      	ldr	r2, [r7, #8]
 80157bc:	0151      	lsls	r1, r2, #5
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	440a      	add	r2, r1
 80157c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80157c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80157ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80157d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	f003 030f 	and.w	r3, r3, #15
 80157dc:	2101      	movs	r1, #1
 80157de:	fa01 f303 	lsl.w	r3, r1, r3
 80157e2:	041b      	lsls	r3, r3, #16
 80157e4:	43db      	mvns	r3, r3
 80157e6:	68f9      	ldr	r1, [r7, #12]
 80157e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80157ec:	4013      	ands	r3, r2
 80157ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80157f6:	69da      	ldr	r2, [r3, #28]
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	f003 030f 	and.w	r3, r3, #15
 8015800:	2101      	movs	r1, #1
 8015802:	fa01 f303 	lsl.w	r3, r1, r3
 8015806:	041b      	lsls	r3, r3, #16
 8015808:	43db      	mvns	r3, r3
 801580a:	68f9      	ldr	r1, [r7, #12]
 801580c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015810:	4013      	ands	r3, r2
 8015812:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	015a      	lsls	r2, r3, #5
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	4413      	add	r3, r2
 801581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	0159      	lsls	r1, r3, #5
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	440b      	add	r3, r1
 801582a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801582e:	4619      	mov	r1, r3
 8015830:	4b05      	ldr	r3, [pc, #20]	@ (8015848 <USB_DeactivateEndpoint+0x1b4>)
 8015832:	4013      	ands	r3, r2
 8015834:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015836:	2300      	movs	r3, #0
}
 8015838:	4618      	mov	r0, r3
 801583a:	3714      	adds	r7, #20
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr
 8015844:	ec337800 	.word	0xec337800
 8015848:	eff37800 	.word	0xeff37800

0801584c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b08a      	sub	sp, #40	@ 0x28
 8015850:	af02      	add	r7, sp, #8
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	4613      	mov	r3, r2
 8015858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	785b      	ldrb	r3, [r3, #1]
 8015868:	2b01      	cmp	r3, #1
 801586a:	f040 815c 	bne.w	8015b26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	699b      	ldr	r3, [r3, #24]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d132      	bne.n	80158dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015876:	69bb      	ldr	r3, [r7, #24]
 8015878:	015a      	lsls	r2, r3, #5
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	4413      	add	r3, r2
 801587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015882:	691b      	ldr	r3, [r3, #16]
 8015884:	69ba      	ldr	r2, [r7, #24]
 8015886:	0151      	lsls	r1, r2, #5
 8015888:	69fa      	ldr	r2, [r7, #28]
 801588a:	440a      	add	r2, r1
 801588c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015890:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015894:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	015a      	lsls	r2, r3, #5
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	4413      	add	r3, r2
 80158a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	69ba      	ldr	r2, [r7, #24]
 80158aa:	0151      	lsls	r1, r2, #5
 80158ac:	69fa      	ldr	r2, [r7, #28]
 80158ae:	440a      	add	r2, r1
 80158b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80158b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80158b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	015a      	lsls	r2, r3, #5
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	4413      	add	r3, r2
 80158c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158c6:	691b      	ldr	r3, [r3, #16]
 80158c8:	69ba      	ldr	r2, [r7, #24]
 80158ca:	0151      	lsls	r1, r2, #5
 80158cc:	69fa      	ldr	r2, [r7, #28]
 80158ce:	440a      	add	r2, r1
 80158d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80158d4:	0cdb      	lsrs	r3, r3, #19
 80158d6:	04db      	lsls	r3, r3, #19
 80158d8:	6113      	str	r3, [r2, #16]
 80158da:	e074      	b.n	80159c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	015a      	lsls	r2, r3, #5
 80158e0:	69fb      	ldr	r3, [r7, #28]
 80158e2:	4413      	add	r3, r2
 80158e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158e8:	691b      	ldr	r3, [r3, #16]
 80158ea:	69ba      	ldr	r2, [r7, #24]
 80158ec:	0151      	lsls	r1, r2, #5
 80158ee:	69fa      	ldr	r2, [r7, #28]
 80158f0:	440a      	add	r2, r1
 80158f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80158f6:	0cdb      	lsrs	r3, r3, #19
 80158f8:	04db      	lsls	r3, r3, #19
 80158fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80158fc:	69bb      	ldr	r3, [r7, #24]
 80158fe:	015a      	lsls	r2, r3, #5
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	4413      	add	r3, r2
 8015904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015908:	691b      	ldr	r3, [r3, #16]
 801590a:	69ba      	ldr	r2, [r7, #24]
 801590c:	0151      	lsls	r1, r2, #5
 801590e:	69fa      	ldr	r2, [r7, #28]
 8015910:	440a      	add	r2, r1
 8015912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015916:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801591a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801591e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015920:	69bb      	ldr	r3, [r7, #24]
 8015922:	015a      	lsls	r2, r3, #5
 8015924:	69fb      	ldr	r3, [r7, #28]
 8015926:	4413      	add	r3, r2
 8015928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801592c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	6999      	ldr	r1, [r3, #24]
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	68db      	ldr	r3, [r3, #12]
 8015936:	440b      	add	r3, r1
 8015938:	1e59      	subs	r1, r3, #1
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	fbb1 f3f3 	udiv	r3, r1, r3
 8015942:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015944:	4b9d      	ldr	r3, [pc, #628]	@ (8015bbc <USB_EPStartXfer+0x370>)
 8015946:	400b      	ands	r3, r1
 8015948:	69b9      	ldr	r1, [r7, #24]
 801594a:	0148      	lsls	r0, r1, #5
 801594c:	69f9      	ldr	r1, [r7, #28]
 801594e:	4401      	add	r1, r0
 8015950:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015954:	4313      	orrs	r3, r2
 8015956:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015958:	69bb      	ldr	r3, [r7, #24]
 801595a:	015a      	lsls	r2, r3, #5
 801595c:	69fb      	ldr	r3, [r7, #28]
 801595e:	4413      	add	r3, r2
 8015960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015964:	691a      	ldr	r2, [r3, #16]
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	699b      	ldr	r3, [r3, #24]
 801596a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801596e:	69b9      	ldr	r1, [r7, #24]
 8015970:	0148      	lsls	r0, r1, #5
 8015972:	69f9      	ldr	r1, [r7, #28]
 8015974:	4401      	add	r1, r0
 8015976:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801597a:	4313      	orrs	r3, r2
 801597c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	791b      	ldrb	r3, [r3, #4]
 8015982:	2b01      	cmp	r3, #1
 8015984:	d11f      	bne.n	80159c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	015a      	lsls	r2, r3, #5
 801598a:	69fb      	ldr	r3, [r7, #28]
 801598c:	4413      	add	r3, r2
 801598e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015992:	691b      	ldr	r3, [r3, #16]
 8015994:	69ba      	ldr	r2, [r7, #24]
 8015996:	0151      	lsls	r1, r2, #5
 8015998:	69fa      	ldr	r2, [r7, #28]
 801599a:	440a      	add	r2, r1
 801599c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80159a0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80159a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	015a      	lsls	r2, r3, #5
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	4413      	add	r3, r2
 80159ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159b2:	691b      	ldr	r3, [r3, #16]
 80159b4:	69ba      	ldr	r2, [r7, #24]
 80159b6:	0151      	lsls	r1, r2, #5
 80159b8:	69fa      	ldr	r2, [r7, #28]
 80159ba:	440a      	add	r2, r1
 80159bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80159c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80159c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80159c6:	79fb      	ldrb	r3, [r7, #7]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d14b      	bne.n	8015a64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	695b      	ldr	r3, [r3, #20]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d009      	beq.n	80159e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80159d4:	69bb      	ldr	r3, [r7, #24]
 80159d6:	015a      	lsls	r2, r3, #5
 80159d8:	69fb      	ldr	r3, [r7, #28]
 80159da:	4413      	add	r3, r2
 80159dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159e0:	461a      	mov	r2, r3
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	695b      	ldr	r3, [r3, #20]
 80159e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	791b      	ldrb	r3, [r3, #4]
 80159ec:	2b01      	cmp	r3, #1
 80159ee:	d128      	bne.n	8015a42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80159f6:	689b      	ldr	r3, [r3, #8]
 80159f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d110      	bne.n	8015a22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	015a      	lsls	r2, r3, #5
 8015a04:	69fb      	ldr	r3, [r7, #28]
 8015a06:	4413      	add	r3, r2
 8015a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	69ba      	ldr	r2, [r7, #24]
 8015a10:	0151      	lsls	r1, r2, #5
 8015a12:	69fa      	ldr	r2, [r7, #28]
 8015a14:	440a      	add	r2, r1
 8015a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015a1e:	6013      	str	r3, [r2, #0]
 8015a20:	e00f      	b.n	8015a42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	015a      	lsls	r2, r3, #5
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	4413      	add	r3, r2
 8015a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	69ba      	ldr	r2, [r7, #24]
 8015a32:	0151      	lsls	r1, r2, #5
 8015a34:	69fa      	ldr	r2, [r7, #28]
 8015a36:	440a      	add	r2, r1
 8015a38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015a40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015a42:	69bb      	ldr	r3, [r7, #24]
 8015a44:	015a      	lsls	r2, r3, #5
 8015a46:	69fb      	ldr	r3, [r7, #28]
 8015a48:	4413      	add	r3, r2
 8015a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	69ba      	ldr	r2, [r7, #24]
 8015a52:	0151      	lsls	r1, r2, #5
 8015a54:	69fa      	ldr	r2, [r7, #28]
 8015a56:	440a      	add	r2, r1
 8015a58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015a60:	6013      	str	r3, [r2, #0]
 8015a62:	e133      	b.n	8015ccc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	015a      	lsls	r2, r3, #5
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	4413      	add	r3, r2
 8015a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	69ba      	ldr	r2, [r7, #24]
 8015a74:	0151      	lsls	r1, r2, #5
 8015a76:	69fa      	ldr	r2, [r7, #28]
 8015a78:	440a      	add	r2, r1
 8015a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015a82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	791b      	ldrb	r3, [r3, #4]
 8015a88:	2b01      	cmp	r3, #1
 8015a8a:	d015      	beq.n	8015ab8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	699b      	ldr	r3, [r3, #24]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	f000 811b 	beq.w	8015ccc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	f003 030f 	and.w	r3, r3, #15
 8015aa6:	2101      	movs	r1, #1
 8015aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8015aac:	69f9      	ldr	r1, [r7, #28]
 8015aae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015ab2:	4313      	orrs	r3, r2
 8015ab4:	634b      	str	r3, [r1, #52]	@ 0x34
 8015ab6:	e109      	b.n	8015ccc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015abe:	689b      	ldr	r3, [r3, #8]
 8015ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d110      	bne.n	8015aea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	015a      	lsls	r2, r3, #5
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	4413      	add	r3, r2
 8015ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	69ba      	ldr	r2, [r7, #24]
 8015ad8:	0151      	lsls	r1, r2, #5
 8015ada:	69fa      	ldr	r2, [r7, #28]
 8015adc:	440a      	add	r2, r1
 8015ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015ae2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015ae6:	6013      	str	r3, [r2, #0]
 8015ae8:	e00f      	b.n	8015b0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015aea:	69bb      	ldr	r3, [r7, #24]
 8015aec:	015a      	lsls	r2, r3, #5
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	4413      	add	r3, r2
 8015af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	69ba      	ldr	r2, [r7, #24]
 8015afa:	0151      	lsls	r1, r2, #5
 8015afc:	69fa      	ldr	r2, [r7, #28]
 8015afe:	440a      	add	r2, r1
 8015b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015b08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	6919      	ldr	r1, [r3, #16]
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	781a      	ldrb	r2, [r3, #0]
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	699b      	ldr	r3, [r3, #24]
 8015b16:	b298      	uxth	r0, r3
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	9300      	str	r3, [sp, #0]
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	68f8      	ldr	r0, [r7, #12]
 8015b20:	f000 fade 	bl	80160e0 <USB_WritePacket>
 8015b24:	e0d2      	b.n	8015ccc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	015a      	lsls	r2, r3, #5
 8015b2a:	69fb      	ldr	r3, [r7, #28]
 8015b2c:	4413      	add	r3, r2
 8015b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b32:	691b      	ldr	r3, [r3, #16]
 8015b34:	69ba      	ldr	r2, [r7, #24]
 8015b36:	0151      	lsls	r1, r2, #5
 8015b38:	69fa      	ldr	r2, [r7, #28]
 8015b3a:	440a      	add	r2, r1
 8015b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b40:	0cdb      	lsrs	r3, r3, #19
 8015b42:	04db      	lsls	r3, r3, #19
 8015b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015b46:	69bb      	ldr	r3, [r7, #24]
 8015b48:	015a      	lsls	r2, r3, #5
 8015b4a:	69fb      	ldr	r3, [r7, #28]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b52:	691b      	ldr	r3, [r3, #16]
 8015b54:	69ba      	ldr	r2, [r7, #24]
 8015b56:	0151      	lsls	r1, r2, #5
 8015b58:	69fa      	ldr	r2, [r7, #28]
 8015b5a:	440a      	add	r2, r1
 8015b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015b64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d126      	bne.n	8015bc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	015a      	lsls	r2, r3, #5
 8015b76:	69fb      	ldr	r3, [r7, #28]
 8015b78:	4413      	add	r3, r2
 8015b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b7e:	691a      	ldr	r2, [r3, #16]
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	68db      	ldr	r3, [r3, #12]
 8015b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015b88:	69b9      	ldr	r1, [r7, #24]
 8015b8a:	0148      	lsls	r0, r1, #5
 8015b8c:	69f9      	ldr	r1, [r7, #28]
 8015b8e:	4401      	add	r1, r0
 8015b90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015b94:	4313      	orrs	r3, r2
 8015b96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015b98:	69bb      	ldr	r3, [r7, #24]
 8015b9a:	015a      	lsls	r2, r3, #5
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	4413      	add	r3, r2
 8015ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ba4:	691b      	ldr	r3, [r3, #16]
 8015ba6:	69ba      	ldr	r2, [r7, #24]
 8015ba8:	0151      	lsls	r1, r2, #5
 8015baa:	69fa      	ldr	r2, [r7, #28]
 8015bac:	440a      	add	r2, r1
 8015bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015bb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015bb6:	6113      	str	r3, [r2, #16]
 8015bb8:	e03a      	b.n	8015c30 <USB_EPStartXfer+0x3e4>
 8015bba:	bf00      	nop
 8015bbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	699a      	ldr	r2, [r3, #24]
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	68db      	ldr	r3, [r3, #12]
 8015bc8:	4413      	add	r3, r2
 8015bca:	1e5a      	subs	r2, r3, #1
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8015bd4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	68db      	ldr	r3, [r3, #12]
 8015bda:	8afa      	ldrh	r2, [r7, #22]
 8015bdc:	fb03 f202 	mul.w	r2, r3, r2
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015be4:	69bb      	ldr	r3, [r7, #24]
 8015be6:	015a      	lsls	r2, r3, #5
 8015be8:	69fb      	ldr	r3, [r7, #28]
 8015bea:	4413      	add	r3, r2
 8015bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bf0:	691a      	ldr	r2, [r3, #16]
 8015bf2:	8afb      	ldrh	r3, [r7, #22]
 8015bf4:	04d9      	lsls	r1, r3, #19
 8015bf6:	4b38      	ldr	r3, [pc, #224]	@ (8015cd8 <USB_EPStartXfer+0x48c>)
 8015bf8:	400b      	ands	r3, r1
 8015bfa:	69b9      	ldr	r1, [r7, #24]
 8015bfc:	0148      	lsls	r0, r1, #5
 8015bfe:	69f9      	ldr	r1, [r7, #28]
 8015c00:	4401      	add	r1, r0
 8015c02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015c06:	4313      	orrs	r3, r2
 8015c08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015c0a:	69bb      	ldr	r3, [r7, #24]
 8015c0c:	015a      	lsls	r2, r3, #5
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	4413      	add	r3, r2
 8015c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c16:	691a      	ldr	r2, [r3, #16]
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	69db      	ldr	r3, [r3, #28]
 8015c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015c20:	69b9      	ldr	r1, [r7, #24]
 8015c22:	0148      	lsls	r0, r1, #5
 8015c24:	69f9      	ldr	r1, [r7, #28]
 8015c26:	4401      	add	r1, r0
 8015c28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015c2c:	4313      	orrs	r3, r2
 8015c2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8015c30:	79fb      	ldrb	r3, [r7, #7]
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	d10d      	bne.n	8015c52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	691b      	ldr	r3, [r3, #16]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d009      	beq.n	8015c52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	6919      	ldr	r1, [r3, #16]
 8015c42:	69bb      	ldr	r3, [r7, #24]
 8015c44:	015a      	lsls	r2, r3, #5
 8015c46:	69fb      	ldr	r3, [r7, #28]
 8015c48:	4413      	add	r3, r2
 8015c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c4e:	460a      	mov	r2, r1
 8015c50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	791b      	ldrb	r3, [r3, #4]
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d128      	bne.n	8015cac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015c5a:	69fb      	ldr	r3, [r7, #28]
 8015c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c60:	689b      	ldr	r3, [r3, #8]
 8015c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d110      	bne.n	8015c8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015c6a:	69bb      	ldr	r3, [r7, #24]
 8015c6c:	015a      	lsls	r2, r3, #5
 8015c6e:	69fb      	ldr	r3, [r7, #28]
 8015c70:	4413      	add	r3, r2
 8015c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	69ba      	ldr	r2, [r7, #24]
 8015c7a:	0151      	lsls	r1, r2, #5
 8015c7c:	69fa      	ldr	r2, [r7, #28]
 8015c7e:	440a      	add	r2, r1
 8015c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015c84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015c88:	6013      	str	r3, [r2, #0]
 8015c8a:	e00f      	b.n	8015cac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	015a      	lsls	r2, r3, #5
 8015c90:	69fb      	ldr	r3, [r7, #28]
 8015c92:	4413      	add	r3, r2
 8015c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	69ba      	ldr	r2, [r7, #24]
 8015c9c:	0151      	lsls	r1, r2, #5
 8015c9e:	69fa      	ldr	r2, [r7, #28]
 8015ca0:	440a      	add	r2, r1
 8015ca2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015caa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015cac:	69bb      	ldr	r3, [r7, #24]
 8015cae:	015a      	lsls	r2, r3, #5
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	69ba      	ldr	r2, [r7, #24]
 8015cbc:	0151      	lsls	r1, r2, #5
 8015cbe:	69fa      	ldr	r2, [r7, #28]
 8015cc0:	440a      	add	r2, r1
 8015cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015cc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015ccc:	2300      	movs	r3, #0
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3720      	adds	r7, #32
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}
 8015cd6:	bf00      	nop
 8015cd8:	1ff80000 	.word	0x1ff80000

08015cdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b087      	sub	sp, #28
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	785b      	ldrb	r3, [r3, #1]
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	f040 80ce 	bne.w	8015e9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	699b      	ldr	r3, [r3, #24]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d132      	bne.n	8015d6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015d06:	693b      	ldr	r3, [r7, #16]
 8015d08:	015a      	lsls	r2, r3, #5
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	4413      	add	r3, r2
 8015d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d12:	691b      	ldr	r3, [r3, #16]
 8015d14:	693a      	ldr	r2, [r7, #16]
 8015d16:	0151      	lsls	r1, r2, #5
 8015d18:	697a      	ldr	r2, [r7, #20]
 8015d1a:	440a      	add	r2, r1
 8015d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d20:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015d24:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	015a      	lsls	r2, r3, #5
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	4413      	add	r3, r2
 8015d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d36:	691b      	ldr	r3, [r3, #16]
 8015d38:	693a      	ldr	r2, [r7, #16]
 8015d3a:	0151      	lsls	r1, r2, #5
 8015d3c:	697a      	ldr	r2, [r7, #20]
 8015d3e:	440a      	add	r2, r1
 8015d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	015a      	lsls	r2, r3, #5
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	4413      	add	r3, r2
 8015d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d56:	691b      	ldr	r3, [r3, #16]
 8015d58:	693a      	ldr	r2, [r7, #16]
 8015d5a:	0151      	lsls	r1, r2, #5
 8015d5c:	697a      	ldr	r2, [r7, #20]
 8015d5e:	440a      	add	r2, r1
 8015d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d64:	0cdb      	lsrs	r3, r3, #19
 8015d66:	04db      	lsls	r3, r3, #19
 8015d68:	6113      	str	r3, [r2, #16]
 8015d6a:	e04e      	b.n	8015e0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	015a      	lsls	r2, r3, #5
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	4413      	add	r3, r2
 8015d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d78:	691b      	ldr	r3, [r3, #16]
 8015d7a:	693a      	ldr	r2, [r7, #16]
 8015d7c:	0151      	lsls	r1, r2, #5
 8015d7e:	697a      	ldr	r2, [r7, #20]
 8015d80:	440a      	add	r2, r1
 8015d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d86:	0cdb      	lsrs	r3, r3, #19
 8015d88:	04db      	lsls	r3, r3, #19
 8015d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	015a      	lsls	r2, r3, #5
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	4413      	add	r3, r2
 8015d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d98:	691b      	ldr	r3, [r3, #16]
 8015d9a:	693a      	ldr	r2, [r7, #16]
 8015d9c:	0151      	lsls	r1, r2, #5
 8015d9e:	697a      	ldr	r2, [r7, #20]
 8015da0:	440a      	add	r2, r1
 8015da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015da6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015daa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015dae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	699a      	ldr	r2, [r3, #24]
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	68db      	ldr	r3, [r3, #12]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d903      	bls.n	8015dc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	68da      	ldr	r2, [r3, #12]
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	015a      	lsls	r2, r3, #5
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	4413      	add	r3, r2
 8015dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dd0:	691b      	ldr	r3, [r3, #16]
 8015dd2:	693a      	ldr	r2, [r7, #16]
 8015dd4:	0151      	lsls	r1, r2, #5
 8015dd6:	697a      	ldr	r2, [r7, #20]
 8015dd8:	440a      	add	r2, r1
 8015dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015dde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	015a      	lsls	r2, r3, #5
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	4413      	add	r3, r2
 8015dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015df0:	691a      	ldr	r2, [r3, #16]
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	699b      	ldr	r3, [r3, #24]
 8015df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015dfa:	6939      	ldr	r1, [r7, #16]
 8015dfc:	0148      	lsls	r0, r1, #5
 8015dfe:	6979      	ldr	r1, [r7, #20]
 8015e00:	4401      	add	r1, r0
 8015e02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015e06:	4313      	orrs	r3, r2
 8015e08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8015e0a:	79fb      	ldrb	r3, [r7, #7]
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	d11e      	bne.n	8015e4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	695b      	ldr	r3, [r3, #20]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d009      	beq.n	8015e2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	015a      	lsls	r2, r3, #5
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	4413      	add	r3, r2
 8015e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e24:	461a      	mov	r2, r3
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	695b      	ldr	r3, [r3, #20]
 8015e2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	015a      	lsls	r2, r3, #5
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	4413      	add	r3, r2
 8015e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	693a      	ldr	r2, [r7, #16]
 8015e3c:	0151      	lsls	r1, r2, #5
 8015e3e:	697a      	ldr	r2, [r7, #20]
 8015e40:	440a      	add	r2, r1
 8015e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015e4a:	6013      	str	r3, [r2, #0]
 8015e4c:	e097      	b.n	8015f7e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	015a      	lsls	r2, r3, #5
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	4413      	add	r3, r2
 8015e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	693a      	ldr	r2, [r7, #16]
 8015e5e:	0151      	lsls	r1, r2, #5
 8015e60:	697a      	ldr	r2, [r7, #20]
 8015e62:	440a      	add	r2, r1
 8015e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015e6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	699b      	ldr	r3, [r3, #24]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	f000 8083 	beq.w	8015f7e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e80:	68bb      	ldr	r3, [r7, #8]
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	f003 030f 	and.w	r3, r3, #15
 8015e88:	2101      	movs	r1, #1
 8015e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8015e8e:	6979      	ldr	r1, [r7, #20]
 8015e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015e94:	4313      	orrs	r3, r2
 8015e96:	634b      	str	r3, [r1, #52]	@ 0x34
 8015e98:	e071      	b.n	8015f7e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015e9a:	693b      	ldr	r3, [r7, #16]
 8015e9c:	015a      	lsls	r2, r3, #5
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	4413      	add	r3, r2
 8015ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ea6:	691b      	ldr	r3, [r3, #16]
 8015ea8:	693a      	ldr	r2, [r7, #16]
 8015eaa:	0151      	lsls	r1, r2, #5
 8015eac:	697a      	ldr	r2, [r7, #20]
 8015eae:	440a      	add	r2, r1
 8015eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015eb4:	0cdb      	lsrs	r3, r3, #19
 8015eb6:	04db      	lsls	r3, r3, #19
 8015eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	015a      	lsls	r2, r3, #5
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ec6:	691b      	ldr	r3, [r3, #16]
 8015ec8:	693a      	ldr	r2, [r7, #16]
 8015eca:	0151      	lsls	r1, r2, #5
 8015ecc:	697a      	ldr	r2, [r7, #20]
 8015ece:	440a      	add	r2, r1
 8015ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ed4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015ed8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015edc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	699b      	ldr	r3, [r3, #24]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d003      	beq.n	8015eee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	68da      	ldr	r2, [r3, #12]
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	68da      	ldr	r2, [r3, #12]
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	015a      	lsls	r2, r3, #5
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	4413      	add	r3, r2
 8015efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f02:	691b      	ldr	r3, [r3, #16]
 8015f04:	693a      	ldr	r2, [r7, #16]
 8015f06:	0151      	lsls	r1, r2, #5
 8015f08:	697a      	ldr	r2, [r7, #20]
 8015f0a:	440a      	add	r2, r1
 8015f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015f10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	015a      	lsls	r2, r3, #5
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f22:	691a      	ldr	r2, [r3, #16]
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	69db      	ldr	r3, [r3, #28]
 8015f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015f2c:	6939      	ldr	r1, [r7, #16]
 8015f2e:	0148      	lsls	r0, r1, #5
 8015f30:	6979      	ldr	r1, [r7, #20]
 8015f32:	4401      	add	r1, r0
 8015f34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015f38:	4313      	orrs	r3, r2
 8015f3a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8015f3c:	79fb      	ldrb	r3, [r7, #7]
 8015f3e:	2b01      	cmp	r3, #1
 8015f40:	d10d      	bne.n	8015f5e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	691b      	ldr	r3, [r3, #16]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d009      	beq.n	8015f5e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	6919      	ldr	r1, [r3, #16]
 8015f4e:	693b      	ldr	r3, [r7, #16]
 8015f50:	015a      	lsls	r2, r3, #5
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	4413      	add	r3, r2
 8015f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f5a:	460a      	mov	r2, r1
 8015f5c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015f5e:	693b      	ldr	r3, [r7, #16]
 8015f60:	015a      	lsls	r2, r3, #5
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	4413      	add	r3, r2
 8015f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	693a      	ldr	r2, [r7, #16]
 8015f6e:	0151      	lsls	r1, r2, #5
 8015f70:	697a      	ldr	r2, [r7, #20]
 8015f72:	440a      	add	r2, r1
 8015f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015f78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015f7e:	2300      	movs	r3, #0
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	371c      	adds	r7, #28
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr

08015f8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b087      	sub	sp, #28
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015f96:	2300      	movs	r3, #0
 8015f98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	785b      	ldrb	r3, [r3, #1]
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d14a      	bne.n	8016040 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	781b      	ldrb	r3, [r3, #0]
 8015fae:	015a      	lsls	r2, r3, #5
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015fc2:	f040 8086 	bne.w	80160d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	015a      	lsls	r2, r3, #5
 8015fcc:	693b      	ldr	r3, [r7, #16]
 8015fce:	4413      	add	r3, r2
 8015fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	683a      	ldr	r2, [r7, #0]
 8015fd8:	7812      	ldrb	r2, [r2, #0]
 8015fda:	0151      	lsls	r1, r2, #5
 8015fdc:	693a      	ldr	r2, [r7, #16]
 8015fde:	440a      	add	r2, r1
 8015fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015fe4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015fe8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	015a      	lsls	r2, r3, #5
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	683a      	ldr	r2, [r7, #0]
 8015ffc:	7812      	ldrb	r2, [r2, #0]
 8015ffe:	0151      	lsls	r1, r2, #5
 8016000:	693a      	ldr	r2, [r7, #16]
 8016002:	440a      	add	r2, r1
 8016004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016008:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801600c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	3301      	adds	r3, #1
 8016012:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	f242 7210 	movw	r2, #10000	@ 0x2710
 801601a:	4293      	cmp	r3, r2
 801601c:	d902      	bls.n	8016024 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801601e:	2301      	movs	r3, #1
 8016020:	75fb      	strb	r3, [r7, #23]
          break;
 8016022:	e056      	b.n	80160d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	015a      	lsls	r2, r3, #5
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	4413      	add	r3, r2
 801602e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801603c:	d0e7      	beq.n	801600e <USB_EPStopXfer+0x82>
 801603e:	e048      	b.n	80160d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	781b      	ldrb	r3, [r3, #0]
 8016044:	015a      	lsls	r2, r3, #5
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	4413      	add	r3, r2
 801604a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016058:	d13b      	bne.n	80160d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	015a      	lsls	r2, r3, #5
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	4413      	add	r3, r2
 8016064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	683a      	ldr	r2, [r7, #0]
 801606c:	7812      	ldrb	r2, [r2, #0]
 801606e:	0151      	lsls	r1, r2, #5
 8016070:	693a      	ldr	r2, [r7, #16]
 8016072:	440a      	add	r2, r1
 8016074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016078:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801607c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	015a      	lsls	r2, r3, #5
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	4413      	add	r3, r2
 8016088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	683a      	ldr	r2, [r7, #0]
 8016090:	7812      	ldrb	r2, [r2, #0]
 8016092:	0151      	lsls	r1, r2, #5
 8016094:	693a      	ldr	r2, [r7, #16]
 8016096:	440a      	add	r2, r1
 8016098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801609c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80160a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	3301      	adds	r3, #1
 80160a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d902      	bls.n	80160b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80160b2:	2301      	movs	r3, #1
 80160b4:	75fb      	strb	r3, [r7, #23]
          break;
 80160b6:	e00c      	b.n	80160d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	015a      	lsls	r2, r3, #5
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	4413      	add	r3, r2
 80160c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80160cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80160d0:	d0e7      	beq.n	80160a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80160d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	371c      	adds	r7, #28
 80160d8:	46bd      	mov	sp, r7
 80160da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160de:	4770      	bx	lr

080160e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b089      	sub	sp, #36	@ 0x24
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	4611      	mov	r1, r2
 80160ec:	461a      	mov	r2, r3
 80160ee:	460b      	mov	r3, r1
 80160f0:	71fb      	strb	r3, [r7, #7]
 80160f2:	4613      	mov	r3, r2
 80160f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80160fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016102:	2b00      	cmp	r3, #0
 8016104:	d123      	bne.n	801614e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8016106:	88bb      	ldrh	r3, [r7, #4]
 8016108:	3303      	adds	r3, #3
 801610a:	089b      	lsrs	r3, r3, #2
 801610c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801610e:	2300      	movs	r3, #0
 8016110:	61bb      	str	r3, [r7, #24]
 8016112:	e018      	b.n	8016146 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016114:	79fb      	ldrb	r3, [r7, #7]
 8016116:	031a      	lsls	r2, r3, #12
 8016118:	697b      	ldr	r3, [r7, #20]
 801611a:	4413      	add	r3, r2
 801611c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016120:	461a      	mov	r2, r3
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	6013      	str	r3, [r2, #0]
      pSrc++;
 8016128:	69fb      	ldr	r3, [r7, #28]
 801612a:	3301      	adds	r3, #1
 801612c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801612e:	69fb      	ldr	r3, [r7, #28]
 8016130:	3301      	adds	r3, #1
 8016132:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016134:	69fb      	ldr	r3, [r7, #28]
 8016136:	3301      	adds	r3, #1
 8016138:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	3301      	adds	r3, #1
 801613e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8016140:	69bb      	ldr	r3, [r7, #24]
 8016142:	3301      	adds	r3, #1
 8016144:	61bb      	str	r3, [r7, #24]
 8016146:	69ba      	ldr	r2, [r7, #24]
 8016148:	693b      	ldr	r3, [r7, #16]
 801614a:	429a      	cmp	r2, r3
 801614c:	d3e2      	bcc.n	8016114 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801614e:	2300      	movs	r3, #0
}
 8016150:	4618      	mov	r0, r3
 8016152:	3724      	adds	r7, #36	@ 0x24
 8016154:	46bd      	mov	sp, r7
 8016156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615a:	4770      	bx	lr

0801615c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801615c:	b480      	push	{r7}
 801615e:	b08b      	sub	sp, #44	@ 0x2c
 8016160:	af00      	add	r7, sp, #0
 8016162:	60f8      	str	r0, [r7, #12]
 8016164:	60b9      	str	r1, [r7, #8]
 8016166:	4613      	mov	r3, r2
 8016168:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8016172:	88fb      	ldrh	r3, [r7, #6]
 8016174:	089b      	lsrs	r3, r3, #2
 8016176:	b29b      	uxth	r3, r3
 8016178:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801617a:	88fb      	ldrh	r3, [r7, #6]
 801617c:	f003 0303 	and.w	r3, r3, #3
 8016180:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016182:	2300      	movs	r3, #0
 8016184:	623b      	str	r3, [r7, #32]
 8016186:	e014      	b.n	80161b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016188:	69bb      	ldr	r3, [r7, #24]
 801618a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801618e:	681a      	ldr	r2, [r3, #0]
 8016190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016192:	601a      	str	r2, [r3, #0]
    pDest++;
 8016194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016196:	3301      	adds	r3, #1
 8016198:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801619c:	3301      	adds	r3, #1
 801619e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80161a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a2:	3301      	adds	r3, #1
 80161a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80161a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a8:	3301      	adds	r3, #1
 80161aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80161ac:	6a3b      	ldr	r3, [r7, #32]
 80161ae:	3301      	adds	r3, #1
 80161b0:	623b      	str	r3, [r7, #32]
 80161b2:	6a3a      	ldr	r2, [r7, #32]
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d3e6      	bcc.n	8016188 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80161ba:	8bfb      	ldrh	r3, [r7, #30]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d01e      	beq.n	80161fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80161c0:	2300      	movs	r3, #0
 80161c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80161c4:	69bb      	ldr	r3, [r7, #24]
 80161c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80161ca:	461a      	mov	r2, r3
 80161cc:	f107 0310 	add.w	r3, r7, #16
 80161d0:	6812      	ldr	r2, [r2, #0]
 80161d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80161d4:	693a      	ldr	r2, [r7, #16]
 80161d6:	6a3b      	ldr	r3, [r7, #32]
 80161d8:	b2db      	uxtb	r3, r3
 80161da:	00db      	lsls	r3, r3, #3
 80161dc:	fa22 f303 	lsr.w	r3, r2, r3
 80161e0:	b2da      	uxtb	r2, r3
 80161e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e4:	701a      	strb	r2, [r3, #0]
      i++;
 80161e6:	6a3b      	ldr	r3, [r7, #32]
 80161e8:	3301      	adds	r3, #1
 80161ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80161ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ee:	3301      	adds	r3, #1
 80161f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80161f2:	8bfb      	ldrh	r3, [r7, #30]
 80161f4:	3b01      	subs	r3, #1
 80161f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80161f8:	8bfb      	ldrh	r3, [r7, #30]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d1ea      	bne.n	80161d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80161fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016200:	4618      	mov	r0, r3
 8016202:	372c      	adds	r7, #44	@ 0x2c
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801620c:	b480      	push	{r7}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	785b      	ldrb	r3, [r3, #1]
 8016224:	2b01      	cmp	r3, #1
 8016226:	d12c      	bne.n	8016282 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	015a      	lsls	r2, r3, #5
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	4413      	add	r3, r2
 8016230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	db12      	blt.n	8016260 <USB_EPSetStall+0x54>
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d00f      	beq.n	8016260 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	015a      	lsls	r2, r3, #5
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	4413      	add	r3, r2
 8016248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	68ba      	ldr	r2, [r7, #8]
 8016250:	0151      	lsls	r1, r2, #5
 8016252:	68fa      	ldr	r2, [r7, #12]
 8016254:	440a      	add	r2, r1
 8016256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801625a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801625e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	015a      	lsls	r2, r3, #5
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	4413      	add	r3, r2
 8016268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	68ba      	ldr	r2, [r7, #8]
 8016270:	0151      	lsls	r1, r2, #5
 8016272:	68fa      	ldr	r2, [r7, #12]
 8016274:	440a      	add	r2, r1
 8016276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801627a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801627e:	6013      	str	r3, [r2, #0]
 8016280:	e02b      	b.n	80162da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	015a      	lsls	r2, r3, #5
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	4413      	add	r3, r2
 801628a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2b00      	cmp	r3, #0
 8016292:	db12      	blt.n	80162ba <USB_EPSetStall+0xae>
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d00f      	beq.n	80162ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	015a      	lsls	r2, r3, #5
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	4413      	add	r3, r2
 80162a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	68ba      	ldr	r2, [r7, #8]
 80162aa:	0151      	lsls	r1, r2, #5
 80162ac:	68fa      	ldr	r2, [r7, #12]
 80162ae:	440a      	add	r2, r1
 80162b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80162b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80162b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80162ba:	68bb      	ldr	r3, [r7, #8]
 80162bc:	015a      	lsls	r2, r3, #5
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	4413      	add	r3, r2
 80162c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	68ba      	ldr	r2, [r7, #8]
 80162ca:	0151      	lsls	r1, r2, #5
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	440a      	add	r2, r1
 80162d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80162d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80162d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80162da:	2300      	movs	r3, #0
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3714      	adds	r7, #20
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b085      	sub	sp, #20
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
 80162f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	781b      	ldrb	r3, [r3, #0]
 80162fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	785b      	ldrb	r3, [r3, #1]
 8016300:	2b01      	cmp	r3, #1
 8016302:	d128      	bne.n	8016356 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	015a      	lsls	r2, r3, #5
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	4413      	add	r3, r2
 801630c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	68ba      	ldr	r2, [r7, #8]
 8016314:	0151      	lsls	r1, r2, #5
 8016316:	68fa      	ldr	r2, [r7, #12]
 8016318:	440a      	add	r2, r1
 801631a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801631e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016322:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	791b      	ldrb	r3, [r3, #4]
 8016328:	2b03      	cmp	r3, #3
 801632a:	d003      	beq.n	8016334 <USB_EPClearStall+0x4c>
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	791b      	ldrb	r3, [r3, #4]
 8016330:	2b02      	cmp	r3, #2
 8016332:	d138      	bne.n	80163a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	015a      	lsls	r2, r3, #5
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	4413      	add	r3, r2
 801633c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	0151      	lsls	r1, r2, #5
 8016346:	68fa      	ldr	r2, [r7, #12]
 8016348:	440a      	add	r2, r1
 801634a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801634e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016352:	6013      	str	r3, [r2, #0]
 8016354:	e027      	b.n	80163a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	015a      	lsls	r2, r3, #5
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	4413      	add	r3, r2
 801635e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	0151      	lsls	r1, r2, #5
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	440a      	add	r2, r1
 801636c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016370:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016374:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	791b      	ldrb	r3, [r3, #4]
 801637a:	2b03      	cmp	r3, #3
 801637c:	d003      	beq.n	8016386 <USB_EPClearStall+0x9e>
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	791b      	ldrb	r3, [r3, #4]
 8016382:	2b02      	cmp	r3, #2
 8016384:	d10f      	bne.n	80163a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016386:	68bb      	ldr	r3, [r7, #8]
 8016388:	015a      	lsls	r2, r3, #5
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	4413      	add	r3, r2
 801638e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	68ba      	ldr	r2, [r7, #8]
 8016396:	0151      	lsls	r1, r2, #5
 8016398:	68fa      	ldr	r2, [r7, #12]
 801639a:	440a      	add	r2, r1
 801639c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80163a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80163a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3714      	adds	r7, #20
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80163b4:	b480      	push	{r7}
 80163b6:	b085      	sub	sp, #20
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	460b      	mov	r3, r1
 80163be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	68fa      	ldr	r2, [r7, #12]
 80163ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80163d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80163d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80163de:	681a      	ldr	r2, [r3, #0]
 80163e0:	78fb      	ldrb	r3, [r7, #3]
 80163e2:	011b      	lsls	r3, r3, #4
 80163e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80163e8:	68f9      	ldr	r1, [r7, #12]
 80163ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80163ee:	4313      	orrs	r3, r2
 80163f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80163f2:	2300      	movs	r3, #0
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	3714      	adds	r7, #20
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016400:	b480      	push	{r7}
 8016402:	b085      	sub	sp, #20
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	68fa      	ldr	r2, [r7, #12]
 8016416:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801641a:	f023 0303 	bic.w	r3, r3, #3
 801641e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	68fa      	ldr	r2, [r7, #12]
 801642a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801642e:	f023 0302 	bic.w	r3, r3, #2
 8016432:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016434:	2300      	movs	r3, #0
}
 8016436:	4618      	mov	r0, r3
 8016438:	3714      	adds	r7, #20
 801643a:	46bd      	mov	sp, r7
 801643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016440:	4770      	bx	lr

08016442 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016442:	b480      	push	{r7}
 8016444:	b085      	sub	sp, #20
 8016446:	af00      	add	r7, sp, #0
 8016448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	68fa      	ldr	r2, [r7, #12]
 8016458:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801645c:	f023 0303 	bic.w	r3, r3, #3
 8016460:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	68fa      	ldr	r2, [r7, #12]
 801646c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016470:	f043 0302 	orr.w	r3, r3, #2
 8016474:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016476:	2300      	movs	r3, #0
}
 8016478:	4618      	mov	r0, r3
 801647a:	3714      	adds	r7, #20
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr

08016484 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8016484:	b480      	push	{r7}
 8016486:	b085      	sub	sp, #20
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	695b      	ldr	r3, [r3, #20]
 8016490:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	699b      	ldr	r3, [r3, #24]
 8016496:	68fa      	ldr	r2, [r7, #12]
 8016498:	4013      	ands	r3, r2
 801649a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801649c:	68fb      	ldr	r3, [r7, #12]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3714      	adds	r7, #20
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr

080164aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80164aa:	b480      	push	{r7}
 80164ac:	b085      	sub	sp, #20
 80164ae:	af00      	add	r7, sp, #0
 80164b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164bc:	699b      	ldr	r3, [r3, #24]
 80164be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164c6:	69db      	ldr	r3, [r3, #28]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	4013      	ands	r3, r2
 80164cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	0c1b      	lsrs	r3, r3, #16
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3714      	adds	r7, #20
 80164d6:	46bd      	mov	sp, r7
 80164d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164dc:	4770      	bx	lr

080164de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80164de:	b480      	push	{r7}
 80164e0:	b085      	sub	sp, #20
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164f0:	699b      	ldr	r3, [r3, #24]
 80164f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164fa:	69db      	ldr	r3, [r3, #28]
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	4013      	ands	r3, r2
 8016500:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	b29b      	uxth	r3, r3
}
 8016506:	4618      	mov	r0, r3
 8016508:	3714      	adds	r7, #20
 801650a:	46bd      	mov	sp, r7
 801650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016510:	4770      	bx	lr

08016512 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016512:	b480      	push	{r7}
 8016514:	b085      	sub	sp, #20
 8016516:	af00      	add	r7, sp, #0
 8016518:	6078      	str	r0, [r7, #4]
 801651a:	460b      	mov	r3, r1
 801651c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016522:	78fb      	ldrb	r3, [r7, #3]
 8016524:	015a      	lsls	r2, r3, #5
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	4413      	add	r3, r2
 801652a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801652e:	689b      	ldr	r3, [r3, #8]
 8016530:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016538:	695b      	ldr	r3, [r3, #20]
 801653a:	68ba      	ldr	r2, [r7, #8]
 801653c:	4013      	ands	r3, r2
 801653e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016540:	68bb      	ldr	r3, [r7, #8]
}
 8016542:	4618      	mov	r0, r3
 8016544:	3714      	adds	r7, #20
 8016546:	46bd      	mov	sp, r7
 8016548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654c:	4770      	bx	lr

0801654e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801654e:	b480      	push	{r7}
 8016550:	b087      	sub	sp, #28
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	460b      	mov	r3, r1
 8016558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016564:	691b      	ldr	r3, [r3, #16]
 8016566:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801656e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016570:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016572:	78fb      	ldrb	r3, [r7, #3]
 8016574:	f003 030f 	and.w	r3, r3, #15
 8016578:	68fa      	ldr	r2, [r7, #12]
 801657a:	fa22 f303 	lsr.w	r3, r2, r3
 801657e:	01db      	lsls	r3, r3, #7
 8016580:	b2db      	uxtb	r3, r3
 8016582:	693a      	ldr	r2, [r7, #16]
 8016584:	4313      	orrs	r3, r2
 8016586:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016588:	78fb      	ldrb	r3, [r7, #3]
 801658a:	015a      	lsls	r2, r3, #5
 801658c:	697b      	ldr	r3, [r7, #20]
 801658e:	4413      	add	r3, r2
 8016590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016594:	689b      	ldr	r3, [r3, #8]
 8016596:	693a      	ldr	r2, [r7, #16]
 8016598:	4013      	ands	r3, r2
 801659a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801659c:	68bb      	ldr	r3, [r7, #8]
}
 801659e:	4618      	mov	r0, r3
 80165a0:	371c      	adds	r7, #28
 80165a2:	46bd      	mov	sp, r7
 80165a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a8:	4770      	bx	lr

080165aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80165aa:	b480      	push	{r7}
 80165ac:	b083      	sub	sp, #12
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	695b      	ldr	r3, [r3, #20]
 80165b6:	f003 0301 	and.w	r3, r3, #1
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	370c      	adds	r7, #12
 80165be:	46bd      	mov	sp, r7
 80165c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c4:	4770      	bx	lr

080165c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80165c6:	b480      	push	{r7}
 80165c8:	b085      	sub	sp, #20
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	68fa      	ldr	r2, [r7, #12]
 80165dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80165e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80165e4:	f023 0307 	bic.w	r3, r3, #7
 80165e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165f0:	685b      	ldr	r3, [r3, #4]
 80165f2:	68fa      	ldr	r2, [r7, #12]
 80165f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80165f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80165fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80165fe:	2300      	movs	r3, #0
}
 8016600:	4618      	mov	r0, r3
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr

0801660c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801660c:	b480      	push	{r7}
 801660e:	b087      	sub	sp, #28
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	460b      	mov	r3, r1
 8016616:	607a      	str	r2, [r7, #4]
 8016618:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	333c      	adds	r3, #60	@ 0x3c
 8016622:	3304      	adds	r3, #4
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	4a26      	ldr	r2, [pc, #152]	@ (80166c4 <USB_EP0_OutStart+0xb8>)
 801662c:	4293      	cmp	r3, r2
 801662e:	d90a      	bls.n	8016646 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801663c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016640:	d101      	bne.n	8016646 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016642:	2300      	movs	r3, #0
 8016644:	e037      	b.n	80166b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801664c:	461a      	mov	r2, r3
 801664e:	2300      	movs	r3, #0
 8016650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016658:	691b      	ldr	r3, [r3, #16]
 801665a:	697a      	ldr	r2, [r7, #20]
 801665c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801666c:	691b      	ldr	r3, [r3, #16]
 801666e:	697a      	ldr	r2, [r7, #20]
 8016670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016674:	f043 0318 	orr.w	r3, r3, #24
 8016678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016680:	691b      	ldr	r3, [r3, #16]
 8016682:	697a      	ldr	r2, [r7, #20]
 8016684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016688:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801668c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801668e:	7afb      	ldrb	r3, [r7, #11]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d10f      	bne.n	80166b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801669a:	461a      	mov	r2, r3
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80166a0:	697b      	ldr	r3, [r7, #20]
 80166a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	697a      	ldr	r2, [r7, #20]
 80166aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80166ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80166b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80166b4:	2300      	movs	r3, #0
}
 80166b6:	4618      	mov	r0, r3
 80166b8:	371c      	adds	r7, #28
 80166ba:	46bd      	mov	sp, r7
 80166bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c0:	4770      	bx	lr
 80166c2:	bf00      	nop
 80166c4:	4f54300a 	.word	0x4f54300a

080166c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80166c8:	b480      	push	{r7}
 80166ca:	b085      	sub	sp, #20
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80166d0:	2300      	movs	r3, #0
 80166d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	3301      	adds	r3, #1
 80166d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	4a13      	ldr	r2, [pc, #76]	@ (801672c <USB_CoreReset+0x64>)
 80166de:	4293      	cmp	r3, r2
 80166e0:	d901      	bls.n	80166e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80166e2:	2303      	movs	r3, #3
 80166e4:	e01b      	b.n	801671e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	691b      	ldr	r3, [r3, #16]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	daf2      	bge.n	80166d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80166ee:	2300      	movs	r3, #0
 80166f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	691b      	ldr	r3, [r3, #16]
 80166f6:	f043 0201 	orr.w	r2, r3, #1
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	3301      	adds	r3, #1
 8016702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	4a09      	ldr	r2, [pc, #36]	@ (801672c <USB_CoreReset+0x64>)
 8016708:	4293      	cmp	r3, r2
 801670a:	d901      	bls.n	8016710 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801670c:	2303      	movs	r3, #3
 801670e:	e006      	b.n	801671e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	691b      	ldr	r3, [r3, #16]
 8016714:	f003 0301 	and.w	r3, r3, #1
 8016718:	2b01      	cmp	r3, #1
 801671a:	d0f0      	beq.n	80166fe <USB_CoreReset+0x36>

  return HAL_OK;
 801671c:	2300      	movs	r3, #0
}
 801671e:	4618      	mov	r0, r3
 8016720:	3714      	adds	r7, #20
 8016722:	46bd      	mov	sp, r7
 8016724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop
 801672c:	00030d40 	.word	0x00030d40

08016730 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b084      	sub	sp, #16
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
 8016738:	460b      	mov	r3, r1
 801673a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801673c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8016740:	f005 fd6a 	bl	801c218 <USBD_static_malloc>
 8016744:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d109      	bne.n	8016760 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	32b0      	adds	r2, #176	@ 0xb0
 8016756:	2100      	movs	r1, #0
 8016758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801675c:	2302      	movs	r3, #2
 801675e:	e0d4      	b.n	801690a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8016760:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8016764:	2100      	movs	r1, #0
 8016766:	68f8      	ldr	r0, [r7, #12]
 8016768:	f005 fed3 	bl	801c512 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	32b0      	adds	r2, #176	@ 0xb0
 8016776:	68f9      	ldr	r1, [r7, #12]
 8016778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	32b0      	adds	r2, #176	@ 0xb0
 8016786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	7c1b      	ldrb	r3, [r3, #16]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d138      	bne.n	801680a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016798:	4b5e      	ldr	r3, [pc, #376]	@ (8016914 <USBD_CDC_Init+0x1e4>)
 801679a:	7819      	ldrb	r1, [r3, #0]
 801679c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167a0:	2202      	movs	r2, #2
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f005 fc15 	bl	801bfd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80167a8:	4b5a      	ldr	r3, [pc, #360]	@ (8016914 <USBD_CDC_Init+0x1e4>)
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	f003 020f 	and.w	r2, r3, #15
 80167b0:	6879      	ldr	r1, [r7, #4]
 80167b2:	4613      	mov	r3, r2
 80167b4:	009b      	lsls	r3, r3, #2
 80167b6:	4413      	add	r3, r2
 80167b8:	009b      	lsls	r3, r3, #2
 80167ba:	440b      	add	r3, r1
 80167bc:	3324      	adds	r3, #36	@ 0x24
 80167be:	2201      	movs	r2, #1
 80167c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80167c2:	4b55      	ldr	r3, [pc, #340]	@ (8016918 <USBD_CDC_Init+0x1e8>)
 80167c4:	7819      	ldrb	r1, [r3, #0]
 80167c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167ca:	2202      	movs	r2, #2
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f005 fc00 	bl	801bfd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80167d2:	4b51      	ldr	r3, [pc, #324]	@ (8016918 <USBD_CDC_Init+0x1e8>)
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	f003 020f 	and.w	r2, r3, #15
 80167da:	6879      	ldr	r1, [r7, #4]
 80167dc:	4613      	mov	r3, r2
 80167de:	009b      	lsls	r3, r3, #2
 80167e0:	4413      	add	r3, r2
 80167e2:	009b      	lsls	r3, r3, #2
 80167e4:	440b      	add	r3, r1
 80167e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80167ea:	2201      	movs	r2, #1
 80167ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80167ee:	4b4b      	ldr	r3, [pc, #300]	@ (801691c <USBD_CDC_Init+0x1ec>)
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	f003 020f 	and.w	r2, r3, #15
 80167f6:	6879      	ldr	r1, [r7, #4]
 80167f8:	4613      	mov	r3, r2
 80167fa:	009b      	lsls	r3, r3, #2
 80167fc:	4413      	add	r3, r2
 80167fe:	009b      	lsls	r3, r3, #2
 8016800:	440b      	add	r3, r1
 8016802:	3326      	adds	r3, #38	@ 0x26
 8016804:	2210      	movs	r2, #16
 8016806:	801a      	strh	r2, [r3, #0]
 8016808:	e035      	b.n	8016876 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801680a:	4b42      	ldr	r3, [pc, #264]	@ (8016914 <USBD_CDC_Init+0x1e4>)
 801680c:	7819      	ldrb	r1, [r3, #0]
 801680e:	2340      	movs	r3, #64	@ 0x40
 8016810:	2202      	movs	r2, #2
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f005 fbdd 	bl	801bfd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016818:	4b3e      	ldr	r3, [pc, #248]	@ (8016914 <USBD_CDC_Init+0x1e4>)
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	f003 020f 	and.w	r2, r3, #15
 8016820:	6879      	ldr	r1, [r7, #4]
 8016822:	4613      	mov	r3, r2
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	4413      	add	r3, r2
 8016828:	009b      	lsls	r3, r3, #2
 801682a:	440b      	add	r3, r1
 801682c:	3324      	adds	r3, #36	@ 0x24
 801682e:	2201      	movs	r2, #1
 8016830:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016832:	4b39      	ldr	r3, [pc, #228]	@ (8016918 <USBD_CDC_Init+0x1e8>)
 8016834:	7819      	ldrb	r1, [r3, #0]
 8016836:	2340      	movs	r3, #64	@ 0x40
 8016838:	2202      	movs	r2, #2
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f005 fbc9 	bl	801bfd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016840:	4b35      	ldr	r3, [pc, #212]	@ (8016918 <USBD_CDC_Init+0x1e8>)
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	f003 020f 	and.w	r2, r3, #15
 8016848:	6879      	ldr	r1, [r7, #4]
 801684a:	4613      	mov	r3, r2
 801684c:	009b      	lsls	r3, r3, #2
 801684e:	4413      	add	r3, r2
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	440b      	add	r3, r1
 8016854:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016858:	2201      	movs	r2, #1
 801685a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801685c:	4b2f      	ldr	r3, [pc, #188]	@ (801691c <USBD_CDC_Init+0x1ec>)
 801685e:	781b      	ldrb	r3, [r3, #0]
 8016860:	f003 020f 	and.w	r2, r3, #15
 8016864:	6879      	ldr	r1, [r7, #4]
 8016866:	4613      	mov	r3, r2
 8016868:	009b      	lsls	r3, r3, #2
 801686a:	4413      	add	r3, r2
 801686c:	009b      	lsls	r3, r3, #2
 801686e:	440b      	add	r3, r1
 8016870:	3326      	adds	r3, #38	@ 0x26
 8016872:	2210      	movs	r2, #16
 8016874:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016876:	4b29      	ldr	r3, [pc, #164]	@ (801691c <USBD_CDC_Init+0x1ec>)
 8016878:	7819      	ldrb	r1, [r3, #0]
 801687a:	2308      	movs	r3, #8
 801687c:	2203      	movs	r2, #3
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f005 fba7 	bl	801bfd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8016884:	4b25      	ldr	r3, [pc, #148]	@ (801691c <USBD_CDC_Init+0x1ec>)
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	f003 020f 	and.w	r2, r3, #15
 801688c:	6879      	ldr	r1, [r7, #4]
 801688e:	4613      	mov	r3, r2
 8016890:	009b      	lsls	r3, r3, #2
 8016892:	4413      	add	r3, r2
 8016894:	009b      	lsls	r3, r3, #2
 8016896:	440b      	add	r3, r1
 8016898:	3324      	adds	r3, #36	@ 0x24
 801689a:	2201      	movs	r2, #1
 801689c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	2200      	movs	r2, #0
 80168a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	33b0      	adds	r3, #176	@ 0xb0
 80168b0:	009b      	lsls	r3, r3, #2
 80168b2:	4413      	add	r3, r2
 80168b4:	685b      	ldr	r3, [r3, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2200      	movs	r2, #0
 80168be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	2200      	movs	r2, #0
 80168c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d101      	bne.n	80168d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80168d4:	2302      	movs	r3, #2
 80168d6:	e018      	b.n	801690a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	7c1b      	ldrb	r3, [r3, #16]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d10a      	bne.n	80168f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80168e0:	4b0d      	ldr	r3, [pc, #52]	@ (8016918 <USBD_CDC_Init+0x1e8>)
 80168e2:	7819      	ldrb	r1, [r3, #0]
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f005 fc5e 	bl	801c1b0 <USBD_LL_PrepareReceive>
 80168f4:	e008      	b.n	8016908 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80168f6:	4b08      	ldr	r3, [pc, #32]	@ (8016918 <USBD_CDC_Init+0x1e8>)
 80168f8:	7819      	ldrb	r1, [r3, #0]
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016900:	2340      	movs	r3, #64	@ 0x40
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f005 fc54 	bl	801c1b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016908:	2300      	movs	r3, #0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3710      	adds	r7, #16
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	200000d7 	.word	0x200000d7
 8016918:	200000d8 	.word	0x200000d8
 801691c:	200000d9 	.word	0x200000d9

08016920 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	460b      	mov	r3, r1
 801692a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801692c:	4b3a      	ldr	r3, [pc, #232]	@ (8016a18 <USBD_CDC_DeInit+0xf8>)
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	4619      	mov	r1, r3
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f005 fb73 	bl	801c01e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016938:	4b37      	ldr	r3, [pc, #220]	@ (8016a18 <USBD_CDC_DeInit+0xf8>)
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	f003 020f 	and.w	r2, r3, #15
 8016940:	6879      	ldr	r1, [r7, #4]
 8016942:	4613      	mov	r3, r2
 8016944:	009b      	lsls	r3, r3, #2
 8016946:	4413      	add	r3, r2
 8016948:	009b      	lsls	r3, r3, #2
 801694a:	440b      	add	r3, r1
 801694c:	3324      	adds	r3, #36	@ 0x24
 801694e:	2200      	movs	r2, #0
 8016950:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8016952:	4b32      	ldr	r3, [pc, #200]	@ (8016a1c <USBD_CDC_DeInit+0xfc>)
 8016954:	781b      	ldrb	r3, [r3, #0]
 8016956:	4619      	mov	r1, r3
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f005 fb60 	bl	801c01e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801695e:	4b2f      	ldr	r3, [pc, #188]	@ (8016a1c <USBD_CDC_DeInit+0xfc>)
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	f003 020f 	and.w	r2, r3, #15
 8016966:	6879      	ldr	r1, [r7, #4]
 8016968:	4613      	mov	r3, r2
 801696a:	009b      	lsls	r3, r3, #2
 801696c:	4413      	add	r3, r2
 801696e:	009b      	lsls	r3, r3, #2
 8016970:	440b      	add	r3, r1
 8016972:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016976:	2200      	movs	r2, #0
 8016978:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801697a:	4b29      	ldr	r3, [pc, #164]	@ (8016a20 <USBD_CDC_DeInit+0x100>)
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	4619      	mov	r1, r3
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	f005 fb4c 	bl	801c01e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8016986:	4b26      	ldr	r3, [pc, #152]	@ (8016a20 <USBD_CDC_DeInit+0x100>)
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	f003 020f 	and.w	r2, r3, #15
 801698e:	6879      	ldr	r1, [r7, #4]
 8016990:	4613      	mov	r3, r2
 8016992:	009b      	lsls	r3, r3, #2
 8016994:	4413      	add	r3, r2
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	440b      	add	r3, r1
 801699a:	3324      	adds	r3, #36	@ 0x24
 801699c:	2200      	movs	r2, #0
 801699e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80169a0:	4b1f      	ldr	r3, [pc, #124]	@ (8016a20 <USBD_CDC_DeInit+0x100>)
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	f003 020f 	and.w	r2, r3, #15
 80169a8:	6879      	ldr	r1, [r7, #4]
 80169aa:	4613      	mov	r3, r2
 80169ac:	009b      	lsls	r3, r3, #2
 80169ae:	4413      	add	r3, r2
 80169b0:	009b      	lsls	r3, r3, #2
 80169b2:	440b      	add	r3, r1
 80169b4:	3326      	adds	r3, #38	@ 0x26
 80169b6:	2200      	movs	r2, #0
 80169b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	32b0      	adds	r2, #176	@ 0xb0
 80169c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d01f      	beq.n	8016a0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	33b0      	adds	r3, #176	@ 0xb0
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	4413      	add	r3, r2
 80169da:	685b      	ldr	r3, [r3, #4]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	32b0      	adds	r2, #176	@ 0xb0
 80169ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169ee:	4618      	mov	r0, r3
 80169f0:	f005 fc20 	bl	801c234 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	32b0      	adds	r2, #176	@ 0xb0
 80169fe:	2100      	movs	r1, #0
 8016a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2200      	movs	r2, #0
 8016a08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016a0c:	2300      	movs	r3, #0
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	3708      	adds	r7, #8
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	200000d7 	.word	0x200000d7
 8016a1c:	200000d8 	.word	0x200000d8
 8016a20:	200000d9 	.word	0x200000d9

08016a24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b086      	sub	sp, #24
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
 8016a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	32b0      	adds	r2, #176	@ 0xb0
 8016a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016a42:	2300      	movs	r3, #0
 8016a44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a46:	2300      	movs	r3, #0
 8016a48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016a4a:	693b      	ldr	r3, [r7, #16]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d101      	bne.n	8016a54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016a50:	2303      	movs	r3, #3
 8016a52:	e0bf      	b.n	8016bd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d050      	beq.n	8016b02 <USBD_CDC_Setup+0xde>
 8016a60:	2b20      	cmp	r3, #32
 8016a62:	f040 80af 	bne.w	8016bc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	88db      	ldrh	r3, [r3, #6]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d03a      	beq.n	8016ae4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	b25b      	sxtb	r3, r3
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	da1b      	bge.n	8016ab0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	33b0      	adds	r3, #176	@ 0xb0
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	4413      	add	r3, r2
 8016a86:	685b      	ldr	r3, [r3, #4]
 8016a88:	689b      	ldr	r3, [r3, #8]
 8016a8a:	683a      	ldr	r2, [r7, #0]
 8016a8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8016a8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016a90:	683a      	ldr	r2, [r7, #0]
 8016a92:	88d2      	ldrh	r2, [r2, #6]
 8016a94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	88db      	ldrh	r3, [r3, #6]
 8016a9a:	2b07      	cmp	r3, #7
 8016a9c:	bf28      	it	cs
 8016a9e:	2307      	movcs	r3, #7
 8016aa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	89fa      	ldrh	r2, [r7, #14]
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f001 fd41 	bl	8018530 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8016aae:	e090      	b.n	8016bd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	785a      	ldrb	r2, [r3, #1]
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	88db      	ldrh	r3, [r3, #6]
 8016abe:	2b3f      	cmp	r3, #63	@ 0x3f
 8016ac0:	d803      	bhi.n	8016aca <USBD_CDC_Setup+0xa6>
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	88db      	ldrh	r3, [r3, #6]
 8016ac6:	b2da      	uxtb	r2, r3
 8016ac8:	e000      	b.n	8016acc <USBD_CDC_Setup+0xa8>
 8016aca:	2240      	movs	r2, #64	@ 0x40
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8016ad2:	6939      	ldr	r1, [r7, #16]
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8016ada:	461a      	mov	r2, r3
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f001 fd53 	bl	8018588 <USBD_CtlPrepareRx>
      break;
 8016ae2:	e076      	b.n	8016bd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	33b0      	adds	r3, #176	@ 0xb0
 8016aee:	009b      	lsls	r3, r3, #2
 8016af0:	4413      	add	r3, r2
 8016af2:	685b      	ldr	r3, [r3, #4]
 8016af4:	689b      	ldr	r3, [r3, #8]
 8016af6:	683a      	ldr	r2, [r7, #0]
 8016af8:	7850      	ldrb	r0, [r2, #1]
 8016afa:	2200      	movs	r2, #0
 8016afc:	6839      	ldr	r1, [r7, #0]
 8016afe:	4798      	blx	r3
      break;
 8016b00:	e067      	b.n	8016bd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	785b      	ldrb	r3, [r3, #1]
 8016b06:	2b0b      	cmp	r3, #11
 8016b08:	d851      	bhi.n	8016bae <USBD_CDC_Setup+0x18a>
 8016b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8016b10 <USBD_CDC_Setup+0xec>)
 8016b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b10:	08016b41 	.word	0x08016b41
 8016b14:	08016bbd 	.word	0x08016bbd
 8016b18:	08016baf 	.word	0x08016baf
 8016b1c:	08016baf 	.word	0x08016baf
 8016b20:	08016baf 	.word	0x08016baf
 8016b24:	08016baf 	.word	0x08016baf
 8016b28:	08016baf 	.word	0x08016baf
 8016b2c:	08016baf 	.word	0x08016baf
 8016b30:	08016baf 	.word	0x08016baf
 8016b34:	08016baf 	.word	0x08016baf
 8016b38:	08016b6b 	.word	0x08016b6b
 8016b3c:	08016b95 	.word	0x08016b95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	2b03      	cmp	r3, #3
 8016b4a:	d107      	bne.n	8016b5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016b4c:	f107 030a 	add.w	r3, r7, #10
 8016b50:	2202      	movs	r2, #2
 8016b52:	4619      	mov	r1, r3
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f001 fceb 	bl	8018530 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016b5a:	e032      	b.n	8016bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016b5c:	6839      	ldr	r1, [r7, #0]
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	f001 fc75 	bl	801844e <USBD_CtlError>
            ret = USBD_FAIL;
 8016b64:	2303      	movs	r3, #3
 8016b66:	75fb      	strb	r3, [r7, #23]
          break;
 8016b68:	e02b      	b.n	8016bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	2b03      	cmp	r3, #3
 8016b74:	d107      	bne.n	8016b86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016b76:	f107 030d 	add.w	r3, r7, #13
 8016b7a:	2201      	movs	r2, #1
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f001 fcd6 	bl	8018530 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016b84:	e01d      	b.n	8016bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016b86:	6839      	ldr	r1, [r7, #0]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f001 fc60 	bl	801844e <USBD_CtlError>
            ret = USBD_FAIL;
 8016b8e:	2303      	movs	r3, #3
 8016b90:	75fb      	strb	r3, [r7, #23]
          break;
 8016b92:	e016      	b.n	8016bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	d00f      	beq.n	8016bc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f001 fc53 	bl	801844e <USBD_CtlError>
            ret = USBD_FAIL;
 8016ba8:	2303      	movs	r3, #3
 8016baa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016bac:	e008      	b.n	8016bc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016bae:	6839      	ldr	r1, [r7, #0]
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f001 fc4c 	bl	801844e <USBD_CtlError>
          ret = USBD_FAIL;
 8016bb6:	2303      	movs	r3, #3
 8016bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8016bba:	e002      	b.n	8016bc2 <USBD_CDC_Setup+0x19e>
          break;
 8016bbc:	bf00      	nop
 8016bbe:	e008      	b.n	8016bd2 <USBD_CDC_Setup+0x1ae>
          break;
 8016bc0:	bf00      	nop
      }
      break;
 8016bc2:	e006      	b.n	8016bd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016bc4:	6839      	ldr	r1, [r7, #0]
 8016bc6:	6878      	ldr	r0, [r7, #4]
 8016bc8:	f001 fc41 	bl	801844e <USBD_CtlError>
      ret = USBD_FAIL;
 8016bcc:	2303      	movs	r3, #3
 8016bce:	75fb      	strb	r3, [r7, #23]
      break;
 8016bd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8016bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3718      	adds	r7, #24
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	460b      	mov	r3, r1
 8016be6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016bee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	32b0      	adds	r2, #176	@ 0xb0
 8016bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d101      	bne.n	8016c06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016c02:	2303      	movs	r3, #3
 8016c04:	e065      	b.n	8016cd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	32b0      	adds	r2, #176	@ 0xb0
 8016c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016c16:	78fb      	ldrb	r3, [r7, #3]
 8016c18:	f003 020f 	and.w	r2, r3, #15
 8016c1c:	6879      	ldr	r1, [r7, #4]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	009b      	lsls	r3, r3, #2
 8016c22:	4413      	add	r3, r2
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	440b      	add	r3, r1
 8016c28:	3318      	adds	r3, #24
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d02f      	beq.n	8016c90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016c30:	78fb      	ldrb	r3, [r7, #3]
 8016c32:	f003 020f 	and.w	r2, r3, #15
 8016c36:	6879      	ldr	r1, [r7, #4]
 8016c38:	4613      	mov	r3, r2
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	4413      	add	r3, r2
 8016c3e:	009b      	lsls	r3, r3, #2
 8016c40:	440b      	add	r3, r1
 8016c42:	3318      	adds	r3, #24
 8016c44:	681a      	ldr	r2, [r3, #0]
 8016c46:	78fb      	ldrb	r3, [r7, #3]
 8016c48:	f003 010f 	and.w	r1, r3, #15
 8016c4c:	68f8      	ldr	r0, [r7, #12]
 8016c4e:	460b      	mov	r3, r1
 8016c50:	00db      	lsls	r3, r3, #3
 8016c52:	440b      	add	r3, r1
 8016c54:	009b      	lsls	r3, r3, #2
 8016c56:	4403      	add	r3, r0
 8016c58:	3348      	adds	r3, #72	@ 0x48
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8016c60:	fb01 f303 	mul.w	r3, r1, r3
 8016c64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d112      	bne.n	8016c90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8016c6a:	78fb      	ldrb	r3, [r7, #3]
 8016c6c:	f003 020f 	and.w	r2, r3, #15
 8016c70:	6879      	ldr	r1, [r7, #4]
 8016c72:	4613      	mov	r3, r2
 8016c74:	009b      	lsls	r3, r3, #2
 8016c76:	4413      	add	r3, r2
 8016c78:	009b      	lsls	r3, r3, #2
 8016c7a:	440b      	add	r3, r1
 8016c7c:	3318      	adds	r3, #24
 8016c7e:	2200      	movs	r2, #0
 8016c80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016c82:	78f9      	ldrb	r1, [r7, #3]
 8016c84:	2300      	movs	r3, #0
 8016c86:	2200      	movs	r2, #0
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f005 fa70 	bl	801c16e <USBD_LL_Transmit>
 8016c8e:	e01f      	b.n	8016cd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	2200      	movs	r2, #0
 8016c94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	33b0      	adds	r3, #176	@ 0xb0
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	4413      	add	r3, r2
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	691b      	ldr	r3, [r3, #16]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d010      	beq.n	8016cd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cb4:	687a      	ldr	r2, [r7, #4]
 8016cb6:	33b0      	adds	r3, #176	@ 0xb0
 8016cb8:	009b      	lsls	r3, r3, #2
 8016cba:	4413      	add	r3, r2
 8016cbc:	685b      	ldr	r3, [r3, #4]
 8016cbe:	691b      	ldr	r3, [r3, #16]
 8016cc0:	68ba      	ldr	r2, [r7, #8]
 8016cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016cc6:	68ba      	ldr	r2, [r7, #8]
 8016cc8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016ccc:	78fa      	ldrb	r2, [r7, #3]
 8016cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016cd0:	2300      	movs	r3, #0
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3710      	adds	r7, #16
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	32b0      	adds	r2, #176	@ 0xb0
 8016cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	32b0      	adds	r2, #176	@ 0xb0
 8016d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d101      	bne.n	8016d0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016d08:	2303      	movs	r3, #3
 8016d0a:	e01a      	b.n	8016d42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016d0c:	78fb      	ldrb	r3, [r7, #3]
 8016d0e:	4619      	mov	r1, r3
 8016d10:	6878      	ldr	r0, [r7, #4]
 8016d12:	f005 fa6e 	bl	801c1f2 <USBD_LL_GetRxDataSize>
 8016d16:	4602      	mov	r2, r0
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	33b0      	adds	r3, #176	@ 0xb0
 8016d28:	009b      	lsls	r3, r3, #2
 8016d2a:	4413      	add	r3, r2
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	68db      	ldr	r3, [r3, #12]
 8016d30:	68fa      	ldr	r2, [r7, #12]
 8016d32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016d36:	68fa      	ldr	r2, [r7, #12]
 8016d38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016d3c:	4611      	mov	r1, r2
 8016d3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016d40:	2300      	movs	r3, #0
}
 8016d42:	4618      	mov	r0, r3
 8016d44:	3710      	adds	r7, #16
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}

08016d4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016d4a:	b580      	push	{r7, lr}
 8016d4c:	b084      	sub	sp, #16
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	32b0      	adds	r2, #176	@ 0xb0
 8016d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d101      	bne.n	8016d6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016d68:	2303      	movs	r3, #3
 8016d6a:	e024      	b.n	8016db6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	33b0      	adds	r3, #176	@ 0xb0
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	4413      	add	r3, r2
 8016d7a:	685b      	ldr	r3, [r3, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d019      	beq.n	8016db4 <USBD_CDC_EP0_RxReady+0x6a>
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8016d86:	2bff      	cmp	r3, #255	@ 0xff
 8016d88:	d014      	beq.n	8016db4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	33b0      	adds	r3, #176	@ 0xb0
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	4413      	add	r3, r2
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	689b      	ldr	r3, [r3, #8]
 8016d9c:	68fa      	ldr	r2, [r7, #12]
 8016d9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016da2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016da4:	68fa      	ldr	r2, [r7, #12]
 8016da6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016daa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	22ff      	movs	r2, #255	@ 0xff
 8016db0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016db4:	2300      	movs	r3, #0
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3710      	adds	r7, #16
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
	...

08016dc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b086      	sub	sp, #24
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016dc8:	2182      	movs	r1, #130	@ 0x82
 8016dca:	4818      	ldr	r0, [pc, #96]	@ (8016e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016dcc:	f000 fd09 	bl	80177e2 <USBD_GetEpDesc>
 8016dd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016dd2:	2101      	movs	r1, #1
 8016dd4:	4815      	ldr	r0, [pc, #84]	@ (8016e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016dd6:	f000 fd04 	bl	80177e2 <USBD_GetEpDesc>
 8016dda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016ddc:	2181      	movs	r1, #129	@ 0x81
 8016dde:	4813      	ldr	r0, [pc, #76]	@ (8016e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016de0:	f000 fcff 	bl	80177e2 <USBD_GetEpDesc>
 8016de4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d002      	beq.n	8016df2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	2210      	movs	r2, #16
 8016df0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016df2:	693b      	ldr	r3, [r7, #16]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d006      	beq.n	8016e06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016df8:	693b      	ldr	r3, [r7, #16]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016e00:	711a      	strb	r2, [r3, #4]
 8016e02:	2200      	movs	r2, #0
 8016e04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d006      	beq.n	8016e1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016e14:	711a      	strb	r2, [r3, #4]
 8016e16:	2200      	movs	r2, #0
 8016e18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2243      	movs	r2, #67	@ 0x43
 8016e1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016e20:	4b02      	ldr	r3, [pc, #8]	@ (8016e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3718      	adds	r7, #24
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	20000094 	.word	0x20000094

08016e30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b086      	sub	sp, #24
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016e38:	2182      	movs	r1, #130	@ 0x82
 8016e3a:	4818      	ldr	r0, [pc, #96]	@ (8016e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016e3c:	f000 fcd1 	bl	80177e2 <USBD_GetEpDesc>
 8016e40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016e42:	2101      	movs	r1, #1
 8016e44:	4815      	ldr	r0, [pc, #84]	@ (8016e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016e46:	f000 fccc 	bl	80177e2 <USBD_GetEpDesc>
 8016e4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016e4c:	2181      	movs	r1, #129	@ 0x81
 8016e4e:	4813      	ldr	r0, [pc, #76]	@ (8016e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016e50:	f000 fcc7 	bl	80177e2 <USBD_GetEpDesc>
 8016e54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016e56:	697b      	ldr	r3, [r7, #20]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d002      	beq.n	8016e62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	2210      	movs	r2, #16
 8016e60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d006      	beq.n	8016e76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	711a      	strb	r2, [r3, #4]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	f042 0202 	orr.w	r2, r2, #2
 8016e74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d006      	beq.n	8016e8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	2200      	movs	r2, #0
 8016e80:	711a      	strb	r2, [r3, #4]
 8016e82:	2200      	movs	r2, #0
 8016e84:	f042 0202 	orr.w	r2, r2, #2
 8016e88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	2243      	movs	r2, #67	@ 0x43
 8016e8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016e90:	4b02      	ldr	r3, [pc, #8]	@ (8016e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3718      	adds	r7, #24
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	20000094 	.word	0x20000094

08016ea0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b086      	sub	sp, #24
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016ea8:	2182      	movs	r1, #130	@ 0x82
 8016eaa:	4818      	ldr	r0, [pc, #96]	@ (8016f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016eac:	f000 fc99 	bl	80177e2 <USBD_GetEpDesc>
 8016eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016eb2:	2101      	movs	r1, #1
 8016eb4:	4815      	ldr	r0, [pc, #84]	@ (8016f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016eb6:	f000 fc94 	bl	80177e2 <USBD_GetEpDesc>
 8016eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016ebc:	2181      	movs	r1, #129	@ 0x81
 8016ebe:	4813      	ldr	r0, [pc, #76]	@ (8016f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016ec0:	f000 fc8f 	bl	80177e2 <USBD_GetEpDesc>
 8016ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016ec6:	697b      	ldr	r3, [r7, #20]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d002      	beq.n	8016ed2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	2210      	movs	r2, #16
 8016ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016ed2:	693b      	ldr	r3, [r7, #16]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d006      	beq.n	8016ee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	2200      	movs	r2, #0
 8016edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016ee0:	711a      	strb	r2, [r3, #4]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d006      	beq.n	8016efa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2200      	movs	r2, #0
 8016ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016ef4:	711a      	strb	r2, [r3, #4]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	2243      	movs	r2, #67	@ 0x43
 8016efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016f00:	4b02      	ldr	r3, [pc, #8]	@ (8016f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	3718      	adds	r7, #24
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}
 8016f0a:	bf00      	nop
 8016f0c:	20000094 	.word	0x20000094

08016f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	220a      	movs	r2, #10
 8016f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016f1e:	4b03      	ldr	r3, [pc, #12]	@ (8016f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	370c      	adds	r7, #12
 8016f24:	46bd      	mov	sp, r7
 8016f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2a:	4770      	bx	lr
 8016f2c:	20000050 	.word	0x20000050

08016f30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d101      	bne.n	8016f44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016f40:	2303      	movs	r3, #3
 8016f42:	e009      	b.n	8016f58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	33b0      	adds	r3, #176	@ 0xb0
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	4413      	add	r3, r2
 8016f52:	683a      	ldr	r2, [r7, #0]
 8016f54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016f56:	2300      	movs	r3, #0
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	370c      	adds	r7, #12
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f62:	4770      	bx	lr

08016f64 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b087      	sub	sp, #28
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	32b0      	adds	r2, #176	@ 0xb0
 8016f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f7e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d101      	bne.n	8016f8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016f86:	2303      	movs	r3, #3
 8016f88:	e008      	b.n	8016f9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	68ba      	ldr	r2, [r7, #8]
 8016f8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8016f9a:	2300      	movs	r3, #0
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	371c      	adds	r7, #28
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa6:	4770      	bx	lr

08016fa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016fa8:	b480      	push	{r7}
 8016faa:	b085      	sub	sp, #20
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	32b0      	adds	r2, #176	@ 0xb0
 8016fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d101      	bne.n	8016fcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016fc8:	2303      	movs	r3, #3
 8016fca:	e004      	b.n	8016fd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	683a      	ldr	r2, [r7, #0]
 8016fd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016fd4:	2300      	movs	r3, #0
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3714      	adds	r7, #20
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe0:	4770      	bx	lr
	...

08016fe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b084      	sub	sp, #16
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	32b0      	adds	r2, #176	@ 0xb0
 8016ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	32b0      	adds	r2, #176	@ 0xb0
 8017006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d101      	bne.n	8017012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801700e:	2303      	movs	r3, #3
 8017010:	e018      	b.n	8017044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	7c1b      	ldrb	r3, [r3, #16]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10a      	bne.n	8017030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801701a:	4b0c      	ldr	r3, [pc, #48]	@ (801704c <USBD_CDC_ReceivePacket+0x68>)
 801701c:	7819      	ldrb	r1, [r3, #0]
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f005 f8c1 	bl	801c1b0 <USBD_LL_PrepareReceive>
 801702e:	e008      	b.n	8017042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017030:	4b06      	ldr	r3, [pc, #24]	@ (801704c <USBD_CDC_ReceivePacket+0x68>)
 8017032:	7819      	ldrb	r1, [r3, #0]
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801703a:	2340      	movs	r3, #64	@ 0x40
 801703c:	6878      	ldr	r0, [r7, #4]
 801703e:	f005 f8b7 	bl	801c1b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017042:	2300      	movs	r3, #0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3710      	adds	r7, #16
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	200000d8 	.word	0x200000d8

08017050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b086      	sub	sp, #24
 8017054:	af00      	add	r7, sp, #0
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	4613      	mov	r3, r2
 801705c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d101      	bne.n	8017068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017064:	2303      	movs	r3, #3
 8017066:	e01f      	b.n	80170a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	2200      	movs	r2, #0
 801706c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	2200      	movs	r2, #0
 8017074:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	2200      	movs	r2, #0
 801707c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d003      	beq.n	801708e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	68ba      	ldr	r2, [r7, #8]
 801708a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	2201      	movs	r2, #1
 8017092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	79fa      	ldrb	r2, [r7, #7]
 801709a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801709c:	68f8      	ldr	r0, [r7, #12]
 801709e:	f004 ff31 	bl	801bf04 <USBD_LL_Init>
 80170a2:	4603      	mov	r3, r0
 80170a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80170a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80170a8:	4618      	mov	r0, r3
 80170aa:	3718      	adds	r7, #24
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd80      	pop	{r7, pc}

080170b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b084      	sub	sp, #16
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
 80170b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80170ba:	2300      	movs	r3, #0
 80170bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d101      	bne.n	80170c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80170c4:	2303      	movs	r3, #3
 80170c6:	e025      	b.n	8017114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	683a      	ldr	r2, [r7, #0]
 80170cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	32ae      	adds	r2, #174	@ 0xae
 80170da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00f      	beq.n	8017104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	32ae      	adds	r2, #174	@ 0xae
 80170ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170f4:	f107 020e 	add.w	r2, r7, #14
 80170f8:	4610      	mov	r0, r2
 80170fa:	4798      	blx	r3
 80170fc:	4602      	mov	r2, r0
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801710a:	1c5a      	adds	r2, r3, #1
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017112:	2300      	movs	r3, #0
}
 8017114:	4618      	mov	r0, r3
 8017116:	3710      	adds	r7, #16
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b082      	sub	sp, #8
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f004 ff39 	bl	801bf9c <USBD_LL_Start>
 801712a:	4603      	mov	r3, r0
}
 801712c:	4618      	mov	r0, r3
 801712e:	3708      	adds	r7, #8
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}

08017134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017134:	b480      	push	{r7}
 8017136:	b083      	sub	sp, #12
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801713c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801713e:	4618      	mov	r0, r3
 8017140:	370c      	adds	r7, #12
 8017142:	46bd      	mov	sp, r7
 8017144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017148:	4770      	bx	lr

0801714a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801714a:	b580      	push	{r7, lr}
 801714c:	b084      	sub	sp, #16
 801714e:	af00      	add	r7, sp, #0
 8017150:	6078      	str	r0, [r7, #4]
 8017152:	460b      	mov	r3, r1
 8017154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017156:	2300      	movs	r3, #0
 8017158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017160:	2b00      	cmp	r3, #0
 8017162:	d009      	beq.n	8017178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	78fa      	ldrb	r2, [r7, #3]
 801716e:	4611      	mov	r1, r2
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	4798      	blx	r3
 8017174:	4603      	mov	r3, r0
 8017176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017178:	7bfb      	ldrb	r3, [r7, #15]
}
 801717a:	4618      	mov	r0, r3
 801717c:	3710      	adds	r7, #16
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}

08017182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017182:	b580      	push	{r7, lr}
 8017184:	b084      	sub	sp, #16
 8017186:	af00      	add	r7, sp, #0
 8017188:	6078      	str	r0, [r7, #4]
 801718a:	460b      	mov	r3, r1
 801718c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801718e:	2300      	movs	r3, #0
 8017190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017198:	685b      	ldr	r3, [r3, #4]
 801719a:	78fa      	ldrb	r2, [r7, #3]
 801719c:	4611      	mov	r1, r2
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	4798      	blx	r3
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d001      	beq.n	80171ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80171a8:	2303      	movs	r3, #3
 80171aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80171ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3710      	adds	r7, #16
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}

080171b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80171b6:	b580      	push	{r7, lr}
 80171b8:	b084      	sub	sp, #16
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
 80171be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80171c6:	6839      	ldr	r1, [r7, #0]
 80171c8:	4618      	mov	r0, r3
 80171ca:	f001 f906 	bl	80183da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2201      	movs	r2, #1
 80171d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80171dc:	461a      	mov	r2, r3
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80171ea:	f003 031f 	and.w	r3, r3, #31
 80171ee:	2b02      	cmp	r3, #2
 80171f0:	d01a      	beq.n	8017228 <USBD_LL_SetupStage+0x72>
 80171f2:	2b02      	cmp	r3, #2
 80171f4:	d822      	bhi.n	801723c <USBD_LL_SetupStage+0x86>
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d002      	beq.n	8017200 <USBD_LL_SetupStage+0x4a>
 80171fa:	2b01      	cmp	r3, #1
 80171fc:	d00a      	beq.n	8017214 <USBD_LL_SetupStage+0x5e>
 80171fe:	e01d      	b.n	801723c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017206:	4619      	mov	r1, r3
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f000 fb5d 	bl	80178c8 <USBD_StdDevReq>
 801720e:	4603      	mov	r3, r0
 8017210:	73fb      	strb	r3, [r7, #15]
      break;
 8017212:	e020      	b.n	8017256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801721a:	4619      	mov	r1, r3
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f000 fbc5 	bl	80179ac <USBD_StdItfReq>
 8017222:	4603      	mov	r3, r0
 8017224:	73fb      	strb	r3, [r7, #15]
      break;
 8017226:	e016      	b.n	8017256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801722e:	4619      	mov	r1, r3
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 fc27 	bl	8017a84 <USBD_StdEPReq>
 8017236:	4603      	mov	r3, r0
 8017238:	73fb      	strb	r3, [r7, #15]
      break;
 801723a:	e00c      	b.n	8017256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017242:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017246:	b2db      	uxtb	r3, r3
 8017248:	4619      	mov	r1, r3
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f004 ff06 	bl	801c05c <USBD_LL_StallEP>
 8017250:	4603      	mov	r3, r0
 8017252:	73fb      	strb	r3, [r7, #15]
      break;
 8017254:	bf00      	nop
  }

  return ret;
 8017256:	7bfb      	ldrb	r3, [r7, #15]
}
 8017258:	4618      	mov	r0, r3
 801725a:	3710      	adds	r7, #16
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b086      	sub	sp, #24
 8017264:	af00      	add	r7, sp, #0
 8017266:	60f8      	str	r0, [r7, #12]
 8017268:	460b      	mov	r3, r1
 801726a:	607a      	str	r2, [r7, #4]
 801726c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801726e:	2300      	movs	r3, #0
 8017270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017272:	7afb      	ldrb	r3, [r7, #11]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d16e      	bne.n	8017356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801727e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017286:	2b03      	cmp	r3, #3
 8017288:	f040 8098 	bne.w	80173bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	689a      	ldr	r2, [r3, #8]
 8017290:	693b      	ldr	r3, [r7, #16]
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	429a      	cmp	r2, r3
 8017296:	d913      	bls.n	80172c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	689a      	ldr	r2, [r3, #8]
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	68db      	ldr	r3, [r3, #12]
 80172a0:	1ad2      	subs	r2, r2, r3
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	68da      	ldr	r2, [r3, #12]
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	689b      	ldr	r3, [r3, #8]
 80172ae:	4293      	cmp	r3, r2
 80172b0:	bf28      	it	cs
 80172b2:	4613      	movcs	r3, r2
 80172b4:	461a      	mov	r2, r3
 80172b6:	6879      	ldr	r1, [r7, #4]
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	f001 f982 	bl	80185c2 <USBD_CtlContinueRx>
 80172be:	e07d      	b.n	80173bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80172c6:	f003 031f 	and.w	r3, r3, #31
 80172ca:	2b02      	cmp	r3, #2
 80172cc:	d014      	beq.n	80172f8 <USBD_LL_DataOutStage+0x98>
 80172ce:	2b02      	cmp	r3, #2
 80172d0:	d81d      	bhi.n	801730e <USBD_LL_DataOutStage+0xae>
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d002      	beq.n	80172dc <USBD_LL_DataOutStage+0x7c>
 80172d6:	2b01      	cmp	r3, #1
 80172d8:	d003      	beq.n	80172e2 <USBD_LL_DataOutStage+0x82>
 80172da:	e018      	b.n	801730e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80172dc:	2300      	movs	r3, #0
 80172de:	75bb      	strb	r3, [r7, #22]
            break;
 80172e0:	e018      	b.n	8017314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80172e8:	b2db      	uxtb	r3, r3
 80172ea:	4619      	mov	r1, r3
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f000 fa5e 	bl	80177ae <USBD_CoreFindIF>
 80172f2:	4603      	mov	r3, r0
 80172f4:	75bb      	strb	r3, [r7, #22]
            break;
 80172f6:	e00d      	b.n	8017314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80172fe:	b2db      	uxtb	r3, r3
 8017300:	4619      	mov	r1, r3
 8017302:	68f8      	ldr	r0, [r7, #12]
 8017304:	f000 fa60 	bl	80177c8 <USBD_CoreFindEP>
 8017308:	4603      	mov	r3, r0
 801730a:	75bb      	strb	r3, [r7, #22]
            break;
 801730c:	e002      	b.n	8017314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801730e:	2300      	movs	r3, #0
 8017310:	75bb      	strb	r3, [r7, #22]
            break;
 8017312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017314:	7dbb      	ldrb	r3, [r7, #22]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d119      	bne.n	801734e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017320:	b2db      	uxtb	r3, r3
 8017322:	2b03      	cmp	r3, #3
 8017324:	d113      	bne.n	801734e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017326:	7dba      	ldrb	r2, [r7, #22]
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	32ae      	adds	r2, #174	@ 0xae
 801732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017330:	691b      	ldr	r3, [r3, #16]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d00b      	beq.n	801734e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017336:	7dba      	ldrb	r2, [r7, #22]
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801733e:	7dba      	ldrb	r2, [r7, #22]
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	32ae      	adds	r2, #174	@ 0xae
 8017344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017348:	691b      	ldr	r3, [r3, #16]
 801734a:	68f8      	ldr	r0, [r7, #12]
 801734c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801734e:	68f8      	ldr	r0, [r7, #12]
 8017350:	f001 f948 	bl	80185e4 <USBD_CtlSendStatus>
 8017354:	e032      	b.n	80173bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017356:	7afb      	ldrb	r3, [r7, #11]
 8017358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801735c:	b2db      	uxtb	r3, r3
 801735e:	4619      	mov	r1, r3
 8017360:	68f8      	ldr	r0, [r7, #12]
 8017362:	f000 fa31 	bl	80177c8 <USBD_CoreFindEP>
 8017366:	4603      	mov	r3, r0
 8017368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801736a:	7dbb      	ldrb	r3, [r7, #22]
 801736c:	2bff      	cmp	r3, #255	@ 0xff
 801736e:	d025      	beq.n	80173bc <USBD_LL_DataOutStage+0x15c>
 8017370:	7dbb      	ldrb	r3, [r7, #22]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d122      	bne.n	80173bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801737c:	b2db      	uxtb	r3, r3
 801737e:	2b03      	cmp	r3, #3
 8017380:	d117      	bne.n	80173b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017382:	7dba      	ldrb	r2, [r7, #22]
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	32ae      	adds	r2, #174	@ 0xae
 8017388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801738c:	699b      	ldr	r3, [r3, #24]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d00f      	beq.n	80173b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017392:	7dba      	ldrb	r2, [r7, #22]
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801739a:	7dba      	ldrb	r2, [r7, #22]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	32ae      	adds	r2, #174	@ 0xae
 80173a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173a4:	699b      	ldr	r3, [r3, #24]
 80173a6:	7afa      	ldrb	r2, [r7, #11]
 80173a8:	4611      	mov	r1, r2
 80173aa:	68f8      	ldr	r0, [r7, #12]
 80173ac:	4798      	blx	r3
 80173ae:	4603      	mov	r3, r0
 80173b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80173b2:	7dfb      	ldrb	r3, [r7, #23]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d001      	beq.n	80173bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80173b8:	7dfb      	ldrb	r3, [r7, #23]
 80173ba:	e000      	b.n	80173be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80173bc:	2300      	movs	r3, #0
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3718      	adds	r7, #24
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}

080173c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80173c6:	b580      	push	{r7, lr}
 80173c8:	b086      	sub	sp, #24
 80173ca:	af00      	add	r7, sp, #0
 80173cc:	60f8      	str	r0, [r7, #12]
 80173ce:	460b      	mov	r3, r1
 80173d0:	607a      	str	r2, [r7, #4]
 80173d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80173d4:	7afb      	ldrb	r3, [r7, #11]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d16f      	bne.n	80174ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	3314      	adds	r3, #20
 80173de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80173e6:	2b02      	cmp	r3, #2
 80173e8:	d15a      	bne.n	80174a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	689a      	ldr	r2, [r3, #8]
 80173ee:	693b      	ldr	r3, [r7, #16]
 80173f0:	68db      	ldr	r3, [r3, #12]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d914      	bls.n	8017420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	689a      	ldr	r2, [r3, #8]
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	68db      	ldr	r3, [r3, #12]
 80173fe:	1ad2      	subs	r2, r2, r3
 8017400:	693b      	ldr	r3, [r7, #16]
 8017402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017404:	693b      	ldr	r3, [r7, #16]
 8017406:	689b      	ldr	r3, [r3, #8]
 8017408:	461a      	mov	r2, r3
 801740a:	6879      	ldr	r1, [r7, #4]
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f001 f8aa 	bl	8018566 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017412:	2300      	movs	r3, #0
 8017414:	2200      	movs	r2, #0
 8017416:	2100      	movs	r1, #0
 8017418:	68f8      	ldr	r0, [r7, #12]
 801741a:	f004 fec9 	bl	801c1b0 <USBD_LL_PrepareReceive>
 801741e:	e03f      	b.n	80174a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017420:	693b      	ldr	r3, [r7, #16]
 8017422:	68da      	ldr	r2, [r3, #12]
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	689b      	ldr	r3, [r3, #8]
 8017428:	429a      	cmp	r2, r3
 801742a:	d11c      	bne.n	8017466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	685a      	ldr	r2, [r3, #4]
 8017430:	693b      	ldr	r3, [r7, #16]
 8017432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017434:	429a      	cmp	r2, r3
 8017436:	d316      	bcc.n	8017466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017438:	693b      	ldr	r3, [r7, #16]
 801743a:	685a      	ldr	r2, [r3, #4]
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017442:	429a      	cmp	r2, r3
 8017444:	d20f      	bcs.n	8017466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017446:	2200      	movs	r2, #0
 8017448:	2100      	movs	r1, #0
 801744a:	68f8      	ldr	r0, [r7, #12]
 801744c:	f001 f88b 	bl	8018566 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2200      	movs	r2, #0
 8017454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017458:	2300      	movs	r3, #0
 801745a:	2200      	movs	r2, #0
 801745c:	2100      	movs	r1, #0
 801745e:	68f8      	ldr	r0, [r7, #12]
 8017460:	f004 fea6 	bl	801c1b0 <USBD_LL_PrepareReceive>
 8017464:	e01c      	b.n	80174a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801746c:	b2db      	uxtb	r3, r3
 801746e:	2b03      	cmp	r3, #3
 8017470:	d10f      	bne.n	8017492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d009      	beq.n	8017492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2200      	movs	r2, #0
 8017482:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801748c:	68db      	ldr	r3, [r3, #12]
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017492:	2180      	movs	r1, #128	@ 0x80
 8017494:	68f8      	ldr	r0, [r7, #12]
 8017496:	f004 fde1 	bl	801c05c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f001 f8b5 	bl	801860a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d03a      	beq.n	8017520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7ff fe42 	bl	8017134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	2200      	movs	r2, #0
 80174b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80174b8:	e032      	b.n	8017520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80174ba:	7afb      	ldrb	r3, [r7, #11]
 80174bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80174c0:	b2db      	uxtb	r3, r3
 80174c2:	4619      	mov	r1, r3
 80174c4:	68f8      	ldr	r0, [r7, #12]
 80174c6:	f000 f97f 	bl	80177c8 <USBD_CoreFindEP>
 80174ca:	4603      	mov	r3, r0
 80174cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80174ce:	7dfb      	ldrb	r3, [r7, #23]
 80174d0:	2bff      	cmp	r3, #255	@ 0xff
 80174d2:	d025      	beq.n	8017520 <USBD_LL_DataInStage+0x15a>
 80174d4:	7dfb      	ldrb	r3, [r7, #23]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d122      	bne.n	8017520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174e0:	b2db      	uxtb	r3, r3
 80174e2:	2b03      	cmp	r3, #3
 80174e4:	d11c      	bne.n	8017520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80174e6:	7dfa      	ldrb	r2, [r7, #23]
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	32ae      	adds	r2, #174	@ 0xae
 80174ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174f0:	695b      	ldr	r3, [r3, #20]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d014      	beq.n	8017520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80174f6:	7dfa      	ldrb	r2, [r7, #23]
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80174fe:	7dfa      	ldrb	r2, [r7, #23]
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	32ae      	adds	r2, #174	@ 0xae
 8017504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017508:	695b      	ldr	r3, [r3, #20]
 801750a:	7afa      	ldrb	r2, [r7, #11]
 801750c:	4611      	mov	r1, r2
 801750e:	68f8      	ldr	r0, [r7, #12]
 8017510:	4798      	blx	r3
 8017512:	4603      	mov	r3, r0
 8017514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8017516:	7dbb      	ldrb	r3, [r7, #22]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d001      	beq.n	8017520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801751c:	7dbb      	ldrb	r3, [r7, #22]
 801751e:	e000      	b.n	8017522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017520:	2300      	movs	r3, #0
}
 8017522:	4618      	mov	r0, r3
 8017524:	3718      	adds	r7, #24
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}

0801752a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801752a:	b580      	push	{r7, lr}
 801752c:	b084      	sub	sp, #16
 801752e:	af00      	add	r7, sp, #0
 8017530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8017532:	2300      	movs	r3, #0
 8017534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2201      	movs	r2, #1
 801753a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2200      	movs	r2, #0
 8017542:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2200      	movs	r2, #0
 801754a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2200      	movs	r2, #0
 8017550:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	2200      	movs	r2, #0
 8017558:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017562:	2b00      	cmp	r3, #0
 8017564:	d014      	beq.n	8017590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d00e      	beq.n	8017590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017578:	685b      	ldr	r3, [r3, #4]
 801757a:	687a      	ldr	r2, [r7, #4]
 801757c:	6852      	ldr	r2, [r2, #4]
 801757e:	b2d2      	uxtb	r2, r2
 8017580:	4611      	mov	r1, r2
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	4798      	blx	r3
 8017586:	4603      	mov	r3, r0
 8017588:	2b00      	cmp	r3, #0
 801758a:	d001      	beq.n	8017590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801758c:	2303      	movs	r3, #3
 801758e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017590:	2340      	movs	r3, #64	@ 0x40
 8017592:	2200      	movs	r2, #0
 8017594:	2100      	movs	r1, #0
 8017596:	6878      	ldr	r0, [r7, #4]
 8017598:	f004 fd1b 	bl	801bfd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2201      	movs	r2, #1
 80175a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2240      	movs	r2, #64	@ 0x40
 80175a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80175ac:	2340      	movs	r3, #64	@ 0x40
 80175ae:	2200      	movs	r2, #0
 80175b0:	2180      	movs	r1, #128	@ 0x80
 80175b2:	6878      	ldr	r0, [r7, #4]
 80175b4:	f004 fd0d 	bl	801bfd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2201      	movs	r2, #1
 80175bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	2240      	movs	r2, #64	@ 0x40
 80175c2:	621a      	str	r2, [r3, #32]

  return ret;
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3710      	adds	r7, #16
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}

080175ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80175ce:	b480      	push	{r7}
 80175d0:	b083      	sub	sp, #12
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	6078      	str	r0, [r7, #4]
 80175d6:	460b      	mov	r3, r1
 80175d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	78fa      	ldrb	r2, [r7, #3]
 80175de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80175e0:	2300      	movs	r3, #0
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	370c      	adds	r7, #12
 80175e6:	46bd      	mov	sp, r7
 80175e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ec:	4770      	bx	lr

080175ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80175ee:	b480      	push	{r7}
 80175f0:	b083      	sub	sp, #12
 80175f2:	af00      	add	r7, sp, #0
 80175f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175fc:	b2da      	uxtb	r2, r3
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2204      	movs	r2, #4
 8017608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801760c:	2300      	movs	r3, #0
}
 801760e:	4618      	mov	r0, r3
 8017610:	370c      	adds	r7, #12
 8017612:	46bd      	mov	sp, r7
 8017614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017618:	4770      	bx	lr

0801761a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801761a:	b480      	push	{r7}
 801761c:	b083      	sub	sp, #12
 801761e:	af00      	add	r7, sp, #0
 8017620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017628:	b2db      	uxtb	r3, r3
 801762a:	2b04      	cmp	r3, #4
 801762c:	d106      	bne.n	801763c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8017634:	b2da      	uxtb	r2, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801763c:	2300      	movs	r3, #0
}
 801763e:	4618      	mov	r0, r3
 8017640:	370c      	adds	r7, #12
 8017642:	46bd      	mov	sp, r7
 8017644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017648:	4770      	bx	lr

0801764a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801764a:	b580      	push	{r7, lr}
 801764c:	b082      	sub	sp, #8
 801764e:	af00      	add	r7, sp, #0
 8017650:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017658:	b2db      	uxtb	r3, r3
 801765a:	2b03      	cmp	r3, #3
 801765c:	d110      	bne.n	8017680 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017664:	2b00      	cmp	r3, #0
 8017666:	d00b      	beq.n	8017680 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801766e:	69db      	ldr	r3, [r3, #28]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d005      	beq.n	8017680 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801767a:	69db      	ldr	r3, [r3, #28]
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8017680:	2300      	movs	r3, #0
}
 8017682:	4618      	mov	r0, r3
 8017684:	3708      	adds	r7, #8
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}

0801768a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801768a:	b580      	push	{r7, lr}
 801768c:	b082      	sub	sp, #8
 801768e:	af00      	add	r7, sp, #0
 8017690:	6078      	str	r0, [r7, #4]
 8017692:	460b      	mov	r3, r1
 8017694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	32ae      	adds	r2, #174	@ 0xae
 80176a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d101      	bne.n	80176ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80176a8:	2303      	movs	r3, #3
 80176aa:	e01c      	b.n	80176e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	2b03      	cmp	r3, #3
 80176b6:	d115      	bne.n	80176e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	32ae      	adds	r2, #174	@ 0xae
 80176c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176c6:	6a1b      	ldr	r3, [r3, #32]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d00b      	beq.n	80176e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	32ae      	adds	r2, #174	@ 0xae
 80176d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176da:	6a1b      	ldr	r3, [r3, #32]
 80176dc:	78fa      	ldrb	r2, [r7, #3]
 80176de:	4611      	mov	r1, r2
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80176e4:	2300      	movs	r3, #0
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3708      	adds	r7, #8
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd80      	pop	{r7, pc}

080176ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80176ee:	b580      	push	{r7, lr}
 80176f0:	b082      	sub	sp, #8
 80176f2:	af00      	add	r7, sp, #0
 80176f4:	6078      	str	r0, [r7, #4]
 80176f6:	460b      	mov	r3, r1
 80176f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	32ae      	adds	r2, #174	@ 0xae
 8017704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d101      	bne.n	8017710 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801770c:	2303      	movs	r3, #3
 801770e:	e01c      	b.n	801774a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017716:	b2db      	uxtb	r3, r3
 8017718:	2b03      	cmp	r3, #3
 801771a:	d115      	bne.n	8017748 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	32ae      	adds	r2, #174	@ 0xae
 8017726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801772c:	2b00      	cmp	r3, #0
 801772e:	d00b      	beq.n	8017748 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	32ae      	adds	r2, #174	@ 0xae
 801773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017740:	78fa      	ldrb	r2, [r7, #3]
 8017742:	4611      	mov	r1, r2
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017748:	2300      	movs	r3, #0
}
 801774a:	4618      	mov	r0, r3
 801774c:	3708      	adds	r7, #8
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}

08017752 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017752:	b480      	push	{r7}
 8017754:	b083      	sub	sp, #12
 8017756:	af00      	add	r7, sp, #0
 8017758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801775a:	2300      	movs	r3, #0
}
 801775c:	4618      	mov	r0, r3
 801775e:	370c      	adds	r7, #12
 8017760:	46bd      	mov	sp, r7
 8017762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017766:	4770      	bx	lr

08017768 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8017770:	2300      	movs	r3, #0
 8017772:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2201      	movs	r2, #1
 8017778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017782:	2b00      	cmp	r3, #0
 8017784:	d00e      	beq.n	80177a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	687a      	ldr	r2, [r7, #4]
 8017790:	6852      	ldr	r2, [r2, #4]
 8017792:	b2d2      	uxtb	r2, r2
 8017794:	4611      	mov	r1, r2
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	4798      	blx	r3
 801779a:	4603      	mov	r3, r0
 801779c:	2b00      	cmp	r3, #0
 801779e:	d001      	beq.n	80177a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80177a0:	2303      	movs	r3, #3
 80177a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80177a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3710      	adds	r7, #16
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}

080177ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80177ae:	b480      	push	{r7}
 80177b0:	b083      	sub	sp, #12
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
 80177b6:	460b      	mov	r3, r1
 80177b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80177ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80177bc:	4618      	mov	r0, r3
 80177be:	370c      	adds	r7, #12
 80177c0:	46bd      	mov	sp, r7
 80177c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c6:	4770      	bx	lr

080177c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80177c8:	b480      	push	{r7}
 80177ca:	b083      	sub	sp, #12
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
 80177d0:	460b      	mov	r3, r1
 80177d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80177d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e0:	4770      	bx	lr

080177e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80177e2:	b580      	push	{r7, lr}
 80177e4:	b086      	sub	sp, #24
 80177e6:	af00      	add	r7, sp, #0
 80177e8:	6078      	str	r0, [r7, #4]
 80177ea:	460b      	mov	r3, r1
 80177ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	885b      	ldrh	r3, [r3, #2]
 80177fe:	b29b      	uxth	r3, r3
 8017800:	68fa      	ldr	r2, [r7, #12]
 8017802:	7812      	ldrb	r2, [r2, #0]
 8017804:	4293      	cmp	r3, r2
 8017806:	d91f      	bls.n	8017848 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801780e:	e013      	b.n	8017838 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017810:	f107 030a 	add.w	r3, r7, #10
 8017814:	4619      	mov	r1, r3
 8017816:	6978      	ldr	r0, [r7, #20]
 8017818:	f000 f81b 	bl	8017852 <USBD_GetNextDesc>
 801781c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	785b      	ldrb	r3, [r3, #1]
 8017822:	2b05      	cmp	r3, #5
 8017824:	d108      	bne.n	8017838 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8017826:	697b      	ldr	r3, [r7, #20]
 8017828:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	789b      	ldrb	r3, [r3, #2]
 801782e:	78fa      	ldrb	r2, [r7, #3]
 8017830:	429a      	cmp	r2, r3
 8017832:	d008      	beq.n	8017846 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8017834:	2300      	movs	r3, #0
 8017836:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	885b      	ldrh	r3, [r3, #2]
 801783c:	b29a      	uxth	r2, r3
 801783e:	897b      	ldrh	r3, [r7, #10]
 8017840:	429a      	cmp	r2, r3
 8017842:	d8e5      	bhi.n	8017810 <USBD_GetEpDesc+0x2e>
 8017844:	e000      	b.n	8017848 <USBD_GetEpDesc+0x66>
          break;
 8017846:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8017848:	693b      	ldr	r3, [r7, #16]
}
 801784a:	4618      	mov	r0, r3
 801784c:	3718      	adds	r7, #24
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}

08017852 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017852:	b480      	push	{r7}
 8017854:	b085      	sub	sp, #20
 8017856:	af00      	add	r7, sp, #0
 8017858:	6078      	str	r0, [r7, #4]
 801785a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	881b      	ldrh	r3, [r3, #0]
 8017864:	68fa      	ldr	r2, [r7, #12]
 8017866:	7812      	ldrb	r2, [r2, #0]
 8017868:	4413      	add	r3, r2
 801786a:	b29a      	uxth	r2, r3
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	461a      	mov	r2, r3
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	4413      	add	r3, r2
 801787a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801787c:	68fb      	ldr	r3, [r7, #12]
}
 801787e:	4618      	mov	r0, r3
 8017880:	3714      	adds	r7, #20
 8017882:	46bd      	mov	sp, r7
 8017884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017888:	4770      	bx	lr

0801788a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801788a:	b480      	push	{r7}
 801788c:	b087      	sub	sp, #28
 801788e:	af00      	add	r7, sp, #0
 8017890:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801789c:	697b      	ldr	r3, [r7, #20]
 801789e:	3301      	adds	r3, #1
 80178a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80178a8:	8a3b      	ldrh	r3, [r7, #16]
 80178aa:	021b      	lsls	r3, r3, #8
 80178ac:	b21a      	sxth	r2, r3
 80178ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80178b2:	4313      	orrs	r3, r2
 80178b4:	b21b      	sxth	r3, r3
 80178b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80178b8:	89fb      	ldrh	r3, [r7, #14]
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	371c      	adds	r7, #28
 80178be:	46bd      	mov	sp, r7
 80178c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c4:	4770      	bx	lr
	...

080178c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80178d2:	2300      	movs	r3, #0
 80178d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80178de:	2b40      	cmp	r3, #64	@ 0x40
 80178e0:	d005      	beq.n	80178ee <USBD_StdDevReq+0x26>
 80178e2:	2b40      	cmp	r3, #64	@ 0x40
 80178e4:	d857      	bhi.n	8017996 <USBD_StdDevReq+0xce>
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d00f      	beq.n	801790a <USBD_StdDevReq+0x42>
 80178ea:	2b20      	cmp	r3, #32
 80178ec:	d153      	bne.n	8017996 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	32ae      	adds	r2, #174	@ 0xae
 80178f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178fc:	689b      	ldr	r3, [r3, #8]
 80178fe:	6839      	ldr	r1, [r7, #0]
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	4798      	blx	r3
 8017904:	4603      	mov	r3, r0
 8017906:	73fb      	strb	r3, [r7, #15]
      break;
 8017908:	e04a      	b.n	80179a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801790a:	683b      	ldr	r3, [r7, #0]
 801790c:	785b      	ldrb	r3, [r3, #1]
 801790e:	2b09      	cmp	r3, #9
 8017910:	d83b      	bhi.n	801798a <USBD_StdDevReq+0xc2>
 8017912:	a201      	add	r2, pc, #4	@ (adr r2, 8017918 <USBD_StdDevReq+0x50>)
 8017914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017918:	0801796d 	.word	0x0801796d
 801791c:	08017981 	.word	0x08017981
 8017920:	0801798b 	.word	0x0801798b
 8017924:	08017977 	.word	0x08017977
 8017928:	0801798b 	.word	0x0801798b
 801792c:	0801794b 	.word	0x0801794b
 8017930:	08017941 	.word	0x08017941
 8017934:	0801798b 	.word	0x0801798b
 8017938:	08017963 	.word	0x08017963
 801793c:	08017955 	.word	0x08017955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017940:	6839      	ldr	r1, [r7, #0]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f000 fa3c 	bl	8017dc0 <USBD_GetDescriptor>
          break;
 8017948:	e024      	b.n	8017994 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801794a:	6839      	ldr	r1, [r7, #0]
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f000 fba1 	bl	8018094 <USBD_SetAddress>
          break;
 8017952:	e01f      	b.n	8017994 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017954:	6839      	ldr	r1, [r7, #0]
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f000 fbe0 	bl	801811c <USBD_SetConfig>
 801795c:	4603      	mov	r3, r0
 801795e:	73fb      	strb	r3, [r7, #15]
          break;
 8017960:	e018      	b.n	8017994 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017962:	6839      	ldr	r1, [r7, #0]
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f000 fc83 	bl	8018270 <USBD_GetConfig>
          break;
 801796a:	e013      	b.n	8017994 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801796c:	6839      	ldr	r1, [r7, #0]
 801796e:	6878      	ldr	r0, [r7, #4]
 8017970:	f000 fcb4 	bl	80182dc <USBD_GetStatus>
          break;
 8017974:	e00e      	b.n	8017994 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017976:	6839      	ldr	r1, [r7, #0]
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f000 fce3 	bl	8018344 <USBD_SetFeature>
          break;
 801797e:	e009      	b.n	8017994 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017980:	6839      	ldr	r1, [r7, #0]
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f000 fd07 	bl	8018396 <USBD_ClrFeature>
          break;
 8017988:	e004      	b.n	8017994 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801798a:	6839      	ldr	r1, [r7, #0]
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f000 fd5e 	bl	801844e <USBD_CtlError>
          break;
 8017992:	bf00      	nop
      }
      break;
 8017994:	e004      	b.n	80179a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017996:	6839      	ldr	r1, [r7, #0]
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f000 fd58 	bl	801844e <USBD_CtlError>
      break;
 801799e:	bf00      	nop
  }

  return ret;
 80179a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3710      	adds	r7, #16
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}
 80179aa:	bf00      	nop

080179ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80179b6:	2300      	movs	r3, #0
 80179b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80179c2:	2b40      	cmp	r3, #64	@ 0x40
 80179c4:	d005      	beq.n	80179d2 <USBD_StdItfReq+0x26>
 80179c6:	2b40      	cmp	r3, #64	@ 0x40
 80179c8:	d852      	bhi.n	8017a70 <USBD_StdItfReq+0xc4>
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d001      	beq.n	80179d2 <USBD_StdItfReq+0x26>
 80179ce:	2b20      	cmp	r3, #32
 80179d0:	d14e      	bne.n	8017a70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80179d8:	b2db      	uxtb	r3, r3
 80179da:	3b01      	subs	r3, #1
 80179dc:	2b02      	cmp	r3, #2
 80179de:	d840      	bhi.n	8017a62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80179e0:	683b      	ldr	r3, [r7, #0]
 80179e2:	889b      	ldrh	r3, [r3, #4]
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	2b01      	cmp	r3, #1
 80179e8:	d836      	bhi.n	8017a58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	889b      	ldrh	r3, [r3, #4]
 80179ee:	b2db      	uxtb	r3, r3
 80179f0:	4619      	mov	r1, r3
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f7ff fedb 	bl	80177ae <USBD_CoreFindIF>
 80179f8:	4603      	mov	r3, r0
 80179fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80179fc:	7bbb      	ldrb	r3, [r7, #14]
 80179fe:	2bff      	cmp	r3, #255	@ 0xff
 8017a00:	d01d      	beq.n	8017a3e <USBD_StdItfReq+0x92>
 8017a02:	7bbb      	ldrb	r3, [r7, #14]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d11a      	bne.n	8017a3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8017a08:	7bba      	ldrb	r2, [r7, #14]
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	32ae      	adds	r2, #174	@ 0xae
 8017a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a12:	689b      	ldr	r3, [r3, #8]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d00f      	beq.n	8017a38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017a18:	7bba      	ldrb	r2, [r7, #14]
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017a20:	7bba      	ldrb	r2, [r7, #14]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	32ae      	adds	r2, #174	@ 0xae
 8017a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a2a:	689b      	ldr	r3, [r3, #8]
 8017a2c:	6839      	ldr	r1, [r7, #0]
 8017a2e:	6878      	ldr	r0, [r7, #4]
 8017a30:	4798      	blx	r3
 8017a32:	4603      	mov	r3, r0
 8017a34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017a36:	e004      	b.n	8017a42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017a38:	2303      	movs	r3, #3
 8017a3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017a3c:	e001      	b.n	8017a42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8017a3e:	2303      	movs	r3, #3
 8017a40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	88db      	ldrh	r3, [r3, #6]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d110      	bne.n	8017a6c <USBD_StdItfReq+0xc0>
 8017a4a:	7bfb      	ldrb	r3, [r7, #15]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d10d      	bne.n	8017a6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017a50:	6878      	ldr	r0, [r7, #4]
 8017a52:	f000 fdc7 	bl	80185e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017a56:	e009      	b.n	8017a6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017a58:	6839      	ldr	r1, [r7, #0]
 8017a5a:	6878      	ldr	r0, [r7, #4]
 8017a5c:	f000 fcf7 	bl	801844e <USBD_CtlError>
          break;
 8017a60:	e004      	b.n	8017a6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8017a62:	6839      	ldr	r1, [r7, #0]
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f000 fcf2 	bl	801844e <USBD_CtlError>
          break;
 8017a6a:	e000      	b.n	8017a6e <USBD_StdItfReq+0xc2>
          break;
 8017a6c:	bf00      	nop
      }
      break;
 8017a6e:	e004      	b.n	8017a7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8017a70:	6839      	ldr	r1, [r7, #0]
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f000 fceb 	bl	801844e <USBD_CtlError>
      break;
 8017a78:	bf00      	nop
  }

  return ret;
 8017a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	3710      	adds	r7, #16
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	889b      	ldrh	r3, [r3, #4]
 8017a96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017aa0:	2b40      	cmp	r3, #64	@ 0x40
 8017aa2:	d007      	beq.n	8017ab4 <USBD_StdEPReq+0x30>
 8017aa4:	2b40      	cmp	r3, #64	@ 0x40
 8017aa6:	f200 817f 	bhi.w	8017da8 <USBD_StdEPReq+0x324>
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d02a      	beq.n	8017b04 <USBD_StdEPReq+0x80>
 8017aae:	2b20      	cmp	r3, #32
 8017ab0:	f040 817a 	bne.w	8017da8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017ab4:	7bbb      	ldrb	r3, [r7, #14]
 8017ab6:	4619      	mov	r1, r3
 8017ab8:	6878      	ldr	r0, [r7, #4]
 8017aba:	f7ff fe85 	bl	80177c8 <USBD_CoreFindEP>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017ac2:	7b7b      	ldrb	r3, [r7, #13]
 8017ac4:	2bff      	cmp	r3, #255	@ 0xff
 8017ac6:	f000 8174 	beq.w	8017db2 <USBD_StdEPReq+0x32e>
 8017aca:	7b7b      	ldrb	r3, [r7, #13]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	f040 8170 	bne.w	8017db2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8017ad2:	7b7a      	ldrb	r2, [r7, #13]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017ada:	7b7a      	ldrb	r2, [r7, #13]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	32ae      	adds	r2, #174	@ 0xae
 8017ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ae4:	689b      	ldr	r3, [r3, #8]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	f000 8163 	beq.w	8017db2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017aec:	7b7a      	ldrb	r2, [r7, #13]
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	32ae      	adds	r2, #174	@ 0xae
 8017af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017af6:	689b      	ldr	r3, [r3, #8]
 8017af8:	6839      	ldr	r1, [r7, #0]
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	4798      	blx	r3
 8017afe:	4603      	mov	r3, r0
 8017b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8017b02:	e156      	b.n	8017db2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	785b      	ldrb	r3, [r3, #1]
 8017b08:	2b03      	cmp	r3, #3
 8017b0a:	d008      	beq.n	8017b1e <USBD_StdEPReq+0x9a>
 8017b0c:	2b03      	cmp	r3, #3
 8017b0e:	f300 8145 	bgt.w	8017d9c <USBD_StdEPReq+0x318>
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	f000 809b 	beq.w	8017c4e <USBD_StdEPReq+0x1ca>
 8017b18:	2b01      	cmp	r3, #1
 8017b1a:	d03c      	beq.n	8017b96 <USBD_StdEPReq+0x112>
 8017b1c:	e13e      	b.n	8017d9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b24:	b2db      	uxtb	r3, r3
 8017b26:	2b02      	cmp	r3, #2
 8017b28:	d002      	beq.n	8017b30 <USBD_StdEPReq+0xac>
 8017b2a:	2b03      	cmp	r3, #3
 8017b2c:	d016      	beq.n	8017b5c <USBD_StdEPReq+0xd8>
 8017b2e:	e02c      	b.n	8017b8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017b30:	7bbb      	ldrb	r3, [r7, #14]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d00d      	beq.n	8017b52 <USBD_StdEPReq+0xce>
 8017b36:	7bbb      	ldrb	r3, [r7, #14]
 8017b38:	2b80      	cmp	r3, #128	@ 0x80
 8017b3a:	d00a      	beq.n	8017b52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017b3c:	7bbb      	ldrb	r3, [r7, #14]
 8017b3e:	4619      	mov	r1, r3
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f004 fa8b 	bl	801c05c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017b46:	2180      	movs	r1, #128	@ 0x80
 8017b48:	6878      	ldr	r0, [r7, #4]
 8017b4a:	f004 fa87 	bl	801c05c <USBD_LL_StallEP>
 8017b4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017b50:	e020      	b.n	8017b94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8017b52:	6839      	ldr	r1, [r7, #0]
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f000 fc7a 	bl	801844e <USBD_CtlError>
              break;
 8017b5a:	e01b      	b.n	8017b94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	885b      	ldrh	r3, [r3, #2]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d10e      	bne.n	8017b82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017b64:	7bbb      	ldrb	r3, [r7, #14]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d00b      	beq.n	8017b82 <USBD_StdEPReq+0xfe>
 8017b6a:	7bbb      	ldrb	r3, [r7, #14]
 8017b6c:	2b80      	cmp	r3, #128	@ 0x80
 8017b6e:	d008      	beq.n	8017b82 <USBD_StdEPReq+0xfe>
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	88db      	ldrh	r3, [r3, #6]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d104      	bne.n	8017b82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017b78:	7bbb      	ldrb	r3, [r7, #14]
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f004 fa6d 	bl	801c05c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f000 fd2e 	bl	80185e4 <USBD_CtlSendStatus>

              break;
 8017b88:	e004      	b.n	8017b94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017b8a:	6839      	ldr	r1, [r7, #0]
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f000 fc5e 	bl	801844e <USBD_CtlError>
              break;
 8017b92:	bf00      	nop
          }
          break;
 8017b94:	e107      	b.n	8017da6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b9c:	b2db      	uxtb	r3, r3
 8017b9e:	2b02      	cmp	r3, #2
 8017ba0:	d002      	beq.n	8017ba8 <USBD_StdEPReq+0x124>
 8017ba2:	2b03      	cmp	r3, #3
 8017ba4:	d016      	beq.n	8017bd4 <USBD_StdEPReq+0x150>
 8017ba6:	e04b      	b.n	8017c40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017ba8:	7bbb      	ldrb	r3, [r7, #14]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d00d      	beq.n	8017bca <USBD_StdEPReq+0x146>
 8017bae:	7bbb      	ldrb	r3, [r7, #14]
 8017bb0:	2b80      	cmp	r3, #128	@ 0x80
 8017bb2:	d00a      	beq.n	8017bca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017bb4:	7bbb      	ldrb	r3, [r7, #14]
 8017bb6:	4619      	mov	r1, r3
 8017bb8:	6878      	ldr	r0, [r7, #4]
 8017bba:	f004 fa4f 	bl	801c05c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017bbe:	2180      	movs	r1, #128	@ 0x80
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f004 fa4b 	bl	801c05c <USBD_LL_StallEP>
 8017bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017bc8:	e040      	b.n	8017c4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017bca:	6839      	ldr	r1, [r7, #0]
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f000 fc3e 	bl	801844e <USBD_CtlError>
              break;
 8017bd2:	e03b      	b.n	8017c4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	885b      	ldrh	r3, [r3, #2]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d136      	bne.n	8017c4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017bdc:	7bbb      	ldrb	r3, [r7, #14]
 8017bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d004      	beq.n	8017bf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017be6:	7bbb      	ldrb	r3, [r7, #14]
 8017be8:	4619      	mov	r1, r3
 8017bea:	6878      	ldr	r0, [r7, #4]
 8017bec:	f004 fa55 	bl	801c09a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f000 fcf7 	bl	80185e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017bf6:	7bbb      	ldrb	r3, [r7, #14]
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f7ff fde4 	bl	80177c8 <USBD_CoreFindEP>
 8017c00:	4603      	mov	r3, r0
 8017c02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017c04:	7b7b      	ldrb	r3, [r7, #13]
 8017c06:	2bff      	cmp	r3, #255	@ 0xff
 8017c08:	d01f      	beq.n	8017c4a <USBD_StdEPReq+0x1c6>
 8017c0a:	7b7b      	ldrb	r3, [r7, #13]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d11c      	bne.n	8017c4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017c10:	7b7a      	ldrb	r2, [r7, #13]
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017c18:	7b7a      	ldrb	r2, [r7, #13]
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	32ae      	adds	r2, #174	@ 0xae
 8017c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c22:	689b      	ldr	r3, [r3, #8]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d010      	beq.n	8017c4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017c28:	7b7a      	ldrb	r2, [r7, #13]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	32ae      	adds	r2, #174	@ 0xae
 8017c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c32:	689b      	ldr	r3, [r3, #8]
 8017c34:	6839      	ldr	r1, [r7, #0]
 8017c36:	6878      	ldr	r0, [r7, #4]
 8017c38:	4798      	blx	r3
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8017c3e:	e004      	b.n	8017c4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017c40:	6839      	ldr	r1, [r7, #0]
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f000 fc03 	bl	801844e <USBD_CtlError>
              break;
 8017c48:	e000      	b.n	8017c4c <USBD_StdEPReq+0x1c8>
              break;
 8017c4a:	bf00      	nop
          }
          break;
 8017c4c:	e0ab      	b.n	8017da6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	2b02      	cmp	r3, #2
 8017c58:	d002      	beq.n	8017c60 <USBD_StdEPReq+0x1dc>
 8017c5a:	2b03      	cmp	r3, #3
 8017c5c:	d032      	beq.n	8017cc4 <USBD_StdEPReq+0x240>
 8017c5e:	e097      	b.n	8017d90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017c60:	7bbb      	ldrb	r3, [r7, #14]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d007      	beq.n	8017c76 <USBD_StdEPReq+0x1f2>
 8017c66:	7bbb      	ldrb	r3, [r7, #14]
 8017c68:	2b80      	cmp	r3, #128	@ 0x80
 8017c6a:	d004      	beq.n	8017c76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017c6c:	6839      	ldr	r1, [r7, #0]
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f000 fbed 	bl	801844e <USBD_CtlError>
                break;
 8017c74:	e091      	b.n	8017d9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017c76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	da0b      	bge.n	8017c96 <USBD_StdEPReq+0x212>
 8017c7e:	7bbb      	ldrb	r3, [r7, #14]
 8017c80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017c84:	4613      	mov	r3, r2
 8017c86:	009b      	lsls	r3, r3, #2
 8017c88:	4413      	add	r3, r2
 8017c8a:	009b      	lsls	r3, r3, #2
 8017c8c:	3310      	adds	r3, #16
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	4413      	add	r3, r2
 8017c92:	3304      	adds	r3, #4
 8017c94:	e00b      	b.n	8017cae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017c96:	7bbb      	ldrb	r3, [r7, #14]
 8017c98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	009b      	lsls	r3, r3, #2
 8017ca0:	4413      	add	r3, r2
 8017ca2:	009b      	lsls	r3, r3, #2
 8017ca4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017ca8:	687a      	ldr	r2, [r7, #4]
 8017caa:	4413      	add	r3, r2
 8017cac:	3304      	adds	r3, #4
 8017cae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	2202      	movs	r2, #2
 8017cba:	4619      	mov	r1, r3
 8017cbc:	6878      	ldr	r0, [r7, #4]
 8017cbe:	f000 fc37 	bl	8018530 <USBD_CtlSendData>
              break;
 8017cc2:	e06a      	b.n	8017d9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	da11      	bge.n	8017cf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017ccc:	7bbb      	ldrb	r3, [r7, #14]
 8017cce:	f003 020f 	and.w	r2, r3, #15
 8017cd2:	6879      	ldr	r1, [r7, #4]
 8017cd4:	4613      	mov	r3, r2
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	4413      	add	r3, r2
 8017cda:	009b      	lsls	r3, r3, #2
 8017cdc:	440b      	add	r3, r1
 8017cde:	3324      	adds	r3, #36	@ 0x24
 8017ce0:	881b      	ldrh	r3, [r3, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d117      	bne.n	8017d16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017ce6:	6839      	ldr	r1, [r7, #0]
 8017ce8:	6878      	ldr	r0, [r7, #4]
 8017cea:	f000 fbb0 	bl	801844e <USBD_CtlError>
                  break;
 8017cee:	e054      	b.n	8017d9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017cf0:	7bbb      	ldrb	r3, [r7, #14]
 8017cf2:	f003 020f 	and.w	r2, r3, #15
 8017cf6:	6879      	ldr	r1, [r7, #4]
 8017cf8:	4613      	mov	r3, r2
 8017cfa:	009b      	lsls	r3, r3, #2
 8017cfc:	4413      	add	r3, r2
 8017cfe:	009b      	lsls	r3, r3, #2
 8017d00:	440b      	add	r3, r1
 8017d02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017d06:	881b      	ldrh	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d104      	bne.n	8017d16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017d0c:	6839      	ldr	r1, [r7, #0]
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f000 fb9d 	bl	801844e <USBD_CtlError>
                  break;
 8017d14:	e041      	b.n	8017d9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	da0b      	bge.n	8017d36 <USBD_StdEPReq+0x2b2>
 8017d1e:	7bbb      	ldrb	r3, [r7, #14]
 8017d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017d24:	4613      	mov	r3, r2
 8017d26:	009b      	lsls	r3, r3, #2
 8017d28:	4413      	add	r3, r2
 8017d2a:	009b      	lsls	r3, r3, #2
 8017d2c:	3310      	adds	r3, #16
 8017d2e:	687a      	ldr	r2, [r7, #4]
 8017d30:	4413      	add	r3, r2
 8017d32:	3304      	adds	r3, #4
 8017d34:	e00b      	b.n	8017d4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017d36:	7bbb      	ldrb	r3, [r7, #14]
 8017d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017d3c:	4613      	mov	r3, r2
 8017d3e:	009b      	lsls	r3, r3, #2
 8017d40:	4413      	add	r3, r2
 8017d42:	009b      	lsls	r3, r3, #2
 8017d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017d48:	687a      	ldr	r2, [r7, #4]
 8017d4a:	4413      	add	r3, r2
 8017d4c:	3304      	adds	r3, #4
 8017d4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017d50:	7bbb      	ldrb	r3, [r7, #14]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d002      	beq.n	8017d5c <USBD_StdEPReq+0x2d8>
 8017d56:	7bbb      	ldrb	r3, [r7, #14]
 8017d58:	2b80      	cmp	r3, #128	@ 0x80
 8017d5a:	d103      	bne.n	8017d64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017d5c:	68bb      	ldr	r3, [r7, #8]
 8017d5e:	2200      	movs	r2, #0
 8017d60:	601a      	str	r2, [r3, #0]
 8017d62:	e00e      	b.n	8017d82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017d64:	7bbb      	ldrb	r3, [r7, #14]
 8017d66:	4619      	mov	r1, r3
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f004 f9b5 	bl	801c0d8 <USBD_LL_IsStallEP>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d003      	beq.n	8017d7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	2201      	movs	r2, #1
 8017d78:	601a      	str	r2, [r3, #0]
 8017d7a:	e002      	b.n	8017d82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	2202      	movs	r2, #2
 8017d86:	4619      	mov	r1, r3
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f000 fbd1 	bl	8018530 <USBD_CtlSendData>
              break;
 8017d8e:	e004      	b.n	8017d9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017d90:	6839      	ldr	r1, [r7, #0]
 8017d92:	6878      	ldr	r0, [r7, #4]
 8017d94:	f000 fb5b 	bl	801844e <USBD_CtlError>
              break;
 8017d98:	bf00      	nop
          }
          break;
 8017d9a:	e004      	b.n	8017da6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017d9c:	6839      	ldr	r1, [r7, #0]
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	f000 fb55 	bl	801844e <USBD_CtlError>
          break;
 8017da4:	bf00      	nop
      }
      break;
 8017da6:	e005      	b.n	8017db4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017da8:	6839      	ldr	r1, [r7, #0]
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f000 fb4f 	bl	801844e <USBD_CtlError>
      break;
 8017db0:	e000      	b.n	8017db4 <USBD_StdEPReq+0x330>
      break;
 8017db2:	bf00      	nop
  }

  return ret;
 8017db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
	...

08017dc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017dd6:	683b      	ldr	r3, [r7, #0]
 8017dd8:	885b      	ldrh	r3, [r3, #2]
 8017dda:	0a1b      	lsrs	r3, r3, #8
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	3b01      	subs	r3, #1
 8017de0:	2b06      	cmp	r3, #6
 8017de2:	f200 8128 	bhi.w	8018036 <USBD_GetDescriptor+0x276>
 8017de6:	a201      	add	r2, pc, #4	@ (adr r2, 8017dec <USBD_GetDescriptor+0x2c>)
 8017de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dec:	08017e09 	.word	0x08017e09
 8017df0:	08017e21 	.word	0x08017e21
 8017df4:	08017e61 	.word	0x08017e61
 8017df8:	08018037 	.word	0x08018037
 8017dfc:	08018037 	.word	0x08018037
 8017e00:	08017fd7 	.word	0x08017fd7
 8017e04:	08018003 	.word	0x08018003
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	687a      	ldr	r2, [r7, #4]
 8017e12:	7c12      	ldrb	r2, [r2, #16]
 8017e14:	f107 0108 	add.w	r1, r7, #8
 8017e18:	4610      	mov	r0, r2
 8017e1a:	4798      	blx	r3
 8017e1c:	60f8      	str	r0, [r7, #12]
      break;
 8017e1e:	e112      	b.n	8018046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	7c1b      	ldrb	r3, [r3, #16]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d10d      	bne.n	8017e44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e30:	f107 0208 	add.w	r2, r7, #8
 8017e34:	4610      	mov	r0, r2
 8017e36:	4798      	blx	r3
 8017e38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	3301      	adds	r3, #1
 8017e3e:	2202      	movs	r2, #2
 8017e40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017e42:	e100      	b.n	8018046 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e4c:	f107 0208 	add.w	r2, r7, #8
 8017e50:	4610      	mov	r0, r2
 8017e52:	4798      	blx	r3
 8017e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	3301      	adds	r3, #1
 8017e5a:	2202      	movs	r2, #2
 8017e5c:	701a      	strb	r2, [r3, #0]
      break;
 8017e5e:	e0f2      	b.n	8018046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	885b      	ldrh	r3, [r3, #2]
 8017e64:	b2db      	uxtb	r3, r3
 8017e66:	2b05      	cmp	r3, #5
 8017e68:	f200 80ac 	bhi.w	8017fc4 <USBD_GetDescriptor+0x204>
 8017e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8017e74 <USBD_GetDescriptor+0xb4>)
 8017e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e72:	bf00      	nop
 8017e74:	08017e8d 	.word	0x08017e8d
 8017e78:	08017ec1 	.word	0x08017ec1
 8017e7c:	08017ef5 	.word	0x08017ef5
 8017e80:	08017f29 	.word	0x08017f29
 8017e84:	08017f5d 	.word	0x08017f5d
 8017e88:	08017f91 	.word	0x08017f91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017e92:	685b      	ldr	r3, [r3, #4]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d00b      	beq.n	8017eb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	687a      	ldr	r2, [r7, #4]
 8017ea2:	7c12      	ldrb	r2, [r2, #16]
 8017ea4:	f107 0108 	add.w	r1, r7, #8
 8017ea8:	4610      	mov	r0, r2
 8017eaa:	4798      	blx	r3
 8017eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017eae:	e091      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017eb0:	6839      	ldr	r1, [r7, #0]
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f000 facb 	bl	801844e <USBD_CtlError>
            err++;
 8017eb8:	7afb      	ldrb	r3, [r7, #11]
 8017eba:	3301      	adds	r3, #1
 8017ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8017ebe:	e089      	b.n	8017fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ec6:	689b      	ldr	r3, [r3, #8]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d00b      	beq.n	8017ee4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ed2:	689b      	ldr	r3, [r3, #8]
 8017ed4:	687a      	ldr	r2, [r7, #4]
 8017ed6:	7c12      	ldrb	r2, [r2, #16]
 8017ed8:	f107 0108 	add.w	r1, r7, #8
 8017edc:	4610      	mov	r0, r2
 8017ede:	4798      	blx	r3
 8017ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017ee2:	e077      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017ee4:	6839      	ldr	r1, [r7, #0]
 8017ee6:	6878      	ldr	r0, [r7, #4]
 8017ee8:	f000 fab1 	bl	801844e <USBD_CtlError>
            err++;
 8017eec:	7afb      	ldrb	r3, [r7, #11]
 8017eee:	3301      	adds	r3, #1
 8017ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8017ef2:	e06f      	b.n	8017fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017efa:	68db      	ldr	r3, [r3, #12]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d00b      	beq.n	8017f18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	7c12      	ldrb	r2, [r2, #16]
 8017f0c:	f107 0108 	add.w	r1, r7, #8
 8017f10:	4610      	mov	r0, r2
 8017f12:	4798      	blx	r3
 8017f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f16:	e05d      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017f18:	6839      	ldr	r1, [r7, #0]
 8017f1a:	6878      	ldr	r0, [r7, #4]
 8017f1c:	f000 fa97 	bl	801844e <USBD_CtlError>
            err++;
 8017f20:	7afb      	ldrb	r3, [r7, #11]
 8017f22:	3301      	adds	r3, #1
 8017f24:	72fb      	strb	r3, [r7, #11]
          break;
 8017f26:	e055      	b.n	8017fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f2e:	691b      	ldr	r3, [r3, #16]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d00b      	beq.n	8017f4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f3a:	691b      	ldr	r3, [r3, #16]
 8017f3c:	687a      	ldr	r2, [r7, #4]
 8017f3e:	7c12      	ldrb	r2, [r2, #16]
 8017f40:	f107 0108 	add.w	r1, r7, #8
 8017f44:	4610      	mov	r0, r2
 8017f46:	4798      	blx	r3
 8017f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f4a:	e043      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017f4c:	6839      	ldr	r1, [r7, #0]
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f000 fa7d 	bl	801844e <USBD_CtlError>
            err++;
 8017f54:	7afb      	ldrb	r3, [r7, #11]
 8017f56:	3301      	adds	r3, #1
 8017f58:	72fb      	strb	r3, [r7, #11]
          break;
 8017f5a:	e03b      	b.n	8017fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f62:	695b      	ldr	r3, [r3, #20]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d00b      	beq.n	8017f80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f6e:	695b      	ldr	r3, [r3, #20]
 8017f70:	687a      	ldr	r2, [r7, #4]
 8017f72:	7c12      	ldrb	r2, [r2, #16]
 8017f74:	f107 0108 	add.w	r1, r7, #8
 8017f78:	4610      	mov	r0, r2
 8017f7a:	4798      	blx	r3
 8017f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f7e:	e029      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017f80:	6839      	ldr	r1, [r7, #0]
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f000 fa63 	bl	801844e <USBD_CtlError>
            err++;
 8017f88:	7afb      	ldrb	r3, [r7, #11]
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8017f8e:	e021      	b.n	8017fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f96:	699b      	ldr	r3, [r3, #24]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d00b      	beq.n	8017fb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fa2:	699b      	ldr	r3, [r3, #24]
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	7c12      	ldrb	r2, [r2, #16]
 8017fa8:	f107 0108 	add.w	r1, r7, #8
 8017fac:	4610      	mov	r0, r2
 8017fae:	4798      	blx	r3
 8017fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017fb2:	e00f      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017fb4:	6839      	ldr	r1, [r7, #0]
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f000 fa49 	bl	801844e <USBD_CtlError>
            err++;
 8017fbc:	7afb      	ldrb	r3, [r7, #11]
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8017fc2:	e007      	b.n	8017fd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017fc4:	6839      	ldr	r1, [r7, #0]
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f000 fa41 	bl	801844e <USBD_CtlError>
          err++;
 8017fcc:	7afb      	ldrb	r3, [r7, #11]
 8017fce:	3301      	adds	r3, #1
 8017fd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017fd2:	bf00      	nop
      }
      break;
 8017fd4:	e037      	b.n	8018046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	7c1b      	ldrb	r3, [r3, #16]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d109      	bne.n	8017ff2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017fe6:	f107 0208 	add.w	r2, r7, #8
 8017fea:	4610      	mov	r0, r2
 8017fec:	4798      	blx	r3
 8017fee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017ff0:	e029      	b.n	8018046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017ff2:	6839      	ldr	r1, [r7, #0]
 8017ff4:	6878      	ldr	r0, [r7, #4]
 8017ff6:	f000 fa2a 	bl	801844e <USBD_CtlError>
        err++;
 8017ffa:	7afb      	ldrb	r3, [r7, #11]
 8017ffc:	3301      	adds	r3, #1
 8017ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8018000:	e021      	b.n	8018046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	7c1b      	ldrb	r3, [r3, #16]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d10d      	bne.n	8018026 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018012:	f107 0208 	add.w	r2, r7, #8
 8018016:	4610      	mov	r0, r2
 8018018:	4798      	blx	r3
 801801a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	3301      	adds	r3, #1
 8018020:	2207      	movs	r2, #7
 8018022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018024:	e00f      	b.n	8018046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018026:	6839      	ldr	r1, [r7, #0]
 8018028:	6878      	ldr	r0, [r7, #4]
 801802a:	f000 fa10 	bl	801844e <USBD_CtlError>
        err++;
 801802e:	7afb      	ldrb	r3, [r7, #11]
 8018030:	3301      	adds	r3, #1
 8018032:	72fb      	strb	r3, [r7, #11]
      break;
 8018034:	e007      	b.n	8018046 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018036:	6839      	ldr	r1, [r7, #0]
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f000 fa08 	bl	801844e <USBD_CtlError>
      err++;
 801803e:	7afb      	ldrb	r3, [r7, #11]
 8018040:	3301      	adds	r3, #1
 8018042:	72fb      	strb	r3, [r7, #11]
      break;
 8018044:	bf00      	nop
  }

  if (err != 0U)
 8018046:	7afb      	ldrb	r3, [r7, #11]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d11e      	bne.n	801808a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801804c:	683b      	ldr	r3, [r7, #0]
 801804e:	88db      	ldrh	r3, [r3, #6]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d016      	beq.n	8018082 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018054:	893b      	ldrh	r3, [r7, #8]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d00e      	beq.n	8018078 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	88da      	ldrh	r2, [r3, #6]
 801805e:	893b      	ldrh	r3, [r7, #8]
 8018060:	4293      	cmp	r3, r2
 8018062:	bf28      	it	cs
 8018064:	4613      	movcs	r3, r2
 8018066:	b29b      	uxth	r3, r3
 8018068:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801806a:	893b      	ldrh	r3, [r7, #8]
 801806c:	461a      	mov	r2, r3
 801806e:	68f9      	ldr	r1, [r7, #12]
 8018070:	6878      	ldr	r0, [r7, #4]
 8018072:	f000 fa5d 	bl	8018530 <USBD_CtlSendData>
 8018076:	e009      	b.n	801808c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018078:	6839      	ldr	r1, [r7, #0]
 801807a:	6878      	ldr	r0, [r7, #4]
 801807c:	f000 f9e7 	bl	801844e <USBD_CtlError>
 8018080:	e004      	b.n	801808c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f000 faae 	bl	80185e4 <USBD_CtlSendStatus>
 8018088:	e000      	b.n	801808c <USBD_GetDescriptor+0x2cc>
    return;
 801808a:	bf00      	nop
  }
}
 801808c:	3710      	adds	r7, #16
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
 8018092:	bf00      	nop

08018094 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b084      	sub	sp, #16
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
 801809c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801809e:	683b      	ldr	r3, [r7, #0]
 80180a0:	889b      	ldrh	r3, [r3, #4]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d131      	bne.n	801810a <USBD_SetAddress+0x76>
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	88db      	ldrh	r3, [r3, #6]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d12d      	bne.n	801810a <USBD_SetAddress+0x76>
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	885b      	ldrh	r3, [r3, #2]
 80180b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80180b4:	d829      	bhi.n	801810a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	885b      	ldrh	r3, [r3, #2]
 80180ba:	b2db      	uxtb	r3, r3
 80180bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80180c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80180c8:	b2db      	uxtb	r3, r3
 80180ca:	2b03      	cmp	r3, #3
 80180cc:	d104      	bne.n	80180d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80180ce:	6839      	ldr	r1, [r7, #0]
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f000 f9bc 	bl	801844e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80180d6:	e01d      	b.n	8018114 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	7bfa      	ldrb	r2, [r7, #15]
 80180dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80180e0:	7bfb      	ldrb	r3, [r7, #15]
 80180e2:	4619      	mov	r1, r3
 80180e4:	6878      	ldr	r0, [r7, #4]
 80180e6:	f004 f823 	bl	801c130 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f000 fa7a 	bl	80185e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80180f0:	7bfb      	ldrb	r3, [r7, #15]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d004      	beq.n	8018100 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2202      	movs	r2, #2
 80180fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80180fe:	e009      	b.n	8018114 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2201      	movs	r2, #1
 8018104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018108:	e004      	b.n	8018114 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801810a:	6839      	ldr	r1, [r7, #0]
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f000 f99e 	bl	801844e <USBD_CtlError>
  }
}
 8018112:	bf00      	nop
 8018114:	bf00      	nop
 8018116:	3710      	adds	r7, #16
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}

0801811c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b084      	sub	sp, #16
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
 8018124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018126:	2300      	movs	r3, #0
 8018128:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	885b      	ldrh	r3, [r3, #2]
 801812e:	b2da      	uxtb	r2, r3
 8018130:	4b4e      	ldr	r3, [pc, #312]	@ (801826c <USBD_SetConfig+0x150>)
 8018132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018134:	4b4d      	ldr	r3, [pc, #308]	@ (801826c <USBD_SetConfig+0x150>)
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	2b01      	cmp	r3, #1
 801813a:	d905      	bls.n	8018148 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801813c:	6839      	ldr	r1, [r7, #0]
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f000 f985 	bl	801844e <USBD_CtlError>
    return USBD_FAIL;
 8018144:	2303      	movs	r3, #3
 8018146:	e08c      	b.n	8018262 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801814e:	b2db      	uxtb	r3, r3
 8018150:	2b02      	cmp	r3, #2
 8018152:	d002      	beq.n	801815a <USBD_SetConfig+0x3e>
 8018154:	2b03      	cmp	r3, #3
 8018156:	d029      	beq.n	80181ac <USBD_SetConfig+0x90>
 8018158:	e075      	b.n	8018246 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801815a:	4b44      	ldr	r3, [pc, #272]	@ (801826c <USBD_SetConfig+0x150>)
 801815c:	781b      	ldrb	r3, [r3, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d020      	beq.n	80181a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018162:	4b42      	ldr	r3, [pc, #264]	@ (801826c <USBD_SetConfig+0x150>)
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	461a      	mov	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801816c:	4b3f      	ldr	r3, [pc, #252]	@ (801826c <USBD_SetConfig+0x150>)
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	4619      	mov	r1, r3
 8018172:	6878      	ldr	r0, [r7, #4]
 8018174:	f7fe ffe9 	bl	801714a <USBD_SetClassConfig>
 8018178:	4603      	mov	r3, r0
 801817a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801817c:	7bfb      	ldrb	r3, [r7, #15]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d008      	beq.n	8018194 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018182:	6839      	ldr	r1, [r7, #0]
 8018184:	6878      	ldr	r0, [r7, #4]
 8018186:	f000 f962 	bl	801844e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2202      	movs	r2, #2
 801818e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018192:	e065      	b.n	8018260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f000 fa25 	bl	80185e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2203      	movs	r2, #3
 801819e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80181a2:	e05d      	b.n	8018260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f000 fa1d 	bl	80185e4 <USBD_CtlSendStatus>
      break;
 80181aa:	e059      	b.n	8018260 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80181ac:	4b2f      	ldr	r3, [pc, #188]	@ (801826c <USBD_SetConfig+0x150>)
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d112      	bne.n	80181da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	2202      	movs	r2, #2
 80181b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80181bc:	4b2b      	ldr	r3, [pc, #172]	@ (801826c <USBD_SetConfig+0x150>)
 80181be:	781b      	ldrb	r3, [r3, #0]
 80181c0:	461a      	mov	r2, r3
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80181c6:	4b29      	ldr	r3, [pc, #164]	@ (801826c <USBD_SetConfig+0x150>)
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	4619      	mov	r1, r3
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f7fe ffd8 	bl	8017182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f000 fa06 	bl	80185e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80181d8:	e042      	b.n	8018260 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80181da:	4b24      	ldr	r3, [pc, #144]	@ (801826c <USBD_SetConfig+0x150>)
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	461a      	mov	r2, r3
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d02a      	beq.n	801823e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	685b      	ldr	r3, [r3, #4]
 80181ec:	b2db      	uxtb	r3, r3
 80181ee:	4619      	mov	r1, r3
 80181f0:	6878      	ldr	r0, [r7, #4]
 80181f2:	f7fe ffc6 	bl	8017182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80181f6:	4b1d      	ldr	r3, [pc, #116]	@ (801826c <USBD_SetConfig+0x150>)
 80181f8:	781b      	ldrb	r3, [r3, #0]
 80181fa:	461a      	mov	r2, r3
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018200:	4b1a      	ldr	r3, [pc, #104]	@ (801826c <USBD_SetConfig+0x150>)
 8018202:	781b      	ldrb	r3, [r3, #0]
 8018204:	4619      	mov	r1, r3
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f7fe ff9f 	bl	801714a <USBD_SetClassConfig>
 801820c:	4603      	mov	r3, r0
 801820e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018210:	7bfb      	ldrb	r3, [r7, #15]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d00f      	beq.n	8018236 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018216:	6839      	ldr	r1, [r7, #0]
 8018218:	6878      	ldr	r0, [r7, #4]
 801821a:	f000 f918 	bl	801844e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	685b      	ldr	r3, [r3, #4]
 8018222:	b2db      	uxtb	r3, r3
 8018224:	4619      	mov	r1, r3
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f7fe ffab 	bl	8017182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2202      	movs	r2, #2
 8018230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018234:	e014      	b.n	8018260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018236:	6878      	ldr	r0, [r7, #4]
 8018238:	f000 f9d4 	bl	80185e4 <USBD_CtlSendStatus>
      break;
 801823c:	e010      	b.n	8018260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801823e:	6878      	ldr	r0, [r7, #4]
 8018240:	f000 f9d0 	bl	80185e4 <USBD_CtlSendStatus>
      break;
 8018244:	e00c      	b.n	8018260 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018246:	6839      	ldr	r1, [r7, #0]
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f000 f900 	bl	801844e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801824e:	4b07      	ldr	r3, [pc, #28]	@ (801826c <USBD_SetConfig+0x150>)
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	4619      	mov	r1, r3
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f7fe ff94 	bl	8017182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801825a:	2303      	movs	r3, #3
 801825c:	73fb      	strb	r3, [r7, #15]
      break;
 801825e:	bf00      	nop
  }

  return ret;
 8018260:	7bfb      	ldrb	r3, [r7, #15]
}
 8018262:	4618      	mov	r0, r3
 8018264:	3710      	adds	r7, #16
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	20003ebc 	.word	0x20003ebc

08018270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b082      	sub	sp, #8
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	88db      	ldrh	r3, [r3, #6]
 801827e:	2b01      	cmp	r3, #1
 8018280:	d004      	beq.n	801828c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018282:	6839      	ldr	r1, [r7, #0]
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f000 f8e2 	bl	801844e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801828a:	e023      	b.n	80182d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018292:	b2db      	uxtb	r3, r3
 8018294:	2b02      	cmp	r3, #2
 8018296:	dc02      	bgt.n	801829e <USBD_GetConfig+0x2e>
 8018298:	2b00      	cmp	r3, #0
 801829a:	dc03      	bgt.n	80182a4 <USBD_GetConfig+0x34>
 801829c:	e015      	b.n	80182ca <USBD_GetConfig+0x5a>
 801829e:	2b03      	cmp	r3, #3
 80182a0:	d00b      	beq.n	80182ba <USBD_GetConfig+0x4a>
 80182a2:	e012      	b.n	80182ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2200      	movs	r2, #0
 80182a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	3308      	adds	r3, #8
 80182ae:	2201      	movs	r2, #1
 80182b0:	4619      	mov	r1, r3
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	f000 f93c 	bl	8018530 <USBD_CtlSendData>
        break;
 80182b8:	e00c      	b.n	80182d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	3304      	adds	r3, #4
 80182be:	2201      	movs	r2, #1
 80182c0:	4619      	mov	r1, r3
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f000 f934 	bl	8018530 <USBD_CtlSendData>
        break;
 80182c8:	e004      	b.n	80182d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80182ca:	6839      	ldr	r1, [r7, #0]
 80182cc:	6878      	ldr	r0, [r7, #4]
 80182ce:	f000 f8be 	bl	801844e <USBD_CtlError>
        break;
 80182d2:	bf00      	nop
}
 80182d4:	bf00      	nop
 80182d6:	3708      	adds	r7, #8
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80182ec:	b2db      	uxtb	r3, r3
 80182ee:	3b01      	subs	r3, #1
 80182f0:	2b02      	cmp	r3, #2
 80182f2:	d81e      	bhi.n	8018332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	88db      	ldrh	r3, [r3, #6]
 80182f8:	2b02      	cmp	r3, #2
 80182fa:	d004      	beq.n	8018306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80182fc:	6839      	ldr	r1, [r7, #0]
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f000 f8a5 	bl	801844e <USBD_CtlError>
        break;
 8018304:	e01a      	b.n	801833c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	2201      	movs	r2, #1
 801830a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018312:	2b00      	cmp	r3, #0
 8018314:	d005      	beq.n	8018322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	68db      	ldr	r3, [r3, #12]
 801831a:	f043 0202 	orr.w	r2, r3, #2
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	330c      	adds	r3, #12
 8018326:	2202      	movs	r2, #2
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f000 f900 	bl	8018530 <USBD_CtlSendData>
      break;
 8018330:	e004      	b.n	801833c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018332:	6839      	ldr	r1, [r7, #0]
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f000 f88a 	bl	801844e <USBD_CtlError>
      break;
 801833a:	bf00      	nop
  }
}
 801833c:	bf00      	nop
 801833e:	3708      	adds	r7, #8
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}

08018344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	885b      	ldrh	r3, [r3, #2]
 8018352:	2b01      	cmp	r3, #1
 8018354:	d107      	bne.n	8018366 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	2201      	movs	r2, #1
 801835a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801835e:	6878      	ldr	r0, [r7, #4]
 8018360:	f000 f940 	bl	80185e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018364:	e013      	b.n	801838e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018366:	683b      	ldr	r3, [r7, #0]
 8018368:	885b      	ldrh	r3, [r3, #2]
 801836a:	2b02      	cmp	r3, #2
 801836c:	d10b      	bne.n	8018386 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	889b      	ldrh	r3, [r3, #4]
 8018372:	0a1b      	lsrs	r3, r3, #8
 8018374:	b29b      	uxth	r3, r3
 8018376:	b2da      	uxtb	r2, r3
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801837e:	6878      	ldr	r0, [r7, #4]
 8018380:	f000 f930 	bl	80185e4 <USBD_CtlSendStatus>
}
 8018384:	e003      	b.n	801838e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018386:	6839      	ldr	r1, [r7, #0]
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f000 f860 	bl	801844e <USBD_CtlError>
}
 801838e:	bf00      	nop
 8018390:	3708      	adds	r7, #8
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}

08018396 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018396:	b580      	push	{r7, lr}
 8018398:	b082      	sub	sp, #8
 801839a:	af00      	add	r7, sp, #0
 801839c:	6078      	str	r0, [r7, #4]
 801839e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80183a6:	b2db      	uxtb	r3, r3
 80183a8:	3b01      	subs	r3, #1
 80183aa:	2b02      	cmp	r3, #2
 80183ac:	d80b      	bhi.n	80183c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	885b      	ldrh	r3, [r3, #2]
 80183b2:	2b01      	cmp	r3, #1
 80183b4:	d10c      	bne.n	80183d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2200      	movs	r2, #0
 80183ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80183be:	6878      	ldr	r0, [r7, #4]
 80183c0:	f000 f910 	bl	80185e4 <USBD_CtlSendStatus>
      }
      break;
 80183c4:	e004      	b.n	80183d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80183c6:	6839      	ldr	r1, [r7, #0]
 80183c8:	6878      	ldr	r0, [r7, #4]
 80183ca:	f000 f840 	bl	801844e <USBD_CtlError>
      break;
 80183ce:	e000      	b.n	80183d2 <USBD_ClrFeature+0x3c>
      break;
 80183d0:	bf00      	nop
  }
}
 80183d2:	bf00      	nop
 80183d4:	3708      	adds	r7, #8
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bd80      	pop	{r7, pc}

080183da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80183da:	b580      	push	{r7, lr}
 80183dc:	b084      	sub	sp, #16
 80183de:	af00      	add	r7, sp, #0
 80183e0:	6078      	str	r0, [r7, #4]
 80183e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80183e4:	683b      	ldr	r3, [r7, #0]
 80183e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	781a      	ldrb	r2, [r3, #0]
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	3301      	adds	r3, #1
 80183f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	781a      	ldrb	r2, [r3, #0]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	3301      	adds	r3, #1
 8018402:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018404:	68f8      	ldr	r0, [r7, #12]
 8018406:	f7ff fa40 	bl	801788a <SWAPBYTE>
 801840a:	4603      	mov	r3, r0
 801840c:	461a      	mov	r2, r3
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	3301      	adds	r3, #1
 8018416:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	3301      	adds	r3, #1
 801841c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801841e:	68f8      	ldr	r0, [r7, #12]
 8018420:	f7ff fa33 	bl	801788a <SWAPBYTE>
 8018424:	4603      	mov	r3, r0
 8018426:	461a      	mov	r2, r3
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	3301      	adds	r3, #1
 8018430:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	3301      	adds	r3, #1
 8018436:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018438:	68f8      	ldr	r0, [r7, #12]
 801843a:	f7ff fa26 	bl	801788a <SWAPBYTE>
 801843e:	4603      	mov	r3, r0
 8018440:	461a      	mov	r2, r3
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	80da      	strh	r2, [r3, #6]
}
 8018446:	bf00      	nop
 8018448:	3710      	adds	r7, #16
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}

0801844e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801844e:	b580      	push	{r7, lr}
 8018450:	b082      	sub	sp, #8
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
 8018456:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018458:	2180      	movs	r1, #128	@ 0x80
 801845a:	6878      	ldr	r0, [r7, #4]
 801845c:	f003 fdfe 	bl	801c05c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018460:	2100      	movs	r1, #0
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f003 fdfa 	bl	801c05c <USBD_LL_StallEP>
}
 8018468:	bf00      	nop
 801846a:	3708      	adds	r7, #8
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}

08018470 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b086      	sub	sp, #24
 8018474:	af00      	add	r7, sp, #0
 8018476:	60f8      	str	r0, [r7, #12]
 8018478:	60b9      	str	r1, [r7, #8]
 801847a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801847c:	2300      	movs	r3, #0
 801847e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d036      	beq.n	80184f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801848a:	6938      	ldr	r0, [r7, #16]
 801848c:	f000 f836 	bl	80184fc <USBD_GetLen>
 8018490:	4603      	mov	r3, r0
 8018492:	3301      	adds	r3, #1
 8018494:	b29b      	uxth	r3, r3
 8018496:	005b      	lsls	r3, r3, #1
 8018498:	b29a      	uxth	r2, r3
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801849e:	7dfb      	ldrb	r3, [r7, #23]
 80184a0:	68ba      	ldr	r2, [r7, #8]
 80184a2:	4413      	add	r3, r2
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	7812      	ldrb	r2, [r2, #0]
 80184a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80184aa:	7dfb      	ldrb	r3, [r7, #23]
 80184ac:	3301      	adds	r3, #1
 80184ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80184b0:	7dfb      	ldrb	r3, [r7, #23]
 80184b2:	68ba      	ldr	r2, [r7, #8]
 80184b4:	4413      	add	r3, r2
 80184b6:	2203      	movs	r2, #3
 80184b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80184ba:	7dfb      	ldrb	r3, [r7, #23]
 80184bc:	3301      	adds	r3, #1
 80184be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80184c0:	e013      	b.n	80184ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80184c2:	7dfb      	ldrb	r3, [r7, #23]
 80184c4:	68ba      	ldr	r2, [r7, #8]
 80184c6:	4413      	add	r3, r2
 80184c8:	693a      	ldr	r2, [r7, #16]
 80184ca:	7812      	ldrb	r2, [r2, #0]
 80184cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80184ce:	693b      	ldr	r3, [r7, #16]
 80184d0:	3301      	adds	r3, #1
 80184d2:	613b      	str	r3, [r7, #16]
    idx++;
 80184d4:	7dfb      	ldrb	r3, [r7, #23]
 80184d6:	3301      	adds	r3, #1
 80184d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80184da:	7dfb      	ldrb	r3, [r7, #23]
 80184dc:	68ba      	ldr	r2, [r7, #8]
 80184de:	4413      	add	r3, r2
 80184e0:	2200      	movs	r2, #0
 80184e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80184e4:	7dfb      	ldrb	r3, [r7, #23]
 80184e6:	3301      	adds	r3, #1
 80184e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	781b      	ldrb	r3, [r3, #0]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d1e7      	bne.n	80184c2 <USBD_GetString+0x52>
 80184f2:	e000      	b.n	80184f6 <USBD_GetString+0x86>
    return;
 80184f4:	bf00      	nop
  }
}
 80184f6:	3718      	adds	r7, #24
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80184fc:	b480      	push	{r7}
 80184fe:	b085      	sub	sp, #20
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018504:	2300      	movs	r3, #0
 8018506:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801850c:	e005      	b.n	801851a <USBD_GetLen+0x1e>
  {
    len++;
 801850e:	7bfb      	ldrb	r3, [r7, #15]
 8018510:	3301      	adds	r3, #1
 8018512:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	3301      	adds	r3, #1
 8018518:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801851a:	68bb      	ldr	r3, [r7, #8]
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d1f5      	bne.n	801850e <USBD_GetLen+0x12>
  }

  return len;
 8018522:	7bfb      	ldrb	r3, [r7, #15]
}
 8018524:	4618      	mov	r0, r3
 8018526:	3714      	adds	r7, #20
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr

08018530 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af00      	add	r7, sp, #0
 8018536:	60f8      	str	r0, [r7, #12]
 8018538:	60b9      	str	r1, [r7, #8]
 801853a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	2202      	movs	r2, #2
 8018540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	687a      	ldr	r2, [r7, #4]
 801854e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	68ba      	ldr	r2, [r7, #8]
 8018554:	2100      	movs	r1, #0
 8018556:	68f8      	ldr	r0, [r7, #12]
 8018558:	f003 fe09 	bl	801c16e <USBD_LL_Transmit>

  return USBD_OK;
 801855c:	2300      	movs	r3, #0
}
 801855e:	4618      	mov	r0, r3
 8018560:	3710      	adds	r7, #16
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}

08018566 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018566:	b580      	push	{r7, lr}
 8018568:	b084      	sub	sp, #16
 801856a:	af00      	add	r7, sp, #0
 801856c:	60f8      	str	r0, [r7, #12]
 801856e:	60b9      	str	r1, [r7, #8]
 8018570:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	68ba      	ldr	r2, [r7, #8]
 8018576:	2100      	movs	r1, #0
 8018578:	68f8      	ldr	r0, [r7, #12]
 801857a:	f003 fdf8 	bl	801c16e <USBD_LL_Transmit>

  return USBD_OK;
 801857e:	2300      	movs	r3, #0
}
 8018580:	4618      	mov	r0, r3
 8018582:	3710      	adds	r7, #16
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}

08018588 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	60f8      	str	r0, [r7, #12]
 8018590:	60b9      	str	r1, [r7, #8]
 8018592:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	2203      	movs	r2, #3
 8018598:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	68ba      	ldr	r2, [r7, #8]
 80185b0:	2100      	movs	r1, #0
 80185b2:	68f8      	ldr	r0, [r7, #12]
 80185b4:	f003 fdfc 	bl	801c1b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80185b8:	2300      	movs	r3, #0
}
 80185ba:	4618      	mov	r0, r3
 80185bc:	3710      	adds	r7, #16
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}

080185c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80185c2:	b580      	push	{r7, lr}
 80185c4:	b084      	sub	sp, #16
 80185c6:	af00      	add	r7, sp, #0
 80185c8:	60f8      	str	r0, [r7, #12]
 80185ca:	60b9      	str	r1, [r7, #8]
 80185cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	68ba      	ldr	r2, [r7, #8]
 80185d2:	2100      	movs	r1, #0
 80185d4:	68f8      	ldr	r0, [r7, #12]
 80185d6:	f003 fdeb 	bl	801c1b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80185da:	2300      	movs	r3, #0
}
 80185dc:	4618      	mov	r0, r3
 80185de:	3710      	adds	r7, #16
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}

080185e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b082      	sub	sp, #8
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	2204      	movs	r2, #4
 80185f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80185f4:	2300      	movs	r3, #0
 80185f6:	2200      	movs	r2, #0
 80185f8:	2100      	movs	r1, #0
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f003 fdb7 	bl	801c16e <USBD_LL_Transmit>

  return USBD_OK;
 8018600:	2300      	movs	r3, #0
}
 8018602:	4618      	mov	r0, r3
 8018604:	3708      	adds	r7, #8
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}

0801860a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801860a:	b580      	push	{r7, lr}
 801860c:	b082      	sub	sp, #8
 801860e:	af00      	add	r7, sp, #0
 8018610:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2205      	movs	r2, #5
 8018616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801861a:	2300      	movs	r3, #0
 801861c:	2200      	movs	r2, #0
 801861e:	2100      	movs	r1, #0
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f003 fdc5 	bl	801c1b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018626:	2300      	movs	r3, #0
}
 8018628:	4618      	mov	r0, r3
 801862a:	3708      	adds	r7, #8
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}

08018630 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018630:	b480      	push	{r7}
 8018632:	b085      	sub	sp, #20
 8018634:	af00      	add	r7, sp, #0
 8018636:	4603      	mov	r3, r0
 8018638:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801863a:	2300      	movs	r3, #0
 801863c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801863e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018642:	2b84      	cmp	r3, #132	@ 0x84
 8018644:	d005      	beq.n	8018652 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018646:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	4413      	add	r3, r2
 801864e:	3303      	adds	r3, #3
 8018650:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018652:	68fb      	ldr	r3, [r7, #12]
}
 8018654:	4618      	mov	r0, r3
 8018656:	3714      	adds	r7, #20
 8018658:	46bd      	mov	sp, r7
 801865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865e:	4770      	bx	lr

08018660 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8018664:	f001 fa44 	bl	8019af0 <vTaskStartScheduler>
  
  return osOK;
 8018668:	2300      	movs	r3, #0
}
 801866a:	4618      	mov	r0, r3
 801866c:	bd80      	pop	{r7, pc}

0801866e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801866e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018670:	b089      	sub	sp, #36	@ 0x24
 8018672:	af04      	add	r7, sp, #16
 8018674:	6078      	str	r0, [r7, #4]
 8018676:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	695b      	ldr	r3, [r3, #20]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d020      	beq.n	80186c2 <osThreadCreate+0x54>
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	699b      	ldr	r3, [r3, #24]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d01c      	beq.n	80186c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	685c      	ldr	r4, [r3, #4]
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	691e      	ldr	r6, [r3, #16]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801869a:	4618      	mov	r0, r3
 801869c:	f7ff ffc8 	bl	8018630 <makeFreeRtosPriority>
 80186a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	695b      	ldr	r3, [r3, #20]
 80186a6:	687a      	ldr	r2, [r7, #4]
 80186a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80186aa:	9202      	str	r2, [sp, #8]
 80186ac:	9301      	str	r3, [sp, #4]
 80186ae:	9100      	str	r1, [sp, #0]
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	4632      	mov	r2, r6
 80186b4:	4629      	mov	r1, r5
 80186b6:	4620      	mov	r0, r4
 80186b8:	f000 ff7a 	bl	80195b0 <xTaskCreateStatic>
 80186bc:	4603      	mov	r3, r0
 80186be:	60fb      	str	r3, [r7, #12]
 80186c0:	e01c      	b.n	80186fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	685c      	ldr	r4, [r3, #4]
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80186ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7ff ffaa 	bl	8018630 <makeFreeRtosPriority>
 80186dc:	4602      	mov	r2, r0
 80186de:	f107 030c 	add.w	r3, r7, #12
 80186e2:	9301      	str	r3, [sp, #4]
 80186e4:	9200      	str	r2, [sp, #0]
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	4632      	mov	r2, r6
 80186ea:	4629      	mov	r1, r5
 80186ec:	4620      	mov	r0, r4
 80186ee:	f000 ffc1 	bl	8019674 <xTaskCreate>
 80186f2:	4603      	mov	r3, r0
 80186f4:	2b01      	cmp	r3, #1
 80186f6:	d001      	beq.n	80186fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80186f8:	2300      	movs	r3, #0
 80186fa:	e000      	b.n	80186fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80186fc:	68fb      	ldr	r3, [r7, #12]
}
 80186fe:	4618      	mov	r0, r3
 8018700:	3714      	adds	r7, #20
 8018702:	46bd      	mov	sp, r7
 8018704:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018706 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018706:	b580      	push	{r7, lr}
 8018708:	b084      	sub	sp, #16
 801870a:	af00      	add	r7, sp, #0
 801870c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d001      	beq.n	801871c <osDelay+0x16>
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	e000      	b.n	801871e <osDelay+0x18>
 801871c:	2301      	movs	r3, #1
 801871e:	4618      	mov	r0, r3
 8018720:	f001 f9b0 	bl	8019a84 <vTaskDelay>
  
  return osOK;
 8018724:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018726:	4618      	mov	r0, r3
 8018728:	3710      	adds	r7, #16
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}

0801872e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801872e:	b580      	push	{r7, lr}
 8018730:	b082      	sub	sp, #8
 8018732:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8018734:	2020      	movs	r0, #32
 8018736:	f002 fe89 	bl	801b44c <pvPortMalloc>
 801873a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d00a      	beq.n	8018758 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2200      	movs	r2, #0
 8018746:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	3304      	adds	r3, #4
 801874c:	4618      	mov	r0, r3
 801874e:	f000 f8b5 	bl	80188bc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2200      	movs	r2, #0
 8018756:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8018758:	687b      	ldr	r3, [r7, #4]
	}
 801875a:	4618      	mov	r0, r3
 801875c:	3708      	adds	r7, #8
 801875e:	46bd      	mov	sp, r7
 8018760:	bd80      	pop	{r7, pc}

08018762 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8018762:	b580      	push	{r7, lr}
 8018764:	b08e      	sub	sp, #56	@ 0x38
 8018766:	af00      	add	r7, sp, #0
 8018768:	6078      	str	r0, [r7, #4]
 801876a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801876c:	2300      	movs	r3, #0
 801876e:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8018774:	2300      	movs	r3, #0
 8018776:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d10b      	bne.n	8018796 <xEventGroupSetBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018782:	f383 8811 	msr	BASEPRI, r3
 8018786:	f3bf 8f6f 	isb	sy
 801878a:	f3bf 8f4f 	dsb	sy
 801878e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018790:	bf00      	nop
 8018792:	bf00      	nop
 8018794:	e7fd      	b.n	8018792 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018796:	683b      	ldr	r3, [r7, #0]
 8018798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801879c:	d30b      	bcc.n	80187b6 <xEventGroupSetBits+0x54>
	__asm volatile
 801879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187a2:	f383 8811 	msr	BASEPRI, r3
 80187a6:	f3bf 8f6f 	isb	sy
 80187aa:	f3bf 8f4f 	dsb	sy
 80187ae:	60fb      	str	r3, [r7, #12]
}
 80187b0:	bf00      	nop
 80187b2:	bf00      	nop
 80187b4:	e7fd      	b.n	80187b2 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80187b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b8:	3304      	adds	r3, #4
 80187ba:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80187bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187be:	3308      	adds	r3, #8
 80187c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80187c2:	f001 fa07 	bl	8019bd4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80187c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187c8:	68db      	ldr	r3, [r3, #12]
 80187ca:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80187cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ce:	681a      	ldr	r2, [r3, #0]
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	431a      	orrs	r2, r3
 80187d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80187d8:	e03c      	b.n	8018854 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80187da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80187e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80187e6:	2300      	movs	r3, #0
 80187e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80187ea:	69bb      	ldr	r3, [r7, #24]
 80187ec:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80187f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80187f2:	69bb      	ldr	r3, [r7, #24]
 80187f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80187f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018800:	2b00      	cmp	r3, #0
 8018802:	d108      	bne.n	8018816 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8018804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018806:	681a      	ldr	r2, [r3, #0]
 8018808:	69bb      	ldr	r3, [r7, #24]
 801880a:	4013      	ands	r3, r2
 801880c:	2b00      	cmp	r3, #0
 801880e:	d00b      	beq.n	8018828 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8018810:	2301      	movs	r3, #1
 8018812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018814:	e008      	b.n	8018828 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8018816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018818:	681a      	ldr	r2, [r3, #0]
 801881a:	69bb      	ldr	r3, [r7, #24]
 801881c:	4013      	ands	r3, r2
 801881e:	69ba      	ldr	r2, [r7, #24]
 8018820:	429a      	cmp	r2, r3
 8018822:	d101      	bne.n	8018828 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8018824:	2301      	movs	r3, #1
 8018826:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8018828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801882a:	2b00      	cmp	r3, #0
 801882c:	d010      	beq.n	8018850 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018834:	2b00      	cmp	r3, #0
 8018836:	d003      	beq.n	8018840 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8018838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801883a:	69bb      	ldr	r3, [r7, #24]
 801883c:	4313      	orrs	r3, r2
 801883e:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8018840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018848:	4619      	mov	r1, r3
 801884a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801884c:	f001 fc7e 	bl	801a14c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8018850:	69fb      	ldr	r3, [r7, #28]
 8018852:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8018854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018856:	6a3b      	ldr	r3, [r7, #32]
 8018858:	429a      	cmp	r2, r3
 801885a:	d1be      	bne.n	80187da <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018862:	43db      	mvns	r3, r3
 8018864:	401a      	ands	r2, r3
 8018866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018868:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801886a:	f001 f9c1 	bl	8019bf0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018870:	681b      	ldr	r3, [r3, #0]
}
 8018872:	4618      	mov	r0, r3
 8018874:	3738      	adds	r7, #56	@ 0x38
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801887a:	b580      	push	{r7, lr}
 801887c:	b082      	sub	sp, #8
 801887e:	af00      	add	r7, sp, #0
 8018880:	6078      	str	r0, [r7, #4]
 8018882:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8018884:	6839      	ldr	r1, [r7, #0]
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f7ff ff6b 	bl	8018762 <xEventGroupSetBits>
}
 801888c:	bf00      	nop
 801888e:	3708      	adds	r7, #8
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018894:	b580      	push	{r7, lr}
 8018896:	b086      	sub	sp, #24
 8018898:	af00      	add	r7, sp, #0
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	68ba      	ldr	r2, [r7, #8]
 80188a4:	68f9      	ldr	r1, [r7, #12]
 80188a6:	4804      	ldr	r0, [pc, #16]	@ (80188b8 <xEventGroupSetBitsFromISR+0x24>)
 80188a8:	f002 fb5e 	bl	801af68 <xTimerPendFunctionCallFromISR>
 80188ac:	6178      	str	r0, [r7, #20]

		return xReturn;
 80188ae:	697b      	ldr	r3, [r7, #20]
	}
 80188b0:	4618      	mov	r0, r3
 80188b2:	3718      	adds	r7, #24
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	0801887b 	.word	0x0801887b

080188bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f103 0208 	add.w	r2, r3, #8
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	f04f 32ff 	mov.w	r2, #4294967295
 80188d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	f103 0208 	add.w	r2, r3, #8
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f103 0208 	add.w	r2, r3, #8
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	2200      	movs	r2, #0
 80188ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80188f0:	bf00      	nop
 80188f2:	370c      	adds	r7, #12
 80188f4:	46bd      	mov	sp, r7
 80188f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fa:	4770      	bx	lr

080188fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80188fc:	b480      	push	{r7}
 80188fe:	b083      	sub	sp, #12
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2200      	movs	r2, #0
 8018908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801890a:	bf00      	nop
 801890c:	370c      	adds	r7, #12
 801890e:	46bd      	mov	sp, r7
 8018910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018914:	4770      	bx	lr

08018916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018916:	b480      	push	{r7}
 8018918:	b085      	sub	sp, #20
 801891a:	af00      	add	r7, sp, #0
 801891c:	6078      	str	r0, [r7, #4]
 801891e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	685b      	ldr	r3, [r3, #4]
 8018924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	68fa      	ldr	r2, [r7, #12]
 801892a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	689a      	ldr	r2, [r3, #8]
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	689b      	ldr	r3, [r3, #8]
 8018938:	683a      	ldr	r2, [r7, #0]
 801893a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	683a      	ldr	r2, [r7, #0]
 8018940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	687a      	ldr	r2, [r7, #4]
 8018946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	1c5a      	adds	r2, r3, #1
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	601a      	str	r2, [r3, #0]
}
 8018952:	bf00      	nop
 8018954:	3714      	adds	r7, #20
 8018956:	46bd      	mov	sp, r7
 8018958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895c:	4770      	bx	lr

0801895e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801895e:	b480      	push	{r7}
 8018960:	b085      	sub	sp, #20
 8018962:	af00      	add	r7, sp, #0
 8018964:	6078      	str	r0, [r7, #4]
 8018966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018974:	d103      	bne.n	801897e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	691b      	ldr	r3, [r3, #16]
 801897a:	60fb      	str	r3, [r7, #12]
 801897c:	e00c      	b.n	8018998 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	3308      	adds	r3, #8
 8018982:	60fb      	str	r3, [r7, #12]
 8018984:	e002      	b.n	801898c <vListInsert+0x2e>
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	60fb      	str	r3, [r7, #12]
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	685b      	ldr	r3, [r3, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	68ba      	ldr	r2, [r7, #8]
 8018994:	429a      	cmp	r2, r3
 8018996:	d2f6      	bcs.n	8018986 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	685a      	ldr	r2, [r3, #4]
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	685b      	ldr	r3, [r3, #4]
 80189a4:	683a      	ldr	r2, [r7, #0]
 80189a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	68fa      	ldr	r2, [r7, #12]
 80189ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	683a      	ldr	r2, [r7, #0]
 80189b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	687a      	ldr	r2, [r7, #4]
 80189b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	1c5a      	adds	r2, r3, #1
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	601a      	str	r2, [r3, #0]
}
 80189c4:	bf00      	nop
 80189c6:	3714      	adds	r7, #20
 80189c8:	46bd      	mov	sp, r7
 80189ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ce:	4770      	bx	lr

080189d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80189d0:	b480      	push	{r7}
 80189d2:	b085      	sub	sp, #20
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	691b      	ldr	r3, [r3, #16]
 80189dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	685b      	ldr	r3, [r3, #4]
 80189e2:	687a      	ldr	r2, [r7, #4]
 80189e4:	6892      	ldr	r2, [r2, #8]
 80189e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	689b      	ldr	r3, [r3, #8]
 80189ec:	687a      	ldr	r2, [r7, #4]
 80189ee:	6852      	ldr	r2, [r2, #4]
 80189f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	685b      	ldr	r3, [r3, #4]
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	429a      	cmp	r2, r3
 80189fa:	d103      	bne.n	8018a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	689a      	ldr	r2, [r3, #8]
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2200      	movs	r2, #0
 8018a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	1e5a      	subs	r2, r3, #1
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	681b      	ldr	r3, [r3, #0]
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	3714      	adds	r7, #20
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a22:	4770      	bx	lr

08018a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b084      	sub	sp, #16
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d10b      	bne.n	8018a50 <xQueueGenericReset+0x2c>
	__asm volatile
 8018a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a3c:	f383 8811 	msr	BASEPRI, r3
 8018a40:	f3bf 8f6f 	isb	sy
 8018a44:	f3bf 8f4f 	dsb	sy
 8018a48:	60bb      	str	r3, [r7, #8]
}
 8018a4a:	bf00      	nop
 8018a4c:	bf00      	nop
 8018a4e:	e7fd      	b.n	8018a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018a50:	f002 fbda 	bl	801b208 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	681a      	ldr	r2, [r3, #0]
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018a5c:	68f9      	ldr	r1, [r7, #12]
 8018a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018a60:	fb01 f303 	mul.w	r3, r1, r3
 8018a64:	441a      	add	r2, r3
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	681a      	ldr	r2, [r3, #0]
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	681a      	ldr	r2, [r3, #0]
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018a80:	3b01      	subs	r3, #1
 8018a82:	68f9      	ldr	r1, [r7, #12]
 8018a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018a86:	fb01 f303 	mul.w	r3, r1, r3
 8018a8a:	441a      	add	r2, r3
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	22ff      	movs	r2, #255	@ 0xff
 8018a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	22ff      	movs	r2, #255	@ 0xff
 8018a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8018aa0:	683b      	ldr	r3, [r7, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d114      	bne.n	8018ad0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	691b      	ldr	r3, [r3, #16]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d01a      	beq.n	8018ae4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	3310      	adds	r3, #16
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f001 fae6 	bl	801a084 <xTaskRemoveFromEventList>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d012      	beq.n	8018ae4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018abe:	4b0d      	ldr	r3, [pc, #52]	@ (8018af4 <xQueueGenericReset+0xd0>)
 8018ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ac4:	601a      	str	r2, [r3, #0]
 8018ac6:	f3bf 8f4f 	dsb	sy
 8018aca:	f3bf 8f6f 	isb	sy
 8018ace:	e009      	b.n	8018ae4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	3310      	adds	r3, #16
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7ff fef1 	bl	80188bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	3324      	adds	r3, #36	@ 0x24
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7ff feec 	bl	80188bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018ae4:	f002 fbc2 	bl	801b26c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018ae8:	2301      	movs	r3, #1
}
 8018aea:	4618      	mov	r0, r3
 8018aec:	3710      	adds	r7, #16
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}
 8018af2:	bf00      	nop
 8018af4:	e000ed04 	.word	0xe000ed04

08018af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b08e      	sub	sp, #56	@ 0x38
 8018afc:	af02      	add	r7, sp, #8
 8018afe:	60f8      	str	r0, [r7, #12]
 8018b00:	60b9      	str	r1, [r7, #8]
 8018b02:	607a      	str	r2, [r7, #4]
 8018b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d10b      	bne.n	8018b24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8018b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b10:	f383 8811 	msr	BASEPRI, r3
 8018b14:	f3bf 8f6f 	isb	sy
 8018b18:	f3bf 8f4f 	dsb	sy
 8018b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018b1e:	bf00      	nop
 8018b20:	bf00      	nop
 8018b22:	e7fd      	b.n	8018b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018b24:	683b      	ldr	r3, [r7, #0]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d10b      	bne.n	8018b42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8018b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b2e:	f383 8811 	msr	BASEPRI, r3
 8018b32:	f3bf 8f6f 	isb	sy
 8018b36:	f3bf 8f4f 	dsb	sy
 8018b3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018b3c:	bf00      	nop
 8018b3e:	bf00      	nop
 8018b40:	e7fd      	b.n	8018b3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d002      	beq.n	8018b4e <xQueueGenericCreateStatic+0x56>
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d001      	beq.n	8018b52 <xQueueGenericCreateStatic+0x5a>
 8018b4e:	2301      	movs	r3, #1
 8018b50:	e000      	b.n	8018b54 <xQueueGenericCreateStatic+0x5c>
 8018b52:	2300      	movs	r3, #0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d10b      	bne.n	8018b70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8018b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b5c:	f383 8811 	msr	BASEPRI, r3
 8018b60:	f3bf 8f6f 	isb	sy
 8018b64:	f3bf 8f4f 	dsb	sy
 8018b68:	623b      	str	r3, [r7, #32]
}
 8018b6a:	bf00      	nop
 8018b6c:	bf00      	nop
 8018b6e:	e7fd      	b.n	8018b6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d102      	bne.n	8018b7c <xQueueGenericCreateStatic+0x84>
 8018b76:	68bb      	ldr	r3, [r7, #8]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d101      	bne.n	8018b80 <xQueueGenericCreateStatic+0x88>
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	e000      	b.n	8018b82 <xQueueGenericCreateStatic+0x8a>
 8018b80:	2300      	movs	r3, #0
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d10b      	bne.n	8018b9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8018b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b8a:	f383 8811 	msr	BASEPRI, r3
 8018b8e:	f3bf 8f6f 	isb	sy
 8018b92:	f3bf 8f4f 	dsb	sy
 8018b96:	61fb      	str	r3, [r7, #28]
}
 8018b98:	bf00      	nop
 8018b9a:	bf00      	nop
 8018b9c:	e7fd      	b.n	8018b9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018b9e:	2350      	movs	r3, #80	@ 0x50
 8018ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	2b50      	cmp	r3, #80	@ 0x50
 8018ba6:	d00b      	beq.n	8018bc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8018ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bac:	f383 8811 	msr	BASEPRI, r3
 8018bb0:	f3bf 8f6f 	isb	sy
 8018bb4:	f3bf 8f4f 	dsb	sy
 8018bb8:	61bb      	str	r3, [r7, #24]
}
 8018bba:	bf00      	nop
 8018bbc:	bf00      	nop
 8018bbe:	e7fd      	b.n	8018bbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018bc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8018bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d00d      	beq.n	8018be8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bce:	2201      	movs	r2, #1
 8018bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018bd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bda:	9300      	str	r3, [sp, #0]
 8018bdc:	4613      	mov	r3, r2
 8018bde:	687a      	ldr	r2, [r7, #4]
 8018be0:	68b9      	ldr	r1, [r7, #8]
 8018be2:	68f8      	ldr	r0, [r7, #12]
 8018be4:	f000 f840 	bl	8018c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3730      	adds	r7, #48	@ 0x30
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018bf2:	b580      	push	{r7, lr}
 8018bf4:	b08a      	sub	sp, #40	@ 0x28
 8018bf6:	af02      	add	r7, sp, #8
 8018bf8:	60f8      	str	r0, [r7, #12]
 8018bfa:	60b9      	str	r1, [r7, #8]
 8018bfc:	4613      	mov	r3, r2
 8018bfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d10b      	bne.n	8018c1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8018c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c0a:	f383 8811 	msr	BASEPRI, r3
 8018c0e:	f3bf 8f6f 	isb	sy
 8018c12:	f3bf 8f4f 	dsb	sy
 8018c16:	613b      	str	r3, [r7, #16]
}
 8018c18:	bf00      	nop
 8018c1a:	bf00      	nop
 8018c1c:	e7fd      	b.n	8018c1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	68ba      	ldr	r2, [r7, #8]
 8018c22:	fb02 f303 	mul.w	r3, r2, r3
 8018c26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018c28:	69fb      	ldr	r3, [r7, #28]
 8018c2a:	3350      	adds	r3, #80	@ 0x50
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f002 fc0d 	bl	801b44c <pvPortMalloc>
 8018c32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018c34:	69bb      	ldr	r3, [r7, #24]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d011      	beq.n	8018c5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018c3a:	69bb      	ldr	r3, [r7, #24]
 8018c3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	3350      	adds	r3, #80	@ 0x50
 8018c42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018c44:	69bb      	ldr	r3, [r7, #24]
 8018c46:	2200      	movs	r2, #0
 8018c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018c4c:	79fa      	ldrb	r2, [r7, #7]
 8018c4e:	69bb      	ldr	r3, [r7, #24]
 8018c50:	9300      	str	r3, [sp, #0]
 8018c52:	4613      	mov	r3, r2
 8018c54:	697a      	ldr	r2, [r7, #20]
 8018c56:	68b9      	ldr	r1, [r7, #8]
 8018c58:	68f8      	ldr	r0, [r7, #12]
 8018c5a:	f000 f805 	bl	8018c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8018c60:	4618      	mov	r0, r3
 8018c62:	3720      	adds	r7, #32
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}

08018c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b084      	sub	sp, #16
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	60f8      	str	r0, [r7, #12]
 8018c70:	60b9      	str	r1, [r7, #8]
 8018c72:	607a      	str	r2, [r7, #4]
 8018c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d103      	bne.n	8018c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018c7c:	69bb      	ldr	r3, [r7, #24]
 8018c7e:	69ba      	ldr	r2, [r7, #24]
 8018c80:	601a      	str	r2, [r3, #0]
 8018c82:	e002      	b.n	8018c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018c84:	69bb      	ldr	r3, [r7, #24]
 8018c86:	687a      	ldr	r2, [r7, #4]
 8018c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018c8a:	69bb      	ldr	r3, [r7, #24]
 8018c8c:	68fa      	ldr	r2, [r7, #12]
 8018c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018c90:	69bb      	ldr	r3, [r7, #24]
 8018c92:	68ba      	ldr	r2, [r7, #8]
 8018c94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018c96:	2101      	movs	r1, #1
 8018c98:	69b8      	ldr	r0, [r7, #24]
 8018c9a:	f7ff fec3 	bl	8018a24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018c9e:	69bb      	ldr	r3, [r7, #24]
 8018ca0:	78fa      	ldrb	r2, [r7, #3]
 8018ca2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018ca6:	bf00      	nop
 8018ca8:	3710      	adds	r7, #16
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
	...

08018cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b08e      	sub	sp, #56	@ 0x38
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	60f8      	str	r0, [r7, #12]
 8018cb8:	60b9      	str	r1, [r7, #8]
 8018cba:	607a      	str	r2, [r7, #4]
 8018cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d10b      	bne.n	8018ce4 <xQueueGenericSend+0x34>
	__asm volatile
 8018ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cd0:	f383 8811 	msr	BASEPRI, r3
 8018cd4:	f3bf 8f6f 	isb	sy
 8018cd8:	f3bf 8f4f 	dsb	sy
 8018cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018cde:	bf00      	nop
 8018ce0:	bf00      	nop
 8018ce2:	e7fd      	b.n	8018ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ce4:	68bb      	ldr	r3, [r7, #8]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d103      	bne.n	8018cf2 <xQueueGenericSend+0x42>
 8018cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d101      	bne.n	8018cf6 <xQueueGenericSend+0x46>
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	e000      	b.n	8018cf8 <xQueueGenericSend+0x48>
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d10b      	bne.n	8018d14 <xQueueGenericSend+0x64>
	__asm volatile
 8018cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d00:	f383 8811 	msr	BASEPRI, r3
 8018d04:	f3bf 8f6f 	isb	sy
 8018d08:	f3bf 8f4f 	dsb	sy
 8018d0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018d0e:	bf00      	nop
 8018d10:	bf00      	nop
 8018d12:	e7fd      	b.n	8018d10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	2b02      	cmp	r3, #2
 8018d18:	d103      	bne.n	8018d22 <xQueueGenericSend+0x72>
 8018d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d1e:	2b01      	cmp	r3, #1
 8018d20:	d101      	bne.n	8018d26 <xQueueGenericSend+0x76>
 8018d22:	2301      	movs	r3, #1
 8018d24:	e000      	b.n	8018d28 <xQueueGenericSend+0x78>
 8018d26:	2300      	movs	r3, #0
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d10b      	bne.n	8018d44 <xQueueGenericSend+0x94>
	__asm volatile
 8018d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d30:	f383 8811 	msr	BASEPRI, r3
 8018d34:	f3bf 8f6f 	isb	sy
 8018d38:	f3bf 8f4f 	dsb	sy
 8018d3c:	623b      	str	r3, [r7, #32]
}
 8018d3e:	bf00      	nop
 8018d40:	bf00      	nop
 8018d42:	e7fd      	b.n	8018d40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018d44:	f001 fbc8 	bl	801a4d8 <xTaskGetSchedulerState>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d102      	bne.n	8018d54 <xQueueGenericSend+0xa4>
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d101      	bne.n	8018d58 <xQueueGenericSend+0xa8>
 8018d54:	2301      	movs	r3, #1
 8018d56:	e000      	b.n	8018d5a <xQueueGenericSend+0xaa>
 8018d58:	2300      	movs	r3, #0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d10b      	bne.n	8018d76 <xQueueGenericSend+0xc6>
	__asm volatile
 8018d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d62:	f383 8811 	msr	BASEPRI, r3
 8018d66:	f3bf 8f6f 	isb	sy
 8018d6a:	f3bf 8f4f 	dsb	sy
 8018d6e:	61fb      	str	r3, [r7, #28]
}
 8018d70:	bf00      	nop
 8018d72:	bf00      	nop
 8018d74:	e7fd      	b.n	8018d72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018d76:	f002 fa47 	bl	801b208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d82:	429a      	cmp	r2, r3
 8018d84:	d302      	bcc.n	8018d8c <xQueueGenericSend+0xdc>
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	2b02      	cmp	r3, #2
 8018d8a:	d129      	bne.n	8018de0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018d8c:	683a      	ldr	r2, [r7, #0]
 8018d8e:	68b9      	ldr	r1, [r7, #8]
 8018d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018d92:	f000 fa9f 	bl	80192d4 <prvCopyDataToQueue>
 8018d96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d010      	beq.n	8018dc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018da2:	3324      	adds	r3, #36	@ 0x24
 8018da4:	4618      	mov	r0, r3
 8018da6:	f001 f96d 	bl	801a084 <xTaskRemoveFromEventList>
 8018daa:	4603      	mov	r3, r0
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d013      	beq.n	8018dd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018db0:	4b3f      	ldr	r3, [pc, #252]	@ (8018eb0 <xQueueGenericSend+0x200>)
 8018db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018db6:	601a      	str	r2, [r3, #0]
 8018db8:	f3bf 8f4f 	dsb	sy
 8018dbc:	f3bf 8f6f 	isb	sy
 8018dc0:	e00a      	b.n	8018dd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d007      	beq.n	8018dd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018dc8:	4b39      	ldr	r3, [pc, #228]	@ (8018eb0 <xQueueGenericSend+0x200>)
 8018dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018dce:	601a      	str	r2, [r3, #0]
 8018dd0:	f3bf 8f4f 	dsb	sy
 8018dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018dd8:	f002 fa48 	bl	801b26c <vPortExitCritical>
				return pdPASS;
 8018ddc:	2301      	movs	r3, #1
 8018dde:	e063      	b.n	8018ea8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d103      	bne.n	8018dee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018de6:	f002 fa41 	bl	801b26c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018dea:	2300      	movs	r3, #0
 8018dec:	e05c      	b.n	8018ea8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d106      	bne.n	8018e02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018df4:	f107 0314 	add.w	r3, r7, #20
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f001 fa0b 	bl	801a214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018dfe:	2301      	movs	r3, #1
 8018e00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018e02:	f002 fa33 	bl	801b26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018e06:	f000 fee5 	bl	8019bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018e0a:	f002 f9fd 	bl	801b208 <vPortEnterCritical>
 8018e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018e14:	b25b      	sxtb	r3, r3
 8018e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e1a:	d103      	bne.n	8018e24 <xQueueGenericSend+0x174>
 8018e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e1e:	2200      	movs	r2, #0
 8018e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018e2a:	b25b      	sxtb	r3, r3
 8018e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e30:	d103      	bne.n	8018e3a <xQueueGenericSend+0x18a>
 8018e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e34:	2200      	movs	r2, #0
 8018e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018e3a:	f002 fa17 	bl	801b26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018e3e:	1d3a      	adds	r2, r7, #4
 8018e40:	f107 0314 	add.w	r3, r7, #20
 8018e44:	4611      	mov	r1, r2
 8018e46:	4618      	mov	r0, r3
 8018e48:	f001 f9fa 	bl	801a240 <xTaskCheckForTimeOut>
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d124      	bne.n	8018e9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018e52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e54:	f000 fb36 	bl	80194c4 <prvIsQueueFull>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d018      	beq.n	8018e90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e60:	3310      	adds	r3, #16
 8018e62:	687a      	ldr	r2, [r7, #4]
 8018e64:	4611      	mov	r1, r2
 8018e66:	4618      	mov	r0, r3
 8018e68:	f001 f8ba 	bl	8019fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e6e:	f000 fac1 	bl	80193f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018e72:	f000 febd 	bl	8019bf0 <xTaskResumeAll>
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	f47f af7c 	bne.w	8018d76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8018e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8018eb0 <xQueueGenericSend+0x200>)
 8018e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e84:	601a      	str	r2, [r3, #0]
 8018e86:	f3bf 8f4f 	dsb	sy
 8018e8a:	f3bf 8f6f 	isb	sy
 8018e8e:	e772      	b.n	8018d76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e92:	f000 faaf 	bl	80193f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018e96:	f000 feab 	bl	8019bf0 <xTaskResumeAll>
 8018e9a:	e76c      	b.n	8018d76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e9e:	f000 faa9 	bl	80193f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018ea2:	f000 fea5 	bl	8019bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018ea6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	3738      	adds	r7, #56	@ 0x38
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	e000ed04 	.word	0xe000ed04

08018eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b090      	sub	sp, #64	@ 0x40
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	60f8      	str	r0, [r7, #12]
 8018ebc:	60b9      	str	r1, [r7, #8]
 8018ebe:	607a      	str	r2, [r7, #4]
 8018ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8018ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d10b      	bne.n	8018ee4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8018ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ed0:	f383 8811 	msr	BASEPRI, r3
 8018ed4:	f3bf 8f6f 	isb	sy
 8018ed8:	f3bf 8f4f 	dsb	sy
 8018edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018ede:	bf00      	nop
 8018ee0:	bf00      	nop
 8018ee2:	e7fd      	b.n	8018ee0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d103      	bne.n	8018ef2 <xQueueGenericSendFromISR+0x3e>
 8018eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d101      	bne.n	8018ef6 <xQueueGenericSendFromISR+0x42>
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	e000      	b.n	8018ef8 <xQueueGenericSendFromISR+0x44>
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d10b      	bne.n	8018f14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8018efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f00:	f383 8811 	msr	BASEPRI, r3
 8018f04:	f3bf 8f6f 	isb	sy
 8018f08:	f3bf 8f4f 	dsb	sy
 8018f0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018f0e:	bf00      	nop
 8018f10:	bf00      	nop
 8018f12:	e7fd      	b.n	8018f10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	2b02      	cmp	r3, #2
 8018f18:	d103      	bne.n	8018f22 <xQueueGenericSendFromISR+0x6e>
 8018f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018f1e:	2b01      	cmp	r3, #1
 8018f20:	d101      	bne.n	8018f26 <xQueueGenericSendFromISR+0x72>
 8018f22:	2301      	movs	r3, #1
 8018f24:	e000      	b.n	8018f28 <xQueueGenericSendFromISR+0x74>
 8018f26:	2300      	movs	r3, #0
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d10b      	bne.n	8018f44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8018f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f30:	f383 8811 	msr	BASEPRI, r3
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	f3bf 8f4f 	dsb	sy
 8018f3c:	623b      	str	r3, [r7, #32]
}
 8018f3e:	bf00      	nop
 8018f40:	bf00      	nop
 8018f42:	e7fd      	b.n	8018f40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018f44:	f002 fa40 	bl	801b3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018f48:	f3ef 8211 	mrs	r2, BASEPRI
 8018f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f50:	f383 8811 	msr	BASEPRI, r3
 8018f54:	f3bf 8f6f 	isb	sy
 8018f58:	f3bf 8f4f 	dsb	sy
 8018f5c:	61fa      	str	r2, [r7, #28]
 8018f5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018f60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018f62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d302      	bcc.n	8018f76 <xQueueGenericSendFromISR+0xc2>
 8018f70:	683b      	ldr	r3, [r7, #0]
 8018f72:	2b02      	cmp	r3, #2
 8018f74:	d12f      	bne.n	8018fd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018f7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018f86:	683a      	ldr	r2, [r7, #0]
 8018f88:	68b9      	ldr	r1, [r7, #8]
 8018f8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018f8c:	f000 f9a2 	bl	80192d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018f90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8018f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f98:	d112      	bne.n	8018fc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d016      	beq.n	8018fd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fa4:	3324      	adds	r3, #36	@ 0x24
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f001 f86c 	bl	801a084 <xTaskRemoveFromEventList>
 8018fac:	4603      	mov	r3, r0
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d00e      	beq.n	8018fd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d00b      	beq.n	8018fd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2201      	movs	r2, #1
 8018fbc:	601a      	str	r2, [r3, #0]
 8018fbe:	e007      	b.n	8018fd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	b25a      	sxtb	r2, r3
 8018fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8018fd4:	e001      	b.n	8018fda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8018fe4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8018fe8:	4618      	mov	r0, r3
 8018fea:	3740      	adds	r7, #64	@ 0x40
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}

08018ff0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b08e      	sub	sp, #56	@ 0x38
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
 8018ff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019000:	2b00      	cmp	r3, #0
 8019002:	d10b      	bne.n	801901c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8019004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019008:	f383 8811 	msr	BASEPRI, r3
 801900c:	f3bf 8f6f 	isb	sy
 8019010:	f3bf 8f4f 	dsb	sy
 8019014:	623b      	str	r3, [r7, #32]
}
 8019016:	bf00      	nop
 8019018:	bf00      	nop
 801901a:	e7fd      	b.n	8019018 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801901e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019020:	2b00      	cmp	r3, #0
 8019022:	d00b      	beq.n	801903c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8019024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019028:	f383 8811 	msr	BASEPRI, r3
 801902c:	f3bf 8f6f 	isb	sy
 8019030:	f3bf 8f4f 	dsb	sy
 8019034:	61fb      	str	r3, [r7, #28]
}
 8019036:	bf00      	nop
 8019038:	bf00      	nop
 801903a:	e7fd      	b.n	8019038 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d103      	bne.n	801904c <xQueueGiveFromISR+0x5c>
 8019044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019046:	689b      	ldr	r3, [r3, #8]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d101      	bne.n	8019050 <xQueueGiveFromISR+0x60>
 801904c:	2301      	movs	r3, #1
 801904e:	e000      	b.n	8019052 <xQueueGiveFromISR+0x62>
 8019050:	2300      	movs	r3, #0
 8019052:	2b00      	cmp	r3, #0
 8019054:	d10b      	bne.n	801906e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8019056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801905a:	f383 8811 	msr	BASEPRI, r3
 801905e:	f3bf 8f6f 	isb	sy
 8019062:	f3bf 8f4f 	dsb	sy
 8019066:	61bb      	str	r3, [r7, #24]
}
 8019068:	bf00      	nop
 801906a:	bf00      	nop
 801906c:	e7fd      	b.n	801906a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801906e:	f002 f9ab 	bl	801b3c8 <vPortValidateInterruptPriority>
	__asm volatile
 8019072:	f3ef 8211 	mrs	r2, BASEPRI
 8019076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801907a:	f383 8811 	msr	BASEPRI, r3
 801907e:	f3bf 8f6f 	isb	sy
 8019082:	f3bf 8f4f 	dsb	sy
 8019086:	617a      	str	r2, [r7, #20]
 8019088:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801908a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801908c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019092:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801909a:	429a      	cmp	r2, r3
 801909c:	d22b      	bcs.n	80190f6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801909e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80190a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80190a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190aa:	1c5a      	adds	r2, r3, #1
 80190ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80190b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80190b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190b8:	d112      	bne.n	80190e0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80190ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d016      	beq.n	80190f0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80190c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190c4:	3324      	adds	r3, #36	@ 0x24
 80190c6:	4618      	mov	r0, r3
 80190c8:	f000 ffdc 	bl	801a084 <xTaskRemoveFromEventList>
 80190cc:	4603      	mov	r3, r0
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d00e      	beq.n	80190f0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d00b      	beq.n	80190f0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	2201      	movs	r2, #1
 80190dc:	601a      	str	r2, [r3, #0]
 80190de:	e007      	b.n	80190f0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80190e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80190e4:	3301      	adds	r3, #1
 80190e6:	b2db      	uxtb	r3, r3
 80190e8:	b25a      	sxtb	r2, r3
 80190ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80190f0:	2301      	movs	r3, #1
 80190f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80190f4:	e001      	b.n	80190fa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80190f6:	2300      	movs	r3, #0
 80190f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80190fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	f383 8811 	msr	BASEPRI, r3
}
 8019104:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019108:	4618      	mov	r0, r3
 801910a:	3738      	adds	r7, #56	@ 0x38
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}

08019110 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b08c      	sub	sp, #48	@ 0x30
 8019114:	af00      	add	r7, sp, #0
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	60b9      	str	r1, [r7, #8]
 801911a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801911c:	2300      	movs	r3, #0
 801911e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019126:	2b00      	cmp	r3, #0
 8019128:	d10b      	bne.n	8019142 <xQueueReceive+0x32>
	__asm volatile
 801912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801912e:	f383 8811 	msr	BASEPRI, r3
 8019132:	f3bf 8f6f 	isb	sy
 8019136:	f3bf 8f4f 	dsb	sy
 801913a:	623b      	str	r3, [r7, #32]
}
 801913c:	bf00      	nop
 801913e:	bf00      	nop
 8019140:	e7fd      	b.n	801913e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d103      	bne.n	8019150 <xQueueReceive+0x40>
 8019148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801914a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801914c:	2b00      	cmp	r3, #0
 801914e:	d101      	bne.n	8019154 <xQueueReceive+0x44>
 8019150:	2301      	movs	r3, #1
 8019152:	e000      	b.n	8019156 <xQueueReceive+0x46>
 8019154:	2300      	movs	r3, #0
 8019156:	2b00      	cmp	r3, #0
 8019158:	d10b      	bne.n	8019172 <xQueueReceive+0x62>
	__asm volatile
 801915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801915e:	f383 8811 	msr	BASEPRI, r3
 8019162:	f3bf 8f6f 	isb	sy
 8019166:	f3bf 8f4f 	dsb	sy
 801916a:	61fb      	str	r3, [r7, #28]
}
 801916c:	bf00      	nop
 801916e:	bf00      	nop
 8019170:	e7fd      	b.n	801916e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019172:	f001 f9b1 	bl	801a4d8 <xTaskGetSchedulerState>
 8019176:	4603      	mov	r3, r0
 8019178:	2b00      	cmp	r3, #0
 801917a:	d102      	bne.n	8019182 <xQueueReceive+0x72>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d101      	bne.n	8019186 <xQueueReceive+0x76>
 8019182:	2301      	movs	r3, #1
 8019184:	e000      	b.n	8019188 <xQueueReceive+0x78>
 8019186:	2300      	movs	r3, #0
 8019188:	2b00      	cmp	r3, #0
 801918a:	d10b      	bne.n	80191a4 <xQueueReceive+0x94>
	__asm volatile
 801918c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019190:	f383 8811 	msr	BASEPRI, r3
 8019194:	f3bf 8f6f 	isb	sy
 8019198:	f3bf 8f4f 	dsb	sy
 801919c:	61bb      	str	r3, [r7, #24]
}
 801919e:	bf00      	nop
 80191a0:	bf00      	nop
 80191a2:	e7fd      	b.n	80191a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80191a4:	f002 f830 	bl	801b208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80191a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80191ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d01f      	beq.n	80191f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80191b4:	68b9      	ldr	r1, [r7, #8]
 80191b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80191b8:	f000 f8f6 	bl	80193a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80191bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191be:	1e5a      	subs	r2, r3, #1
 80191c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80191c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c6:	691b      	ldr	r3, [r3, #16]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d00f      	beq.n	80191ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80191cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191ce:	3310      	adds	r3, #16
 80191d0:	4618      	mov	r0, r3
 80191d2:	f000 ff57 	bl	801a084 <xTaskRemoveFromEventList>
 80191d6:	4603      	mov	r3, r0
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d007      	beq.n	80191ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80191dc:	4b3c      	ldr	r3, [pc, #240]	@ (80192d0 <xQueueReceive+0x1c0>)
 80191de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191e2:	601a      	str	r2, [r3, #0]
 80191e4:	f3bf 8f4f 	dsb	sy
 80191e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80191ec:	f002 f83e 	bl	801b26c <vPortExitCritical>
				return pdPASS;
 80191f0:	2301      	movs	r3, #1
 80191f2:	e069      	b.n	80192c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d103      	bne.n	8019202 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80191fa:	f002 f837 	bl	801b26c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80191fe:	2300      	movs	r3, #0
 8019200:	e062      	b.n	80192c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019204:	2b00      	cmp	r3, #0
 8019206:	d106      	bne.n	8019216 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019208:	f107 0310 	add.w	r3, r7, #16
 801920c:	4618      	mov	r0, r3
 801920e:	f001 f801 	bl	801a214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019212:	2301      	movs	r3, #1
 8019214:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019216:	f002 f829 	bl	801b26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801921a:	f000 fcdb 	bl	8019bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801921e:	f001 fff3 	bl	801b208 <vPortEnterCritical>
 8019222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019228:	b25b      	sxtb	r3, r3
 801922a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801922e:	d103      	bne.n	8019238 <xQueueReceive+0x128>
 8019230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019232:	2200      	movs	r2, #0
 8019234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801923a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801923e:	b25b      	sxtb	r3, r3
 8019240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019244:	d103      	bne.n	801924e <xQueueReceive+0x13e>
 8019246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019248:	2200      	movs	r2, #0
 801924a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801924e:	f002 f80d 	bl	801b26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019252:	1d3a      	adds	r2, r7, #4
 8019254:	f107 0310 	add.w	r3, r7, #16
 8019258:	4611      	mov	r1, r2
 801925a:	4618      	mov	r0, r3
 801925c:	f000 fff0 	bl	801a240 <xTaskCheckForTimeOut>
 8019260:	4603      	mov	r3, r0
 8019262:	2b00      	cmp	r3, #0
 8019264:	d123      	bne.n	80192ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019268:	f000 f916 	bl	8019498 <prvIsQueueEmpty>
 801926c:	4603      	mov	r3, r0
 801926e:	2b00      	cmp	r3, #0
 8019270:	d017      	beq.n	80192a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019274:	3324      	adds	r3, #36	@ 0x24
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	4611      	mov	r1, r2
 801927a:	4618      	mov	r0, r3
 801927c:	f000 feb0 	bl	8019fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019282:	f000 f8b7 	bl	80193f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019286:	f000 fcb3 	bl	8019bf0 <xTaskResumeAll>
 801928a:	4603      	mov	r3, r0
 801928c:	2b00      	cmp	r3, #0
 801928e:	d189      	bne.n	80191a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8019290:	4b0f      	ldr	r3, [pc, #60]	@ (80192d0 <xQueueReceive+0x1c0>)
 8019292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019296:	601a      	str	r2, [r3, #0]
 8019298:	f3bf 8f4f 	dsb	sy
 801929c:	f3bf 8f6f 	isb	sy
 80192a0:	e780      	b.n	80191a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80192a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80192a4:	f000 f8a6 	bl	80193f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80192a8:	f000 fca2 	bl	8019bf0 <xTaskResumeAll>
 80192ac:	e77a      	b.n	80191a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80192ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80192b0:	f000 f8a0 	bl	80193f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80192b4:	f000 fc9c 	bl	8019bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80192b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80192ba:	f000 f8ed 	bl	8019498 <prvIsQueueEmpty>
 80192be:	4603      	mov	r3, r0
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	f43f af6f 	beq.w	80191a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80192c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	3730      	adds	r7, #48	@ 0x30
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}
 80192d0:	e000ed04 	.word	0xe000ed04

080192d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b086      	sub	sp, #24
 80192d8:	af00      	add	r7, sp, #0
 80192da:	60f8      	str	r0, [r7, #12]
 80192dc:	60b9      	str	r1, [r7, #8]
 80192de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80192e0:	2300      	movs	r3, #0
 80192e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d10d      	bne.n	801930e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d14d      	bne.n	8019396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	689b      	ldr	r3, [r3, #8]
 80192fe:	4618      	mov	r0, r3
 8019300:	f001 f908 	bl	801a514 <xTaskPriorityDisinherit>
 8019304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	2200      	movs	r2, #0
 801930a:	609a      	str	r2, [r3, #8]
 801930c:	e043      	b.n	8019396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d119      	bne.n	8019348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	6858      	ldr	r0, [r3, #4]
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801931c:	461a      	mov	r2, r3
 801931e:	68b9      	ldr	r1, [r7, #8]
 8019320:	f003 f9a0 	bl	801c664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	685a      	ldr	r2, [r3, #4]
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801932c:	441a      	add	r2, r3
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	685a      	ldr	r2, [r3, #4]
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	689b      	ldr	r3, [r3, #8]
 801933a:	429a      	cmp	r2, r3
 801933c:	d32b      	bcc.n	8019396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681a      	ldr	r2, [r3, #0]
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	605a      	str	r2, [r3, #4]
 8019346:	e026      	b.n	8019396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	68d8      	ldr	r0, [r3, #12]
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019350:	461a      	mov	r2, r3
 8019352:	68b9      	ldr	r1, [r7, #8]
 8019354:	f003 f986 	bl	801c664 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	68da      	ldr	r2, [r3, #12]
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019360:	425b      	negs	r3, r3
 8019362:	441a      	add	r2, r3
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	68da      	ldr	r2, [r3, #12]
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	429a      	cmp	r2, r3
 8019372:	d207      	bcs.n	8019384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	689a      	ldr	r2, [r3, #8]
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801937c:	425b      	negs	r3, r3
 801937e:	441a      	add	r2, r3
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	2b02      	cmp	r3, #2
 8019388:	d105      	bne.n	8019396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801938a:	693b      	ldr	r3, [r7, #16]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d002      	beq.n	8019396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	3b01      	subs	r3, #1
 8019394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	1c5a      	adds	r2, r3, #1
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801939e:	697b      	ldr	r3, [r7, #20]
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3718      	adds	r7, #24
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d018      	beq.n	80193ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	68da      	ldr	r2, [r3, #12]
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193c2:	441a      	add	r2, r3
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	68da      	ldr	r2, [r3, #12]
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	689b      	ldr	r3, [r3, #8]
 80193d0:	429a      	cmp	r2, r3
 80193d2:	d303      	bcc.n	80193dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681a      	ldr	r2, [r3, #0]
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	68d9      	ldr	r1, [r3, #12]
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193e4:	461a      	mov	r2, r3
 80193e6:	6838      	ldr	r0, [r7, #0]
 80193e8:	f003 f93c 	bl	801c664 <memcpy>
	}
}
 80193ec:	bf00      	nop
 80193ee:	3708      	adds	r7, #8
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd80      	pop	{r7, pc}

080193f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b084      	sub	sp, #16
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80193fc:	f001 ff04 	bl	801b208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019408:	e011      	b.n	801942e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801940e:	2b00      	cmp	r3, #0
 8019410:	d012      	beq.n	8019438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	3324      	adds	r3, #36	@ 0x24
 8019416:	4618      	mov	r0, r3
 8019418:	f000 fe34 	bl	801a084 <xTaskRemoveFromEventList>
 801941c:	4603      	mov	r3, r0
 801941e:	2b00      	cmp	r3, #0
 8019420:	d001      	beq.n	8019426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019422:	f000 ff71 	bl	801a308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019426:	7bfb      	ldrb	r3, [r7, #15]
 8019428:	3b01      	subs	r3, #1
 801942a:	b2db      	uxtb	r3, r3
 801942c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801942e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019432:	2b00      	cmp	r3, #0
 8019434:	dce9      	bgt.n	801940a <prvUnlockQueue+0x16>
 8019436:	e000      	b.n	801943a <prvUnlockQueue+0x46>
					break;
 8019438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	22ff      	movs	r2, #255	@ 0xff
 801943e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8019442:	f001 ff13 	bl	801b26c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019446:	f001 fedf 	bl	801b208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019452:	e011      	b.n	8019478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	691b      	ldr	r3, [r3, #16]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d012      	beq.n	8019482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	3310      	adds	r3, #16
 8019460:	4618      	mov	r0, r3
 8019462:	f000 fe0f 	bl	801a084 <xTaskRemoveFromEventList>
 8019466:	4603      	mov	r3, r0
 8019468:	2b00      	cmp	r3, #0
 801946a:	d001      	beq.n	8019470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801946c:	f000 ff4c 	bl	801a308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019470:	7bbb      	ldrb	r3, [r7, #14]
 8019472:	3b01      	subs	r3, #1
 8019474:	b2db      	uxtb	r3, r3
 8019476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801947c:	2b00      	cmp	r3, #0
 801947e:	dce9      	bgt.n	8019454 <prvUnlockQueue+0x60>
 8019480:	e000      	b.n	8019484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	22ff      	movs	r2, #255	@ 0xff
 8019488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801948c:	f001 feee 	bl	801b26c <vPortExitCritical>
}
 8019490:	bf00      	nop
 8019492:	3710      	adds	r7, #16
 8019494:	46bd      	mov	sp, r7
 8019496:	bd80      	pop	{r7, pc}

08019498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b084      	sub	sp, #16
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80194a0:	f001 feb2 	bl	801b208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d102      	bne.n	80194b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80194ac:	2301      	movs	r3, #1
 80194ae:	60fb      	str	r3, [r7, #12]
 80194b0:	e001      	b.n	80194b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80194b2:	2300      	movs	r3, #0
 80194b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80194b6:	f001 fed9 	bl	801b26c <vPortExitCritical>

	return xReturn;
 80194ba:	68fb      	ldr	r3, [r7, #12]
}
 80194bc:	4618      	mov	r0, r3
 80194be:	3710      	adds	r7, #16
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}

080194c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b084      	sub	sp, #16
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80194cc:	f001 fe9c 	bl	801b208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80194d8:	429a      	cmp	r2, r3
 80194da:	d102      	bne.n	80194e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80194dc:	2301      	movs	r3, #1
 80194de:	60fb      	str	r3, [r7, #12]
 80194e0:	e001      	b.n	80194e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80194e2:	2300      	movs	r3, #0
 80194e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80194e6:	f001 fec1 	bl	801b26c <vPortExitCritical>

	return xReturn;
 80194ea:	68fb      	ldr	r3, [r7, #12]
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	3710      	adds	r7, #16
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd80      	pop	{r7, pc}

080194f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80194f4:	b480      	push	{r7}
 80194f6:	b085      	sub	sp, #20
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
 80194fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80194fe:	2300      	movs	r3, #0
 8019500:	60fb      	str	r3, [r7, #12]
 8019502:	e014      	b.n	801952e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019504:	4a0f      	ldr	r2, [pc, #60]	@ (8019544 <vQueueAddToRegistry+0x50>)
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d10b      	bne.n	8019528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019510:	490c      	ldr	r1, [pc, #48]	@ (8019544 <vQueueAddToRegistry+0x50>)
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	683a      	ldr	r2, [r7, #0]
 8019516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801951a:	4a0a      	ldr	r2, [pc, #40]	@ (8019544 <vQueueAddToRegistry+0x50>)
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	00db      	lsls	r3, r3, #3
 8019520:	4413      	add	r3, r2
 8019522:	687a      	ldr	r2, [r7, #4]
 8019524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019526:	e006      	b.n	8019536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	3301      	adds	r3, #1
 801952c:	60fb      	str	r3, [r7, #12]
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	2b07      	cmp	r3, #7
 8019532:	d9e7      	bls.n	8019504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019534:	bf00      	nop
 8019536:	bf00      	nop
 8019538:	3714      	adds	r7, #20
 801953a:	46bd      	mov	sp, r7
 801953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019540:	4770      	bx	lr
 8019542:	bf00      	nop
 8019544:	20003ec0 	.word	0x20003ec0

08019548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019548:	b580      	push	{r7, lr}
 801954a:	b086      	sub	sp, #24
 801954c:	af00      	add	r7, sp, #0
 801954e:	60f8      	str	r0, [r7, #12]
 8019550:	60b9      	str	r1, [r7, #8]
 8019552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019558:	f001 fe56 	bl	801b208 <vPortEnterCritical>
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019562:	b25b      	sxtb	r3, r3
 8019564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019568:	d103      	bne.n	8019572 <vQueueWaitForMessageRestricted+0x2a>
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	2200      	movs	r2, #0
 801956e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019572:	697b      	ldr	r3, [r7, #20]
 8019574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019578:	b25b      	sxtb	r3, r3
 801957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801957e:	d103      	bne.n	8019588 <vQueueWaitForMessageRestricted+0x40>
 8019580:	697b      	ldr	r3, [r7, #20]
 8019582:	2200      	movs	r2, #0
 8019584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019588:	f001 fe70 	bl	801b26c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019590:	2b00      	cmp	r3, #0
 8019592:	d106      	bne.n	80195a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019594:	697b      	ldr	r3, [r7, #20]
 8019596:	3324      	adds	r3, #36	@ 0x24
 8019598:	687a      	ldr	r2, [r7, #4]
 801959a:	68b9      	ldr	r1, [r7, #8]
 801959c:	4618      	mov	r0, r3
 801959e:	f000 fd45 	bl	801a02c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80195a2:	6978      	ldr	r0, [r7, #20]
 80195a4:	f7ff ff26 	bl	80193f4 <prvUnlockQueue>
	}
 80195a8:	bf00      	nop
 80195aa:	3718      	adds	r7, #24
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b08e      	sub	sp, #56	@ 0x38
 80195b4:	af04      	add	r7, sp, #16
 80195b6:	60f8      	str	r0, [r7, #12]
 80195b8:	60b9      	str	r1, [r7, #8]
 80195ba:	607a      	str	r2, [r7, #4]
 80195bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80195be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d10b      	bne.n	80195dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80195c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195c8:	f383 8811 	msr	BASEPRI, r3
 80195cc:	f3bf 8f6f 	isb	sy
 80195d0:	f3bf 8f4f 	dsb	sy
 80195d4:	623b      	str	r3, [r7, #32]
}
 80195d6:	bf00      	nop
 80195d8:	bf00      	nop
 80195da:	e7fd      	b.n	80195d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80195dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d10b      	bne.n	80195fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80195e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195e6:	f383 8811 	msr	BASEPRI, r3
 80195ea:	f3bf 8f6f 	isb	sy
 80195ee:	f3bf 8f4f 	dsb	sy
 80195f2:	61fb      	str	r3, [r7, #28]
}
 80195f4:	bf00      	nop
 80195f6:	bf00      	nop
 80195f8:	e7fd      	b.n	80195f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80195fa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80195fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8019606:	d00b      	beq.n	8019620 <xTaskCreateStatic+0x70>
	__asm volatile
 8019608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801960c:	f383 8811 	msr	BASEPRI, r3
 8019610:	f3bf 8f6f 	isb	sy
 8019614:	f3bf 8f4f 	dsb	sy
 8019618:	61bb      	str	r3, [r7, #24]
}
 801961a:	bf00      	nop
 801961c:	bf00      	nop
 801961e:	e7fd      	b.n	801961c <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019620:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019624:	2b00      	cmp	r3, #0
 8019626:	d01e      	beq.n	8019666 <xTaskCreateStatic+0xb6>
 8019628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801962a:	2b00      	cmp	r3, #0
 801962c:	d01b      	beq.n	8019666 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801962e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019630:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019636:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801963a:	2202      	movs	r2, #2
 801963c:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019640:	2300      	movs	r3, #0
 8019642:	9303      	str	r3, [sp, #12]
 8019644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019646:	9302      	str	r3, [sp, #8]
 8019648:	f107 0314 	add.w	r3, r7, #20
 801964c:	9301      	str	r3, [sp, #4]
 801964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019650:	9300      	str	r3, [sp, #0]
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	687a      	ldr	r2, [r7, #4]
 8019656:	68b9      	ldr	r1, [r7, #8]
 8019658:	68f8      	ldr	r0, [r7, #12]
 801965a:	f000 f851 	bl	8019700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801965e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019660:	f000 f922 	bl	80198a8 <prvAddNewTaskToReadyList>
 8019664:	e001      	b.n	801966a <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 8019666:	2300      	movs	r3, #0
 8019668:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801966a:	697b      	ldr	r3, [r7, #20]
	}
 801966c:	4618      	mov	r0, r3
 801966e:	3728      	adds	r7, #40	@ 0x28
 8019670:	46bd      	mov	sp, r7
 8019672:	bd80      	pop	{r7, pc}

08019674 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019674:	b580      	push	{r7, lr}
 8019676:	b08c      	sub	sp, #48	@ 0x30
 8019678:	af04      	add	r7, sp, #16
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	603b      	str	r3, [r7, #0]
 8019680:	4613      	mov	r3, r2
 8019682:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019684:	88fb      	ldrh	r3, [r7, #6]
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	4618      	mov	r0, r3
 801968a:	f001 fedf 	bl	801b44c <pvPortMalloc>
 801968e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019690:	697b      	ldr	r3, [r7, #20]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d00f      	beq.n	80196b6 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019696:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801969a:	f001 fed7 	bl	801b44c <pvPortMalloc>
 801969e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80196a0:	69fb      	ldr	r3, [r7, #28]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d003      	beq.n	80196ae <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80196a6:	69fb      	ldr	r3, [r7, #28]
 80196a8:	697a      	ldr	r2, [r7, #20]
 80196aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80196ac:	e005      	b.n	80196ba <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80196ae:	6978      	ldr	r0, [r7, #20]
 80196b0:	f001 ff9a 	bl	801b5e8 <vPortFree>
 80196b4:	e001      	b.n	80196ba <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80196b6:	2300      	movs	r3, #0
 80196b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80196ba:	69fb      	ldr	r3, [r7, #28]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d017      	beq.n	80196f0 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80196c0:	69fb      	ldr	r3, [r7, #28]
 80196c2:	2200      	movs	r2, #0
 80196c4:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80196c8:	88fa      	ldrh	r2, [r7, #6]
 80196ca:	2300      	movs	r3, #0
 80196cc:	9303      	str	r3, [sp, #12]
 80196ce:	69fb      	ldr	r3, [r7, #28]
 80196d0:	9302      	str	r3, [sp, #8]
 80196d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196d4:	9301      	str	r3, [sp, #4]
 80196d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196d8:	9300      	str	r3, [sp, #0]
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	68b9      	ldr	r1, [r7, #8]
 80196de:	68f8      	ldr	r0, [r7, #12]
 80196e0:	f000 f80e 	bl	8019700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80196e4:	69f8      	ldr	r0, [r7, #28]
 80196e6:	f000 f8df 	bl	80198a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80196ea:	2301      	movs	r3, #1
 80196ec:	61bb      	str	r3, [r7, #24]
 80196ee:	e002      	b.n	80196f6 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80196f0:	f04f 33ff 	mov.w	r3, #4294967295
 80196f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80196f6:	69bb      	ldr	r3, [r7, #24]
	}
 80196f8:	4618      	mov	r0, r3
 80196fa:	3720      	adds	r7, #32
 80196fc:	46bd      	mov	sp, r7
 80196fe:	bd80      	pop	{r7, pc}

08019700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b088      	sub	sp, #32
 8019704:	af00      	add	r7, sp, #0
 8019706:	60f8      	str	r0, [r7, #12]
 8019708:	60b9      	str	r1, [r7, #8]
 801970a:	607a      	str	r2, [r7, #4]
 801970c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019710:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	461a      	mov	r2, r3
 8019718:	21a5      	movs	r1, #165	@ 0xa5
 801971a:	f002 fefa 	bl	801c512 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019728:	3b01      	subs	r3, #1
 801972a:	009b      	lsls	r3, r3, #2
 801972c:	4413      	add	r3, r2
 801972e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019730:	69bb      	ldr	r3, [r7, #24]
 8019732:	f023 0307 	bic.w	r3, r3, #7
 8019736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019738:	69bb      	ldr	r3, [r7, #24]
 801973a:	f003 0307 	and.w	r3, r3, #7
 801973e:	2b00      	cmp	r3, #0
 8019740:	d00b      	beq.n	801975a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8019742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019746:	f383 8811 	msr	BASEPRI, r3
 801974a:	f3bf 8f6f 	isb	sy
 801974e:	f3bf 8f4f 	dsb	sy
 8019752:	617b      	str	r3, [r7, #20]
}
 8019754:	bf00      	nop
 8019756:	bf00      	nop
 8019758:	e7fd      	b.n	8019756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801975a:	68bb      	ldr	r3, [r7, #8]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d01f      	beq.n	80197a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019760:	2300      	movs	r3, #0
 8019762:	61fb      	str	r3, [r7, #28]
 8019764:	e012      	b.n	801978c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019766:	68ba      	ldr	r2, [r7, #8]
 8019768:	69fb      	ldr	r3, [r7, #28]
 801976a:	4413      	add	r3, r2
 801976c:	7819      	ldrb	r1, [r3, #0]
 801976e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019770:	69fb      	ldr	r3, [r7, #28]
 8019772:	4413      	add	r3, r2
 8019774:	3334      	adds	r3, #52	@ 0x34
 8019776:	460a      	mov	r2, r1
 8019778:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801977a:	68ba      	ldr	r2, [r7, #8]
 801977c:	69fb      	ldr	r3, [r7, #28]
 801977e:	4413      	add	r3, r2
 8019780:	781b      	ldrb	r3, [r3, #0]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d006      	beq.n	8019794 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019786:	69fb      	ldr	r3, [r7, #28]
 8019788:	3301      	adds	r3, #1
 801978a:	61fb      	str	r3, [r7, #28]
 801978c:	69fb      	ldr	r3, [r7, #28]
 801978e:	2b0f      	cmp	r3, #15
 8019790:	d9e9      	bls.n	8019766 <prvInitialiseNewTask+0x66>
 8019792:	e000      	b.n	8019796 <prvInitialiseNewTask+0x96>
			{
				break;
 8019794:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019798:	2200      	movs	r2, #0
 801979a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801979e:	e003      	b.n	80197a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80197a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197a2:	2200      	movs	r2, #0
 80197a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80197a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197aa:	2b0e      	cmp	r3, #14
 80197ac:	d901      	bls.n	80197b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80197ae:	230e      	movs	r3, #14
 80197b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80197b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80197b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80197b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80197bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80197be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197c0:	2200      	movs	r2, #0
 80197c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80197c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197c6:	3304      	adds	r3, #4
 80197c8:	4618      	mov	r0, r3
 80197ca:	f7ff f897 	bl	80188fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80197ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197d0:	3318      	adds	r3, #24
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7ff f892 	bl	80188fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80197d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80197dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80197de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197e0:	f1c3 020f 	rsb	r2, r3, #15
 80197e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80197e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80197ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80197ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197f0:	2200      	movs	r2, #0
 80197f2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80197f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197f6:	2200      	movs	r2, #0
 80197f8:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80197fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197fe:	2200      	movs	r2, #0
 8019800:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019806:	3358      	adds	r3, #88	@ 0x58
 8019808:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801980c:	2100      	movs	r1, #0
 801980e:	4618      	mov	r0, r3
 8019810:	f002 fe7f 	bl	801c512 <memset>
 8019814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019816:	4a21      	ldr	r2, [pc, #132]	@ (801989c <prvInitialiseNewTask+0x19c>)
 8019818:	65da      	str	r2, [r3, #92]	@ 0x5c
 801981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801981c:	4a20      	ldr	r2, [pc, #128]	@ (80198a0 <prvInitialiseNewTask+0x1a0>)
 801981e:	661a      	str	r2, [r3, #96]	@ 0x60
 8019820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019822:	4a20      	ldr	r2, [pc, #128]	@ (80198a4 <prvInitialiseNewTask+0x1a4>)
 8019824:	665a      	str	r2, [r3, #100]	@ 0x64
 8019826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019828:	f04f 0201 	mov.w	r2, #1
 801982c:	f04f 0300 	mov.w	r3, #0
 8019830:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 8019834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019836:	f243 320e 	movw	r2, #13070	@ 0x330e
 801983a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 801983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019840:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8019844:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 8019848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801984a:	f241 2234 	movw	r2, #4660	@ 0x1234
 801984e:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 8019852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019854:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 8019858:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 801985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801985e:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 8019862:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 8019866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019868:	2205      	movs	r2, #5
 801986a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 801986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019870:	220b      	movs	r2, #11
 8019872:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019876:	683a      	ldr	r2, [r7, #0]
 8019878:	68f9      	ldr	r1, [r7, #12]
 801987a:	69b8      	ldr	r0, [r7, #24]
 801987c:	f001 fb94 	bl	801afa8 <pxPortInitialiseStack>
 8019880:	4602      	mov	r2, r0
 8019882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019884:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019888:	2b00      	cmp	r3, #0
 801988a:	d002      	beq.n	8019892 <prvInitialiseNewTask+0x192>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801988c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801988e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019892:	bf00      	nop
 8019894:	3720      	adds	r7, #32
 8019896:	46bd      	mov	sp, r7
 8019898:	bd80      	pop	{r7, pc}
 801989a:	bf00      	nop
 801989c:	2000d368 	.word	0x2000d368
 80198a0:	2000d3d0 	.word	0x2000d3d0
 80198a4:	2000d438 	.word	0x2000d438

080198a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b082      	sub	sp, #8
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80198b0:	f001 fcaa 	bl	801b208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80198b4:	4b2c      	ldr	r3, [pc, #176]	@ (8019968 <prvAddNewTaskToReadyList+0xc0>)
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	3301      	adds	r3, #1
 80198ba:	4a2b      	ldr	r2, [pc, #172]	@ (8019968 <prvAddNewTaskToReadyList+0xc0>)
 80198bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80198be:	4b2b      	ldr	r3, [pc, #172]	@ (801996c <prvAddNewTaskToReadyList+0xc4>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d109      	bne.n	80198da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80198c6:	4a29      	ldr	r2, [pc, #164]	@ (801996c <prvAddNewTaskToReadyList+0xc4>)
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80198cc:	4b26      	ldr	r3, [pc, #152]	@ (8019968 <prvAddNewTaskToReadyList+0xc0>)
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	2b01      	cmp	r3, #1
 80198d2:	d110      	bne.n	80198f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80198d4:	f000 fd3c 	bl	801a350 <prvInitialiseTaskLists>
 80198d8:	e00d      	b.n	80198f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80198da:	4b25      	ldr	r3, [pc, #148]	@ (8019970 <prvAddNewTaskToReadyList+0xc8>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d109      	bne.n	80198f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80198e2:	4b22      	ldr	r3, [pc, #136]	@ (801996c <prvAddNewTaskToReadyList+0xc4>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198ec:	429a      	cmp	r2, r3
 80198ee:	d802      	bhi.n	80198f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80198f0:	4a1e      	ldr	r2, [pc, #120]	@ (801996c <prvAddNewTaskToReadyList+0xc4>)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80198f6:	4b1f      	ldr	r3, [pc, #124]	@ (8019974 <prvAddNewTaskToReadyList+0xcc>)
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	3301      	adds	r3, #1
 80198fc:	4a1d      	ldr	r2, [pc, #116]	@ (8019974 <prvAddNewTaskToReadyList+0xcc>)
 80198fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019900:	4b1c      	ldr	r3, [pc, #112]	@ (8019974 <prvAddNewTaskToReadyList+0xcc>)
 8019902:	681a      	ldr	r2, [r3, #0]
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801990c:	2201      	movs	r2, #1
 801990e:	409a      	lsls	r2, r3
 8019910:	4b19      	ldr	r3, [pc, #100]	@ (8019978 <prvAddNewTaskToReadyList+0xd0>)
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	4313      	orrs	r3, r2
 8019916:	4a18      	ldr	r2, [pc, #96]	@ (8019978 <prvAddNewTaskToReadyList+0xd0>)
 8019918:	6013      	str	r3, [r2, #0]
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801991e:	4613      	mov	r3, r2
 8019920:	009b      	lsls	r3, r3, #2
 8019922:	4413      	add	r3, r2
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	4a15      	ldr	r2, [pc, #84]	@ (801997c <prvAddNewTaskToReadyList+0xd4>)
 8019928:	441a      	add	r2, r3
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	3304      	adds	r3, #4
 801992e:	4619      	mov	r1, r3
 8019930:	4610      	mov	r0, r2
 8019932:	f7fe fff0 	bl	8018916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019936:	f001 fc99 	bl	801b26c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801993a:	4b0d      	ldr	r3, [pc, #52]	@ (8019970 <prvAddNewTaskToReadyList+0xc8>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d00e      	beq.n	8019960 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019942:	4b0a      	ldr	r3, [pc, #40]	@ (801996c <prvAddNewTaskToReadyList+0xc4>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801994c:	429a      	cmp	r2, r3
 801994e:	d207      	bcs.n	8019960 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019950:	4b0b      	ldr	r3, [pc, #44]	@ (8019980 <prvAddNewTaskToReadyList+0xd8>)
 8019952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019956:	601a      	str	r2, [r3, #0]
 8019958:	f3bf 8f4f 	dsb	sy
 801995c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019960:	bf00      	nop
 8019962:	3708      	adds	r7, #8
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}
 8019968:	200040a0 	.word	0x200040a0
 801996c:	20003f00 	.word	0x20003f00
 8019970:	200040ac 	.word	0x200040ac
 8019974:	200040bc 	.word	0x200040bc
 8019978:	200040a8 	.word	0x200040a8
 801997c:	20003f04 	.word	0x20003f04
 8019980:	e000ed04 	.word	0xe000ed04

08019984 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8019984:	b580      	push	{r7, lr}
 8019986:	b08a      	sub	sp, #40	@ 0x28
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801998e:	2300      	movs	r3, #0
 8019990:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d10b      	bne.n	80199b0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8019998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801999c:	f383 8811 	msr	BASEPRI, r3
 80199a0:	f3bf 8f6f 	isb	sy
 80199a4:	f3bf 8f4f 	dsb	sy
 80199a8:	617b      	str	r3, [r7, #20]
}
 80199aa:	bf00      	nop
 80199ac:	bf00      	nop
 80199ae:	e7fd      	b.n	80199ac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d10b      	bne.n	80199ce <vTaskDelayUntil+0x4a>
	__asm volatile
 80199b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199ba:	f383 8811 	msr	BASEPRI, r3
 80199be:	f3bf 8f6f 	isb	sy
 80199c2:	f3bf 8f4f 	dsb	sy
 80199c6:	613b      	str	r3, [r7, #16]
}
 80199c8:	bf00      	nop
 80199ca:	bf00      	nop
 80199cc:	e7fd      	b.n	80199ca <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80199ce:	4b2a      	ldr	r3, [pc, #168]	@ (8019a78 <vTaskDelayUntil+0xf4>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d00b      	beq.n	80199ee <vTaskDelayUntil+0x6a>
	__asm volatile
 80199d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199da:	f383 8811 	msr	BASEPRI, r3
 80199de:	f3bf 8f6f 	isb	sy
 80199e2:	f3bf 8f4f 	dsb	sy
 80199e6:	60fb      	str	r3, [r7, #12]
}
 80199e8:	bf00      	nop
 80199ea:	bf00      	nop
 80199ec:	e7fd      	b.n	80199ea <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80199ee:	f000 f8f1 	bl	8019bd4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80199f2:	4b22      	ldr	r3, [pc, #136]	@ (8019a7c <vTaskDelayUntil+0xf8>)
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	683a      	ldr	r2, [r7, #0]
 80199fe:	4413      	add	r3, r2
 8019a00:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	6a3a      	ldr	r2, [r7, #32]
 8019a08:	429a      	cmp	r2, r3
 8019a0a:	d20b      	bcs.n	8019a24 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	69fa      	ldr	r2, [r7, #28]
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d211      	bcs.n	8019a3a <vTaskDelayUntil+0xb6>
 8019a16:	69fa      	ldr	r2, [r7, #28]
 8019a18:	6a3b      	ldr	r3, [r7, #32]
 8019a1a:	429a      	cmp	r2, r3
 8019a1c:	d90d      	bls.n	8019a3a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8019a1e:	2301      	movs	r3, #1
 8019a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8019a22:	e00a      	b.n	8019a3a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	69fa      	ldr	r2, [r7, #28]
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d303      	bcc.n	8019a36 <vTaskDelayUntil+0xb2>
 8019a2e:	69fa      	ldr	r2, [r7, #28]
 8019a30:	6a3b      	ldr	r3, [r7, #32]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d901      	bls.n	8019a3a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8019a36:	2301      	movs	r3, #1
 8019a38:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	69fa      	ldr	r2, [r7, #28]
 8019a3e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8019a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d006      	beq.n	8019a54 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8019a46:	69fa      	ldr	r2, [r7, #28]
 8019a48:	6a3b      	ldr	r3, [r7, #32]
 8019a4a:	1ad3      	subs	r3, r2, r3
 8019a4c:	2100      	movs	r1, #0
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f000 feca 	bl	801a7e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8019a54:	f000 f8cc 	bl	8019bf0 <xTaskResumeAll>
 8019a58:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019a5a:	69bb      	ldr	r3, [r7, #24]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d107      	bne.n	8019a70 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8019a60:	4b07      	ldr	r3, [pc, #28]	@ (8019a80 <vTaskDelayUntil+0xfc>)
 8019a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019a66:	601a      	str	r2, [r3, #0]
 8019a68:	f3bf 8f4f 	dsb	sy
 8019a6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019a70:	bf00      	nop
 8019a72:	3728      	adds	r7, #40	@ 0x28
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd80      	pop	{r7, pc}
 8019a78:	200040c8 	.word	0x200040c8
 8019a7c:	200040a4 	.word	0x200040a4
 8019a80:	e000ed04 	.word	0xe000ed04

08019a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b084      	sub	sp, #16
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d018      	beq.n	8019ac8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019a96:	4b14      	ldr	r3, [pc, #80]	@ (8019ae8 <vTaskDelay+0x64>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d00b      	beq.n	8019ab6 <vTaskDelay+0x32>
	__asm volatile
 8019a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aa2:	f383 8811 	msr	BASEPRI, r3
 8019aa6:	f3bf 8f6f 	isb	sy
 8019aaa:	f3bf 8f4f 	dsb	sy
 8019aae:	60bb      	str	r3, [r7, #8]
}
 8019ab0:	bf00      	nop
 8019ab2:	bf00      	nop
 8019ab4:	e7fd      	b.n	8019ab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019ab6:	f000 f88d 	bl	8019bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019aba:	2100      	movs	r1, #0
 8019abc:	6878      	ldr	r0, [r7, #4]
 8019abe:	f000 fe93 	bl	801a7e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019ac2:	f000 f895 	bl	8019bf0 <xTaskResumeAll>
 8019ac6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d107      	bne.n	8019ade <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8019ace:	4b07      	ldr	r3, [pc, #28]	@ (8019aec <vTaskDelay+0x68>)
 8019ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ad4:	601a      	str	r2, [r3, #0]
 8019ad6:	f3bf 8f4f 	dsb	sy
 8019ada:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019ade:	bf00      	nop
 8019ae0:	3710      	adds	r7, #16
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bd80      	pop	{r7, pc}
 8019ae6:	bf00      	nop
 8019ae8:	200040c8 	.word	0x200040c8
 8019aec:	e000ed04 	.word	0xe000ed04

08019af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b08a      	sub	sp, #40	@ 0x28
 8019af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019af6:	2300      	movs	r3, #0
 8019af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019afa:	2300      	movs	r3, #0
 8019afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019afe:	463a      	mov	r2, r7
 8019b00:	1d39      	adds	r1, r7, #4
 8019b02:	f107 0308 	add.w	r3, r7, #8
 8019b06:	4618      	mov	r0, r3
 8019b08:	f7e9 fb36 	bl	8003178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019b0c:	6839      	ldr	r1, [r7, #0]
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	68ba      	ldr	r2, [r7, #8]
 8019b12:	9202      	str	r2, [sp, #8]
 8019b14:	9301      	str	r3, [sp, #4]
 8019b16:	2300      	movs	r3, #0
 8019b18:	9300      	str	r3, [sp, #0]
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	460a      	mov	r2, r1
 8019b1e:	4925      	ldr	r1, [pc, #148]	@ (8019bb4 <vTaskStartScheduler+0xc4>)
 8019b20:	4825      	ldr	r0, [pc, #148]	@ (8019bb8 <vTaskStartScheduler+0xc8>)
 8019b22:	f7ff fd45 	bl	80195b0 <xTaskCreateStatic>
 8019b26:	4603      	mov	r3, r0
 8019b28:	4a24      	ldr	r2, [pc, #144]	@ (8019bbc <vTaskStartScheduler+0xcc>)
 8019b2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019b2c:	4b23      	ldr	r3, [pc, #140]	@ (8019bbc <vTaskStartScheduler+0xcc>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d002      	beq.n	8019b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019b34:	2301      	movs	r3, #1
 8019b36:	617b      	str	r3, [r7, #20]
 8019b38:	e001      	b.n	8019b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019b3e:	697b      	ldr	r3, [r7, #20]
 8019b40:	2b01      	cmp	r3, #1
 8019b42:	d102      	bne.n	8019b4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019b44:	f000 feb6 	bl	801a8b4 <xTimerCreateTimerTask>
 8019b48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	2b01      	cmp	r3, #1
 8019b4e:	d11d      	bne.n	8019b8c <vTaskStartScheduler+0x9c>
	__asm volatile
 8019b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b54:	f383 8811 	msr	BASEPRI, r3
 8019b58:	f3bf 8f6f 	isb	sy
 8019b5c:	f3bf 8f4f 	dsb	sy
 8019b60:	613b      	str	r3, [r7, #16]
}
 8019b62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019b64:	4b16      	ldr	r3, [pc, #88]	@ (8019bc0 <vTaskStartScheduler+0xd0>)
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	3358      	adds	r3, #88	@ 0x58
 8019b6a:	4a16      	ldr	r2, [pc, #88]	@ (8019bc4 <vTaskStartScheduler+0xd4>)
 8019b6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019b6e:	4b16      	ldr	r3, [pc, #88]	@ (8019bc8 <vTaskStartScheduler+0xd8>)
 8019b70:	f04f 32ff 	mov.w	r2, #4294967295
 8019b74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019b76:	4b15      	ldr	r3, [pc, #84]	@ (8019bcc <vTaskStartScheduler+0xdc>)
 8019b78:	2201      	movs	r2, #1
 8019b7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019b7c:	4b14      	ldr	r3, [pc, #80]	@ (8019bd0 <vTaskStartScheduler+0xe0>)
 8019b7e:	2200      	movs	r2, #0
 8019b80:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8019b82:	f7e9 fadf 	bl	8003144 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019b86:	f001 fa9b 	bl	801b0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019b8a:	e00f      	b.n	8019bac <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019b8c:	697b      	ldr	r3, [r7, #20]
 8019b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b92:	d10b      	bne.n	8019bac <vTaskStartScheduler+0xbc>
	__asm volatile
 8019b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b98:	f383 8811 	msr	BASEPRI, r3
 8019b9c:	f3bf 8f6f 	isb	sy
 8019ba0:	f3bf 8f4f 	dsb	sy
 8019ba4:	60fb      	str	r3, [r7, #12]
}
 8019ba6:	bf00      	nop
 8019ba8:	bf00      	nop
 8019baa:	e7fd      	b.n	8019ba8 <vTaskStartScheduler+0xb8>
}
 8019bac:	bf00      	nop
 8019bae:	3718      	adds	r7, #24
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}
 8019bb4:	08023278 	.word	0x08023278
 8019bb8:	0801a321 	.word	0x0801a321
 8019bbc:	200040c4 	.word	0x200040c4
 8019bc0:	20003f00 	.word	0x20003f00
 8019bc4:	20000150 	.word	0x20000150
 8019bc8:	200040c0 	.word	0x200040c0
 8019bcc:	200040ac 	.word	0x200040ac
 8019bd0:	200040a4 	.word	0x200040a4

08019bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019bd8:	4b04      	ldr	r3, [pc, #16]	@ (8019bec <vTaskSuspendAll+0x18>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	3301      	adds	r3, #1
 8019bde:	4a03      	ldr	r2, [pc, #12]	@ (8019bec <vTaskSuspendAll+0x18>)
 8019be0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019be2:	bf00      	nop
 8019be4:	46bd      	mov	sp, r7
 8019be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bea:	4770      	bx	lr
 8019bec:	200040c8 	.word	0x200040c8

08019bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b084      	sub	sp, #16
 8019bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019bfe:	4b42      	ldr	r3, [pc, #264]	@ (8019d08 <xTaskResumeAll+0x118>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d10b      	bne.n	8019c1e <xTaskResumeAll+0x2e>
	__asm volatile
 8019c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c0a:	f383 8811 	msr	BASEPRI, r3
 8019c0e:	f3bf 8f6f 	isb	sy
 8019c12:	f3bf 8f4f 	dsb	sy
 8019c16:	603b      	str	r3, [r7, #0]
}
 8019c18:	bf00      	nop
 8019c1a:	bf00      	nop
 8019c1c:	e7fd      	b.n	8019c1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019c1e:	f001 faf3 	bl	801b208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019c22:	4b39      	ldr	r3, [pc, #228]	@ (8019d08 <xTaskResumeAll+0x118>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	3b01      	subs	r3, #1
 8019c28:	4a37      	ldr	r2, [pc, #220]	@ (8019d08 <xTaskResumeAll+0x118>)
 8019c2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019c2c:	4b36      	ldr	r3, [pc, #216]	@ (8019d08 <xTaskResumeAll+0x118>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d161      	bne.n	8019cf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019c34:	4b35      	ldr	r3, [pc, #212]	@ (8019d0c <xTaskResumeAll+0x11c>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d05d      	beq.n	8019cf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019c3c:	e02e      	b.n	8019c9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c3e:	4b34      	ldr	r3, [pc, #208]	@ (8019d10 <xTaskResumeAll+0x120>)
 8019c40:	68db      	ldr	r3, [r3, #12]
 8019c42:	68db      	ldr	r3, [r3, #12]
 8019c44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	3318      	adds	r3, #24
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7fe fec0 	bl	80189d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	3304      	adds	r3, #4
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7fe febb 	bl	80189d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c5e:	2201      	movs	r2, #1
 8019c60:	409a      	lsls	r2, r3
 8019c62:	4b2c      	ldr	r3, [pc, #176]	@ (8019d14 <xTaskResumeAll+0x124>)
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	4313      	orrs	r3, r2
 8019c68:	4a2a      	ldr	r2, [pc, #168]	@ (8019d14 <xTaskResumeAll+0x124>)
 8019c6a:	6013      	str	r3, [r2, #0]
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019c70:	4613      	mov	r3, r2
 8019c72:	009b      	lsls	r3, r3, #2
 8019c74:	4413      	add	r3, r2
 8019c76:	009b      	lsls	r3, r3, #2
 8019c78:	4a27      	ldr	r2, [pc, #156]	@ (8019d18 <xTaskResumeAll+0x128>)
 8019c7a:	441a      	add	r2, r3
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	3304      	adds	r3, #4
 8019c80:	4619      	mov	r1, r3
 8019c82:	4610      	mov	r0, r2
 8019c84:	f7fe fe47 	bl	8018916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019c8c:	4b23      	ldr	r3, [pc, #140]	@ (8019d1c <xTaskResumeAll+0x12c>)
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d302      	bcc.n	8019c9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019c96:	4b22      	ldr	r3, [pc, #136]	@ (8019d20 <xTaskResumeAll+0x130>)
 8019c98:	2201      	movs	r2, #1
 8019c9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8019d10 <xTaskResumeAll+0x120>)
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d1cc      	bne.n	8019c3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d001      	beq.n	8019cae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019caa:	f000 fbf5 	bl	801a498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019cae:	4b1d      	ldr	r3, [pc, #116]	@ (8019d24 <xTaskResumeAll+0x134>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d010      	beq.n	8019cdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019cba:	f000 f847 	bl	8019d4c <xTaskIncrementTick>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d002      	beq.n	8019cca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019cc4:	4b16      	ldr	r3, [pc, #88]	@ (8019d20 <xTaskResumeAll+0x130>)
 8019cc6:	2201      	movs	r2, #1
 8019cc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	3b01      	subs	r3, #1
 8019cce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d1f1      	bne.n	8019cba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8019cd6:	4b13      	ldr	r3, [pc, #76]	@ (8019d24 <xTaskResumeAll+0x134>)
 8019cd8:	2200      	movs	r2, #0
 8019cda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019cdc:	4b10      	ldr	r3, [pc, #64]	@ (8019d20 <xTaskResumeAll+0x130>)
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d009      	beq.n	8019cf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019ce4:	2301      	movs	r3, #1
 8019ce6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8019d28 <xTaskResumeAll+0x138>)
 8019cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019cee:	601a      	str	r2, [r3, #0]
 8019cf0:	f3bf 8f4f 	dsb	sy
 8019cf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019cf8:	f001 fab8 	bl	801b26c <vPortExitCritical>

	return xAlreadyYielded;
 8019cfc:	68bb      	ldr	r3, [r7, #8]
}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	3710      	adds	r7, #16
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bd80      	pop	{r7, pc}
 8019d06:	bf00      	nop
 8019d08:	200040c8 	.word	0x200040c8
 8019d0c:	200040a0 	.word	0x200040a0
 8019d10:	20004060 	.word	0x20004060
 8019d14:	200040a8 	.word	0x200040a8
 8019d18:	20003f04 	.word	0x20003f04
 8019d1c:	20003f00 	.word	0x20003f00
 8019d20:	200040b4 	.word	0x200040b4
 8019d24:	200040b0 	.word	0x200040b0
 8019d28:	e000ed04 	.word	0xe000ed04

08019d2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019d2c:	b480      	push	{r7}
 8019d2e:	b083      	sub	sp, #12
 8019d30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019d32:	4b05      	ldr	r3, [pc, #20]	@ (8019d48 <xTaskGetTickCount+0x1c>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019d38:	687b      	ldr	r3, [r7, #4]
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	370c      	adds	r7, #12
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d44:	4770      	bx	lr
 8019d46:	bf00      	nop
 8019d48:	200040a4 	.word	0x200040a4

08019d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b086      	sub	sp, #24
 8019d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019d52:	2300      	movs	r3, #0
 8019d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019d56:	4b4f      	ldr	r3, [pc, #316]	@ (8019e94 <xTaskIncrementTick+0x148>)
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	f040 808f 	bne.w	8019e7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019d60:	4b4d      	ldr	r3, [pc, #308]	@ (8019e98 <xTaskIncrementTick+0x14c>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	3301      	adds	r3, #1
 8019d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019d68:	4a4b      	ldr	r2, [pc, #300]	@ (8019e98 <xTaskIncrementTick+0x14c>)
 8019d6a:	693b      	ldr	r3, [r7, #16]
 8019d6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019d6e:	693b      	ldr	r3, [r7, #16]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d121      	bne.n	8019db8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8019d74:	4b49      	ldr	r3, [pc, #292]	@ (8019e9c <xTaskIncrementTick+0x150>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d00b      	beq.n	8019d96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8019d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d82:	f383 8811 	msr	BASEPRI, r3
 8019d86:	f3bf 8f6f 	isb	sy
 8019d8a:	f3bf 8f4f 	dsb	sy
 8019d8e:	603b      	str	r3, [r7, #0]
}
 8019d90:	bf00      	nop
 8019d92:	bf00      	nop
 8019d94:	e7fd      	b.n	8019d92 <xTaskIncrementTick+0x46>
 8019d96:	4b41      	ldr	r3, [pc, #260]	@ (8019e9c <xTaskIncrementTick+0x150>)
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	60fb      	str	r3, [r7, #12]
 8019d9c:	4b40      	ldr	r3, [pc, #256]	@ (8019ea0 <xTaskIncrementTick+0x154>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	4a3e      	ldr	r2, [pc, #248]	@ (8019e9c <xTaskIncrementTick+0x150>)
 8019da2:	6013      	str	r3, [r2, #0]
 8019da4:	4a3e      	ldr	r2, [pc, #248]	@ (8019ea0 <xTaskIncrementTick+0x154>)
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	6013      	str	r3, [r2, #0]
 8019daa:	4b3e      	ldr	r3, [pc, #248]	@ (8019ea4 <xTaskIncrementTick+0x158>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	3301      	adds	r3, #1
 8019db0:	4a3c      	ldr	r2, [pc, #240]	@ (8019ea4 <xTaskIncrementTick+0x158>)
 8019db2:	6013      	str	r3, [r2, #0]
 8019db4:	f000 fb70 	bl	801a498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019db8:	4b3b      	ldr	r3, [pc, #236]	@ (8019ea8 <xTaskIncrementTick+0x15c>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	693a      	ldr	r2, [r7, #16]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d348      	bcc.n	8019e54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019dc2:	4b36      	ldr	r3, [pc, #216]	@ (8019e9c <xTaskIncrementTick+0x150>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d104      	bne.n	8019dd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019dcc:	4b36      	ldr	r3, [pc, #216]	@ (8019ea8 <xTaskIncrementTick+0x15c>)
 8019dce:	f04f 32ff 	mov.w	r2, #4294967295
 8019dd2:	601a      	str	r2, [r3, #0]
					break;
 8019dd4:	e03e      	b.n	8019e54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019dd6:	4b31      	ldr	r3, [pc, #196]	@ (8019e9c <xTaskIncrementTick+0x150>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	68db      	ldr	r3, [r3, #12]
 8019ddc:	68db      	ldr	r3, [r3, #12]
 8019dde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	685b      	ldr	r3, [r3, #4]
 8019de4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019de6:	693a      	ldr	r2, [r7, #16]
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d203      	bcs.n	8019df6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019dee:	4a2e      	ldr	r2, [pc, #184]	@ (8019ea8 <xTaskIncrementTick+0x15c>)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019df4:	e02e      	b.n	8019e54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019df6:	68bb      	ldr	r3, [r7, #8]
 8019df8:	3304      	adds	r3, #4
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f7fe fde8 	bl	80189d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d004      	beq.n	8019e12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	3318      	adds	r3, #24
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7fe fddf 	bl	80189d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019e12:	68bb      	ldr	r3, [r7, #8]
 8019e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e16:	2201      	movs	r2, #1
 8019e18:	409a      	lsls	r2, r3
 8019e1a:	4b24      	ldr	r3, [pc, #144]	@ (8019eac <xTaskIncrementTick+0x160>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	4313      	orrs	r3, r2
 8019e20:	4a22      	ldr	r2, [pc, #136]	@ (8019eac <xTaskIncrementTick+0x160>)
 8019e22:	6013      	str	r3, [r2, #0]
 8019e24:	68bb      	ldr	r3, [r7, #8]
 8019e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e28:	4613      	mov	r3, r2
 8019e2a:	009b      	lsls	r3, r3, #2
 8019e2c:	4413      	add	r3, r2
 8019e2e:	009b      	lsls	r3, r3, #2
 8019e30:	4a1f      	ldr	r2, [pc, #124]	@ (8019eb0 <xTaskIncrementTick+0x164>)
 8019e32:	441a      	add	r2, r3
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	3304      	adds	r3, #4
 8019e38:	4619      	mov	r1, r3
 8019e3a:	4610      	mov	r0, r2
 8019e3c:	f7fe fd6b 	bl	8018916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019e40:	68bb      	ldr	r3, [r7, #8]
 8019e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e44:	4b1b      	ldr	r3, [pc, #108]	@ (8019eb4 <xTaskIncrementTick+0x168>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	d3b9      	bcc.n	8019dc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8019e4e:	2301      	movs	r3, #1
 8019e50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019e52:	e7b6      	b.n	8019dc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019e54:	4b17      	ldr	r3, [pc, #92]	@ (8019eb4 <xTaskIncrementTick+0x168>)
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e5a:	4915      	ldr	r1, [pc, #84]	@ (8019eb0 <xTaskIncrementTick+0x164>)
 8019e5c:	4613      	mov	r3, r2
 8019e5e:	009b      	lsls	r3, r3, #2
 8019e60:	4413      	add	r3, r2
 8019e62:	009b      	lsls	r3, r3, #2
 8019e64:	440b      	add	r3, r1
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	2b01      	cmp	r3, #1
 8019e6a:	d901      	bls.n	8019e70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019e70:	4b11      	ldr	r3, [pc, #68]	@ (8019eb8 <xTaskIncrementTick+0x16c>)
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d007      	beq.n	8019e88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8019e78:	2301      	movs	r3, #1
 8019e7a:	617b      	str	r3, [r7, #20]
 8019e7c:	e004      	b.n	8019e88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8019ebc <xTaskIncrementTick+0x170>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	3301      	adds	r3, #1
 8019e84:	4a0d      	ldr	r2, [pc, #52]	@ (8019ebc <xTaskIncrementTick+0x170>)
 8019e86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8019e88:	697b      	ldr	r3, [r7, #20]
}
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	3718      	adds	r7, #24
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd80      	pop	{r7, pc}
 8019e92:	bf00      	nop
 8019e94:	200040c8 	.word	0x200040c8
 8019e98:	200040a4 	.word	0x200040a4
 8019e9c:	20004058 	.word	0x20004058
 8019ea0:	2000405c 	.word	0x2000405c
 8019ea4:	200040b8 	.word	0x200040b8
 8019ea8:	200040c0 	.word	0x200040c0
 8019eac:	200040a8 	.word	0x200040a8
 8019eb0:	20003f04 	.word	0x20003f04
 8019eb4:	20003f00 	.word	0x20003f00
 8019eb8:	200040b4 	.word	0x200040b4
 8019ebc:	200040b0 	.word	0x200040b0

08019ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b086      	sub	sp, #24
 8019ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8019fc0 <vTaskSwitchContext+0x100>)
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d003      	beq.n	8019ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019ece:	4b3d      	ldr	r3, [pc, #244]	@ (8019fc4 <vTaskSwitchContext+0x104>)
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019ed4:	e06f      	b.n	8019fb6 <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 8019ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8019fc4 <vTaskSwitchContext+0x104>)
 8019ed8:	2200      	movs	r2, #0
 8019eda:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8019edc:	f7e9 f939 	bl	8003152 <getRunTimeCounterValue>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	4a39      	ldr	r2, [pc, #228]	@ (8019fc8 <vTaskSwitchContext+0x108>)
 8019ee4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8019ee6:	4b38      	ldr	r3, [pc, #224]	@ (8019fc8 <vTaskSwitchContext+0x108>)
 8019ee8:	681a      	ldr	r2, [r3, #0]
 8019eea:	4b38      	ldr	r3, [pc, #224]	@ (8019fcc <vTaskSwitchContext+0x10c>)
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	429a      	cmp	r2, r3
 8019ef0:	d909      	bls.n	8019f06 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8019ef2:	4b37      	ldr	r3, [pc, #220]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8019ef8:	4a33      	ldr	r2, [pc, #204]	@ (8019fc8 <vTaskSwitchContext+0x108>)
 8019efa:	6810      	ldr	r0, [r2, #0]
 8019efc:	4a33      	ldr	r2, [pc, #204]	@ (8019fcc <vTaskSwitchContext+0x10c>)
 8019efe:	6812      	ldr	r2, [r2, #0]
 8019f00:	1a82      	subs	r2, r0, r2
 8019f02:	440a      	add	r2, r1
 8019f04:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8019f06:	4b30      	ldr	r3, [pc, #192]	@ (8019fc8 <vTaskSwitchContext+0x108>)
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	4a30      	ldr	r2, [pc, #192]	@ (8019fcc <vTaskSwitchContext+0x10c>)
 8019f0c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8019f0e:	4b30      	ldr	r3, [pc, #192]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	681a      	ldr	r2, [r3, #0]
 8019f14:	4b2e      	ldr	r3, [pc, #184]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d808      	bhi.n	8019f30 <vTaskSwitchContext+0x70>
 8019f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019f20:	681a      	ldr	r2, [r3, #0]
 8019f22:	4b2b      	ldr	r3, [pc, #172]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	3334      	adds	r3, #52	@ 0x34
 8019f28:	4619      	mov	r1, r3
 8019f2a:	4610      	mov	r0, r2
 8019f2c:	f7e9 f919 	bl	8003162 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f30:	4b28      	ldr	r3, [pc, #160]	@ (8019fd4 <vTaskSwitchContext+0x114>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	fab3 f383 	clz	r3, r3
 8019f3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8019f3e:	7afb      	ldrb	r3, [r7, #11]
 8019f40:	f1c3 031f 	rsb	r3, r3, #31
 8019f44:	617b      	str	r3, [r7, #20]
 8019f46:	4924      	ldr	r1, [pc, #144]	@ (8019fd8 <vTaskSwitchContext+0x118>)
 8019f48:	697a      	ldr	r2, [r7, #20]
 8019f4a:	4613      	mov	r3, r2
 8019f4c:	009b      	lsls	r3, r3, #2
 8019f4e:	4413      	add	r3, r2
 8019f50:	009b      	lsls	r3, r3, #2
 8019f52:	440b      	add	r3, r1
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d10b      	bne.n	8019f72 <vTaskSwitchContext+0xb2>
	__asm volatile
 8019f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f5e:	f383 8811 	msr	BASEPRI, r3
 8019f62:	f3bf 8f6f 	isb	sy
 8019f66:	f3bf 8f4f 	dsb	sy
 8019f6a:	607b      	str	r3, [r7, #4]
}
 8019f6c:	bf00      	nop
 8019f6e:	bf00      	nop
 8019f70:	e7fd      	b.n	8019f6e <vTaskSwitchContext+0xae>
 8019f72:	697a      	ldr	r2, [r7, #20]
 8019f74:	4613      	mov	r3, r2
 8019f76:	009b      	lsls	r3, r3, #2
 8019f78:	4413      	add	r3, r2
 8019f7a:	009b      	lsls	r3, r3, #2
 8019f7c:	4a16      	ldr	r2, [pc, #88]	@ (8019fd8 <vTaskSwitchContext+0x118>)
 8019f7e:	4413      	add	r3, r2
 8019f80:	613b      	str	r3, [r7, #16]
 8019f82:	693b      	ldr	r3, [r7, #16]
 8019f84:	685b      	ldr	r3, [r3, #4]
 8019f86:	685a      	ldr	r2, [r3, #4]
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	605a      	str	r2, [r3, #4]
 8019f8c:	693b      	ldr	r3, [r7, #16]
 8019f8e:	685a      	ldr	r2, [r3, #4]
 8019f90:	693b      	ldr	r3, [r7, #16]
 8019f92:	3308      	adds	r3, #8
 8019f94:	429a      	cmp	r2, r3
 8019f96:	d104      	bne.n	8019fa2 <vTaskSwitchContext+0xe2>
 8019f98:	693b      	ldr	r3, [r7, #16]
 8019f9a:	685b      	ldr	r3, [r3, #4]
 8019f9c:	685a      	ldr	r2, [r3, #4]
 8019f9e:	693b      	ldr	r3, [r7, #16]
 8019fa0:	605a      	str	r2, [r3, #4]
 8019fa2:	693b      	ldr	r3, [r7, #16]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	68db      	ldr	r3, [r3, #12]
 8019fa8:	4a09      	ldr	r2, [pc, #36]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019faa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019fac:	4b08      	ldr	r3, [pc, #32]	@ (8019fd0 <vTaskSwitchContext+0x110>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	3358      	adds	r3, #88	@ 0x58
 8019fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8019fdc <vTaskSwitchContext+0x11c>)
 8019fb4:	6013      	str	r3, [r2, #0]
}
 8019fb6:	bf00      	nop
 8019fb8:	3718      	adds	r7, #24
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}
 8019fbe:	bf00      	nop
 8019fc0:	200040c8 	.word	0x200040c8
 8019fc4:	200040b4 	.word	0x200040b4
 8019fc8:	200040d0 	.word	0x200040d0
 8019fcc:	200040cc 	.word	0x200040cc
 8019fd0:	20003f00 	.word	0x20003f00
 8019fd4:	200040a8 	.word	0x200040a8
 8019fd8:	20003f04 	.word	0x20003f04
 8019fdc:	20000150 	.word	0x20000150

08019fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b084      	sub	sp, #16
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
 8019fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d10b      	bne.n	801a008 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8019ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ff4:	f383 8811 	msr	BASEPRI, r3
 8019ff8:	f3bf 8f6f 	isb	sy
 8019ffc:	f3bf 8f4f 	dsb	sy
 801a000:	60fb      	str	r3, [r7, #12]
}
 801a002:	bf00      	nop
 801a004:	bf00      	nop
 801a006:	e7fd      	b.n	801a004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a008:	4b07      	ldr	r3, [pc, #28]	@ (801a028 <vTaskPlaceOnEventList+0x48>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	3318      	adds	r3, #24
 801a00e:	4619      	mov	r1, r3
 801a010:	6878      	ldr	r0, [r7, #4]
 801a012:	f7fe fca4 	bl	801895e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a016:	2101      	movs	r1, #1
 801a018:	6838      	ldr	r0, [r7, #0]
 801a01a:	f000 fbe5 	bl	801a7e8 <prvAddCurrentTaskToDelayedList>
}
 801a01e:	bf00      	nop
 801a020:	3710      	adds	r7, #16
 801a022:	46bd      	mov	sp, r7
 801a024:	bd80      	pop	{r7, pc}
 801a026:	bf00      	nop
 801a028:	20003f00 	.word	0x20003f00

0801a02c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b086      	sub	sp, #24
 801a030:	af00      	add	r7, sp, #0
 801a032:	60f8      	str	r0, [r7, #12]
 801a034:	60b9      	str	r1, [r7, #8]
 801a036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d10b      	bne.n	801a056 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a042:	f383 8811 	msr	BASEPRI, r3
 801a046:	f3bf 8f6f 	isb	sy
 801a04a:	f3bf 8f4f 	dsb	sy
 801a04e:	617b      	str	r3, [r7, #20]
}
 801a050:	bf00      	nop
 801a052:	bf00      	nop
 801a054:	e7fd      	b.n	801a052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a056:	4b0a      	ldr	r3, [pc, #40]	@ (801a080 <vTaskPlaceOnEventListRestricted+0x54>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	3318      	adds	r3, #24
 801a05c:	4619      	mov	r1, r3
 801a05e:	68f8      	ldr	r0, [r7, #12]
 801a060:	f7fe fc59 	bl	8018916 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d002      	beq.n	801a070 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801a06a:	f04f 33ff 	mov.w	r3, #4294967295
 801a06e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a070:	6879      	ldr	r1, [r7, #4]
 801a072:	68b8      	ldr	r0, [r7, #8]
 801a074:	f000 fbb8 	bl	801a7e8 <prvAddCurrentTaskToDelayedList>
	}
 801a078:	bf00      	nop
 801a07a:	3718      	adds	r7, #24
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd80      	pop	{r7, pc}
 801a080:	20003f00 	.word	0x20003f00

0801a084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b086      	sub	sp, #24
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	68db      	ldr	r3, [r3, #12]
 801a090:	68db      	ldr	r3, [r3, #12]
 801a092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a094:	693b      	ldr	r3, [r7, #16]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d10b      	bne.n	801a0b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a09e:	f383 8811 	msr	BASEPRI, r3
 801a0a2:	f3bf 8f6f 	isb	sy
 801a0a6:	f3bf 8f4f 	dsb	sy
 801a0aa:	60fb      	str	r3, [r7, #12]
}
 801a0ac:	bf00      	nop
 801a0ae:	bf00      	nop
 801a0b0:	e7fd      	b.n	801a0ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	3318      	adds	r3, #24
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f7fe fc8a 	bl	80189d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a0bc:	4b1d      	ldr	r3, [pc, #116]	@ (801a134 <xTaskRemoveFromEventList+0xb0>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d11c      	bne.n	801a0fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a0c4:	693b      	ldr	r3, [r7, #16]
 801a0c6:	3304      	adds	r3, #4
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7fe fc81 	bl	80189d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a0ce:	693b      	ldr	r3, [r7, #16]
 801a0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0d2:	2201      	movs	r2, #1
 801a0d4:	409a      	lsls	r2, r3
 801a0d6:	4b18      	ldr	r3, [pc, #96]	@ (801a138 <xTaskRemoveFromEventList+0xb4>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	4313      	orrs	r3, r2
 801a0dc:	4a16      	ldr	r2, [pc, #88]	@ (801a138 <xTaskRemoveFromEventList+0xb4>)
 801a0de:	6013      	str	r3, [r2, #0]
 801a0e0:	693b      	ldr	r3, [r7, #16]
 801a0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0e4:	4613      	mov	r3, r2
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	4413      	add	r3, r2
 801a0ea:	009b      	lsls	r3, r3, #2
 801a0ec:	4a13      	ldr	r2, [pc, #76]	@ (801a13c <xTaskRemoveFromEventList+0xb8>)
 801a0ee:	441a      	add	r2, r3
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	3304      	adds	r3, #4
 801a0f4:	4619      	mov	r1, r3
 801a0f6:	4610      	mov	r0, r2
 801a0f8:	f7fe fc0d 	bl	8018916 <vListInsertEnd>
 801a0fc:	e005      	b.n	801a10a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	3318      	adds	r3, #24
 801a102:	4619      	mov	r1, r3
 801a104:	480e      	ldr	r0, [pc, #56]	@ (801a140 <xTaskRemoveFromEventList+0xbc>)
 801a106:	f7fe fc06 	bl	8018916 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a10a:	693b      	ldr	r3, [r7, #16]
 801a10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a10e:	4b0d      	ldr	r3, [pc, #52]	@ (801a144 <xTaskRemoveFromEventList+0xc0>)
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a114:	429a      	cmp	r2, r3
 801a116:	d905      	bls.n	801a124 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a118:	2301      	movs	r3, #1
 801a11a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a11c:	4b0a      	ldr	r3, [pc, #40]	@ (801a148 <xTaskRemoveFromEventList+0xc4>)
 801a11e:	2201      	movs	r2, #1
 801a120:	601a      	str	r2, [r3, #0]
 801a122:	e001      	b.n	801a128 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a124:	2300      	movs	r3, #0
 801a126:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a128:	697b      	ldr	r3, [r7, #20]
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3718      	adds	r7, #24
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}
 801a132:	bf00      	nop
 801a134:	200040c8 	.word	0x200040c8
 801a138:	200040a8 	.word	0x200040a8
 801a13c:	20003f04 	.word	0x20003f04
 801a140:	20004060 	.word	0x20004060
 801a144:	20003f00 	.word	0x20003f00
 801a148:	200040b4 	.word	0x200040b4

0801a14c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b086      	sub	sp, #24
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
 801a154:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801a156:	4b2a      	ldr	r3, [pc, #168]	@ (801a200 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d10b      	bne.n	801a176 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 801a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a162:	f383 8811 	msr	BASEPRI, r3
 801a166:	f3bf 8f6f 	isb	sy
 801a16a:	f3bf 8f4f 	dsb	sy
 801a16e:	613b      	str	r3, [r7, #16]
}
 801a170:	bf00      	nop
 801a172:	bf00      	nop
 801a174:	e7fd      	b.n	801a172 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	68db      	ldr	r3, [r3, #12]
 801a184:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801a186:	697b      	ldr	r3, [r7, #20]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d10b      	bne.n	801a1a4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 801a18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a190:	f383 8811 	msr	BASEPRI, r3
 801a194:	f3bf 8f6f 	isb	sy
 801a198:	f3bf 8f4f 	dsb	sy
 801a19c:	60fb      	str	r3, [r7, #12]
}
 801a19e:	bf00      	nop
 801a1a0:	bf00      	nop
 801a1a2:	e7fd      	b.n	801a1a0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 801a1a4:	6878      	ldr	r0, [r7, #4]
 801a1a6:	f7fe fc13 	bl	80189d0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a1aa:	697b      	ldr	r3, [r7, #20]
 801a1ac:	3304      	adds	r3, #4
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	f7fe fc0e 	bl	80189d0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1b8:	2201      	movs	r2, #1
 801a1ba:	409a      	lsls	r2, r3
 801a1bc:	4b11      	ldr	r3, [pc, #68]	@ (801a204 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	4313      	orrs	r3, r2
 801a1c2:	4a10      	ldr	r2, [pc, #64]	@ (801a204 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801a1c4:	6013      	str	r3, [r2, #0]
 801a1c6:	697b      	ldr	r3, [r7, #20]
 801a1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a1ca:	4613      	mov	r3, r2
 801a1cc:	009b      	lsls	r3, r3, #2
 801a1ce:	4413      	add	r3, r2
 801a1d0:	009b      	lsls	r3, r3, #2
 801a1d2:	4a0d      	ldr	r2, [pc, #52]	@ (801a208 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801a1d4:	441a      	add	r2, r3
 801a1d6:	697b      	ldr	r3, [r7, #20]
 801a1d8:	3304      	adds	r3, #4
 801a1da:	4619      	mov	r1, r3
 801a1dc:	4610      	mov	r0, r2
 801a1de:	f7fe fb9a 	bl	8018916 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a1e2:	697b      	ldr	r3, [r7, #20]
 801a1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a1e6:	4b09      	ldr	r3, [pc, #36]	@ (801a20c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	d902      	bls.n	801a1f6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801a1f0:	4b07      	ldr	r3, [pc, #28]	@ (801a210 <vTaskRemoveFromUnorderedEventList+0xc4>)
 801a1f2:	2201      	movs	r2, #1
 801a1f4:	601a      	str	r2, [r3, #0]
	}
}
 801a1f6:	bf00      	nop
 801a1f8:	3718      	adds	r7, #24
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}
 801a1fe:	bf00      	nop
 801a200:	200040c8 	.word	0x200040c8
 801a204:	200040a8 	.word	0x200040a8
 801a208:	20003f04 	.word	0x20003f04
 801a20c:	20003f00 	.word	0x20003f00
 801a210:	200040b4 	.word	0x200040b4

0801a214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a214:	b480      	push	{r7}
 801a216:	b083      	sub	sp, #12
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a21c:	4b06      	ldr	r3, [pc, #24]	@ (801a238 <vTaskInternalSetTimeOutState+0x24>)
 801a21e:	681a      	ldr	r2, [r3, #0]
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a224:	4b05      	ldr	r3, [pc, #20]	@ (801a23c <vTaskInternalSetTimeOutState+0x28>)
 801a226:	681a      	ldr	r2, [r3, #0]
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	605a      	str	r2, [r3, #4]
}
 801a22c:	bf00      	nop
 801a22e:	370c      	adds	r7, #12
 801a230:	46bd      	mov	sp, r7
 801a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a236:	4770      	bx	lr
 801a238:	200040b8 	.word	0x200040b8
 801a23c:	200040a4 	.word	0x200040a4

0801a240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b088      	sub	sp, #32
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
 801a248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d10b      	bne.n	801a268 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801a250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a254:	f383 8811 	msr	BASEPRI, r3
 801a258:	f3bf 8f6f 	isb	sy
 801a25c:	f3bf 8f4f 	dsb	sy
 801a260:	613b      	str	r3, [r7, #16]
}
 801a262:	bf00      	nop
 801a264:	bf00      	nop
 801a266:	e7fd      	b.n	801a264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d10b      	bne.n	801a286 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801a26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a272:	f383 8811 	msr	BASEPRI, r3
 801a276:	f3bf 8f6f 	isb	sy
 801a27a:	f3bf 8f4f 	dsb	sy
 801a27e:	60fb      	str	r3, [r7, #12]
}
 801a280:	bf00      	nop
 801a282:	bf00      	nop
 801a284:	e7fd      	b.n	801a282 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801a286:	f000 ffbf 	bl	801b208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a28a:	4b1d      	ldr	r3, [pc, #116]	@ (801a300 <xTaskCheckForTimeOut+0xc0>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	69ba      	ldr	r2, [r7, #24]
 801a296:	1ad3      	subs	r3, r2, r3
 801a298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a29a:	683b      	ldr	r3, [r7, #0]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2a2:	d102      	bne.n	801a2aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	61fb      	str	r3, [r7, #28]
 801a2a8:	e023      	b.n	801a2f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681a      	ldr	r2, [r3, #0]
 801a2ae:	4b15      	ldr	r3, [pc, #84]	@ (801a304 <xTaskCheckForTimeOut+0xc4>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d007      	beq.n	801a2c6 <xTaskCheckForTimeOut+0x86>
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	685b      	ldr	r3, [r3, #4]
 801a2ba:	69ba      	ldr	r2, [r7, #24]
 801a2bc:	429a      	cmp	r2, r3
 801a2be:	d302      	bcc.n	801a2c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	61fb      	str	r3, [r7, #28]
 801a2c4:	e015      	b.n	801a2f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a2c6:	683b      	ldr	r3, [r7, #0]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	697a      	ldr	r2, [r7, #20]
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	d20b      	bcs.n	801a2e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	681a      	ldr	r2, [r3, #0]
 801a2d4:	697b      	ldr	r3, [r7, #20]
 801a2d6:	1ad2      	subs	r2, r2, r3
 801a2d8:	683b      	ldr	r3, [r7, #0]
 801a2da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a2dc:	6878      	ldr	r0, [r7, #4]
 801a2de:	f7ff ff99 	bl	801a214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	61fb      	str	r3, [r7, #28]
 801a2e6:	e004      	b.n	801a2f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801a2e8:	683b      	ldr	r3, [r7, #0]
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a2f2:	f000 ffbb 	bl	801b26c <vPortExitCritical>

	return xReturn;
 801a2f6:	69fb      	ldr	r3, [r7, #28]
}
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	3720      	adds	r7, #32
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}
 801a300:	200040a4 	.word	0x200040a4
 801a304:	200040b8 	.word	0x200040b8

0801a308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a308:	b480      	push	{r7}
 801a30a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a30c:	4b03      	ldr	r3, [pc, #12]	@ (801a31c <vTaskMissedYield+0x14>)
 801a30e:	2201      	movs	r2, #1
 801a310:	601a      	str	r2, [r3, #0]
}
 801a312:	bf00      	nop
 801a314:	46bd      	mov	sp, r7
 801a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31a:	4770      	bx	lr
 801a31c:	200040b4 	.word	0x200040b4

0801a320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a320:	b580      	push	{r7, lr}
 801a322:	b082      	sub	sp, #8
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a328:	f000 f852 	bl	801a3d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a32c:	4b06      	ldr	r3, [pc, #24]	@ (801a348 <prvIdleTask+0x28>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	2b01      	cmp	r3, #1
 801a332:	d9f9      	bls.n	801a328 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a334:	4b05      	ldr	r3, [pc, #20]	@ (801a34c <prvIdleTask+0x2c>)
 801a336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a33a:	601a      	str	r2, [r3, #0]
 801a33c:	f3bf 8f4f 	dsb	sy
 801a340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a344:	e7f0      	b.n	801a328 <prvIdleTask+0x8>
 801a346:	bf00      	nop
 801a348:	20003f04 	.word	0x20003f04
 801a34c:	e000ed04 	.word	0xe000ed04

0801a350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b082      	sub	sp, #8
 801a354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a356:	2300      	movs	r3, #0
 801a358:	607b      	str	r3, [r7, #4]
 801a35a:	e00c      	b.n	801a376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a35c:	687a      	ldr	r2, [r7, #4]
 801a35e:	4613      	mov	r3, r2
 801a360:	009b      	lsls	r3, r3, #2
 801a362:	4413      	add	r3, r2
 801a364:	009b      	lsls	r3, r3, #2
 801a366:	4a12      	ldr	r2, [pc, #72]	@ (801a3b0 <prvInitialiseTaskLists+0x60>)
 801a368:	4413      	add	r3, r2
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7fe faa6 	bl	80188bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	3301      	adds	r3, #1
 801a374:	607b      	str	r3, [r7, #4]
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	2b0e      	cmp	r3, #14
 801a37a:	d9ef      	bls.n	801a35c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a37c:	480d      	ldr	r0, [pc, #52]	@ (801a3b4 <prvInitialiseTaskLists+0x64>)
 801a37e:	f7fe fa9d 	bl	80188bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a382:	480d      	ldr	r0, [pc, #52]	@ (801a3b8 <prvInitialiseTaskLists+0x68>)
 801a384:	f7fe fa9a 	bl	80188bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a388:	480c      	ldr	r0, [pc, #48]	@ (801a3bc <prvInitialiseTaskLists+0x6c>)
 801a38a:	f7fe fa97 	bl	80188bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a38e:	480c      	ldr	r0, [pc, #48]	@ (801a3c0 <prvInitialiseTaskLists+0x70>)
 801a390:	f7fe fa94 	bl	80188bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a394:	480b      	ldr	r0, [pc, #44]	@ (801a3c4 <prvInitialiseTaskLists+0x74>)
 801a396:	f7fe fa91 	bl	80188bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a39a:	4b0b      	ldr	r3, [pc, #44]	@ (801a3c8 <prvInitialiseTaskLists+0x78>)
 801a39c:	4a05      	ldr	r2, [pc, #20]	@ (801a3b4 <prvInitialiseTaskLists+0x64>)
 801a39e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a3a0:	4b0a      	ldr	r3, [pc, #40]	@ (801a3cc <prvInitialiseTaskLists+0x7c>)
 801a3a2:	4a05      	ldr	r2, [pc, #20]	@ (801a3b8 <prvInitialiseTaskLists+0x68>)
 801a3a4:	601a      	str	r2, [r3, #0]
}
 801a3a6:	bf00      	nop
 801a3a8:	3708      	adds	r7, #8
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}
 801a3ae:	bf00      	nop
 801a3b0:	20003f04 	.word	0x20003f04
 801a3b4:	20004030 	.word	0x20004030
 801a3b8:	20004044 	.word	0x20004044
 801a3bc:	20004060 	.word	0x20004060
 801a3c0:	20004074 	.word	0x20004074
 801a3c4:	2000408c 	.word	0x2000408c
 801a3c8:	20004058 	.word	0x20004058
 801a3cc:	2000405c 	.word	0x2000405c

0801a3d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b082      	sub	sp, #8
 801a3d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a3d6:	e019      	b.n	801a40c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a3d8:	f000 ff16 	bl	801b208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3dc:	4b10      	ldr	r3, [pc, #64]	@ (801a420 <prvCheckTasksWaitingTermination+0x50>)
 801a3de:	68db      	ldr	r3, [r3, #12]
 801a3e0:	68db      	ldr	r3, [r3, #12]
 801a3e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	3304      	adds	r3, #4
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	f7fe faf1 	bl	80189d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a3ee:	4b0d      	ldr	r3, [pc, #52]	@ (801a424 <prvCheckTasksWaitingTermination+0x54>)
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	3b01      	subs	r3, #1
 801a3f4:	4a0b      	ldr	r2, [pc, #44]	@ (801a424 <prvCheckTasksWaitingTermination+0x54>)
 801a3f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a3f8:	4b0b      	ldr	r3, [pc, #44]	@ (801a428 <prvCheckTasksWaitingTermination+0x58>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	3b01      	subs	r3, #1
 801a3fe:	4a0a      	ldr	r2, [pc, #40]	@ (801a428 <prvCheckTasksWaitingTermination+0x58>)
 801a400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a402:	f000 ff33 	bl	801b26c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f000 f810 	bl	801a42c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a40c:	4b06      	ldr	r3, [pc, #24]	@ (801a428 <prvCheckTasksWaitingTermination+0x58>)
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d1e1      	bne.n	801a3d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a414:	bf00      	nop
 801a416:	bf00      	nop
 801a418:	3708      	adds	r7, #8
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd80      	pop	{r7, pc}
 801a41e:	bf00      	nop
 801a420:	20004074 	.word	0x20004074
 801a424:	200040a0 	.word	0x200040a0
 801a428:	20004088 	.word	0x20004088

0801a42c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b084      	sub	sp, #16
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	3358      	adds	r3, #88	@ 0x58
 801a438:	4618      	mov	r0, r3
 801a43a:	f002 f883 	bl	801c544 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801a444:	2b00      	cmp	r3, #0
 801a446:	d108      	bne.n	801a45a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a44c:	4618      	mov	r0, r3
 801a44e:	f001 f8cb 	bl	801b5e8 <vPortFree>
				vPortFree( pxTCB );
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	f001 f8c8 	bl	801b5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a458:	e019      	b.n	801a48e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801a460:	2b01      	cmp	r3, #1
 801a462:	d103      	bne.n	801a46c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801a464:	6878      	ldr	r0, [r7, #4]
 801a466:	f001 f8bf 	bl	801b5e8 <vPortFree>
	}
 801a46a:	e010      	b.n	801a48e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801a472:	2b02      	cmp	r3, #2
 801a474:	d00b      	beq.n	801a48e <prvDeleteTCB+0x62>
	__asm volatile
 801a476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a47a:	f383 8811 	msr	BASEPRI, r3
 801a47e:	f3bf 8f6f 	isb	sy
 801a482:	f3bf 8f4f 	dsb	sy
 801a486:	60fb      	str	r3, [r7, #12]
}
 801a488:	bf00      	nop
 801a48a:	bf00      	nop
 801a48c:	e7fd      	b.n	801a48a <prvDeleteTCB+0x5e>
	}
 801a48e:	bf00      	nop
 801a490:	3710      	adds	r7, #16
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
	...

0801a498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a498:	b480      	push	{r7}
 801a49a:	b083      	sub	sp, #12
 801a49c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a49e:	4b0c      	ldr	r3, [pc, #48]	@ (801a4d0 <prvResetNextTaskUnblockTime+0x38>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d104      	bne.n	801a4b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a4a8:	4b0a      	ldr	r3, [pc, #40]	@ (801a4d4 <prvResetNextTaskUnblockTime+0x3c>)
 801a4aa:	f04f 32ff 	mov.w	r2, #4294967295
 801a4ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a4b0:	e008      	b.n	801a4c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4b2:	4b07      	ldr	r3, [pc, #28]	@ (801a4d0 <prvResetNextTaskUnblockTime+0x38>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	68db      	ldr	r3, [r3, #12]
 801a4b8:	68db      	ldr	r3, [r3, #12]
 801a4ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	4a04      	ldr	r2, [pc, #16]	@ (801a4d4 <prvResetNextTaskUnblockTime+0x3c>)
 801a4c2:	6013      	str	r3, [r2, #0]
}
 801a4c4:	bf00      	nop
 801a4c6:	370c      	adds	r7, #12
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ce:	4770      	bx	lr
 801a4d0:	20004058 	.word	0x20004058
 801a4d4:	200040c0 	.word	0x200040c0

0801a4d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a4d8:	b480      	push	{r7}
 801a4da:	b083      	sub	sp, #12
 801a4dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a4de:	4b0b      	ldr	r3, [pc, #44]	@ (801a50c <xTaskGetSchedulerState+0x34>)
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d102      	bne.n	801a4ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	607b      	str	r3, [r7, #4]
 801a4ea:	e008      	b.n	801a4fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a4ec:	4b08      	ldr	r3, [pc, #32]	@ (801a510 <xTaskGetSchedulerState+0x38>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d102      	bne.n	801a4fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a4f4:	2302      	movs	r3, #2
 801a4f6:	607b      	str	r3, [r7, #4]
 801a4f8:	e001      	b.n	801a4fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a4fe:	687b      	ldr	r3, [r7, #4]
	}
 801a500:	4618      	mov	r0, r3
 801a502:	370c      	adds	r7, #12
 801a504:	46bd      	mov	sp, r7
 801a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50a:	4770      	bx	lr
 801a50c:	200040ac 	.word	0x200040ac
 801a510:	200040c8 	.word	0x200040c8

0801a514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a514:	b580      	push	{r7, lr}
 801a516:	b086      	sub	sp, #24
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a520:	2300      	movs	r3, #0
 801a522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d070      	beq.n	801a60c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a52a:	4b3b      	ldr	r3, [pc, #236]	@ (801a618 <xTaskPriorityDisinherit+0x104>)
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	693a      	ldr	r2, [r7, #16]
 801a530:	429a      	cmp	r2, r3
 801a532:	d00b      	beq.n	801a54c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a538:	f383 8811 	msr	BASEPRI, r3
 801a53c:	f3bf 8f6f 	isb	sy
 801a540:	f3bf 8f4f 	dsb	sy
 801a544:	60fb      	str	r3, [r7, #12]
}
 801a546:	bf00      	nop
 801a548:	bf00      	nop
 801a54a:	e7fd      	b.n	801a548 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a54c:	693b      	ldr	r3, [r7, #16]
 801a54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a550:	2b00      	cmp	r3, #0
 801a552:	d10b      	bne.n	801a56c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801a554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a558:	f383 8811 	msr	BASEPRI, r3
 801a55c:	f3bf 8f6f 	isb	sy
 801a560:	f3bf 8f4f 	dsb	sy
 801a564:	60bb      	str	r3, [r7, #8]
}
 801a566:	bf00      	nop
 801a568:	bf00      	nop
 801a56a:	e7fd      	b.n	801a568 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801a56c:	693b      	ldr	r3, [r7, #16]
 801a56e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a570:	1e5a      	subs	r2, r3, #1
 801a572:	693b      	ldr	r3, [r7, #16]
 801a574:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a576:	693b      	ldr	r3, [r7, #16]
 801a578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a57a:	693b      	ldr	r3, [r7, #16]
 801a57c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a57e:	429a      	cmp	r2, r3
 801a580:	d044      	beq.n	801a60c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a586:	2b00      	cmp	r3, #0
 801a588:	d140      	bne.n	801a60c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a58a:	693b      	ldr	r3, [r7, #16]
 801a58c:	3304      	adds	r3, #4
 801a58e:	4618      	mov	r0, r3
 801a590:	f7fe fa1e 	bl	80189d0 <uxListRemove>
 801a594:	4603      	mov	r3, r0
 801a596:	2b00      	cmp	r3, #0
 801a598:	d115      	bne.n	801a5c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a59a:	693b      	ldr	r3, [r7, #16]
 801a59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a59e:	491f      	ldr	r1, [pc, #124]	@ (801a61c <xTaskPriorityDisinherit+0x108>)
 801a5a0:	4613      	mov	r3, r2
 801a5a2:	009b      	lsls	r3, r3, #2
 801a5a4:	4413      	add	r3, r2
 801a5a6:	009b      	lsls	r3, r3, #2
 801a5a8:	440b      	add	r3, r1
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d10a      	bne.n	801a5c6 <xTaskPriorityDisinherit+0xb2>
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5b4:	2201      	movs	r2, #1
 801a5b6:	fa02 f303 	lsl.w	r3, r2, r3
 801a5ba:	43da      	mvns	r2, r3
 801a5bc:	4b18      	ldr	r3, [pc, #96]	@ (801a620 <xTaskPriorityDisinherit+0x10c>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4013      	ands	r3, r2
 801a5c2:	4a17      	ldr	r2, [pc, #92]	@ (801a620 <xTaskPriorityDisinherit+0x10c>)
 801a5c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a5ca:	693b      	ldr	r3, [r7, #16]
 801a5cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a5ce:	693b      	ldr	r3, [r7, #16]
 801a5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5d2:	f1c3 020f 	rsb	r2, r3, #15
 801a5d6:	693b      	ldr	r3, [r7, #16]
 801a5d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5de:	2201      	movs	r2, #1
 801a5e0:	409a      	lsls	r2, r3
 801a5e2:	4b0f      	ldr	r3, [pc, #60]	@ (801a620 <xTaskPriorityDisinherit+0x10c>)
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4313      	orrs	r3, r2
 801a5e8:	4a0d      	ldr	r2, [pc, #52]	@ (801a620 <xTaskPriorityDisinherit+0x10c>)
 801a5ea:	6013      	str	r3, [r2, #0]
 801a5ec:	693b      	ldr	r3, [r7, #16]
 801a5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a5f0:	4613      	mov	r3, r2
 801a5f2:	009b      	lsls	r3, r3, #2
 801a5f4:	4413      	add	r3, r2
 801a5f6:	009b      	lsls	r3, r3, #2
 801a5f8:	4a08      	ldr	r2, [pc, #32]	@ (801a61c <xTaskPriorityDisinherit+0x108>)
 801a5fa:	441a      	add	r2, r3
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	3304      	adds	r3, #4
 801a600:	4619      	mov	r1, r3
 801a602:	4610      	mov	r0, r2
 801a604:	f7fe f987 	bl	8018916 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a608:	2301      	movs	r3, #1
 801a60a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a60c:	697b      	ldr	r3, [r7, #20]
	}
 801a60e:	4618      	mov	r0, r3
 801a610:	3718      	adds	r7, #24
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}
 801a616:	bf00      	nop
 801a618:	20003f00 	.word	0x20003f00
 801a61c:	20003f04 	.word	0x20003f04
 801a620:	200040a8 	.word	0x200040a8

0801a624 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801a624:	b580      	push	{r7, lr}
 801a626:	b084      	sub	sp, #16
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
 801a62c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801a62e:	f000 fdeb 	bl	801b208 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801a632:	4b20      	ldr	r3, [pc, #128]	@ (801a6b4 <ulTaskNotifyTake+0x90>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d113      	bne.n	801a666 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801a63e:	4b1d      	ldr	r3, [pc, #116]	@ (801a6b4 <ulTaskNotifyTake+0x90>)
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	2201      	movs	r2, #1
 801a644:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

				if( xTicksToWait > ( TickType_t ) 0 )
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d00b      	beq.n	801a666 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a64e:	2101      	movs	r1, #1
 801a650:	6838      	ldr	r0, [r7, #0]
 801a652:	f000 f8c9 	bl	801a7e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801a656:	4b18      	ldr	r3, [pc, #96]	@ (801a6b8 <ulTaskNotifyTake+0x94>)
 801a658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a65c:	601a      	str	r2, [r3, #0]
 801a65e:	f3bf 8f4f 	dsb	sy
 801a662:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801a666:	f000 fe01 	bl	801b26c <vPortExitCritical>

		taskENTER_CRITICAL();
 801a66a:	f000 fdcd 	bl	801b208 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801a66e:	4b11      	ldr	r3, [pc, #68]	@ (801a6b4 <ulTaskNotifyTake+0x90>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801a676:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d00e      	beq.n	801a69c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d005      	beq.n	801a690 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801a684:	4b0b      	ldr	r3, [pc, #44]	@ (801a6b4 <ulTaskNotifyTake+0x90>)
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	2200      	movs	r2, #0
 801a68a:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 801a68e:	e005      	b.n	801a69c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801a690:	4b08      	ldr	r3, [pc, #32]	@ (801a6b4 <ulTaskNotifyTake+0x90>)
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	68fa      	ldr	r2, [r7, #12]
 801a696:	3a01      	subs	r2, #1
 801a698:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a69c:	4b05      	ldr	r3, [pc, #20]	@ (801a6b4 <ulTaskNotifyTake+0x90>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
		}
		taskEXIT_CRITICAL();
 801a6a6:	f000 fde1 	bl	801b26c <vPortExitCritical>

		return ulReturn;
 801a6aa:	68fb      	ldr	r3, [r7, #12]
	}
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	3710      	adds	r7, #16
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	bd80      	pop	{r7, pc}
 801a6b4:	20003f00 	.word	0x20003f00
 801a6b8:	e000ed04 	.word	0xe000ed04

0801a6bc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b08a      	sub	sp, #40	@ 0x28
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
 801a6c4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d10b      	bne.n	801a6e4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 801a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6d0:	f383 8811 	msr	BASEPRI, r3
 801a6d4:	f3bf 8f6f 	isb	sy
 801a6d8:	f3bf 8f4f 	dsb	sy
 801a6dc:	61bb      	str	r3, [r7, #24]
}
 801a6de:	bf00      	nop
 801a6e0:	bf00      	nop
 801a6e2:	e7fd      	b.n	801a6e0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a6e4:	f000 fe70 	bl	801b3c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 801a6ec:	f3ef 8211 	mrs	r2, BASEPRI
 801a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6f4:	f383 8811 	msr	BASEPRI, r3
 801a6f8:	f3bf 8f6f 	isb	sy
 801a6fc:	f3bf 8f4f 	dsb	sy
 801a700:	617a      	str	r2, [r7, #20]
 801a702:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a704:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a706:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a70a:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 801a70e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a712:	2202      	movs	r2, #2
 801a714:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 801a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801a71e:	1c5a      	adds	r2, r3, #1
 801a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a722:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801a726:	7ffb      	ldrb	r3, [r7, #31]
 801a728:	2b01      	cmp	r3, #1
 801a72a:	d146      	bne.n	801a7ba <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a730:	2b00      	cmp	r3, #0
 801a732:	d00b      	beq.n	801a74c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 801a734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a738:	f383 8811 	msr	BASEPRI, r3
 801a73c:	f3bf 8f6f 	isb	sy
 801a740:	f3bf 8f4f 	dsb	sy
 801a744:	60fb      	str	r3, [r7, #12]
}
 801a746:	bf00      	nop
 801a748:	bf00      	nop
 801a74a:	e7fd      	b.n	801a748 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a74c:	4b20      	ldr	r3, [pc, #128]	@ (801a7d0 <vTaskNotifyGiveFromISR+0x114>)
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d11c      	bne.n	801a78e <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a756:	3304      	adds	r3, #4
 801a758:	4618      	mov	r0, r3
 801a75a:	f7fe f939 	bl	80189d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a762:	2201      	movs	r2, #1
 801a764:	409a      	lsls	r2, r3
 801a766:	4b1b      	ldr	r3, [pc, #108]	@ (801a7d4 <vTaskNotifyGiveFromISR+0x118>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	4313      	orrs	r3, r2
 801a76c:	4a19      	ldr	r2, [pc, #100]	@ (801a7d4 <vTaskNotifyGiveFromISR+0x118>)
 801a76e:	6013      	str	r3, [r2, #0]
 801a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a774:	4613      	mov	r3, r2
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	4413      	add	r3, r2
 801a77a:	009b      	lsls	r3, r3, #2
 801a77c:	4a16      	ldr	r2, [pc, #88]	@ (801a7d8 <vTaskNotifyGiveFromISR+0x11c>)
 801a77e:	441a      	add	r2, r3
 801a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a782:	3304      	adds	r3, #4
 801a784:	4619      	mov	r1, r3
 801a786:	4610      	mov	r0, r2
 801a788:	f7fe f8c5 	bl	8018916 <vListInsertEnd>
 801a78c:	e005      	b.n	801a79a <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a790:	3318      	adds	r3, #24
 801a792:	4619      	mov	r1, r3
 801a794:	4811      	ldr	r0, [pc, #68]	@ (801a7dc <vTaskNotifyGiveFromISR+0x120>)
 801a796:	f7fe f8be 	bl	8018916 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a79e:	4b10      	ldr	r3, [pc, #64]	@ (801a7e0 <vTaskNotifyGiveFromISR+0x124>)
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d908      	bls.n	801a7ba <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d002      	beq.n	801a7b4 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801a7ae:	683b      	ldr	r3, [r7, #0]
 801a7b0:	2201      	movs	r2, #1
 801a7b2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801a7b4:	4b0b      	ldr	r3, [pc, #44]	@ (801a7e4 <vTaskNotifyGiveFromISR+0x128>)
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	601a      	str	r2, [r3, #0]
 801a7ba:	6a3b      	ldr	r3, [r7, #32]
 801a7bc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	f383 8811 	msr	BASEPRI, r3
}
 801a7c4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801a7c6:	bf00      	nop
 801a7c8:	3728      	adds	r7, #40	@ 0x28
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd80      	pop	{r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	200040c8 	.word	0x200040c8
 801a7d4:	200040a8 	.word	0x200040a8
 801a7d8:	20003f04 	.word	0x20003f04
 801a7dc:	20004060 	.word	0x20004060
 801a7e0:	20003f00 	.word	0x20003f00
 801a7e4:	200040b4 	.word	0x200040b4

0801a7e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b084      	sub	sp, #16
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	6078      	str	r0, [r7, #4]
 801a7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a7f2:	4b29      	ldr	r3, [pc, #164]	@ (801a898 <prvAddCurrentTaskToDelayedList+0xb0>)
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a7f8:	4b28      	ldr	r3, [pc, #160]	@ (801a89c <prvAddCurrentTaskToDelayedList+0xb4>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	3304      	adds	r3, #4
 801a7fe:	4618      	mov	r0, r3
 801a800:	f7fe f8e6 	bl	80189d0 <uxListRemove>
 801a804:	4603      	mov	r3, r0
 801a806:	2b00      	cmp	r3, #0
 801a808:	d10b      	bne.n	801a822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a80a:	4b24      	ldr	r3, [pc, #144]	@ (801a89c <prvAddCurrentTaskToDelayedList+0xb4>)
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a810:	2201      	movs	r2, #1
 801a812:	fa02 f303 	lsl.w	r3, r2, r3
 801a816:	43da      	mvns	r2, r3
 801a818:	4b21      	ldr	r3, [pc, #132]	@ (801a8a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	4013      	ands	r3, r2
 801a81e:	4a20      	ldr	r2, [pc, #128]	@ (801a8a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a828:	d10a      	bne.n	801a840 <prvAddCurrentTaskToDelayedList+0x58>
 801a82a:	683b      	ldr	r3, [r7, #0]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d007      	beq.n	801a840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a830:	4b1a      	ldr	r3, [pc, #104]	@ (801a89c <prvAddCurrentTaskToDelayedList+0xb4>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	3304      	adds	r3, #4
 801a836:	4619      	mov	r1, r3
 801a838:	481a      	ldr	r0, [pc, #104]	@ (801a8a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801a83a:	f7fe f86c 	bl	8018916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a83e:	e026      	b.n	801a88e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a840:	68fa      	ldr	r2, [r7, #12]
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	4413      	add	r3, r2
 801a846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a848:	4b14      	ldr	r3, [pc, #80]	@ (801a89c <prvAddCurrentTaskToDelayedList+0xb4>)
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	68ba      	ldr	r2, [r7, #8]
 801a84e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a850:	68ba      	ldr	r2, [r7, #8]
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	429a      	cmp	r2, r3
 801a856:	d209      	bcs.n	801a86c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a858:	4b13      	ldr	r3, [pc, #76]	@ (801a8a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801a85a:	681a      	ldr	r2, [r3, #0]
 801a85c:	4b0f      	ldr	r3, [pc, #60]	@ (801a89c <prvAddCurrentTaskToDelayedList+0xb4>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	3304      	adds	r3, #4
 801a862:	4619      	mov	r1, r3
 801a864:	4610      	mov	r0, r2
 801a866:	f7fe f87a 	bl	801895e <vListInsert>
}
 801a86a:	e010      	b.n	801a88e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a86c:	4b0f      	ldr	r3, [pc, #60]	@ (801a8ac <prvAddCurrentTaskToDelayedList+0xc4>)
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	4b0a      	ldr	r3, [pc, #40]	@ (801a89c <prvAddCurrentTaskToDelayedList+0xb4>)
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	3304      	adds	r3, #4
 801a876:	4619      	mov	r1, r3
 801a878:	4610      	mov	r0, r2
 801a87a:	f7fe f870 	bl	801895e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a87e:	4b0c      	ldr	r3, [pc, #48]	@ (801a8b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	68ba      	ldr	r2, [r7, #8]
 801a884:	429a      	cmp	r2, r3
 801a886:	d202      	bcs.n	801a88e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a888:	4a09      	ldr	r2, [pc, #36]	@ (801a8b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	6013      	str	r3, [r2, #0]
}
 801a88e:	bf00      	nop
 801a890:	3710      	adds	r7, #16
 801a892:	46bd      	mov	sp, r7
 801a894:	bd80      	pop	{r7, pc}
 801a896:	bf00      	nop
 801a898:	200040a4 	.word	0x200040a4
 801a89c:	20003f00 	.word	0x20003f00
 801a8a0:	200040a8 	.word	0x200040a8
 801a8a4:	2000408c 	.word	0x2000408c
 801a8a8:	2000405c 	.word	0x2000405c
 801a8ac:	20004058 	.word	0x20004058
 801a8b0:	200040c0 	.word	0x200040c0

0801a8b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b08a      	sub	sp, #40	@ 0x28
 801a8b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a8be:	f000 fb13 	bl	801aee8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a8c2:	4b1d      	ldr	r3, [pc, #116]	@ (801a938 <xTimerCreateTimerTask+0x84>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d021      	beq.n	801a90e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a8d2:	1d3a      	adds	r2, r7, #4
 801a8d4:	f107 0108 	add.w	r1, r7, #8
 801a8d8:	f107 030c 	add.w	r3, r7, #12
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f7e8 fc65 	bl	80031ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a8e2:	6879      	ldr	r1, [r7, #4]
 801a8e4:	68bb      	ldr	r3, [r7, #8]
 801a8e6:	68fa      	ldr	r2, [r7, #12]
 801a8e8:	9202      	str	r2, [sp, #8]
 801a8ea:	9301      	str	r3, [sp, #4]
 801a8ec:	2302      	movs	r3, #2
 801a8ee:	9300      	str	r3, [sp, #0]
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	460a      	mov	r2, r1
 801a8f4:	4911      	ldr	r1, [pc, #68]	@ (801a93c <xTimerCreateTimerTask+0x88>)
 801a8f6:	4812      	ldr	r0, [pc, #72]	@ (801a940 <xTimerCreateTimerTask+0x8c>)
 801a8f8:	f7fe fe5a 	bl	80195b0 <xTaskCreateStatic>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	4a11      	ldr	r2, [pc, #68]	@ (801a944 <xTimerCreateTimerTask+0x90>)
 801a900:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a902:	4b10      	ldr	r3, [pc, #64]	@ (801a944 <xTimerCreateTimerTask+0x90>)
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d001      	beq.n	801a90e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801a90a:	2301      	movs	r3, #1
 801a90c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a90e:	697b      	ldr	r3, [r7, #20]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d10b      	bne.n	801a92c <xTimerCreateTimerTask+0x78>
	__asm volatile
 801a914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a918:	f383 8811 	msr	BASEPRI, r3
 801a91c:	f3bf 8f6f 	isb	sy
 801a920:	f3bf 8f4f 	dsb	sy
 801a924:	613b      	str	r3, [r7, #16]
}
 801a926:	bf00      	nop
 801a928:	bf00      	nop
 801a92a:	e7fd      	b.n	801a928 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801a92c:	697b      	ldr	r3, [r7, #20]
}
 801a92e:	4618      	mov	r0, r3
 801a930:	3718      	adds	r7, #24
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}
 801a936:	bf00      	nop
 801a938:	20004104 	.word	0x20004104
 801a93c:	080232a8 	.word	0x080232a8
 801a940:	0801aa81 	.word	0x0801aa81
 801a944:	20004108 	.word	0x20004108

0801a948 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b08a      	sub	sp, #40	@ 0x28
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	60f8      	str	r0, [r7, #12]
 801a950:	60b9      	str	r1, [r7, #8]
 801a952:	607a      	str	r2, [r7, #4]
 801a954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a956:	2300      	movs	r3, #0
 801a958:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d10b      	bne.n	801a978 <xTimerGenericCommand+0x30>
	__asm volatile
 801a960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a964:	f383 8811 	msr	BASEPRI, r3
 801a968:	f3bf 8f6f 	isb	sy
 801a96c:	f3bf 8f4f 	dsb	sy
 801a970:	623b      	str	r3, [r7, #32]
}
 801a972:	bf00      	nop
 801a974:	bf00      	nop
 801a976:	e7fd      	b.n	801a974 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a978:	4b19      	ldr	r3, [pc, #100]	@ (801a9e0 <xTimerGenericCommand+0x98>)
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d02a      	beq.n	801a9d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a980:	68bb      	ldr	r3, [r7, #8]
 801a982:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	2b05      	cmp	r3, #5
 801a990:	dc18      	bgt.n	801a9c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a992:	f7ff fda1 	bl	801a4d8 <xTaskGetSchedulerState>
 801a996:	4603      	mov	r3, r0
 801a998:	2b02      	cmp	r3, #2
 801a99a:	d109      	bne.n	801a9b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a99c:	4b10      	ldr	r3, [pc, #64]	@ (801a9e0 <xTimerGenericCommand+0x98>)
 801a99e:	6818      	ldr	r0, [r3, #0]
 801a9a0:	f107 0110 	add.w	r1, r7, #16
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9a8:	f7fe f982 	bl	8018cb0 <xQueueGenericSend>
 801a9ac:	6278      	str	r0, [r7, #36]	@ 0x24
 801a9ae:	e012      	b.n	801a9d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a9b0:	4b0b      	ldr	r3, [pc, #44]	@ (801a9e0 <xTimerGenericCommand+0x98>)
 801a9b2:	6818      	ldr	r0, [r3, #0]
 801a9b4:	f107 0110 	add.w	r1, r7, #16
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f7fe f978 	bl	8018cb0 <xQueueGenericSend>
 801a9c0:	6278      	str	r0, [r7, #36]	@ 0x24
 801a9c2:	e008      	b.n	801a9d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a9c4:	4b06      	ldr	r3, [pc, #24]	@ (801a9e0 <xTimerGenericCommand+0x98>)
 801a9c6:	6818      	ldr	r0, [r3, #0]
 801a9c8:	f107 0110 	add.w	r1, r7, #16
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	683a      	ldr	r2, [r7, #0]
 801a9d0:	f7fe fa70 	bl	8018eb4 <xQueueGenericSendFromISR>
 801a9d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a9d8:	4618      	mov	r0, r3
 801a9da:	3728      	adds	r7, #40	@ 0x28
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	bd80      	pop	{r7, pc}
 801a9e0:	20004104 	.word	0x20004104

0801a9e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b088      	sub	sp, #32
 801a9e8:	af02      	add	r7, sp, #8
 801a9ea:	6078      	str	r0, [r7, #4]
 801a9ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9ee:	4b23      	ldr	r3, [pc, #140]	@ (801aa7c <prvProcessExpiredTimer+0x98>)
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	68db      	ldr	r3, [r3, #12]
 801a9f4:	68db      	ldr	r3, [r3, #12]
 801a9f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a9f8:	697b      	ldr	r3, [r7, #20]
 801a9fa:	3304      	adds	r3, #4
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	f7fd ffe7 	bl	80189d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aa02:	697b      	ldr	r3, [r7, #20]
 801aa04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801aa08:	f003 0304 	and.w	r3, r3, #4
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d023      	beq.n	801aa58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801aa10:	697b      	ldr	r3, [r7, #20]
 801aa12:	699a      	ldr	r2, [r3, #24]
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	18d1      	adds	r1, r2, r3
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	683a      	ldr	r2, [r7, #0]
 801aa1c:	6978      	ldr	r0, [r7, #20]
 801aa1e:	f000 f8d5 	bl	801abcc <prvInsertTimerInActiveList>
 801aa22:	4603      	mov	r3, r0
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d020      	beq.n	801aa6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aa28:	2300      	movs	r3, #0
 801aa2a:	9300      	str	r3, [sp, #0]
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	687a      	ldr	r2, [r7, #4]
 801aa30:	2100      	movs	r1, #0
 801aa32:	6978      	ldr	r0, [r7, #20]
 801aa34:	f7ff ff88 	bl	801a948 <xTimerGenericCommand>
 801aa38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801aa3a:	693b      	ldr	r3, [r7, #16]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d114      	bne.n	801aa6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 801aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa44:	f383 8811 	msr	BASEPRI, r3
 801aa48:	f3bf 8f6f 	isb	sy
 801aa4c:	f3bf 8f4f 	dsb	sy
 801aa50:	60fb      	str	r3, [r7, #12]
}
 801aa52:	bf00      	nop
 801aa54:	bf00      	nop
 801aa56:	e7fd      	b.n	801aa54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aa58:	697b      	ldr	r3, [r7, #20]
 801aa5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801aa5e:	f023 0301 	bic.w	r3, r3, #1
 801aa62:	b2da      	uxtb	r2, r3
 801aa64:	697b      	ldr	r3, [r7, #20]
 801aa66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aa6a:	697b      	ldr	r3, [r7, #20]
 801aa6c:	6a1b      	ldr	r3, [r3, #32]
 801aa6e:	6978      	ldr	r0, [r7, #20]
 801aa70:	4798      	blx	r3
}
 801aa72:	bf00      	nop
 801aa74:	3718      	adds	r7, #24
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	200040fc 	.word	0x200040fc

0801aa80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b084      	sub	sp, #16
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aa88:	f107 0308 	add.w	r3, r7, #8
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f000 f859 	bl	801ab44 <prvGetNextExpireTime>
 801aa92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	4619      	mov	r1, r3
 801aa98:	68f8      	ldr	r0, [r7, #12]
 801aa9a:	f000 f805 	bl	801aaa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801aa9e:	f000 f8d7 	bl	801ac50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aaa2:	bf00      	nop
 801aaa4:	e7f0      	b.n	801aa88 <prvTimerTask+0x8>
	...

0801aaa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b084      	sub	sp, #16
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
 801aab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801aab2:	f7ff f88f 	bl	8019bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801aab6:	f107 0308 	add.w	r3, r7, #8
 801aaba:	4618      	mov	r0, r3
 801aabc:	f000 f866 	bl	801ab8c <prvSampleTimeNow>
 801aac0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d130      	bne.n	801ab2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801aac8:	683b      	ldr	r3, [r7, #0]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d10a      	bne.n	801aae4 <prvProcessTimerOrBlockTask+0x3c>
 801aace:	687a      	ldr	r2, [r7, #4]
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d806      	bhi.n	801aae4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801aad6:	f7ff f88b 	bl	8019bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801aada:	68f9      	ldr	r1, [r7, #12]
 801aadc:	6878      	ldr	r0, [r7, #4]
 801aade:	f7ff ff81 	bl	801a9e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801aae2:	e024      	b.n	801ab2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801aae4:	683b      	ldr	r3, [r7, #0]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d008      	beq.n	801aafc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801aaea:	4b13      	ldr	r3, [pc, #76]	@ (801ab38 <prvProcessTimerOrBlockTask+0x90>)
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d101      	bne.n	801aaf8 <prvProcessTimerOrBlockTask+0x50>
 801aaf4:	2301      	movs	r3, #1
 801aaf6:	e000      	b.n	801aafa <prvProcessTimerOrBlockTask+0x52>
 801aaf8:	2300      	movs	r3, #0
 801aafa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801aafc:	4b0f      	ldr	r3, [pc, #60]	@ (801ab3c <prvProcessTimerOrBlockTask+0x94>)
 801aafe:	6818      	ldr	r0, [r3, #0]
 801ab00:	687a      	ldr	r2, [r7, #4]
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	1ad3      	subs	r3, r2, r3
 801ab06:	683a      	ldr	r2, [r7, #0]
 801ab08:	4619      	mov	r1, r3
 801ab0a:	f7fe fd1d 	bl	8019548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801ab0e:	f7ff f86f 	bl	8019bf0 <xTaskResumeAll>
 801ab12:	4603      	mov	r3, r0
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d10a      	bne.n	801ab2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801ab18:	4b09      	ldr	r3, [pc, #36]	@ (801ab40 <prvProcessTimerOrBlockTask+0x98>)
 801ab1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ab1e:	601a      	str	r2, [r3, #0]
 801ab20:	f3bf 8f4f 	dsb	sy
 801ab24:	f3bf 8f6f 	isb	sy
}
 801ab28:	e001      	b.n	801ab2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801ab2a:	f7ff f861 	bl	8019bf0 <xTaskResumeAll>
}
 801ab2e:	bf00      	nop
 801ab30:	3710      	adds	r7, #16
 801ab32:	46bd      	mov	sp, r7
 801ab34:	bd80      	pop	{r7, pc}
 801ab36:	bf00      	nop
 801ab38:	20004100 	.word	0x20004100
 801ab3c:	20004104 	.word	0x20004104
 801ab40:	e000ed04 	.word	0xe000ed04

0801ab44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801ab44:	b480      	push	{r7}
 801ab46:	b085      	sub	sp, #20
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801ab4c:	4b0e      	ldr	r3, [pc, #56]	@ (801ab88 <prvGetNextExpireTime+0x44>)
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d101      	bne.n	801ab5a <prvGetNextExpireTime+0x16>
 801ab56:	2201      	movs	r2, #1
 801ab58:	e000      	b.n	801ab5c <prvGetNextExpireTime+0x18>
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d105      	bne.n	801ab74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ab68:	4b07      	ldr	r3, [pc, #28]	@ (801ab88 <prvGetNextExpireTime+0x44>)
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	68db      	ldr	r3, [r3, #12]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	60fb      	str	r3, [r7, #12]
 801ab72:	e001      	b.n	801ab78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801ab74:	2300      	movs	r3, #0
 801ab76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801ab78:	68fb      	ldr	r3, [r7, #12]
}
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	3714      	adds	r7, #20
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	200040fc 	.word	0x200040fc

0801ab8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b084      	sub	sp, #16
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ab94:	f7ff f8ca 	bl	8019d2c <xTaskGetTickCount>
 801ab98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801ab9a:	4b0b      	ldr	r3, [pc, #44]	@ (801abc8 <prvSampleTimeNow+0x3c>)
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	68fa      	ldr	r2, [r7, #12]
 801aba0:	429a      	cmp	r2, r3
 801aba2:	d205      	bcs.n	801abb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801aba4:	f000 f93a 	bl	801ae1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2201      	movs	r2, #1
 801abac:	601a      	str	r2, [r3, #0]
 801abae:	e002      	b.n	801abb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	2200      	movs	r2, #0
 801abb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801abb6:	4a04      	ldr	r2, [pc, #16]	@ (801abc8 <prvSampleTimeNow+0x3c>)
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801abbc:	68fb      	ldr	r3, [r7, #12]
}
 801abbe:	4618      	mov	r0, r3
 801abc0:	3710      	adds	r7, #16
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}
 801abc6:	bf00      	nop
 801abc8:	2000410c 	.word	0x2000410c

0801abcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801abcc:	b580      	push	{r7, lr}
 801abce:	b086      	sub	sp, #24
 801abd0:	af00      	add	r7, sp, #0
 801abd2:	60f8      	str	r0, [r7, #12]
 801abd4:	60b9      	str	r1, [r7, #8]
 801abd6:	607a      	str	r2, [r7, #4]
 801abd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801abda:	2300      	movs	r3, #0
 801abdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	68ba      	ldr	r2, [r7, #8]
 801abe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	68fa      	ldr	r2, [r7, #12]
 801abe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801abea:	68ba      	ldr	r2, [r7, #8]
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	429a      	cmp	r2, r3
 801abf0:	d812      	bhi.n	801ac18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801abf2:	687a      	ldr	r2, [r7, #4]
 801abf4:	683b      	ldr	r3, [r7, #0]
 801abf6:	1ad2      	subs	r2, r2, r3
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	699b      	ldr	r3, [r3, #24]
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d302      	bcc.n	801ac06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801ac00:	2301      	movs	r3, #1
 801ac02:	617b      	str	r3, [r7, #20]
 801ac04:	e01b      	b.n	801ac3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801ac06:	4b10      	ldr	r3, [pc, #64]	@ (801ac48 <prvInsertTimerInActiveList+0x7c>)
 801ac08:	681a      	ldr	r2, [r3, #0]
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	3304      	adds	r3, #4
 801ac0e:	4619      	mov	r1, r3
 801ac10:	4610      	mov	r0, r2
 801ac12:	f7fd fea4 	bl	801895e <vListInsert>
 801ac16:	e012      	b.n	801ac3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801ac18:	687a      	ldr	r2, [r7, #4]
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	429a      	cmp	r2, r3
 801ac1e:	d206      	bcs.n	801ac2e <prvInsertTimerInActiveList+0x62>
 801ac20:	68ba      	ldr	r2, [r7, #8]
 801ac22:	683b      	ldr	r3, [r7, #0]
 801ac24:	429a      	cmp	r2, r3
 801ac26:	d302      	bcc.n	801ac2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801ac28:	2301      	movs	r3, #1
 801ac2a:	617b      	str	r3, [r7, #20]
 801ac2c:	e007      	b.n	801ac3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ac2e:	4b07      	ldr	r3, [pc, #28]	@ (801ac4c <prvInsertTimerInActiveList+0x80>)
 801ac30:	681a      	ldr	r2, [r3, #0]
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	3304      	adds	r3, #4
 801ac36:	4619      	mov	r1, r3
 801ac38:	4610      	mov	r0, r2
 801ac3a:	f7fd fe90 	bl	801895e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801ac3e:	697b      	ldr	r3, [r7, #20]
}
 801ac40:	4618      	mov	r0, r3
 801ac42:	3718      	adds	r7, #24
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}
 801ac48:	20004100 	.word	0x20004100
 801ac4c:	200040fc 	.word	0x200040fc

0801ac50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b08e      	sub	sp, #56	@ 0x38
 801ac54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ac56:	e0ce      	b.n	801adf6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	da19      	bge.n	801ac92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801ac5e:	1d3b      	adds	r3, r7, #4
 801ac60:	3304      	adds	r3, #4
 801ac62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801ac64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d10b      	bne.n	801ac82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801ac6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac6e:	f383 8811 	msr	BASEPRI, r3
 801ac72:	f3bf 8f6f 	isb	sy
 801ac76:	f3bf 8f4f 	dsb	sy
 801ac7a:	61fb      	str	r3, [r7, #28]
}
 801ac7c:	bf00      	nop
 801ac7e:	bf00      	nop
 801ac80:	e7fd      	b.n	801ac7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801ac82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac88:	6850      	ldr	r0, [r2, #4]
 801ac8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac8c:	6892      	ldr	r2, [r2, #8]
 801ac8e:	4611      	mov	r1, r2
 801ac90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	f2c0 80ae 	blt.w	801adf6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aca0:	695b      	ldr	r3, [r3, #20]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d004      	beq.n	801acb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aca8:	3304      	adds	r3, #4
 801acaa:	4618      	mov	r0, r3
 801acac:	f7fd fe90 	bl	80189d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801acb0:	463b      	mov	r3, r7
 801acb2:	4618      	mov	r0, r3
 801acb4:	f7ff ff6a 	bl	801ab8c <prvSampleTimeNow>
 801acb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	2b09      	cmp	r3, #9
 801acbe:	f200 8097 	bhi.w	801adf0 <prvProcessReceivedCommands+0x1a0>
 801acc2:	a201      	add	r2, pc, #4	@ (adr r2, 801acc8 <prvProcessReceivedCommands+0x78>)
 801acc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801acc8:	0801acf1 	.word	0x0801acf1
 801accc:	0801acf1 	.word	0x0801acf1
 801acd0:	0801acf1 	.word	0x0801acf1
 801acd4:	0801ad67 	.word	0x0801ad67
 801acd8:	0801ad7b 	.word	0x0801ad7b
 801acdc:	0801adc7 	.word	0x0801adc7
 801ace0:	0801acf1 	.word	0x0801acf1
 801ace4:	0801acf1 	.word	0x0801acf1
 801ace8:	0801ad67 	.word	0x0801ad67
 801acec:	0801ad7b 	.word	0x0801ad7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801acf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801acf6:	f043 0301 	orr.w	r3, r3, #1
 801acfa:	b2da      	uxtb	r2, r3
 801acfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801acfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801ad02:	68ba      	ldr	r2, [r7, #8]
 801ad04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad06:	699b      	ldr	r3, [r3, #24]
 801ad08:	18d1      	adds	r1, r2, r3
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ad10:	f7ff ff5c 	bl	801abcc <prvInsertTimerInActiveList>
 801ad14:	4603      	mov	r3, r0
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d06c      	beq.n	801adf4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ad1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad1c:	6a1b      	ldr	r3, [r3, #32]
 801ad1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ad20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ad22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ad28:	f003 0304 	and.w	r3, r3, #4
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d061      	beq.n	801adf4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801ad30:	68ba      	ldr	r2, [r7, #8]
 801ad32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad34:	699b      	ldr	r3, [r3, #24]
 801ad36:	441a      	add	r2, r3
 801ad38:	2300      	movs	r3, #0
 801ad3a:	9300      	str	r3, [sp, #0]
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	2100      	movs	r1, #0
 801ad40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ad42:	f7ff fe01 	bl	801a948 <xTimerGenericCommand>
 801ad46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801ad48:	6a3b      	ldr	r3, [r7, #32]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d152      	bne.n	801adf4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801ad4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad52:	f383 8811 	msr	BASEPRI, r3
 801ad56:	f3bf 8f6f 	isb	sy
 801ad5a:	f3bf 8f4f 	dsb	sy
 801ad5e:	61bb      	str	r3, [r7, #24]
}
 801ad60:	bf00      	nop
 801ad62:	bf00      	nop
 801ad64:	e7fd      	b.n	801ad62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ad6c:	f023 0301 	bic.w	r3, r3, #1
 801ad70:	b2da      	uxtb	r2, r3
 801ad72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801ad78:	e03d      	b.n	801adf6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ad80:	f043 0301 	orr.w	r3, r3, #1
 801ad84:	b2da      	uxtb	r2, r3
 801ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801ad8c:	68ba      	ldr	r2, [r7, #8]
 801ad8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad94:	699b      	ldr	r3, [r3, #24]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d10b      	bne.n	801adb2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801ad9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad9e:	f383 8811 	msr	BASEPRI, r3
 801ada2:	f3bf 8f6f 	isb	sy
 801ada6:	f3bf 8f4f 	dsb	sy
 801adaa:	617b      	str	r3, [r7, #20]
}
 801adac:	bf00      	nop
 801adae:	bf00      	nop
 801adb0:	e7fd      	b.n	801adae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801adb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adb4:	699a      	ldr	r2, [r3, #24]
 801adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adb8:	18d1      	adds	r1, r2, r3
 801adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801adbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801adc0:	f7ff ff04 	bl	801abcc <prvInsertTimerInActiveList>
					break;
 801adc4:	e017      	b.n	801adf6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801adc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801adcc:	f003 0302 	and.w	r3, r3, #2
 801add0:	2b00      	cmp	r3, #0
 801add2:	d103      	bne.n	801addc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801add4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801add6:	f000 fc07 	bl	801b5e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801adda:	e00c      	b.n	801adf6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801addc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ade2:	f023 0301 	bic.w	r3, r3, #1
 801ade6:	b2da      	uxtb	r2, r3
 801ade8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801adee:	e002      	b.n	801adf6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801adf0:	bf00      	nop
 801adf2:	e000      	b.n	801adf6 <prvProcessReceivedCommands+0x1a6>
					break;
 801adf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801adf6:	4b08      	ldr	r3, [pc, #32]	@ (801ae18 <prvProcessReceivedCommands+0x1c8>)
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	1d39      	adds	r1, r7, #4
 801adfc:	2200      	movs	r2, #0
 801adfe:	4618      	mov	r0, r3
 801ae00:	f7fe f986 	bl	8019110 <xQueueReceive>
 801ae04:	4603      	mov	r3, r0
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	f47f af26 	bne.w	801ac58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801ae0c:	bf00      	nop
 801ae0e:	bf00      	nop
 801ae10:	3730      	adds	r7, #48	@ 0x30
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	20004104 	.word	0x20004104

0801ae1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b088      	sub	sp, #32
 801ae20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ae22:	e049      	b.n	801aeb8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ae24:	4b2e      	ldr	r3, [pc, #184]	@ (801aee0 <prvSwitchTimerLists+0xc4>)
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	68db      	ldr	r3, [r3, #12]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae2e:	4b2c      	ldr	r3, [pc, #176]	@ (801aee0 <prvSwitchTimerLists+0xc4>)
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	68db      	ldr	r3, [r3, #12]
 801ae34:	68db      	ldr	r3, [r3, #12]
 801ae36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	3304      	adds	r3, #4
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	f7fd fdc7 	bl	80189d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	6a1b      	ldr	r3, [r3, #32]
 801ae46:	68f8      	ldr	r0, [r7, #12]
 801ae48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ae50:	f003 0304 	and.w	r3, r3, #4
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d02f      	beq.n	801aeb8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	699b      	ldr	r3, [r3, #24]
 801ae5c:	693a      	ldr	r2, [r7, #16]
 801ae5e:	4413      	add	r3, r2
 801ae60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ae62:	68ba      	ldr	r2, [r7, #8]
 801ae64:	693b      	ldr	r3, [r7, #16]
 801ae66:	429a      	cmp	r2, r3
 801ae68:	d90e      	bls.n	801ae88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	68ba      	ldr	r2, [r7, #8]
 801ae6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	68fa      	ldr	r2, [r7, #12]
 801ae74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ae76:	4b1a      	ldr	r3, [pc, #104]	@ (801aee0 <prvSwitchTimerLists+0xc4>)
 801ae78:	681a      	ldr	r2, [r3, #0]
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	3304      	adds	r3, #4
 801ae7e:	4619      	mov	r1, r3
 801ae80:	4610      	mov	r0, r2
 801ae82:	f7fd fd6c 	bl	801895e <vListInsert>
 801ae86:	e017      	b.n	801aeb8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ae88:	2300      	movs	r3, #0
 801ae8a:	9300      	str	r3, [sp, #0]
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	693a      	ldr	r2, [r7, #16]
 801ae90:	2100      	movs	r1, #0
 801ae92:	68f8      	ldr	r0, [r7, #12]
 801ae94:	f7ff fd58 	bl	801a948 <xTimerGenericCommand>
 801ae98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d10b      	bne.n	801aeb8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801aea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aea4:	f383 8811 	msr	BASEPRI, r3
 801aea8:	f3bf 8f6f 	isb	sy
 801aeac:	f3bf 8f4f 	dsb	sy
 801aeb0:	603b      	str	r3, [r7, #0]
}
 801aeb2:	bf00      	nop
 801aeb4:	bf00      	nop
 801aeb6:	e7fd      	b.n	801aeb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801aeb8:	4b09      	ldr	r3, [pc, #36]	@ (801aee0 <prvSwitchTimerLists+0xc4>)
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d1b0      	bne.n	801ae24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801aec2:	4b07      	ldr	r3, [pc, #28]	@ (801aee0 <prvSwitchTimerLists+0xc4>)
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801aec8:	4b06      	ldr	r3, [pc, #24]	@ (801aee4 <prvSwitchTimerLists+0xc8>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	4a04      	ldr	r2, [pc, #16]	@ (801aee0 <prvSwitchTimerLists+0xc4>)
 801aece:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801aed0:	4a04      	ldr	r2, [pc, #16]	@ (801aee4 <prvSwitchTimerLists+0xc8>)
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	6013      	str	r3, [r2, #0]
}
 801aed6:	bf00      	nop
 801aed8:	3718      	adds	r7, #24
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}
 801aede:	bf00      	nop
 801aee0:	200040fc 	.word	0x200040fc
 801aee4:	20004100 	.word	0x20004100

0801aee8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801aee8:	b580      	push	{r7, lr}
 801aeea:	b082      	sub	sp, #8
 801aeec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801aeee:	f000 f98b 	bl	801b208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801aef2:	4b15      	ldr	r3, [pc, #84]	@ (801af48 <prvCheckForValidListAndQueue+0x60>)
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d120      	bne.n	801af3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801aefa:	4814      	ldr	r0, [pc, #80]	@ (801af4c <prvCheckForValidListAndQueue+0x64>)
 801aefc:	f7fd fcde 	bl	80188bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801af00:	4813      	ldr	r0, [pc, #76]	@ (801af50 <prvCheckForValidListAndQueue+0x68>)
 801af02:	f7fd fcdb 	bl	80188bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801af06:	4b13      	ldr	r3, [pc, #76]	@ (801af54 <prvCheckForValidListAndQueue+0x6c>)
 801af08:	4a10      	ldr	r2, [pc, #64]	@ (801af4c <prvCheckForValidListAndQueue+0x64>)
 801af0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801af0c:	4b12      	ldr	r3, [pc, #72]	@ (801af58 <prvCheckForValidListAndQueue+0x70>)
 801af0e:	4a10      	ldr	r2, [pc, #64]	@ (801af50 <prvCheckForValidListAndQueue+0x68>)
 801af10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801af12:	2300      	movs	r3, #0
 801af14:	9300      	str	r3, [sp, #0]
 801af16:	4b11      	ldr	r3, [pc, #68]	@ (801af5c <prvCheckForValidListAndQueue+0x74>)
 801af18:	4a11      	ldr	r2, [pc, #68]	@ (801af60 <prvCheckForValidListAndQueue+0x78>)
 801af1a:	2110      	movs	r1, #16
 801af1c:	200a      	movs	r0, #10
 801af1e:	f7fd fdeb 	bl	8018af8 <xQueueGenericCreateStatic>
 801af22:	4603      	mov	r3, r0
 801af24:	4a08      	ldr	r2, [pc, #32]	@ (801af48 <prvCheckForValidListAndQueue+0x60>)
 801af26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801af28:	4b07      	ldr	r3, [pc, #28]	@ (801af48 <prvCheckForValidListAndQueue+0x60>)
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d005      	beq.n	801af3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801af30:	4b05      	ldr	r3, [pc, #20]	@ (801af48 <prvCheckForValidListAndQueue+0x60>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	490b      	ldr	r1, [pc, #44]	@ (801af64 <prvCheckForValidListAndQueue+0x7c>)
 801af36:	4618      	mov	r0, r3
 801af38:	f7fe fadc 	bl	80194f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801af3c:	f000 f996 	bl	801b26c <vPortExitCritical>
}
 801af40:	bf00      	nop
 801af42:	46bd      	mov	sp, r7
 801af44:	bd80      	pop	{r7, pc}
 801af46:	bf00      	nop
 801af48:	20004104 	.word	0x20004104
 801af4c:	200040d4 	.word	0x200040d4
 801af50:	200040e8 	.word	0x200040e8
 801af54:	200040fc 	.word	0x200040fc
 801af58:	20004100 	.word	0x20004100
 801af5c:	200041b0 	.word	0x200041b0
 801af60:	20004110 	.word	0x20004110
 801af64:	080232b0 	.word	0x080232b0

0801af68 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b08a      	sub	sp, #40	@ 0x28
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	60f8      	str	r0, [r7, #12]
 801af70:	60b9      	str	r1, [r7, #8]
 801af72:	607a      	str	r2, [r7, #4]
 801af74:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801af76:	f06f 0301 	mvn.w	r3, #1
 801af7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801af80:	68bb      	ldr	r3, [r7, #8]
 801af82:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801af88:	4b06      	ldr	r3, [pc, #24]	@ (801afa4 <xTimerPendFunctionCallFromISR+0x3c>)
 801af8a:	6818      	ldr	r0, [r3, #0]
 801af8c:	f107 0114 	add.w	r1, r7, #20
 801af90:	2300      	movs	r3, #0
 801af92:	683a      	ldr	r2, [r7, #0]
 801af94:	f7fd ff8e 	bl	8018eb4 <xQueueGenericSendFromISR>
 801af98:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801af9c:	4618      	mov	r0, r3
 801af9e:	3728      	adds	r7, #40	@ 0x28
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd80      	pop	{r7, pc}
 801afa4:	20004104 	.word	0x20004104

0801afa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801afa8:	b480      	push	{r7}
 801afaa:	b085      	sub	sp, #20
 801afac:	af00      	add	r7, sp, #0
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	60b9      	str	r1, [r7, #8]
 801afb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	3b04      	subs	r3, #4
 801afb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801afc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	3b04      	subs	r3, #4
 801afc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801afc8:	68bb      	ldr	r3, [r7, #8]
 801afca:	f023 0201 	bic.w	r2, r3, #1
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	3b04      	subs	r3, #4
 801afd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801afd8:	4a0c      	ldr	r2, [pc, #48]	@ (801b00c <pxPortInitialiseStack+0x64>)
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	3b14      	subs	r3, #20
 801afe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801afe4:	687a      	ldr	r2, [r7, #4]
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	3b04      	subs	r3, #4
 801afee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	f06f 0202 	mvn.w	r2, #2
 801aff6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	3b20      	subs	r3, #32
 801affc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801affe:	68fb      	ldr	r3, [r7, #12]
}
 801b000:	4618      	mov	r0, r3
 801b002:	3714      	adds	r7, #20
 801b004:	46bd      	mov	sp, r7
 801b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00a:	4770      	bx	lr
 801b00c:	0801b011 	.word	0x0801b011

0801b010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b010:	b480      	push	{r7}
 801b012:	b085      	sub	sp, #20
 801b014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b016:	2300      	movs	r3, #0
 801b018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b01a:	4b13      	ldr	r3, [pc, #76]	@ (801b068 <prvTaskExitError+0x58>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b022:	d00b      	beq.n	801b03c <prvTaskExitError+0x2c>
	__asm volatile
 801b024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b028:	f383 8811 	msr	BASEPRI, r3
 801b02c:	f3bf 8f6f 	isb	sy
 801b030:	f3bf 8f4f 	dsb	sy
 801b034:	60fb      	str	r3, [r7, #12]
}
 801b036:	bf00      	nop
 801b038:	bf00      	nop
 801b03a:	e7fd      	b.n	801b038 <prvTaskExitError+0x28>
	__asm volatile
 801b03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b040:	f383 8811 	msr	BASEPRI, r3
 801b044:	f3bf 8f6f 	isb	sy
 801b048:	f3bf 8f4f 	dsb	sy
 801b04c:	60bb      	str	r3, [r7, #8]
}
 801b04e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b050:	bf00      	nop
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d0fc      	beq.n	801b052 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b058:	bf00      	nop
 801b05a:	bf00      	nop
 801b05c:	3714      	adds	r7, #20
 801b05e:	46bd      	mov	sp, r7
 801b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b064:	4770      	bx	lr
 801b066:	bf00      	nop
 801b068:	200000dc 	.word	0x200000dc
 801b06c:	00000000 	.word	0x00000000

0801b070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b070:	4b07      	ldr	r3, [pc, #28]	@ (801b090 <pxCurrentTCBConst2>)
 801b072:	6819      	ldr	r1, [r3, #0]
 801b074:	6808      	ldr	r0, [r1, #0]
 801b076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b07a:	f380 8809 	msr	PSP, r0
 801b07e:	f3bf 8f6f 	isb	sy
 801b082:	f04f 0000 	mov.w	r0, #0
 801b086:	f380 8811 	msr	BASEPRI, r0
 801b08a:	4770      	bx	lr
 801b08c:	f3af 8000 	nop.w

0801b090 <pxCurrentTCBConst2>:
 801b090:	20003f00 	.word	0x20003f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b094:	bf00      	nop
 801b096:	bf00      	nop

0801b098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b098:	4808      	ldr	r0, [pc, #32]	@ (801b0bc <prvPortStartFirstTask+0x24>)
 801b09a:	6800      	ldr	r0, [r0, #0]
 801b09c:	6800      	ldr	r0, [r0, #0]
 801b09e:	f380 8808 	msr	MSP, r0
 801b0a2:	f04f 0000 	mov.w	r0, #0
 801b0a6:	f380 8814 	msr	CONTROL, r0
 801b0aa:	b662      	cpsie	i
 801b0ac:	b661      	cpsie	f
 801b0ae:	f3bf 8f4f 	dsb	sy
 801b0b2:	f3bf 8f6f 	isb	sy
 801b0b6:	df00      	svc	0
 801b0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b0ba:	bf00      	nop
 801b0bc:	e000ed08 	.word	0xe000ed08

0801b0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b086      	sub	sp, #24
 801b0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b0c6:	4b47      	ldr	r3, [pc, #284]	@ (801b1e4 <xPortStartScheduler+0x124>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	4a47      	ldr	r2, [pc, #284]	@ (801b1e8 <xPortStartScheduler+0x128>)
 801b0cc:	4293      	cmp	r3, r2
 801b0ce:	d10b      	bne.n	801b0e8 <xPortStartScheduler+0x28>
	__asm volatile
 801b0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0d4:	f383 8811 	msr	BASEPRI, r3
 801b0d8:	f3bf 8f6f 	isb	sy
 801b0dc:	f3bf 8f4f 	dsb	sy
 801b0e0:	613b      	str	r3, [r7, #16]
}
 801b0e2:	bf00      	nop
 801b0e4:	bf00      	nop
 801b0e6:	e7fd      	b.n	801b0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b0e8:	4b3e      	ldr	r3, [pc, #248]	@ (801b1e4 <xPortStartScheduler+0x124>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	4a3f      	ldr	r2, [pc, #252]	@ (801b1ec <xPortStartScheduler+0x12c>)
 801b0ee:	4293      	cmp	r3, r2
 801b0f0:	d10b      	bne.n	801b10a <xPortStartScheduler+0x4a>
	__asm volatile
 801b0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0f6:	f383 8811 	msr	BASEPRI, r3
 801b0fa:	f3bf 8f6f 	isb	sy
 801b0fe:	f3bf 8f4f 	dsb	sy
 801b102:	60fb      	str	r3, [r7, #12]
}
 801b104:	bf00      	nop
 801b106:	bf00      	nop
 801b108:	e7fd      	b.n	801b106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b10a:	4b39      	ldr	r3, [pc, #228]	@ (801b1f0 <xPortStartScheduler+0x130>)
 801b10c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b10e:	697b      	ldr	r3, [r7, #20]
 801b110:	781b      	ldrb	r3, [r3, #0]
 801b112:	b2db      	uxtb	r3, r3
 801b114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	22ff      	movs	r2, #255	@ 0xff
 801b11a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b11c:	697b      	ldr	r3, [r7, #20]
 801b11e:	781b      	ldrb	r3, [r3, #0]
 801b120:	b2db      	uxtb	r3, r3
 801b122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b124:	78fb      	ldrb	r3, [r7, #3]
 801b126:	b2db      	uxtb	r3, r3
 801b128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801b12c:	b2da      	uxtb	r2, r3
 801b12e:	4b31      	ldr	r3, [pc, #196]	@ (801b1f4 <xPortStartScheduler+0x134>)
 801b130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b132:	4b31      	ldr	r3, [pc, #196]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b134:	2207      	movs	r2, #7
 801b136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b138:	e009      	b.n	801b14e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801b13a:	4b2f      	ldr	r3, [pc, #188]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	3b01      	subs	r3, #1
 801b140:	4a2d      	ldr	r2, [pc, #180]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b144:	78fb      	ldrb	r3, [r7, #3]
 801b146:	b2db      	uxtb	r3, r3
 801b148:	005b      	lsls	r3, r3, #1
 801b14a:	b2db      	uxtb	r3, r3
 801b14c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b14e:	78fb      	ldrb	r3, [r7, #3]
 801b150:	b2db      	uxtb	r3, r3
 801b152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b156:	2b80      	cmp	r3, #128	@ 0x80
 801b158:	d0ef      	beq.n	801b13a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b15a:	4b27      	ldr	r3, [pc, #156]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	f1c3 0307 	rsb	r3, r3, #7
 801b162:	2b04      	cmp	r3, #4
 801b164:	d00b      	beq.n	801b17e <xPortStartScheduler+0xbe>
	__asm volatile
 801b166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b16a:	f383 8811 	msr	BASEPRI, r3
 801b16e:	f3bf 8f6f 	isb	sy
 801b172:	f3bf 8f4f 	dsb	sy
 801b176:	60bb      	str	r3, [r7, #8]
}
 801b178:	bf00      	nop
 801b17a:	bf00      	nop
 801b17c:	e7fd      	b.n	801b17a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b17e:	4b1e      	ldr	r3, [pc, #120]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	021b      	lsls	r3, r3, #8
 801b184:	4a1c      	ldr	r2, [pc, #112]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b188:	4b1b      	ldr	r3, [pc, #108]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801b190:	4a19      	ldr	r2, [pc, #100]	@ (801b1f8 <xPortStartScheduler+0x138>)
 801b192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	b2da      	uxtb	r2, r3
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b19c:	4b17      	ldr	r3, [pc, #92]	@ (801b1fc <xPortStartScheduler+0x13c>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	4a16      	ldr	r2, [pc, #88]	@ (801b1fc <xPortStartScheduler+0x13c>)
 801b1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801b1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b1a8:	4b14      	ldr	r3, [pc, #80]	@ (801b1fc <xPortStartScheduler+0x13c>)
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	4a13      	ldr	r2, [pc, #76]	@ (801b1fc <xPortStartScheduler+0x13c>)
 801b1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801b1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b1b4:	f000 f8da 	bl	801b36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b1b8:	4b11      	ldr	r3, [pc, #68]	@ (801b200 <xPortStartScheduler+0x140>)
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b1be:	f000 f8f9 	bl	801b3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b1c2:	4b10      	ldr	r3, [pc, #64]	@ (801b204 <xPortStartScheduler+0x144>)
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	4a0f      	ldr	r2, [pc, #60]	@ (801b204 <xPortStartScheduler+0x144>)
 801b1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801b1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b1ce:	f7ff ff63 	bl	801b098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b1d2:	f7fe fe75 	bl	8019ec0 <vTaskSwitchContext>
	prvTaskExitError();
 801b1d6:	f7ff ff1b 	bl	801b010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b1da:	2300      	movs	r3, #0
}
 801b1dc:	4618      	mov	r0, r3
 801b1de:	3718      	adds	r7, #24
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	bd80      	pop	{r7, pc}
 801b1e4:	e000ed00 	.word	0xe000ed00
 801b1e8:	410fc271 	.word	0x410fc271
 801b1ec:	410fc270 	.word	0x410fc270
 801b1f0:	e000e400 	.word	0xe000e400
 801b1f4:	20004200 	.word	0x20004200
 801b1f8:	20004204 	.word	0x20004204
 801b1fc:	e000ed20 	.word	0xe000ed20
 801b200:	200000dc 	.word	0x200000dc
 801b204:	e000ef34 	.word	0xe000ef34

0801b208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b208:	b480      	push	{r7}
 801b20a:	b083      	sub	sp, #12
 801b20c:	af00      	add	r7, sp, #0
	__asm volatile
 801b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b212:	f383 8811 	msr	BASEPRI, r3
 801b216:	f3bf 8f6f 	isb	sy
 801b21a:	f3bf 8f4f 	dsb	sy
 801b21e:	607b      	str	r3, [r7, #4]
}
 801b220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b222:	4b10      	ldr	r3, [pc, #64]	@ (801b264 <vPortEnterCritical+0x5c>)
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	3301      	adds	r3, #1
 801b228:	4a0e      	ldr	r2, [pc, #56]	@ (801b264 <vPortEnterCritical+0x5c>)
 801b22a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b22c:	4b0d      	ldr	r3, [pc, #52]	@ (801b264 <vPortEnterCritical+0x5c>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	2b01      	cmp	r3, #1
 801b232:	d110      	bne.n	801b256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b234:	4b0c      	ldr	r3, [pc, #48]	@ (801b268 <vPortEnterCritical+0x60>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	b2db      	uxtb	r3, r3
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d00b      	beq.n	801b256 <vPortEnterCritical+0x4e>
	__asm volatile
 801b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b242:	f383 8811 	msr	BASEPRI, r3
 801b246:	f3bf 8f6f 	isb	sy
 801b24a:	f3bf 8f4f 	dsb	sy
 801b24e:	603b      	str	r3, [r7, #0]
}
 801b250:	bf00      	nop
 801b252:	bf00      	nop
 801b254:	e7fd      	b.n	801b252 <vPortEnterCritical+0x4a>
	}
}
 801b256:	bf00      	nop
 801b258:	370c      	adds	r7, #12
 801b25a:	46bd      	mov	sp, r7
 801b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b260:	4770      	bx	lr
 801b262:	bf00      	nop
 801b264:	200000dc 	.word	0x200000dc
 801b268:	e000ed04 	.word	0xe000ed04

0801b26c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b26c:	b480      	push	{r7}
 801b26e:	b083      	sub	sp, #12
 801b270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b272:	4b12      	ldr	r3, [pc, #72]	@ (801b2bc <vPortExitCritical+0x50>)
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d10b      	bne.n	801b292 <vPortExitCritical+0x26>
	__asm volatile
 801b27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b27e:	f383 8811 	msr	BASEPRI, r3
 801b282:	f3bf 8f6f 	isb	sy
 801b286:	f3bf 8f4f 	dsb	sy
 801b28a:	607b      	str	r3, [r7, #4]
}
 801b28c:	bf00      	nop
 801b28e:	bf00      	nop
 801b290:	e7fd      	b.n	801b28e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b292:	4b0a      	ldr	r3, [pc, #40]	@ (801b2bc <vPortExitCritical+0x50>)
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	3b01      	subs	r3, #1
 801b298:	4a08      	ldr	r2, [pc, #32]	@ (801b2bc <vPortExitCritical+0x50>)
 801b29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b29c:	4b07      	ldr	r3, [pc, #28]	@ (801b2bc <vPortExitCritical+0x50>)
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d105      	bne.n	801b2b0 <vPortExitCritical+0x44>
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	f383 8811 	msr	BASEPRI, r3
}
 801b2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b2b0:	bf00      	nop
 801b2b2:	370c      	adds	r7, #12
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ba:	4770      	bx	lr
 801b2bc:	200000dc 	.word	0x200000dc

0801b2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b2c0:	f3ef 8009 	mrs	r0, PSP
 801b2c4:	f3bf 8f6f 	isb	sy
 801b2c8:	4b15      	ldr	r3, [pc, #84]	@ (801b320 <pxCurrentTCBConst>)
 801b2ca:	681a      	ldr	r2, [r3, #0]
 801b2cc:	f01e 0f10 	tst.w	lr, #16
 801b2d0:	bf08      	it	eq
 801b2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2da:	6010      	str	r0, [r2, #0]
 801b2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801b2e4:	f380 8811 	msr	BASEPRI, r0
 801b2e8:	f3bf 8f4f 	dsb	sy
 801b2ec:	f3bf 8f6f 	isb	sy
 801b2f0:	f7fe fde6 	bl	8019ec0 <vTaskSwitchContext>
 801b2f4:	f04f 0000 	mov.w	r0, #0
 801b2f8:	f380 8811 	msr	BASEPRI, r0
 801b2fc:	bc09      	pop	{r0, r3}
 801b2fe:	6819      	ldr	r1, [r3, #0]
 801b300:	6808      	ldr	r0, [r1, #0]
 801b302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b306:	f01e 0f10 	tst.w	lr, #16
 801b30a:	bf08      	it	eq
 801b30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b310:	f380 8809 	msr	PSP, r0
 801b314:	f3bf 8f6f 	isb	sy
 801b318:	4770      	bx	lr
 801b31a:	bf00      	nop
 801b31c:	f3af 8000 	nop.w

0801b320 <pxCurrentTCBConst>:
 801b320:	20003f00 	.word	0x20003f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b324:	bf00      	nop
 801b326:	bf00      	nop

0801b328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b082      	sub	sp, #8
 801b32c:	af00      	add	r7, sp, #0
	__asm volatile
 801b32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b332:	f383 8811 	msr	BASEPRI, r3
 801b336:	f3bf 8f6f 	isb	sy
 801b33a:	f3bf 8f4f 	dsb	sy
 801b33e:	607b      	str	r3, [r7, #4]
}
 801b340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b342:	f7fe fd03 	bl	8019d4c <xTaskIncrementTick>
 801b346:	4603      	mov	r3, r0
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d003      	beq.n	801b354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b34c:	4b06      	ldr	r3, [pc, #24]	@ (801b368 <SysTick_Handler+0x40>)
 801b34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b352:	601a      	str	r2, [r3, #0]
 801b354:	2300      	movs	r3, #0
 801b356:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	f383 8811 	msr	BASEPRI, r3
}
 801b35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b360:	bf00      	nop
 801b362:	3708      	adds	r7, #8
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}
 801b368:	e000ed04 	.word	0xe000ed04

0801b36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b36c:	b480      	push	{r7}
 801b36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b370:	4b0b      	ldr	r3, [pc, #44]	@ (801b3a0 <vPortSetupTimerInterrupt+0x34>)
 801b372:	2200      	movs	r2, #0
 801b374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b376:	4b0b      	ldr	r3, [pc, #44]	@ (801b3a4 <vPortSetupTimerInterrupt+0x38>)
 801b378:	2200      	movs	r2, #0
 801b37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b37c:	4b0a      	ldr	r3, [pc, #40]	@ (801b3a8 <vPortSetupTimerInterrupt+0x3c>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	4a0a      	ldr	r2, [pc, #40]	@ (801b3ac <vPortSetupTimerInterrupt+0x40>)
 801b382:	fba2 2303 	umull	r2, r3, r2, r3
 801b386:	099b      	lsrs	r3, r3, #6
 801b388:	4a09      	ldr	r2, [pc, #36]	@ (801b3b0 <vPortSetupTimerInterrupt+0x44>)
 801b38a:	3b01      	subs	r3, #1
 801b38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b38e:	4b04      	ldr	r3, [pc, #16]	@ (801b3a0 <vPortSetupTimerInterrupt+0x34>)
 801b390:	2207      	movs	r2, #7
 801b392:	601a      	str	r2, [r3, #0]
}
 801b394:	bf00      	nop
 801b396:	46bd      	mov	sp, r7
 801b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39c:	4770      	bx	lr
 801b39e:	bf00      	nop
 801b3a0:	e000e010 	.word	0xe000e010
 801b3a4:	e000e018 	.word	0xe000e018
 801b3a8:	20000004 	.word	0x20000004
 801b3ac:	10624dd3 	.word	0x10624dd3
 801b3b0:	e000e014 	.word	0xe000e014

0801b3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801b3c4 <vPortEnableVFP+0x10>
 801b3b8:	6801      	ldr	r1, [r0, #0]
 801b3ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801b3be:	6001      	str	r1, [r0, #0]
 801b3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b3c2:	bf00      	nop
 801b3c4:	e000ed88 	.word	0xe000ed88

0801b3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b3c8:	b480      	push	{r7}
 801b3ca:	b085      	sub	sp, #20
 801b3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b3ce:	f3ef 8305 	mrs	r3, IPSR
 801b3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	2b0f      	cmp	r3, #15
 801b3d8:	d915      	bls.n	801b406 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b3da:	4a18      	ldr	r2, [pc, #96]	@ (801b43c <vPortValidateInterruptPriority+0x74>)
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	4413      	add	r3, r2
 801b3e0:	781b      	ldrb	r3, [r3, #0]
 801b3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b3e4:	4b16      	ldr	r3, [pc, #88]	@ (801b440 <vPortValidateInterruptPriority+0x78>)
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	7afa      	ldrb	r2, [r7, #11]
 801b3ea:	429a      	cmp	r2, r3
 801b3ec:	d20b      	bcs.n	801b406 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b3f2:	f383 8811 	msr	BASEPRI, r3
 801b3f6:	f3bf 8f6f 	isb	sy
 801b3fa:	f3bf 8f4f 	dsb	sy
 801b3fe:	607b      	str	r3, [r7, #4]
}
 801b400:	bf00      	nop
 801b402:	bf00      	nop
 801b404:	e7fd      	b.n	801b402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b406:	4b0f      	ldr	r3, [pc, #60]	@ (801b444 <vPortValidateInterruptPriority+0x7c>)
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801b40e:	4b0e      	ldr	r3, [pc, #56]	@ (801b448 <vPortValidateInterruptPriority+0x80>)
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	429a      	cmp	r2, r3
 801b414:	d90b      	bls.n	801b42e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801b416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b41a:	f383 8811 	msr	BASEPRI, r3
 801b41e:	f3bf 8f6f 	isb	sy
 801b422:	f3bf 8f4f 	dsb	sy
 801b426:	603b      	str	r3, [r7, #0]
}
 801b428:	bf00      	nop
 801b42a:	bf00      	nop
 801b42c:	e7fd      	b.n	801b42a <vPortValidateInterruptPriority+0x62>
	}
 801b42e:	bf00      	nop
 801b430:	3714      	adds	r7, #20
 801b432:	46bd      	mov	sp, r7
 801b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b438:	4770      	bx	lr
 801b43a:	bf00      	nop
 801b43c:	e000e3f0 	.word	0xe000e3f0
 801b440:	20004200 	.word	0x20004200
 801b444:	e000ed0c 	.word	0xe000ed0c
 801b448:	20004204 	.word	0x20004204

0801b44c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b08a      	sub	sp, #40	@ 0x28
 801b450:	af00      	add	r7, sp, #0
 801b452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b454:	2300      	movs	r3, #0
 801b456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b458:	f7fe fbbc 	bl	8019bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b45c:	4b5c      	ldr	r3, [pc, #368]	@ (801b5d0 <pvPortMalloc+0x184>)
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d101      	bne.n	801b468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b464:	f000 f924 	bl	801b6b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b468:	4b5a      	ldr	r3, [pc, #360]	@ (801b5d4 <pvPortMalloc+0x188>)
 801b46a:	681a      	ldr	r2, [r3, #0]
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	4013      	ands	r3, r2
 801b470:	2b00      	cmp	r3, #0
 801b472:	f040 8095 	bne.w	801b5a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d01e      	beq.n	801b4ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801b47c:	2208      	movs	r2, #8
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	4413      	add	r3, r2
 801b482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	f003 0307 	and.w	r3, r3, #7
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d015      	beq.n	801b4ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	f023 0307 	bic.w	r3, r3, #7
 801b494:	3308      	adds	r3, #8
 801b496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	f003 0307 	and.w	r3, r3, #7
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d00b      	beq.n	801b4ba <pvPortMalloc+0x6e>
	__asm volatile
 801b4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b4a6:	f383 8811 	msr	BASEPRI, r3
 801b4aa:	f3bf 8f6f 	isb	sy
 801b4ae:	f3bf 8f4f 	dsb	sy
 801b4b2:	617b      	str	r3, [r7, #20]
}
 801b4b4:	bf00      	nop
 801b4b6:	bf00      	nop
 801b4b8:	e7fd      	b.n	801b4b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d06f      	beq.n	801b5a0 <pvPortMalloc+0x154>
 801b4c0:	4b45      	ldr	r3, [pc, #276]	@ (801b5d8 <pvPortMalloc+0x18c>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	429a      	cmp	r2, r3
 801b4c8:	d86a      	bhi.n	801b5a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b4ca:	4b44      	ldr	r3, [pc, #272]	@ (801b5dc <pvPortMalloc+0x190>)
 801b4cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b4ce:	4b43      	ldr	r3, [pc, #268]	@ (801b5dc <pvPortMalloc+0x190>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4d4:	e004      	b.n	801b4e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4e2:	685b      	ldr	r3, [r3, #4]
 801b4e4:	687a      	ldr	r2, [r7, #4]
 801b4e6:	429a      	cmp	r2, r3
 801b4e8:	d903      	bls.n	801b4f2 <pvPortMalloc+0xa6>
 801b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d1f1      	bne.n	801b4d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b4f2:	4b37      	ldr	r3, [pc, #220]	@ (801b5d0 <pvPortMalloc+0x184>)
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b4f8:	429a      	cmp	r2, r3
 801b4fa:	d051      	beq.n	801b5a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b4fc:	6a3b      	ldr	r3, [r7, #32]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	2208      	movs	r2, #8
 801b502:	4413      	add	r3, r2
 801b504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b508:	681a      	ldr	r2, [r3, #0]
 801b50a:	6a3b      	ldr	r3, [r7, #32]
 801b50c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b510:	685a      	ldr	r2, [r3, #4]
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	1ad2      	subs	r2, r2, r3
 801b516:	2308      	movs	r3, #8
 801b518:	005b      	lsls	r3, r3, #1
 801b51a:	429a      	cmp	r2, r3
 801b51c:	d920      	bls.n	801b560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	4413      	add	r3, r2
 801b524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b526:	69bb      	ldr	r3, [r7, #24]
 801b528:	f003 0307 	and.w	r3, r3, #7
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d00b      	beq.n	801b548 <pvPortMalloc+0xfc>
	__asm volatile
 801b530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b534:	f383 8811 	msr	BASEPRI, r3
 801b538:	f3bf 8f6f 	isb	sy
 801b53c:	f3bf 8f4f 	dsb	sy
 801b540:	613b      	str	r3, [r7, #16]
}
 801b542:	bf00      	nop
 801b544:	bf00      	nop
 801b546:	e7fd      	b.n	801b544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b54a:	685a      	ldr	r2, [r3, #4]
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	1ad2      	subs	r2, r2, r3
 801b550:	69bb      	ldr	r3, [r7, #24]
 801b552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b556:	687a      	ldr	r2, [r7, #4]
 801b558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b55a:	69b8      	ldr	r0, [r7, #24]
 801b55c:	f000 f90a 	bl	801b774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b560:	4b1d      	ldr	r3, [pc, #116]	@ (801b5d8 <pvPortMalloc+0x18c>)
 801b562:	681a      	ldr	r2, [r3, #0]
 801b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b566:	685b      	ldr	r3, [r3, #4]
 801b568:	1ad3      	subs	r3, r2, r3
 801b56a:	4a1b      	ldr	r2, [pc, #108]	@ (801b5d8 <pvPortMalloc+0x18c>)
 801b56c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b56e:	4b1a      	ldr	r3, [pc, #104]	@ (801b5d8 <pvPortMalloc+0x18c>)
 801b570:	681a      	ldr	r2, [r3, #0]
 801b572:	4b1b      	ldr	r3, [pc, #108]	@ (801b5e0 <pvPortMalloc+0x194>)
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	429a      	cmp	r2, r3
 801b578:	d203      	bcs.n	801b582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b57a:	4b17      	ldr	r3, [pc, #92]	@ (801b5d8 <pvPortMalloc+0x18c>)
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	4a18      	ldr	r2, [pc, #96]	@ (801b5e0 <pvPortMalloc+0x194>)
 801b580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b584:	685a      	ldr	r2, [r3, #4]
 801b586:	4b13      	ldr	r3, [pc, #76]	@ (801b5d4 <pvPortMalloc+0x188>)
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	431a      	orrs	r2, r3
 801b58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b58e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b592:	2200      	movs	r2, #0
 801b594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b596:	4b13      	ldr	r3, [pc, #76]	@ (801b5e4 <pvPortMalloc+0x198>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	3301      	adds	r3, #1
 801b59c:	4a11      	ldr	r2, [pc, #68]	@ (801b5e4 <pvPortMalloc+0x198>)
 801b59e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b5a0:	f7fe fb26 	bl	8019bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b5a4:	69fb      	ldr	r3, [r7, #28]
 801b5a6:	f003 0307 	and.w	r3, r3, #7
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d00b      	beq.n	801b5c6 <pvPortMalloc+0x17a>
	__asm volatile
 801b5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b5b2:	f383 8811 	msr	BASEPRI, r3
 801b5b6:	f3bf 8f6f 	isb	sy
 801b5ba:	f3bf 8f4f 	dsb	sy
 801b5be:	60fb      	str	r3, [r7, #12]
}
 801b5c0:	bf00      	nop
 801b5c2:	bf00      	nop
 801b5c4:	e7fd      	b.n	801b5c2 <pvPortMalloc+0x176>
	return pvReturn;
 801b5c6:	69fb      	ldr	r3, [r7, #28]
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3728      	adds	r7, #40	@ 0x28
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}
 801b5d0:	2000b740 	.word	0x2000b740
 801b5d4:	2000b754 	.word	0x2000b754
 801b5d8:	2000b744 	.word	0x2000b744
 801b5dc:	2000b738 	.word	0x2000b738
 801b5e0:	2000b748 	.word	0x2000b748
 801b5e4:	2000b74c 	.word	0x2000b74c

0801b5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b086      	sub	sp, #24
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d04f      	beq.n	801b69a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b5fa:	2308      	movs	r3, #8
 801b5fc:	425b      	negs	r3, r3
 801b5fe:	697a      	ldr	r2, [r7, #20]
 801b600:	4413      	add	r3, r2
 801b602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	685a      	ldr	r2, [r3, #4]
 801b60c:	4b25      	ldr	r3, [pc, #148]	@ (801b6a4 <vPortFree+0xbc>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	4013      	ands	r3, r2
 801b612:	2b00      	cmp	r3, #0
 801b614:	d10b      	bne.n	801b62e <vPortFree+0x46>
	__asm volatile
 801b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b61a:	f383 8811 	msr	BASEPRI, r3
 801b61e:	f3bf 8f6f 	isb	sy
 801b622:	f3bf 8f4f 	dsb	sy
 801b626:	60fb      	str	r3, [r7, #12]
}
 801b628:	bf00      	nop
 801b62a:	bf00      	nop
 801b62c:	e7fd      	b.n	801b62a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b62e:	693b      	ldr	r3, [r7, #16]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d00b      	beq.n	801b64e <vPortFree+0x66>
	__asm volatile
 801b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b63a:	f383 8811 	msr	BASEPRI, r3
 801b63e:	f3bf 8f6f 	isb	sy
 801b642:	f3bf 8f4f 	dsb	sy
 801b646:	60bb      	str	r3, [r7, #8]
}
 801b648:	bf00      	nop
 801b64a:	bf00      	nop
 801b64c:	e7fd      	b.n	801b64a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	685a      	ldr	r2, [r3, #4]
 801b652:	4b14      	ldr	r3, [pc, #80]	@ (801b6a4 <vPortFree+0xbc>)
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	4013      	ands	r3, r2
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d01e      	beq.n	801b69a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b65c:	693b      	ldr	r3, [r7, #16]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d11a      	bne.n	801b69a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b664:	693b      	ldr	r3, [r7, #16]
 801b666:	685a      	ldr	r2, [r3, #4]
 801b668:	4b0e      	ldr	r3, [pc, #56]	@ (801b6a4 <vPortFree+0xbc>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	43db      	mvns	r3, r3
 801b66e:	401a      	ands	r2, r3
 801b670:	693b      	ldr	r3, [r7, #16]
 801b672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b674:	f7fe faae 	bl	8019bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b678:	693b      	ldr	r3, [r7, #16]
 801b67a:	685a      	ldr	r2, [r3, #4]
 801b67c:	4b0a      	ldr	r3, [pc, #40]	@ (801b6a8 <vPortFree+0xc0>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	4413      	add	r3, r2
 801b682:	4a09      	ldr	r2, [pc, #36]	@ (801b6a8 <vPortFree+0xc0>)
 801b684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b686:	6938      	ldr	r0, [r7, #16]
 801b688:	f000 f874 	bl	801b774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b68c:	4b07      	ldr	r3, [pc, #28]	@ (801b6ac <vPortFree+0xc4>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	3301      	adds	r3, #1
 801b692:	4a06      	ldr	r2, [pc, #24]	@ (801b6ac <vPortFree+0xc4>)
 801b694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b696:	f7fe faab 	bl	8019bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b69a:	bf00      	nop
 801b69c:	3718      	adds	r7, #24
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}
 801b6a2:	bf00      	nop
 801b6a4:	2000b754 	.word	0x2000b754
 801b6a8:	2000b744 	.word	0x2000b744
 801b6ac:	2000b750 	.word	0x2000b750

0801b6b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b6b0:	b480      	push	{r7}
 801b6b2:	b085      	sub	sp, #20
 801b6b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b6b6:	f247 5330 	movw	r3, #30000	@ 0x7530
 801b6ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b6bc:	4b27      	ldr	r3, [pc, #156]	@ (801b75c <prvHeapInit+0xac>)
 801b6be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	f003 0307 	and.w	r3, r3, #7
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d00c      	beq.n	801b6e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	3307      	adds	r3, #7
 801b6ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	f023 0307 	bic.w	r3, r3, #7
 801b6d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b6d8:	68ba      	ldr	r2, [r7, #8]
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	1ad3      	subs	r3, r2, r3
 801b6de:	4a1f      	ldr	r2, [pc, #124]	@ (801b75c <prvHeapInit+0xac>)
 801b6e0:	4413      	add	r3, r2
 801b6e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b6e8:	4a1d      	ldr	r2, [pc, #116]	@ (801b760 <prvHeapInit+0xb0>)
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b6ee:	4b1c      	ldr	r3, [pc, #112]	@ (801b760 <prvHeapInit+0xb0>)
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	68ba      	ldr	r2, [r7, #8]
 801b6f8:	4413      	add	r3, r2
 801b6fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b6fc:	2208      	movs	r2, #8
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	1a9b      	subs	r3, r3, r2
 801b702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	f023 0307 	bic.w	r3, r3, #7
 801b70a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	4a15      	ldr	r2, [pc, #84]	@ (801b764 <prvHeapInit+0xb4>)
 801b710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b712:	4b14      	ldr	r3, [pc, #80]	@ (801b764 <prvHeapInit+0xb4>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	2200      	movs	r2, #0
 801b718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b71a:	4b12      	ldr	r3, [pc, #72]	@ (801b764 <prvHeapInit+0xb4>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	2200      	movs	r2, #0
 801b720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	68fa      	ldr	r2, [r7, #12]
 801b72a:	1ad2      	subs	r2, r2, r3
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b730:	4b0c      	ldr	r3, [pc, #48]	@ (801b764 <prvHeapInit+0xb4>)
 801b732:	681a      	ldr	r2, [r3, #0]
 801b734:	683b      	ldr	r3, [r7, #0]
 801b736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b738:	683b      	ldr	r3, [r7, #0]
 801b73a:	685b      	ldr	r3, [r3, #4]
 801b73c:	4a0a      	ldr	r2, [pc, #40]	@ (801b768 <prvHeapInit+0xb8>)
 801b73e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b740:	683b      	ldr	r3, [r7, #0]
 801b742:	685b      	ldr	r3, [r3, #4]
 801b744:	4a09      	ldr	r2, [pc, #36]	@ (801b76c <prvHeapInit+0xbc>)
 801b746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b748:	4b09      	ldr	r3, [pc, #36]	@ (801b770 <prvHeapInit+0xc0>)
 801b74a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801b74e:	601a      	str	r2, [r3, #0]
}
 801b750:	bf00      	nop
 801b752:	3714      	adds	r7, #20
 801b754:	46bd      	mov	sp, r7
 801b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75a:	4770      	bx	lr
 801b75c:	20004208 	.word	0x20004208
 801b760:	2000b738 	.word	0x2000b738
 801b764:	2000b740 	.word	0x2000b740
 801b768:	2000b748 	.word	0x2000b748
 801b76c:	2000b744 	.word	0x2000b744
 801b770:	2000b754 	.word	0x2000b754

0801b774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b774:	b480      	push	{r7}
 801b776:	b085      	sub	sp, #20
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b77c:	4b28      	ldr	r3, [pc, #160]	@ (801b820 <prvInsertBlockIntoFreeList+0xac>)
 801b77e:	60fb      	str	r3, [r7, #12]
 801b780:	e002      	b.n	801b788 <prvInsertBlockIntoFreeList+0x14>
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	60fb      	str	r3, [r7, #12]
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	687a      	ldr	r2, [r7, #4]
 801b78e:	429a      	cmp	r2, r3
 801b790:	d8f7      	bhi.n	801b782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	685b      	ldr	r3, [r3, #4]
 801b79a:	68ba      	ldr	r2, [r7, #8]
 801b79c:	4413      	add	r3, r2
 801b79e:	687a      	ldr	r2, [r7, #4]
 801b7a0:	429a      	cmp	r2, r3
 801b7a2:	d108      	bne.n	801b7b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	685a      	ldr	r2, [r3, #4]
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	685b      	ldr	r3, [r3, #4]
 801b7ac:	441a      	add	r2, r3
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	685b      	ldr	r3, [r3, #4]
 801b7be:	68ba      	ldr	r2, [r7, #8]
 801b7c0:	441a      	add	r2, r3
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	429a      	cmp	r2, r3
 801b7c8:	d118      	bne.n	801b7fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	681a      	ldr	r2, [r3, #0]
 801b7ce:	4b15      	ldr	r3, [pc, #84]	@ (801b824 <prvInsertBlockIntoFreeList+0xb0>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d00d      	beq.n	801b7f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	685a      	ldr	r2, [r3, #4]
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	685b      	ldr	r3, [r3, #4]
 801b7e0:	441a      	add	r2, r3
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	681a      	ldr	r2, [r3, #0]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	601a      	str	r2, [r3, #0]
 801b7f0:	e008      	b.n	801b804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b7f2:	4b0c      	ldr	r3, [pc, #48]	@ (801b824 <prvInsertBlockIntoFreeList+0xb0>)
 801b7f4:	681a      	ldr	r2, [r3, #0]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	601a      	str	r2, [r3, #0]
 801b7fa:	e003      	b.n	801b804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	681a      	ldr	r2, [r3, #0]
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b804:	68fa      	ldr	r2, [r7, #12]
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	429a      	cmp	r2, r3
 801b80a:	d002      	beq.n	801b812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	687a      	ldr	r2, [r7, #4]
 801b810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b812:	bf00      	nop
 801b814:	3714      	adds	r7, #20
 801b816:	46bd      	mov	sp, r7
 801b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b81c:	4770      	bx	lr
 801b81e:	bf00      	nop
 801b820:	2000b738 	.word	0x2000b738
 801b824:	2000b740 	.word	0x2000b740

0801b828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b82c:	2200      	movs	r2, #0
 801b82e:	4912      	ldr	r1, [pc, #72]	@ (801b878 <MX_USB_DEVICE_Init+0x50>)
 801b830:	4812      	ldr	r0, [pc, #72]	@ (801b87c <MX_USB_DEVICE_Init+0x54>)
 801b832:	f7fb fc0d 	bl	8017050 <USBD_Init>
 801b836:	4603      	mov	r3, r0
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d001      	beq.n	801b840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b83c:	f7e7 ffdc 	bl	80037f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b840:	490f      	ldr	r1, [pc, #60]	@ (801b880 <MX_USB_DEVICE_Init+0x58>)
 801b842:	480e      	ldr	r0, [pc, #56]	@ (801b87c <MX_USB_DEVICE_Init+0x54>)
 801b844:	f7fb fc34 	bl	80170b0 <USBD_RegisterClass>
 801b848:	4603      	mov	r3, r0
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d001      	beq.n	801b852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b84e:	f7e7 ffd3 	bl	80037f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b852:	490c      	ldr	r1, [pc, #48]	@ (801b884 <MX_USB_DEVICE_Init+0x5c>)
 801b854:	4809      	ldr	r0, [pc, #36]	@ (801b87c <MX_USB_DEVICE_Init+0x54>)
 801b856:	f7fb fb6b 	bl	8016f30 <USBD_CDC_RegisterInterface>
 801b85a:	4603      	mov	r3, r0
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d001      	beq.n	801b864 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b860:	f7e7 ffca 	bl	80037f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b864:	4805      	ldr	r0, [pc, #20]	@ (801b87c <MX_USB_DEVICE_Init+0x54>)
 801b866:	f7fb fc59 	bl	801711c <USBD_Start>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d001      	beq.n	801b874 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b870:	f7e7 ffc2 	bl	80037f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b874:	bf00      	nop
 801b876:	bd80      	pop	{r7, pc}
 801b878:	200000f4 	.word	0x200000f4
 801b87c:	2000b758 	.word	0x2000b758
 801b880:	2000005c 	.word	0x2000005c
 801b884:	200000e0 	.word	0x200000e0

0801b888 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b88c:	2200      	movs	r2, #0
 801b88e:	4905      	ldr	r1, [pc, #20]	@ (801b8a4 <CDC_Init_FS+0x1c>)
 801b890:	4805      	ldr	r0, [pc, #20]	@ (801b8a8 <CDC_Init_FS+0x20>)
 801b892:	f7fb fb67 	bl	8016f64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b896:	4905      	ldr	r1, [pc, #20]	@ (801b8ac <CDC_Init_FS+0x24>)
 801b898:	4803      	ldr	r0, [pc, #12]	@ (801b8a8 <CDC_Init_FS+0x20>)
 801b89a:	f7fb fb85 	bl	8016fa8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b89e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	bd80      	pop	{r7, pc}
 801b8a4:	2000c23c 	.word	0x2000c23c
 801b8a8:	2000b758 	.word	0x2000b758
 801b8ac:	2000ba3c 	.word	0x2000ba3c

0801b8b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b8b0:	b480      	push	{r7}
 801b8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b8b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8be:	4770      	bx	lr

0801b8c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b083      	sub	sp, #12
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	4603      	mov	r3, r0
 801b8c8:	6039      	str	r1, [r7, #0]
 801b8ca:	71fb      	strb	r3, [r7, #7]
 801b8cc:	4613      	mov	r3, r2
 801b8ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b8d0:	79fb      	ldrb	r3, [r7, #7]
 801b8d2:	2b23      	cmp	r3, #35	@ 0x23
 801b8d4:	f200 808c 	bhi.w	801b9f0 <CDC_Control_FS+0x130>
 801b8d8:	a201      	add	r2, pc, #4	@ (adr r2, 801b8e0 <CDC_Control_FS+0x20>)
 801b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8de:	bf00      	nop
 801b8e0:	0801b9f1 	.word	0x0801b9f1
 801b8e4:	0801b9f1 	.word	0x0801b9f1
 801b8e8:	0801b9f1 	.word	0x0801b9f1
 801b8ec:	0801b9f1 	.word	0x0801b9f1
 801b8f0:	0801b9f1 	.word	0x0801b9f1
 801b8f4:	0801b9f1 	.word	0x0801b9f1
 801b8f8:	0801b9f1 	.word	0x0801b9f1
 801b8fc:	0801b9f1 	.word	0x0801b9f1
 801b900:	0801b9f1 	.word	0x0801b9f1
 801b904:	0801b9f1 	.word	0x0801b9f1
 801b908:	0801b9f1 	.word	0x0801b9f1
 801b90c:	0801b9f1 	.word	0x0801b9f1
 801b910:	0801b9f1 	.word	0x0801b9f1
 801b914:	0801b9f1 	.word	0x0801b9f1
 801b918:	0801b9f1 	.word	0x0801b9f1
 801b91c:	0801b9f1 	.word	0x0801b9f1
 801b920:	0801b9f1 	.word	0x0801b9f1
 801b924:	0801b9f1 	.word	0x0801b9f1
 801b928:	0801b9f1 	.word	0x0801b9f1
 801b92c:	0801b9f1 	.word	0x0801b9f1
 801b930:	0801b9f1 	.word	0x0801b9f1
 801b934:	0801b9f1 	.word	0x0801b9f1
 801b938:	0801b9f1 	.word	0x0801b9f1
 801b93c:	0801b9f1 	.word	0x0801b9f1
 801b940:	0801b9f1 	.word	0x0801b9f1
 801b944:	0801b9f1 	.word	0x0801b9f1
 801b948:	0801b9f1 	.word	0x0801b9f1
 801b94c:	0801b9f1 	.word	0x0801b9f1
 801b950:	0801b9f1 	.word	0x0801b9f1
 801b954:	0801b9f1 	.word	0x0801b9f1
 801b958:	0801b9f1 	.word	0x0801b9f1
 801b95c:	0801b9f1 	.word	0x0801b9f1
 801b960:	0801b971 	.word	0x0801b971
 801b964:	0801b9ab 	.word	0x0801b9ab
 801b968:	0801b9f1 	.word	0x0801b9f1
 801b96c:	0801b9f1 	.word	0x0801b9f1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 801b970:	683b      	ldr	r3, [r7, #0]
 801b972:	781a      	ldrb	r2, [r3, #0]
 801b974:	4b22      	ldr	r3, [pc, #136]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b976:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 801b978:	683b      	ldr	r3, [r7, #0]
 801b97a:	785a      	ldrb	r2, [r3, #1]
 801b97c:	4b20      	ldr	r3, [pc, #128]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b97e:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	789a      	ldrb	r2, [r3, #2]
 801b984:	4b1e      	ldr	r3, [pc, #120]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b986:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	78da      	ldrb	r2, [r3, #3]
 801b98c:	4b1c      	ldr	r3, [pc, #112]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b98e:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 801b990:	683b      	ldr	r3, [r7, #0]
 801b992:	791a      	ldrb	r2, [r3, #4]
 801b994:	4b1a      	ldr	r3, [pc, #104]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b996:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 801b998:	683b      	ldr	r3, [r7, #0]
 801b99a:	795a      	ldrb	r2, [r3, #5]
 801b99c:	4b18      	ldr	r3, [pc, #96]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b99e:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 801b9a0:	683b      	ldr	r3, [r7, #0]
 801b9a2:	799a      	ldrb	r2, [r3, #6]
 801b9a4:	4b16      	ldr	r3, [pc, #88]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9a6:	719a      	strb	r2, [r3, #6]
      break;
 801b9a8:	e023      	b.n	801b9f2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801b9aa:	4b15      	ldr	r3, [pc, #84]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9ac:	781a      	ldrb	r2, [r3, #0]
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801b9b2:	683b      	ldr	r3, [r7, #0]
 801b9b4:	3301      	adds	r3, #1
 801b9b6:	4a12      	ldr	r2, [pc, #72]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9b8:	7852      	ldrb	r2, [r2, #1]
 801b9ba:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	3302      	adds	r3, #2
 801b9c0:	4a0f      	ldr	r2, [pc, #60]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9c2:	7892      	ldrb	r2, [r2, #2]
 801b9c4:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801b9c6:	683b      	ldr	r3, [r7, #0]
 801b9c8:	3303      	adds	r3, #3
 801b9ca:	4a0d      	ldr	r2, [pc, #52]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9cc:	78d2      	ldrb	r2, [r2, #3]
 801b9ce:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 801b9d0:	683b      	ldr	r3, [r7, #0]
 801b9d2:	3304      	adds	r3, #4
 801b9d4:	4a0a      	ldr	r2, [pc, #40]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9d6:	7912      	ldrb	r2, [r2, #4]
 801b9d8:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801b9da:	683b      	ldr	r3, [r7, #0]
 801b9dc:	3305      	adds	r3, #5
 801b9de:	4a08      	ldr	r2, [pc, #32]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9e0:	7952      	ldrb	r2, [r2, #5]
 801b9e2:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	3306      	adds	r3, #6
 801b9e8:	4a05      	ldr	r2, [pc, #20]	@ (801ba00 <CDC_Control_FS+0x140>)
 801b9ea:	7992      	ldrb	r2, [r2, #6]
 801b9ec:	701a      	strb	r2, [r3, #0]
      break;
 801b9ee:	e000      	b.n	801b9f2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b9f0:	bf00      	nop
  }

  return (USBD_OK);
 801b9f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	370c      	adds	r7, #12
 801b9f8:	46bd      	mov	sp, r7
 801b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fe:	4770      	bx	lr
 801ba00:	2000ba34 	.word	0x2000ba34

0801ba04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b082      	sub	sp, #8
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
 801ba0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ba0e:	6879      	ldr	r1, [r7, #4]
 801ba10:	4807      	ldr	r0, [pc, #28]	@ (801ba30 <CDC_Receive_FS+0x2c>)
 801ba12:	f7fb fac9 	bl	8016fa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ba16:	4806      	ldr	r0, [pc, #24]	@ (801ba30 <CDC_Receive_FS+0x2c>)
 801ba18:	f7fb fae4 	bl	8016fe4 <USBD_CDC_ReceivePacket>
  usb_vcp_processing(Buf, Len);
 801ba1c:	6839      	ldr	r1, [r7, #0]
 801ba1e:	6878      	ldr	r0, [r7, #4]
 801ba20:	f7f0 fdc6 	bl	800c5b0 <usb_vcp_processing>
  return (USBD_OK);
 801ba24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ba26:	4618      	mov	r0, r3
 801ba28:	3708      	adds	r7, #8
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	bd80      	pop	{r7, pc}
 801ba2e:	bf00      	nop
 801ba30:	2000b758 	.word	0x2000b758

0801ba34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801ba34:	b480      	push	{r7}
 801ba36:	b087      	sub	sp, #28
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	60f8      	str	r0, [r7, #12]
 801ba3c:	60b9      	str	r1, [r7, #8]
 801ba3e:	4613      	mov	r3, r2
 801ba40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801ba42:	2300      	movs	r3, #0
 801ba44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801ba46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	371c      	adds	r7, #28
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba54:	4770      	bx	lr
	...

0801ba58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba58:	b480      	push	{r7}
 801ba5a:	b083      	sub	sp, #12
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	4603      	mov	r3, r0
 801ba60:	6039      	str	r1, [r7, #0]
 801ba62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	2212      	movs	r2, #18
 801ba68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ba6a:	4b03      	ldr	r3, [pc, #12]	@ (801ba78 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	370c      	adds	r7, #12
 801ba70:	46bd      	mov	sp, r7
 801ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba76:	4770      	bx	lr
 801ba78:	20000110 	.word	0x20000110

0801ba7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba7c:	b480      	push	{r7}
 801ba7e:	b083      	sub	sp, #12
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	4603      	mov	r3, r0
 801ba84:	6039      	str	r1, [r7, #0]
 801ba86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ba88:	683b      	ldr	r3, [r7, #0]
 801ba8a:	2204      	movs	r2, #4
 801ba8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ba8e:	4b03      	ldr	r3, [pc, #12]	@ (801ba9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ba90:	4618      	mov	r0, r3
 801ba92:	370c      	adds	r7, #12
 801ba94:	46bd      	mov	sp, r7
 801ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba9a:	4770      	bx	lr
 801ba9c:	20000124 	.word	0x20000124

0801baa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b082      	sub	sp, #8
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	4603      	mov	r3, r0
 801baa8:	6039      	str	r1, [r7, #0]
 801baaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801baac:	79fb      	ldrb	r3, [r7, #7]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d105      	bne.n	801babe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bab2:	683a      	ldr	r2, [r7, #0]
 801bab4:	4907      	ldr	r1, [pc, #28]	@ (801bad4 <USBD_FS_ProductStrDescriptor+0x34>)
 801bab6:	4808      	ldr	r0, [pc, #32]	@ (801bad8 <USBD_FS_ProductStrDescriptor+0x38>)
 801bab8:	f7fc fcda 	bl	8018470 <USBD_GetString>
 801babc:	e004      	b.n	801bac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801babe:	683a      	ldr	r2, [r7, #0]
 801bac0:	4904      	ldr	r1, [pc, #16]	@ (801bad4 <USBD_FS_ProductStrDescriptor+0x34>)
 801bac2:	4805      	ldr	r0, [pc, #20]	@ (801bad8 <USBD_FS_ProductStrDescriptor+0x38>)
 801bac4:	f7fc fcd4 	bl	8018470 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bac8:	4b02      	ldr	r3, [pc, #8]	@ (801bad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801baca:	4618      	mov	r0, r3
 801bacc:	3708      	adds	r7, #8
 801bace:	46bd      	mov	sp, r7
 801bad0:	bd80      	pop	{r7, pc}
 801bad2:	bf00      	nop
 801bad4:	2000ca3c 	.word	0x2000ca3c
 801bad8:	080232b8 	.word	0x080232b8

0801badc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	4603      	mov	r3, r0
 801bae4:	6039      	str	r1, [r7, #0]
 801bae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801bae8:	683a      	ldr	r2, [r7, #0]
 801baea:	4904      	ldr	r1, [pc, #16]	@ (801bafc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801baec:	4804      	ldr	r0, [pc, #16]	@ (801bb00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801baee:	f7fc fcbf 	bl	8018470 <USBD_GetString>
  return USBD_StrDesc;
 801baf2:	4b02      	ldr	r3, [pc, #8]	@ (801bafc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	3708      	adds	r7, #8
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	2000ca3c 	.word	0x2000ca3c
 801bb00:	080232d0 	.word	0x080232d0

0801bb04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b082      	sub	sp, #8
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	6039      	str	r1, [r7, #0]
 801bb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801bb10:	683b      	ldr	r3, [r7, #0]
 801bb12:	221a      	movs	r2, #26
 801bb14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801bb16:	f000 f843 	bl	801bba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801bb1a:	4b02      	ldr	r3, [pc, #8]	@ (801bb24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801bb1c:	4618      	mov	r0, r3
 801bb1e:	3708      	adds	r7, #8
 801bb20:	46bd      	mov	sp, r7
 801bb22:	bd80      	pop	{r7, pc}
 801bb24:	20000128 	.word	0x20000128

0801bb28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b082      	sub	sp, #8
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	4603      	mov	r3, r0
 801bb30:	6039      	str	r1, [r7, #0]
 801bb32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801bb34:	79fb      	ldrb	r3, [r7, #7]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d105      	bne.n	801bb46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bb3a:	683a      	ldr	r2, [r7, #0]
 801bb3c:	4907      	ldr	r1, [pc, #28]	@ (801bb5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801bb3e:	4808      	ldr	r0, [pc, #32]	@ (801bb60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801bb40:	f7fc fc96 	bl	8018470 <USBD_GetString>
 801bb44:	e004      	b.n	801bb50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bb46:	683a      	ldr	r2, [r7, #0]
 801bb48:	4904      	ldr	r1, [pc, #16]	@ (801bb5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801bb4a:	4805      	ldr	r0, [pc, #20]	@ (801bb60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801bb4c:	f7fc fc90 	bl	8018470 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bb50:	4b02      	ldr	r3, [pc, #8]	@ (801bb5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801bb52:	4618      	mov	r0, r3
 801bb54:	3708      	adds	r7, #8
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd80      	pop	{r7, pc}
 801bb5a:	bf00      	nop
 801bb5c:	2000ca3c 	.word	0x2000ca3c
 801bb60:	080232e4 	.word	0x080232e4

0801bb64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b082      	sub	sp, #8
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	6039      	str	r1, [r7, #0]
 801bb6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801bb70:	79fb      	ldrb	r3, [r7, #7]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d105      	bne.n	801bb82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bb76:	683a      	ldr	r2, [r7, #0]
 801bb78:	4907      	ldr	r1, [pc, #28]	@ (801bb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bb7a:	4808      	ldr	r0, [pc, #32]	@ (801bb9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bb7c:	f7fc fc78 	bl	8018470 <USBD_GetString>
 801bb80:	e004      	b.n	801bb8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bb82:	683a      	ldr	r2, [r7, #0]
 801bb84:	4904      	ldr	r1, [pc, #16]	@ (801bb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bb86:	4805      	ldr	r0, [pc, #20]	@ (801bb9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bb88:	f7fc fc72 	bl	8018470 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bb8c:	4b02      	ldr	r3, [pc, #8]	@ (801bb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801bb8e:	4618      	mov	r0, r3
 801bb90:	3708      	adds	r7, #8
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	bf00      	nop
 801bb98:	2000ca3c 	.word	0x2000ca3c
 801bb9c:	080232f0 	.word	0x080232f0

0801bba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b084      	sub	sp, #16
 801bba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801bba6:	4b0f      	ldr	r3, [pc, #60]	@ (801bbe4 <Get_SerialNum+0x44>)
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801bbac:	4b0e      	ldr	r3, [pc, #56]	@ (801bbe8 <Get_SerialNum+0x48>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801bbb2:	4b0e      	ldr	r3, [pc, #56]	@ (801bbec <Get_SerialNum+0x4c>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801bbb8:	68fa      	ldr	r2, [r7, #12]
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d009      	beq.n	801bbda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bbc6:	2208      	movs	r2, #8
 801bbc8:	4909      	ldr	r1, [pc, #36]	@ (801bbf0 <Get_SerialNum+0x50>)
 801bbca:	68f8      	ldr	r0, [r7, #12]
 801bbcc:	f000 f814 	bl	801bbf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801bbd0:	2204      	movs	r2, #4
 801bbd2:	4908      	ldr	r1, [pc, #32]	@ (801bbf4 <Get_SerialNum+0x54>)
 801bbd4:	68b8      	ldr	r0, [r7, #8]
 801bbd6:	f000 f80f 	bl	801bbf8 <IntToUnicode>
  }
}
 801bbda:	bf00      	nop
 801bbdc:	3710      	adds	r7, #16
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	bd80      	pop	{r7, pc}
 801bbe2:	bf00      	nop
 801bbe4:	1fff7a10 	.word	0x1fff7a10
 801bbe8:	1fff7a14 	.word	0x1fff7a14
 801bbec:	1fff7a18 	.word	0x1fff7a18
 801bbf0:	2000012a 	.word	0x2000012a
 801bbf4:	2000013a 	.word	0x2000013a

0801bbf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801bbf8:	b480      	push	{r7}
 801bbfa:	b087      	sub	sp, #28
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	4613      	mov	r3, r2
 801bc04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801bc06:	2300      	movs	r3, #0
 801bc08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	75fb      	strb	r3, [r7, #23]
 801bc0e:	e027      	b.n	801bc60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	0f1b      	lsrs	r3, r3, #28
 801bc14:	2b09      	cmp	r3, #9
 801bc16:	d80b      	bhi.n	801bc30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	0f1b      	lsrs	r3, r3, #28
 801bc1c:	b2da      	uxtb	r2, r3
 801bc1e:	7dfb      	ldrb	r3, [r7, #23]
 801bc20:	005b      	lsls	r3, r3, #1
 801bc22:	4619      	mov	r1, r3
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	440b      	add	r3, r1
 801bc28:	3230      	adds	r2, #48	@ 0x30
 801bc2a:	b2d2      	uxtb	r2, r2
 801bc2c:	701a      	strb	r2, [r3, #0]
 801bc2e:	e00a      	b.n	801bc46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	0f1b      	lsrs	r3, r3, #28
 801bc34:	b2da      	uxtb	r2, r3
 801bc36:	7dfb      	ldrb	r3, [r7, #23]
 801bc38:	005b      	lsls	r3, r3, #1
 801bc3a:	4619      	mov	r1, r3
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	440b      	add	r3, r1
 801bc40:	3237      	adds	r2, #55	@ 0x37
 801bc42:	b2d2      	uxtb	r2, r2
 801bc44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	011b      	lsls	r3, r3, #4
 801bc4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801bc4c:	7dfb      	ldrb	r3, [r7, #23]
 801bc4e:	005b      	lsls	r3, r3, #1
 801bc50:	3301      	adds	r3, #1
 801bc52:	68ba      	ldr	r2, [r7, #8]
 801bc54:	4413      	add	r3, r2
 801bc56:	2200      	movs	r2, #0
 801bc58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801bc5a:	7dfb      	ldrb	r3, [r7, #23]
 801bc5c:	3301      	adds	r3, #1
 801bc5e:	75fb      	strb	r3, [r7, #23]
 801bc60:	7dfa      	ldrb	r2, [r7, #23]
 801bc62:	79fb      	ldrb	r3, [r7, #7]
 801bc64:	429a      	cmp	r2, r3
 801bc66:	d3d3      	bcc.n	801bc10 <IntToUnicode+0x18>
  }
}
 801bc68:	bf00      	nop
 801bc6a:	bf00      	nop
 801bc6c:	371c      	adds	r7, #28
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc74:	4770      	bx	lr
	...

0801bc78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b08a      	sub	sp, #40	@ 0x28
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bc80:	f107 0314 	add.w	r3, r7, #20
 801bc84:	2200      	movs	r2, #0
 801bc86:	601a      	str	r2, [r3, #0]
 801bc88:	605a      	str	r2, [r3, #4]
 801bc8a:	609a      	str	r2, [r3, #8]
 801bc8c:	60da      	str	r2, [r3, #12]
 801bc8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801bc98:	d13a      	bne.n	801bd10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	613b      	str	r3, [r7, #16]
 801bc9e:	4b1e      	ldr	r3, [pc, #120]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bca2:	4a1d      	ldr	r2, [pc, #116]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bca4:	f043 0301 	orr.w	r3, r3, #1
 801bca8:	6313      	str	r3, [r2, #48]	@ 0x30
 801bcaa:	4b1b      	ldr	r3, [pc, #108]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bcac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bcae:	f003 0301 	and.w	r3, r3, #1
 801bcb2:	613b      	str	r3, [r7, #16]
 801bcb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801bcb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801bcba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bcbc:	2302      	movs	r3, #2
 801bcbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bcc4:	2303      	movs	r3, #3
 801bcc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bcc8:	230a      	movs	r3, #10
 801bcca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bccc:	f107 0314 	add.w	r3, r7, #20
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	4812      	ldr	r0, [pc, #72]	@ (801bd1c <HAL_PCD_MspInit+0xa4>)
 801bcd4:	f7f2 fb44 	bl	800e360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bcd8:	4b0f      	ldr	r3, [pc, #60]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bcda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bcdc:	4a0e      	ldr	r2, [pc, #56]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bcde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bce2:	6353      	str	r3, [r2, #52]	@ 0x34
 801bce4:	2300      	movs	r3, #0
 801bce6:	60fb      	str	r3, [r7, #12]
 801bce8:	4b0b      	ldr	r3, [pc, #44]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bcea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bcec:	4a0a      	ldr	r2, [pc, #40]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bcee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801bcf2:	6453      	str	r3, [r2, #68]	@ 0x44
 801bcf4:	4b08      	ldr	r3, [pc, #32]	@ (801bd18 <HAL_PCD_MspInit+0xa0>)
 801bcf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bcf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801bcfc:	60fb      	str	r3, [r7, #12]
 801bcfe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801bd00:	2200      	movs	r2, #0
 801bd02:	2105      	movs	r1, #5
 801bd04:	2043      	movs	r0, #67	@ 0x43
 801bd06:	f7f1 fee5 	bl	800dad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bd0a:	2043      	movs	r0, #67	@ 0x43
 801bd0c:	f7f1 fefe 	bl	800db0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bd10:	bf00      	nop
 801bd12:	3728      	adds	r7, #40	@ 0x28
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	40023800 	.word	0x40023800
 801bd1c:	40020000 	.word	0x40020000

0801bd20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b082      	sub	sp, #8
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801bd34:	4619      	mov	r1, r3
 801bd36:	4610      	mov	r0, r2
 801bd38:	f7fb fa3d 	bl	80171b6 <USBD_LL_SetupStage>
}
 801bd3c:	bf00      	nop
 801bd3e:	3708      	adds	r7, #8
 801bd40:	46bd      	mov	sp, r7
 801bd42:	bd80      	pop	{r7, pc}

0801bd44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b082      	sub	sp, #8
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	460b      	mov	r3, r1
 801bd4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801bd56:	78fa      	ldrb	r2, [r7, #3]
 801bd58:	6879      	ldr	r1, [r7, #4]
 801bd5a:	4613      	mov	r3, r2
 801bd5c:	00db      	lsls	r3, r3, #3
 801bd5e:	4413      	add	r3, r2
 801bd60:	009b      	lsls	r3, r3, #2
 801bd62:	440b      	add	r3, r1
 801bd64:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 801bd68:	681a      	ldr	r2, [r3, #0]
 801bd6a:	78fb      	ldrb	r3, [r7, #3]
 801bd6c:	4619      	mov	r1, r3
 801bd6e:	f7fb fa77 	bl	8017260 <USBD_LL_DataOutStage>
}
 801bd72:	bf00      	nop
 801bd74:	3708      	adds	r7, #8
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}

0801bd7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd7a:	b580      	push	{r7, lr}
 801bd7c:	b082      	sub	sp, #8
 801bd7e:	af00      	add	r7, sp, #0
 801bd80:	6078      	str	r0, [r7, #4]
 801bd82:	460b      	mov	r3, r1
 801bd84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801bd8c:	78fa      	ldrb	r2, [r7, #3]
 801bd8e:	6879      	ldr	r1, [r7, #4]
 801bd90:	4613      	mov	r3, r2
 801bd92:	00db      	lsls	r3, r3, #3
 801bd94:	4413      	add	r3, r2
 801bd96:	009b      	lsls	r3, r3, #2
 801bd98:	440b      	add	r3, r1
 801bd9a:	334c      	adds	r3, #76	@ 0x4c
 801bd9c:	681a      	ldr	r2, [r3, #0]
 801bd9e:	78fb      	ldrb	r3, [r7, #3]
 801bda0:	4619      	mov	r1, r3
 801bda2:	f7fb fb10 	bl	80173c6 <USBD_LL_DataInStage>
}
 801bda6:	bf00      	nop
 801bda8:	3708      	adds	r7, #8
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}

0801bdae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdae:	b580      	push	{r7, lr}
 801bdb0:	b082      	sub	sp, #8
 801bdb2:	af00      	add	r7, sp, #0
 801bdb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	f7fb fc44 	bl	801764a <USBD_LL_SOF>
}
 801bdc2:	bf00      	nop
 801bdc4:	3708      	adds	r7, #8
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}

0801bdca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdca:	b580      	push	{r7, lr}
 801bdcc:	b084      	sub	sp, #16
 801bdce:	af00      	add	r7, sp, #0
 801bdd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bdd2:	2301      	movs	r3, #1
 801bdd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	68db      	ldr	r3, [r3, #12]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d102      	bne.n	801bde4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bdde:	2300      	movs	r3, #0
 801bde0:	73fb      	strb	r3, [r7, #15]
 801bde2:	e008      	b.n	801bdf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	68db      	ldr	r3, [r3, #12]
 801bde8:	2b02      	cmp	r3, #2
 801bdea:	d102      	bne.n	801bdf2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bdec:	2301      	movs	r3, #1
 801bdee:	73fb      	strb	r3, [r7, #15]
 801bdf0:	e001      	b.n	801bdf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bdf2:	f7e7 fd01 	bl	80037f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801bdfc:	7bfa      	ldrb	r2, [r7, #15]
 801bdfe:	4611      	mov	r1, r2
 801be00:	4618      	mov	r0, r3
 801be02:	f7fb fbe4 	bl	80175ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801be0c:	4618      	mov	r0, r3
 801be0e:	f7fb fb8c 	bl	801752a <USBD_LL_Reset>
}
 801be12:	bf00      	nop
 801be14:	3710      	adds	r7, #16
 801be16:	46bd      	mov	sp, r7
 801be18:	bd80      	pop	{r7, pc}
	...

0801be1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be1c:	b580      	push	{r7, lr}
 801be1e:	b082      	sub	sp, #8
 801be20:	af00      	add	r7, sp, #0
 801be22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801be2a:	4618      	mov	r0, r3
 801be2c:	f7fb fbdf 	bl	80175ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	6812      	ldr	r2, [r2, #0]
 801be3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801be42:	f043 0301 	orr.w	r3, r3, #1
 801be46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
//  gv_usb_connected = 0;
  if (hpcd->Init.low_power_enable)
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6a1b      	ldr	r3, [r3, #32]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d005      	beq.n	801be5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801be50:	4b04      	ldr	r3, [pc, #16]	@ (801be64 <HAL_PCD_SuspendCallback+0x48>)
 801be52:	691b      	ldr	r3, [r3, #16]
 801be54:	4a03      	ldr	r2, [pc, #12]	@ (801be64 <HAL_PCD_SuspendCallback+0x48>)
 801be56:	f043 0306 	orr.w	r3, r3, #6
 801be5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801be5c:	bf00      	nop
 801be5e:	3708      	adds	r7, #8
 801be60:	46bd      	mov	sp, r7
 801be62:	bd80      	pop	{r7, pc}
 801be64:	e000ed00 	.word	0xe000ed00

0801be68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b082      	sub	sp, #8
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
//	gv_usb_connected = 1;
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801be76:	4618      	mov	r0, r3
 801be78:	f7fb fbcf 	bl	801761a <USBD_LL_Resume>
}
 801be7c:	bf00      	nop
 801be7e:	3708      	adds	r7, #8
 801be80:	46bd      	mov	sp, r7
 801be82:	bd80      	pop	{r7, pc}

0801be84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b082      	sub	sp, #8
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
 801be8c:	460b      	mov	r3, r1
 801be8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801be96:	78fa      	ldrb	r2, [r7, #3]
 801be98:	4611      	mov	r1, r2
 801be9a:	4618      	mov	r0, r3
 801be9c:	f7fb fc27 	bl	80176ee <USBD_LL_IsoOUTIncomplete>
}
 801bea0:	bf00      	nop
 801bea2:	3708      	adds	r7, #8
 801bea4:	46bd      	mov	sp, r7
 801bea6:	bd80      	pop	{r7, pc}

0801bea8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b082      	sub	sp, #8
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
 801beb0:	460b      	mov	r3, r1
 801beb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801beba:	78fa      	ldrb	r2, [r7, #3]
 801bebc:	4611      	mov	r1, r2
 801bebe:	4618      	mov	r0, r3
 801bec0:	f7fb fbe3 	bl	801768a <USBD_LL_IsoINIncomplete>
}
 801bec4:	bf00      	nop
 801bec6:	3708      	adds	r7, #8
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd80      	pop	{r7, pc}

0801becc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b082      	sub	sp, #8
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801beda:	4618      	mov	r0, r3
 801bedc:	f7fb fc39 	bl	8017752 <USBD_LL_DevConnected>
}
 801bee0:	bf00      	nop
 801bee2:	3708      	adds	r7, #8
 801bee4:	46bd      	mov	sp, r7
 801bee6:	bd80      	pop	{r7, pc}

0801bee8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b082      	sub	sp, #8
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7fb fc36 	bl	8017768 <USBD_LL_DevDisconnected>
}
 801befc:	bf00      	nop
 801befe:	3708      	adds	r7, #8
 801bf00:	46bd      	mov	sp, r7
 801bf02:	bd80      	pop	{r7, pc}

0801bf04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b082      	sub	sp, #8
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	781b      	ldrb	r3, [r3, #0]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d13c      	bne.n	801bf8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801bf14:	4a20      	ldr	r2, [pc, #128]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	4a1e      	ldr	r2, [pc, #120]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801bf24:	4b1c      	ldr	r3, [pc, #112]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801bf2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801bf2c:	4b1a      	ldr	r3, [pc, #104]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf2e:	2204      	movs	r2, #4
 801bf30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801bf32:	4b19      	ldr	r3, [pc, #100]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf34:	2202      	movs	r2, #2
 801bf36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801bf38:	4b17      	ldr	r3, [pc, #92]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf3a:	2200      	movs	r2, #0
 801bf3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801bf3e:	4b16      	ldr	r3, [pc, #88]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf40:	2202      	movs	r2, #2
 801bf42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801bf44:	4b14      	ldr	r3, [pc, #80]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf46:	2200      	movs	r2, #0
 801bf48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801bf4a:	4b13      	ldr	r3, [pc, #76]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801bf50:	4b11      	ldr	r3, [pc, #68]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf52:	2200      	movs	r2, #0
 801bf54:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801bf56:	4b10      	ldr	r3, [pc, #64]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf58:	2200      	movs	r2, #0
 801bf5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801bf5c:	4b0e      	ldr	r3, [pc, #56]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf5e:	2200      	movs	r2, #0
 801bf60:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801bf62:	480d      	ldr	r0, [pc, #52]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf64:	f7f4 f955 	bl	8010212 <HAL_PCD_Init>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d001      	beq.n	801bf72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801bf6e:	f7e7 fc43 	bl	80037f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801bf72:	2180      	movs	r1, #128	@ 0x80
 801bf74:	4808      	ldr	r0, [pc, #32]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf76:	f7f5 fbac 	bl	80116d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801bf7a:	2240      	movs	r2, #64	@ 0x40
 801bf7c:	2100      	movs	r1, #0
 801bf7e:	4806      	ldr	r0, [pc, #24]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf80:	f7f5 fb60 	bl	8011644 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801bf84:	2280      	movs	r2, #128	@ 0x80
 801bf86:	2101      	movs	r1, #1
 801bf88:	4803      	ldr	r0, [pc, #12]	@ (801bf98 <USBD_LL_Init+0x94>)
 801bf8a:	f7f5 fb5b 	bl	8011644 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801bf8e:	2300      	movs	r3, #0
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3708      	adds	r7, #8
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}
 801bf98:	2000cc3c 	.word	0x2000cc3c

0801bf9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801bf9c:	b580      	push	{r7, lr}
 801bf9e:	b084      	sub	sp, #16
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	f7f4 fa4a 	bl	801044c <HAL_PCD_Start>
 801bfb8:	4603      	mov	r3, r0
 801bfba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfbc:	7bfb      	ldrb	r3, [r7, #15]
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	f000 f942 	bl	801c248 <USBD_Get_USB_Status>
 801bfc4:	4603      	mov	r3, r0
 801bfc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bfc8:	7bbb      	ldrb	r3, [r7, #14]
}
 801bfca:	4618      	mov	r0, r3
 801bfcc:	3710      	adds	r7, #16
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	bd80      	pop	{r7, pc}

0801bfd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bfd2:	b580      	push	{r7, lr}
 801bfd4:	b084      	sub	sp, #16
 801bfd6:	af00      	add	r7, sp, #0
 801bfd8:	6078      	str	r0, [r7, #4]
 801bfda:	4608      	mov	r0, r1
 801bfdc:	4611      	mov	r1, r2
 801bfde:	461a      	mov	r2, r3
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	70fb      	strb	r3, [r7, #3]
 801bfe4:	460b      	mov	r3, r1
 801bfe6:	70bb      	strb	r3, [r7, #2]
 801bfe8:	4613      	mov	r3, r2
 801bfea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bfec:	2300      	movs	r3, #0
 801bfee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bff0:	2300      	movs	r3, #0
 801bff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bffa:	78bb      	ldrb	r3, [r7, #2]
 801bffc:	883a      	ldrh	r2, [r7, #0]
 801bffe:	78f9      	ldrb	r1, [r7, #3]
 801c000:	f7f4 ff1b 	bl	8010e3a <HAL_PCD_EP_Open>
 801c004:	4603      	mov	r3, r0
 801c006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c008:	7bfb      	ldrb	r3, [r7, #15]
 801c00a:	4618      	mov	r0, r3
 801c00c:	f000 f91c 	bl	801c248 <USBD_Get_USB_Status>
 801c010:	4603      	mov	r3, r0
 801c012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c014:	7bbb      	ldrb	r3, [r7, #14]
}
 801c016:	4618      	mov	r0, r3
 801c018:	3710      	adds	r7, #16
 801c01a:	46bd      	mov	sp, r7
 801c01c:	bd80      	pop	{r7, pc}

0801c01e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c01e:	b580      	push	{r7, lr}
 801c020:	b084      	sub	sp, #16
 801c022:	af00      	add	r7, sp, #0
 801c024:	6078      	str	r0, [r7, #4]
 801c026:	460b      	mov	r3, r1
 801c028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c02a:	2300      	movs	r3, #0
 801c02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c02e:	2300      	movs	r3, #0
 801c030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c038:	78fa      	ldrb	r2, [r7, #3]
 801c03a:	4611      	mov	r1, r2
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7f4 ff64 	bl	8010f0a <HAL_PCD_EP_Close>
 801c042:	4603      	mov	r3, r0
 801c044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c046:	7bfb      	ldrb	r3, [r7, #15]
 801c048:	4618      	mov	r0, r3
 801c04a:	f000 f8fd 	bl	801c248 <USBD_Get_USB_Status>
 801c04e:	4603      	mov	r3, r0
 801c050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c052:	7bbb      	ldrb	r3, [r7, #14]
}
 801c054:	4618      	mov	r0, r3
 801c056:	3710      	adds	r7, #16
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}

0801c05c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b084      	sub	sp, #16
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
 801c064:	460b      	mov	r3, r1
 801c066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c068:	2300      	movs	r3, #0
 801c06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c06c:	2300      	movs	r3, #0
 801c06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c076:	78fa      	ldrb	r2, [r7, #3]
 801c078:	4611      	mov	r1, r2
 801c07a:	4618      	mov	r0, r3
 801c07c:	f7f5 f83c 	bl	80110f8 <HAL_PCD_EP_SetStall>
 801c080:	4603      	mov	r3, r0
 801c082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c084:	7bfb      	ldrb	r3, [r7, #15]
 801c086:	4618      	mov	r0, r3
 801c088:	f000 f8de 	bl	801c248 <USBD_Get_USB_Status>
 801c08c:	4603      	mov	r3, r0
 801c08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c090:	7bbb      	ldrb	r3, [r7, #14]
}
 801c092:	4618      	mov	r0, r3
 801c094:	3710      	adds	r7, #16
 801c096:	46bd      	mov	sp, r7
 801c098:	bd80      	pop	{r7, pc}

0801c09a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c09a:	b580      	push	{r7, lr}
 801c09c:	b084      	sub	sp, #16
 801c09e:	af00      	add	r7, sp, #0
 801c0a0:	6078      	str	r0, [r7, #4]
 801c0a2:	460b      	mov	r3, r1
 801c0a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c0b4:	78fa      	ldrb	r2, [r7, #3]
 801c0b6:	4611      	mov	r1, r2
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f7f5 f881 	bl	80111c0 <HAL_PCD_EP_ClrStall>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c0c2:	7bfb      	ldrb	r3, [r7, #15]
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	f000 f8bf 	bl	801c248 <USBD_Get_USB_Status>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	3710      	adds	r7, #16
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}

0801c0d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c0d8:	b480      	push	{r7}
 801c0da:	b085      	sub	sp, #20
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
 801c0e0:	460b      	mov	r3, r1
 801c0e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c0ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c0ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	da0b      	bge.n	801c10c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c0f4:	78fb      	ldrb	r3, [r7, #3]
 801c0f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c0fa:	68f9      	ldr	r1, [r7, #12]
 801c0fc:	4613      	mov	r3, r2
 801c0fe:	00db      	lsls	r3, r3, #3
 801c100:	4413      	add	r3, r2
 801c102:	009b      	lsls	r3, r3, #2
 801c104:	440b      	add	r3, r1
 801c106:	333e      	adds	r3, #62	@ 0x3e
 801c108:	781b      	ldrb	r3, [r3, #0]
 801c10a:	e00b      	b.n	801c124 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c10c:	78fb      	ldrb	r3, [r7, #3]
 801c10e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c112:	68f9      	ldr	r1, [r7, #12]
 801c114:	4613      	mov	r3, r2
 801c116:	00db      	lsls	r3, r3, #3
 801c118:	4413      	add	r3, r2
 801c11a:	009b      	lsls	r3, r3, #2
 801c11c:	440b      	add	r3, r1
 801c11e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801c122:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c124:	4618      	mov	r0, r3
 801c126:	3714      	adds	r7, #20
 801c128:	46bd      	mov	sp, r7
 801c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c12e:	4770      	bx	lr

0801c130 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b084      	sub	sp, #16
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
 801c138:	460b      	mov	r3, r1
 801c13a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c13c:	2300      	movs	r3, #0
 801c13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c140:	2300      	movs	r3, #0
 801c142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c14a:	78fa      	ldrb	r2, [r7, #3]
 801c14c:	4611      	mov	r1, r2
 801c14e:	4618      	mov	r0, r3
 801c150:	f7f4 fe4e 	bl	8010df0 <HAL_PCD_SetAddress>
 801c154:	4603      	mov	r3, r0
 801c156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c158:	7bfb      	ldrb	r3, [r7, #15]
 801c15a:	4618      	mov	r0, r3
 801c15c:	f000 f874 	bl	801c248 <USBD_Get_USB_Status>
 801c160:	4603      	mov	r3, r0
 801c162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c164:	7bbb      	ldrb	r3, [r7, #14]
}
 801c166:	4618      	mov	r0, r3
 801c168:	3710      	adds	r7, #16
 801c16a:	46bd      	mov	sp, r7
 801c16c:	bd80      	pop	{r7, pc}

0801c16e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c16e:	b580      	push	{r7, lr}
 801c170:	b086      	sub	sp, #24
 801c172:	af00      	add	r7, sp, #0
 801c174:	60f8      	str	r0, [r7, #12]
 801c176:	607a      	str	r2, [r7, #4]
 801c178:	603b      	str	r3, [r7, #0]
 801c17a:	460b      	mov	r3, r1
 801c17c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c17e:	2300      	movs	r3, #0
 801c180:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c182:	2300      	movs	r3, #0
 801c184:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801c18c:	7af9      	ldrb	r1, [r7, #11]
 801c18e:	683b      	ldr	r3, [r7, #0]
 801c190:	687a      	ldr	r2, [r7, #4]
 801c192:	f7f4 ff67 	bl	8011064 <HAL_PCD_EP_Transmit>
 801c196:	4603      	mov	r3, r0
 801c198:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c19a:	7dfb      	ldrb	r3, [r7, #23]
 801c19c:	4618      	mov	r0, r3
 801c19e:	f000 f853 	bl	801c248 <USBD_Get_USB_Status>
 801c1a2:	4603      	mov	r3, r0
 801c1a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c1a6:	7dbb      	ldrb	r3, [r7, #22]
}
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	3718      	adds	r7, #24
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bd80      	pop	{r7, pc}

0801c1b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b086      	sub	sp, #24
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	60f8      	str	r0, [r7, #12]
 801c1b8:	607a      	str	r2, [r7, #4]
 801c1ba:	603b      	str	r3, [r7, #0]
 801c1bc:	460b      	mov	r3, r1
 801c1be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c1c0:	2300      	movs	r3, #0
 801c1c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801c1ce:	7af9      	ldrb	r1, [r7, #11]
 801c1d0:	683b      	ldr	r3, [r7, #0]
 801c1d2:	687a      	ldr	r2, [r7, #4]
 801c1d4:	f7f4 fee3 	bl	8010f9e <HAL_PCD_EP_Receive>
 801c1d8:	4603      	mov	r3, r0
 801c1da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c1dc:	7dfb      	ldrb	r3, [r7, #23]
 801c1de:	4618      	mov	r0, r3
 801c1e0:	f000 f832 	bl	801c248 <USBD_Get_USB_Status>
 801c1e4:	4603      	mov	r3, r0
 801c1e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c1e8:	7dbb      	ldrb	r3, [r7, #22]
}
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	3718      	adds	r7, #24
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	bd80      	pop	{r7, pc}

0801c1f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c1f2:	b580      	push	{r7, lr}
 801c1f4:	b082      	sub	sp, #8
 801c1f6:	af00      	add	r7, sp, #0
 801c1f8:	6078      	str	r0, [r7, #4]
 801c1fa:	460b      	mov	r3, r1
 801c1fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c204:	78fa      	ldrb	r2, [r7, #3]
 801c206:	4611      	mov	r1, r2
 801c208:	4618      	mov	r0, r3
 801c20a:	f7f4 ff13 	bl	8011034 <HAL_PCD_EP_GetRxCount>
 801c20e:	4603      	mov	r3, r0
}
 801c210:	4618      	mov	r0, r3
 801c212:	3708      	adds	r7, #8
 801c214:	46bd      	mov	sp, r7
 801c216:	bd80      	pop	{r7, pc}

0801c218 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c218:	b480      	push	{r7}
 801c21a:	b083      	sub	sp, #12
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c220:	4b03      	ldr	r3, [pc, #12]	@ (801c230 <USBD_static_malloc+0x18>)
}
 801c222:	4618      	mov	r0, r3
 801c224:	370c      	adds	r7, #12
 801c226:	46bd      	mov	sp, r7
 801c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c22c:	4770      	bx	lr
 801c22e:	bf00      	nop
 801c230:	2000d148 	.word	0x2000d148

0801c234 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c234:	b480      	push	{r7}
 801c236:	b083      	sub	sp, #12
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]

}
 801c23c:	bf00      	nop
 801c23e:	370c      	adds	r7, #12
 801c240:	46bd      	mov	sp, r7
 801c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c246:	4770      	bx	lr

0801c248 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c248:	b480      	push	{r7}
 801c24a:	b085      	sub	sp, #20
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	4603      	mov	r3, r0
 801c250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c252:	2300      	movs	r3, #0
 801c254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c256:	79fb      	ldrb	r3, [r7, #7]
 801c258:	2b03      	cmp	r3, #3
 801c25a:	d817      	bhi.n	801c28c <USBD_Get_USB_Status+0x44>
 801c25c:	a201      	add	r2, pc, #4	@ (adr r2, 801c264 <USBD_Get_USB_Status+0x1c>)
 801c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c262:	bf00      	nop
 801c264:	0801c275 	.word	0x0801c275
 801c268:	0801c27b 	.word	0x0801c27b
 801c26c:	0801c281 	.word	0x0801c281
 801c270:	0801c287 	.word	0x0801c287
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c274:	2300      	movs	r3, #0
 801c276:	73fb      	strb	r3, [r7, #15]
    break;
 801c278:	e00b      	b.n	801c292 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c27a:	2303      	movs	r3, #3
 801c27c:	73fb      	strb	r3, [r7, #15]
    break;
 801c27e:	e008      	b.n	801c292 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c280:	2301      	movs	r3, #1
 801c282:	73fb      	strb	r3, [r7, #15]
    break;
 801c284:	e005      	b.n	801c292 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c286:	2303      	movs	r3, #3
 801c288:	73fb      	strb	r3, [r7, #15]
    break;
 801c28a:	e002      	b.n	801c292 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c28c:	2303      	movs	r3, #3
 801c28e:	73fb      	strb	r3, [r7, #15]
    break;
 801c290:	bf00      	nop
  }
  return usb_status;
 801c292:	7bfb      	ldrb	r3, [r7, #15]
}
 801c294:	4618      	mov	r0, r3
 801c296:	3714      	adds	r7, #20
 801c298:	46bd      	mov	sp, r7
 801c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c29e:	4770      	bx	lr

0801c2a0 <std>:
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	b510      	push	{r4, lr}
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	e9c0 3300 	strd	r3, r3, [r0]
 801c2aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c2ae:	6083      	str	r3, [r0, #8]
 801c2b0:	8181      	strh	r1, [r0, #12]
 801c2b2:	6643      	str	r3, [r0, #100]	@ 0x64
 801c2b4:	81c2      	strh	r2, [r0, #14]
 801c2b6:	6183      	str	r3, [r0, #24]
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	2208      	movs	r2, #8
 801c2bc:	305c      	adds	r0, #92	@ 0x5c
 801c2be:	f000 f928 	bl	801c512 <memset>
 801c2c2:	4b0d      	ldr	r3, [pc, #52]	@ (801c2f8 <std+0x58>)
 801c2c4:	6223      	str	r3, [r4, #32]
 801c2c6:	4b0d      	ldr	r3, [pc, #52]	@ (801c2fc <std+0x5c>)
 801c2c8:	6263      	str	r3, [r4, #36]	@ 0x24
 801c2ca:	4b0d      	ldr	r3, [pc, #52]	@ (801c300 <std+0x60>)
 801c2cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c2ce:	4b0d      	ldr	r3, [pc, #52]	@ (801c304 <std+0x64>)
 801c2d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c2d2:	4b0d      	ldr	r3, [pc, #52]	@ (801c308 <std+0x68>)
 801c2d4:	61e4      	str	r4, [r4, #28]
 801c2d6:	429c      	cmp	r4, r3
 801c2d8:	d006      	beq.n	801c2e8 <std+0x48>
 801c2da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c2de:	4294      	cmp	r4, r2
 801c2e0:	d002      	beq.n	801c2e8 <std+0x48>
 801c2e2:	33d0      	adds	r3, #208	@ 0xd0
 801c2e4:	429c      	cmp	r4, r3
 801c2e6:	d105      	bne.n	801c2f4 <std+0x54>
 801c2e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2f0:	f000 b9b4 	b.w	801c65c <__retarget_lock_init_recursive>
 801c2f4:	bd10      	pop	{r4, pc}
 801c2f6:	bf00      	nop
 801c2f8:	0801c48d 	.word	0x0801c48d
 801c2fc:	0801c4af 	.word	0x0801c4af
 801c300:	0801c4e7 	.word	0x0801c4e7
 801c304:	0801c50b 	.word	0x0801c50b
 801c308:	2000d368 	.word	0x2000d368

0801c30c <stdio_exit_handler>:
 801c30c:	4a02      	ldr	r2, [pc, #8]	@ (801c318 <stdio_exit_handler+0xc>)
 801c30e:	4903      	ldr	r1, [pc, #12]	@ (801c31c <stdio_exit_handler+0x10>)
 801c310:	4803      	ldr	r0, [pc, #12]	@ (801c320 <stdio_exit_handler+0x14>)
 801c312:	f000 b869 	b.w	801c3e8 <_fwalk_sglue>
 801c316:	bf00      	nop
 801c318:	20000144 	.word	0x20000144
 801c31c:	0801e115 	.word	0x0801e115
 801c320:	20000158 	.word	0x20000158

0801c324 <cleanup_stdio>:
 801c324:	6841      	ldr	r1, [r0, #4]
 801c326:	4b0c      	ldr	r3, [pc, #48]	@ (801c358 <cleanup_stdio+0x34>)
 801c328:	4299      	cmp	r1, r3
 801c32a:	b510      	push	{r4, lr}
 801c32c:	4604      	mov	r4, r0
 801c32e:	d001      	beq.n	801c334 <cleanup_stdio+0x10>
 801c330:	f001 fef0 	bl	801e114 <_fclose_r>
 801c334:	68a1      	ldr	r1, [r4, #8]
 801c336:	4b09      	ldr	r3, [pc, #36]	@ (801c35c <cleanup_stdio+0x38>)
 801c338:	4299      	cmp	r1, r3
 801c33a:	d002      	beq.n	801c342 <cleanup_stdio+0x1e>
 801c33c:	4620      	mov	r0, r4
 801c33e:	f001 fee9 	bl	801e114 <_fclose_r>
 801c342:	68e1      	ldr	r1, [r4, #12]
 801c344:	4b06      	ldr	r3, [pc, #24]	@ (801c360 <cleanup_stdio+0x3c>)
 801c346:	4299      	cmp	r1, r3
 801c348:	d004      	beq.n	801c354 <cleanup_stdio+0x30>
 801c34a:	4620      	mov	r0, r4
 801c34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c350:	f001 bee0 	b.w	801e114 <_fclose_r>
 801c354:	bd10      	pop	{r4, pc}
 801c356:	bf00      	nop
 801c358:	2000d368 	.word	0x2000d368
 801c35c:	2000d3d0 	.word	0x2000d3d0
 801c360:	2000d438 	.word	0x2000d438

0801c364 <global_stdio_init.part.0>:
 801c364:	b510      	push	{r4, lr}
 801c366:	4b0b      	ldr	r3, [pc, #44]	@ (801c394 <global_stdio_init.part.0+0x30>)
 801c368:	4c0b      	ldr	r4, [pc, #44]	@ (801c398 <global_stdio_init.part.0+0x34>)
 801c36a:	4a0c      	ldr	r2, [pc, #48]	@ (801c39c <global_stdio_init.part.0+0x38>)
 801c36c:	601a      	str	r2, [r3, #0]
 801c36e:	4620      	mov	r0, r4
 801c370:	2200      	movs	r2, #0
 801c372:	2104      	movs	r1, #4
 801c374:	f7ff ff94 	bl	801c2a0 <std>
 801c378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c37c:	2201      	movs	r2, #1
 801c37e:	2109      	movs	r1, #9
 801c380:	f7ff ff8e 	bl	801c2a0 <std>
 801c384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c388:	2202      	movs	r2, #2
 801c38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c38e:	2112      	movs	r1, #18
 801c390:	f7ff bf86 	b.w	801c2a0 <std>
 801c394:	2000d4a0 	.word	0x2000d4a0
 801c398:	2000d368 	.word	0x2000d368
 801c39c:	0801c30d 	.word	0x0801c30d

0801c3a0 <__sfp_lock_acquire>:
 801c3a0:	4801      	ldr	r0, [pc, #4]	@ (801c3a8 <__sfp_lock_acquire+0x8>)
 801c3a2:	f000 b95d 	b.w	801c660 <__retarget_lock_acquire_recursive>
 801c3a6:	bf00      	nop
 801c3a8:	2000d4aa 	.word	0x2000d4aa

0801c3ac <__sfp_lock_release>:
 801c3ac:	4801      	ldr	r0, [pc, #4]	@ (801c3b4 <__sfp_lock_release+0x8>)
 801c3ae:	f000 b958 	b.w	801c662 <__retarget_lock_release_recursive>
 801c3b2:	bf00      	nop
 801c3b4:	2000d4aa 	.word	0x2000d4aa

0801c3b8 <__sinit>:
 801c3b8:	b510      	push	{r4, lr}
 801c3ba:	4604      	mov	r4, r0
 801c3bc:	f7ff fff0 	bl	801c3a0 <__sfp_lock_acquire>
 801c3c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c3c2:	b11b      	cbz	r3, 801c3cc <__sinit+0x14>
 801c3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3c8:	f7ff bff0 	b.w	801c3ac <__sfp_lock_release>
 801c3cc:	4b04      	ldr	r3, [pc, #16]	@ (801c3e0 <__sinit+0x28>)
 801c3ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801c3d0:	4b04      	ldr	r3, [pc, #16]	@ (801c3e4 <__sinit+0x2c>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d1f5      	bne.n	801c3c4 <__sinit+0xc>
 801c3d8:	f7ff ffc4 	bl	801c364 <global_stdio_init.part.0>
 801c3dc:	e7f2      	b.n	801c3c4 <__sinit+0xc>
 801c3de:	bf00      	nop
 801c3e0:	0801c325 	.word	0x0801c325
 801c3e4:	2000d4a0 	.word	0x2000d4a0

0801c3e8 <_fwalk_sglue>:
 801c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3ec:	4607      	mov	r7, r0
 801c3ee:	4688      	mov	r8, r1
 801c3f0:	4614      	mov	r4, r2
 801c3f2:	2600      	movs	r6, #0
 801c3f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c3f8:	f1b9 0901 	subs.w	r9, r9, #1
 801c3fc:	d505      	bpl.n	801c40a <_fwalk_sglue+0x22>
 801c3fe:	6824      	ldr	r4, [r4, #0]
 801c400:	2c00      	cmp	r4, #0
 801c402:	d1f7      	bne.n	801c3f4 <_fwalk_sglue+0xc>
 801c404:	4630      	mov	r0, r6
 801c406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c40a:	89ab      	ldrh	r3, [r5, #12]
 801c40c:	2b01      	cmp	r3, #1
 801c40e:	d907      	bls.n	801c420 <_fwalk_sglue+0x38>
 801c410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c414:	3301      	adds	r3, #1
 801c416:	d003      	beq.n	801c420 <_fwalk_sglue+0x38>
 801c418:	4629      	mov	r1, r5
 801c41a:	4638      	mov	r0, r7
 801c41c:	47c0      	blx	r8
 801c41e:	4306      	orrs	r6, r0
 801c420:	3568      	adds	r5, #104	@ 0x68
 801c422:	e7e9      	b.n	801c3f8 <_fwalk_sglue+0x10>

0801c424 <snprintf>:
 801c424:	b40c      	push	{r2, r3}
 801c426:	b530      	push	{r4, r5, lr}
 801c428:	4b17      	ldr	r3, [pc, #92]	@ (801c488 <snprintf+0x64>)
 801c42a:	1e0c      	subs	r4, r1, #0
 801c42c:	681d      	ldr	r5, [r3, #0]
 801c42e:	b09d      	sub	sp, #116	@ 0x74
 801c430:	da08      	bge.n	801c444 <snprintf+0x20>
 801c432:	238b      	movs	r3, #139	@ 0x8b
 801c434:	602b      	str	r3, [r5, #0]
 801c436:	f04f 30ff 	mov.w	r0, #4294967295
 801c43a:	b01d      	add	sp, #116	@ 0x74
 801c43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c440:	b002      	add	sp, #8
 801c442:	4770      	bx	lr
 801c444:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c448:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c44c:	bf14      	ite	ne
 801c44e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c452:	4623      	moveq	r3, r4
 801c454:	9304      	str	r3, [sp, #16]
 801c456:	9307      	str	r3, [sp, #28]
 801c458:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c45c:	9002      	str	r0, [sp, #8]
 801c45e:	9006      	str	r0, [sp, #24]
 801c460:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c464:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c466:	ab21      	add	r3, sp, #132	@ 0x84
 801c468:	a902      	add	r1, sp, #8
 801c46a:	4628      	mov	r0, r5
 801c46c:	9301      	str	r3, [sp, #4]
 801c46e:	f000 fc73 	bl	801cd58 <_svfprintf_r>
 801c472:	1c43      	adds	r3, r0, #1
 801c474:	bfbc      	itt	lt
 801c476:	238b      	movlt	r3, #139	@ 0x8b
 801c478:	602b      	strlt	r3, [r5, #0]
 801c47a:	2c00      	cmp	r4, #0
 801c47c:	d0dd      	beq.n	801c43a <snprintf+0x16>
 801c47e:	9b02      	ldr	r3, [sp, #8]
 801c480:	2200      	movs	r2, #0
 801c482:	701a      	strb	r2, [r3, #0]
 801c484:	e7d9      	b.n	801c43a <snprintf+0x16>
 801c486:	bf00      	nop
 801c488:	20000150 	.word	0x20000150

0801c48c <__sread>:
 801c48c:	b510      	push	{r4, lr}
 801c48e:	460c      	mov	r4, r1
 801c490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c494:	f000 f894 	bl	801c5c0 <_read_r>
 801c498:	2800      	cmp	r0, #0
 801c49a:	bfab      	itete	ge
 801c49c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 801c49e:	89a3      	ldrhlt	r3, [r4, #12]
 801c4a0:	181b      	addge	r3, r3, r0
 801c4a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c4a6:	bfac      	ite	ge
 801c4a8:	6523      	strge	r3, [r4, #80]	@ 0x50
 801c4aa:	81a3      	strhlt	r3, [r4, #12]
 801c4ac:	bd10      	pop	{r4, pc}

0801c4ae <__swrite>:
 801c4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4b2:	461f      	mov	r7, r3
 801c4b4:	898b      	ldrh	r3, [r1, #12]
 801c4b6:	05db      	lsls	r3, r3, #23
 801c4b8:	4605      	mov	r5, r0
 801c4ba:	460c      	mov	r4, r1
 801c4bc:	4616      	mov	r6, r2
 801c4be:	d505      	bpl.n	801c4cc <__swrite+0x1e>
 801c4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4c4:	2302      	movs	r3, #2
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	f000 f868 	bl	801c59c <_lseek_r>
 801c4cc:	89a3      	ldrh	r3, [r4, #12]
 801c4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c4d6:	81a3      	strh	r3, [r4, #12]
 801c4d8:	4632      	mov	r2, r6
 801c4da:	463b      	mov	r3, r7
 801c4dc:	4628      	mov	r0, r5
 801c4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4e2:	f000 b87f 	b.w	801c5e4 <_write_r>

0801c4e6 <__sseek>:
 801c4e6:	b510      	push	{r4, lr}
 801c4e8:	460c      	mov	r4, r1
 801c4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4ee:	f000 f855 	bl	801c59c <_lseek_r>
 801c4f2:	1c43      	adds	r3, r0, #1
 801c4f4:	89a3      	ldrh	r3, [r4, #12]
 801c4f6:	bf15      	itete	ne
 801c4f8:	6520      	strne	r0, [r4, #80]	@ 0x50
 801c4fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c4fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c502:	81a3      	strheq	r3, [r4, #12]
 801c504:	bf18      	it	ne
 801c506:	81a3      	strhne	r3, [r4, #12]
 801c508:	bd10      	pop	{r4, pc}

0801c50a <__sclose>:
 801c50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c50e:	f000 b809 	b.w	801c524 <_close_r>

0801c512 <memset>:
 801c512:	4402      	add	r2, r0
 801c514:	4603      	mov	r3, r0
 801c516:	4293      	cmp	r3, r2
 801c518:	d100      	bne.n	801c51c <memset+0xa>
 801c51a:	4770      	bx	lr
 801c51c:	f803 1b01 	strb.w	r1, [r3], #1
 801c520:	e7f9      	b.n	801c516 <memset+0x4>
	...

0801c524 <_close_r>:
 801c524:	b538      	push	{r3, r4, r5, lr}
 801c526:	4d06      	ldr	r5, [pc, #24]	@ (801c540 <_close_r+0x1c>)
 801c528:	2300      	movs	r3, #0
 801c52a:	4604      	mov	r4, r0
 801c52c:	4608      	mov	r0, r1
 801c52e:	602b      	str	r3, [r5, #0]
 801c530:	f7e7 fca0 	bl	8003e74 <_close>
 801c534:	1c43      	adds	r3, r0, #1
 801c536:	d102      	bne.n	801c53e <_close_r+0x1a>
 801c538:	682b      	ldr	r3, [r5, #0]
 801c53a:	b103      	cbz	r3, 801c53e <_close_r+0x1a>
 801c53c:	6023      	str	r3, [r4, #0]
 801c53e:	bd38      	pop	{r3, r4, r5, pc}
 801c540:	2000d4a4 	.word	0x2000d4a4

0801c544 <_reclaim_reent>:
 801c544:	4b14      	ldr	r3, [pc, #80]	@ (801c598 <_reclaim_reent+0x54>)
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	4283      	cmp	r3, r0
 801c54a:	b570      	push	{r4, r5, r6, lr}
 801c54c:	4604      	mov	r4, r0
 801c54e:	d022      	beq.n	801c596 <_reclaim_reent+0x52>
 801c550:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801c552:	b153      	cbz	r3, 801c56a <_reclaim_reent+0x26>
 801c554:	2500      	movs	r5, #0
 801c556:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801c558:	5959      	ldr	r1, [r3, r5]
 801c55a:	b9b1      	cbnz	r1, 801c58a <_reclaim_reent+0x46>
 801c55c:	3504      	adds	r5, #4
 801c55e:	2d80      	cmp	r5, #128	@ 0x80
 801c560:	d1f9      	bne.n	801c556 <_reclaim_reent+0x12>
 801c562:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c564:	4620      	mov	r0, r4
 801c566:	f000 f8f1 	bl	801c74c <_free_r>
 801c56a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c56c:	b111      	cbz	r1, 801c574 <_reclaim_reent+0x30>
 801c56e:	4620      	mov	r0, r4
 801c570:	f000 f8ec 	bl	801c74c <_free_r>
 801c574:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 801c576:	b111      	cbz	r1, 801c57e <_reclaim_reent+0x3a>
 801c578:	4620      	mov	r0, r4
 801c57a:	f000 f8e7 	bl	801c74c <_free_r>
 801c57e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c580:	b14b      	cbz	r3, 801c596 <_reclaim_reent+0x52>
 801c582:	4620      	mov	r0, r4
 801c584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c588:	4718      	bx	r3
 801c58a:	680e      	ldr	r6, [r1, #0]
 801c58c:	4620      	mov	r0, r4
 801c58e:	f000 f8dd 	bl	801c74c <_free_r>
 801c592:	4631      	mov	r1, r6
 801c594:	e7e1      	b.n	801c55a <_reclaim_reent+0x16>
 801c596:	bd70      	pop	{r4, r5, r6, pc}
 801c598:	20000150 	.word	0x20000150

0801c59c <_lseek_r>:
 801c59c:	b538      	push	{r3, r4, r5, lr}
 801c59e:	4d07      	ldr	r5, [pc, #28]	@ (801c5bc <_lseek_r+0x20>)
 801c5a0:	4604      	mov	r4, r0
 801c5a2:	4608      	mov	r0, r1
 801c5a4:	4611      	mov	r1, r2
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	602a      	str	r2, [r5, #0]
 801c5aa:	461a      	mov	r2, r3
 801c5ac:	f7e7 fc89 	bl	8003ec2 <_lseek>
 801c5b0:	1c43      	adds	r3, r0, #1
 801c5b2:	d102      	bne.n	801c5ba <_lseek_r+0x1e>
 801c5b4:	682b      	ldr	r3, [r5, #0]
 801c5b6:	b103      	cbz	r3, 801c5ba <_lseek_r+0x1e>
 801c5b8:	6023      	str	r3, [r4, #0]
 801c5ba:	bd38      	pop	{r3, r4, r5, pc}
 801c5bc:	2000d4a4 	.word	0x2000d4a4

0801c5c0 <_read_r>:
 801c5c0:	b538      	push	{r3, r4, r5, lr}
 801c5c2:	4d07      	ldr	r5, [pc, #28]	@ (801c5e0 <_read_r+0x20>)
 801c5c4:	4604      	mov	r4, r0
 801c5c6:	4608      	mov	r0, r1
 801c5c8:	4611      	mov	r1, r2
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	602a      	str	r2, [r5, #0]
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	f7e7 fc17 	bl	8003e02 <_read>
 801c5d4:	1c43      	adds	r3, r0, #1
 801c5d6:	d102      	bne.n	801c5de <_read_r+0x1e>
 801c5d8:	682b      	ldr	r3, [r5, #0]
 801c5da:	b103      	cbz	r3, 801c5de <_read_r+0x1e>
 801c5dc:	6023      	str	r3, [r4, #0]
 801c5de:	bd38      	pop	{r3, r4, r5, pc}
 801c5e0:	2000d4a4 	.word	0x2000d4a4

0801c5e4 <_write_r>:
 801c5e4:	b538      	push	{r3, r4, r5, lr}
 801c5e6:	4d07      	ldr	r5, [pc, #28]	@ (801c604 <_write_r+0x20>)
 801c5e8:	4604      	mov	r4, r0
 801c5ea:	4608      	mov	r0, r1
 801c5ec:	4611      	mov	r1, r2
 801c5ee:	2200      	movs	r2, #0
 801c5f0:	602a      	str	r2, [r5, #0]
 801c5f2:	461a      	mov	r2, r3
 801c5f4:	f7e7 fc22 	bl	8003e3c <_write>
 801c5f8:	1c43      	adds	r3, r0, #1
 801c5fa:	d102      	bne.n	801c602 <_write_r+0x1e>
 801c5fc:	682b      	ldr	r3, [r5, #0]
 801c5fe:	b103      	cbz	r3, 801c602 <_write_r+0x1e>
 801c600:	6023      	str	r3, [r4, #0]
 801c602:	bd38      	pop	{r3, r4, r5, pc}
 801c604:	2000d4a4 	.word	0x2000d4a4

0801c608 <__errno>:
 801c608:	4b01      	ldr	r3, [pc, #4]	@ (801c610 <__errno+0x8>)
 801c60a:	6818      	ldr	r0, [r3, #0]
 801c60c:	4770      	bx	lr
 801c60e:	bf00      	nop
 801c610:	20000150 	.word	0x20000150

0801c614 <__libc_init_array>:
 801c614:	b570      	push	{r4, r5, r6, lr}
 801c616:	4d0d      	ldr	r5, [pc, #52]	@ (801c64c <__libc_init_array+0x38>)
 801c618:	4c0d      	ldr	r4, [pc, #52]	@ (801c650 <__libc_init_array+0x3c>)
 801c61a:	1b64      	subs	r4, r4, r5
 801c61c:	10a4      	asrs	r4, r4, #2
 801c61e:	2600      	movs	r6, #0
 801c620:	42a6      	cmp	r6, r4
 801c622:	d109      	bne.n	801c638 <__libc_init_array+0x24>
 801c624:	4d0b      	ldr	r5, [pc, #44]	@ (801c654 <__libc_init_array+0x40>)
 801c626:	4c0c      	ldr	r4, [pc, #48]	@ (801c658 <__libc_init_array+0x44>)
 801c628:	f006 fd8a 	bl	8023140 <_init>
 801c62c:	1b64      	subs	r4, r4, r5
 801c62e:	10a4      	asrs	r4, r4, #2
 801c630:	2600      	movs	r6, #0
 801c632:	42a6      	cmp	r6, r4
 801c634:	d105      	bne.n	801c642 <__libc_init_array+0x2e>
 801c636:	bd70      	pop	{r4, r5, r6, pc}
 801c638:	f855 3b04 	ldr.w	r3, [r5], #4
 801c63c:	4798      	blx	r3
 801c63e:	3601      	adds	r6, #1
 801c640:	e7ee      	b.n	801c620 <__libc_init_array+0xc>
 801c642:	f855 3b04 	ldr.w	r3, [r5], #4
 801c646:	4798      	blx	r3
 801c648:	3601      	adds	r6, #1
 801c64a:	e7f2      	b.n	801c632 <__libc_init_array+0x1e>
 801c64c:	08023f20 	.word	0x08023f20
 801c650:	08023f20 	.word	0x08023f20
 801c654:	08023f20 	.word	0x08023f20
 801c658:	08023f28 	.word	0x08023f28

0801c65c <__retarget_lock_init_recursive>:
 801c65c:	4770      	bx	lr

0801c65e <__retarget_lock_close_recursive>:
 801c65e:	4770      	bx	lr

0801c660 <__retarget_lock_acquire_recursive>:
 801c660:	4770      	bx	lr

0801c662 <__retarget_lock_release_recursive>:
 801c662:	4770      	bx	lr

0801c664 <memcpy>:
 801c664:	440a      	add	r2, r1
 801c666:	4291      	cmp	r1, r2
 801c668:	f100 33ff 	add.w	r3, r0, #4294967295
 801c66c:	d100      	bne.n	801c670 <memcpy+0xc>
 801c66e:	4770      	bx	lr
 801c670:	b510      	push	{r4, lr}
 801c672:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c676:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c67a:	4291      	cmp	r1, r2
 801c67c:	d1f9      	bne.n	801c672 <memcpy+0xe>
 801c67e:	bd10      	pop	{r4, pc}

0801c680 <register_fini>:
 801c680:	4b02      	ldr	r3, [pc, #8]	@ (801c68c <register_fini+0xc>)
 801c682:	b113      	cbz	r3, 801c68a <register_fini+0xa>
 801c684:	4802      	ldr	r0, [pc, #8]	@ (801c690 <register_fini+0x10>)
 801c686:	f000 b805 	b.w	801c694 <atexit>
 801c68a:	4770      	bx	lr
 801c68c:	00000000 	.word	0x00000000
 801c690:	0801e375 	.word	0x0801e375

0801c694 <atexit>:
 801c694:	2300      	movs	r3, #0
 801c696:	4601      	mov	r1, r0
 801c698:	461a      	mov	r2, r3
 801c69a:	4618      	mov	r0, r3
 801c69c:	f001 bec0 	b.w	801e420 <__register_exitproc>

0801c6a0 <_malloc_trim_r>:
 801c6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6a4:	4606      	mov	r6, r0
 801c6a6:	2008      	movs	r0, #8
 801c6a8:	4689      	mov	r9, r1
 801c6aa:	f001 fe77 	bl	801e39c <sysconf>
 801c6ae:	4f24      	ldr	r7, [pc, #144]	@ (801c740 <_malloc_trim_r+0xa0>)
 801c6b0:	4680      	mov	r8, r0
 801c6b2:	4630      	mov	r0, r6
 801c6b4:	f000 fb44 	bl	801cd40 <__malloc_lock>
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	685d      	ldr	r5, [r3, #4]
 801c6bc:	f025 0503 	bic.w	r5, r5, #3
 801c6c0:	f1a5 0411 	sub.w	r4, r5, #17
 801c6c4:	eba4 0409 	sub.w	r4, r4, r9
 801c6c8:	4444      	add	r4, r8
 801c6ca:	fbb4 f4f8 	udiv	r4, r4, r8
 801c6ce:	3c01      	subs	r4, #1
 801c6d0:	fb08 f404 	mul.w	r4, r8, r4
 801c6d4:	45a0      	cmp	r8, r4
 801c6d6:	dd05      	ble.n	801c6e4 <_malloc_trim_r+0x44>
 801c6d8:	4630      	mov	r0, r6
 801c6da:	f000 fb37 	bl	801cd4c <__malloc_unlock>
 801c6de:	2000      	movs	r0, #0
 801c6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c6e4:	2100      	movs	r1, #0
 801c6e6:	4630      	mov	r0, r6
 801c6e8:	f001 fe34 	bl	801e354 <_sbrk_r>
 801c6ec:	68bb      	ldr	r3, [r7, #8]
 801c6ee:	442b      	add	r3, r5
 801c6f0:	4298      	cmp	r0, r3
 801c6f2:	d1f1      	bne.n	801c6d8 <_malloc_trim_r+0x38>
 801c6f4:	4261      	negs	r1, r4
 801c6f6:	4630      	mov	r0, r6
 801c6f8:	f001 fe2c 	bl	801e354 <_sbrk_r>
 801c6fc:	3001      	adds	r0, #1
 801c6fe:	d110      	bne.n	801c722 <_malloc_trim_r+0x82>
 801c700:	2100      	movs	r1, #0
 801c702:	4630      	mov	r0, r6
 801c704:	f001 fe26 	bl	801e354 <_sbrk_r>
 801c708:	68ba      	ldr	r2, [r7, #8]
 801c70a:	1a83      	subs	r3, r0, r2
 801c70c:	2b0f      	cmp	r3, #15
 801c70e:	dde3      	ble.n	801c6d8 <_malloc_trim_r+0x38>
 801c710:	490c      	ldr	r1, [pc, #48]	@ (801c744 <_malloc_trim_r+0xa4>)
 801c712:	6809      	ldr	r1, [r1, #0]
 801c714:	1a40      	subs	r0, r0, r1
 801c716:	490c      	ldr	r1, [pc, #48]	@ (801c748 <_malloc_trim_r+0xa8>)
 801c718:	f043 0301 	orr.w	r3, r3, #1
 801c71c:	6008      	str	r0, [r1, #0]
 801c71e:	6053      	str	r3, [r2, #4]
 801c720:	e7da      	b.n	801c6d8 <_malloc_trim_r+0x38>
 801c722:	68bb      	ldr	r3, [r7, #8]
 801c724:	4a08      	ldr	r2, [pc, #32]	@ (801c748 <_malloc_trim_r+0xa8>)
 801c726:	1b2d      	subs	r5, r5, r4
 801c728:	f045 0501 	orr.w	r5, r5, #1
 801c72c:	605d      	str	r5, [r3, #4]
 801c72e:	6813      	ldr	r3, [r2, #0]
 801c730:	4630      	mov	r0, r6
 801c732:	1b1b      	subs	r3, r3, r4
 801c734:	6013      	str	r3, [r2, #0]
 801c736:	f000 fb09 	bl	801cd4c <__malloc_unlock>
 801c73a:	2001      	movs	r0, #1
 801c73c:	e7d0      	b.n	801c6e0 <_malloc_trim_r+0x40>
 801c73e:	bf00      	nop
 801c740:	20000284 	.word	0x20000284
 801c744:	2000027c 	.word	0x2000027c
 801c748:	2000d4b0 	.word	0x2000d4b0

0801c74c <_free_r>:
 801c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c74e:	4604      	mov	r4, r0
 801c750:	460f      	mov	r7, r1
 801c752:	2900      	cmp	r1, #0
 801c754:	f000 80b1 	beq.w	801c8ba <_free_r+0x16e>
 801c758:	f000 faf2 	bl	801cd40 <__malloc_lock>
 801c75c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801c760:	4d56      	ldr	r5, [pc, #344]	@ (801c8bc <_free_r+0x170>)
 801c762:	f022 0001 	bic.w	r0, r2, #1
 801c766:	f1a7 0308 	sub.w	r3, r7, #8
 801c76a:	eb03 0c00 	add.w	ip, r3, r0
 801c76e:	68a9      	ldr	r1, [r5, #8]
 801c770:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801c774:	4561      	cmp	r1, ip
 801c776:	f026 0603 	bic.w	r6, r6, #3
 801c77a:	f002 0201 	and.w	r2, r2, #1
 801c77e:	d11b      	bne.n	801c7b8 <_free_r+0x6c>
 801c780:	4406      	add	r6, r0
 801c782:	b93a      	cbnz	r2, 801c794 <_free_r+0x48>
 801c784:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801c788:	1a9b      	subs	r3, r3, r2
 801c78a:	4416      	add	r6, r2
 801c78c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801c790:	60ca      	str	r2, [r1, #12]
 801c792:	6091      	str	r1, [r2, #8]
 801c794:	f046 0201 	orr.w	r2, r6, #1
 801c798:	605a      	str	r2, [r3, #4]
 801c79a:	60ab      	str	r3, [r5, #8]
 801c79c:	4b48      	ldr	r3, [pc, #288]	@ (801c8c0 <_free_r+0x174>)
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	42b3      	cmp	r3, r6
 801c7a2:	d804      	bhi.n	801c7ae <_free_r+0x62>
 801c7a4:	4b47      	ldr	r3, [pc, #284]	@ (801c8c4 <_free_r+0x178>)
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	6819      	ldr	r1, [r3, #0]
 801c7aa:	f7ff ff79 	bl	801c6a0 <_malloc_trim_r>
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c7b4:	f000 baca 	b.w	801cd4c <__malloc_unlock>
 801c7b8:	f8cc 6004 	str.w	r6, [ip, #4]
 801c7bc:	2a00      	cmp	r2, #0
 801c7be:	d138      	bne.n	801c832 <_free_r+0xe6>
 801c7c0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801c7c4:	1a5b      	subs	r3, r3, r1
 801c7c6:	4408      	add	r0, r1
 801c7c8:	6899      	ldr	r1, [r3, #8]
 801c7ca:	f105 0708 	add.w	r7, r5, #8
 801c7ce:	42b9      	cmp	r1, r7
 801c7d0:	d031      	beq.n	801c836 <_free_r+0xea>
 801c7d2:	68df      	ldr	r7, [r3, #12]
 801c7d4:	60cf      	str	r7, [r1, #12]
 801c7d6:	60b9      	str	r1, [r7, #8]
 801c7d8:	eb0c 0106 	add.w	r1, ip, r6
 801c7dc:	6849      	ldr	r1, [r1, #4]
 801c7de:	07c9      	lsls	r1, r1, #31
 801c7e0:	d40b      	bmi.n	801c7fa <_free_r+0xae>
 801c7e2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801c7e6:	4430      	add	r0, r6
 801c7e8:	bb3a      	cbnz	r2, 801c83a <_free_r+0xee>
 801c7ea:	4e37      	ldr	r6, [pc, #220]	@ (801c8c8 <_free_r+0x17c>)
 801c7ec:	42b1      	cmp	r1, r6
 801c7ee:	d124      	bne.n	801c83a <_free_r+0xee>
 801c7f0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801c7f4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801c7f8:	2201      	movs	r2, #1
 801c7fa:	f040 0101 	orr.w	r1, r0, #1
 801c7fe:	6059      	str	r1, [r3, #4]
 801c800:	5018      	str	r0, [r3, r0]
 801c802:	2a00      	cmp	r2, #0
 801c804:	d1d3      	bne.n	801c7ae <_free_r+0x62>
 801c806:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801c80a:	d21b      	bcs.n	801c844 <_free_r+0xf8>
 801c80c:	08c2      	lsrs	r2, r0, #3
 801c80e:	2101      	movs	r1, #1
 801c810:	0940      	lsrs	r0, r0, #5
 801c812:	4081      	lsls	r1, r0
 801c814:	6868      	ldr	r0, [r5, #4]
 801c816:	3201      	adds	r2, #1
 801c818:	4301      	orrs	r1, r0
 801c81a:	6069      	str	r1, [r5, #4]
 801c81c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 801c820:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 801c824:	3908      	subs	r1, #8
 801c826:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c82a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 801c82e:	60c3      	str	r3, [r0, #12]
 801c830:	e7bd      	b.n	801c7ae <_free_r+0x62>
 801c832:	2200      	movs	r2, #0
 801c834:	e7d0      	b.n	801c7d8 <_free_r+0x8c>
 801c836:	2201      	movs	r2, #1
 801c838:	e7ce      	b.n	801c7d8 <_free_r+0x8c>
 801c83a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801c83e:	60ce      	str	r6, [r1, #12]
 801c840:	60b1      	str	r1, [r6, #8]
 801c842:	e7da      	b.n	801c7fa <_free_r+0xae>
 801c844:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 801c848:	ea4f 2250 	mov.w	r2, r0, lsr #9
 801c84c:	d214      	bcs.n	801c878 <_free_r+0x12c>
 801c84e:	0982      	lsrs	r2, r0, #6
 801c850:	3238      	adds	r2, #56	@ 0x38
 801c852:	1c51      	adds	r1, r2, #1
 801c854:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801c858:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801c85c:	428e      	cmp	r6, r1
 801c85e:	d125      	bne.n	801c8ac <_free_r+0x160>
 801c860:	2001      	movs	r0, #1
 801c862:	1092      	asrs	r2, r2, #2
 801c864:	fa00 f202 	lsl.w	r2, r0, r2
 801c868:	6868      	ldr	r0, [r5, #4]
 801c86a:	4302      	orrs	r2, r0
 801c86c:	606a      	str	r2, [r5, #4]
 801c86e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801c872:	60b3      	str	r3, [r6, #8]
 801c874:	60cb      	str	r3, [r1, #12]
 801c876:	e79a      	b.n	801c7ae <_free_r+0x62>
 801c878:	2a14      	cmp	r2, #20
 801c87a:	d801      	bhi.n	801c880 <_free_r+0x134>
 801c87c:	325b      	adds	r2, #91	@ 0x5b
 801c87e:	e7e8      	b.n	801c852 <_free_r+0x106>
 801c880:	2a54      	cmp	r2, #84	@ 0x54
 801c882:	d802      	bhi.n	801c88a <_free_r+0x13e>
 801c884:	0b02      	lsrs	r2, r0, #12
 801c886:	326e      	adds	r2, #110	@ 0x6e
 801c888:	e7e3      	b.n	801c852 <_free_r+0x106>
 801c88a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801c88e:	d802      	bhi.n	801c896 <_free_r+0x14a>
 801c890:	0bc2      	lsrs	r2, r0, #15
 801c892:	3277      	adds	r2, #119	@ 0x77
 801c894:	e7dd      	b.n	801c852 <_free_r+0x106>
 801c896:	f240 5154 	movw	r1, #1364	@ 0x554
 801c89a:	428a      	cmp	r2, r1
 801c89c:	bf9a      	itte	ls
 801c89e:	0c82      	lsrls	r2, r0, #18
 801c8a0:	327c      	addls	r2, #124	@ 0x7c
 801c8a2:	227e      	movhi	r2, #126	@ 0x7e
 801c8a4:	e7d5      	b.n	801c852 <_free_r+0x106>
 801c8a6:	6889      	ldr	r1, [r1, #8]
 801c8a8:	428e      	cmp	r6, r1
 801c8aa:	d004      	beq.n	801c8b6 <_free_r+0x16a>
 801c8ac:	684a      	ldr	r2, [r1, #4]
 801c8ae:	f022 0203 	bic.w	r2, r2, #3
 801c8b2:	4282      	cmp	r2, r0
 801c8b4:	d8f7      	bhi.n	801c8a6 <_free_r+0x15a>
 801c8b6:	68ce      	ldr	r6, [r1, #12]
 801c8b8:	e7d9      	b.n	801c86e <_free_r+0x122>
 801c8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8bc:	20000284 	.word	0x20000284
 801c8c0:	20000280 	.word	0x20000280
 801c8c4:	2000d4e0 	.word	0x2000d4e0
 801c8c8:	2000028c 	.word	0x2000028c

0801c8cc <_malloc_r>:
 801c8cc:	f101 030b 	add.w	r3, r1, #11
 801c8d0:	2b16      	cmp	r3, #22
 801c8d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d6:	4605      	mov	r5, r0
 801c8d8:	d906      	bls.n	801c8e8 <_malloc_r+0x1c>
 801c8da:	f033 0707 	bics.w	r7, r3, #7
 801c8de:	d504      	bpl.n	801c8ea <_malloc_r+0x1e>
 801c8e0:	230c      	movs	r3, #12
 801c8e2:	602b      	str	r3, [r5, #0]
 801c8e4:	2400      	movs	r4, #0
 801c8e6:	e1a3      	b.n	801cc30 <_malloc_r+0x364>
 801c8e8:	2710      	movs	r7, #16
 801c8ea:	42b9      	cmp	r1, r7
 801c8ec:	d8f8      	bhi.n	801c8e0 <_malloc_r+0x14>
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	f000 fa26 	bl	801cd40 <__malloc_lock>
 801c8f4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 801c8f8:	4eaf      	ldr	r6, [pc, #700]	@ (801cbb8 <_malloc_r+0x2ec>)
 801c8fa:	d237      	bcs.n	801c96c <_malloc_r+0xa0>
 801c8fc:	f107 0208 	add.w	r2, r7, #8
 801c900:	4432      	add	r2, r6
 801c902:	f1a2 0108 	sub.w	r1, r2, #8
 801c906:	6854      	ldr	r4, [r2, #4]
 801c908:	428c      	cmp	r4, r1
 801c90a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801c90e:	d102      	bne.n	801c916 <_malloc_r+0x4a>
 801c910:	68d4      	ldr	r4, [r2, #12]
 801c912:	42a2      	cmp	r2, r4
 801c914:	d010      	beq.n	801c938 <_malloc_r+0x6c>
 801c916:	6863      	ldr	r3, [r4, #4]
 801c918:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801c91c:	f023 0303 	bic.w	r3, r3, #3
 801c920:	60ca      	str	r2, [r1, #12]
 801c922:	4423      	add	r3, r4
 801c924:	6091      	str	r1, [r2, #8]
 801c926:	685a      	ldr	r2, [r3, #4]
 801c928:	f042 0201 	orr.w	r2, r2, #1
 801c92c:	605a      	str	r2, [r3, #4]
 801c92e:	4628      	mov	r0, r5
 801c930:	f000 fa0c 	bl	801cd4c <__malloc_unlock>
 801c934:	3408      	adds	r4, #8
 801c936:	e17b      	b.n	801cc30 <_malloc_r+0x364>
 801c938:	3302      	adds	r3, #2
 801c93a:	6934      	ldr	r4, [r6, #16]
 801c93c:	499f      	ldr	r1, [pc, #636]	@ (801cbbc <_malloc_r+0x2f0>)
 801c93e:	428c      	cmp	r4, r1
 801c940:	d077      	beq.n	801ca32 <_malloc_r+0x166>
 801c942:	6862      	ldr	r2, [r4, #4]
 801c944:	f022 0c03 	bic.w	ip, r2, #3
 801c948:	ebac 0007 	sub.w	r0, ip, r7
 801c94c:	280f      	cmp	r0, #15
 801c94e:	dd48      	ble.n	801c9e2 <_malloc_r+0x116>
 801c950:	19e2      	adds	r2, r4, r7
 801c952:	f040 0301 	orr.w	r3, r0, #1
 801c956:	f047 0701 	orr.w	r7, r7, #1
 801c95a:	6067      	str	r7, [r4, #4]
 801c95c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801c960:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801c964:	6053      	str	r3, [r2, #4]
 801c966:	f844 000c 	str.w	r0, [r4, ip]
 801c96a:	e7e0      	b.n	801c92e <_malloc_r+0x62>
 801c96c:	0a7b      	lsrs	r3, r7, #9
 801c96e:	d02a      	beq.n	801c9c6 <_malloc_r+0xfa>
 801c970:	2b04      	cmp	r3, #4
 801c972:	d812      	bhi.n	801c99a <_malloc_r+0xce>
 801c974:	09bb      	lsrs	r3, r7, #6
 801c976:	3338      	adds	r3, #56	@ 0x38
 801c978:	1c5a      	adds	r2, r3, #1
 801c97a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801c97e:	f1a2 0c08 	sub.w	ip, r2, #8
 801c982:	6854      	ldr	r4, [r2, #4]
 801c984:	4564      	cmp	r4, ip
 801c986:	d006      	beq.n	801c996 <_malloc_r+0xca>
 801c988:	6862      	ldr	r2, [r4, #4]
 801c98a:	f022 0203 	bic.w	r2, r2, #3
 801c98e:	1bd0      	subs	r0, r2, r7
 801c990:	280f      	cmp	r0, #15
 801c992:	dd1c      	ble.n	801c9ce <_malloc_r+0x102>
 801c994:	3b01      	subs	r3, #1
 801c996:	3301      	adds	r3, #1
 801c998:	e7cf      	b.n	801c93a <_malloc_r+0x6e>
 801c99a:	2b14      	cmp	r3, #20
 801c99c:	d801      	bhi.n	801c9a2 <_malloc_r+0xd6>
 801c99e:	335b      	adds	r3, #91	@ 0x5b
 801c9a0:	e7ea      	b.n	801c978 <_malloc_r+0xac>
 801c9a2:	2b54      	cmp	r3, #84	@ 0x54
 801c9a4:	d802      	bhi.n	801c9ac <_malloc_r+0xe0>
 801c9a6:	0b3b      	lsrs	r3, r7, #12
 801c9a8:	336e      	adds	r3, #110	@ 0x6e
 801c9aa:	e7e5      	b.n	801c978 <_malloc_r+0xac>
 801c9ac:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801c9b0:	d802      	bhi.n	801c9b8 <_malloc_r+0xec>
 801c9b2:	0bfb      	lsrs	r3, r7, #15
 801c9b4:	3377      	adds	r3, #119	@ 0x77
 801c9b6:	e7df      	b.n	801c978 <_malloc_r+0xac>
 801c9b8:	f240 5254 	movw	r2, #1364	@ 0x554
 801c9bc:	4293      	cmp	r3, r2
 801c9be:	d804      	bhi.n	801c9ca <_malloc_r+0xfe>
 801c9c0:	0cbb      	lsrs	r3, r7, #18
 801c9c2:	337c      	adds	r3, #124	@ 0x7c
 801c9c4:	e7d8      	b.n	801c978 <_malloc_r+0xac>
 801c9c6:	233f      	movs	r3, #63	@ 0x3f
 801c9c8:	e7d6      	b.n	801c978 <_malloc_r+0xac>
 801c9ca:	237e      	movs	r3, #126	@ 0x7e
 801c9cc:	e7d4      	b.n	801c978 <_malloc_r+0xac>
 801c9ce:	2800      	cmp	r0, #0
 801c9d0:	68e1      	ldr	r1, [r4, #12]
 801c9d2:	db04      	blt.n	801c9de <_malloc_r+0x112>
 801c9d4:	68a3      	ldr	r3, [r4, #8]
 801c9d6:	60d9      	str	r1, [r3, #12]
 801c9d8:	608b      	str	r3, [r1, #8]
 801c9da:	18a3      	adds	r3, r4, r2
 801c9dc:	e7a3      	b.n	801c926 <_malloc_r+0x5a>
 801c9de:	460c      	mov	r4, r1
 801c9e0:	e7d0      	b.n	801c984 <_malloc_r+0xb8>
 801c9e2:	2800      	cmp	r0, #0
 801c9e4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801c9e8:	db07      	blt.n	801c9fa <_malloc_r+0x12e>
 801c9ea:	44a4      	add	ip, r4
 801c9ec:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c9f0:	f043 0301 	orr.w	r3, r3, #1
 801c9f4:	f8cc 3004 	str.w	r3, [ip, #4]
 801c9f8:	e799      	b.n	801c92e <_malloc_r+0x62>
 801c9fa:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801c9fe:	6870      	ldr	r0, [r6, #4]
 801ca00:	f080 8095 	bcs.w	801cb2e <_malloc_r+0x262>
 801ca04:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801ca08:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801ca0c:	f04f 0c01 	mov.w	ip, #1
 801ca10:	3201      	adds	r2, #1
 801ca12:	fa0c fc0e 	lsl.w	ip, ip, lr
 801ca16:	ea4c 0000 	orr.w	r0, ip, r0
 801ca1a:	6070      	str	r0, [r6, #4]
 801ca1c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801ca20:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801ca24:	3808      	subs	r0, #8
 801ca26:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801ca2a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801ca2e:	f8cc 400c 	str.w	r4, [ip, #12]
 801ca32:	1098      	asrs	r0, r3, #2
 801ca34:	2201      	movs	r2, #1
 801ca36:	4082      	lsls	r2, r0
 801ca38:	6870      	ldr	r0, [r6, #4]
 801ca3a:	4290      	cmp	r0, r2
 801ca3c:	d326      	bcc.n	801ca8c <_malloc_r+0x1c0>
 801ca3e:	4210      	tst	r0, r2
 801ca40:	d106      	bne.n	801ca50 <_malloc_r+0x184>
 801ca42:	f023 0303 	bic.w	r3, r3, #3
 801ca46:	0052      	lsls	r2, r2, #1
 801ca48:	4210      	tst	r0, r2
 801ca4a:	f103 0304 	add.w	r3, r3, #4
 801ca4e:	d0fa      	beq.n	801ca46 <_malloc_r+0x17a>
 801ca50:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801ca54:	46c1      	mov	r9, r8
 801ca56:	469e      	mov	lr, r3
 801ca58:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801ca5c:	454c      	cmp	r4, r9
 801ca5e:	f040 80b9 	bne.w	801cbd4 <_malloc_r+0x308>
 801ca62:	f10e 0e01 	add.w	lr, lr, #1
 801ca66:	f01e 0f03 	tst.w	lr, #3
 801ca6a:	f109 0908 	add.w	r9, r9, #8
 801ca6e:	d1f3      	bne.n	801ca58 <_malloc_r+0x18c>
 801ca70:	0798      	lsls	r0, r3, #30
 801ca72:	f040 80e3 	bne.w	801cc3c <_malloc_r+0x370>
 801ca76:	6873      	ldr	r3, [r6, #4]
 801ca78:	ea23 0302 	bic.w	r3, r3, r2
 801ca7c:	6073      	str	r3, [r6, #4]
 801ca7e:	6870      	ldr	r0, [r6, #4]
 801ca80:	0052      	lsls	r2, r2, #1
 801ca82:	4290      	cmp	r0, r2
 801ca84:	d302      	bcc.n	801ca8c <_malloc_r+0x1c0>
 801ca86:	2a00      	cmp	r2, #0
 801ca88:	f040 80e5 	bne.w	801cc56 <_malloc_r+0x38a>
 801ca8c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801ca90:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ca94:	f023 0903 	bic.w	r9, r3, #3
 801ca98:	45b9      	cmp	r9, r7
 801ca9a:	d304      	bcc.n	801caa6 <_malloc_r+0x1da>
 801ca9c:	eba9 0207 	sub.w	r2, r9, r7
 801caa0:	2a0f      	cmp	r2, #15
 801caa2:	f300 8141 	bgt.w	801cd28 <_malloc_r+0x45c>
 801caa6:	4b46      	ldr	r3, [pc, #280]	@ (801cbc0 <_malloc_r+0x2f4>)
 801caa8:	6819      	ldr	r1, [r3, #0]
 801caaa:	3110      	adds	r1, #16
 801caac:	4439      	add	r1, r7
 801caae:	2008      	movs	r0, #8
 801cab0:	9101      	str	r1, [sp, #4]
 801cab2:	f001 fc73 	bl	801e39c <sysconf>
 801cab6:	4a43      	ldr	r2, [pc, #268]	@ (801cbc4 <_malloc_r+0x2f8>)
 801cab8:	9901      	ldr	r1, [sp, #4]
 801caba:	6813      	ldr	r3, [r2, #0]
 801cabc:	3301      	adds	r3, #1
 801cabe:	bf1f      	itttt	ne
 801cac0:	f101 31ff 	addne.w	r1, r1, #4294967295
 801cac4:	1809      	addne	r1, r1, r0
 801cac6:	4243      	negne	r3, r0
 801cac8:	4019      	andne	r1, r3
 801caca:	4680      	mov	r8, r0
 801cacc:	4628      	mov	r0, r5
 801cace:	9101      	str	r1, [sp, #4]
 801cad0:	f001 fc40 	bl	801e354 <_sbrk_r>
 801cad4:	1c42      	adds	r2, r0, #1
 801cad6:	eb0a 0b09 	add.w	fp, sl, r9
 801cada:	4604      	mov	r4, r0
 801cadc:	f000 80f7 	beq.w	801ccce <_malloc_r+0x402>
 801cae0:	4583      	cmp	fp, r0
 801cae2:	9901      	ldr	r1, [sp, #4]
 801cae4:	4a37      	ldr	r2, [pc, #220]	@ (801cbc4 <_malloc_r+0x2f8>)
 801cae6:	d902      	bls.n	801caee <_malloc_r+0x222>
 801cae8:	45b2      	cmp	sl, r6
 801caea:	f040 80f0 	bne.w	801ccce <_malloc_r+0x402>
 801caee:	4b36      	ldr	r3, [pc, #216]	@ (801cbc8 <_malloc_r+0x2fc>)
 801caf0:	6818      	ldr	r0, [r3, #0]
 801caf2:	45a3      	cmp	fp, r4
 801caf4:	eb00 0e01 	add.w	lr, r0, r1
 801caf8:	f8c3 e000 	str.w	lr, [r3]
 801cafc:	f108 3cff 	add.w	ip, r8, #4294967295
 801cb00:	f040 80ab 	bne.w	801cc5a <_malloc_r+0x38e>
 801cb04:	ea1b 0f0c 	tst.w	fp, ip
 801cb08:	f040 80a7 	bne.w	801cc5a <_malloc_r+0x38e>
 801cb0c:	68b2      	ldr	r2, [r6, #8]
 801cb0e:	4449      	add	r1, r9
 801cb10:	f041 0101 	orr.w	r1, r1, #1
 801cb14:	6051      	str	r1, [r2, #4]
 801cb16:	4a2d      	ldr	r2, [pc, #180]	@ (801cbcc <_malloc_r+0x300>)
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	6811      	ldr	r1, [r2, #0]
 801cb1c:	428b      	cmp	r3, r1
 801cb1e:	bf88      	it	hi
 801cb20:	6013      	strhi	r3, [r2, #0]
 801cb22:	4a2b      	ldr	r2, [pc, #172]	@ (801cbd0 <_malloc_r+0x304>)
 801cb24:	6811      	ldr	r1, [r2, #0]
 801cb26:	428b      	cmp	r3, r1
 801cb28:	bf88      	it	hi
 801cb2a:	6013      	strhi	r3, [r2, #0]
 801cb2c:	e0cf      	b.n	801ccce <_malloc_r+0x402>
 801cb2e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801cb32:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801cb36:	d218      	bcs.n	801cb6a <_malloc_r+0x29e>
 801cb38:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801cb3c:	3238      	adds	r2, #56	@ 0x38
 801cb3e:	f102 0e01 	add.w	lr, r2, #1
 801cb42:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801cb46:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801cb4a:	45f0      	cmp	r8, lr
 801cb4c:	d12b      	bne.n	801cba6 <_malloc_r+0x2da>
 801cb4e:	1092      	asrs	r2, r2, #2
 801cb50:	f04f 0c01 	mov.w	ip, #1
 801cb54:	fa0c f202 	lsl.w	r2, ip, r2
 801cb58:	4302      	orrs	r2, r0
 801cb5a:	6072      	str	r2, [r6, #4]
 801cb5c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801cb60:	f8c8 4008 	str.w	r4, [r8, #8]
 801cb64:	f8ce 400c 	str.w	r4, [lr, #12]
 801cb68:	e763      	b.n	801ca32 <_malloc_r+0x166>
 801cb6a:	2a14      	cmp	r2, #20
 801cb6c:	d801      	bhi.n	801cb72 <_malloc_r+0x2a6>
 801cb6e:	325b      	adds	r2, #91	@ 0x5b
 801cb70:	e7e5      	b.n	801cb3e <_malloc_r+0x272>
 801cb72:	2a54      	cmp	r2, #84	@ 0x54
 801cb74:	d803      	bhi.n	801cb7e <_malloc_r+0x2b2>
 801cb76:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801cb7a:	326e      	adds	r2, #110	@ 0x6e
 801cb7c:	e7df      	b.n	801cb3e <_malloc_r+0x272>
 801cb7e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801cb82:	d803      	bhi.n	801cb8c <_malloc_r+0x2c0>
 801cb84:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801cb88:	3277      	adds	r2, #119	@ 0x77
 801cb8a:	e7d8      	b.n	801cb3e <_malloc_r+0x272>
 801cb8c:	f240 5e54 	movw	lr, #1364	@ 0x554
 801cb90:	4572      	cmp	r2, lr
 801cb92:	bf9a      	itte	ls
 801cb94:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801cb98:	327c      	addls	r2, #124	@ 0x7c
 801cb9a:	227e      	movhi	r2, #126	@ 0x7e
 801cb9c:	e7cf      	b.n	801cb3e <_malloc_r+0x272>
 801cb9e:	f8de e008 	ldr.w	lr, [lr, #8]
 801cba2:	45f0      	cmp	r8, lr
 801cba4:	d005      	beq.n	801cbb2 <_malloc_r+0x2e6>
 801cba6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cbaa:	f022 0203 	bic.w	r2, r2, #3
 801cbae:	4562      	cmp	r2, ip
 801cbb0:	d8f5      	bhi.n	801cb9e <_malloc_r+0x2d2>
 801cbb2:	f8de 800c 	ldr.w	r8, [lr, #12]
 801cbb6:	e7d1      	b.n	801cb5c <_malloc_r+0x290>
 801cbb8:	20000284 	.word	0x20000284
 801cbbc:	2000028c 	.word	0x2000028c
 801cbc0:	2000d4e0 	.word	0x2000d4e0
 801cbc4:	2000027c 	.word	0x2000027c
 801cbc8:	2000d4b0 	.word	0x2000d4b0
 801cbcc:	2000d4dc 	.word	0x2000d4dc
 801cbd0:	2000d4d8 	.word	0x2000d4d8
 801cbd4:	6860      	ldr	r0, [r4, #4]
 801cbd6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801cbda:	f020 0003 	bic.w	r0, r0, #3
 801cbde:	eba0 0a07 	sub.w	sl, r0, r7
 801cbe2:	f1ba 0f0f 	cmp.w	sl, #15
 801cbe6:	dd12      	ble.n	801cc0e <_malloc_r+0x342>
 801cbe8:	68a3      	ldr	r3, [r4, #8]
 801cbea:	19e2      	adds	r2, r4, r7
 801cbec:	f047 0701 	orr.w	r7, r7, #1
 801cbf0:	6067      	str	r7, [r4, #4]
 801cbf2:	f8c3 c00c 	str.w	ip, [r3, #12]
 801cbf6:	f8cc 3008 	str.w	r3, [ip, #8]
 801cbfa:	f04a 0301 	orr.w	r3, sl, #1
 801cbfe:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801cc02:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801cc06:	6053      	str	r3, [r2, #4]
 801cc08:	f844 a000 	str.w	sl, [r4, r0]
 801cc0c:	e68f      	b.n	801c92e <_malloc_r+0x62>
 801cc0e:	f1ba 0f00 	cmp.w	sl, #0
 801cc12:	db11      	blt.n	801cc38 <_malloc_r+0x36c>
 801cc14:	4420      	add	r0, r4
 801cc16:	6843      	ldr	r3, [r0, #4]
 801cc18:	f043 0301 	orr.w	r3, r3, #1
 801cc1c:	6043      	str	r3, [r0, #4]
 801cc1e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801cc22:	4628      	mov	r0, r5
 801cc24:	f8c3 c00c 	str.w	ip, [r3, #12]
 801cc28:	f8cc 3008 	str.w	r3, [ip, #8]
 801cc2c:	f000 f88e 	bl	801cd4c <__malloc_unlock>
 801cc30:	4620      	mov	r0, r4
 801cc32:	b003      	add	sp, #12
 801cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc38:	4664      	mov	r4, ip
 801cc3a:	e70f      	b.n	801ca5c <_malloc_r+0x190>
 801cc3c:	f858 0908 	ldr.w	r0, [r8], #-8
 801cc40:	4540      	cmp	r0, r8
 801cc42:	f103 33ff 	add.w	r3, r3, #4294967295
 801cc46:	f43f af13 	beq.w	801ca70 <_malloc_r+0x1a4>
 801cc4a:	e718      	b.n	801ca7e <_malloc_r+0x1b2>
 801cc4c:	3304      	adds	r3, #4
 801cc4e:	0052      	lsls	r2, r2, #1
 801cc50:	4210      	tst	r0, r2
 801cc52:	d0fb      	beq.n	801cc4c <_malloc_r+0x380>
 801cc54:	e6fc      	b.n	801ca50 <_malloc_r+0x184>
 801cc56:	4673      	mov	r3, lr
 801cc58:	e7fa      	b.n	801cc50 <_malloc_r+0x384>
 801cc5a:	6810      	ldr	r0, [r2, #0]
 801cc5c:	3001      	adds	r0, #1
 801cc5e:	bf1b      	ittet	ne
 801cc60:	eba4 0b0b 	subne.w	fp, r4, fp
 801cc64:	eb0b 020e 	addne.w	r2, fp, lr
 801cc68:	6014      	streq	r4, [r2, #0]
 801cc6a:	601a      	strne	r2, [r3, #0]
 801cc6c:	f014 0b07 	ands.w	fp, r4, #7
 801cc70:	bf1a      	itte	ne
 801cc72:	f1cb 0008 	rsbne	r0, fp, #8
 801cc76:	1824      	addne	r4, r4, r0
 801cc78:	4658      	moveq	r0, fp
 801cc7a:	1862      	adds	r2, r4, r1
 801cc7c:	ea02 010c 	and.w	r1, r2, ip
 801cc80:	4480      	add	r8, r0
 801cc82:	eba8 0801 	sub.w	r8, r8, r1
 801cc86:	ea08 080c 	and.w	r8, r8, ip
 801cc8a:	4641      	mov	r1, r8
 801cc8c:	4628      	mov	r0, r5
 801cc8e:	9201      	str	r2, [sp, #4]
 801cc90:	f001 fb60 	bl	801e354 <_sbrk_r>
 801cc94:	1c43      	adds	r3, r0, #1
 801cc96:	9a01      	ldr	r2, [sp, #4]
 801cc98:	4b28      	ldr	r3, [pc, #160]	@ (801cd3c <_malloc_r+0x470>)
 801cc9a:	d107      	bne.n	801ccac <_malloc_r+0x3e0>
 801cc9c:	f1bb 0f00 	cmp.w	fp, #0
 801cca0:	d023      	beq.n	801ccea <_malloc_r+0x41e>
 801cca2:	f1ab 0008 	sub.w	r0, fp, #8
 801cca6:	4410      	add	r0, r2
 801cca8:	f04f 0800 	mov.w	r8, #0
 801ccac:	681a      	ldr	r2, [r3, #0]
 801ccae:	60b4      	str	r4, [r6, #8]
 801ccb0:	1b00      	subs	r0, r0, r4
 801ccb2:	4440      	add	r0, r8
 801ccb4:	4442      	add	r2, r8
 801ccb6:	f040 0001 	orr.w	r0, r0, #1
 801ccba:	45b2      	cmp	sl, r6
 801ccbc:	601a      	str	r2, [r3, #0]
 801ccbe:	6060      	str	r0, [r4, #4]
 801ccc0:	f43f af29 	beq.w	801cb16 <_malloc_r+0x24a>
 801ccc4:	f1b9 0f0f 	cmp.w	r9, #15
 801ccc8:	d812      	bhi.n	801ccf0 <_malloc_r+0x424>
 801ccca:	2301      	movs	r3, #1
 801cccc:	6063      	str	r3, [r4, #4]
 801ccce:	68b3      	ldr	r3, [r6, #8]
 801ccd0:	685b      	ldr	r3, [r3, #4]
 801ccd2:	f023 0303 	bic.w	r3, r3, #3
 801ccd6:	42bb      	cmp	r3, r7
 801ccd8:	eba3 0207 	sub.w	r2, r3, r7
 801ccdc:	d301      	bcc.n	801cce2 <_malloc_r+0x416>
 801ccde:	2a0f      	cmp	r2, #15
 801cce0:	dc22      	bgt.n	801cd28 <_malloc_r+0x45c>
 801cce2:	4628      	mov	r0, r5
 801cce4:	f000 f832 	bl	801cd4c <__malloc_unlock>
 801cce8:	e5fc      	b.n	801c8e4 <_malloc_r+0x18>
 801ccea:	4610      	mov	r0, r2
 801ccec:	46d8      	mov	r8, fp
 801ccee:	e7dd      	b.n	801ccac <_malloc_r+0x3e0>
 801ccf0:	f8da 2004 	ldr.w	r2, [sl, #4]
 801ccf4:	f1a9 090c 	sub.w	r9, r9, #12
 801ccf8:	f029 0907 	bic.w	r9, r9, #7
 801ccfc:	f002 0201 	and.w	r2, r2, #1
 801cd00:	ea42 0209 	orr.w	r2, r2, r9
 801cd04:	f8ca 2004 	str.w	r2, [sl, #4]
 801cd08:	2105      	movs	r1, #5
 801cd0a:	eb0a 0209 	add.w	r2, sl, r9
 801cd0e:	f1b9 0f0f 	cmp.w	r9, #15
 801cd12:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801cd16:	f67f aefe 	bls.w	801cb16 <_malloc_r+0x24a>
 801cd1a:	f10a 0108 	add.w	r1, sl, #8
 801cd1e:	4628      	mov	r0, r5
 801cd20:	f7ff fd14 	bl	801c74c <_free_r>
 801cd24:	4b05      	ldr	r3, [pc, #20]	@ (801cd3c <_malloc_r+0x470>)
 801cd26:	e6f6      	b.n	801cb16 <_malloc_r+0x24a>
 801cd28:	68b4      	ldr	r4, [r6, #8]
 801cd2a:	f047 0301 	orr.w	r3, r7, #1
 801cd2e:	4427      	add	r7, r4
 801cd30:	f042 0201 	orr.w	r2, r2, #1
 801cd34:	6063      	str	r3, [r4, #4]
 801cd36:	60b7      	str	r7, [r6, #8]
 801cd38:	607a      	str	r2, [r7, #4]
 801cd3a:	e5f8      	b.n	801c92e <_malloc_r+0x62>
 801cd3c:	2000d4b0 	.word	0x2000d4b0

0801cd40 <__malloc_lock>:
 801cd40:	4801      	ldr	r0, [pc, #4]	@ (801cd48 <__malloc_lock+0x8>)
 801cd42:	f7ff bc8d 	b.w	801c660 <__retarget_lock_acquire_recursive>
 801cd46:	bf00      	nop
 801cd48:	2000d4a8 	.word	0x2000d4a8

0801cd4c <__malloc_unlock>:
 801cd4c:	4801      	ldr	r0, [pc, #4]	@ (801cd54 <__malloc_unlock+0x8>)
 801cd4e:	f7ff bc88 	b.w	801c662 <__retarget_lock_release_recursive>
 801cd52:	bf00      	nop
 801cd54:	2000d4a8 	.word	0x2000d4a8

0801cd58 <_svfprintf_r>:
 801cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd5c:	b0d3      	sub	sp, #332	@ 0x14c
 801cd5e:	468b      	mov	fp, r1
 801cd60:	4691      	mov	r9, r2
 801cd62:	461e      	mov	r6, r3
 801cd64:	9003      	str	r0, [sp, #12]
 801cd66:	f001 faf1 	bl	801e34c <_localeconv_r>
 801cd6a:	6803      	ldr	r3, [r0, #0]
 801cd6c:	9316      	str	r3, [sp, #88]	@ 0x58
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f7e3 fa2e 	bl	80001d0 <strlen>
 801cd74:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801cd78:	900d      	str	r0, [sp, #52]	@ 0x34
 801cd7a:	061b      	lsls	r3, r3, #24
 801cd7c:	d515      	bpl.n	801cdaa <_svfprintf_r+0x52>
 801cd7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 801cd82:	b993      	cbnz	r3, 801cdaa <_svfprintf_r+0x52>
 801cd84:	9803      	ldr	r0, [sp, #12]
 801cd86:	2140      	movs	r1, #64	@ 0x40
 801cd88:	f7ff fda0 	bl	801c8cc <_malloc_r>
 801cd8c:	f8cb 0000 	str.w	r0, [fp]
 801cd90:	f8cb 0010 	str.w	r0, [fp, #16]
 801cd94:	b930      	cbnz	r0, 801cda4 <_svfprintf_r+0x4c>
 801cd96:	9a03      	ldr	r2, [sp, #12]
 801cd98:	230c      	movs	r3, #12
 801cd9a:	6013      	str	r3, [r2, #0]
 801cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 801cda0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cda2:	e1f7      	b.n	801d194 <_svfprintf_r+0x43c>
 801cda4:	2340      	movs	r3, #64	@ 0x40
 801cda6:	f8cb 3014 	str.w	r3, [fp, #20]
 801cdaa:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 801cff8 <_svfprintf_r+0x2a0>
 801cdae:	2300      	movs	r3, #0
 801cdb0:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801cdb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801cdb8:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801cdbc:	ac29      	add	r4, sp, #164	@ 0xa4
 801cdbe:	9426      	str	r4, [sp, #152]	@ 0x98
 801cdc0:	9304      	str	r3, [sp, #16]
 801cdc2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdc4:	9312      	str	r3, [sp, #72]	@ 0x48
 801cdc6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cdc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cdca:	464b      	mov	r3, r9
 801cdcc:	461d      	mov	r5, r3
 801cdce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cdd2:	b10a      	cbz	r2, 801cdd8 <_svfprintf_r+0x80>
 801cdd4:	2a25      	cmp	r2, #37	@ 0x25
 801cdd6:	d1f9      	bne.n	801cdcc <_svfprintf_r+0x74>
 801cdd8:	ebb5 0709 	subs.w	r7, r5, r9
 801cddc:	d00d      	beq.n	801cdfa <_svfprintf_r+0xa2>
 801cdde:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cde0:	443b      	add	r3, r7
 801cde2:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cde4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cde6:	3301      	adds	r3, #1
 801cde8:	2b07      	cmp	r3, #7
 801cdea:	e9c4 9700 	strd	r9, r7, [r4]
 801cdee:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cdf0:	dc75      	bgt.n	801cede <_svfprintf_r+0x186>
 801cdf2:	3408      	adds	r4, #8
 801cdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cdf6:	443b      	add	r3, r7
 801cdf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cdfa:	782b      	ldrb	r3, [r5, #0]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	f001 8148 	beq.w	801e092 <_svfprintf_r+0x133a>
 801ce02:	2200      	movs	r2, #0
 801ce04:	1c6b      	adds	r3, r5, #1
 801ce06:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801ce0a:	f04f 38ff 	mov.w	r8, #4294967295
 801ce0e:	920e      	str	r2, [sp, #56]	@ 0x38
 801ce10:	4615      	mov	r5, r2
 801ce12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce16:	9206      	str	r2, [sp, #24]
 801ce18:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce1a:	9b06      	ldr	r3, [sp, #24]
 801ce1c:	3b20      	subs	r3, #32
 801ce1e:	2b5a      	cmp	r3, #90	@ 0x5a
 801ce20:	f200 85a4 	bhi.w	801d96c <_svfprintf_r+0xc14>
 801ce24:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ce28:	05a2009d 	.word	0x05a2009d
 801ce2c:	00a505a2 	.word	0x00a505a2
 801ce30:	05a205a2 	.word	0x05a205a2
 801ce34:	008505a2 	.word	0x008505a2
 801ce38:	05a205a2 	.word	0x05a205a2
 801ce3c:	00b200a8 	.word	0x00b200a8
 801ce40:	00af05a2 	.word	0x00af05a2
 801ce44:	05a200b4 	.word	0x05a200b4
 801ce48:	00d100ce 	.word	0x00d100ce
 801ce4c:	00d100d1 	.word	0x00d100d1
 801ce50:	00d100d1 	.word	0x00d100d1
 801ce54:	00d100d1 	.word	0x00d100d1
 801ce58:	00d100d1 	.word	0x00d100d1
 801ce5c:	05a205a2 	.word	0x05a205a2
 801ce60:	05a205a2 	.word	0x05a205a2
 801ce64:	05a205a2 	.word	0x05a205a2
 801ce68:	014705a2 	.word	0x014705a2
 801ce6c:	010805a2 	.word	0x010805a2
 801ce70:	0147011b 	.word	0x0147011b
 801ce74:	01470147 	.word	0x01470147
 801ce78:	05a205a2 	.word	0x05a205a2
 801ce7c:	05a205a2 	.word	0x05a205a2
 801ce80:	05a200e2 	.word	0x05a200e2
 801ce84:	049d05a2 	.word	0x049d05a2
 801ce88:	05a205a2 	.word	0x05a205a2
 801ce8c:	04e705a2 	.word	0x04e705a2
 801ce90:	050805a2 	.word	0x050805a2
 801ce94:	05a205a2 	.word	0x05a205a2
 801ce98:	05a2052a 	.word	0x05a2052a
 801ce9c:	05a205a2 	.word	0x05a205a2
 801cea0:	05a205a2 	.word	0x05a205a2
 801cea4:	05a205a2 	.word	0x05a205a2
 801cea8:	014705a2 	.word	0x014705a2
 801ceac:	010805a2 	.word	0x010805a2
 801ceb0:	0147011d 	.word	0x0147011d
 801ceb4:	01470147 	.word	0x01470147
 801ceb8:	011d00ee 	.word	0x011d00ee
 801cebc:	05a20102 	.word	0x05a20102
 801cec0:	05a200fb 	.word	0x05a200fb
 801cec4:	049f047e 	.word	0x049f047e
 801cec8:	010204d6 	.word	0x010204d6
 801cecc:	04e705a2 	.word	0x04e705a2
 801ced0:	050a009b 	.word	0x050a009b
 801ced4:	05a205a2 	.word	0x05a205a2
 801ced8:	05a20065 	.word	0x05a20065
 801cedc:	009b      	.short	0x009b
 801cede:	9803      	ldr	r0, [sp, #12]
 801cee0:	aa26      	add	r2, sp, #152	@ 0x98
 801cee2:	4659      	mov	r1, fp
 801cee4:	f002 fe0b 	bl	801fafe <__ssprint_r>
 801cee8:	2800      	cmp	r0, #0
 801ceea:	f040 814e 	bne.w	801d18a <_svfprintf_r+0x432>
 801ceee:	ac29      	add	r4, sp, #164	@ 0xa4
 801cef0:	e780      	b.n	801cdf4 <_svfprintf_r+0x9c>
 801cef2:	4b43      	ldr	r3, [pc, #268]	@ (801d000 <_svfprintf_r+0x2a8>)
 801cef4:	9319      	str	r3, [sp, #100]	@ 0x64
 801cef6:	f015 0320 	ands.w	r3, r5, #32
 801cefa:	f000 84c2 	beq.w	801d882 <_svfprintf_r+0xb2a>
 801cefe:	3607      	adds	r6, #7
 801cf00:	f026 0307 	bic.w	r3, r6, #7
 801cf04:	461a      	mov	r2, r3
 801cf06:	685f      	ldr	r7, [r3, #4]
 801cf08:	f852 6b08 	ldr.w	r6, [r2], #8
 801cf0c:	9207      	str	r2, [sp, #28]
 801cf0e:	07eb      	lsls	r3, r5, #31
 801cf10:	d50a      	bpl.n	801cf28 <_svfprintf_r+0x1d0>
 801cf12:	ea56 0307 	orrs.w	r3, r6, r7
 801cf16:	d007      	beq.n	801cf28 <_svfprintf_r+0x1d0>
 801cf18:	2330      	movs	r3, #48	@ 0x30
 801cf1a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801cf1e:	9b06      	ldr	r3, [sp, #24]
 801cf20:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801cf24:	f045 0502 	orr.w	r5, r5, #2
 801cf28:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801cf2c:	2302      	movs	r3, #2
 801cf2e:	f000 bc28 	b.w	801d782 <_svfprintf_r+0xa2a>
 801cf32:	9803      	ldr	r0, [sp, #12]
 801cf34:	f001 fa0a 	bl	801e34c <_localeconv_r>
 801cf38:	6843      	ldr	r3, [r0, #4]
 801cf3a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7e3 f947 	bl	80001d0 <strlen>
 801cf42:	9012      	str	r0, [sp, #72]	@ 0x48
 801cf44:	9803      	ldr	r0, [sp, #12]
 801cf46:	f001 fa01 	bl	801e34c <_localeconv_r>
 801cf4a:	6883      	ldr	r3, [r0, #8]
 801cf4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cf50:	b12b      	cbz	r3, 801cf5e <_svfprintf_r+0x206>
 801cf52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf54:	b11b      	cbz	r3, 801cf5e <_svfprintf_r+0x206>
 801cf56:	781b      	ldrb	r3, [r3, #0]
 801cf58:	b10b      	cbz	r3, 801cf5e <_svfprintf_r+0x206>
 801cf5a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801cf5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf60:	e757      	b.n	801ce12 <_svfprintf_r+0xba>
 801cf62:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d1f9      	bne.n	801cf5e <_svfprintf_r+0x206>
 801cf6a:	2320      	movs	r3, #32
 801cf6c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801cf70:	e7f5      	b.n	801cf5e <_svfprintf_r+0x206>
 801cf72:	f045 0501 	orr.w	r5, r5, #1
 801cf76:	e7f2      	b.n	801cf5e <_svfprintf_r+0x206>
 801cf78:	f856 3b04 	ldr.w	r3, [r6], #4
 801cf7c:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	daed      	bge.n	801cf5e <_svfprintf_r+0x206>
 801cf82:	425b      	negs	r3, r3
 801cf84:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf86:	f045 0504 	orr.w	r5, r5, #4
 801cf8a:	e7e8      	b.n	801cf5e <_svfprintf_r+0x206>
 801cf8c:	232b      	movs	r3, #43	@ 0x2b
 801cf8e:	e7ed      	b.n	801cf6c <_svfprintf_r+0x214>
 801cf90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf96:	9206      	str	r2, [sp, #24]
 801cf98:	2a2a      	cmp	r2, #42	@ 0x2a
 801cf9a:	d10f      	bne.n	801cfbc <_svfprintf_r+0x264>
 801cf9c:	f856 2b04 	ldr.w	r2, [r6], #4
 801cfa0:	930c      	str	r3, [sp, #48]	@ 0x30
 801cfa2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 801cfa6:	e7da      	b.n	801cf5e <_svfprintf_r+0x206>
 801cfa8:	fb01 2808 	mla	r8, r1, r8, r2
 801cfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cfb0:	9206      	str	r2, [sp, #24]
 801cfb2:	9a06      	ldr	r2, [sp, #24]
 801cfb4:	3a30      	subs	r2, #48	@ 0x30
 801cfb6:	2a09      	cmp	r2, #9
 801cfb8:	d9f6      	bls.n	801cfa8 <_svfprintf_r+0x250>
 801cfba:	e72d      	b.n	801ce18 <_svfprintf_r+0xc0>
 801cfbc:	f04f 0800 	mov.w	r8, #0
 801cfc0:	210a      	movs	r1, #10
 801cfc2:	e7f6      	b.n	801cfb2 <_svfprintf_r+0x25a>
 801cfc4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801cfc8:	e7c9      	b.n	801cf5e <_svfprintf_r+0x206>
 801cfca:	2200      	movs	r2, #0
 801cfcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfce:	920e      	str	r2, [sp, #56]	@ 0x38
 801cfd0:	210a      	movs	r1, #10
 801cfd2:	9a06      	ldr	r2, [sp, #24]
 801cfd4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801cfd6:	3a30      	subs	r2, #48	@ 0x30
 801cfd8:	fb01 2200 	mla	r2, r1, r0, r2
 801cfdc:	920e      	str	r2, [sp, #56]	@ 0x38
 801cfde:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cfe2:	9206      	str	r2, [sp, #24]
 801cfe4:	3a30      	subs	r2, #48	@ 0x30
 801cfe6:	2a09      	cmp	r2, #9
 801cfe8:	d9f3      	bls.n	801cfd2 <_svfprintf_r+0x27a>
 801cfea:	e715      	b.n	801ce18 <_svfprintf_r+0xc0>
 801cfec:	f045 0508 	orr.w	r5, r5, #8
 801cff0:	e7b5      	b.n	801cf5e <_svfprintf_r+0x206>
 801cff2:	bf00      	nop
 801cff4:	f3af 8000 	nop.w
	...
 801d000:	08023920 	.word	0x08023920
 801d004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d006:	781b      	ldrb	r3, [r3, #0]
 801d008:	2b68      	cmp	r3, #104	@ 0x68
 801d00a:	bf01      	itttt	eq
 801d00c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801d00e:	3301      	addeq	r3, #1
 801d010:	930c      	streq	r3, [sp, #48]	@ 0x30
 801d012:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801d016:	bf18      	it	ne
 801d018:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801d01c:	e79f      	b.n	801cf5e <_svfprintf_r+0x206>
 801d01e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d020:	781b      	ldrb	r3, [r3, #0]
 801d022:	2b6c      	cmp	r3, #108	@ 0x6c
 801d024:	d105      	bne.n	801d032 <_svfprintf_r+0x2da>
 801d026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d028:	3301      	adds	r3, #1
 801d02a:	930c      	str	r3, [sp, #48]	@ 0x30
 801d02c:	f045 0520 	orr.w	r5, r5, #32
 801d030:	e795      	b.n	801cf5e <_svfprintf_r+0x206>
 801d032:	f045 0510 	orr.w	r5, r5, #16
 801d036:	e792      	b.n	801cf5e <_svfprintf_r+0x206>
 801d038:	4632      	mov	r2, r6
 801d03a:	f852 3b04 	ldr.w	r3, [r2], #4
 801d03e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801d042:	2300      	movs	r3, #0
 801d044:	9207      	str	r2, [sp, #28]
 801d046:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801d04a:	469a      	mov	sl, r3
 801d04c:	f04f 0801 	mov.w	r8, #1
 801d050:	9310      	str	r3, [sp, #64]	@ 0x40
 801d052:	461f      	mov	r7, r3
 801d054:	9308      	str	r3, [sp, #32]
 801d056:	461e      	mov	r6, r3
 801d058:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801d05c:	e1d2      	b.n	801d404 <_svfprintf_r+0x6ac>
 801d05e:	f045 0510 	orr.w	r5, r5, #16
 801d062:	06af      	lsls	r7, r5, #26
 801d064:	d512      	bpl.n	801d08c <_svfprintf_r+0x334>
 801d066:	3607      	adds	r6, #7
 801d068:	f026 0307 	bic.w	r3, r6, #7
 801d06c:	461a      	mov	r2, r3
 801d06e:	685f      	ldr	r7, [r3, #4]
 801d070:	f852 6b08 	ldr.w	r6, [r2], #8
 801d074:	9207      	str	r2, [sp, #28]
 801d076:	2f00      	cmp	r7, #0
 801d078:	da06      	bge.n	801d088 <_svfprintf_r+0x330>
 801d07a:	4276      	negs	r6, r6
 801d07c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801d080:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801d084:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801d088:	2301      	movs	r3, #1
 801d08a:	e37d      	b.n	801d788 <_svfprintf_r+0xa30>
 801d08c:	4633      	mov	r3, r6
 801d08e:	06ee      	lsls	r6, r5, #27
 801d090:	f853 7b04 	ldr.w	r7, [r3], #4
 801d094:	9307      	str	r3, [sp, #28]
 801d096:	d502      	bpl.n	801d09e <_svfprintf_r+0x346>
 801d098:	463e      	mov	r6, r7
 801d09a:	17ff      	asrs	r7, r7, #31
 801d09c:	e7eb      	b.n	801d076 <_svfprintf_r+0x31e>
 801d09e:	0668      	lsls	r0, r5, #25
 801d0a0:	d503      	bpl.n	801d0aa <_svfprintf_r+0x352>
 801d0a2:	b23e      	sxth	r6, r7
 801d0a4:	f347 37c0 	sbfx	r7, r7, #15, #1
 801d0a8:	e7e5      	b.n	801d076 <_svfprintf_r+0x31e>
 801d0aa:	05a9      	lsls	r1, r5, #22
 801d0ac:	d5f4      	bpl.n	801d098 <_svfprintf_r+0x340>
 801d0ae:	b27e      	sxtb	r6, r7
 801d0b0:	f347 17c0 	sbfx	r7, r7, #7, #1
 801d0b4:	e7df      	b.n	801d076 <_svfprintf_r+0x31e>
 801d0b6:	3607      	adds	r6, #7
 801d0b8:	f026 0307 	bic.w	r3, r6, #7
 801d0bc:	ecb3 7b02 	vldmia	r3!, {d7}
 801d0c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801d0c4:	9307      	str	r3, [sp, #28]
 801d0c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801d0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d0cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d0d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d0d2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801d0d6:	4b81      	ldr	r3, [pc, #516]	@ (801d2dc <_svfprintf_r+0x584>)
 801d0d8:	f04f 32ff 	mov.w	r2, #4294967295
 801d0dc:	f7e3 fd26 	bl	8000b2c <__aeabi_dcmpun>
 801d0e0:	bb10      	cbnz	r0, 801d128 <_svfprintf_r+0x3d0>
 801d0e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801d0e6:	4b7d      	ldr	r3, [pc, #500]	@ (801d2dc <_svfprintf_r+0x584>)
 801d0e8:	f04f 32ff 	mov.w	r2, #4294967295
 801d0ec:	f7e3 fd00 	bl	8000af0 <__aeabi_dcmple>
 801d0f0:	b9d0      	cbnz	r0, 801d128 <_svfprintf_r+0x3d0>
 801d0f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d0f6:	2200      	movs	r2, #0
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	f7e3 fcef 	bl	8000adc <__aeabi_dcmplt>
 801d0fe:	b110      	cbz	r0, 801d106 <_svfprintf_r+0x3ae>
 801d100:	232d      	movs	r3, #45	@ 0x2d
 801d102:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801d106:	4a76      	ldr	r2, [pc, #472]	@ (801d2e0 <_svfprintf_r+0x588>)
 801d108:	4b76      	ldr	r3, [pc, #472]	@ (801d2e4 <_svfprintf_r+0x58c>)
 801d10a:	9906      	ldr	r1, [sp, #24]
 801d10c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801d110:	2947      	cmp	r1, #71	@ 0x47
 801d112:	bfd4      	ite	le
 801d114:	4691      	movle	r9, r2
 801d116:	4699      	movgt	r9, r3
 801d118:	f04f 0a00 	mov.w	sl, #0
 801d11c:	f04f 0803 	mov.w	r8, #3
 801d120:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801d124:	f000 bfec 	b.w	801e100 <_svfprintf_r+0x13a8>
 801d128:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801d12c:	4610      	mov	r0, r2
 801d12e:	4619      	mov	r1, r3
 801d130:	f7e3 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 801d134:	4682      	mov	sl, r0
 801d136:	b140      	cbz	r0, 801d14a <_svfprintf_r+0x3f2>
 801d138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d13a:	4a6b      	ldr	r2, [pc, #428]	@ (801d2e8 <_svfprintf_r+0x590>)
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	bfbc      	itt	lt
 801d140:	232d      	movlt	r3, #45	@ 0x2d
 801d142:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801d146:	4b69      	ldr	r3, [pc, #420]	@ (801d2ec <_svfprintf_r+0x594>)
 801d148:	e7df      	b.n	801d10a <_svfprintf_r+0x3b2>
 801d14a:	9b06      	ldr	r3, [sp, #24]
 801d14c:	2b61      	cmp	r3, #97	@ 0x61
 801d14e:	d025      	beq.n	801d19c <_svfprintf_r+0x444>
 801d150:	2b41      	cmp	r3, #65	@ 0x41
 801d152:	d125      	bne.n	801d1a0 <_svfprintf_r+0x448>
 801d154:	2358      	movs	r3, #88	@ 0x58
 801d156:	2230      	movs	r2, #48	@ 0x30
 801d158:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801d15c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801d160:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801d164:	f045 0502 	orr.w	r5, r5, #2
 801d168:	f340 80a5 	ble.w	801d2b6 <_svfprintf_r+0x55e>
 801d16c:	9803      	ldr	r0, [sp, #12]
 801d16e:	f108 0101 	add.w	r1, r8, #1
 801d172:	f7ff fbab 	bl	801c8cc <_malloc_r>
 801d176:	4681      	mov	r9, r0
 801d178:	2800      	cmp	r0, #0
 801d17a:	f040 80a1 	bne.w	801d2c0 <_svfprintf_r+0x568>
 801d17e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801d182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d186:	f8ab 300c 	strh.w	r3, [fp, #12]
 801d18a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801d18e:	065b      	lsls	r3, r3, #25
 801d190:	f53f ae04 	bmi.w	801cd9c <_svfprintf_r+0x44>
 801d194:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d196:	b053      	add	sp, #332	@ 0x14c
 801d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d19c:	2378      	movs	r3, #120	@ 0x78
 801d19e:	e7da      	b.n	801d156 <_svfprintf_r+0x3fe>
 801d1a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d1a4:	f000 808e 	beq.w	801d2c4 <_svfprintf_r+0x56c>
 801d1a8:	9b06      	ldr	r3, [sp, #24]
 801d1aa:	f023 0320 	bic.w	r3, r3, #32
 801d1ae:	2b47      	cmp	r3, #71	@ 0x47
 801d1b0:	d105      	bne.n	801d1be <_svfprintf_r+0x466>
 801d1b2:	f1b8 0f00 	cmp.w	r8, #0
 801d1b6:	d102      	bne.n	801d1be <_svfprintf_r+0x466>
 801d1b8:	46c2      	mov	sl, r8
 801d1ba:	f04f 0801 	mov.w	r8, #1
 801d1be:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801d1c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801d1c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	da7f      	bge.n	801d2ca <_svfprintf_r+0x572>
 801d1ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1cc:	9314      	str	r3, [sp, #80]	@ 0x50
 801d1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801d1d4:	9315      	str	r3, [sp, #84]	@ 0x54
 801d1d6:	232d      	movs	r3, #45	@ 0x2d
 801d1d8:	931c      	str	r3, [sp, #112]	@ 0x70
 801d1da:	9b06      	ldr	r3, [sp, #24]
 801d1dc:	f023 0320 	bic.w	r3, r3, #32
 801d1e0:	2b41      	cmp	r3, #65	@ 0x41
 801d1e2:	9308      	str	r3, [sp, #32]
 801d1e4:	f040 81e6 	bne.w	801d5b4 <_svfprintf_r+0x85c>
 801d1e8:	a820      	add	r0, sp, #128	@ 0x80
 801d1ea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801d1ee:	f001 f8e1 	bl	801e3b4 <frexp>
 801d1f2:	2200      	movs	r2, #0
 801d1f4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801d1f8:	ec51 0b10 	vmov	r0, r1, d0
 801d1fc:	f7e3 f9fc 	bl	80005f8 <__aeabi_dmul>
 801d200:	4602      	mov	r2, r0
 801d202:	460b      	mov	r3, r1
 801d204:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d208:	2200      	movs	r2, #0
 801d20a:	2300      	movs	r3, #0
 801d20c:	f7e3 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 801d210:	b108      	cbz	r0, 801d216 <_svfprintf_r+0x4be>
 801d212:	2301      	movs	r3, #1
 801d214:	9320      	str	r3, [sp, #128]	@ 0x80
 801d216:	4a36      	ldr	r2, [pc, #216]	@ (801d2f0 <_svfprintf_r+0x598>)
 801d218:	4b36      	ldr	r3, [pc, #216]	@ (801d2f4 <_svfprintf_r+0x59c>)
 801d21a:	9906      	ldr	r1, [sp, #24]
 801d21c:	2961      	cmp	r1, #97	@ 0x61
 801d21e:	bf18      	it	ne
 801d220:	461a      	movne	r2, r3
 801d222:	9210      	str	r2, [sp, #64]	@ 0x40
 801d224:	f108 37ff 	add.w	r7, r8, #4294967295
 801d228:	464e      	mov	r6, r9
 801d22a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d22e:	4b32      	ldr	r3, [pc, #200]	@ (801d2f8 <_svfprintf_r+0x5a0>)
 801d230:	2200      	movs	r2, #0
 801d232:	f7e3 f9e1 	bl	80005f8 <__aeabi_dmul>
 801d236:	4602      	mov	r2, r0
 801d238:	460b      	mov	r3, r1
 801d23a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d23e:	f7e3 fc8b 	bl	8000b58 <__aeabi_d2iz>
 801d242:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d244:	f7e3 f96e 	bl	8000524 <__aeabi_i2d>
 801d248:	4602      	mov	r2, r0
 801d24a:	460b      	mov	r3, r1
 801d24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d250:	f7e3 f81a 	bl	8000288 <__aeabi_dsub>
 801d254:	4602      	mov	r2, r0
 801d256:	460b      	mov	r3, r1
 801d258:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d25c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d25e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d260:	5c9b      	ldrb	r3, [r3, r2]
 801d262:	f806 3b01 	strb.w	r3, [r6], #1
 801d266:	1c7a      	adds	r2, r7, #1
 801d268:	d006      	beq.n	801d278 <_svfprintf_r+0x520>
 801d26a:	1e7b      	subs	r3, r7, #1
 801d26c:	931d      	str	r3, [sp, #116]	@ 0x74
 801d26e:	2200      	movs	r2, #0
 801d270:	2300      	movs	r3, #0
 801d272:	f7e3 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 801d276:	b370      	cbz	r0, 801d2d6 <_svfprintf_r+0x57e>
 801d278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d27c:	4b1f      	ldr	r3, [pc, #124]	@ (801d2fc <_svfprintf_r+0x5a4>)
 801d27e:	2200      	movs	r2, #0
 801d280:	f7e3 fc4a 	bl	8000b18 <__aeabi_dcmpgt>
 801d284:	2800      	cmp	r0, #0
 801d286:	d13b      	bne.n	801d300 <_svfprintf_r+0x5a8>
 801d288:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d28c:	4b1b      	ldr	r3, [pc, #108]	@ (801d2fc <_svfprintf_r+0x5a4>)
 801d28e:	2200      	movs	r2, #0
 801d290:	f7e3 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d294:	b110      	cbz	r0, 801d29c <_svfprintf_r+0x544>
 801d296:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d298:	07db      	lsls	r3, r3, #31
 801d29a:	d431      	bmi.n	801d300 <_svfprintf_r+0x5a8>
 801d29c:	4633      	mov	r3, r6
 801d29e:	19f1      	adds	r1, r6, r7
 801d2a0:	2030      	movs	r0, #48	@ 0x30
 801d2a2:	1aca      	subs	r2, r1, r3
 801d2a4:	2a00      	cmp	r2, #0
 801d2a6:	f280 8182 	bge.w	801d5ae <_svfprintf_r+0x856>
 801d2aa:	1c7b      	adds	r3, r7, #1
 801d2ac:	3701      	adds	r7, #1
 801d2ae:	bfb8      	it	lt
 801d2b0:	2300      	movlt	r3, #0
 801d2b2:	441e      	add	r6, r3
 801d2b4:	e038      	b.n	801d328 <_svfprintf_r+0x5d0>
 801d2b6:	f04f 0a00 	mov.w	sl, #0
 801d2ba:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801d2be:	e77e      	b.n	801d1be <_svfprintf_r+0x466>
 801d2c0:	4682      	mov	sl, r0
 801d2c2:	e77c      	b.n	801d1be <_svfprintf_r+0x466>
 801d2c4:	f04f 0806 	mov.w	r8, #6
 801d2c8:	e779      	b.n	801d1be <_svfprintf_r+0x466>
 801d2ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801d2d4:	e780      	b.n	801d1d8 <_svfprintf_r+0x480>
 801d2d6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801d2d8:	e7a7      	b.n	801d22a <_svfprintf_r+0x4d2>
 801d2da:	bf00      	nop
 801d2dc:	7fefffff 	.word	0x7fefffff
 801d2e0:	08023910 	.word	0x08023910
 801d2e4:	08023914 	.word	0x08023914
 801d2e8:	08023918 	.word	0x08023918
 801d2ec:	0802391c 	.word	0x0802391c
 801d2f0:	08023920 	.word	0x08023920
 801d2f4:	08023931 	.word	0x08023931
 801d2f8:	40300000 	.word	0x40300000
 801d2fc:	3fe00000 	.word	0x3fe00000
 801d300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d302:	9624      	str	r6, [sp, #144]	@ 0x90
 801d304:	7bd9      	ldrb	r1, [r3, #15]
 801d306:	2030      	movs	r0, #48	@ 0x30
 801d308:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d30a:	1e53      	subs	r3, r2, #1
 801d30c:	9324      	str	r3, [sp, #144]	@ 0x90
 801d30e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801d312:	428b      	cmp	r3, r1
 801d314:	f000 8148 	beq.w	801d5a8 <_svfprintf_r+0x850>
 801d318:	2b39      	cmp	r3, #57	@ 0x39
 801d31a:	bf0b      	itete	eq
 801d31c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801d31e:	3301      	addne	r3, #1
 801d320:	7a9b      	ldrbeq	r3, [r3, #10]
 801d322:	b2db      	uxtbne	r3, r3
 801d324:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d328:	eba6 0309 	sub.w	r3, r6, r9
 801d32c:	9304      	str	r3, [sp, #16]
 801d32e:	9b08      	ldr	r3, [sp, #32]
 801d330:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d332:	2b47      	cmp	r3, #71	@ 0x47
 801d334:	f040 8187 	bne.w	801d646 <_svfprintf_r+0x8ee>
 801d338:	1cf1      	adds	r1, r6, #3
 801d33a:	db02      	blt.n	801d342 <_svfprintf_r+0x5ea>
 801d33c:	4546      	cmp	r6, r8
 801d33e:	f340 81a5 	ble.w	801d68c <_svfprintf_r+0x934>
 801d342:	9b06      	ldr	r3, [sp, #24]
 801d344:	3b02      	subs	r3, #2
 801d346:	9306      	str	r3, [sp, #24]
 801d348:	9906      	ldr	r1, [sp, #24]
 801d34a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801d34e:	f021 0120 	bic.w	r1, r1, #32
 801d352:	2941      	cmp	r1, #65	@ 0x41
 801d354:	bf08      	it	eq
 801d356:	320f      	addeq	r2, #15
 801d358:	f106 33ff 	add.w	r3, r6, #4294967295
 801d35c:	bf06      	itte	eq
 801d35e:	b2d2      	uxtbeq	r2, r2
 801d360:	2101      	moveq	r1, #1
 801d362:	2100      	movne	r1, #0
 801d364:	2b00      	cmp	r3, #0
 801d366:	9320      	str	r3, [sp, #128]	@ 0x80
 801d368:	bfb8      	it	lt
 801d36a:	f1c6 0301 	rsblt	r3, r6, #1
 801d36e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801d372:	bfb4      	ite	lt
 801d374:	222d      	movlt	r2, #45	@ 0x2d
 801d376:	222b      	movge	r2, #43	@ 0x2b
 801d378:	2b09      	cmp	r3, #9
 801d37a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801d37e:	f340 8178 	ble.w	801d672 <_svfprintf_r+0x91a>
 801d382:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801d386:	270a      	movs	r7, #10
 801d388:	4602      	mov	r2, r0
 801d38a:	fbb3 f6f7 	udiv	r6, r3, r7
 801d38e:	fb07 3116 	mls	r1, r7, r6, r3
 801d392:	3130      	adds	r1, #48	@ 0x30
 801d394:	f802 1c01 	strb.w	r1, [r2, #-1]
 801d398:	4619      	mov	r1, r3
 801d39a:	2963      	cmp	r1, #99	@ 0x63
 801d39c:	f100 30ff 	add.w	r0, r0, #4294967295
 801d3a0:	4633      	mov	r3, r6
 801d3a2:	dcf1      	bgt.n	801d388 <_svfprintf_r+0x630>
 801d3a4:	3330      	adds	r3, #48	@ 0x30
 801d3a6:	1e91      	subs	r1, r2, #2
 801d3a8:	f800 3c01 	strb.w	r3, [r0, #-1]
 801d3ac:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801d3b0:	460b      	mov	r3, r1
 801d3b2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801d3b6:	4283      	cmp	r3, r0
 801d3b8:	f0c0 8156 	bcc.w	801d668 <_svfprintf_r+0x910>
 801d3bc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801d3c0:	1a9b      	subs	r3, r3, r2
 801d3c2:	4281      	cmp	r1, r0
 801d3c4:	bf88      	it	hi
 801d3c6:	2300      	movhi	r3, #0
 801d3c8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801d3cc:	441a      	add	r2, r3
 801d3ce:	ab22      	add	r3, sp, #136	@ 0x88
 801d3d0:	1ad3      	subs	r3, r2, r3
 801d3d2:	9a04      	ldr	r2, [sp, #16]
 801d3d4:	9318      	str	r3, [sp, #96]	@ 0x60
 801d3d6:	2a01      	cmp	r2, #1
 801d3d8:	eb03 0802 	add.w	r8, r3, r2
 801d3dc:	dc01      	bgt.n	801d3e2 <_svfprintf_r+0x68a>
 801d3de:	07ea      	lsls	r2, r5, #31
 801d3e0:	d501      	bpl.n	801d3e6 <_svfprintf_r+0x68e>
 801d3e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d3e4:	4498      	add	r8, r3
 801d3e6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801d3ea:	2700      	movs	r7, #0
 801d3ec:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801d3f0:	9311      	str	r3, [sp, #68]	@ 0x44
 801d3f2:	9708      	str	r7, [sp, #32]
 801d3f4:	463e      	mov	r6, r7
 801d3f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	f040 818f 	bne.w	801d71c <_svfprintf_r+0x9c4>
 801d3fe:	2300      	movs	r3, #0
 801d400:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d402:	9310      	str	r3, [sp, #64]	@ 0x40
 801d404:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d406:	4543      	cmp	r3, r8
 801d408:	bfb8      	it	lt
 801d40a:	4643      	movlt	r3, r8
 801d40c:	9311      	str	r3, [sp, #68]	@ 0x44
 801d40e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801d412:	b113      	cbz	r3, 801d41a <_svfprintf_r+0x6c2>
 801d414:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d416:	3301      	adds	r3, #1
 801d418:	9311      	str	r3, [sp, #68]	@ 0x44
 801d41a:	f015 0302 	ands.w	r3, r5, #2
 801d41e:	931c      	str	r3, [sp, #112]	@ 0x70
 801d420:	bf1e      	ittt	ne
 801d422:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801d424:	3302      	addne	r3, #2
 801d426:	9311      	strne	r3, [sp, #68]	@ 0x44
 801d428:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801d42c:	931d      	str	r3, [sp, #116]	@ 0x74
 801d42e:	d122      	bne.n	801d476 <_svfprintf_r+0x71e>
 801d430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d432:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d434:	1a9b      	subs	r3, r3, r2
 801d436:	2b00      	cmp	r3, #0
 801d438:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d43a:	dd1c      	ble.n	801d476 <_svfprintf_r+0x71e>
 801d43c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d43e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801d442:	2810      	cmp	r0, #16
 801d444:	489e      	ldr	r0, [pc, #632]	@ (801d6c0 <_svfprintf_r+0x968>)
 801d446:	6020      	str	r0, [r4, #0]
 801d448:	f102 0201 	add.w	r2, r2, #1
 801d44c:	f104 0108 	add.w	r1, r4, #8
 801d450:	f300 8298 	bgt.w	801d984 <_svfprintf_r+0xc2c>
 801d454:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d456:	6060      	str	r0, [r4, #4]
 801d458:	4403      	add	r3, r0
 801d45a:	2a07      	cmp	r2, #7
 801d45c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d460:	f340 82a5 	ble.w	801d9ae <_svfprintf_r+0xc56>
 801d464:	9803      	ldr	r0, [sp, #12]
 801d466:	aa26      	add	r2, sp, #152	@ 0x98
 801d468:	4659      	mov	r1, fp
 801d46a:	f002 fb48 	bl	801fafe <__ssprint_r>
 801d46e:	2800      	cmp	r0, #0
 801d470:	f040 85ed 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d474:	ac29      	add	r4, sp, #164	@ 0xa4
 801d476:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801d47a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d47c:	b16a      	cbz	r2, 801d49a <_svfprintf_r+0x742>
 801d47e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801d482:	6022      	str	r2, [r4, #0]
 801d484:	2201      	movs	r2, #1
 801d486:	4413      	add	r3, r2
 801d488:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d48a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d48c:	6062      	str	r2, [r4, #4]
 801d48e:	4413      	add	r3, r2
 801d490:	2b07      	cmp	r3, #7
 801d492:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d494:	f300 828d 	bgt.w	801d9b2 <_svfprintf_r+0xc5a>
 801d498:	3408      	adds	r4, #8
 801d49a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d49c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d49e:	b162      	cbz	r2, 801d4ba <_svfprintf_r+0x762>
 801d4a0:	aa1f      	add	r2, sp, #124	@ 0x7c
 801d4a2:	6022      	str	r2, [r4, #0]
 801d4a4:	2202      	movs	r2, #2
 801d4a6:	4413      	add	r3, r2
 801d4a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d4aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d4ac:	6062      	str	r2, [r4, #4]
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	2b07      	cmp	r3, #7
 801d4b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d4b4:	f300 8287 	bgt.w	801d9c6 <_svfprintf_r+0xc6e>
 801d4b8:	3408      	adds	r4, #8
 801d4ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d4bc:	2b80      	cmp	r3, #128	@ 0x80
 801d4be:	d122      	bne.n	801d506 <_svfprintf_r+0x7ae>
 801d4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d4c4:	1a9b      	subs	r3, r3, r2
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d4ca:	dd1c      	ble.n	801d506 <_svfprintf_r+0x7ae>
 801d4cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d4ce:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801d4d2:	2810      	cmp	r0, #16
 801d4d4:	487b      	ldr	r0, [pc, #492]	@ (801d6c4 <_svfprintf_r+0x96c>)
 801d4d6:	6020      	str	r0, [r4, #0]
 801d4d8:	f102 0201 	add.w	r2, r2, #1
 801d4dc:	f104 0108 	add.w	r1, r4, #8
 801d4e0:	f300 827b 	bgt.w	801d9da <_svfprintf_r+0xc82>
 801d4e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d4e6:	6060      	str	r0, [r4, #4]
 801d4e8:	4403      	add	r3, r0
 801d4ea:	2a07      	cmp	r2, #7
 801d4ec:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d4f0:	f340 8288 	ble.w	801da04 <_svfprintf_r+0xcac>
 801d4f4:	9803      	ldr	r0, [sp, #12]
 801d4f6:	aa26      	add	r2, sp, #152	@ 0x98
 801d4f8:	4659      	mov	r1, fp
 801d4fa:	f002 fb00 	bl	801fafe <__ssprint_r>
 801d4fe:	2800      	cmp	r0, #0
 801d500:	f040 85a5 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d504:	ac29      	add	r4, sp, #164	@ 0xa4
 801d506:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d508:	eba3 0308 	sub.w	r3, r3, r8
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d510:	dd1c      	ble.n	801d54c <_svfprintf_r+0x7f4>
 801d512:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d514:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801d518:	2810      	cmp	r0, #16
 801d51a:	486a      	ldr	r0, [pc, #424]	@ (801d6c4 <_svfprintf_r+0x96c>)
 801d51c:	6020      	str	r0, [r4, #0]
 801d51e:	f102 0201 	add.w	r2, r2, #1
 801d522:	f104 0108 	add.w	r1, r4, #8
 801d526:	f300 826f 	bgt.w	801da08 <_svfprintf_r+0xcb0>
 801d52a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d52c:	6060      	str	r0, [r4, #4]
 801d52e:	4403      	add	r3, r0
 801d530:	2a07      	cmp	r2, #7
 801d532:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d536:	f340 827c 	ble.w	801da32 <_svfprintf_r+0xcda>
 801d53a:	9803      	ldr	r0, [sp, #12]
 801d53c:	aa26      	add	r2, sp, #152	@ 0x98
 801d53e:	4659      	mov	r1, fp
 801d540:	f002 fadd 	bl	801fafe <__ssprint_r>
 801d544:	2800      	cmp	r0, #0
 801d546:	f040 8582 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d54a:	ac29      	add	r4, sp, #164	@ 0xa4
 801d54c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d54e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d550:	05ea      	lsls	r2, r5, #23
 801d552:	f100 8275 	bmi.w	801da40 <_svfprintf_r+0xce8>
 801d556:	4443      	add	r3, r8
 801d558:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d55a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d55c:	3301      	adds	r3, #1
 801d55e:	2b07      	cmp	r3, #7
 801d560:	e9c4 9800 	strd	r9, r8, [r4]
 801d564:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d566:	f300 82b1 	bgt.w	801dacc <_svfprintf_r+0xd74>
 801d56a:	3408      	adds	r4, #8
 801d56c:	076a      	lsls	r2, r5, #29
 801d56e:	f100 8550 	bmi.w	801e012 <_svfprintf_r+0x12ba>
 801d572:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d576:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d578:	428a      	cmp	r2, r1
 801d57a:	bfac      	ite	ge
 801d57c:	189b      	addge	r3, r3, r2
 801d57e:	185b      	addlt	r3, r3, r1
 801d580:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d582:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d584:	b13b      	cbz	r3, 801d596 <_svfprintf_r+0x83e>
 801d586:	9803      	ldr	r0, [sp, #12]
 801d588:	aa26      	add	r2, sp, #152	@ 0x98
 801d58a:	4659      	mov	r1, fp
 801d58c:	f002 fab7 	bl	801fafe <__ssprint_r>
 801d590:	2800      	cmp	r0, #0
 801d592:	f040 855c 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d596:	2300      	movs	r3, #0
 801d598:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d59a:	f1ba 0f00 	cmp.w	sl, #0
 801d59e:	f040 8572 	bne.w	801e086 <_svfprintf_r+0x132e>
 801d5a2:	9e07      	ldr	r6, [sp, #28]
 801d5a4:	ac29      	add	r4, sp, #164	@ 0xa4
 801d5a6:	e0c6      	b.n	801d736 <_svfprintf_r+0x9de>
 801d5a8:	f802 0c01 	strb.w	r0, [r2, #-1]
 801d5ac:	e6ac      	b.n	801d308 <_svfprintf_r+0x5b0>
 801d5ae:	f803 0b01 	strb.w	r0, [r3], #1
 801d5b2:	e676      	b.n	801d2a2 <_svfprintf_r+0x54a>
 801d5b4:	9b08      	ldr	r3, [sp, #32]
 801d5b6:	2b46      	cmp	r3, #70	@ 0x46
 801d5b8:	d005      	beq.n	801d5c6 <_svfprintf_r+0x86e>
 801d5ba:	2b45      	cmp	r3, #69	@ 0x45
 801d5bc:	d11a      	bne.n	801d5f4 <_svfprintf_r+0x89c>
 801d5be:	f108 0601 	add.w	r6, r8, #1
 801d5c2:	2102      	movs	r1, #2
 801d5c4:	e001      	b.n	801d5ca <_svfprintf_r+0x872>
 801d5c6:	4646      	mov	r6, r8
 801d5c8:	2103      	movs	r1, #3
 801d5ca:	ab24      	add	r3, sp, #144	@ 0x90
 801d5cc:	9301      	str	r3, [sp, #4]
 801d5ce:	ab21      	add	r3, sp, #132	@ 0x84
 801d5d0:	9300      	str	r3, [sp, #0]
 801d5d2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801d5d6:	ab20      	add	r3, sp, #128	@ 0x80
 801d5d8:	9803      	ldr	r0, [sp, #12]
 801d5da:	4632      	mov	r2, r6
 801d5dc:	f000 ffe8 	bl	801e5b0 <_dtoa_r>
 801d5e0:	9b08      	ldr	r3, [sp, #32]
 801d5e2:	2b47      	cmp	r3, #71	@ 0x47
 801d5e4:	4681      	mov	r9, r0
 801d5e6:	d119      	bne.n	801d61c <_svfprintf_r+0x8c4>
 801d5e8:	07e8      	lsls	r0, r5, #31
 801d5ea:	d405      	bmi.n	801d5f8 <_svfprintf_r+0x8a0>
 801d5ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d5ee:	eba3 0309 	sub.w	r3, r3, r9
 801d5f2:	e69b      	b.n	801d32c <_svfprintf_r+0x5d4>
 801d5f4:	4646      	mov	r6, r8
 801d5f6:	e7e4      	b.n	801d5c2 <_svfprintf_r+0x86a>
 801d5f8:	eb09 0706 	add.w	r7, r9, r6
 801d5fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801d600:	2200      	movs	r2, #0
 801d602:	2300      	movs	r3, #0
 801d604:	f7e3 fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 801d608:	b100      	cbz	r0, 801d60c <_svfprintf_r+0x8b4>
 801d60a:	9724      	str	r7, [sp, #144]	@ 0x90
 801d60c:	2230      	movs	r2, #48	@ 0x30
 801d60e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d610:	429f      	cmp	r7, r3
 801d612:	d9eb      	bls.n	801d5ec <_svfprintf_r+0x894>
 801d614:	1c59      	adds	r1, r3, #1
 801d616:	9124      	str	r1, [sp, #144]	@ 0x90
 801d618:	701a      	strb	r2, [r3, #0]
 801d61a:	e7f8      	b.n	801d60e <_svfprintf_r+0x8b6>
 801d61c:	9b08      	ldr	r3, [sp, #32]
 801d61e:	2b46      	cmp	r3, #70	@ 0x46
 801d620:	eb00 0706 	add.w	r7, r0, r6
 801d624:	d1ea      	bne.n	801d5fc <_svfprintf_r+0x8a4>
 801d626:	7803      	ldrb	r3, [r0, #0]
 801d628:	2b30      	cmp	r3, #48	@ 0x30
 801d62a:	d109      	bne.n	801d640 <_svfprintf_r+0x8e8>
 801d62c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801d630:	2200      	movs	r2, #0
 801d632:	2300      	movs	r3, #0
 801d634:	f7e3 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 801d638:	b910      	cbnz	r0, 801d640 <_svfprintf_r+0x8e8>
 801d63a:	f1c6 0601 	rsb	r6, r6, #1
 801d63e:	9620      	str	r6, [sp, #128]	@ 0x80
 801d640:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d642:	441f      	add	r7, r3
 801d644:	e7da      	b.n	801d5fc <_svfprintf_r+0x8a4>
 801d646:	9b08      	ldr	r3, [sp, #32]
 801d648:	2b46      	cmp	r3, #70	@ 0x46
 801d64a:	f47f ae7d 	bne.w	801d348 <_svfprintf_r+0x5f0>
 801d64e:	f005 0301 	and.w	r3, r5, #1
 801d652:	2e00      	cmp	r6, #0
 801d654:	ea43 0308 	orr.w	r3, r3, r8
 801d658:	dd25      	ble.n	801d6a6 <_svfprintf_r+0x94e>
 801d65a:	b37b      	cbz	r3, 801d6bc <_svfprintf_r+0x964>
 801d65c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d65e:	18f3      	adds	r3, r6, r3
 801d660:	4498      	add	r8, r3
 801d662:	2366      	movs	r3, #102	@ 0x66
 801d664:	9306      	str	r3, [sp, #24]
 801d666:	e033      	b.n	801d6d0 <_svfprintf_r+0x978>
 801d668:	f813 7b01 	ldrb.w	r7, [r3], #1
 801d66c:	f806 7f01 	strb.w	r7, [r6, #1]!
 801d670:	e6a1      	b.n	801d3b6 <_svfprintf_r+0x65e>
 801d672:	b941      	cbnz	r1, 801d686 <_svfprintf_r+0x92e>
 801d674:	2230      	movs	r2, #48	@ 0x30
 801d676:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801d67a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801d67e:	3330      	adds	r3, #48	@ 0x30
 801d680:	f802 3b01 	strb.w	r3, [r2], #1
 801d684:	e6a3      	b.n	801d3ce <_svfprintf_r+0x676>
 801d686:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801d68a:	e7f8      	b.n	801d67e <_svfprintf_r+0x926>
 801d68c:	9b04      	ldr	r3, [sp, #16]
 801d68e:	429e      	cmp	r6, r3
 801d690:	da0d      	bge.n	801d6ae <_svfprintf_r+0x956>
 801d692:	9b04      	ldr	r3, [sp, #16]
 801d694:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d696:	2e00      	cmp	r6, #0
 801d698:	eb03 0802 	add.w	r8, r3, r2
 801d69c:	dc0c      	bgt.n	801d6b8 <_svfprintf_r+0x960>
 801d69e:	f1c6 0301 	rsb	r3, r6, #1
 801d6a2:	4498      	add	r8, r3
 801d6a4:	e008      	b.n	801d6b8 <_svfprintf_r+0x960>
 801d6a6:	b17b      	cbz	r3, 801d6c8 <_svfprintf_r+0x970>
 801d6a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d6aa:	3301      	adds	r3, #1
 801d6ac:	e7d8      	b.n	801d660 <_svfprintf_r+0x908>
 801d6ae:	07eb      	lsls	r3, r5, #31
 801d6b0:	d521      	bpl.n	801d6f6 <_svfprintf_r+0x99e>
 801d6b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d6b4:	eb06 0803 	add.w	r8, r6, r3
 801d6b8:	2367      	movs	r3, #103	@ 0x67
 801d6ba:	e7d3      	b.n	801d664 <_svfprintf_r+0x90c>
 801d6bc:	46b0      	mov	r8, r6
 801d6be:	e7d0      	b.n	801d662 <_svfprintf_r+0x90a>
 801d6c0:	08023954 	.word	0x08023954
 801d6c4:	08023944 	.word	0x08023944
 801d6c8:	2366      	movs	r3, #102	@ 0x66
 801d6ca:	9306      	str	r3, [sp, #24]
 801d6cc:	f04f 0801 	mov.w	r8, #1
 801d6d0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801d6d4:	9308      	str	r3, [sp, #32]
 801d6d6:	d01f      	beq.n	801d718 <_svfprintf_r+0x9c0>
 801d6d8:	2700      	movs	r7, #0
 801d6da:	2e00      	cmp	r6, #0
 801d6dc:	9708      	str	r7, [sp, #32]
 801d6de:	f77f ae8a 	ble.w	801d3f6 <_svfprintf_r+0x69e>
 801d6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6e4:	781b      	ldrb	r3, [r3, #0]
 801d6e6:	2bff      	cmp	r3, #255	@ 0xff
 801d6e8:	d107      	bne.n	801d6fa <_svfprintf_r+0x9a2>
 801d6ea:	9b08      	ldr	r3, [sp, #32]
 801d6ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d6ee:	443b      	add	r3, r7
 801d6f0:	fb02 8803 	mla	r8, r2, r3, r8
 801d6f4:	e67f      	b.n	801d3f6 <_svfprintf_r+0x69e>
 801d6f6:	46b0      	mov	r8, r6
 801d6f8:	e7de      	b.n	801d6b8 <_svfprintf_r+0x960>
 801d6fa:	42b3      	cmp	r3, r6
 801d6fc:	daf5      	bge.n	801d6ea <_svfprintf_r+0x992>
 801d6fe:	1af6      	subs	r6, r6, r3
 801d700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d702:	785b      	ldrb	r3, [r3, #1]
 801d704:	b133      	cbz	r3, 801d714 <_svfprintf_r+0x9bc>
 801d706:	9b08      	ldr	r3, [sp, #32]
 801d708:	3301      	adds	r3, #1
 801d70a:	9308      	str	r3, [sp, #32]
 801d70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d70e:	3301      	adds	r3, #1
 801d710:	9309      	str	r3, [sp, #36]	@ 0x24
 801d712:	e7e6      	b.n	801d6e2 <_svfprintf_r+0x98a>
 801d714:	3701      	adds	r7, #1
 801d716:	e7e4      	b.n	801d6e2 <_svfprintf_r+0x98a>
 801d718:	9f08      	ldr	r7, [sp, #32]
 801d71a:	e66c      	b.n	801d3f6 <_svfprintf_r+0x69e>
 801d71c:	232d      	movs	r3, #45	@ 0x2d
 801d71e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801d722:	e66c      	b.n	801d3fe <_svfprintf_r+0x6a6>
 801d724:	06af      	lsls	r7, r5, #26
 801d726:	d50a      	bpl.n	801d73e <_svfprintf_r+0x9e6>
 801d728:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d72a:	6833      	ldr	r3, [r6, #0]
 801d72c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d72e:	17d2      	asrs	r2, r2, #31
 801d730:	e9c3 1200 	strd	r1, r2, [r3]
 801d734:	3604      	adds	r6, #4
 801d736:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801d73a:	f7ff bb46 	b.w	801cdca <_svfprintf_r+0x72>
 801d73e:	06e8      	lsls	r0, r5, #27
 801d740:	d503      	bpl.n	801d74a <_svfprintf_r+0x9f2>
 801d742:	6833      	ldr	r3, [r6, #0]
 801d744:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d746:	601a      	str	r2, [r3, #0]
 801d748:	e7f4      	b.n	801d734 <_svfprintf_r+0x9dc>
 801d74a:	0669      	lsls	r1, r5, #25
 801d74c:	d503      	bpl.n	801d756 <_svfprintf_r+0x9fe>
 801d74e:	6833      	ldr	r3, [r6, #0]
 801d750:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d752:	801a      	strh	r2, [r3, #0]
 801d754:	e7ee      	b.n	801d734 <_svfprintf_r+0x9dc>
 801d756:	05aa      	lsls	r2, r5, #22
 801d758:	d5f3      	bpl.n	801d742 <_svfprintf_r+0x9ea>
 801d75a:	6833      	ldr	r3, [r6, #0]
 801d75c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d75e:	701a      	strb	r2, [r3, #0]
 801d760:	e7e8      	b.n	801d734 <_svfprintf_r+0x9dc>
 801d762:	f045 0510 	orr.w	r5, r5, #16
 801d766:	f015 0320 	ands.w	r3, r5, #32
 801d76a:	d020      	beq.n	801d7ae <_svfprintf_r+0xa56>
 801d76c:	3607      	adds	r6, #7
 801d76e:	f026 0307 	bic.w	r3, r6, #7
 801d772:	461a      	mov	r2, r3
 801d774:	685f      	ldr	r7, [r3, #4]
 801d776:	f852 6b08 	ldr.w	r6, [r2], #8
 801d77a:	9207      	str	r2, [sp, #28]
 801d77c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801d780:	2300      	movs	r3, #0
 801d782:	2200      	movs	r2, #0
 801d784:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801d788:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d78c:	f000 848c 	beq.w	801e0a8 <_svfprintf_r+0x1350>
 801d790:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801d794:	9208      	str	r2, [sp, #32]
 801d796:	ea56 0207 	orrs.w	r2, r6, r7
 801d79a:	f040 848a 	bne.w	801e0b2 <_svfprintf_r+0x135a>
 801d79e:	f1b8 0f00 	cmp.w	r8, #0
 801d7a2:	f000 80db 	beq.w	801d95c <_svfprintf_r+0xc04>
 801d7a6:	2b01      	cmp	r3, #1
 801d7a8:	f040 8486 	bne.w	801e0b8 <_svfprintf_r+0x1360>
 801d7ac:	e083      	b.n	801d8b6 <_svfprintf_r+0xb5e>
 801d7ae:	4632      	mov	r2, r6
 801d7b0:	f015 0710 	ands.w	r7, r5, #16
 801d7b4:	f852 6b04 	ldr.w	r6, [r2], #4
 801d7b8:	9207      	str	r2, [sp, #28]
 801d7ba:	d001      	beq.n	801d7c0 <_svfprintf_r+0xa68>
 801d7bc:	461f      	mov	r7, r3
 801d7be:	e7dd      	b.n	801d77c <_svfprintf_r+0xa24>
 801d7c0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801d7c4:	d001      	beq.n	801d7ca <_svfprintf_r+0xa72>
 801d7c6:	b2b6      	uxth	r6, r6
 801d7c8:	e7d8      	b.n	801d77c <_svfprintf_r+0xa24>
 801d7ca:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801d7ce:	d0d5      	beq.n	801d77c <_svfprintf_r+0xa24>
 801d7d0:	b2f6      	uxtb	r6, r6
 801d7d2:	e7f3      	b.n	801d7bc <_svfprintf_r+0xa64>
 801d7d4:	4633      	mov	r3, r6
 801d7d6:	2278      	movs	r2, #120	@ 0x78
 801d7d8:	f853 6b04 	ldr.w	r6, [r3], #4
 801d7dc:	9307      	str	r3, [sp, #28]
 801d7de:	f647 0330 	movw	r3, #30768	@ 0x7830
 801d7e2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801d7e6:	4b94      	ldr	r3, [pc, #592]	@ (801da38 <_svfprintf_r+0xce0>)
 801d7e8:	9319      	str	r3, [sp, #100]	@ 0x64
 801d7ea:	2700      	movs	r7, #0
 801d7ec:	f045 0502 	orr.w	r5, r5, #2
 801d7f0:	2302      	movs	r3, #2
 801d7f2:	9206      	str	r2, [sp, #24]
 801d7f4:	e7c5      	b.n	801d782 <_svfprintf_r+0xa2a>
 801d7f6:	4633      	mov	r3, r6
 801d7f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d7fc:	f853 9b04 	ldr.w	r9, [r3], #4
 801d800:	9307      	str	r3, [sp, #28]
 801d802:	f04f 0600 	mov.w	r6, #0
 801d806:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801d80a:	d00f      	beq.n	801d82c <_svfprintf_r+0xad4>
 801d80c:	4642      	mov	r2, r8
 801d80e:	4631      	mov	r1, r6
 801d810:	4648      	mov	r0, r9
 801d812:	f7e2 fce5 	bl	80001e0 <memchr>
 801d816:	4682      	mov	sl, r0
 801d818:	2800      	cmp	r0, #0
 801d81a:	f43f ac81 	beq.w	801d120 <_svfprintf_r+0x3c8>
 801d81e:	eba0 0809 	sub.w	r8, r0, r9
 801d822:	46b2      	mov	sl, r6
 801d824:	9610      	str	r6, [sp, #64]	@ 0x40
 801d826:	4637      	mov	r7, r6
 801d828:	9608      	str	r6, [sp, #32]
 801d82a:	e5eb      	b.n	801d404 <_svfprintf_r+0x6ac>
 801d82c:	4648      	mov	r0, r9
 801d82e:	f7e2 fccf 	bl	80001d0 <strlen>
 801d832:	46b2      	mov	sl, r6
 801d834:	4680      	mov	r8, r0
 801d836:	e473      	b.n	801d120 <_svfprintf_r+0x3c8>
 801d838:	f045 0510 	orr.w	r5, r5, #16
 801d83c:	f015 0320 	ands.w	r3, r5, #32
 801d840:	d009      	beq.n	801d856 <_svfprintf_r+0xafe>
 801d842:	3607      	adds	r6, #7
 801d844:	f026 0307 	bic.w	r3, r6, #7
 801d848:	461a      	mov	r2, r3
 801d84a:	685f      	ldr	r7, [r3, #4]
 801d84c:	f852 6b08 	ldr.w	r6, [r2], #8
 801d850:	9207      	str	r2, [sp, #28]
 801d852:	2301      	movs	r3, #1
 801d854:	e795      	b.n	801d782 <_svfprintf_r+0xa2a>
 801d856:	4632      	mov	r2, r6
 801d858:	f015 0710 	ands.w	r7, r5, #16
 801d85c:	f852 6b04 	ldr.w	r6, [r2], #4
 801d860:	9207      	str	r2, [sp, #28]
 801d862:	d001      	beq.n	801d868 <_svfprintf_r+0xb10>
 801d864:	461f      	mov	r7, r3
 801d866:	e7f4      	b.n	801d852 <_svfprintf_r+0xafa>
 801d868:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801d86c:	d001      	beq.n	801d872 <_svfprintf_r+0xb1a>
 801d86e:	b2b6      	uxth	r6, r6
 801d870:	e7ef      	b.n	801d852 <_svfprintf_r+0xafa>
 801d872:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801d876:	d0ec      	beq.n	801d852 <_svfprintf_r+0xafa>
 801d878:	b2f6      	uxtb	r6, r6
 801d87a:	e7f3      	b.n	801d864 <_svfprintf_r+0xb0c>
 801d87c:	4b6f      	ldr	r3, [pc, #444]	@ (801da3c <_svfprintf_r+0xce4>)
 801d87e:	f7ff bb39 	b.w	801cef4 <_svfprintf_r+0x19c>
 801d882:	4632      	mov	r2, r6
 801d884:	f015 0710 	ands.w	r7, r5, #16
 801d888:	f852 6b04 	ldr.w	r6, [r2], #4
 801d88c:	9207      	str	r2, [sp, #28]
 801d88e:	d002      	beq.n	801d896 <_svfprintf_r+0xb3e>
 801d890:	461f      	mov	r7, r3
 801d892:	f7ff bb3c 	b.w	801cf0e <_svfprintf_r+0x1b6>
 801d896:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801d89a:	d002      	beq.n	801d8a2 <_svfprintf_r+0xb4a>
 801d89c:	b2b6      	uxth	r6, r6
 801d89e:	f7ff bb36 	b.w	801cf0e <_svfprintf_r+0x1b6>
 801d8a2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801d8a6:	f43f ab32 	beq.w	801cf0e <_svfprintf_r+0x1b6>
 801d8aa:	b2f6      	uxtb	r6, r6
 801d8ac:	e7f0      	b.n	801d890 <_svfprintf_r+0xb38>
 801d8ae:	2e0a      	cmp	r6, #10
 801d8b0:	f177 0300 	sbcs.w	r3, r7, #0
 801d8b4:	d207      	bcs.n	801d8c6 <_svfprintf_r+0xb6e>
 801d8b6:	3630      	adds	r6, #48	@ 0x30
 801d8b8:	b2f6      	uxtb	r6, r6
 801d8ba:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801d8be:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 801d8c2:	f000 bc15 	b.w	801e0f0 <_svfprintf_r+0x1398>
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	9304      	str	r3, [sp, #16]
 801d8ca:	9b08      	ldr	r3, [sp, #32]
 801d8cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d8d0:	ad52      	add	r5, sp, #328	@ 0x148
 801d8d2:	9310      	str	r3, [sp, #64]	@ 0x40
 801d8d4:	220a      	movs	r2, #10
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	4630      	mov	r0, r6
 801d8da:	4639      	mov	r1, r7
 801d8dc:	f7e3 f9d4 	bl	8000c88 <__aeabi_uldivmod>
 801d8e0:	9b04      	ldr	r3, [sp, #16]
 801d8e2:	9011      	str	r0, [sp, #68]	@ 0x44
 801d8e4:	3301      	adds	r3, #1
 801d8e6:	9304      	str	r3, [sp, #16]
 801d8e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d8ea:	3230      	adds	r2, #48	@ 0x30
 801d8ec:	468a      	mov	sl, r1
 801d8ee:	f105 39ff 	add.w	r9, r5, #4294967295
 801d8f2:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d8f6:	b1d3      	cbz	r3, 801d92e <_svfprintf_r+0xbd6>
 801d8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8fa:	9a04      	ldr	r2, [sp, #16]
 801d8fc:	781b      	ldrb	r3, [r3, #0]
 801d8fe:	429a      	cmp	r2, r3
 801d900:	d115      	bne.n	801d92e <_svfprintf_r+0xbd6>
 801d902:	2aff      	cmp	r2, #255	@ 0xff
 801d904:	d013      	beq.n	801d92e <_svfprintf_r+0xbd6>
 801d906:	2e0a      	cmp	r6, #10
 801d908:	f177 0300 	sbcs.w	r3, r7, #0
 801d90c:	d30f      	bcc.n	801d92e <_svfprintf_r+0xbd6>
 801d90e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d910:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d912:	eba9 0903 	sub.w	r9, r9, r3
 801d916:	461a      	mov	r2, r3
 801d918:	4648      	mov	r0, r9
 801d91a:	f000 fcfe 	bl	801e31a <strncpy>
 801d91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d920:	785b      	ldrb	r3, [r3, #1]
 801d922:	b11b      	cbz	r3, 801d92c <_svfprintf_r+0xbd4>
 801d924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d926:	3301      	adds	r3, #1
 801d928:	9309      	str	r3, [sp, #36]	@ 0x24
 801d92a:	2300      	movs	r3, #0
 801d92c:	9304      	str	r3, [sp, #16]
 801d92e:	2e0a      	cmp	r6, #10
 801d930:	f177 0700 	sbcs.w	r7, r7, #0
 801d934:	f0c0 83dc 	bcc.w	801e0f0 <_svfprintf_r+0x1398>
 801d938:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d93a:	4657      	mov	r7, sl
 801d93c:	464d      	mov	r5, r9
 801d93e:	e7c9      	b.n	801d8d4 <_svfprintf_r+0xb7c>
 801d940:	f006 030f 	and.w	r3, r6, #15
 801d944:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d946:	0936      	lsrs	r6, r6, #4
 801d948:	5cd3      	ldrb	r3, [r2, r3]
 801d94a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801d94e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801d952:	093f      	lsrs	r7, r7, #4
 801d954:	ea56 0307 	orrs.w	r3, r6, r7
 801d958:	d1f2      	bne.n	801d940 <_svfprintf_r+0xbe8>
 801d95a:	e3c9      	b.n	801e0f0 <_svfprintf_r+0x1398>
 801d95c:	b91b      	cbnz	r3, 801d966 <_svfprintf_r+0xc0e>
 801d95e:	07e9      	lsls	r1, r5, #31
 801d960:	d501      	bpl.n	801d966 <_svfprintf_r+0xc0e>
 801d962:	2630      	movs	r6, #48	@ 0x30
 801d964:	e7a9      	b.n	801d8ba <_svfprintf_r+0xb62>
 801d966:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801d96a:	e3c1      	b.n	801e0f0 <_svfprintf_r+0x1398>
 801d96c:	9b06      	ldr	r3, [sp, #24]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	f000 838f 	beq.w	801e092 <_svfprintf_r+0x133a>
 801d974:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801d978:	2300      	movs	r3, #0
 801d97a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801d97e:	9607      	str	r6, [sp, #28]
 801d980:	f7ff bb63 	b.w	801d04a <_svfprintf_r+0x2f2>
 801d984:	2010      	movs	r0, #16
 801d986:	4403      	add	r3, r0
 801d988:	2a07      	cmp	r2, #7
 801d98a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d98e:	6060      	str	r0, [r4, #4]
 801d990:	dd08      	ble.n	801d9a4 <_svfprintf_r+0xc4c>
 801d992:	9803      	ldr	r0, [sp, #12]
 801d994:	aa26      	add	r2, sp, #152	@ 0x98
 801d996:	4659      	mov	r1, fp
 801d998:	f002 f8b1 	bl	801fafe <__ssprint_r>
 801d99c:	2800      	cmp	r0, #0
 801d99e:	f040 8356 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d9a2:	a929      	add	r1, sp, #164	@ 0xa4
 801d9a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d9a6:	3b10      	subs	r3, #16
 801d9a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d9aa:	460c      	mov	r4, r1
 801d9ac:	e546      	b.n	801d43c <_svfprintf_r+0x6e4>
 801d9ae:	460c      	mov	r4, r1
 801d9b0:	e561      	b.n	801d476 <_svfprintf_r+0x71e>
 801d9b2:	9803      	ldr	r0, [sp, #12]
 801d9b4:	aa26      	add	r2, sp, #152	@ 0x98
 801d9b6:	4659      	mov	r1, fp
 801d9b8:	f002 f8a1 	bl	801fafe <__ssprint_r>
 801d9bc:	2800      	cmp	r0, #0
 801d9be:	f040 8346 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d9c2:	ac29      	add	r4, sp, #164	@ 0xa4
 801d9c4:	e569      	b.n	801d49a <_svfprintf_r+0x742>
 801d9c6:	9803      	ldr	r0, [sp, #12]
 801d9c8:	aa26      	add	r2, sp, #152	@ 0x98
 801d9ca:	4659      	mov	r1, fp
 801d9cc:	f002 f897 	bl	801fafe <__ssprint_r>
 801d9d0:	2800      	cmp	r0, #0
 801d9d2:	f040 833c 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d9d6:	ac29      	add	r4, sp, #164	@ 0xa4
 801d9d8:	e56f      	b.n	801d4ba <_svfprintf_r+0x762>
 801d9da:	2010      	movs	r0, #16
 801d9dc:	4403      	add	r3, r0
 801d9de:	2a07      	cmp	r2, #7
 801d9e0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d9e4:	6060      	str	r0, [r4, #4]
 801d9e6:	dd08      	ble.n	801d9fa <_svfprintf_r+0xca2>
 801d9e8:	9803      	ldr	r0, [sp, #12]
 801d9ea:	aa26      	add	r2, sp, #152	@ 0x98
 801d9ec:	4659      	mov	r1, fp
 801d9ee:	f002 f886 	bl	801fafe <__ssprint_r>
 801d9f2:	2800      	cmp	r0, #0
 801d9f4:	f040 832b 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801d9f8:	a929      	add	r1, sp, #164	@ 0xa4
 801d9fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d9fc:	3b10      	subs	r3, #16
 801d9fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801da00:	460c      	mov	r4, r1
 801da02:	e563      	b.n	801d4cc <_svfprintf_r+0x774>
 801da04:	460c      	mov	r4, r1
 801da06:	e57e      	b.n	801d506 <_svfprintf_r+0x7ae>
 801da08:	2010      	movs	r0, #16
 801da0a:	4403      	add	r3, r0
 801da0c:	2a07      	cmp	r2, #7
 801da0e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801da12:	6060      	str	r0, [r4, #4]
 801da14:	dd08      	ble.n	801da28 <_svfprintf_r+0xcd0>
 801da16:	9803      	ldr	r0, [sp, #12]
 801da18:	aa26      	add	r2, sp, #152	@ 0x98
 801da1a:	4659      	mov	r1, fp
 801da1c:	f002 f86f 	bl	801fafe <__ssprint_r>
 801da20:	2800      	cmp	r0, #0
 801da22:	f040 8314 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801da26:	a929      	add	r1, sp, #164	@ 0xa4
 801da28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da2a:	3b10      	subs	r3, #16
 801da2c:	9310      	str	r3, [sp, #64]	@ 0x40
 801da2e:	460c      	mov	r4, r1
 801da30:	e56f      	b.n	801d512 <_svfprintf_r+0x7ba>
 801da32:	460c      	mov	r4, r1
 801da34:	e58a      	b.n	801d54c <_svfprintf_r+0x7f4>
 801da36:	bf00      	nop
 801da38:	08023920 	.word	0x08023920
 801da3c:	08023931 	.word	0x08023931
 801da40:	9b06      	ldr	r3, [sp, #24]
 801da42:	2b65      	cmp	r3, #101	@ 0x65
 801da44:	f340 8246 	ble.w	801ded4 <_svfprintf_r+0x117c>
 801da48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801da4c:	2200      	movs	r2, #0
 801da4e:	2300      	movs	r3, #0
 801da50:	f7e3 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 801da54:	2800      	cmp	r0, #0
 801da56:	d06a      	beq.n	801db2e <_svfprintf_r+0xdd6>
 801da58:	4b73      	ldr	r3, [pc, #460]	@ (801dc28 <_svfprintf_r+0xed0>)
 801da5a:	6023      	str	r3, [r4, #0]
 801da5c:	2301      	movs	r3, #1
 801da5e:	6063      	str	r3, [r4, #4]
 801da60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da62:	3301      	adds	r3, #1
 801da64:	9328      	str	r3, [sp, #160]	@ 0xa0
 801da66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801da68:	3301      	adds	r3, #1
 801da6a:	2b07      	cmp	r3, #7
 801da6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801da6e:	dc37      	bgt.n	801dae0 <_svfprintf_r+0xd88>
 801da70:	3408      	adds	r4, #8
 801da72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801da74:	9a04      	ldr	r2, [sp, #16]
 801da76:	4293      	cmp	r3, r2
 801da78:	db02      	blt.n	801da80 <_svfprintf_r+0xd28>
 801da7a:	07ef      	lsls	r7, r5, #31
 801da7c:	f57f ad76 	bpl.w	801d56c <_svfprintf_r+0x814>
 801da80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801da82:	6023      	str	r3, [r4, #0]
 801da84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801da88:	6063      	str	r3, [r4, #4]
 801da8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801da8c:	4413      	add	r3, r2
 801da8e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801da90:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801da92:	3301      	adds	r3, #1
 801da94:	2b07      	cmp	r3, #7
 801da96:	9327      	str	r3, [sp, #156]	@ 0x9c
 801da98:	dc2c      	bgt.n	801daf4 <_svfprintf_r+0xd9c>
 801da9a:	3408      	adds	r4, #8
 801da9c:	9b04      	ldr	r3, [sp, #16]
 801da9e:	1e5e      	subs	r6, r3, #1
 801daa0:	2e00      	cmp	r6, #0
 801daa2:	f77f ad63 	ble.w	801d56c <_svfprintf_r+0x814>
 801daa6:	4f61      	ldr	r7, [pc, #388]	@ (801dc2c <_svfprintf_r+0xed4>)
 801daa8:	f04f 0810 	mov.w	r8, #16
 801daac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801dab0:	2e10      	cmp	r6, #16
 801dab2:	f103 0301 	add.w	r3, r3, #1
 801dab6:	f104 0108 	add.w	r1, r4, #8
 801daba:	6027      	str	r7, [r4, #0]
 801dabc:	dc24      	bgt.n	801db08 <_svfprintf_r+0xdb0>
 801dabe:	6066      	str	r6, [r4, #4]
 801dac0:	2b07      	cmp	r3, #7
 801dac2:	4416      	add	r6, r2
 801dac4:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801dac8:	f340 82a0 	ble.w	801e00c <_svfprintf_r+0x12b4>
 801dacc:	9803      	ldr	r0, [sp, #12]
 801dace:	aa26      	add	r2, sp, #152	@ 0x98
 801dad0:	4659      	mov	r1, fp
 801dad2:	f002 f814 	bl	801fafe <__ssprint_r>
 801dad6:	2800      	cmp	r0, #0
 801dad8:	f040 82b9 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dadc:	ac29      	add	r4, sp, #164	@ 0xa4
 801dade:	e545      	b.n	801d56c <_svfprintf_r+0x814>
 801dae0:	9803      	ldr	r0, [sp, #12]
 801dae2:	aa26      	add	r2, sp, #152	@ 0x98
 801dae4:	4659      	mov	r1, fp
 801dae6:	f002 f80a 	bl	801fafe <__ssprint_r>
 801daea:	2800      	cmp	r0, #0
 801daec:	f040 82af 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801daf0:	ac29      	add	r4, sp, #164	@ 0xa4
 801daf2:	e7be      	b.n	801da72 <_svfprintf_r+0xd1a>
 801daf4:	9803      	ldr	r0, [sp, #12]
 801daf6:	aa26      	add	r2, sp, #152	@ 0x98
 801daf8:	4659      	mov	r1, fp
 801dafa:	f002 f800 	bl	801fafe <__ssprint_r>
 801dafe:	2800      	cmp	r0, #0
 801db00:	f040 82a5 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801db04:	ac29      	add	r4, sp, #164	@ 0xa4
 801db06:	e7c9      	b.n	801da9c <_svfprintf_r+0xd44>
 801db08:	3210      	adds	r2, #16
 801db0a:	2b07      	cmp	r3, #7
 801db0c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801db10:	f8c4 8004 	str.w	r8, [r4, #4]
 801db14:	dd08      	ble.n	801db28 <_svfprintf_r+0xdd0>
 801db16:	9803      	ldr	r0, [sp, #12]
 801db18:	aa26      	add	r2, sp, #152	@ 0x98
 801db1a:	4659      	mov	r1, fp
 801db1c:	f001 ffef 	bl	801fafe <__ssprint_r>
 801db20:	2800      	cmp	r0, #0
 801db22:	f040 8294 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801db26:	a929      	add	r1, sp, #164	@ 0xa4
 801db28:	3e10      	subs	r6, #16
 801db2a:	460c      	mov	r4, r1
 801db2c:	e7be      	b.n	801daac <_svfprintf_r+0xd54>
 801db2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801db30:	2b00      	cmp	r3, #0
 801db32:	dc7d      	bgt.n	801dc30 <_svfprintf_r+0xed8>
 801db34:	4b3c      	ldr	r3, [pc, #240]	@ (801dc28 <_svfprintf_r+0xed0>)
 801db36:	6023      	str	r3, [r4, #0]
 801db38:	2301      	movs	r3, #1
 801db3a:	6063      	str	r3, [r4, #4]
 801db3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db3e:	3301      	adds	r3, #1
 801db40:	9328      	str	r3, [sp, #160]	@ 0xa0
 801db42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801db44:	3301      	adds	r3, #1
 801db46:	2b07      	cmp	r3, #7
 801db48:	9327      	str	r3, [sp, #156]	@ 0x9c
 801db4a:	dc46      	bgt.n	801dbda <_svfprintf_r+0xe82>
 801db4c:	3408      	adds	r4, #8
 801db4e:	9904      	ldr	r1, [sp, #16]
 801db50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801db52:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801db54:	430b      	orrs	r3, r1
 801db56:	f005 0101 	and.w	r1, r5, #1
 801db5a:	430b      	orrs	r3, r1
 801db5c:	f43f ad06 	beq.w	801d56c <_svfprintf_r+0x814>
 801db60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801db62:	6023      	str	r3, [r4, #0]
 801db64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db66:	6063      	str	r3, [r4, #4]
 801db68:	441a      	add	r2, r3
 801db6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801db6c:	9228      	str	r2, [sp, #160]	@ 0xa0
 801db6e:	3301      	adds	r3, #1
 801db70:	2b07      	cmp	r3, #7
 801db72:	9327      	str	r3, [sp, #156]	@ 0x9c
 801db74:	dc3b      	bgt.n	801dbee <_svfprintf_r+0xe96>
 801db76:	f104 0308 	add.w	r3, r4, #8
 801db7a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801db7c:	2e00      	cmp	r6, #0
 801db7e:	da1b      	bge.n	801dbb8 <_svfprintf_r+0xe60>
 801db80:	4f2a      	ldr	r7, [pc, #168]	@ (801dc2c <_svfprintf_r+0xed4>)
 801db82:	4276      	negs	r6, r6
 801db84:	461a      	mov	r2, r3
 801db86:	2410      	movs	r4, #16
 801db88:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801db8c:	2e10      	cmp	r6, #16
 801db8e:	f101 0101 	add.w	r1, r1, #1
 801db92:	f103 0308 	add.w	r3, r3, #8
 801db96:	6017      	str	r7, [r2, #0]
 801db98:	dc33      	bgt.n	801dc02 <_svfprintf_r+0xeaa>
 801db9a:	6056      	str	r6, [r2, #4]
 801db9c:	2907      	cmp	r1, #7
 801db9e:	4406      	add	r6, r0
 801dba0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801dba4:	dd08      	ble.n	801dbb8 <_svfprintf_r+0xe60>
 801dba6:	9803      	ldr	r0, [sp, #12]
 801dba8:	aa26      	add	r2, sp, #152	@ 0x98
 801dbaa:	4659      	mov	r1, fp
 801dbac:	f001 ffa7 	bl	801fafe <__ssprint_r>
 801dbb0:	2800      	cmp	r0, #0
 801dbb2:	f040 824c 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dbb6:	ab29      	add	r3, sp, #164	@ 0xa4
 801dbb8:	9a04      	ldr	r2, [sp, #16]
 801dbba:	9904      	ldr	r1, [sp, #16]
 801dbbc:	605a      	str	r2, [r3, #4]
 801dbbe:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801dbc0:	f8c3 9000 	str.w	r9, [r3]
 801dbc4:	440a      	add	r2, r1
 801dbc6:	9228      	str	r2, [sp, #160]	@ 0xa0
 801dbc8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801dbca:	3201      	adds	r2, #1
 801dbcc:	2a07      	cmp	r2, #7
 801dbce:	9227      	str	r2, [sp, #156]	@ 0x9c
 801dbd0:	f73f af7c 	bgt.w	801dacc <_svfprintf_r+0xd74>
 801dbd4:	f103 0408 	add.w	r4, r3, #8
 801dbd8:	e4c8      	b.n	801d56c <_svfprintf_r+0x814>
 801dbda:	9803      	ldr	r0, [sp, #12]
 801dbdc:	aa26      	add	r2, sp, #152	@ 0x98
 801dbde:	4659      	mov	r1, fp
 801dbe0:	f001 ff8d 	bl	801fafe <__ssprint_r>
 801dbe4:	2800      	cmp	r0, #0
 801dbe6:	f040 8232 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dbea:	ac29      	add	r4, sp, #164	@ 0xa4
 801dbec:	e7af      	b.n	801db4e <_svfprintf_r+0xdf6>
 801dbee:	9803      	ldr	r0, [sp, #12]
 801dbf0:	aa26      	add	r2, sp, #152	@ 0x98
 801dbf2:	4659      	mov	r1, fp
 801dbf4:	f001 ff83 	bl	801fafe <__ssprint_r>
 801dbf8:	2800      	cmp	r0, #0
 801dbfa:	f040 8228 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dbfe:	ab29      	add	r3, sp, #164	@ 0xa4
 801dc00:	e7bb      	b.n	801db7a <_svfprintf_r+0xe22>
 801dc02:	3010      	adds	r0, #16
 801dc04:	2907      	cmp	r1, #7
 801dc06:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801dc0a:	6054      	str	r4, [r2, #4]
 801dc0c:	dd08      	ble.n	801dc20 <_svfprintf_r+0xec8>
 801dc0e:	9803      	ldr	r0, [sp, #12]
 801dc10:	aa26      	add	r2, sp, #152	@ 0x98
 801dc12:	4659      	mov	r1, fp
 801dc14:	f001 ff73 	bl	801fafe <__ssprint_r>
 801dc18:	2800      	cmp	r0, #0
 801dc1a:	f040 8218 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dc1e:	ab29      	add	r3, sp, #164	@ 0xa4
 801dc20:	3e10      	subs	r6, #16
 801dc22:	461a      	mov	r2, r3
 801dc24:	e7b0      	b.n	801db88 <_svfprintf_r+0xe30>
 801dc26:	bf00      	nop
 801dc28:	08023942 	.word	0x08023942
 801dc2c:	08023944 	.word	0x08023944
 801dc30:	9b04      	ldr	r3, [sp, #16]
 801dc32:	444b      	add	r3, r9
 801dc34:	9306      	str	r3, [sp, #24]
 801dc36:	9b04      	ldr	r3, [sp, #16]
 801dc38:	42b3      	cmp	r3, r6
 801dc3a:	bfa8      	it	ge
 801dc3c:	4633      	movge	r3, r6
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	4698      	mov	r8, r3
 801dc42:	dd0b      	ble.n	801dc5c <_svfprintf_r+0xf04>
 801dc44:	e9c4 9300 	strd	r9, r3, [r4]
 801dc48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc4a:	4443      	add	r3, r8
 801dc4c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dc4e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dc50:	3301      	adds	r3, #1
 801dc52:	2b07      	cmp	r3, #7
 801dc54:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dc56:	f300 8089 	bgt.w	801dd6c <_svfprintf_r+0x1014>
 801dc5a:	3408      	adds	r4, #8
 801dc5c:	4643      	mov	r3, r8
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	bfac      	ite	ge
 801dc62:	eba6 0808 	subge.w	r8, r6, r8
 801dc66:	46b0      	movlt	r8, r6
 801dc68:	f1b8 0f00 	cmp.w	r8, #0
 801dc6c:	dd1b      	ble.n	801dca6 <_svfprintf_r+0xf4e>
 801dc6e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801dc72:	4897      	ldr	r0, [pc, #604]	@ (801ded0 <_svfprintf_r+0x1178>)
 801dc74:	6020      	str	r0, [r4, #0]
 801dc76:	f1b8 0f10 	cmp.w	r8, #16
 801dc7a:	f102 0201 	add.w	r2, r2, #1
 801dc7e:	f104 0108 	add.w	r1, r4, #8
 801dc82:	dc7d      	bgt.n	801dd80 <_svfprintf_r+0x1028>
 801dc84:	4443      	add	r3, r8
 801dc86:	2a07      	cmp	r2, #7
 801dc88:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801dc8c:	f8c4 8004 	str.w	r8, [r4, #4]
 801dc90:	f340 808a 	ble.w	801dda8 <_svfprintf_r+0x1050>
 801dc94:	9803      	ldr	r0, [sp, #12]
 801dc96:	aa26      	add	r2, sp, #152	@ 0x98
 801dc98:	4659      	mov	r1, fp
 801dc9a:	f001 ff30 	bl	801fafe <__ssprint_r>
 801dc9e:	2800      	cmp	r0, #0
 801dca0:	f040 81d5 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dca4:	ac29      	add	r4, sp, #164	@ 0xa4
 801dca6:	eb09 0806 	add.w	r8, r9, r6
 801dcaa:	056e      	lsls	r6, r5, #21
 801dcac:	d508      	bpl.n	801dcc0 <_svfprintf_r+0xf68>
 801dcae:	9b08      	ldr	r3, [sp, #32]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d17b      	bne.n	801ddac <_svfprintf_r+0x1054>
 801dcb4:	2f00      	cmp	r7, #0
 801dcb6:	d17b      	bne.n	801ddb0 <_svfprintf_r+0x1058>
 801dcb8:	9b06      	ldr	r3, [sp, #24]
 801dcba:	4598      	cmp	r8, r3
 801dcbc:	bf28      	it	cs
 801dcbe:	4698      	movcs	r8, r3
 801dcc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dcc2:	9a04      	ldr	r2, [sp, #16]
 801dcc4:	4293      	cmp	r3, r2
 801dcc6:	db01      	blt.n	801dccc <_svfprintf_r+0xf74>
 801dcc8:	07e8      	lsls	r0, r5, #31
 801dcca:	d50e      	bpl.n	801dcea <_svfprintf_r+0xf92>
 801dccc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dcce:	6023      	str	r3, [r4, #0]
 801dcd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dcd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dcd4:	6063      	str	r3, [r4, #4]
 801dcd6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dcd8:	4413      	add	r3, r2
 801dcda:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dcdc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dcde:	3301      	adds	r3, #1
 801dce0:	2b07      	cmp	r3, #7
 801dce2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dce4:	f300 80df 	bgt.w	801dea6 <_svfprintf_r+0x114e>
 801dce8:	3408      	adds	r4, #8
 801dcea:	9b04      	ldr	r3, [sp, #16]
 801dcec:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801dcee:	1bdf      	subs	r7, r3, r7
 801dcf0:	9b06      	ldr	r3, [sp, #24]
 801dcf2:	eba3 0308 	sub.w	r3, r3, r8
 801dcf6:	429f      	cmp	r7, r3
 801dcf8:	bfa8      	it	ge
 801dcfa:	461f      	movge	r7, r3
 801dcfc:	2f00      	cmp	r7, #0
 801dcfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd00:	dd0a      	ble.n	801dd18 <_svfprintf_r+0xfc0>
 801dd02:	443b      	add	r3, r7
 801dd04:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dd06:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dd08:	3301      	adds	r3, #1
 801dd0a:	2b07      	cmp	r3, #7
 801dd0c:	e9c4 8700 	strd	r8, r7, [r4]
 801dd10:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dd12:	f300 80d2 	bgt.w	801deba <_svfprintf_r+0x1162>
 801dd16:	3408      	adds	r4, #8
 801dd18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801dd1a:	9b04      	ldr	r3, [sp, #16]
 801dd1c:	2f00      	cmp	r7, #0
 801dd1e:	eba3 0606 	sub.w	r6, r3, r6
 801dd22:	bfa8      	it	ge
 801dd24:	1bf6      	subge	r6, r6, r7
 801dd26:	2e00      	cmp	r6, #0
 801dd28:	f77f ac20 	ble.w	801d56c <_svfprintf_r+0x814>
 801dd2c:	4f68      	ldr	r7, [pc, #416]	@ (801ded0 <_svfprintf_r+0x1178>)
 801dd2e:	f04f 0810 	mov.w	r8, #16
 801dd32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801dd36:	2e10      	cmp	r6, #16
 801dd38:	f103 0301 	add.w	r3, r3, #1
 801dd3c:	f104 0108 	add.w	r1, r4, #8
 801dd40:	6027      	str	r7, [r4, #0]
 801dd42:	f77f aebc 	ble.w	801dabe <_svfprintf_r+0xd66>
 801dd46:	3210      	adds	r2, #16
 801dd48:	2b07      	cmp	r3, #7
 801dd4a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801dd4e:	f8c4 8004 	str.w	r8, [r4, #4]
 801dd52:	dd08      	ble.n	801dd66 <_svfprintf_r+0x100e>
 801dd54:	9803      	ldr	r0, [sp, #12]
 801dd56:	aa26      	add	r2, sp, #152	@ 0x98
 801dd58:	4659      	mov	r1, fp
 801dd5a:	f001 fed0 	bl	801fafe <__ssprint_r>
 801dd5e:	2800      	cmp	r0, #0
 801dd60:	f040 8175 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dd64:	a929      	add	r1, sp, #164	@ 0xa4
 801dd66:	3e10      	subs	r6, #16
 801dd68:	460c      	mov	r4, r1
 801dd6a:	e7e2      	b.n	801dd32 <_svfprintf_r+0xfda>
 801dd6c:	9803      	ldr	r0, [sp, #12]
 801dd6e:	aa26      	add	r2, sp, #152	@ 0x98
 801dd70:	4659      	mov	r1, fp
 801dd72:	f001 fec4 	bl	801fafe <__ssprint_r>
 801dd76:	2800      	cmp	r0, #0
 801dd78:	f040 8169 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dd7c:	ac29      	add	r4, sp, #164	@ 0xa4
 801dd7e:	e76d      	b.n	801dc5c <_svfprintf_r+0xf04>
 801dd80:	2010      	movs	r0, #16
 801dd82:	4403      	add	r3, r0
 801dd84:	2a07      	cmp	r2, #7
 801dd86:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801dd8a:	6060      	str	r0, [r4, #4]
 801dd8c:	dd08      	ble.n	801dda0 <_svfprintf_r+0x1048>
 801dd8e:	9803      	ldr	r0, [sp, #12]
 801dd90:	aa26      	add	r2, sp, #152	@ 0x98
 801dd92:	4659      	mov	r1, fp
 801dd94:	f001 feb3 	bl	801fafe <__ssprint_r>
 801dd98:	2800      	cmp	r0, #0
 801dd9a:	f040 8158 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801dd9e:	a929      	add	r1, sp, #164	@ 0xa4
 801dda0:	f1a8 0810 	sub.w	r8, r8, #16
 801dda4:	460c      	mov	r4, r1
 801dda6:	e762      	b.n	801dc6e <_svfprintf_r+0xf16>
 801dda8:	460c      	mov	r4, r1
 801ddaa:	e77c      	b.n	801dca6 <_svfprintf_r+0xf4e>
 801ddac:	2f00      	cmp	r7, #0
 801ddae:	d04a      	beq.n	801de46 <_svfprintf_r+0x10ee>
 801ddb0:	3f01      	subs	r7, #1
 801ddb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ddb4:	6023      	str	r3, [r4, #0]
 801ddb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ddb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ddba:	6063      	str	r3, [r4, #4]
 801ddbc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ddbe:	4413      	add	r3, r2
 801ddc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ddc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ddc4:	3301      	adds	r3, #1
 801ddc6:	2b07      	cmp	r3, #7
 801ddc8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ddca:	dc43      	bgt.n	801de54 <_svfprintf_r+0x10fc>
 801ddcc:	3408      	adds	r4, #8
 801ddce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddd0:	781a      	ldrb	r2, [r3, #0]
 801ddd2:	9b06      	ldr	r3, [sp, #24]
 801ddd4:	eba3 0308 	sub.w	r3, r3, r8
 801ddd8:	429a      	cmp	r2, r3
 801ddda:	bfa8      	it	ge
 801dddc:	461a      	movge	r2, r3
 801ddde:	2a00      	cmp	r2, #0
 801dde0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dde2:	4691      	mov	r9, r2
 801dde4:	dd09      	ble.n	801ddfa <_svfprintf_r+0x10a2>
 801dde6:	4413      	add	r3, r2
 801dde8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ddea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ddec:	3301      	adds	r3, #1
 801ddee:	2b07      	cmp	r3, #7
 801ddf0:	e9c4 8200 	strd	r8, r2, [r4]
 801ddf4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ddf6:	dc37      	bgt.n	801de68 <_svfprintf_r+0x1110>
 801ddf8:	3408      	adds	r4, #8
 801ddfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddfc:	781e      	ldrb	r6, [r3, #0]
 801ddfe:	f1b9 0f00 	cmp.w	r9, #0
 801de02:	bfa8      	it	ge
 801de04:	eba6 0609 	subge.w	r6, r6, r9
 801de08:	2e00      	cmp	r6, #0
 801de0a:	dd18      	ble.n	801de3e <_svfprintf_r+0x10e6>
 801de0c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801de10:	482f      	ldr	r0, [pc, #188]	@ (801ded0 <_svfprintf_r+0x1178>)
 801de12:	6020      	str	r0, [r4, #0]
 801de14:	2e10      	cmp	r6, #16
 801de16:	f103 0301 	add.w	r3, r3, #1
 801de1a:	f104 0108 	add.w	r1, r4, #8
 801de1e:	dc2d      	bgt.n	801de7c <_svfprintf_r+0x1124>
 801de20:	6066      	str	r6, [r4, #4]
 801de22:	2b07      	cmp	r3, #7
 801de24:	4416      	add	r6, r2
 801de26:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801de2a:	dd3a      	ble.n	801dea2 <_svfprintf_r+0x114a>
 801de2c:	9803      	ldr	r0, [sp, #12]
 801de2e:	aa26      	add	r2, sp, #152	@ 0x98
 801de30:	4659      	mov	r1, fp
 801de32:	f001 fe64 	bl	801fafe <__ssprint_r>
 801de36:	2800      	cmp	r0, #0
 801de38:	f040 8109 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801de3c:	ac29      	add	r4, sp, #164	@ 0xa4
 801de3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de40:	781b      	ldrb	r3, [r3, #0]
 801de42:	4498      	add	r8, r3
 801de44:	e733      	b.n	801dcae <_svfprintf_r+0xf56>
 801de46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de48:	3b01      	subs	r3, #1
 801de4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801de4c:	9b08      	ldr	r3, [sp, #32]
 801de4e:	3b01      	subs	r3, #1
 801de50:	9308      	str	r3, [sp, #32]
 801de52:	e7ae      	b.n	801ddb2 <_svfprintf_r+0x105a>
 801de54:	9803      	ldr	r0, [sp, #12]
 801de56:	aa26      	add	r2, sp, #152	@ 0x98
 801de58:	4659      	mov	r1, fp
 801de5a:	f001 fe50 	bl	801fafe <__ssprint_r>
 801de5e:	2800      	cmp	r0, #0
 801de60:	f040 80f5 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801de64:	ac29      	add	r4, sp, #164	@ 0xa4
 801de66:	e7b2      	b.n	801ddce <_svfprintf_r+0x1076>
 801de68:	9803      	ldr	r0, [sp, #12]
 801de6a:	aa26      	add	r2, sp, #152	@ 0x98
 801de6c:	4659      	mov	r1, fp
 801de6e:	f001 fe46 	bl	801fafe <__ssprint_r>
 801de72:	2800      	cmp	r0, #0
 801de74:	f040 80eb 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801de78:	ac29      	add	r4, sp, #164	@ 0xa4
 801de7a:	e7be      	b.n	801ddfa <_svfprintf_r+0x10a2>
 801de7c:	2010      	movs	r0, #16
 801de7e:	4402      	add	r2, r0
 801de80:	2b07      	cmp	r3, #7
 801de82:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801de86:	6060      	str	r0, [r4, #4]
 801de88:	dd08      	ble.n	801de9c <_svfprintf_r+0x1144>
 801de8a:	9803      	ldr	r0, [sp, #12]
 801de8c:	aa26      	add	r2, sp, #152	@ 0x98
 801de8e:	4659      	mov	r1, fp
 801de90:	f001 fe35 	bl	801fafe <__ssprint_r>
 801de94:	2800      	cmp	r0, #0
 801de96:	f040 80da 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801de9a:	a929      	add	r1, sp, #164	@ 0xa4
 801de9c:	3e10      	subs	r6, #16
 801de9e:	460c      	mov	r4, r1
 801dea0:	e7b4      	b.n	801de0c <_svfprintf_r+0x10b4>
 801dea2:	460c      	mov	r4, r1
 801dea4:	e7cb      	b.n	801de3e <_svfprintf_r+0x10e6>
 801dea6:	9803      	ldr	r0, [sp, #12]
 801dea8:	aa26      	add	r2, sp, #152	@ 0x98
 801deaa:	4659      	mov	r1, fp
 801deac:	f001 fe27 	bl	801fafe <__ssprint_r>
 801deb0:	2800      	cmp	r0, #0
 801deb2:	f040 80cc 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801deb6:	ac29      	add	r4, sp, #164	@ 0xa4
 801deb8:	e717      	b.n	801dcea <_svfprintf_r+0xf92>
 801deba:	9803      	ldr	r0, [sp, #12]
 801debc:	aa26      	add	r2, sp, #152	@ 0x98
 801debe:	4659      	mov	r1, fp
 801dec0:	f001 fe1d 	bl	801fafe <__ssprint_r>
 801dec4:	2800      	cmp	r0, #0
 801dec6:	f040 80c2 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801deca:	ac29      	add	r4, sp, #164	@ 0xa4
 801decc:	e724      	b.n	801dd18 <_svfprintf_r+0xfc0>
 801dece:	bf00      	nop
 801ded0:	08023944 	.word	0x08023944
 801ded4:	9904      	ldr	r1, [sp, #16]
 801ded6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ded8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801deda:	2901      	cmp	r1, #1
 801dedc:	f103 0301 	add.w	r3, r3, #1
 801dee0:	f102 0201 	add.w	r2, r2, #1
 801dee4:	f104 0608 	add.w	r6, r4, #8
 801dee8:	dc02      	bgt.n	801def0 <_svfprintf_r+0x1198>
 801deea:	07e9      	lsls	r1, r5, #31
 801deec:	f140 8083 	bpl.w	801dff6 <_svfprintf_r+0x129e>
 801def0:	2101      	movs	r1, #1
 801def2:	2a07      	cmp	r2, #7
 801def4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801def8:	f8c4 9000 	str.w	r9, [r4]
 801defc:	6061      	str	r1, [r4, #4]
 801defe:	dd08      	ble.n	801df12 <_svfprintf_r+0x11ba>
 801df00:	9803      	ldr	r0, [sp, #12]
 801df02:	aa26      	add	r2, sp, #152	@ 0x98
 801df04:	4659      	mov	r1, fp
 801df06:	f001 fdfa 	bl	801fafe <__ssprint_r>
 801df0a:	2800      	cmp	r0, #0
 801df0c:	f040 809f 	bne.w	801e04e <_svfprintf_r+0x12f6>
 801df10:	ae29      	add	r6, sp, #164	@ 0xa4
 801df12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801df14:	6033      	str	r3, [r6, #0]
 801df16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801df1a:	6073      	str	r3, [r6, #4]
 801df1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df1e:	4413      	add	r3, r2
 801df20:	9328      	str	r3, [sp, #160]	@ 0xa0
 801df22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801df24:	3301      	adds	r3, #1
 801df26:	2b07      	cmp	r3, #7
 801df28:	9327      	str	r3, [sp, #156]	@ 0x9c
 801df2a:	dc33      	bgt.n	801df94 <_svfprintf_r+0x123c>
 801df2c:	3608      	adds	r6, #8
 801df2e:	9b04      	ldr	r3, [sp, #16]
 801df30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801df34:	1e5c      	subs	r4, r3, #1
 801df36:	2200      	movs	r2, #0
 801df38:	2300      	movs	r3, #0
 801df3a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801df3e:	f7e2 fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 801df42:	2800      	cmp	r0, #0
 801df44:	d12f      	bne.n	801dfa6 <_svfprintf_r+0x124e>
 801df46:	f109 0201 	add.w	r2, r9, #1
 801df4a:	e9c6 2400 	strd	r2, r4, [r6]
 801df4e:	9a04      	ldr	r2, [sp, #16]
 801df50:	f108 0301 	add.w	r3, r8, #1
 801df54:	3f01      	subs	r7, #1
 801df56:	4417      	add	r7, r2
 801df58:	2b07      	cmp	r3, #7
 801df5a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801df5e:	dd53      	ble.n	801e008 <_svfprintf_r+0x12b0>
 801df60:	9803      	ldr	r0, [sp, #12]
 801df62:	aa26      	add	r2, sp, #152	@ 0x98
 801df64:	4659      	mov	r1, fp
 801df66:	f001 fdca 	bl	801fafe <__ssprint_r>
 801df6a:	2800      	cmp	r0, #0
 801df6c:	d16f      	bne.n	801e04e <_svfprintf_r+0x12f6>
 801df6e:	ae29      	add	r6, sp, #164	@ 0xa4
 801df70:	ab22      	add	r3, sp, #136	@ 0x88
 801df72:	6033      	str	r3, [r6, #0]
 801df74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df76:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801df78:	6073      	str	r3, [r6, #4]
 801df7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df7c:	4413      	add	r3, r2
 801df7e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801df80:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801df82:	3301      	adds	r3, #1
 801df84:	2b07      	cmp	r3, #7
 801df86:	9327      	str	r3, [sp, #156]	@ 0x9c
 801df88:	f73f ada0 	bgt.w	801dacc <_svfprintf_r+0xd74>
 801df8c:	f106 0408 	add.w	r4, r6, #8
 801df90:	f7ff baec 	b.w	801d56c <_svfprintf_r+0x814>
 801df94:	9803      	ldr	r0, [sp, #12]
 801df96:	aa26      	add	r2, sp, #152	@ 0x98
 801df98:	4659      	mov	r1, fp
 801df9a:	f001 fdb0 	bl	801fafe <__ssprint_r>
 801df9e:	2800      	cmp	r0, #0
 801dfa0:	d155      	bne.n	801e04e <_svfprintf_r+0x12f6>
 801dfa2:	ae29      	add	r6, sp, #164	@ 0xa4
 801dfa4:	e7c3      	b.n	801df2e <_svfprintf_r+0x11d6>
 801dfa6:	9b04      	ldr	r3, [sp, #16]
 801dfa8:	2b01      	cmp	r3, #1
 801dfaa:	dde1      	ble.n	801df70 <_svfprintf_r+0x1218>
 801dfac:	4f57      	ldr	r7, [pc, #348]	@ (801e10c <_svfprintf_r+0x13b4>)
 801dfae:	f04f 0810 	mov.w	r8, #16
 801dfb2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801dfb6:	2c10      	cmp	r4, #16
 801dfb8:	f103 0301 	add.w	r3, r3, #1
 801dfbc:	f106 0108 	add.w	r1, r6, #8
 801dfc0:	6037      	str	r7, [r6, #0]
 801dfc2:	dc07      	bgt.n	801dfd4 <_svfprintf_r+0x127c>
 801dfc4:	6074      	str	r4, [r6, #4]
 801dfc6:	2b07      	cmp	r3, #7
 801dfc8:	4414      	add	r4, r2
 801dfca:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801dfce:	dcc7      	bgt.n	801df60 <_svfprintf_r+0x1208>
 801dfd0:	460e      	mov	r6, r1
 801dfd2:	e7cd      	b.n	801df70 <_svfprintf_r+0x1218>
 801dfd4:	3210      	adds	r2, #16
 801dfd6:	2b07      	cmp	r3, #7
 801dfd8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801dfdc:	f8c6 8004 	str.w	r8, [r6, #4]
 801dfe0:	dd06      	ble.n	801dff0 <_svfprintf_r+0x1298>
 801dfe2:	9803      	ldr	r0, [sp, #12]
 801dfe4:	aa26      	add	r2, sp, #152	@ 0x98
 801dfe6:	4659      	mov	r1, fp
 801dfe8:	f001 fd89 	bl	801fafe <__ssprint_r>
 801dfec:	bb78      	cbnz	r0, 801e04e <_svfprintf_r+0x12f6>
 801dfee:	a929      	add	r1, sp, #164	@ 0xa4
 801dff0:	3c10      	subs	r4, #16
 801dff2:	460e      	mov	r6, r1
 801dff4:	e7dd      	b.n	801dfb2 <_svfprintf_r+0x125a>
 801dff6:	2101      	movs	r1, #1
 801dff8:	2a07      	cmp	r2, #7
 801dffa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801dffe:	f8c4 9000 	str.w	r9, [r4]
 801e002:	6061      	str	r1, [r4, #4]
 801e004:	ddb4      	ble.n	801df70 <_svfprintf_r+0x1218>
 801e006:	e7ab      	b.n	801df60 <_svfprintf_r+0x1208>
 801e008:	3608      	adds	r6, #8
 801e00a:	e7b1      	b.n	801df70 <_svfprintf_r+0x1218>
 801e00c:	460c      	mov	r4, r1
 801e00e:	f7ff baad 	b.w	801d56c <_svfprintf_r+0x814>
 801e012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e014:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e016:	1a9d      	subs	r5, r3, r2
 801e018:	2d00      	cmp	r5, #0
 801e01a:	f77f aaaa 	ble.w	801d572 <_svfprintf_r+0x81a>
 801e01e:	4e3c      	ldr	r6, [pc, #240]	@ (801e110 <_svfprintf_r+0x13b8>)
 801e020:	2710      	movs	r7, #16
 801e022:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801e026:	2d10      	cmp	r5, #16
 801e028:	f103 0301 	add.w	r3, r3, #1
 801e02c:	6026      	str	r6, [r4, #0]
 801e02e:	dc18      	bgt.n	801e062 <_svfprintf_r+0x130a>
 801e030:	442a      	add	r2, r5
 801e032:	2b07      	cmp	r3, #7
 801e034:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801e038:	6065      	str	r5, [r4, #4]
 801e03a:	f77f aa9a 	ble.w	801d572 <_svfprintf_r+0x81a>
 801e03e:	9803      	ldr	r0, [sp, #12]
 801e040:	aa26      	add	r2, sp, #152	@ 0x98
 801e042:	4659      	mov	r1, fp
 801e044:	f001 fd5b 	bl	801fafe <__ssprint_r>
 801e048:	2800      	cmp	r0, #0
 801e04a:	f43f aa92 	beq.w	801d572 <_svfprintf_r+0x81a>
 801e04e:	f1ba 0f00 	cmp.w	sl, #0
 801e052:	f43f a89a 	beq.w	801d18a <_svfprintf_r+0x432>
 801e056:	9803      	ldr	r0, [sp, #12]
 801e058:	4651      	mov	r1, sl
 801e05a:	f7fe fb77 	bl	801c74c <_free_r>
 801e05e:	f7ff b894 	b.w	801d18a <_svfprintf_r+0x432>
 801e062:	3210      	adds	r2, #16
 801e064:	2b07      	cmp	r3, #7
 801e066:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801e06a:	6067      	str	r7, [r4, #4]
 801e06c:	dc02      	bgt.n	801e074 <_svfprintf_r+0x131c>
 801e06e:	3408      	adds	r4, #8
 801e070:	3d10      	subs	r5, #16
 801e072:	e7d6      	b.n	801e022 <_svfprintf_r+0x12ca>
 801e074:	9803      	ldr	r0, [sp, #12]
 801e076:	aa26      	add	r2, sp, #152	@ 0x98
 801e078:	4659      	mov	r1, fp
 801e07a:	f001 fd40 	bl	801fafe <__ssprint_r>
 801e07e:	2800      	cmp	r0, #0
 801e080:	d1e5      	bne.n	801e04e <_svfprintf_r+0x12f6>
 801e082:	ac29      	add	r4, sp, #164	@ 0xa4
 801e084:	e7f4      	b.n	801e070 <_svfprintf_r+0x1318>
 801e086:	9803      	ldr	r0, [sp, #12]
 801e088:	4651      	mov	r1, sl
 801e08a:	f7fe fb5f 	bl	801c74c <_free_r>
 801e08e:	f7ff ba88 	b.w	801d5a2 <_svfprintf_r+0x84a>
 801e092:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e094:	2b00      	cmp	r3, #0
 801e096:	f43f a878 	beq.w	801d18a <_svfprintf_r+0x432>
 801e09a:	9803      	ldr	r0, [sp, #12]
 801e09c:	aa26      	add	r2, sp, #152	@ 0x98
 801e09e:	4659      	mov	r1, fp
 801e0a0:	f001 fd2d 	bl	801fafe <__ssprint_r>
 801e0a4:	f7ff b871 	b.w	801d18a <_svfprintf_r+0x432>
 801e0a8:	ea56 0207 	orrs.w	r2, r6, r7
 801e0ac:	9508      	str	r5, [sp, #32]
 801e0ae:	f43f ab7a 	beq.w	801d7a6 <_svfprintf_r+0xa4e>
 801e0b2:	2b01      	cmp	r3, #1
 801e0b4:	f43f abfb 	beq.w	801d8ae <_svfprintf_r+0xb56>
 801e0b8:	2b02      	cmp	r3, #2
 801e0ba:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801e0be:	f43f ac3f 	beq.w	801d940 <_svfprintf_r+0xbe8>
 801e0c2:	f006 0307 	and.w	r3, r6, #7
 801e0c6:	08f6      	lsrs	r6, r6, #3
 801e0c8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801e0cc:	08ff      	lsrs	r7, r7, #3
 801e0ce:	3330      	adds	r3, #48	@ 0x30
 801e0d0:	ea56 0107 	orrs.w	r1, r6, r7
 801e0d4:	464a      	mov	r2, r9
 801e0d6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801e0da:	d1f2      	bne.n	801e0c2 <_svfprintf_r+0x136a>
 801e0dc:	9908      	ldr	r1, [sp, #32]
 801e0de:	07c8      	lsls	r0, r1, #31
 801e0e0:	d506      	bpl.n	801e0f0 <_svfprintf_r+0x1398>
 801e0e2:	2b30      	cmp	r3, #48	@ 0x30
 801e0e4:	d004      	beq.n	801e0f0 <_svfprintf_r+0x1398>
 801e0e6:	2330      	movs	r3, #48	@ 0x30
 801e0e8:	f809 3c01 	strb.w	r3, [r9, #-1]
 801e0ec:	f1a2 0902 	sub.w	r9, r2, #2
 801e0f0:	ab52      	add	r3, sp, #328	@ 0x148
 801e0f2:	9d08      	ldr	r5, [sp, #32]
 801e0f4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801e0f8:	f04f 0a00 	mov.w	sl, #0
 801e0fc:	eba3 0809 	sub.w	r8, r3, r9
 801e100:	4657      	mov	r7, sl
 801e102:	f8cd a020 	str.w	sl, [sp, #32]
 801e106:	4656      	mov	r6, sl
 801e108:	f7ff b97c 	b.w	801d404 <_svfprintf_r+0x6ac>
 801e10c:	08023944 	.word	0x08023944
 801e110:	08023954 	.word	0x08023954

0801e114 <_fclose_r>:
 801e114:	b570      	push	{r4, r5, r6, lr}
 801e116:	4605      	mov	r5, r0
 801e118:	460c      	mov	r4, r1
 801e11a:	b1b1      	cbz	r1, 801e14a <_fclose_r+0x36>
 801e11c:	b118      	cbz	r0, 801e126 <_fclose_r+0x12>
 801e11e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e120:	b90b      	cbnz	r3, 801e126 <_fclose_r+0x12>
 801e122:	f7fe f949 	bl	801c3b8 <__sinit>
 801e126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e128:	07de      	lsls	r6, r3, #31
 801e12a:	d405      	bmi.n	801e138 <_fclose_r+0x24>
 801e12c:	89a3      	ldrh	r3, [r4, #12]
 801e12e:	0598      	lsls	r0, r3, #22
 801e130:	d402      	bmi.n	801e138 <_fclose_r+0x24>
 801e132:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e134:	f7fe fa94 	bl	801c660 <__retarget_lock_acquire_recursive>
 801e138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e13c:	b943      	cbnz	r3, 801e150 <_fclose_r+0x3c>
 801e13e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e140:	07d9      	lsls	r1, r3, #31
 801e142:	d402      	bmi.n	801e14a <_fclose_r+0x36>
 801e144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e146:	f7fe fa8c 	bl	801c662 <__retarget_lock_release_recursive>
 801e14a:	2600      	movs	r6, #0
 801e14c:	4630      	mov	r0, r6
 801e14e:	bd70      	pop	{r4, r5, r6, pc}
 801e150:	4621      	mov	r1, r4
 801e152:	4628      	mov	r0, r5
 801e154:	f000 f834 	bl	801e1c0 <__sflush_r>
 801e158:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801e15a:	4606      	mov	r6, r0
 801e15c:	b133      	cbz	r3, 801e16c <_fclose_r+0x58>
 801e15e:	69e1      	ldr	r1, [r4, #28]
 801e160:	4628      	mov	r0, r5
 801e162:	4798      	blx	r3
 801e164:	2800      	cmp	r0, #0
 801e166:	bfb8      	it	lt
 801e168:	f04f 36ff 	movlt.w	r6, #4294967295
 801e16c:	89a3      	ldrh	r3, [r4, #12]
 801e16e:	061a      	lsls	r2, r3, #24
 801e170:	d503      	bpl.n	801e17a <_fclose_r+0x66>
 801e172:	6921      	ldr	r1, [r4, #16]
 801e174:	4628      	mov	r0, r5
 801e176:	f7fe fae9 	bl	801c74c <_free_r>
 801e17a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e17c:	b141      	cbz	r1, 801e190 <_fclose_r+0x7c>
 801e17e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801e182:	4299      	cmp	r1, r3
 801e184:	d002      	beq.n	801e18c <_fclose_r+0x78>
 801e186:	4628      	mov	r0, r5
 801e188:	f7fe fae0 	bl	801c74c <_free_r>
 801e18c:	2300      	movs	r3, #0
 801e18e:	6323      	str	r3, [r4, #48]	@ 0x30
 801e190:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e192:	b121      	cbz	r1, 801e19e <_fclose_r+0x8a>
 801e194:	4628      	mov	r0, r5
 801e196:	f7fe fad9 	bl	801c74c <_free_r>
 801e19a:	2300      	movs	r3, #0
 801e19c:	6463      	str	r3, [r4, #68]	@ 0x44
 801e19e:	f7fe f8ff 	bl	801c3a0 <__sfp_lock_acquire>
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	81a3      	strh	r3, [r4, #12]
 801e1a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e1a8:	07db      	lsls	r3, r3, #31
 801e1aa:	d402      	bmi.n	801e1b2 <_fclose_r+0x9e>
 801e1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e1ae:	f7fe fa58 	bl	801c662 <__retarget_lock_release_recursive>
 801e1b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e1b4:	f7fe fa53 	bl	801c65e <__retarget_lock_close_recursive>
 801e1b8:	f7fe f8f8 	bl	801c3ac <__sfp_lock_release>
 801e1bc:	e7c6      	b.n	801e14c <_fclose_r+0x38>
	...

0801e1c0 <__sflush_r>:
 801e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1c4:	4605      	mov	r5, r0
 801e1c6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801e1ca:	0706      	lsls	r6, r0, #28
 801e1cc:	460c      	mov	r4, r1
 801e1ce:	d457      	bmi.n	801e280 <__sflush_r+0xc0>
 801e1d0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801e1d4:	818b      	strh	r3, [r1, #12]
 801e1d6:	684b      	ldr	r3, [r1, #4]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	dc02      	bgt.n	801e1e2 <__sflush_r+0x22>
 801e1dc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	dd4c      	ble.n	801e27c <__sflush_r+0xbc>
 801e1e2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e1e4:	2e00      	cmp	r6, #0
 801e1e6:	d049      	beq.n	801e27c <__sflush_r+0xbc>
 801e1e8:	2300      	movs	r3, #0
 801e1ea:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801e1ee:	682f      	ldr	r7, [r5, #0]
 801e1f0:	69e1      	ldr	r1, [r4, #28]
 801e1f2:	602b      	str	r3, [r5, #0]
 801e1f4:	d034      	beq.n	801e260 <__sflush_r+0xa0>
 801e1f6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e1f8:	89a3      	ldrh	r3, [r4, #12]
 801e1fa:	0759      	lsls	r1, r3, #29
 801e1fc:	d505      	bpl.n	801e20a <__sflush_r+0x4a>
 801e1fe:	6863      	ldr	r3, [r4, #4]
 801e200:	1ad2      	subs	r2, r2, r3
 801e202:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e204:	b10b      	cbz	r3, 801e20a <__sflush_r+0x4a>
 801e206:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e208:	1ad2      	subs	r2, r2, r3
 801e20a:	2300      	movs	r3, #0
 801e20c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e20e:	69e1      	ldr	r1, [r4, #28]
 801e210:	4628      	mov	r0, r5
 801e212:	47b0      	blx	r6
 801e214:	1c43      	adds	r3, r0, #1
 801e216:	d106      	bne.n	801e226 <__sflush_r+0x66>
 801e218:	682a      	ldr	r2, [r5, #0]
 801e21a:	2a1d      	cmp	r2, #29
 801e21c:	d848      	bhi.n	801e2b0 <__sflush_r+0xf0>
 801e21e:	4b2b      	ldr	r3, [pc, #172]	@ (801e2cc <__sflush_r+0x10c>)
 801e220:	4113      	asrs	r3, r2
 801e222:	07de      	lsls	r6, r3, #31
 801e224:	d444      	bmi.n	801e2b0 <__sflush_r+0xf0>
 801e226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e22a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801e22e:	81a2      	strh	r2, [r4, #12]
 801e230:	2200      	movs	r2, #0
 801e232:	6062      	str	r2, [r4, #4]
 801e234:	04d9      	lsls	r1, r3, #19
 801e236:	6922      	ldr	r2, [r4, #16]
 801e238:	6022      	str	r2, [r4, #0]
 801e23a:	d504      	bpl.n	801e246 <__sflush_r+0x86>
 801e23c:	1c42      	adds	r2, r0, #1
 801e23e:	d101      	bne.n	801e244 <__sflush_r+0x84>
 801e240:	682b      	ldr	r3, [r5, #0]
 801e242:	b903      	cbnz	r3, 801e246 <__sflush_r+0x86>
 801e244:	6520      	str	r0, [r4, #80]	@ 0x50
 801e246:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e248:	602f      	str	r7, [r5, #0]
 801e24a:	b1b9      	cbz	r1, 801e27c <__sflush_r+0xbc>
 801e24c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801e250:	4299      	cmp	r1, r3
 801e252:	d002      	beq.n	801e25a <__sflush_r+0x9a>
 801e254:	4628      	mov	r0, r5
 801e256:	f7fe fa79 	bl	801c74c <_free_r>
 801e25a:	2300      	movs	r3, #0
 801e25c:	6323      	str	r3, [r4, #48]	@ 0x30
 801e25e:	e00d      	b.n	801e27c <__sflush_r+0xbc>
 801e260:	2301      	movs	r3, #1
 801e262:	4628      	mov	r0, r5
 801e264:	47b0      	blx	r6
 801e266:	4602      	mov	r2, r0
 801e268:	1c50      	adds	r0, r2, #1
 801e26a:	d1c5      	bne.n	801e1f8 <__sflush_r+0x38>
 801e26c:	682b      	ldr	r3, [r5, #0]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d0c2      	beq.n	801e1f8 <__sflush_r+0x38>
 801e272:	2b1d      	cmp	r3, #29
 801e274:	d001      	beq.n	801e27a <__sflush_r+0xba>
 801e276:	2b16      	cmp	r3, #22
 801e278:	d11a      	bne.n	801e2b0 <__sflush_r+0xf0>
 801e27a:	602f      	str	r7, [r5, #0]
 801e27c:	2000      	movs	r0, #0
 801e27e:	e01e      	b.n	801e2be <__sflush_r+0xfe>
 801e280:	690f      	ldr	r7, [r1, #16]
 801e282:	2f00      	cmp	r7, #0
 801e284:	d0fa      	beq.n	801e27c <__sflush_r+0xbc>
 801e286:	0783      	lsls	r3, r0, #30
 801e288:	680e      	ldr	r6, [r1, #0]
 801e28a:	bf08      	it	eq
 801e28c:	694b      	ldreq	r3, [r1, #20]
 801e28e:	600f      	str	r7, [r1, #0]
 801e290:	bf18      	it	ne
 801e292:	2300      	movne	r3, #0
 801e294:	eba6 0807 	sub.w	r8, r6, r7
 801e298:	608b      	str	r3, [r1, #8]
 801e29a:	f1b8 0f00 	cmp.w	r8, #0
 801e29e:	dded      	ble.n	801e27c <__sflush_r+0xbc>
 801e2a0:	69e1      	ldr	r1, [r4, #28]
 801e2a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801e2a4:	4643      	mov	r3, r8
 801e2a6:	463a      	mov	r2, r7
 801e2a8:	4628      	mov	r0, r5
 801e2aa:	47b0      	blx	r6
 801e2ac:	2800      	cmp	r0, #0
 801e2ae:	dc08      	bgt.n	801e2c2 <__sflush_r+0x102>
 801e2b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e2b8:	81a3      	strh	r3, [r4, #12]
 801e2ba:	f04f 30ff 	mov.w	r0, #4294967295
 801e2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2c2:	4407      	add	r7, r0
 801e2c4:	eba8 0800 	sub.w	r8, r8, r0
 801e2c8:	e7e7      	b.n	801e29a <__sflush_r+0xda>
 801e2ca:	bf00      	nop
 801e2cc:	dfbffffe 	.word	0xdfbffffe

0801e2d0 <_fflush_r>:
 801e2d0:	b538      	push	{r3, r4, r5, lr}
 801e2d2:	460c      	mov	r4, r1
 801e2d4:	4605      	mov	r5, r0
 801e2d6:	b118      	cbz	r0, 801e2e0 <_fflush_r+0x10>
 801e2d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e2da:	b90b      	cbnz	r3, 801e2e0 <_fflush_r+0x10>
 801e2dc:	f7fe f86c 	bl	801c3b8 <__sinit>
 801e2e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801e2e4:	b1b8      	cbz	r0, 801e316 <_fflush_r+0x46>
 801e2e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e2e8:	07db      	lsls	r3, r3, #31
 801e2ea:	d404      	bmi.n	801e2f6 <_fflush_r+0x26>
 801e2ec:	0581      	lsls	r1, r0, #22
 801e2ee:	d402      	bmi.n	801e2f6 <_fflush_r+0x26>
 801e2f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e2f2:	f7fe f9b5 	bl	801c660 <__retarget_lock_acquire_recursive>
 801e2f6:	4628      	mov	r0, r5
 801e2f8:	4621      	mov	r1, r4
 801e2fa:	f7ff ff61 	bl	801e1c0 <__sflush_r>
 801e2fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e300:	07da      	lsls	r2, r3, #31
 801e302:	4605      	mov	r5, r0
 801e304:	d405      	bmi.n	801e312 <_fflush_r+0x42>
 801e306:	89a3      	ldrh	r3, [r4, #12]
 801e308:	059b      	lsls	r3, r3, #22
 801e30a:	d402      	bmi.n	801e312 <_fflush_r+0x42>
 801e30c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e30e:	f7fe f9a8 	bl	801c662 <__retarget_lock_release_recursive>
 801e312:	4628      	mov	r0, r5
 801e314:	bd38      	pop	{r3, r4, r5, pc}
 801e316:	4605      	mov	r5, r0
 801e318:	e7fb      	b.n	801e312 <_fflush_r+0x42>

0801e31a <strncpy>:
 801e31a:	b510      	push	{r4, lr}
 801e31c:	3901      	subs	r1, #1
 801e31e:	4603      	mov	r3, r0
 801e320:	b132      	cbz	r2, 801e330 <strncpy+0x16>
 801e322:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e326:	f803 4b01 	strb.w	r4, [r3], #1
 801e32a:	3a01      	subs	r2, #1
 801e32c:	2c00      	cmp	r4, #0
 801e32e:	d1f7      	bne.n	801e320 <strncpy+0x6>
 801e330:	441a      	add	r2, r3
 801e332:	2100      	movs	r1, #0
 801e334:	4293      	cmp	r3, r2
 801e336:	d100      	bne.n	801e33a <strncpy+0x20>
 801e338:	bd10      	pop	{r4, pc}
 801e33a:	f803 1b01 	strb.w	r1, [r3], #1
 801e33e:	e7f9      	b.n	801e334 <strncpy+0x1a>

0801e340 <__locale_mb_cur_max>:
 801e340:	4b01      	ldr	r3, [pc, #4]	@ (801e348 <__locale_mb_cur_max+0x8>)
 801e342:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801e346:	4770      	bx	lr
 801e348:	2000068c 	.word	0x2000068c

0801e34c <_localeconv_r>:
 801e34c:	4800      	ldr	r0, [pc, #0]	@ (801e350 <_localeconv_r+0x4>)
 801e34e:	4770      	bx	lr
 801e350:	2000077c 	.word	0x2000077c

0801e354 <_sbrk_r>:
 801e354:	b538      	push	{r3, r4, r5, lr}
 801e356:	4d06      	ldr	r5, [pc, #24]	@ (801e370 <_sbrk_r+0x1c>)
 801e358:	2300      	movs	r3, #0
 801e35a:	4604      	mov	r4, r0
 801e35c:	4608      	mov	r0, r1
 801e35e:	602b      	str	r3, [r5, #0]
 801e360:	f7e5 fdbc 	bl	8003edc <_sbrk>
 801e364:	1c43      	adds	r3, r0, #1
 801e366:	d102      	bne.n	801e36e <_sbrk_r+0x1a>
 801e368:	682b      	ldr	r3, [r5, #0]
 801e36a:	b103      	cbz	r3, 801e36e <_sbrk_r+0x1a>
 801e36c:	6023      	str	r3, [r4, #0]
 801e36e:	bd38      	pop	{r3, r4, r5, pc}
 801e370:	2000d4a4 	.word	0x2000d4a4

0801e374 <__libc_fini_array>:
 801e374:	b538      	push	{r3, r4, r5, lr}
 801e376:	4d07      	ldr	r5, [pc, #28]	@ (801e394 <__libc_fini_array+0x20>)
 801e378:	4c07      	ldr	r4, [pc, #28]	@ (801e398 <__libc_fini_array+0x24>)
 801e37a:	1b64      	subs	r4, r4, r5
 801e37c:	10a4      	asrs	r4, r4, #2
 801e37e:	b91c      	cbnz	r4, 801e388 <__libc_fini_array+0x14>
 801e380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e384:	f004 bee2 	b.w	802314c <_fini>
 801e388:	3c01      	subs	r4, #1
 801e38a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801e38e:	4798      	blx	r3
 801e390:	e7f5      	b.n	801e37e <__libc_fini_array+0xa>
 801e392:	bf00      	nop
 801e394:	08023f28 	.word	0x08023f28
 801e398:	08023f2c 	.word	0x08023f2c

0801e39c <sysconf>:
 801e39c:	2808      	cmp	r0, #8
 801e39e:	b508      	push	{r3, lr}
 801e3a0:	d006      	beq.n	801e3b0 <sysconf+0x14>
 801e3a2:	f7fe f931 	bl	801c608 <__errno>
 801e3a6:	2316      	movs	r3, #22
 801e3a8:	6003      	str	r3, [r0, #0]
 801e3aa:	f04f 30ff 	mov.w	r0, #4294967295
 801e3ae:	bd08      	pop	{r3, pc}
 801e3b0:	2080      	movs	r0, #128	@ 0x80
 801e3b2:	e7fc      	b.n	801e3ae <sysconf+0x12>

0801e3b4 <frexp>:
 801e3b4:	b570      	push	{r4, r5, r6, lr}
 801e3b6:	2100      	movs	r1, #0
 801e3b8:	ec55 4b10 	vmov	r4, r5, d0
 801e3bc:	6001      	str	r1, [r0, #0]
 801e3be:	4915      	ldr	r1, [pc, #84]	@ (801e414 <frexp+0x60>)
 801e3c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e3c4:	428a      	cmp	r2, r1
 801e3c6:	4606      	mov	r6, r0
 801e3c8:	462b      	mov	r3, r5
 801e3ca:	d820      	bhi.n	801e40e <frexp+0x5a>
 801e3cc:	4621      	mov	r1, r4
 801e3ce:	4311      	orrs	r1, r2
 801e3d0:	d01d      	beq.n	801e40e <frexp+0x5a>
 801e3d2:	4911      	ldr	r1, [pc, #68]	@ (801e418 <frexp+0x64>)
 801e3d4:	4029      	ands	r1, r5
 801e3d6:	b961      	cbnz	r1, 801e3f2 <frexp+0x3e>
 801e3d8:	4b10      	ldr	r3, [pc, #64]	@ (801e41c <frexp+0x68>)
 801e3da:	2200      	movs	r2, #0
 801e3dc:	4620      	mov	r0, r4
 801e3de:	4629      	mov	r1, r5
 801e3e0:	f7e2 f90a 	bl	80005f8 <__aeabi_dmul>
 801e3e4:	460b      	mov	r3, r1
 801e3e6:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801e3ea:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801e3ee:	4604      	mov	r4, r0
 801e3f0:	6031      	str	r1, [r6, #0]
 801e3f2:	6831      	ldr	r1, [r6, #0]
 801e3f4:	1512      	asrs	r2, r2, #20
 801e3f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801e3fa:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 801e3fe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801e402:	4411      	add	r1, r2
 801e404:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801e408:	6031      	str	r1, [r6, #0]
 801e40a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801e40e:	ec45 4b10 	vmov	d0, r4, r5
 801e412:	bd70      	pop	{r4, r5, r6, pc}
 801e414:	7fefffff 	.word	0x7fefffff
 801e418:	7ff00000 	.word	0x7ff00000
 801e41c:	43500000 	.word	0x43500000

0801e420 <__register_exitproc>:
 801e420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e424:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801e49c <__register_exitproc+0x7c>
 801e428:	4606      	mov	r6, r0
 801e42a:	f8da 0000 	ldr.w	r0, [sl]
 801e42e:	4698      	mov	r8, r3
 801e430:	460f      	mov	r7, r1
 801e432:	4691      	mov	r9, r2
 801e434:	f7fe f914 	bl	801c660 <__retarget_lock_acquire_recursive>
 801e438:	4b16      	ldr	r3, [pc, #88]	@ (801e494 <__register_exitproc+0x74>)
 801e43a:	681c      	ldr	r4, [r3, #0]
 801e43c:	b90c      	cbnz	r4, 801e442 <__register_exitproc+0x22>
 801e43e:	4c16      	ldr	r4, [pc, #88]	@ (801e498 <__register_exitproc+0x78>)
 801e440:	601c      	str	r4, [r3, #0]
 801e442:	6865      	ldr	r5, [r4, #4]
 801e444:	f8da 0000 	ldr.w	r0, [sl]
 801e448:	2d1f      	cmp	r5, #31
 801e44a:	dd05      	ble.n	801e458 <__register_exitproc+0x38>
 801e44c:	f7fe f909 	bl	801c662 <__retarget_lock_release_recursive>
 801e450:	f04f 30ff 	mov.w	r0, #4294967295
 801e454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e458:	b19e      	cbz	r6, 801e482 <__register_exitproc+0x62>
 801e45a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e45e:	2201      	movs	r2, #1
 801e460:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801e464:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801e468:	40aa      	lsls	r2, r5
 801e46a:	4313      	orrs	r3, r2
 801e46c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 801e470:	2e02      	cmp	r6, #2
 801e472:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801e476:	bf02      	ittt	eq
 801e478:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801e47c:	4313      	orreq	r3, r2
 801e47e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801e482:	1c6b      	adds	r3, r5, #1
 801e484:	3502      	adds	r5, #2
 801e486:	6063      	str	r3, [r4, #4]
 801e488:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e48c:	f7fe f8e9 	bl	801c662 <__retarget_lock_release_recursive>
 801e490:	2000      	movs	r0, #0
 801e492:	e7df      	b.n	801e454 <__register_exitproc+0x34>
 801e494:	2000d4ac 	.word	0x2000d4ac
 801e498:	2000d4e4 	.word	0x2000d4e4
 801e49c:	20000278 	.word	0x20000278

0801e4a0 <quorem>:
 801e4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a4:	6903      	ldr	r3, [r0, #16]
 801e4a6:	690c      	ldr	r4, [r1, #16]
 801e4a8:	42a3      	cmp	r3, r4
 801e4aa:	4607      	mov	r7, r0
 801e4ac:	db7e      	blt.n	801e5ac <quorem+0x10c>
 801e4ae:	3c01      	subs	r4, #1
 801e4b0:	f101 0814 	add.w	r8, r1, #20
 801e4b4:	00a3      	lsls	r3, r4, #2
 801e4b6:	f100 0514 	add.w	r5, r0, #20
 801e4ba:	9300      	str	r3, [sp, #0]
 801e4bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e4c0:	9301      	str	r3, [sp, #4]
 801e4c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e4c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e4ca:	3301      	adds	r3, #1
 801e4cc:	429a      	cmp	r2, r3
 801e4ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e4d2:	fbb2 f6f3 	udiv	r6, r2, r3
 801e4d6:	d32e      	bcc.n	801e536 <quorem+0x96>
 801e4d8:	f04f 0a00 	mov.w	sl, #0
 801e4dc:	46c4      	mov	ip, r8
 801e4de:	46ae      	mov	lr, r5
 801e4e0:	46d3      	mov	fp, sl
 801e4e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e4e6:	b298      	uxth	r0, r3
 801e4e8:	fb06 a000 	mla	r0, r6, r0, sl
 801e4ec:	0c02      	lsrs	r2, r0, #16
 801e4ee:	0c1b      	lsrs	r3, r3, #16
 801e4f0:	fb06 2303 	mla	r3, r6, r3, r2
 801e4f4:	f8de 2000 	ldr.w	r2, [lr]
 801e4f8:	b280      	uxth	r0, r0
 801e4fa:	b292      	uxth	r2, r2
 801e4fc:	1a12      	subs	r2, r2, r0
 801e4fe:	445a      	add	r2, fp
 801e500:	f8de 0000 	ldr.w	r0, [lr]
 801e504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e508:	b29b      	uxth	r3, r3
 801e50a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e50e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e512:	b292      	uxth	r2, r2
 801e514:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e518:	45e1      	cmp	r9, ip
 801e51a:	f84e 2b04 	str.w	r2, [lr], #4
 801e51e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e522:	d2de      	bcs.n	801e4e2 <quorem+0x42>
 801e524:	9b00      	ldr	r3, [sp, #0]
 801e526:	58eb      	ldr	r3, [r5, r3]
 801e528:	b92b      	cbnz	r3, 801e536 <quorem+0x96>
 801e52a:	9b01      	ldr	r3, [sp, #4]
 801e52c:	3b04      	subs	r3, #4
 801e52e:	429d      	cmp	r5, r3
 801e530:	461a      	mov	r2, r3
 801e532:	d32f      	bcc.n	801e594 <quorem+0xf4>
 801e534:	613c      	str	r4, [r7, #16]
 801e536:	4638      	mov	r0, r7
 801e538:	f001 f824 	bl	801f584 <__mcmp>
 801e53c:	2800      	cmp	r0, #0
 801e53e:	db25      	blt.n	801e58c <quorem+0xec>
 801e540:	4629      	mov	r1, r5
 801e542:	2000      	movs	r0, #0
 801e544:	f858 2b04 	ldr.w	r2, [r8], #4
 801e548:	f8d1 c000 	ldr.w	ip, [r1]
 801e54c:	fa1f fe82 	uxth.w	lr, r2
 801e550:	fa1f f38c 	uxth.w	r3, ip
 801e554:	eba3 030e 	sub.w	r3, r3, lr
 801e558:	4403      	add	r3, r0
 801e55a:	0c12      	lsrs	r2, r2, #16
 801e55c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e560:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e564:	b29b      	uxth	r3, r3
 801e566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e56a:	45c1      	cmp	r9, r8
 801e56c:	f841 3b04 	str.w	r3, [r1], #4
 801e570:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e574:	d2e6      	bcs.n	801e544 <quorem+0xa4>
 801e576:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e57e:	b922      	cbnz	r2, 801e58a <quorem+0xea>
 801e580:	3b04      	subs	r3, #4
 801e582:	429d      	cmp	r5, r3
 801e584:	461a      	mov	r2, r3
 801e586:	d30b      	bcc.n	801e5a0 <quorem+0x100>
 801e588:	613c      	str	r4, [r7, #16]
 801e58a:	3601      	adds	r6, #1
 801e58c:	4630      	mov	r0, r6
 801e58e:	b003      	add	sp, #12
 801e590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e594:	6812      	ldr	r2, [r2, #0]
 801e596:	3b04      	subs	r3, #4
 801e598:	2a00      	cmp	r2, #0
 801e59a:	d1cb      	bne.n	801e534 <quorem+0x94>
 801e59c:	3c01      	subs	r4, #1
 801e59e:	e7c6      	b.n	801e52e <quorem+0x8e>
 801e5a0:	6812      	ldr	r2, [r2, #0]
 801e5a2:	3b04      	subs	r3, #4
 801e5a4:	2a00      	cmp	r2, #0
 801e5a6:	d1ef      	bne.n	801e588 <quorem+0xe8>
 801e5a8:	3c01      	subs	r4, #1
 801e5aa:	e7ea      	b.n	801e582 <quorem+0xe2>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	e7ee      	b.n	801e58e <quorem+0xee>

0801e5b0 <_dtoa_r>:
 801e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b4:	b099      	sub	sp, #100	@ 0x64
 801e5b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e5ba:	9109      	str	r1, [sp, #36]	@ 0x24
 801e5bc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801e5be:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e5c0:	920e      	str	r2, [sp, #56]	@ 0x38
 801e5c2:	ec55 4b10 	vmov	r4, r5, d0
 801e5c6:	4683      	mov	fp, r0
 801e5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e5ca:	b149      	cbz	r1, 801e5e0 <_dtoa_r+0x30>
 801e5cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e5ce:	604a      	str	r2, [r1, #4]
 801e5d0:	2301      	movs	r3, #1
 801e5d2:	4093      	lsls	r3, r2
 801e5d4:	608b      	str	r3, [r1, #8]
 801e5d6:	f000 fdce 	bl	801f176 <_Bfree>
 801e5da:	2300      	movs	r3, #0
 801e5dc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 801e5e0:	1e2b      	subs	r3, r5, #0
 801e5e2:	bfb9      	ittee	lt
 801e5e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e5e8:	9303      	strlt	r3, [sp, #12]
 801e5ea:	2300      	movge	r3, #0
 801e5ec:	6033      	strge	r3, [r6, #0]
 801e5ee:	9f03      	ldr	r7, [sp, #12]
 801e5f0:	4b97      	ldr	r3, [pc, #604]	@ (801e850 <_dtoa_r+0x2a0>)
 801e5f2:	bfbc      	itt	lt
 801e5f4:	2201      	movlt	r2, #1
 801e5f6:	6032      	strlt	r2, [r6, #0]
 801e5f8:	43bb      	bics	r3, r7
 801e5fa:	d114      	bne.n	801e626 <_dtoa_r+0x76>
 801e5fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e5fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e602:	6013      	str	r3, [r2, #0]
 801e604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e608:	4323      	orrs	r3, r4
 801e60a:	f000 854c 	beq.w	801f0a6 <_dtoa_r+0xaf6>
 801e60e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e610:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e868 <_dtoa_r+0x2b8>
 801e614:	b11b      	cbz	r3, 801e61e <_dtoa_r+0x6e>
 801e616:	f10a 0303 	add.w	r3, sl, #3
 801e61a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e61c:	6013      	str	r3, [r2, #0]
 801e61e:	4650      	mov	r0, sl
 801e620:	b019      	add	sp, #100	@ 0x64
 801e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e626:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e62a:	2200      	movs	r2, #0
 801e62c:	ec51 0b17 	vmov	r0, r1, d7
 801e630:	2300      	movs	r3, #0
 801e632:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e636:	f7e2 fa47 	bl	8000ac8 <__aeabi_dcmpeq>
 801e63a:	4680      	mov	r8, r0
 801e63c:	b150      	cbz	r0, 801e654 <_dtoa_r+0xa4>
 801e63e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e640:	2301      	movs	r3, #1
 801e642:	6013      	str	r3, [r2, #0]
 801e644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e646:	b113      	cbz	r3, 801e64e <_dtoa_r+0x9e>
 801e648:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e64a:	4b82      	ldr	r3, [pc, #520]	@ (801e854 <_dtoa_r+0x2a4>)
 801e64c:	6013      	str	r3, [r2, #0]
 801e64e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801e86c <_dtoa_r+0x2bc>
 801e652:	e7e4      	b.n	801e61e <_dtoa_r+0x6e>
 801e654:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e658:	aa16      	add	r2, sp, #88	@ 0x58
 801e65a:	a917      	add	r1, sp, #92	@ 0x5c
 801e65c:	4658      	mov	r0, fp
 801e65e:	f001 f841 	bl	801f6e4 <__d2b>
 801e662:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e666:	4681      	mov	r9, r0
 801e668:	2e00      	cmp	r6, #0
 801e66a:	d077      	beq.n	801e75c <_dtoa_r+0x1ac>
 801e66c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e66e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e67a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e67e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e682:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e686:	4619      	mov	r1, r3
 801e688:	2200      	movs	r2, #0
 801e68a:	4b73      	ldr	r3, [pc, #460]	@ (801e858 <_dtoa_r+0x2a8>)
 801e68c:	f7e1 fdfc 	bl	8000288 <__aeabi_dsub>
 801e690:	a369      	add	r3, pc, #420	@ (adr r3, 801e838 <_dtoa_r+0x288>)
 801e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e696:	f7e1 ffaf 	bl	80005f8 <__aeabi_dmul>
 801e69a:	a369      	add	r3, pc, #420	@ (adr r3, 801e840 <_dtoa_r+0x290>)
 801e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a0:	f7e1 fdf4 	bl	800028c <__adddf3>
 801e6a4:	4604      	mov	r4, r0
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	460d      	mov	r5, r1
 801e6aa:	f7e1 ff3b 	bl	8000524 <__aeabi_i2d>
 801e6ae:	a366      	add	r3, pc, #408	@ (adr r3, 801e848 <_dtoa_r+0x298>)
 801e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b4:	f7e1 ffa0 	bl	80005f8 <__aeabi_dmul>
 801e6b8:	4602      	mov	r2, r0
 801e6ba:	460b      	mov	r3, r1
 801e6bc:	4620      	mov	r0, r4
 801e6be:	4629      	mov	r1, r5
 801e6c0:	f7e1 fde4 	bl	800028c <__adddf3>
 801e6c4:	4604      	mov	r4, r0
 801e6c6:	460d      	mov	r5, r1
 801e6c8:	f7e2 fa46 	bl	8000b58 <__aeabi_d2iz>
 801e6cc:	2200      	movs	r2, #0
 801e6ce:	4607      	mov	r7, r0
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	4620      	mov	r0, r4
 801e6d4:	4629      	mov	r1, r5
 801e6d6:	f7e2 fa01 	bl	8000adc <__aeabi_dcmplt>
 801e6da:	b140      	cbz	r0, 801e6ee <_dtoa_r+0x13e>
 801e6dc:	4638      	mov	r0, r7
 801e6de:	f7e1 ff21 	bl	8000524 <__aeabi_i2d>
 801e6e2:	4622      	mov	r2, r4
 801e6e4:	462b      	mov	r3, r5
 801e6e6:	f7e2 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 801e6ea:	b900      	cbnz	r0, 801e6ee <_dtoa_r+0x13e>
 801e6ec:	3f01      	subs	r7, #1
 801e6ee:	2f16      	cmp	r7, #22
 801e6f0:	d851      	bhi.n	801e796 <_dtoa_r+0x1e6>
 801e6f2:	4b5a      	ldr	r3, [pc, #360]	@ (801e85c <_dtoa_r+0x2ac>)
 801e6f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e700:	f7e2 f9ec 	bl	8000adc <__aeabi_dcmplt>
 801e704:	2800      	cmp	r0, #0
 801e706:	d048      	beq.n	801e79a <_dtoa_r+0x1ea>
 801e708:	3f01      	subs	r7, #1
 801e70a:	2300      	movs	r3, #0
 801e70c:	9312      	str	r3, [sp, #72]	@ 0x48
 801e70e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e710:	1b9b      	subs	r3, r3, r6
 801e712:	1e5a      	subs	r2, r3, #1
 801e714:	bf44      	itt	mi
 801e716:	f1c3 0801 	rsbmi	r8, r3, #1
 801e71a:	2300      	movmi	r3, #0
 801e71c:	9208      	str	r2, [sp, #32]
 801e71e:	bf54      	ite	pl
 801e720:	f04f 0800 	movpl.w	r8, #0
 801e724:	9308      	strmi	r3, [sp, #32]
 801e726:	2f00      	cmp	r7, #0
 801e728:	db39      	blt.n	801e79e <_dtoa_r+0x1ee>
 801e72a:	9b08      	ldr	r3, [sp, #32]
 801e72c:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e72e:	443b      	add	r3, r7
 801e730:	9308      	str	r3, [sp, #32]
 801e732:	2300      	movs	r3, #0
 801e734:	930a      	str	r3, [sp, #40]	@ 0x28
 801e736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e738:	2b09      	cmp	r3, #9
 801e73a:	d865      	bhi.n	801e808 <_dtoa_r+0x258>
 801e73c:	2b05      	cmp	r3, #5
 801e73e:	bfc4      	itt	gt
 801e740:	3b04      	subgt	r3, #4
 801e742:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e746:	f1a3 0302 	sub.w	r3, r3, #2
 801e74a:	bfcc      	ite	gt
 801e74c:	2400      	movgt	r4, #0
 801e74e:	2401      	movle	r4, #1
 801e750:	2b03      	cmp	r3, #3
 801e752:	d864      	bhi.n	801e81e <_dtoa_r+0x26e>
 801e754:	e8df f003 	tbb	[pc, r3]
 801e758:	5635372a 	.word	0x5635372a
 801e75c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e760:	441e      	add	r6, r3
 801e762:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e766:	2b20      	cmp	r3, #32
 801e768:	bfc1      	itttt	gt
 801e76a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e76e:	409f      	lslgt	r7, r3
 801e770:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e774:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e778:	bfd6      	itet	le
 801e77a:	f1c3 0320 	rsble	r3, r3, #32
 801e77e:	ea47 0003 	orrgt.w	r0, r7, r3
 801e782:	fa04 f003 	lslle.w	r0, r4, r3
 801e786:	f7e1 febd 	bl	8000504 <__aeabi_ui2d>
 801e78a:	2201      	movs	r2, #1
 801e78c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e790:	3e01      	subs	r6, #1
 801e792:	9214      	str	r2, [sp, #80]	@ 0x50
 801e794:	e777      	b.n	801e686 <_dtoa_r+0xd6>
 801e796:	2301      	movs	r3, #1
 801e798:	e7b8      	b.n	801e70c <_dtoa_r+0x15c>
 801e79a:	9012      	str	r0, [sp, #72]	@ 0x48
 801e79c:	e7b7      	b.n	801e70e <_dtoa_r+0x15e>
 801e79e:	427b      	negs	r3, r7
 801e7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	eba8 0807 	sub.w	r8, r8, r7
 801e7a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e7aa:	e7c4      	b.n	801e736 <_dtoa_r+0x186>
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	dc36      	bgt.n	801e824 <_dtoa_r+0x274>
 801e7b6:	2301      	movs	r3, #1
 801e7b8:	9300      	str	r3, [sp, #0]
 801e7ba:	9307      	str	r3, [sp, #28]
 801e7bc:	461a      	mov	r2, r3
 801e7be:	920e      	str	r2, [sp, #56]	@ 0x38
 801e7c0:	e00b      	b.n	801e7da <_dtoa_r+0x22a>
 801e7c2:	2301      	movs	r3, #1
 801e7c4:	e7f3      	b.n	801e7ae <_dtoa_r+0x1fe>
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e7ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7cc:	18fb      	adds	r3, r7, r3
 801e7ce:	9300      	str	r3, [sp, #0]
 801e7d0:	3301      	adds	r3, #1
 801e7d2:	2b01      	cmp	r3, #1
 801e7d4:	9307      	str	r3, [sp, #28]
 801e7d6:	bfb8      	it	lt
 801e7d8:	2301      	movlt	r3, #1
 801e7da:	2100      	movs	r1, #0
 801e7dc:	2204      	movs	r2, #4
 801e7de:	f102 0014 	add.w	r0, r2, #20
 801e7e2:	4298      	cmp	r0, r3
 801e7e4:	d922      	bls.n	801e82c <_dtoa_r+0x27c>
 801e7e6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 801e7ea:	4658      	mov	r0, fp
 801e7ec:	f000 fc9e 	bl	801f12c <_Balloc>
 801e7f0:	4682      	mov	sl, r0
 801e7f2:	2800      	cmp	r0, #0
 801e7f4:	d13c      	bne.n	801e870 <_dtoa_r+0x2c0>
 801e7f6:	4b1a      	ldr	r3, [pc, #104]	@ (801e860 <_dtoa_r+0x2b0>)
 801e7f8:	4602      	mov	r2, r0
 801e7fa:	f240 11af 	movw	r1, #431	@ 0x1af
 801e7fe:	4819      	ldr	r0, [pc, #100]	@ (801e864 <_dtoa_r+0x2b4>)
 801e800:	f001 fa14 	bl	801fc2c <__assert_func>
 801e804:	2301      	movs	r3, #1
 801e806:	e7df      	b.n	801e7c8 <_dtoa_r+0x218>
 801e808:	2401      	movs	r4, #1
 801e80a:	2300      	movs	r3, #0
 801e80c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e80e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e810:	f04f 33ff 	mov.w	r3, #4294967295
 801e814:	9300      	str	r3, [sp, #0]
 801e816:	9307      	str	r3, [sp, #28]
 801e818:	2200      	movs	r2, #0
 801e81a:	2312      	movs	r3, #18
 801e81c:	e7cf      	b.n	801e7be <_dtoa_r+0x20e>
 801e81e:	2301      	movs	r3, #1
 801e820:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e822:	e7f5      	b.n	801e810 <_dtoa_r+0x260>
 801e824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e826:	9300      	str	r3, [sp, #0]
 801e828:	9307      	str	r3, [sp, #28]
 801e82a:	e7d6      	b.n	801e7da <_dtoa_r+0x22a>
 801e82c:	3101      	adds	r1, #1
 801e82e:	0052      	lsls	r2, r2, #1
 801e830:	e7d5      	b.n	801e7de <_dtoa_r+0x22e>
 801e832:	bf00      	nop
 801e834:	f3af 8000 	nop.w
 801e838:	636f4361 	.word	0x636f4361
 801e83c:	3fd287a7 	.word	0x3fd287a7
 801e840:	8b60c8b3 	.word	0x8b60c8b3
 801e844:	3fc68a28 	.word	0x3fc68a28
 801e848:	509f79fb 	.word	0x509f79fb
 801e84c:	3fd34413 	.word	0x3fd34413
 801e850:	7ff00000 	.word	0x7ff00000
 801e854:	08023943 	.word	0x08023943
 801e858:	3ff80000 	.word	0x3ff80000
 801e85c:	08023a78 	.word	0x08023a78
 801e860:	0802397b 	.word	0x0802397b
 801e864:	0802398c 	.word	0x0802398c
 801e868:	08023977 	.word	0x08023977
 801e86c:	08023942 	.word	0x08023942
 801e870:	9b07      	ldr	r3, [sp, #28]
 801e872:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 801e876:	2b0e      	cmp	r3, #14
 801e878:	f200 80a4 	bhi.w	801e9c4 <_dtoa_r+0x414>
 801e87c:	2c00      	cmp	r4, #0
 801e87e:	f000 80a1 	beq.w	801e9c4 <_dtoa_r+0x414>
 801e882:	2f00      	cmp	r7, #0
 801e884:	dd33      	ble.n	801e8ee <_dtoa_r+0x33e>
 801e886:	4bae      	ldr	r3, [pc, #696]	@ (801eb40 <_dtoa_r+0x590>)
 801e888:	f007 020f 	and.w	r2, r7, #15
 801e88c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e890:	ed93 7b00 	vldr	d7, [r3]
 801e894:	05f8      	lsls	r0, r7, #23
 801e896:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e89a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e89e:	d516      	bpl.n	801e8ce <_dtoa_r+0x31e>
 801e8a0:	4ba8      	ldr	r3, [pc, #672]	@ (801eb44 <_dtoa_r+0x594>)
 801e8a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e8a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e8aa:	f7e1 ffcf 	bl	800084c <__aeabi_ddiv>
 801e8ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8b2:	f004 040f 	and.w	r4, r4, #15
 801e8b6:	2603      	movs	r6, #3
 801e8b8:	4da2      	ldr	r5, [pc, #648]	@ (801eb44 <_dtoa_r+0x594>)
 801e8ba:	b954      	cbnz	r4, 801e8d2 <_dtoa_r+0x322>
 801e8bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e8c4:	f7e1 ffc2 	bl	800084c <__aeabi_ddiv>
 801e8c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8cc:	e028      	b.n	801e920 <_dtoa_r+0x370>
 801e8ce:	2602      	movs	r6, #2
 801e8d0:	e7f2      	b.n	801e8b8 <_dtoa_r+0x308>
 801e8d2:	07e1      	lsls	r1, r4, #31
 801e8d4:	d508      	bpl.n	801e8e8 <_dtoa_r+0x338>
 801e8d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e8da:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e8de:	f7e1 fe8b 	bl	80005f8 <__aeabi_dmul>
 801e8e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e8e6:	3601      	adds	r6, #1
 801e8e8:	1064      	asrs	r4, r4, #1
 801e8ea:	3508      	adds	r5, #8
 801e8ec:	e7e5      	b.n	801e8ba <_dtoa_r+0x30a>
 801e8ee:	f000 80d2 	beq.w	801ea96 <_dtoa_r+0x4e6>
 801e8f2:	427c      	negs	r4, r7
 801e8f4:	4b92      	ldr	r3, [pc, #584]	@ (801eb40 <_dtoa_r+0x590>)
 801e8f6:	4d93      	ldr	r5, [pc, #588]	@ (801eb44 <_dtoa_r+0x594>)
 801e8f8:	f004 020f 	and.w	r2, r4, #15
 801e8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e908:	f7e1 fe76 	bl	80005f8 <__aeabi_dmul>
 801e90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e910:	1124      	asrs	r4, r4, #4
 801e912:	2300      	movs	r3, #0
 801e914:	2602      	movs	r6, #2
 801e916:	2c00      	cmp	r4, #0
 801e918:	f040 80b2 	bne.w	801ea80 <_dtoa_r+0x4d0>
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d1d3      	bne.n	801e8c8 <_dtoa_r+0x318>
 801e920:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e922:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e926:	2b00      	cmp	r3, #0
 801e928:	f000 80b7 	beq.w	801ea9a <_dtoa_r+0x4ea>
 801e92c:	4b86      	ldr	r3, [pc, #536]	@ (801eb48 <_dtoa_r+0x598>)
 801e92e:	2200      	movs	r2, #0
 801e930:	4620      	mov	r0, r4
 801e932:	4629      	mov	r1, r5
 801e934:	f7e2 f8d2 	bl	8000adc <__aeabi_dcmplt>
 801e938:	2800      	cmp	r0, #0
 801e93a:	f000 80ae 	beq.w	801ea9a <_dtoa_r+0x4ea>
 801e93e:	9b07      	ldr	r3, [sp, #28]
 801e940:	2b00      	cmp	r3, #0
 801e942:	f000 80aa 	beq.w	801ea9a <_dtoa_r+0x4ea>
 801e946:	9b00      	ldr	r3, [sp, #0]
 801e948:	2b00      	cmp	r3, #0
 801e94a:	dd37      	ble.n	801e9bc <_dtoa_r+0x40c>
 801e94c:	1e7b      	subs	r3, r7, #1
 801e94e:	9304      	str	r3, [sp, #16]
 801e950:	4620      	mov	r0, r4
 801e952:	4b7e      	ldr	r3, [pc, #504]	@ (801eb4c <_dtoa_r+0x59c>)
 801e954:	2200      	movs	r2, #0
 801e956:	4629      	mov	r1, r5
 801e958:	f7e1 fe4e 	bl	80005f8 <__aeabi_dmul>
 801e95c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e960:	9c00      	ldr	r4, [sp, #0]
 801e962:	3601      	adds	r6, #1
 801e964:	4630      	mov	r0, r6
 801e966:	f7e1 fddd 	bl	8000524 <__aeabi_i2d>
 801e96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e96e:	f7e1 fe43 	bl	80005f8 <__aeabi_dmul>
 801e972:	4b77      	ldr	r3, [pc, #476]	@ (801eb50 <_dtoa_r+0x5a0>)
 801e974:	2200      	movs	r2, #0
 801e976:	f7e1 fc89 	bl	800028c <__adddf3>
 801e97a:	4605      	mov	r5, r0
 801e97c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e980:	2c00      	cmp	r4, #0
 801e982:	f040 808d 	bne.w	801eaa0 <_dtoa_r+0x4f0>
 801e986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e98a:	4b72      	ldr	r3, [pc, #456]	@ (801eb54 <_dtoa_r+0x5a4>)
 801e98c:	2200      	movs	r2, #0
 801e98e:	f7e1 fc7b 	bl	8000288 <__aeabi_dsub>
 801e992:	4602      	mov	r2, r0
 801e994:	460b      	mov	r3, r1
 801e996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e99a:	462a      	mov	r2, r5
 801e99c:	4633      	mov	r3, r6
 801e99e:	f7e2 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 801e9a2:	2800      	cmp	r0, #0
 801e9a4:	f040 828c 	bne.w	801eec0 <_dtoa_r+0x910>
 801e9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9ac:	462a      	mov	r2, r5
 801e9ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e9b2:	f7e2 f893 	bl	8000adc <__aeabi_dcmplt>
 801e9b6:	2800      	cmp	r0, #0
 801e9b8:	f040 8129 	bne.w	801ec0e <_dtoa_r+0x65e>
 801e9bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e9c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e9c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e9c6:	2b00      	cmp	r3, #0
 801e9c8:	f2c0 815b 	blt.w	801ec82 <_dtoa_r+0x6d2>
 801e9cc:	2f0e      	cmp	r7, #14
 801e9ce:	f300 8158 	bgt.w	801ec82 <_dtoa_r+0x6d2>
 801e9d2:	4b5b      	ldr	r3, [pc, #364]	@ (801eb40 <_dtoa_r+0x590>)
 801e9d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e9d8:	ed93 7b00 	vldr	d7, [r3]
 801e9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	ed8d 7b00 	vstr	d7, [sp]
 801e9e4:	da03      	bge.n	801e9ee <_dtoa_r+0x43e>
 801e9e6:	9b07      	ldr	r3, [sp, #28]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	f340 8102 	ble.w	801ebf2 <_dtoa_r+0x642>
 801e9ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e9f2:	4656      	mov	r6, sl
 801e9f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	4629      	mov	r1, r5
 801e9fc:	f7e1 ff26 	bl	800084c <__aeabi_ddiv>
 801ea00:	f7e2 f8aa 	bl	8000b58 <__aeabi_d2iz>
 801ea04:	4680      	mov	r8, r0
 801ea06:	f7e1 fd8d 	bl	8000524 <__aeabi_i2d>
 801ea0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ea0e:	f7e1 fdf3 	bl	80005f8 <__aeabi_dmul>
 801ea12:	4602      	mov	r2, r0
 801ea14:	460b      	mov	r3, r1
 801ea16:	4620      	mov	r0, r4
 801ea18:	4629      	mov	r1, r5
 801ea1a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ea1e:	f7e1 fc33 	bl	8000288 <__aeabi_dsub>
 801ea22:	f806 4b01 	strb.w	r4, [r6], #1
 801ea26:	9d07      	ldr	r5, [sp, #28]
 801ea28:	eba6 040a 	sub.w	r4, r6, sl
 801ea2c:	42a5      	cmp	r5, r4
 801ea2e:	4602      	mov	r2, r0
 801ea30:	460b      	mov	r3, r1
 801ea32:	f040 8118 	bne.w	801ec66 <_dtoa_r+0x6b6>
 801ea36:	f7e1 fc29 	bl	800028c <__adddf3>
 801ea3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ea3e:	4604      	mov	r4, r0
 801ea40:	460d      	mov	r5, r1
 801ea42:	f7e2 f869 	bl	8000b18 <__aeabi_dcmpgt>
 801ea46:	2800      	cmp	r0, #0
 801ea48:	f040 80fa 	bne.w	801ec40 <_dtoa_r+0x690>
 801ea4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ea50:	4620      	mov	r0, r4
 801ea52:	4629      	mov	r1, r5
 801ea54:	f7e2 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 801ea58:	b118      	cbz	r0, 801ea62 <_dtoa_r+0x4b2>
 801ea5a:	f018 0f01 	tst.w	r8, #1
 801ea5e:	f040 80ef 	bne.w	801ec40 <_dtoa_r+0x690>
 801ea62:	4649      	mov	r1, r9
 801ea64:	4658      	mov	r0, fp
 801ea66:	f000 fb86 	bl	801f176 <_Bfree>
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	7033      	strb	r3, [r6, #0]
 801ea6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea70:	3701      	adds	r7, #1
 801ea72:	601f      	str	r7, [r3, #0]
 801ea74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	f43f add1 	beq.w	801e61e <_dtoa_r+0x6e>
 801ea7c:	601e      	str	r6, [r3, #0]
 801ea7e:	e5ce      	b.n	801e61e <_dtoa_r+0x6e>
 801ea80:	07e2      	lsls	r2, r4, #31
 801ea82:	d505      	bpl.n	801ea90 <_dtoa_r+0x4e0>
 801ea84:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ea88:	f7e1 fdb6 	bl	80005f8 <__aeabi_dmul>
 801ea8c:	3601      	adds	r6, #1
 801ea8e:	2301      	movs	r3, #1
 801ea90:	1064      	asrs	r4, r4, #1
 801ea92:	3508      	adds	r5, #8
 801ea94:	e73f      	b.n	801e916 <_dtoa_r+0x366>
 801ea96:	2602      	movs	r6, #2
 801ea98:	e742      	b.n	801e920 <_dtoa_r+0x370>
 801ea9a:	9c07      	ldr	r4, [sp, #28]
 801ea9c:	9704      	str	r7, [sp, #16]
 801ea9e:	e761      	b.n	801e964 <_dtoa_r+0x3b4>
 801eaa0:	4b27      	ldr	r3, [pc, #156]	@ (801eb40 <_dtoa_r+0x590>)
 801eaa2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801eaa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801eaa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801eaac:	4454      	add	r4, sl
 801eaae:	2900      	cmp	r1, #0
 801eab0:	d054      	beq.n	801eb5c <_dtoa_r+0x5ac>
 801eab2:	4929      	ldr	r1, [pc, #164]	@ (801eb58 <_dtoa_r+0x5a8>)
 801eab4:	2000      	movs	r0, #0
 801eab6:	f7e1 fec9 	bl	800084c <__aeabi_ddiv>
 801eaba:	4633      	mov	r3, r6
 801eabc:	462a      	mov	r2, r5
 801eabe:	f7e1 fbe3 	bl	8000288 <__aeabi_dsub>
 801eac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801eac6:	4656      	mov	r6, sl
 801eac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eacc:	f7e2 f844 	bl	8000b58 <__aeabi_d2iz>
 801ead0:	4605      	mov	r5, r0
 801ead2:	f7e1 fd27 	bl	8000524 <__aeabi_i2d>
 801ead6:	4602      	mov	r2, r0
 801ead8:	460b      	mov	r3, r1
 801eada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eade:	f7e1 fbd3 	bl	8000288 <__aeabi_dsub>
 801eae2:	3530      	adds	r5, #48	@ 0x30
 801eae4:	4602      	mov	r2, r0
 801eae6:	460b      	mov	r3, r1
 801eae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eaec:	f806 5b01 	strb.w	r5, [r6], #1
 801eaf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801eaf4:	f7e1 fff2 	bl	8000adc <__aeabi_dcmplt>
 801eaf8:	2800      	cmp	r0, #0
 801eafa:	d172      	bne.n	801ebe2 <_dtoa_r+0x632>
 801eafc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eb00:	4911      	ldr	r1, [pc, #68]	@ (801eb48 <_dtoa_r+0x598>)
 801eb02:	2000      	movs	r0, #0
 801eb04:	f7e1 fbc0 	bl	8000288 <__aeabi_dsub>
 801eb08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801eb0c:	f7e1 ffe6 	bl	8000adc <__aeabi_dcmplt>
 801eb10:	2800      	cmp	r0, #0
 801eb12:	f040 8096 	bne.w	801ec42 <_dtoa_r+0x692>
 801eb16:	42a6      	cmp	r6, r4
 801eb18:	f43f af50 	beq.w	801e9bc <_dtoa_r+0x40c>
 801eb1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801eb20:	4b0a      	ldr	r3, [pc, #40]	@ (801eb4c <_dtoa_r+0x59c>)
 801eb22:	2200      	movs	r2, #0
 801eb24:	f7e1 fd68 	bl	80005f8 <__aeabi_dmul>
 801eb28:	4b08      	ldr	r3, [pc, #32]	@ (801eb4c <_dtoa_r+0x59c>)
 801eb2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801eb2e:	2200      	movs	r2, #0
 801eb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb34:	f7e1 fd60 	bl	80005f8 <__aeabi_dmul>
 801eb38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb3c:	e7c4      	b.n	801eac8 <_dtoa_r+0x518>
 801eb3e:	bf00      	nop
 801eb40:	08023a78 	.word	0x08023a78
 801eb44:	08023a50 	.word	0x08023a50
 801eb48:	3ff00000 	.word	0x3ff00000
 801eb4c:	40240000 	.word	0x40240000
 801eb50:	401c0000 	.word	0x401c0000
 801eb54:	40140000 	.word	0x40140000
 801eb58:	3fe00000 	.word	0x3fe00000
 801eb5c:	4631      	mov	r1, r6
 801eb5e:	4628      	mov	r0, r5
 801eb60:	f7e1 fd4a 	bl	80005f8 <__aeabi_dmul>
 801eb64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801eb68:	9415      	str	r4, [sp, #84]	@ 0x54
 801eb6a:	4656      	mov	r6, sl
 801eb6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb70:	f7e1 fff2 	bl	8000b58 <__aeabi_d2iz>
 801eb74:	4605      	mov	r5, r0
 801eb76:	f7e1 fcd5 	bl	8000524 <__aeabi_i2d>
 801eb7a:	4602      	mov	r2, r0
 801eb7c:	460b      	mov	r3, r1
 801eb7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb82:	f7e1 fb81 	bl	8000288 <__aeabi_dsub>
 801eb86:	3530      	adds	r5, #48	@ 0x30
 801eb88:	f806 5b01 	strb.w	r5, [r6], #1
 801eb8c:	4602      	mov	r2, r0
 801eb8e:	460b      	mov	r3, r1
 801eb90:	42a6      	cmp	r6, r4
 801eb92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eb96:	f04f 0200 	mov.w	r2, #0
 801eb9a:	d124      	bne.n	801ebe6 <_dtoa_r+0x636>
 801eb9c:	4bac      	ldr	r3, [pc, #688]	@ (801ee50 <_dtoa_r+0x8a0>)
 801eb9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801eba2:	f7e1 fb73 	bl	800028c <__adddf3>
 801eba6:	4602      	mov	r2, r0
 801eba8:	460b      	mov	r3, r1
 801ebaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ebae:	f7e1 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 801ebb2:	2800      	cmp	r0, #0
 801ebb4:	d145      	bne.n	801ec42 <_dtoa_r+0x692>
 801ebb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ebba:	49a5      	ldr	r1, [pc, #660]	@ (801ee50 <_dtoa_r+0x8a0>)
 801ebbc:	2000      	movs	r0, #0
 801ebbe:	f7e1 fb63 	bl	8000288 <__aeabi_dsub>
 801ebc2:	4602      	mov	r2, r0
 801ebc4:	460b      	mov	r3, r1
 801ebc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ebca:	f7e1 ff87 	bl	8000adc <__aeabi_dcmplt>
 801ebce:	2800      	cmp	r0, #0
 801ebd0:	f43f aef4 	beq.w	801e9bc <_dtoa_r+0x40c>
 801ebd4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801ebd6:	1e73      	subs	r3, r6, #1
 801ebd8:	9315      	str	r3, [sp, #84]	@ 0x54
 801ebda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ebde:	2b30      	cmp	r3, #48	@ 0x30
 801ebe0:	d0f8      	beq.n	801ebd4 <_dtoa_r+0x624>
 801ebe2:	9f04      	ldr	r7, [sp, #16]
 801ebe4:	e73d      	b.n	801ea62 <_dtoa_r+0x4b2>
 801ebe6:	4b9b      	ldr	r3, [pc, #620]	@ (801ee54 <_dtoa_r+0x8a4>)
 801ebe8:	f7e1 fd06 	bl	80005f8 <__aeabi_dmul>
 801ebec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebf0:	e7bc      	b.n	801eb6c <_dtoa_r+0x5bc>
 801ebf2:	d10c      	bne.n	801ec0e <_dtoa_r+0x65e>
 801ebf4:	4b98      	ldr	r3, [pc, #608]	@ (801ee58 <_dtoa_r+0x8a8>)
 801ebf6:	2200      	movs	r2, #0
 801ebf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ebfc:	f7e1 fcfc 	bl	80005f8 <__aeabi_dmul>
 801ec00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ec04:	f7e1 ff7e 	bl	8000b04 <__aeabi_dcmpge>
 801ec08:	2800      	cmp	r0, #0
 801ec0a:	f000 8157 	beq.w	801eebc <_dtoa_r+0x90c>
 801ec0e:	2400      	movs	r4, #0
 801ec10:	4625      	mov	r5, r4
 801ec12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec14:	43db      	mvns	r3, r3
 801ec16:	9304      	str	r3, [sp, #16]
 801ec18:	4656      	mov	r6, sl
 801ec1a:	2700      	movs	r7, #0
 801ec1c:	4621      	mov	r1, r4
 801ec1e:	4658      	mov	r0, fp
 801ec20:	f000 faa9 	bl	801f176 <_Bfree>
 801ec24:	2d00      	cmp	r5, #0
 801ec26:	d0dc      	beq.n	801ebe2 <_dtoa_r+0x632>
 801ec28:	b12f      	cbz	r7, 801ec36 <_dtoa_r+0x686>
 801ec2a:	42af      	cmp	r7, r5
 801ec2c:	d003      	beq.n	801ec36 <_dtoa_r+0x686>
 801ec2e:	4639      	mov	r1, r7
 801ec30:	4658      	mov	r0, fp
 801ec32:	f000 faa0 	bl	801f176 <_Bfree>
 801ec36:	4629      	mov	r1, r5
 801ec38:	4658      	mov	r0, fp
 801ec3a:	f000 fa9c 	bl	801f176 <_Bfree>
 801ec3e:	e7d0      	b.n	801ebe2 <_dtoa_r+0x632>
 801ec40:	9704      	str	r7, [sp, #16]
 801ec42:	4633      	mov	r3, r6
 801ec44:	461e      	mov	r6, r3
 801ec46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ec4a:	2a39      	cmp	r2, #57	@ 0x39
 801ec4c:	d107      	bne.n	801ec5e <_dtoa_r+0x6ae>
 801ec4e:	459a      	cmp	sl, r3
 801ec50:	d1f8      	bne.n	801ec44 <_dtoa_r+0x694>
 801ec52:	9a04      	ldr	r2, [sp, #16]
 801ec54:	3201      	adds	r2, #1
 801ec56:	9204      	str	r2, [sp, #16]
 801ec58:	2230      	movs	r2, #48	@ 0x30
 801ec5a:	f88a 2000 	strb.w	r2, [sl]
 801ec5e:	781a      	ldrb	r2, [r3, #0]
 801ec60:	3201      	adds	r2, #1
 801ec62:	701a      	strb	r2, [r3, #0]
 801ec64:	e7bd      	b.n	801ebe2 <_dtoa_r+0x632>
 801ec66:	4b7b      	ldr	r3, [pc, #492]	@ (801ee54 <_dtoa_r+0x8a4>)
 801ec68:	2200      	movs	r2, #0
 801ec6a:	f7e1 fcc5 	bl	80005f8 <__aeabi_dmul>
 801ec6e:	2200      	movs	r2, #0
 801ec70:	2300      	movs	r3, #0
 801ec72:	4604      	mov	r4, r0
 801ec74:	460d      	mov	r5, r1
 801ec76:	f7e1 ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 801ec7a:	2800      	cmp	r0, #0
 801ec7c:	f43f aeba 	beq.w	801e9f4 <_dtoa_r+0x444>
 801ec80:	e6ef      	b.n	801ea62 <_dtoa_r+0x4b2>
 801ec82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ec84:	2a00      	cmp	r2, #0
 801ec86:	f000 80db 	beq.w	801ee40 <_dtoa_r+0x890>
 801ec8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec8c:	2a01      	cmp	r2, #1
 801ec8e:	f300 80bf 	bgt.w	801ee10 <_dtoa_r+0x860>
 801ec92:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ec94:	2a00      	cmp	r2, #0
 801ec96:	f000 80b7 	beq.w	801ee08 <_dtoa_r+0x858>
 801ec9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ec9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eca0:	4646      	mov	r6, r8
 801eca2:	9a08      	ldr	r2, [sp, #32]
 801eca4:	2101      	movs	r1, #1
 801eca6:	441a      	add	r2, r3
 801eca8:	4658      	mov	r0, fp
 801ecaa:	4498      	add	r8, r3
 801ecac:	9208      	str	r2, [sp, #32]
 801ecae:	f000 fafd 	bl	801f2ac <__i2b>
 801ecb2:	4605      	mov	r5, r0
 801ecb4:	b15e      	cbz	r6, 801ecce <_dtoa_r+0x71e>
 801ecb6:	9b08      	ldr	r3, [sp, #32]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	dd08      	ble.n	801ecce <_dtoa_r+0x71e>
 801ecbc:	42b3      	cmp	r3, r6
 801ecbe:	9a08      	ldr	r2, [sp, #32]
 801ecc0:	bfa8      	it	ge
 801ecc2:	4633      	movge	r3, r6
 801ecc4:	eba8 0803 	sub.w	r8, r8, r3
 801ecc8:	1af6      	subs	r6, r6, r3
 801ecca:	1ad3      	subs	r3, r2, r3
 801eccc:	9308      	str	r3, [sp, #32]
 801ecce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ecd0:	b1f3      	cbz	r3, 801ed10 <_dtoa_r+0x760>
 801ecd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	f000 80b7 	beq.w	801ee48 <_dtoa_r+0x898>
 801ecda:	b18c      	cbz	r4, 801ed00 <_dtoa_r+0x750>
 801ecdc:	4629      	mov	r1, r5
 801ecde:	4622      	mov	r2, r4
 801ece0:	4658      	mov	r0, fp
 801ece2:	f000 fba3 	bl	801f42c <__pow5mult>
 801ece6:	464a      	mov	r2, r9
 801ece8:	4601      	mov	r1, r0
 801ecea:	4605      	mov	r5, r0
 801ecec:	4658      	mov	r0, fp
 801ecee:	f000 faf3 	bl	801f2d8 <__multiply>
 801ecf2:	4649      	mov	r1, r9
 801ecf4:	9004      	str	r0, [sp, #16]
 801ecf6:	4658      	mov	r0, fp
 801ecf8:	f000 fa3d 	bl	801f176 <_Bfree>
 801ecfc:	9b04      	ldr	r3, [sp, #16]
 801ecfe:	4699      	mov	r9, r3
 801ed00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed02:	1b1a      	subs	r2, r3, r4
 801ed04:	d004      	beq.n	801ed10 <_dtoa_r+0x760>
 801ed06:	4649      	mov	r1, r9
 801ed08:	4658      	mov	r0, fp
 801ed0a:	f000 fb8f 	bl	801f42c <__pow5mult>
 801ed0e:	4681      	mov	r9, r0
 801ed10:	2101      	movs	r1, #1
 801ed12:	4658      	mov	r0, fp
 801ed14:	f000 faca 	bl	801f2ac <__i2b>
 801ed18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	f000 81cc 	beq.w	801f0ba <_dtoa_r+0xb0a>
 801ed22:	461a      	mov	r2, r3
 801ed24:	4601      	mov	r1, r0
 801ed26:	4658      	mov	r0, fp
 801ed28:	f000 fb80 	bl	801f42c <__pow5mult>
 801ed2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed2e:	2b01      	cmp	r3, #1
 801ed30:	4604      	mov	r4, r0
 801ed32:	f300 8095 	bgt.w	801ee60 <_dtoa_r+0x8b0>
 801ed36:	9b02      	ldr	r3, [sp, #8]
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	f040 8087 	bne.w	801ee4c <_dtoa_r+0x89c>
 801ed3e:	9b03      	ldr	r3, [sp, #12]
 801ed40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	f040 8089 	bne.w	801ee5c <_dtoa_r+0x8ac>
 801ed4a:	9b03      	ldr	r3, [sp, #12]
 801ed4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ed50:	0d1b      	lsrs	r3, r3, #20
 801ed52:	051b      	lsls	r3, r3, #20
 801ed54:	b12b      	cbz	r3, 801ed62 <_dtoa_r+0x7b2>
 801ed56:	9b08      	ldr	r3, [sp, #32]
 801ed58:	3301      	adds	r3, #1
 801ed5a:	9308      	str	r3, [sp, #32]
 801ed5c:	f108 0801 	add.w	r8, r8, #1
 801ed60:	2301      	movs	r3, #1
 801ed62:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	f000 81ad 	beq.w	801f0c6 <_dtoa_r+0xb16>
 801ed6c:	6923      	ldr	r3, [r4, #16]
 801ed6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ed72:	6918      	ldr	r0, [r3, #16]
 801ed74:	f000 fa4e 	bl	801f214 <__hi0bits>
 801ed78:	f1c0 0020 	rsb	r0, r0, #32
 801ed7c:	9b08      	ldr	r3, [sp, #32]
 801ed7e:	4418      	add	r0, r3
 801ed80:	f010 001f 	ands.w	r0, r0, #31
 801ed84:	d077      	beq.n	801ee76 <_dtoa_r+0x8c6>
 801ed86:	f1c0 0320 	rsb	r3, r0, #32
 801ed8a:	2b04      	cmp	r3, #4
 801ed8c:	dd6b      	ble.n	801ee66 <_dtoa_r+0x8b6>
 801ed8e:	9b08      	ldr	r3, [sp, #32]
 801ed90:	f1c0 001c 	rsb	r0, r0, #28
 801ed94:	4403      	add	r3, r0
 801ed96:	4480      	add	r8, r0
 801ed98:	4406      	add	r6, r0
 801ed9a:	9308      	str	r3, [sp, #32]
 801ed9c:	f1b8 0f00 	cmp.w	r8, #0
 801eda0:	dd05      	ble.n	801edae <_dtoa_r+0x7fe>
 801eda2:	4649      	mov	r1, r9
 801eda4:	4642      	mov	r2, r8
 801eda6:	4658      	mov	r0, fp
 801eda8:	f000 fb80 	bl	801f4ac <__lshift>
 801edac:	4681      	mov	r9, r0
 801edae:	9b08      	ldr	r3, [sp, #32]
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	dd05      	ble.n	801edc0 <_dtoa_r+0x810>
 801edb4:	4621      	mov	r1, r4
 801edb6:	461a      	mov	r2, r3
 801edb8:	4658      	mov	r0, fp
 801edba:	f000 fb77 	bl	801f4ac <__lshift>
 801edbe:	4604      	mov	r4, r0
 801edc0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d059      	beq.n	801ee7a <_dtoa_r+0x8ca>
 801edc6:	4621      	mov	r1, r4
 801edc8:	4648      	mov	r0, r9
 801edca:	f000 fbdb 	bl	801f584 <__mcmp>
 801edce:	2800      	cmp	r0, #0
 801edd0:	da53      	bge.n	801ee7a <_dtoa_r+0x8ca>
 801edd2:	1e7b      	subs	r3, r7, #1
 801edd4:	9304      	str	r3, [sp, #16]
 801edd6:	4649      	mov	r1, r9
 801edd8:	2300      	movs	r3, #0
 801edda:	220a      	movs	r2, #10
 801eddc:	4658      	mov	r0, fp
 801edde:	f000 f9d3 	bl	801f188 <__multadd>
 801ede2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ede4:	4681      	mov	r9, r0
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	f000 816f 	beq.w	801f0ca <_dtoa_r+0xb1a>
 801edec:	2300      	movs	r3, #0
 801edee:	4629      	mov	r1, r5
 801edf0:	220a      	movs	r2, #10
 801edf2:	4658      	mov	r0, fp
 801edf4:	f000 f9c8 	bl	801f188 <__multadd>
 801edf8:	9b00      	ldr	r3, [sp, #0]
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	4605      	mov	r5, r0
 801edfe:	dc67      	bgt.n	801eed0 <_dtoa_r+0x920>
 801ee00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee02:	2b02      	cmp	r3, #2
 801ee04:	dc41      	bgt.n	801ee8a <_dtoa_r+0x8da>
 801ee06:	e063      	b.n	801eed0 <_dtoa_r+0x920>
 801ee08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ee0a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801ee0e:	e746      	b.n	801ec9e <_dtoa_r+0x6ee>
 801ee10:	9b07      	ldr	r3, [sp, #28]
 801ee12:	1e5c      	subs	r4, r3, #1
 801ee14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ee16:	42a3      	cmp	r3, r4
 801ee18:	bfbf      	itttt	lt
 801ee1a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ee1c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801ee1e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801ee20:	1ae3      	sublt	r3, r4, r3
 801ee22:	bfb4      	ite	lt
 801ee24:	18d2      	addlt	r2, r2, r3
 801ee26:	1b1c      	subge	r4, r3, r4
 801ee28:	9b07      	ldr	r3, [sp, #28]
 801ee2a:	bfbc      	itt	lt
 801ee2c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801ee2e:	2400      	movlt	r4, #0
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	bfb5      	itete	lt
 801ee34:	eba8 0603 	sublt.w	r6, r8, r3
 801ee38:	9b07      	ldrge	r3, [sp, #28]
 801ee3a:	2300      	movlt	r3, #0
 801ee3c:	4646      	movge	r6, r8
 801ee3e:	e730      	b.n	801eca2 <_dtoa_r+0x6f2>
 801ee40:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ee42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ee44:	4646      	mov	r6, r8
 801ee46:	e735      	b.n	801ecb4 <_dtoa_r+0x704>
 801ee48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ee4a:	e75c      	b.n	801ed06 <_dtoa_r+0x756>
 801ee4c:	2300      	movs	r3, #0
 801ee4e:	e788      	b.n	801ed62 <_dtoa_r+0x7b2>
 801ee50:	3fe00000 	.word	0x3fe00000
 801ee54:	40240000 	.word	0x40240000
 801ee58:	40140000 	.word	0x40140000
 801ee5c:	9b02      	ldr	r3, [sp, #8]
 801ee5e:	e780      	b.n	801ed62 <_dtoa_r+0x7b2>
 801ee60:	2300      	movs	r3, #0
 801ee62:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee64:	e782      	b.n	801ed6c <_dtoa_r+0x7bc>
 801ee66:	d099      	beq.n	801ed9c <_dtoa_r+0x7ec>
 801ee68:	9a08      	ldr	r2, [sp, #32]
 801ee6a:	331c      	adds	r3, #28
 801ee6c:	441a      	add	r2, r3
 801ee6e:	4498      	add	r8, r3
 801ee70:	441e      	add	r6, r3
 801ee72:	9208      	str	r2, [sp, #32]
 801ee74:	e792      	b.n	801ed9c <_dtoa_r+0x7ec>
 801ee76:	4603      	mov	r3, r0
 801ee78:	e7f6      	b.n	801ee68 <_dtoa_r+0x8b8>
 801ee7a:	9b07      	ldr	r3, [sp, #28]
 801ee7c:	9704      	str	r7, [sp, #16]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	dc20      	bgt.n	801eec4 <_dtoa_r+0x914>
 801ee82:	9300      	str	r3, [sp, #0]
 801ee84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee86:	2b02      	cmp	r3, #2
 801ee88:	dd1e      	ble.n	801eec8 <_dtoa_r+0x918>
 801ee8a:	9b00      	ldr	r3, [sp, #0]
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	f47f aec0 	bne.w	801ec12 <_dtoa_r+0x662>
 801ee92:	4621      	mov	r1, r4
 801ee94:	2205      	movs	r2, #5
 801ee96:	4658      	mov	r0, fp
 801ee98:	f000 f976 	bl	801f188 <__multadd>
 801ee9c:	4601      	mov	r1, r0
 801ee9e:	4604      	mov	r4, r0
 801eea0:	4648      	mov	r0, r9
 801eea2:	f000 fb6f 	bl	801f584 <__mcmp>
 801eea6:	2800      	cmp	r0, #0
 801eea8:	f77f aeb3 	ble.w	801ec12 <_dtoa_r+0x662>
 801eeac:	4656      	mov	r6, sl
 801eeae:	2331      	movs	r3, #49	@ 0x31
 801eeb0:	f806 3b01 	strb.w	r3, [r6], #1
 801eeb4:	9b04      	ldr	r3, [sp, #16]
 801eeb6:	3301      	adds	r3, #1
 801eeb8:	9304      	str	r3, [sp, #16]
 801eeba:	e6ae      	b.n	801ec1a <_dtoa_r+0x66a>
 801eebc:	9c07      	ldr	r4, [sp, #28]
 801eebe:	9704      	str	r7, [sp, #16]
 801eec0:	4625      	mov	r5, r4
 801eec2:	e7f3      	b.n	801eeac <_dtoa_r+0x8fc>
 801eec4:	9b07      	ldr	r3, [sp, #28]
 801eec6:	9300      	str	r3, [sp, #0]
 801eec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	f000 8101 	beq.w	801f0d2 <_dtoa_r+0xb22>
 801eed0:	2e00      	cmp	r6, #0
 801eed2:	dd05      	ble.n	801eee0 <_dtoa_r+0x930>
 801eed4:	4629      	mov	r1, r5
 801eed6:	4632      	mov	r2, r6
 801eed8:	4658      	mov	r0, fp
 801eeda:	f000 fae7 	bl	801f4ac <__lshift>
 801eede:	4605      	mov	r5, r0
 801eee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d059      	beq.n	801ef9a <_dtoa_r+0x9ea>
 801eee6:	6869      	ldr	r1, [r5, #4]
 801eee8:	4658      	mov	r0, fp
 801eeea:	f000 f91f 	bl	801f12c <_Balloc>
 801eeee:	4606      	mov	r6, r0
 801eef0:	b920      	cbnz	r0, 801eefc <_dtoa_r+0x94c>
 801eef2:	4b83      	ldr	r3, [pc, #524]	@ (801f100 <_dtoa_r+0xb50>)
 801eef4:	4602      	mov	r2, r0
 801eef6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801eefa:	e480      	b.n	801e7fe <_dtoa_r+0x24e>
 801eefc:	692a      	ldr	r2, [r5, #16]
 801eefe:	3202      	adds	r2, #2
 801ef00:	0092      	lsls	r2, r2, #2
 801ef02:	f105 010c 	add.w	r1, r5, #12
 801ef06:	300c      	adds	r0, #12
 801ef08:	f7fd fbac 	bl	801c664 <memcpy>
 801ef0c:	2201      	movs	r2, #1
 801ef0e:	4631      	mov	r1, r6
 801ef10:	4658      	mov	r0, fp
 801ef12:	f000 facb 	bl	801f4ac <__lshift>
 801ef16:	f10a 0301 	add.w	r3, sl, #1
 801ef1a:	9307      	str	r3, [sp, #28]
 801ef1c:	9b00      	ldr	r3, [sp, #0]
 801ef1e:	4453      	add	r3, sl
 801ef20:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ef22:	9b02      	ldr	r3, [sp, #8]
 801ef24:	f003 0301 	and.w	r3, r3, #1
 801ef28:	462f      	mov	r7, r5
 801ef2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef2c:	4605      	mov	r5, r0
 801ef2e:	9b07      	ldr	r3, [sp, #28]
 801ef30:	4621      	mov	r1, r4
 801ef32:	3b01      	subs	r3, #1
 801ef34:	4648      	mov	r0, r9
 801ef36:	9300      	str	r3, [sp, #0]
 801ef38:	f7ff fab2 	bl	801e4a0 <quorem>
 801ef3c:	4639      	mov	r1, r7
 801ef3e:	9002      	str	r0, [sp, #8]
 801ef40:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ef44:	4648      	mov	r0, r9
 801ef46:	f000 fb1d 	bl	801f584 <__mcmp>
 801ef4a:	462a      	mov	r2, r5
 801ef4c:	9008      	str	r0, [sp, #32]
 801ef4e:	4621      	mov	r1, r4
 801ef50:	4658      	mov	r0, fp
 801ef52:	f000 fb33 	bl	801f5bc <__mdiff>
 801ef56:	68c2      	ldr	r2, [r0, #12]
 801ef58:	4606      	mov	r6, r0
 801ef5a:	bb02      	cbnz	r2, 801ef9e <_dtoa_r+0x9ee>
 801ef5c:	4601      	mov	r1, r0
 801ef5e:	4648      	mov	r0, r9
 801ef60:	f000 fb10 	bl	801f584 <__mcmp>
 801ef64:	4602      	mov	r2, r0
 801ef66:	4631      	mov	r1, r6
 801ef68:	4658      	mov	r0, fp
 801ef6a:	920e      	str	r2, [sp, #56]	@ 0x38
 801ef6c:	f000 f903 	bl	801f176 <_Bfree>
 801ef70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ef74:	9e07      	ldr	r6, [sp, #28]
 801ef76:	ea43 0102 	orr.w	r1, r3, r2
 801ef7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef7c:	4319      	orrs	r1, r3
 801ef7e:	d110      	bne.n	801efa2 <_dtoa_r+0x9f2>
 801ef80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ef84:	d029      	beq.n	801efda <_dtoa_r+0xa2a>
 801ef86:	9b08      	ldr	r3, [sp, #32]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	dd02      	ble.n	801ef92 <_dtoa_r+0x9e2>
 801ef8c:	9b02      	ldr	r3, [sp, #8]
 801ef8e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801ef92:	9b00      	ldr	r3, [sp, #0]
 801ef94:	f883 8000 	strb.w	r8, [r3]
 801ef98:	e640      	b.n	801ec1c <_dtoa_r+0x66c>
 801ef9a:	4628      	mov	r0, r5
 801ef9c:	e7bb      	b.n	801ef16 <_dtoa_r+0x966>
 801ef9e:	2201      	movs	r2, #1
 801efa0:	e7e1      	b.n	801ef66 <_dtoa_r+0x9b6>
 801efa2:	9b08      	ldr	r3, [sp, #32]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	db04      	blt.n	801efb2 <_dtoa_r+0xa02>
 801efa8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801efaa:	430b      	orrs	r3, r1
 801efac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801efae:	430b      	orrs	r3, r1
 801efb0:	d120      	bne.n	801eff4 <_dtoa_r+0xa44>
 801efb2:	2a00      	cmp	r2, #0
 801efb4:	dded      	ble.n	801ef92 <_dtoa_r+0x9e2>
 801efb6:	4649      	mov	r1, r9
 801efb8:	2201      	movs	r2, #1
 801efba:	4658      	mov	r0, fp
 801efbc:	f000 fa76 	bl	801f4ac <__lshift>
 801efc0:	4621      	mov	r1, r4
 801efc2:	4681      	mov	r9, r0
 801efc4:	f000 fade 	bl	801f584 <__mcmp>
 801efc8:	2800      	cmp	r0, #0
 801efca:	dc03      	bgt.n	801efd4 <_dtoa_r+0xa24>
 801efcc:	d1e1      	bne.n	801ef92 <_dtoa_r+0x9e2>
 801efce:	f018 0f01 	tst.w	r8, #1
 801efd2:	d0de      	beq.n	801ef92 <_dtoa_r+0x9e2>
 801efd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801efd8:	d1d8      	bne.n	801ef8c <_dtoa_r+0x9dc>
 801efda:	9a00      	ldr	r2, [sp, #0]
 801efdc:	2339      	movs	r3, #57	@ 0x39
 801efde:	7013      	strb	r3, [r2, #0]
 801efe0:	4633      	mov	r3, r6
 801efe2:	461e      	mov	r6, r3
 801efe4:	3b01      	subs	r3, #1
 801efe6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801efea:	2a39      	cmp	r2, #57	@ 0x39
 801efec:	d052      	beq.n	801f094 <_dtoa_r+0xae4>
 801efee:	3201      	adds	r2, #1
 801eff0:	701a      	strb	r2, [r3, #0]
 801eff2:	e613      	b.n	801ec1c <_dtoa_r+0x66c>
 801eff4:	2a00      	cmp	r2, #0
 801eff6:	dd07      	ble.n	801f008 <_dtoa_r+0xa58>
 801eff8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801effc:	d0ed      	beq.n	801efda <_dtoa_r+0xa2a>
 801effe:	9a00      	ldr	r2, [sp, #0]
 801f000:	f108 0301 	add.w	r3, r8, #1
 801f004:	7013      	strb	r3, [r2, #0]
 801f006:	e609      	b.n	801ec1c <_dtoa_r+0x66c>
 801f008:	9b07      	ldr	r3, [sp, #28]
 801f00a:	9a07      	ldr	r2, [sp, #28]
 801f00c:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f012:	4293      	cmp	r3, r2
 801f014:	d028      	beq.n	801f068 <_dtoa_r+0xab8>
 801f016:	4649      	mov	r1, r9
 801f018:	2300      	movs	r3, #0
 801f01a:	220a      	movs	r2, #10
 801f01c:	4658      	mov	r0, fp
 801f01e:	f000 f8b3 	bl	801f188 <__multadd>
 801f022:	42af      	cmp	r7, r5
 801f024:	4681      	mov	r9, r0
 801f026:	f04f 0300 	mov.w	r3, #0
 801f02a:	f04f 020a 	mov.w	r2, #10
 801f02e:	4639      	mov	r1, r7
 801f030:	4658      	mov	r0, fp
 801f032:	d107      	bne.n	801f044 <_dtoa_r+0xa94>
 801f034:	f000 f8a8 	bl	801f188 <__multadd>
 801f038:	4607      	mov	r7, r0
 801f03a:	4605      	mov	r5, r0
 801f03c:	9b07      	ldr	r3, [sp, #28]
 801f03e:	3301      	adds	r3, #1
 801f040:	9307      	str	r3, [sp, #28]
 801f042:	e774      	b.n	801ef2e <_dtoa_r+0x97e>
 801f044:	f000 f8a0 	bl	801f188 <__multadd>
 801f048:	4629      	mov	r1, r5
 801f04a:	4607      	mov	r7, r0
 801f04c:	2300      	movs	r3, #0
 801f04e:	220a      	movs	r2, #10
 801f050:	4658      	mov	r0, fp
 801f052:	f000 f899 	bl	801f188 <__multadd>
 801f056:	4605      	mov	r5, r0
 801f058:	e7f0      	b.n	801f03c <_dtoa_r+0xa8c>
 801f05a:	9b00      	ldr	r3, [sp, #0]
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	bfcc      	ite	gt
 801f060:	461e      	movgt	r6, r3
 801f062:	2601      	movle	r6, #1
 801f064:	4456      	add	r6, sl
 801f066:	2700      	movs	r7, #0
 801f068:	4649      	mov	r1, r9
 801f06a:	2201      	movs	r2, #1
 801f06c:	4658      	mov	r0, fp
 801f06e:	f000 fa1d 	bl	801f4ac <__lshift>
 801f072:	4621      	mov	r1, r4
 801f074:	4681      	mov	r9, r0
 801f076:	f000 fa85 	bl	801f584 <__mcmp>
 801f07a:	2800      	cmp	r0, #0
 801f07c:	dcb0      	bgt.n	801efe0 <_dtoa_r+0xa30>
 801f07e:	d102      	bne.n	801f086 <_dtoa_r+0xad6>
 801f080:	f018 0f01 	tst.w	r8, #1
 801f084:	d1ac      	bne.n	801efe0 <_dtoa_r+0xa30>
 801f086:	4633      	mov	r3, r6
 801f088:	461e      	mov	r6, r3
 801f08a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f08e:	2a30      	cmp	r2, #48	@ 0x30
 801f090:	d0fa      	beq.n	801f088 <_dtoa_r+0xad8>
 801f092:	e5c3      	b.n	801ec1c <_dtoa_r+0x66c>
 801f094:	459a      	cmp	sl, r3
 801f096:	d1a4      	bne.n	801efe2 <_dtoa_r+0xa32>
 801f098:	9b04      	ldr	r3, [sp, #16]
 801f09a:	3301      	adds	r3, #1
 801f09c:	9304      	str	r3, [sp, #16]
 801f09e:	2331      	movs	r3, #49	@ 0x31
 801f0a0:	f88a 3000 	strb.w	r3, [sl]
 801f0a4:	e5ba      	b.n	801ec1c <_dtoa_r+0x66c>
 801f0a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f0a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801f104 <_dtoa_r+0xb54>
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	f43f aab6 	beq.w	801e61e <_dtoa_r+0x6e>
 801f0b2:	f10a 0308 	add.w	r3, sl, #8
 801f0b6:	f7ff bab0 	b.w	801e61a <_dtoa_r+0x6a>
 801f0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0bc:	2b01      	cmp	r3, #1
 801f0be:	f77f ae3a 	ble.w	801ed36 <_dtoa_r+0x786>
 801f0c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0c6:	2001      	movs	r0, #1
 801f0c8:	e658      	b.n	801ed7c <_dtoa_r+0x7cc>
 801f0ca:	9b00      	ldr	r3, [sp, #0]
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	f77f aed9 	ble.w	801ee84 <_dtoa_r+0x8d4>
 801f0d2:	4656      	mov	r6, sl
 801f0d4:	4621      	mov	r1, r4
 801f0d6:	4648      	mov	r0, r9
 801f0d8:	f7ff f9e2 	bl	801e4a0 <quorem>
 801f0dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f0e0:	f806 8b01 	strb.w	r8, [r6], #1
 801f0e4:	9b00      	ldr	r3, [sp, #0]
 801f0e6:	eba6 020a 	sub.w	r2, r6, sl
 801f0ea:	4293      	cmp	r3, r2
 801f0ec:	ddb5      	ble.n	801f05a <_dtoa_r+0xaaa>
 801f0ee:	4649      	mov	r1, r9
 801f0f0:	2300      	movs	r3, #0
 801f0f2:	220a      	movs	r2, #10
 801f0f4:	4658      	mov	r0, fp
 801f0f6:	f000 f847 	bl	801f188 <__multadd>
 801f0fa:	4681      	mov	r9, r0
 801f0fc:	e7ea      	b.n	801f0d4 <_dtoa_r+0xb24>
 801f0fe:	bf00      	nop
 801f100:	0802397b 	.word	0x0802397b
 801f104:	0802396e 	.word	0x0802396e

0801f108 <__ascii_mbtowc>:
 801f108:	b082      	sub	sp, #8
 801f10a:	b901      	cbnz	r1, 801f10e <__ascii_mbtowc+0x6>
 801f10c:	a901      	add	r1, sp, #4
 801f10e:	b142      	cbz	r2, 801f122 <__ascii_mbtowc+0x1a>
 801f110:	b14b      	cbz	r3, 801f126 <__ascii_mbtowc+0x1e>
 801f112:	7813      	ldrb	r3, [r2, #0]
 801f114:	600b      	str	r3, [r1, #0]
 801f116:	7812      	ldrb	r2, [r2, #0]
 801f118:	1e10      	subs	r0, r2, #0
 801f11a:	bf18      	it	ne
 801f11c:	2001      	movne	r0, #1
 801f11e:	b002      	add	sp, #8
 801f120:	4770      	bx	lr
 801f122:	4610      	mov	r0, r2
 801f124:	e7fb      	b.n	801f11e <__ascii_mbtowc+0x16>
 801f126:	f06f 0001 	mvn.w	r0, #1
 801f12a:	e7f8      	b.n	801f11e <__ascii_mbtowc+0x16>

0801f12c <_Balloc>:
 801f12c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f12e:	b570      	push	{r4, r5, r6, lr}
 801f130:	4605      	mov	r5, r0
 801f132:	460c      	mov	r4, r1
 801f134:	b17b      	cbz	r3, 801f156 <_Balloc+0x2a>
 801f136:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801f138:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f13c:	b9a0      	cbnz	r0, 801f168 <_Balloc+0x3c>
 801f13e:	2101      	movs	r1, #1
 801f140:	fa01 f604 	lsl.w	r6, r1, r4
 801f144:	1d72      	adds	r2, r6, #5
 801f146:	0092      	lsls	r2, r2, #2
 801f148:	4628      	mov	r0, r5
 801f14a:	f000 fd8d 	bl	801fc68 <_calloc_r>
 801f14e:	b148      	cbz	r0, 801f164 <_Balloc+0x38>
 801f150:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801f154:	e00b      	b.n	801f16e <_Balloc+0x42>
 801f156:	2221      	movs	r2, #33	@ 0x21
 801f158:	2104      	movs	r1, #4
 801f15a:	f000 fd85 	bl	801fc68 <_calloc_r>
 801f15e:	6468      	str	r0, [r5, #68]	@ 0x44
 801f160:	2800      	cmp	r0, #0
 801f162:	d1e8      	bne.n	801f136 <_Balloc+0xa>
 801f164:	2000      	movs	r0, #0
 801f166:	bd70      	pop	{r4, r5, r6, pc}
 801f168:	6802      	ldr	r2, [r0, #0]
 801f16a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801f16e:	2300      	movs	r3, #0
 801f170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f174:	e7f7      	b.n	801f166 <_Balloc+0x3a>

0801f176 <_Bfree>:
 801f176:	b131      	cbz	r1, 801f186 <_Bfree+0x10>
 801f178:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f17a:	684a      	ldr	r2, [r1, #4]
 801f17c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f180:	6008      	str	r0, [r1, #0]
 801f182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801f186:	4770      	bx	lr

0801f188 <__multadd>:
 801f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f18c:	690d      	ldr	r5, [r1, #16]
 801f18e:	4607      	mov	r7, r0
 801f190:	460c      	mov	r4, r1
 801f192:	461e      	mov	r6, r3
 801f194:	f101 0c14 	add.w	ip, r1, #20
 801f198:	2000      	movs	r0, #0
 801f19a:	f8dc 3000 	ldr.w	r3, [ip]
 801f19e:	b299      	uxth	r1, r3
 801f1a0:	fb02 6101 	mla	r1, r2, r1, r6
 801f1a4:	0c1e      	lsrs	r6, r3, #16
 801f1a6:	0c0b      	lsrs	r3, r1, #16
 801f1a8:	fb02 3306 	mla	r3, r2, r6, r3
 801f1ac:	b289      	uxth	r1, r1
 801f1ae:	3001      	adds	r0, #1
 801f1b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f1b4:	4285      	cmp	r5, r0
 801f1b6:	f84c 1b04 	str.w	r1, [ip], #4
 801f1ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f1be:	dcec      	bgt.n	801f19a <__multadd+0x12>
 801f1c0:	b30e      	cbz	r6, 801f206 <__multadd+0x7e>
 801f1c2:	68a3      	ldr	r3, [r4, #8]
 801f1c4:	42ab      	cmp	r3, r5
 801f1c6:	dc19      	bgt.n	801f1fc <__multadd+0x74>
 801f1c8:	6861      	ldr	r1, [r4, #4]
 801f1ca:	4638      	mov	r0, r7
 801f1cc:	3101      	adds	r1, #1
 801f1ce:	f7ff ffad 	bl	801f12c <_Balloc>
 801f1d2:	4680      	mov	r8, r0
 801f1d4:	b928      	cbnz	r0, 801f1e2 <__multadd+0x5a>
 801f1d6:	4602      	mov	r2, r0
 801f1d8:	4b0c      	ldr	r3, [pc, #48]	@ (801f20c <__multadd+0x84>)
 801f1da:	480d      	ldr	r0, [pc, #52]	@ (801f210 <__multadd+0x88>)
 801f1dc:	21ba      	movs	r1, #186	@ 0xba
 801f1de:	f000 fd25 	bl	801fc2c <__assert_func>
 801f1e2:	6922      	ldr	r2, [r4, #16]
 801f1e4:	3202      	adds	r2, #2
 801f1e6:	f104 010c 	add.w	r1, r4, #12
 801f1ea:	0092      	lsls	r2, r2, #2
 801f1ec:	300c      	adds	r0, #12
 801f1ee:	f7fd fa39 	bl	801c664 <memcpy>
 801f1f2:	4621      	mov	r1, r4
 801f1f4:	4638      	mov	r0, r7
 801f1f6:	f7ff ffbe 	bl	801f176 <_Bfree>
 801f1fa:	4644      	mov	r4, r8
 801f1fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f200:	3501      	adds	r5, #1
 801f202:	615e      	str	r6, [r3, #20]
 801f204:	6125      	str	r5, [r4, #16]
 801f206:	4620      	mov	r0, r4
 801f208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f20c:	0802397b 	.word	0x0802397b
 801f210:	080239e4 	.word	0x080239e4

0801f214 <__hi0bits>:
 801f214:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f218:	4603      	mov	r3, r0
 801f21a:	bf36      	itet	cc
 801f21c:	0403      	lslcc	r3, r0, #16
 801f21e:	2000      	movcs	r0, #0
 801f220:	2010      	movcc	r0, #16
 801f222:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f226:	bf3c      	itt	cc
 801f228:	021b      	lslcc	r3, r3, #8
 801f22a:	3008      	addcc	r0, #8
 801f22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f230:	bf3c      	itt	cc
 801f232:	011b      	lslcc	r3, r3, #4
 801f234:	3004      	addcc	r0, #4
 801f236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f23a:	bf3c      	itt	cc
 801f23c:	009b      	lslcc	r3, r3, #2
 801f23e:	3002      	addcc	r0, #2
 801f240:	2b00      	cmp	r3, #0
 801f242:	db05      	blt.n	801f250 <__hi0bits+0x3c>
 801f244:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f248:	f100 0001 	add.w	r0, r0, #1
 801f24c:	bf08      	it	eq
 801f24e:	2020      	moveq	r0, #32
 801f250:	4770      	bx	lr

0801f252 <__lo0bits>:
 801f252:	6803      	ldr	r3, [r0, #0]
 801f254:	4602      	mov	r2, r0
 801f256:	f013 0007 	ands.w	r0, r3, #7
 801f25a:	d00b      	beq.n	801f274 <__lo0bits+0x22>
 801f25c:	07d9      	lsls	r1, r3, #31
 801f25e:	d421      	bmi.n	801f2a4 <__lo0bits+0x52>
 801f260:	0798      	lsls	r0, r3, #30
 801f262:	bf49      	itett	mi
 801f264:	085b      	lsrmi	r3, r3, #1
 801f266:	089b      	lsrpl	r3, r3, #2
 801f268:	2001      	movmi	r0, #1
 801f26a:	6013      	strmi	r3, [r2, #0]
 801f26c:	bf5c      	itt	pl
 801f26e:	6013      	strpl	r3, [r2, #0]
 801f270:	2002      	movpl	r0, #2
 801f272:	4770      	bx	lr
 801f274:	b299      	uxth	r1, r3
 801f276:	b909      	cbnz	r1, 801f27c <__lo0bits+0x2a>
 801f278:	0c1b      	lsrs	r3, r3, #16
 801f27a:	2010      	movs	r0, #16
 801f27c:	b2d9      	uxtb	r1, r3
 801f27e:	b909      	cbnz	r1, 801f284 <__lo0bits+0x32>
 801f280:	3008      	adds	r0, #8
 801f282:	0a1b      	lsrs	r3, r3, #8
 801f284:	0719      	lsls	r1, r3, #28
 801f286:	bf04      	itt	eq
 801f288:	091b      	lsreq	r3, r3, #4
 801f28a:	3004      	addeq	r0, #4
 801f28c:	0799      	lsls	r1, r3, #30
 801f28e:	bf04      	itt	eq
 801f290:	089b      	lsreq	r3, r3, #2
 801f292:	3002      	addeq	r0, #2
 801f294:	07d9      	lsls	r1, r3, #31
 801f296:	d403      	bmi.n	801f2a0 <__lo0bits+0x4e>
 801f298:	085b      	lsrs	r3, r3, #1
 801f29a:	f100 0001 	add.w	r0, r0, #1
 801f29e:	d003      	beq.n	801f2a8 <__lo0bits+0x56>
 801f2a0:	6013      	str	r3, [r2, #0]
 801f2a2:	4770      	bx	lr
 801f2a4:	2000      	movs	r0, #0
 801f2a6:	4770      	bx	lr
 801f2a8:	2020      	movs	r0, #32
 801f2aa:	4770      	bx	lr

0801f2ac <__i2b>:
 801f2ac:	b510      	push	{r4, lr}
 801f2ae:	460c      	mov	r4, r1
 801f2b0:	2101      	movs	r1, #1
 801f2b2:	f7ff ff3b 	bl	801f12c <_Balloc>
 801f2b6:	4602      	mov	r2, r0
 801f2b8:	b928      	cbnz	r0, 801f2c6 <__i2b+0x1a>
 801f2ba:	4b05      	ldr	r3, [pc, #20]	@ (801f2d0 <__i2b+0x24>)
 801f2bc:	4805      	ldr	r0, [pc, #20]	@ (801f2d4 <__i2b+0x28>)
 801f2be:	f240 1145 	movw	r1, #325	@ 0x145
 801f2c2:	f000 fcb3 	bl	801fc2c <__assert_func>
 801f2c6:	2301      	movs	r3, #1
 801f2c8:	6144      	str	r4, [r0, #20]
 801f2ca:	6103      	str	r3, [r0, #16]
 801f2cc:	bd10      	pop	{r4, pc}
 801f2ce:	bf00      	nop
 801f2d0:	0802397b 	.word	0x0802397b
 801f2d4:	080239e4 	.word	0x080239e4

0801f2d8 <__multiply>:
 801f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2dc:	4614      	mov	r4, r2
 801f2de:	690a      	ldr	r2, [r1, #16]
 801f2e0:	6923      	ldr	r3, [r4, #16]
 801f2e2:	429a      	cmp	r2, r3
 801f2e4:	bfa8      	it	ge
 801f2e6:	4623      	movge	r3, r4
 801f2e8:	460f      	mov	r7, r1
 801f2ea:	bfa4      	itt	ge
 801f2ec:	460c      	movge	r4, r1
 801f2ee:	461f      	movge	r7, r3
 801f2f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f2f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f2f8:	68a3      	ldr	r3, [r4, #8]
 801f2fa:	6861      	ldr	r1, [r4, #4]
 801f2fc:	eb0a 0609 	add.w	r6, sl, r9
 801f300:	42b3      	cmp	r3, r6
 801f302:	b085      	sub	sp, #20
 801f304:	bfb8      	it	lt
 801f306:	3101      	addlt	r1, #1
 801f308:	f7ff ff10 	bl	801f12c <_Balloc>
 801f30c:	b930      	cbnz	r0, 801f31c <__multiply+0x44>
 801f30e:	4602      	mov	r2, r0
 801f310:	4b44      	ldr	r3, [pc, #272]	@ (801f424 <__multiply+0x14c>)
 801f312:	4845      	ldr	r0, [pc, #276]	@ (801f428 <__multiply+0x150>)
 801f314:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f318:	f000 fc88 	bl	801fc2c <__assert_func>
 801f31c:	f100 0514 	add.w	r5, r0, #20
 801f320:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f324:	462b      	mov	r3, r5
 801f326:	2200      	movs	r2, #0
 801f328:	4543      	cmp	r3, r8
 801f32a:	d321      	bcc.n	801f370 <__multiply+0x98>
 801f32c:	f107 0114 	add.w	r1, r7, #20
 801f330:	f104 0214 	add.w	r2, r4, #20
 801f334:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f338:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f33c:	9302      	str	r3, [sp, #8]
 801f33e:	1b13      	subs	r3, r2, r4
 801f340:	3b15      	subs	r3, #21
 801f342:	f023 0303 	bic.w	r3, r3, #3
 801f346:	3304      	adds	r3, #4
 801f348:	f104 0715 	add.w	r7, r4, #21
 801f34c:	42ba      	cmp	r2, r7
 801f34e:	bf38      	it	cc
 801f350:	2304      	movcc	r3, #4
 801f352:	9301      	str	r3, [sp, #4]
 801f354:	9b02      	ldr	r3, [sp, #8]
 801f356:	9103      	str	r1, [sp, #12]
 801f358:	428b      	cmp	r3, r1
 801f35a:	d80c      	bhi.n	801f376 <__multiply+0x9e>
 801f35c:	2e00      	cmp	r6, #0
 801f35e:	dd03      	ble.n	801f368 <__multiply+0x90>
 801f360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f364:	2b00      	cmp	r3, #0
 801f366:	d05b      	beq.n	801f420 <__multiply+0x148>
 801f368:	6106      	str	r6, [r0, #16]
 801f36a:	b005      	add	sp, #20
 801f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f370:	f843 2b04 	str.w	r2, [r3], #4
 801f374:	e7d8      	b.n	801f328 <__multiply+0x50>
 801f376:	f8b1 a000 	ldrh.w	sl, [r1]
 801f37a:	f1ba 0f00 	cmp.w	sl, #0
 801f37e:	d024      	beq.n	801f3ca <__multiply+0xf2>
 801f380:	f104 0e14 	add.w	lr, r4, #20
 801f384:	46a9      	mov	r9, r5
 801f386:	f04f 0c00 	mov.w	ip, #0
 801f38a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f38e:	f8d9 3000 	ldr.w	r3, [r9]
 801f392:	fa1f fb87 	uxth.w	fp, r7
 801f396:	b29b      	uxth	r3, r3
 801f398:	fb0a 330b 	mla	r3, sl, fp, r3
 801f39c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f3a0:	f8d9 7000 	ldr.w	r7, [r9]
 801f3a4:	4463      	add	r3, ip
 801f3a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f3aa:	fb0a c70b 	mla	r7, sl, fp, ip
 801f3ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f3b2:	b29b      	uxth	r3, r3
 801f3b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f3b8:	4572      	cmp	r2, lr
 801f3ba:	f849 3b04 	str.w	r3, [r9], #4
 801f3be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f3c2:	d8e2      	bhi.n	801f38a <__multiply+0xb2>
 801f3c4:	9b01      	ldr	r3, [sp, #4]
 801f3c6:	f845 c003 	str.w	ip, [r5, r3]
 801f3ca:	9b03      	ldr	r3, [sp, #12]
 801f3cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f3d0:	3104      	adds	r1, #4
 801f3d2:	f1b9 0f00 	cmp.w	r9, #0
 801f3d6:	d021      	beq.n	801f41c <__multiply+0x144>
 801f3d8:	682b      	ldr	r3, [r5, #0]
 801f3da:	f104 0c14 	add.w	ip, r4, #20
 801f3de:	46ae      	mov	lr, r5
 801f3e0:	f04f 0a00 	mov.w	sl, #0
 801f3e4:	f8bc b000 	ldrh.w	fp, [ip]
 801f3e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f3ec:	fb09 770b 	mla	r7, r9, fp, r7
 801f3f0:	4457      	add	r7, sl
 801f3f2:	b29b      	uxth	r3, r3
 801f3f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f3f8:	f84e 3b04 	str.w	r3, [lr], #4
 801f3fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f404:	f8be 3000 	ldrh.w	r3, [lr]
 801f408:	fb09 330a 	mla	r3, r9, sl, r3
 801f40c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f410:	4562      	cmp	r2, ip
 801f412:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f416:	d8e5      	bhi.n	801f3e4 <__multiply+0x10c>
 801f418:	9f01      	ldr	r7, [sp, #4]
 801f41a:	51eb      	str	r3, [r5, r7]
 801f41c:	3504      	adds	r5, #4
 801f41e:	e799      	b.n	801f354 <__multiply+0x7c>
 801f420:	3e01      	subs	r6, #1
 801f422:	e79b      	b.n	801f35c <__multiply+0x84>
 801f424:	0802397b 	.word	0x0802397b
 801f428:	080239e4 	.word	0x080239e4

0801f42c <__pow5mult>:
 801f42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f430:	4615      	mov	r5, r2
 801f432:	f012 0203 	ands.w	r2, r2, #3
 801f436:	4607      	mov	r7, r0
 801f438:	460e      	mov	r6, r1
 801f43a:	d007      	beq.n	801f44c <__pow5mult+0x20>
 801f43c:	4c1a      	ldr	r4, [pc, #104]	@ (801f4a8 <__pow5mult+0x7c>)
 801f43e:	3a01      	subs	r2, #1
 801f440:	2300      	movs	r3, #0
 801f442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f446:	f7ff fe9f 	bl	801f188 <__multadd>
 801f44a:	4606      	mov	r6, r0
 801f44c:	10ad      	asrs	r5, r5, #2
 801f44e:	d027      	beq.n	801f4a0 <__pow5mult+0x74>
 801f450:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801f452:	b944      	cbnz	r4, 801f466 <__pow5mult+0x3a>
 801f454:	f240 2171 	movw	r1, #625	@ 0x271
 801f458:	4638      	mov	r0, r7
 801f45a:	f7ff ff27 	bl	801f2ac <__i2b>
 801f45e:	2300      	movs	r3, #0
 801f460:	6438      	str	r0, [r7, #64]	@ 0x40
 801f462:	4604      	mov	r4, r0
 801f464:	6003      	str	r3, [r0, #0]
 801f466:	f04f 0900 	mov.w	r9, #0
 801f46a:	07eb      	lsls	r3, r5, #31
 801f46c:	d50a      	bpl.n	801f484 <__pow5mult+0x58>
 801f46e:	4631      	mov	r1, r6
 801f470:	4622      	mov	r2, r4
 801f472:	4638      	mov	r0, r7
 801f474:	f7ff ff30 	bl	801f2d8 <__multiply>
 801f478:	4631      	mov	r1, r6
 801f47a:	4680      	mov	r8, r0
 801f47c:	4638      	mov	r0, r7
 801f47e:	f7ff fe7a 	bl	801f176 <_Bfree>
 801f482:	4646      	mov	r6, r8
 801f484:	106d      	asrs	r5, r5, #1
 801f486:	d00b      	beq.n	801f4a0 <__pow5mult+0x74>
 801f488:	6820      	ldr	r0, [r4, #0]
 801f48a:	b938      	cbnz	r0, 801f49c <__pow5mult+0x70>
 801f48c:	4622      	mov	r2, r4
 801f48e:	4621      	mov	r1, r4
 801f490:	4638      	mov	r0, r7
 801f492:	f7ff ff21 	bl	801f2d8 <__multiply>
 801f496:	6020      	str	r0, [r4, #0]
 801f498:	f8c0 9000 	str.w	r9, [r0]
 801f49c:	4604      	mov	r4, r0
 801f49e:	e7e4      	b.n	801f46a <__pow5mult+0x3e>
 801f4a0:	4630      	mov	r0, r6
 801f4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4a6:	bf00      	nop
 801f4a8:	08023a40 	.word	0x08023a40

0801f4ac <__lshift>:
 801f4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f4b0:	460c      	mov	r4, r1
 801f4b2:	6849      	ldr	r1, [r1, #4]
 801f4b4:	6923      	ldr	r3, [r4, #16]
 801f4b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f4ba:	68a3      	ldr	r3, [r4, #8]
 801f4bc:	4607      	mov	r7, r0
 801f4be:	4691      	mov	r9, r2
 801f4c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f4c4:	f108 0601 	add.w	r6, r8, #1
 801f4c8:	42b3      	cmp	r3, r6
 801f4ca:	db0b      	blt.n	801f4e4 <__lshift+0x38>
 801f4cc:	4638      	mov	r0, r7
 801f4ce:	f7ff fe2d 	bl	801f12c <_Balloc>
 801f4d2:	4605      	mov	r5, r0
 801f4d4:	b948      	cbnz	r0, 801f4ea <__lshift+0x3e>
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	4b28      	ldr	r3, [pc, #160]	@ (801f57c <__lshift+0xd0>)
 801f4da:	4829      	ldr	r0, [pc, #164]	@ (801f580 <__lshift+0xd4>)
 801f4dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f4e0:	f000 fba4 	bl	801fc2c <__assert_func>
 801f4e4:	3101      	adds	r1, #1
 801f4e6:	005b      	lsls	r3, r3, #1
 801f4e8:	e7ee      	b.n	801f4c8 <__lshift+0x1c>
 801f4ea:	2300      	movs	r3, #0
 801f4ec:	f100 0114 	add.w	r1, r0, #20
 801f4f0:	f100 0210 	add.w	r2, r0, #16
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	4553      	cmp	r3, sl
 801f4f8:	db33      	blt.n	801f562 <__lshift+0xb6>
 801f4fa:	6920      	ldr	r0, [r4, #16]
 801f4fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f500:	f104 0314 	add.w	r3, r4, #20
 801f504:	f019 091f 	ands.w	r9, r9, #31
 801f508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f50c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f510:	d02b      	beq.n	801f56a <__lshift+0xbe>
 801f512:	f1c9 0e20 	rsb	lr, r9, #32
 801f516:	468a      	mov	sl, r1
 801f518:	2200      	movs	r2, #0
 801f51a:	6818      	ldr	r0, [r3, #0]
 801f51c:	fa00 f009 	lsl.w	r0, r0, r9
 801f520:	4310      	orrs	r0, r2
 801f522:	f84a 0b04 	str.w	r0, [sl], #4
 801f526:	f853 2b04 	ldr.w	r2, [r3], #4
 801f52a:	459c      	cmp	ip, r3
 801f52c:	fa22 f20e 	lsr.w	r2, r2, lr
 801f530:	d8f3      	bhi.n	801f51a <__lshift+0x6e>
 801f532:	ebac 0304 	sub.w	r3, ip, r4
 801f536:	3b15      	subs	r3, #21
 801f538:	f023 0303 	bic.w	r3, r3, #3
 801f53c:	3304      	adds	r3, #4
 801f53e:	f104 0015 	add.w	r0, r4, #21
 801f542:	4584      	cmp	ip, r0
 801f544:	bf38      	it	cc
 801f546:	2304      	movcc	r3, #4
 801f548:	50ca      	str	r2, [r1, r3]
 801f54a:	b10a      	cbz	r2, 801f550 <__lshift+0xa4>
 801f54c:	f108 0602 	add.w	r6, r8, #2
 801f550:	3e01      	subs	r6, #1
 801f552:	4638      	mov	r0, r7
 801f554:	612e      	str	r6, [r5, #16]
 801f556:	4621      	mov	r1, r4
 801f558:	f7ff fe0d 	bl	801f176 <_Bfree>
 801f55c:	4628      	mov	r0, r5
 801f55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f562:	f842 0f04 	str.w	r0, [r2, #4]!
 801f566:	3301      	adds	r3, #1
 801f568:	e7c5      	b.n	801f4f6 <__lshift+0x4a>
 801f56a:	3904      	subs	r1, #4
 801f56c:	f853 2b04 	ldr.w	r2, [r3], #4
 801f570:	f841 2f04 	str.w	r2, [r1, #4]!
 801f574:	459c      	cmp	ip, r3
 801f576:	d8f9      	bhi.n	801f56c <__lshift+0xc0>
 801f578:	e7ea      	b.n	801f550 <__lshift+0xa4>
 801f57a:	bf00      	nop
 801f57c:	0802397b 	.word	0x0802397b
 801f580:	080239e4 	.word	0x080239e4

0801f584 <__mcmp>:
 801f584:	690a      	ldr	r2, [r1, #16]
 801f586:	4603      	mov	r3, r0
 801f588:	6900      	ldr	r0, [r0, #16]
 801f58a:	1a80      	subs	r0, r0, r2
 801f58c:	b530      	push	{r4, r5, lr}
 801f58e:	d10e      	bne.n	801f5ae <__mcmp+0x2a>
 801f590:	3314      	adds	r3, #20
 801f592:	3114      	adds	r1, #20
 801f594:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f598:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f59c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f5a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f5a4:	4295      	cmp	r5, r2
 801f5a6:	d003      	beq.n	801f5b0 <__mcmp+0x2c>
 801f5a8:	d205      	bcs.n	801f5b6 <__mcmp+0x32>
 801f5aa:	f04f 30ff 	mov.w	r0, #4294967295
 801f5ae:	bd30      	pop	{r4, r5, pc}
 801f5b0:	42a3      	cmp	r3, r4
 801f5b2:	d3f3      	bcc.n	801f59c <__mcmp+0x18>
 801f5b4:	e7fb      	b.n	801f5ae <__mcmp+0x2a>
 801f5b6:	2001      	movs	r0, #1
 801f5b8:	e7f9      	b.n	801f5ae <__mcmp+0x2a>
	...

0801f5bc <__mdiff>:
 801f5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c0:	4689      	mov	r9, r1
 801f5c2:	4606      	mov	r6, r0
 801f5c4:	4611      	mov	r1, r2
 801f5c6:	4648      	mov	r0, r9
 801f5c8:	4614      	mov	r4, r2
 801f5ca:	f7ff ffdb 	bl	801f584 <__mcmp>
 801f5ce:	1e05      	subs	r5, r0, #0
 801f5d0:	d112      	bne.n	801f5f8 <__mdiff+0x3c>
 801f5d2:	4629      	mov	r1, r5
 801f5d4:	4630      	mov	r0, r6
 801f5d6:	f7ff fda9 	bl	801f12c <_Balloc>
 801f5da:	4602      	mov	r2, r0
 801f5dc:	b928      	cbnz	r0, 801f5ea <__mdiff+0x2e>
 801f5de:	4b3f      	ldr	r3, [pc, #252]	@ (801f6dc <__mdiff+0x120>)
 801f5e0:	f240 2137 	movw	r1, #567	@ 0x237
 801f5e4:	483e      	ldr	r0, [pc, #248]	@ (801f6e0 <__mdiff+0x124>)
 801f5e6:	f000 fb21 	bl	801fc2c <__assert_func>
 801f5ea:	2301      	movs	r3, #1
 801f5ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f5f0:	4610      	mov	r0, r2
 801f5f2:	b003      	add	sp, #12
 801f5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f8:	bfbc      	itt	lt
 801f5fa:	464b      	movlt	r3, r9
 801f5fc:	46a1      	movlt	r9, r4
 801f5fe:	4630      	mov	r0, r6
 801f600:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f604:	bfba      	itte	lt
 801f606:	461c      	movlt	r4, r3
 801f608:	2501      	movlt	r5, #1
 801f60a:	2500      	movge	r5, #0
 801f60c:	f7ff fd8e 	bl	801f12c <_Balloc>
 801f610:	4602      	mov	r2, r0
 801f612:	b918      	cbnz	r0, 801f61c <__mdiff+0x60>
 801f614:	4b31      	ldr	r3, [pc, #196]	@ (801f6dc <__mdiff+0x120>)
 801f616:	f240 2145 	movw	r1, #581	@ 0x245
 801f61a:	e7e3      	b.n	801f5e4 <__mdiff+0x28>
 801f61c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f620:	6926      	ldr	r6, [r4, #16]
 801f622:	60c5      	str	r5, [r0, #12]
 801f624:	f109 0310 	add.w	r3, r9, #16
 801f628:	f109 0514 	add.w	r5, r9, #20
 801f62c:	f104 0e14 	add.w	lr, r4, #20
 801f630:	f100 0b14 	add.w	fp, r0, #20
 801f634:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f638:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f63c:	9301      	str	r3, [sp, #4]
 801f63e:	46d9      	mov	r9, fp
 801f640:	f04f 0c00 	mov.w	ip, #0
 801f644:	9b01      	ldr	r3, [sp, #4]
 801f646:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f64a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f64e:	9301      	str	r3, [sp, #4]
 801f650:	fa1f f38a 	uxth.w	r3, sl
 801f654:	4619      	mov	r1, r3
 801f656:	b283      	uxth	r3, r0
 801f658:	1acb      	subs	r3, r1, r3
 801f65a:	0c00      	lsrs	r0, r0, #16
 801f65c:	4463      	add	r3, ip
 801f65e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f662:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f666:	b29b      	uxth	r3, r3
 801f668:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f66c:	4576      	cmp	r6, lr
 801f66e:	f849 3b04 	str.w	r3, [r9], #4
 801f672:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f676:	d8e5      	bhi.n	801f644 <__mdiff+0x88>
 801f678:	1b33      	subs	r3, r6, r4
 801f67a:	3b15      	subs	r3, #21
 801f67c:	f023 0303 	bic.w	r3, r3, #3
 801f680:	3415      	adds	r4, #21
 801f682:	3304      	adds	r3, #4
 801f684:	42a6      	cmp	r6, r4
 801f686:	bf38      	it	cc
 801f688:	2304      	movcc	r3, #4
 801f68a:	441d      	add	r5, r3
 801f68c:	445b      	add	r3, fp
 801f68e:	461e      	mov	r6, r3
 801f690:	462c      	mov	r4, r5
 801f692:	4544      	cmp	r4, r8
 801f694:	d30e      	bcc.n	801f6b4 <__mdiff+0xf8>
 801f696:	f108 0103 	add.w	r1, r8, #3
 801f69a:	1b49      	subs	r1, r1, r5
 801f69c:	f021 0103 	bic.w	r1, r1, #3
 801f6a0:	3d03      	subs	r5, #3
 801f6a2:	45a8      	cmp	r8, r5
 801f6a4:	bf38      	it	cc
 801f6a6:	2100      	movcc	r1, #0
 801f6a8:	440b      	add	r3, r1
 801f6aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f6ae:	b191      	cbz	r1, 801f6d6 <__mdiff+0x11a>
 801f6b0:	6117      	str	r7, [r2, #16]
 801f6b2:	e79d      	b.n	801f5f0 <__mdiff+0x34>
 801f6b4:	f854 1b04 	ldr.w	r1, [r4], #4
 801f6b8:	46e6      	mov	lr, ip
 801f6ba:	0c08      	lsrs	r0, r1, #16
 801f6bc:	fa1c fc81 	uxtah	ip, ip, r1
 801f6c0:	4471      	add	r1, lr
 801f6c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f6c6:	b289      	uxth	r1, r1
 801f6c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f6cc:	f846 1b04 	str.w	r1, [r6], #4
 801f6d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f6d4:	e7dd      	b.n	801f692 <__mdiff+0xd6>
 801f6d6:	3f01      	subs	r7, #1
 801f6d8:	e7e7      	b.n	801f6aa <__mdiff+0xee>
 801f6da:	bf00      	nop
 801f6dc:	0802397b 	.word	0x0802397b
 801f6e0:	080239e4 	.word	0x080239e4

0801f6e4 <__d2b>:
 801f6e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f6e8:	460f      	mov	r7, r1
 801f6ea:	2101      	movs	r1, #1
 801f6ec:	ec59 8b10 	vmov	r8, r9, d0
 801f6f0:	4616      	mov	r6, r2
 801f6f2:	f7ff fd1b 	bl	801f12c <_Balloc>
 801f6f6:	4604      	mov	r4, r0
 801f6f8:	b930      	cbnz	r0, 801f708 <__d2b+0x24>
 801f6fa:	4602      	mov	r2, r0
 801f6fc:	4b23      	ldr	r3, [pc, #140]	@ (801f78c <__d2b+0xa8>)
 801f6fe:	4824      	ldr	r0, [pc, #144]	@ (801f790 <__d2b+0xac>)
 801f700:	f240 310f 	movw	r1, #783	@ 0x30f
 801f704:	f000 fa92 	bl	801fc2c <__assert_func>
 801f708:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f70c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f710:	b10d      	cbz	r5, 801f716 <__d2b+0x32>
 801f712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f716:	9301      	str	r3, [sp, #4]
 801f718:	f1b8 0300 	subs.w	r3, r8, #0
 801f71c:	d023      	beq.n	801f766 <__d2b+0x82>
 801f71e:	4668      	mov	r0, sp
 801f720:	9300      	str	r3, [sp, #0]
 801f722:	f7ff fd96 	bl	801f252 <__lo0bits>
 801f726:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f72a:	b1d0      	cbz	r0, 801f762 <__d2b+0x7e>
 801f72c:	f1c0 0320 	rsb	r3, r0, #32
 801f730:	fa02 f303 	lsl.w	r3, r2, r3
 801f734:	430b      	orrs	r3, r1
 801f736:	40c2      	lsrs	r2, r0
 801f738:	6163      	str	r3, [r4, #20]
 801f73a:	9201      	str	r2, [sp, #4]
 801f73c:	9b01      	ldr	r3, [sp, #4]
 801f73e:	61a3      	str	r3, [r4, #24]
 801f740:	2b00      	cmp	r3, #0
 801f742:	bf0c      	ite	eq
 801f744:	2201      	moveq	r2, #1
 801f746:	2202      	movne	r2, #2
 801f748:	6122      	str	r2, [r4, #16]
 801f74a:	b1a5      	cbz	r5, 801f776 <__d2b+0x92>
 801f74c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f750:	4405      	add	r5, r0
 801f752:	603d      	str	r5, [r7, #0]
 801f754:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f758:	6030      	str	r0, [r6, #0]
 801f75a:	4620      	mov	r0, r4
 801f75c:	b003      	add	sp, #12
 801f75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f762:	6161      	str	r1, [r4, #20]
 801f764:	e7ea      	b.n	801f73c <__d2b+0x58>
 801f766:	a801      	add	r0, sp, #4
 801f768:	f7ff fd73 	bl	801f252 <__lo0bits>
 801f76c:	9b01      	ldr	r3, [sp, #4]
 801f76e:	6163      	str	r3, [r4, #20]
 801f770:	3020      	adds	r0, #32
 801f772:	2201      	movs	r2, #1
 801f774:	e7e8      	b.n	801f748 <__d2b+0x64>
 801f776:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f77a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f77e:	6038      	str	r0, [r7, #0]
 801f780:	6918      	ldr	r0, [r3, #16]
 801f782:	f7ff fd47 	bl	801f214 <__hi0bits>
 801f786:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f78a:	e7e5      	b.n	801f758 <__d2b+0x74>
 801f78c:	0802397b 	.word	0x0802397b
 801f790:	080239e4 	.word	0x080239e4

0801f794 <_realloc_r>:
 801f794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f798:	4682      	mov	sl, r0
 801f79a:	4693      	mov	fp, r2
 801f79c:	460c      	mov	r4, r1
 801f79e:	b929      	cbnz	r1, 801f7ac <_realloc_r+0x18>
 801f7a0:	4611      	mov	r1, r2
 801f7a2:	b003      	add	sp, #12
 801f7a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a8:	f7fd b890 	b.w	801c8cc <_malloc_r>
 801f7ac:	f7fd fac8 	bl	801cd40 <__malloc_lock>
 801f7b0:	f10b 080b 	add.w	r8, fp, #11
 801f7b4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801f7b8:	f1b8 0f16 	cmp.w	r8, #22
 801f7bc:	f1a4 0908 	sub.w	r9, r4, #8
 801f7c0:	f025 0603 	bic.w	r6, r5, #3
 801f7c4:	d908      	bls.n	801f7d8 <_realloc_r+0x44>
 801f7c6:	f038 0807 	bics.w	r8, r8, #7
 801f7ca:	d507      	bpl.n	801f7dc <_realloc_r+0x48>
 801f7cc:	230c      	movs	r3, #12
 801f7ce:	f8ca 3000 	str.w	r3, [sl]
 801f7d2:	f04f 0b00 	mov.w	fp, #0
 801f7d6:	e032      	b.n	801f83e <_realloc_r+0xaa>
 801f7d8:	f04f 0810 	mov.w	r8, #16
 801f7dc:	45c3      	cmp	fp, r8
 801f7de:	d8f5      	bhi.n	801f7cc <_realloc_r+0x38>
 801f7e0:	4546      	cmp	r6, r8
 801f7e2:	f280 8174 	bge.w	801face <_realloc_r+0x33a>
 801f7e6:	4b9e      	ldr	r3, [pc, #632]	@ (801fa60 <_realloc_r+0x2cc>)
 801f7e8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801f7ec:	eb09 0106 	add.w	r1, r9, r6
 801f7f0:	458c      	cmp	ip, r1
 801f7f2:	6848      	ldr	r0, [r1, #4]
 801f7f4:	d005      	beq.n	801f802 <_realloc_r+0x6e>
 801f7f6:	f020 0201 	bic.w	r2, r0, #1
 801f7fa:	440a      	add	r2, r1
 801f7fc:	6852      	ldr	r2, [r2, #4]
 801f7fe:	07d7      	lsls	r7, r2, #31
 801f800:	d449      	bmi.n	801f896 <_realloc_r+0x102>
 801f802:	f020 0003 	bic.w	r0, r0, #3
 801f806:	458c      	cmp	ip, r1
 801f808:	eb06 0700 	add.w	r7, r6, r0
 801f80c:	d11b      	bne.n	801f846 <_realloc_r+0xb2>
 801f80e:	f108 0210 	add.w	r2, r8, #16
 801f812:	42ba      	cmp	r2, r7
 801f814:	dc41      	bgt.n	801f89a <_realloc_r+0x106>
 801f816:	eb09 0208 	add.w	r2, r9, r8
 801f81a:	eba7 0708 	sub.w	r7, r7, r8
 801f81e:	f047 0701 	orr.w	r7, r7, #1
 801f822:	609a      	str	r2, [r3, #8]
 801f824:	6057      	str	r7, [r2, #4]
 801f826:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f82a:	f003 0301 	and.w	r3, r3, #1
 801f82e:	ea43 0308 	orr.w	r3, r3, r8
 801f832:	f844 3c04 	str.w	r3, [r4, #-4]
 801f836:	4650      	mov	r0, sl
 801f838:	f7fd fa88 	bl	801cd4c <__malloc_unlock>
 801f83c:	46a3      	mov	fp, r4
 801f83e:	4658      	mov	r0, fp
 801f840:	b003      	add	sp, #12
 801f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f846:	45b8      	cmp	r8, r7
 801f848:	dc27      	bgt.n	801f89a <_realloc_r+0x106>
 801f84a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801f84e:	60d3      	str	r3, [r2, #12]
 801f850:	609a      	str	r2, [r3, #8]
 801f852:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f856:	eba7 0008 	sub.w	r0, r7, r8
 801f85a:	280f      	cmp	r0, #15
 801f85c:	f003 0301 	and.w	r3, r3, #1
 801f860:	eb09 0207 	add.w	r2, r9, r7
 801f864:	f240 8135 	bls.w	801fad2 <_realloc_r+0x33e>
 801f868:	eb09 0108 	add.w	r1, r9, r8
 801f86c:	ea48 0303 	orr.w	r3, r8, r3
 801f870:	f040 0001 	orr.w	r0, r0, #1
 801f874:	f8c9 3004 	str.w	r3, [r9, #4]
 801f878:	6048      	str	r0, [r1, #4]
 801f87a:	6853      	ldr	r3, [r2, #4]
 801f87c:	f043 0301 	orr.w	r3, r3, #1
 801f880:	6053      	str	r3, [r2, #4]
 801f882:	3108      	adds	r1, #8
 801f884:	4650      	mov	r0, sl
 801f886:	f7fc ff61 	bl	801c74c <_free_r>
 801f88a:	4650      	mov	r0, sl
 801f88c:	f7fd fa5e 	bl	801cd4c <__malloc_unlock>
 801f890:	f109 0b08 	add.w	fp, r9, #8
 801f894:	e7d3      	b.n	801f83e <_realloc_r+0xaa>
 801f896:	2000      	movs	r0, #0
 801f898:	4601      	mov	r1, r0
 801f89a:	07ea      	lsls	r2, r5, #31
 801f89c:	f100 80c7 	bmi.w	801fa2e <_realloc_r+0x29a>
 801f8a0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801f8a4:	eba9 0505 	sub.w	r5, r9, r5
 801f8a8:	686a      	ldr	r2, [r5, #4]
 801f8aa:	f022 0203 	bic.w	r2, r2, #3
 801f8ae:	4432      	add	r2, r6
 801f8b0:	9201      	str	r2, [sp, #4]
 801f8b2:	2900      	cmp	r1, #0
 801f8b4:	f000 8086 	beq.w	801f9c4 <_realloc_r+0x230>
 801f8b8:	458c      	cmp	ip, r1
 801f8ba:	eb00 0702 	add.w	r7, r0, r2
 801f8be:	d149      	bne.n	801f954 <_realloc_r+0x1c0>
 801f8c0:	f108 0210 	add.w	r2, r8, #16
 801f8c4:	42ba      	cmp	r2, r7
 801f8c6:	dc7d      	bgt.n	801f9c4 <_realloc_r+0x230>
 801f8c8:	46ab      	mov	fp, r5
 801f8ca:	68ea      	ldr	r2, [r5, #12]
 801f8cc:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 801f8d0:	60ca      	str	r2, [r1, #12]
 801f8d2:	6091      	str	r1, [r2, #8]
 801f8d4:	1f32      	subs	r2, r6, #4
 801f8d6:	2a24      	cmp	r2, #36	@ 0x24
 801f8d8:	d836      	bhi.n	801f948 <_realloc_r+0x1b4>
 801f8da:	2a13      	cmp	r2, #19
 801f8dc:	d932      	bls.n	801f944 <_realloc_r+0x1b0>
 801f8de:	6821      	ldr	r1, [r4, #0]
 801f8e0:	60a9      	str	r1, [r5, #8]
 801f8e2:	6861      	ldr	r1, [r4, #4]
 801f8e4:	60e9      	str	r1, [r5, #12]
 801f8e6:	2a1b      	cmp	r2, #27
 801f8e8:	d81a      	bhi.n	801f920 <_realloc_r+0x18c>
 801f8ea:	3408      	adds	r4, #8
 801f8ec:	f105 0210 	add.w	r2, r5, #16
 801f8f0:	6821      	ldr	r1, [r4, #0]
 801f8f2:	6011      	str	r1, [r2, #0]
 801f8f4:	6861      	ldr	r1, [r4, #4]
 801f8f6:	6051      	str	r1, [r2, #4]
 801f8f8:	68a1      	ldr	r1, [r4, #8]
 801f8fa:	6091      	str	r1, [r2, #8]
 801f8fc:	eb05 0208 	add.w	r2, r5, r8
 801f900:	eba7 0708 	sub.w	r7, r7, r8
 801f904:	f047 0701 	orr.w	r7, r7, #1
 801f908:	609a      	str	r2, [r3, #8]
 801f90a:	6057      	str	r7, [r2, #4]
 801f90c:	686b      	ldr	r3, [r5, #4]
 801f90e:	f003 0301 	and.w	r3, r3, #1
 801f912:	ea43 0308 	orr.w	r3, r3, r8
 801f916:	606b      	str	r3, [r5, #4]
 801f918:	4650      	mov	r0, sl
 801f91a:	f7fd fa17 	bl	801cd4c <__malloc_unlock>
 801f91e:	e78e      	b.n	801f83e <_realloc_r+0xaa>
 801f920:	68a1      	ldr	r1, [r4, #8]
 801f922:	6129      	str	r1, [r5, #16]
 801f924:	68e1      	ldr	r1, [r4, #12]
 801f926:	6169      	str	r1, [r5, #20]
 801f928:	2a24      	cmp	r2, #36	@ 0x24
 801f92a:	bf01      	itttt	eq
 801f92c:	6922      	ldreq	r2, [r4, #16]
 801f92e:	61aa      	streq	r2, [r5, #24]
 801f930:	6961      	ldreq	r1, [r4, #20]
 801f932:	61e9      	streq	r1, [r5, #28]
 801f934:	bf19      	ittee	ne
 801f936:	3410      	addne	r4, #16
 801f938:	f105 0218 	addne.w	r2, r5, #24
 801f93c:	f105 0220 	addeq.w	r2, r5, #32
 801f940:	3418      	addeq	r4, #24
 801f942:	e7d5      	b.n	801f8f0 <_realloc_r+0x15c>
 801f944:	465a      	mov	r2, fp
 801f946:	e7d3      	b.n	801f8f0 <_realloc_r+0x15c>
 801f948:	4621      	mov	r1, r4
 801f94a:	4658      	mov	r0, fp
 801f94c:	f000 f954 	bl	801fbf8 <memmove>
 801f950:	4b43      	ldr	r3, [pc, #268]	@ (801fa60 <_realloc_r+0x2cc>)
 801f952:	e7d3      	b.n	801f8fc <_realloc_r+0x168>
 801f954:	45b8      	cmp	r8, r7
 801f956:	dc35      	bgt.n	801f9c4 <_realloc_r+0x230>
 801f958:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801f95c:	4628      	mov	r0, r5
 801f95e:	60d3      	str	r3, [r2, #12]
 801f960:	609a      	str	r2, [r3, #8]
 801f962:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801f966:	68eb      	ldr	r3, [r5, #12]
 801f968:	60d3      	str	r3, [r2, #12]
 801f96a:	609a      	str	r2, [r3, #8]
 801f96c:	1f32      	subs	r2, r6, #4
 801f96e:	2a24      	cmp	r2, #36	@ 0x24
 801f970:	d824      	bhi.n	801f9bc <_realloc_r+0x228>
 801f972:	2a13      	cmp	r2, #19
 801f974:	d908      	bls.n	801f988 <_realloc_r+0x1f4>
 801f976:	6823      	ldr	r3, [r4, #0]
 801f978:	60ab      	str	r3, [r5, #8]
 801f97a:	6863      	ldr	r3, [r4, #4]
 801f97c:	60eb      	str	r3, [r5, #12]
 801f97e:	2a1b      	cmp	r2, #27
 801f980:	d80a      	bhi.n	801f998 <_realloc_r+0x204>
 801f982:	3408      	adds	r4, #8
 801f984:	f105 0010 	add.w	r0, r5, #16
 801f988:	6823      	ldr	r3, [r4, #0]
 801f98a:	6003      	str	r3, [r0, #0]
 801f98c:	6863      	ldr	r3, [r4, #4]
 801f98e:	6043      	str	r3, [r0, #4]
 801f990:	68a3      	ldr	r3, [r4, #8]
 801f992:	6083      	str	r3, [r0, #8]
 801f994:	46a9      	mov	r9, r5
 801f996:	e75c      	b.n	801f852 <_realloc_r+0xbe>
 801f998:	68a3      	ldr	r3, [r4, #8]
 801f99a:	612b      	str	r3, [r5, #16]
 801f99c:	68e3      	ldr	r3, [r4, #12]
 801f99e:	616b      	str	r3, [r5, #20]
 801f9a0:	2a24      	cmp	r2, #36	@ 0x24
 801f9a2:	bf01      	itttt	eq
 801f9a4:	6923      	ldreq	r3, [r4, #16]
 801f9a6:	61ab      	streq	r3, [r5, #24]
 801f9a8:	6963      	ldreq	r3, [r4, #20]
 801f9aa:	61eb      	streq	r3, [r5, #28]
 801f9ac:	bf19      	ittee	ne
 801f9ae:	3410      	addne	r4, #16
 801f9b0:	f105 0018 	addne.w	r0, r5, #24
 801f9b4:	f105 0020 	addeq.w	r0, r5, #32
 801f9b8:	3418      	addeq	r4, #24
 801f9ba:	e7e5      	b.n	801f988 <_realloc_r+0x1f4>
 801f9bc:	4621      	mov	r1, r4
 801f9be:	f000 f91b 	bl	801fbf8 <memmove>
 801f9c2:	e7e7      	b.n	801f994 <_realloc_r+0x200>
 801f9c4:	9b01      	ldr	r3, [sp, #4]
 801f9c6:	4598      	cmp	r8, r3
 801f9c8:	dc31      	bgt.n	801fa2e <_realloc_r+0x29a>
 801f9ca:	4628      	mov	r0, r5
 801f9cc:	68eb      	ldr	r3, [r5, #12]
 801f9ce:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801f9d2:	60d3      	str	r3, [r2, #12]
 801f9d4:	609a      	str	r2, [r3, #8]
 801f9d6:	1f32      	subs	r2, r6, #4
 801f9d8:	2a24      	cmp	r2, #36	@ 0x24
 801f9da:	d824      	bhi.n	801fa26 <_realloc_r+0x292>
 801f9dc:	2a13      	cmp	r2, #19
 801f9de:	d908      	bls.n	801f9f2 <_realloc_r+0x25e>
 801f9e0:	6823      	ldr	r3, [r4, #0]
 801f9e2:	60ab      	str	r3, [r5, #8]
 801f9e4:	6863      	ldr	r3, [r4, #4]
 801f9e6:	60eb      	str	r3, [r5, #12]
 801f9e8:	2a1b      	cmp	r2, #27
 801f9ea:	d80a      	bhi.n	801fa02 <_realloc_r+0x26e>
 801f9ec:	3408      	adds	r4, #8
 801f9ee:	f105 0010 	add.w	r0, r5, #16
 801f9f2:	6823      	ldr	r3, [r4, #0]
 801f9f4:	6003      	str	r3, [r0, #0]
 801f9f6:	6863      	ldr	r3, [r4, #4]
 801f9f8:	6043      	str	r3, [r0, #4]
 801f9fa:	68a3      	ldr	r3, [r4, #8]
 801f9fc:	6083      	str	r3, [r0, #8]
 801f9fe:	9f01      	ldr	r7, [sp, #4]
 801fa00:	e7c8      	b.n	801f994 <_realloc_r+0x200>
 801fa02:	68a3      	ldr	r3, [r4, #8]
 801fa04:	612b      	str	r3, [r5, #16]
 801fa06:	68e3      	ldr	r3, [r4, #12]
 801fa08:	616b      	str	r3, [r5, #20]
 801fa0a:	2a24      	cmp	r2, #36	@ 0x24
 801fa0c:	bf01      	itttt	eq
 801fa0e:	6923      	ldreq	r3, [r4, #16]
 801fa10:	61ab      	streq	r3, [r5, #24]
 801fa12:	6963      	ldreq	r3, [r4, #20]
 801fa14:	61eb      	streq	r3, [r5, #28]
 801fa16:	bf19      	ittee	ne
 801fa18:	3410      	addne	r4, #16
 801fa1a:	f105 0018 	addne.w	r0, r5, #24
 801fa1e:	f105 0020 	addeq.w	r0, r5, #32
 801fa22:	3418      	addeq	r4, #24
 801fa24:	e7e5      	b.n	801f9f2 <_realloc_r+0x25e>
 801fa26:	4621      	mov	r1, r4
 801fa28:	f000 f8e6 	bl	801fbf8 <memmove>
 801fa2c:	e7e7      	b.n	801f9fe <_realloc_r+0x26a>
 801fa2e:	4659      	mov	r1, fp
 801fa30:	4650      	mov	r0, sl
 801fa32:	f7fc ff4b 	bl	801c8cc <_malloc_r>
 801fa36:	4683      	mov	fp, r0
 801fa38:	b918      	cbnz	r0, 801fa42 <_realloc_r+0x2ae>
 801fa3a:	4650      	mov	r0, sl
 801fa3c:	f7fd f986 	bl	801cd4c <__malloc_unlock>
 801fa40:	e6c7      	b.n	801f7d2 <_realloc_r+0x3e>
 801fa42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fa46:	f023 0301 	bic.w	r3, r3, #1
 801fa4a:	444b      	add	r3, r9
 801fa4c:	f1a0 0208 	sub.w	r2, r0, #8
 801fa50:	4293      	cmp	r3, r2
 801fa52:	d107      	bne.n	801fa64 <_realloc_r+0x2d0>
 801fa54:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801fa58:	f027 0703 	bic.w	r7, r7, #3
 801fa5c:	4437      	add	r7, r6
 801fa5e:	e6f8      	b.n	801f852 <_realloc_r+0xbe>
 801fa60:	20000284 	.word	0x20000284
 801fa64:	1f32      	subs	r2, r6, #4
 801fa66:	2a24      	cmp	r2, #36	@ 0x24
 801fa68:	d82d      	bhi.n	801fac6 <_realloc_r+0x332>
 801fa6a:	2a13      	cmp	r2, #19
 801fa6c:	d928      	bls.n	801fac0 <_realloc_r+0x32c>
 801fa6e:	6823      	ldr	r3, [r4, #0]
 801fa70:	6003      	str	r3, [r0, #0]
 801fa72:	6863      	ldr	r3, [r4, #4]
 801fa74:	6043      	str	r3, [r0, #4]
 801fa76:	2a1b      	cmp	r2, #27
 801fa78:	d80e      	bhi.n	801fa98 <_realloc_r+0x304>
 801fa7a:	f104 0208 	add.w	r2, r4, #8
 801fa7e:	f100 0308 	add.w	r3, r0, #8
 801fa82:	6811      	ldr	r1, [r2, #0]
 801fa84:	6019      	str	r1, [r3, #0]
 801fa86:	6851      	ldr	r1, [r2, #4]
 801fa88:	6059      	str	r1, [r3, #4]
 801fa8a:	6892      	ldr	r2, [r2, #8]
 801fa8c:	609a      	str	r2, [r3, #8]
 801fa8e:	4621      	mov	r1, r4
 801fa90:	4650      	mov	r0, sl
 801fa92:	f7fc fe5b 	bl	801c74c <_free_r>
 801fa96:	e73f      	b.n	801f918 <_realloc_r+0x184>
 801fa98:	68a3      	ldr	r3, [r4, #8]
 801fa9a:	6083      	str	r3, [r0, #8]
 801fa9c:	68e3      	ldr	r3, [r4, #12]
 801fa9e:	60c3      	str	r3, [r0, #12]
 801faa0:	2a24      	cmp	r2, #36	@ 0x24
 801faa2:	bf01      	itttt	eq
 801faa4:	6923      	ldreq	r3, [r4, #16]
 801faa6:	6103      	streq	r3, [r0, #16]
 801faa8:	6961      	ldreq	r1, [r4, #20]
 801faaa:	6141      	streq	r1, [r0, #20]
 801faac:	bf19      	ittee	ne
 801faae:	f104 0210 	addne.w	r2, r4, #16
 801fab2:	f100 0310 	addne.w	r3, r0, #16
 801fab6:	f104 0218 	addeq.w	r2, r4, #24
 801faba:	f100 0318 	addeq.w	r3, r0, #24
 801fabe:	e7e0      	b.n	801fa82 <_realloc_r+0x2ee>
 801fac0:	4603      	mov	r3, r0
 801fac2:	4622      	mov	r2, r4
 801fac4:	e7dd      	b.n	801fa82 <_realloc_r+0x2ee>
 801fac6:	4621      	mov	r1, r4
 801fac8:	f000 f896 	bl	801fbf8 <memmove>
 801facc:	e7df      	b.n	801fa8e <_realloc_r+0x2fa>
 801face:	4637      	mov	r7, r6
 801fad0:	e6bf      	b.n	801f852 <_realloc_r+0xbe>
 801fad2:	431f      	orrs	r7, r3
 801fad4:	f8c9 7004 	str.w	r7, [r9, #4]
 801fad8:	6853      	ldr	r3, [r2, #4]
 801fada:	f043 0301 	orr.w	r3, r3, #1
 801fade:	6053      	str	r3, [r2, #4]
 801fae0:	e6d3      	b.n	801f88a <_realloc_r+0xf6>
 801fae2:	bf00      	nop

0801fae4 <__ascii_wctomb>:
 801fae4:	4603      	mov	r3, r0
 801fae6:	4608      	mov	r0, r1
 801fae8:	b141      	cbz	r1, 801fafc <__ascii_wctomb+0x18>
 801faea:	2aff      	cmp	r2, #255	@ 0xff
 801faec:	d904      	bls.n	801faf8 <__ascii_wctomb+0x14>
 801faee:	228a      	movs	r2, #138	@ 0x8a
 801faf0:	601a      	str	r2, [r3, #0]
 801faf2:	f04f 30ff 	mov.w	r0, #4294967295
 801faf6:	4770      	bx	lr
 801faf8:	700a      	strb	r2, [r1, #0]
 801fafa:	2001      	movs	r0, #1
 801fafc:	4770      	bx	lr

0801fafe <__ssprint_r>:
 801fafe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb02:	6893      	ldr	r3, [r2, #8]
 801fb04:	f8d2 b000 	ldr.w	fp, [r2]
 801fb08:	9001      	str	r0, [sp, #4]
 801fb0a:	460c      	mov	r4, r1
 801fb0c:	4617      	mov	r7, r2
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	d157      	bne.n	801fbc2 <__ssprint_r+0xc4>
 801fb12:	2000      	movs	r0, #0
 801fb14:	2300      	movs	r3, #0
 801fb16:	607b      	str	r3, [r7, #4]
 801fb18:	b003      	add	sp, #12
 801fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb1e:	e9db a800 	ldrd	sl, r8, [fp]
 801fb22:	f10b 0b08 	add.w	fp, fp, #8
 801fb26:	68a6      	ldr	r6, [r4, #8]
 801fb28:	6820      	ldr	r0, [r4, #0]
 801fb2a:	f1b8 0f00 	cmp.w	r8, #0
 801fb2e:	d0f6      	beq.n	801fb1e <__ssprint_r+0x20>
 801fb30:	45b0      	cmp	r8, r6
 801fb32:	d32e      	bcc.n	801fb92 <__ssprint_r+0x94>
 801fb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801fb3c:	d029      	beq.n	801fb92 <__ssprint_r+0x94>
 801fb3e:	6921      	ldr	r1, [r4, #16]
 801fb40:	6965      	ldr	r5, [r4, #20]
 801fb42:	eba0 0901 	sub.w	r9, r0, r1
 801fb46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fb4e:	f109 0001 	add.w	r0, r9, #1
 801fb52:	106d      	asrs	r5, r5, #1
 801fb54:	4440      	add	r0, r8
 801fb56:	4285      	cmp	r5, r0
 801fb58:	bf38      	it	cc
 801fb5a:	4605      	movcc	r5, r0
 801fb5c:	0553      	lsls	r3, r2, #21
 801fb5e:	d534      	bpl.n	801fbca <__ssprint_r+0xcc>
 801fb60:	9801      	ldr	r0, [sp, #4]
 801fb62:	4629      	mov	r1, r5
 801fb64:	f7fc feb2 	bl	801c8cc <_malloc_r>
 801fb68:	4606      	mov	r6, r0
 801fb6a:	2800      	cmp	r0, #0
 801fb6c:	d038      	beq.n	801fbe0 <__ssprint_r+0xe2>
 801fb6e:	464a      	mov	r2, r9
 801fb70:	6921      	ldr	r1, [r4, #16]
 801fb72:	f7fc fd77 	bl	801c664 <memcpy>
 801fb76:	89a2      	ldrh	r2, [r4, #12]
 801fb78:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801fb7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801fb80:	81a2      	strh	r2, [r4, #12]
 801fb82:	6126      	str	r6, [r4, #16]
 801fb84:	6165      	str	r5, [r4, #20]
 801fb86:	444e      	add	r6, r9
 801fb88:	eba5 0509 	sub.w	r5, r5, r9
 801fb8c:	6026      	str	r6, [r4, #0]
 801fb8e:	60a5      	str	r5, [r4, #8]
 801fb90:	4646      	mov	r6, r8
 801fb92:	4546      	cmp	r6, r8
 801fb94:	bf28      	it	cs
 801fb96:	4646      	movcs	r6, r8
 801fb98:	4632      	mov	r2, r6
 801fb9a:	4651      	mov	r1, sl
 801fb9c:	6820      	ldr	r0, [r4, #0]
 801fb9e:	f000 f82b 	bl	801fbf8 <memmove>
 801fba2:	68a2      	ldr	r2, [r4, #8]
 801fba4:	1b92      	subs	r2, r2, r6
 801fba6:	60a2      	str	r2, [r4, #8]
 801fba8:	6822      	ldr	r2, [r4, #0]
 801fbaa:	4432      	add	r2, r6
 801fbac:	6022      	str	r2, [r4, #0]
 801fbae:	68ba      	ldr	r2, [r7, #8]
 801fbb0:	eba2 0308 	sub.w	r3, r2, r8
 801fbb4:	44c2      	add	sl, r8
 801fbb6:	60bb      	str	r3, [r7, #8]
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d0aa      	beq.n	801fb12 <__ssprint_r+0x14>
 801fbbc:	f04f 0800 	mov.w	r8, #0
 801fbc0:	e7b1      	b.n	801fb26 <__ssprint_r+0x28>
 801fbc2:	f04f 0a00 	mov.w	sl, #0
 801fbc6:	46d0      	mov	r8, sl
 801fbc8:	e7ad      	b.n	801fb26 <__ssprint_r+0x28>
 801fbca:	9801      	ldr	r0, [sp, #4]
 801fbcc:	462a      	mov	r2, r5
 801fbce:	f7ff fde1 	bl	801f794 <_realloc_r>
 801fbd2:	4606      	mov	r6, r0
 801fbd4:	2800      	cmp	r0, #0
 801fbd6:	d1d4      	bne.n	801fb82 <__ssprint_r+0x84>
 801fbd8:	6921      	ldr	r1, [r4, #16]
 801fbda:	9801      	ldr	r0, [sp, #4]
 801fbdc:	f7fc fdb6 	bl	801c74c <_free_r>
 801fbe0:	9a01      	ldr	r2, [sp, #4]
 801fbe2:	230c      	movs	r3, #12
 801fbe4:	6013      	str	r3, [r2, #0]
 801fbe6:	89a3      	ldrh	r3, [r4, #12]
 801fbe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fbec:	81a3      	strh	r3, [r4, #12]
 801fbee:	2300      	movs	r3, #0
 801fbf0:	60bb      	str	r3, [r7, #8]
 801fbf2:	f04f 30ff 	mov.w	r0, #4294967295
 801fbf6:	e78d      	b.n	801fb14 <__ssprint_r+0x16>

0801fbf8 <memmove>:
 801fbf8:	4288      	cmp	r0, r1
 801fbfa:	b510      	push	{r4, lr}
 801fbfc:	eb01 0402 	add.w	r4, r1, r2
 801fc00:	d902      	bls.n	801fc08 <memmove+0x10>
 801fc02:	4284      	cmp	r4, r0
 801fc04:	4623      	mov	r3, r4
 801fc06:	d807      	bhi.n	801fc18 <memmove+0x20>
 801fc08:	1e43      	subs	r3, r0, #1
 801fc0a:	42a1      	cmp	r1, r4
 801fc0c:	d008      	beq.n	801fc20 <memmove+0x28>
 801fc0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fc12:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fc16:	e7f8      	b.n	801fc0a <memmove+0x12>
 801fc18:	4402      	add	r2, r0
 801fc1a:	4601      	mov	r1, r0
 801fc1c:	428a      	cmp	r2, r1
 801fc1e:	d100      	bne.n	801fc22 <memmove+0x2a>
 801fc20:	bd10      	pop	{r4, pc}
 801fc22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fc26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fc2a:	e7f7      	b.n	801fc1c <memmove+0x24>

0801fc2c <__assert_func>:
 801fc2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fc2e:	4614      	mov	r4, r2
 801fc30:	461a      	mov	r2, r3
 801fc32:	4b09      	ldr	r3, [pc, #36]	@ (801fc58 <__assert_func+0x2c>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	4605      	mov	r5, r0
 801fc38:	68d8      	ldr	r0, [r3, #12]
 801fc3a:	b954      	cbnz	r4, 801fc52 <__assert_func+0x26>
 801fc3c:	4b07      	ldr	r3, [pc, #28]	@ (801fc5c <__assert_func+0x30>)
 801fc3e:	461c      	mov	r4, r3
 801fc40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fc44:	9100      	str	r1, [sp, #0]
 801fc46:	462b      	mov	r3, r5
 801fc48:	4905      	ldr	r1, [pc, #20]	@ (801fc60 <__assert_func+0x34>)
 801fc4a:	f000 f843 	bl	801fcd4 <fiprintf>
 801fc4e:	f000 ff59 	bl	8020b04 <abort>
 801fc52:	4b04      	ldr	r3, [pc, #16]	@ (801fc64 <__assert_func+0x38>)
 801fc54:	e7f4      	b.n	801fc40 <__assert_func+0x14>
 801fc56:	bf00      	nop
 801fc58:	20000150 	.word	0x20000150
 801fc5c:	08023c7c 	.word	0x08023c7c
 801fc60:	08023c4e 	.word	0x08023c4e
 801fc64:	08023c41 	.word	0x08023c41

0801fc68 <_calloc_r>:
 801fc68:	b538      	push	{r3, r4, r5, lr}
 801fc6a:	fba1 1502 	umull	r1, r5, r1, r2
 801fc6e:	b935      	cbnz	r5, 801fc7e <_calloc_r+0x16>
 801fc70:	f7fc fe2c 	bl	801c8cc <_malloc_r>
 801fc74:	4604      	mov	r4, r0
 801fc76:	b938      	cbnz	r0, 801fc88 <_calloc_r+0x20>
 801fc78:	2400      	movs	r4, #0
 801fc7a:	4620      	mov	r0, r4
 801fc7c:	bd38      	pop	{r3, r4, r5, pc}
 801fc7e:	f7fc fcc3 	bl	801c608 <__errno>
 801fc82:	230c      	movs	r3, #12
 801fc84:	6003      	str	r3, [r0, #0]
 801fc86:	e7f7      	b.n	801fc78 <_calloc_r+0x10>
 801fc88:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801fc8c:	f022 0203 	bic.w	r2, r2, #3
 801fc90:	3a04      	subs	r2, #4
 801fc92:	2a24      	cmp	r2, #36	@ 0x24
 801fc94:	d819      	bhi.n	801fcca <_calloc_r+0x62>
 801fc96:	2a13      	cmp	r2, #19
 801fc98:	d915      	bls.n	801fcc6 <_calloc_r+0x5e>
 801fc9a:	2a1b      	cmp	r2, #27
 801fc9c:	e9c0 5500 	strd	r5, r5, [r0]
 801fca0:	d806      	bhi.n	801fcb0 <_calloc_r+0x48>
 801fca2:	f100 0308 	add.w	r3, r0, #8
 801fca6:	2200      	movs	r2, #0
 801fca8:	e9c3 2200 	strd	r2, r2, [r3]
 801fcac:	609a      	str	r2, [r3, #8]
 801fcae:	e7e4      	b.n	801fc7a <_calloc_r+0x12>
 801fcb0:	2a24      	cmp	r2, #36	@ 0x24
 801fcb2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801fcb6:	bf11      	iteee	ne
 801fcb8:	f100 0310 	addne.w	r3, r0, #16
 801fcbc:	6105      	streq	r5, [r0, #16]
 801fcbe:	f100 0318 	addeq.w	r3, r0, #24
 801fcc2:	6145      	streq	r5, [r0, #20]
 801fcc4:	e7ef      	b.n	801fca6 <_calloc_r+0x3e>
 801fcc6:	4603      	mov	r3, r0
 801fcc8:	e7ed      	b.n	801fca6 <_calloc_r+0x3e>
 801fcca:	4629      	mov	r1, r5
 801fccc:	f7fc fc21 	bl	801c512 <memset>
 801fcd0:	e7d3      	b.n	801fc7a <_calloc_r+0x12>
	...

0801fcd4 <fiprintf>:
 801fcd4:	b40e      	push	{r1, r2, r3}
 801fcd6:	b503      	push	{r0, r1, lr}
 801fcd8:	4601      	mov	r1, r0
 801fcda:	ab03      	add	r3, sp, #12
 801fcdc:	4805      	ldr	r0, [pc, #20]	@ (801fcf4 <fiprintf+0x20>)
 801fcde:	f853 2b04 	ldr.w	r2, [r3], #4
 801fce2:	6800      	ldr	r0, [r0, #0]
 801fce4:	9301      	str	r3, [sp, #4]
 801fce6:	f000 f839 	bl	801fd5c <_vfiprintf_r>
 801fcea:	b002      	add	sp, #8
 801fcec:	f85d eb04 	ldr.w	lr, [sp], #4
 801fcf0:	b003      	add	sp, #12
 801fcf2:	4770      	bx	lr
 801fcf4:	20000150 	.word	0x20000150

0801fcf8 <__sprint_r>:
 801fcf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcfc:	6893      	ldr	r3, [r2, #8]
 801fcfe:	4680      	mov	r8, r0
 801fd00:	460e      	mov	r6, r1
 801fd02:	4614      	mov	r4, r2
 801fd04:	b343      	cbz	r3, 801fd58 <__sprint_r+0x60>
 801fd06:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801fd08:	049d      	lsls	r5, r3, #18
 801fd0a:	d522      	bpl.n	801fd52 <__sprint_r+0x5a>
 801fd0c:	6815      	ldr	r5, [r2, #0]
 801fd0e:	68a0      	ldr	r0, [r4, #8]
 801fd10:	3508      	adds	r5, #8
 801fd12:	b928      	cbnz	r0, 801fd20 <__sprint_r+0x28>
 801fd14:	2300      	movs	r3, #0
 801fd16:	60a3      	str	r3, [r4, #8]
 801fd18:	2300      	movs	r3, #0
 801fd1a:	6063      	str	r3, [r4, #4]
 801fd1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd20:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 801fd24:	f04f 0900 	mov.w	r9, #0
 801fd28:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 801fd2c:	45ca      	cmp	sl, r9
 801fd2e:	dc05      	bgt.n	801fd3c <__sprint_r+0x44>
 801fd30:	68a3      	ldr	r3, [r4, #8]
 801fd32:	f027 0703 	bic.w	r7, r7, #3
 801fd36:	1bdb      	subs	r3, r3, r7
 801fd38:	60a3      	str	r3, [r4, #8]
 801fd3a:	e7e8      	b.n	801fd0e <__sprint_r+0x16>
 801fd3c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801fd40:	4632      	mov	r2, r6
 801fd42:	4640      	mov	r0, r8
 801fd44:	f000 feb5 	bl	8020ab2 <_fputwc_r>
 801fd48:	1c43      	adds	r3, r0, #1
 801fd4a:	d0e3      	beq.n	801fd14 <__sprint_r+0x1c>
 801fd4c:	f109 0901 	add.w	r9, r9, #1
 801fd50:	e7ec      	b.n	801fd2c <__sprint_r+0x34>
 801fd52:	f000 fccb 	bl	80206ec <__sfvwrite_r>
 801fd56:	e7dd      	b.n	801fd14 <__sprint_r+0x1c>
 801fd58:	4618      	mov	r0, r3
 801fd5a:	e7dd      	b.n	801fd18 <__sprint_r+0x20>

0801fd5c <_vfiprintf_r>:
 801fd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd60:	b0bb      	sub	sp, #236	@ 0xec
 801fd62:	460f      	mov	r7, r1
 801fd64:	4693      	mov	fp, r2
 801fd66:	461c      	mov	r4, r3
 801fd68:	461d      	mov	r5, r3
 801fd6a:	9000      	str	r0, [sp, #0]
 801fd6c:	b118      	cbz	r0, 801fd76 <_vfiprintf_r+0x1a>
 801fd6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801fd70:	b90b      	cbnz	r3, 801fd76 <_vfiprintf_r+0x1a>
 801fd72:	f7fc fb21 	bl	801c3b8 <__sinit>
 801fd76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fd78:	07db      	lsls	r3, r3, #31
 801fd7a:	d405      	bmi.n	801fd88 <_vfiprintf_r+0x2c>
 801fd7c:	89bb      	ldrh	r3, [r7, #12]
 801fd7e:	059e      	lsls	r6, r3, #22
 801fd80:	d402      	bmi.n	801fd88 <_vfiprintf_r+0x2c>
 801fd82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801fd84:	f7fc fc6c 	bl	801c660 <__retarget_lock_acquire_recursive>
 801fd88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801fd8c:	0498      	lsls	r0, r3, #18
 801fd8e:	d406      	bmi.n	801fd9e <_vfiprintf_r+0x42>
 801fd90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801fd94:	81bb      	strh	r3, [r7, #12]
 801fd96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fd98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801fd9c:	667b      	str	r3, [r7, #100]	@ 0x64
 801fd9e:	89bb      	ldrh	r3, [r7, #12]
 801fda0:	0719      	lsls	r1, r3, #28
 801fda2:	d501      	bpl.n	801fda8 <_vfiprintf_r+0x4c>
 801fda4:	693b      	ldr	r3, [r7, #16]
 801fda6:	b9ab      	cbnz	r3, 801fdd4 <_vfiprintf_r+0x78>
 801fda8:	9800      	ldr	r0, [sp, #0]
 801fdaa:	4639      	mov	r1, r7
 801fdac:	f000 fdea 	bl	8020984 <__swsetup_r>
 801fdb0:	b180      	cbz	r0, 801fdd4 <_vfiprintf_r+0x78>
 801fdb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fdb4:	07da      	lsls	r2, r3, #31
 801fdb6:	d506      	bpl.n	801fdc6 <_vfiprintf_r+0x6a>
 801fdb8:	f04f 33ff 	mov.w	r3, #4294967295
 801fdbc:	9303      	str	r3, [sp, #12]
 801fdbe:	9803      	ldr	r0, [sp, #12]
 801fdc0:	b03b      	add	sp, #236	@ 0xec
 801fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc6:	89bb      	ldrh	r3, [r7, #12]
 801fdc8:	059b      	lsls	r3, r3, #22
 801fdca:	d4f5      	bmi.n	801fdb8 <_vfiprintf_r+0x5c>
 801fdcc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801fdce:	f7fc fc48 	bl	801c662 <__retarget_lock_release_recursive>
 801fdd2:	e7f1      	b.n	801fdb8 <_vfiprintf_r+0x5c>
 801fdd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801fdd8:	f003 021a 	and.w	r2, r3, #26
 801fddc:	2a0a      	cmp	r2, #10
 801fdde:	d114      	bne.n	801fe0a <_vfiprintf_r+0xae>
 801fde0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801fde4:	2a00      	cmp	r2, #0
 801fde6:	db10      	blt.n	801fe0a <_vfiprintf_r+0xae>
 801fde8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801fdea:	07d6      	lsls	r6, r2, #31
 801fdec:	d404      	bmi.n	801fdf8 <_vfiprintf_r+0x9c>
 801fdee:	059d      	lsls	r5, r3, #22
 801fdf0:	d402      	bmi.n	801fdf8 <_vfiprintf_r+0x9c>
 801fdf2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801fdf4:	f7fc fc35 	bl	801c662 <__retarget_lock_release_recursive>
 801fdf8:	9800      	ldr	r0, [sp, #0]
 801fdfa:	4623      	mov	r3, r4
 801fdfc:	465a      	mov	r2, fp
 801fdfe:	4639      	mov	r1, r7
 801fe00:	b03b      	add	sp, #236	@ 0xec
 801fe02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe06:	f000 bc31 	b.w	802066c <__sbprintf>
 801fe0a:	2300      	movs	r3, #0
 801fe0c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801fe10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801fe14:	ae11      	add	r6, sp, #68	@ 0x44
 801fe16:	960e      	str	r6, [sp, #56]	@ 0x38
 801fe18:	9307      	str	r3, [sp, #28]
 801fe1a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe1c:	9303      	str	r3, [sp, #12]
 801fe1e:	465b      	mov	r3, fp
 801fe20:	461c      	mov	r4, r3
 801fe22:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe26:	b10a      	cbz	r2, 801fe2c <_vfiprintf_r+0xd0>
 801fe28:	2a25      	cmp	r2, #37	@ 0x25
 801fe2a:	d1f9      	bne.n	801fe20 <_vfiprintf_r+0xc4>
 801fe2c:	ebb4 080b 	subs.w	r8, r4, fp
 801fe30:	d00d      	beq.n	801fe4e <_vfiprintf_r+0xf2>
 801fe32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fe34:	4443      	add	r3, r8
 801fe36:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fe3a:	3301      	adds	r3, #1
 801fe3c:	2b07      	cmp	r3, #7
 801fe3e:	e9c6 b800 	strd	fp, r8, [r6]
 801fe42:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fe44:	dc75      	bgt.n	801ff32 <_vfiprintf_r+0x1d6>
 801fe46:	3608      	adds	r6, #8
 801fe48:	9b03      	ldr	r3, [sp, #12]
 801fe4a:	4443      	add	r3, r8
 801fe4c:	9303      	str	r3, [sp, #12]
 801fe4e:	7823      	ldrb	r3, [r4, #0]
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	f000 83cd 	beq.w	80205f0 <_vfiprintf_r+0x894>
 801fe56:	2300      	movs	r3, #0
 801fe58:	f04f 32ff 	mov.w	r2, #4294967295
 801fe5c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801fe60:	3401      	adds	r4, #1
 801fe62:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801fe66:	469a      	mov	sl, r3
 801fe68:	46a3      	mov	fp, r4
 801fe6a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801fe6e:	f1a3 0220 	sub.w	r2, r3, #32
 801fe72:	2a5a      	cmp	r2, #90	@ 0x5a
 801fe74:	f200 8316 	bhi.w	80204a4 <_vfiprintf_r+0x748>
 801fe78:	e8df f012 	tbh	[pc, r2, lsl #1]
 801fe7c:	0314009a 	.word	0x0314009a
 801fe80:	00a20314 	.word	0x00a20314
 801fe84:	03140314 	.word	0x03140314
 801fe88:	00820314 	.word	0x00820314
 801fe8c:	03140314 	.word	0x03140314
 801fe90:	00af00a5 	.word	0x00af00a5
 801fe94:	00ac0314 	.word	0x00ac0314
 801fe98:	031400b1 	.word	0x031400b1
 801fe9c:	00d000cd 	.word	0x00d000cd
 801fea0:	00d000d0 	.word	0x00d000d0
 801fea4:	00d000d0 	.word	0x00d000d0
 801fea8:	00d000d0 	.word	0x00d000d0
 801feac:	00d000d0 	.word	0x00d000d0
 801feb0:	03140314 	.word	0x03140314
 801feb4:	03140314 	.word	0x03140314
 801feb8:	03140314 	.word	0x03140314
 801febc:	03140314 	.word	0x03140314
 801fec0:	00f70314 	.word	0x00f70314
 801fec4:	03140104 	.word	0x03140104
 801fec8:	03140314 	.word	0x03140314
 801fecc:	03140314 	.word	0x03140314
 801fed0:	03140314 	.word	0x03140314
 801fed4:	03140314 	.word	0x03140314
 801fed8:	01520314 	.word	0x01520314
 801fedc:	03140314 	.word	0x03140314
 801fee0:	019a0314 	.word	0x019a0314
 801fee4:	027a0314 	.word	0x027a0314
 801fee8:	03140314 	.word	0x03140314
 801feec:	0314029a 	.word	0x0314029a
 801fef0:	03140314 	.word	0x03140314
 801fef4:	03140314 	.word	0x03140314
 801fef8:	03140314 	.word	0x03140314
 801fefc:	03140314 	.word	0x03140314
 801ff00:	00f70314 	.word	0x00f70314
 801ff04:	03140106 	.word	0x03140106
 801ff08:	03140314 	.word	0x03140314
 801ff0c:	010600e0 	.word	0x010600e0
 801ff10:	031400f1 	.word	0x031400f1
 801ff14:	031400eb 	.word	0x031400eb
 801ff18:	01540132 	.word	0x01540132
 801ff1c:	00f10189 	.word	0x00f10189
 801ff20:	019a0314 	.word	0x019a0314
 801ff24:	027c0098 	.word	0x027c0098
 801ff28:	03140314 	.word	0x03140314
 801ff2c:	03140065 	.word	0x03140065
 801ff30:	0098      	.short	0x0098
 801ff32:	9800      	ldr	r0, [sp, #0]
 801ff34:	aa0e      	add	r2, sp, #56	@ 0x38
 801ff36:	4639      	mov	r1, r7
 801ff38:	f7ff fede 	bl	801fcf8 <__sprint_r>
 801ff3c:	2800      	cmp	r0, #0
 801ff3e:	f040 8336 	bne.w	80205ae <_vfiprintf_r+0x852>
 801ff42:	ae11      	add	r6, sp, #68	@ 0x44
 801ff44:	e780      	b.n	801fe48 <_vfiprintf_r+0xec>
 801ff46:	4a99      	ldr	r2, [pc, #612]	@ (80201ac <_vfiprintf_r+0x450>)
 801ff48:	9205      	str	r2, [sp, #20]
 801ff4a:	f01a 0220 	ands.w	r2, sl, #32
 801ff4e:	f000 8231 	beq.w	80203b4 <_vfiprintf_r+0x658>
 801ff52:	3507      	adds	r5, #7
 801ff54:	f025 0507 	bic.w	r5, r5, #7
 801ff58:	46a8      	mov	r8, r5
 801ff5a:	686d      	ldr	r5, [r5, #4]
 801ff5c:	f858 4b08 	ldr.w	r4, [r8], #8
 801ff60:	f01a 0f01 	tst.w	sl, #1
 801ff64:	d009      	beq.n	801ff7a <_vfiprintf_r+0x21e>
 801ff66:	ea54 0205 	orrs.w	r2, r4, r5
 801ff6a:	bf1f      	itttt	ne
 801ff6c:	2230      	movne	r2, #48	@ 0x30
 801ff6e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801ff72:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801ff76:	f04a 0a02 	orrne.w	sl, sl, #2
 801ff7a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801ff7e:	e112      	b.n	80201a6 <_vfiprintf_r+0x44a>
 801ff80:	9800      	ldr	r0, [sp, #0]
 801ff82:	f7fe f9e3 	bl	801e34c <_localeconv_r>
 801ff86:	6843      	ldr	r3, [r0, #4]
 801ff88:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	f7e0 f920 	bl	80001d0 <strlen>
 801ff90:	9007      	str	r0, [sp, #28]
 801ff92:	9800      	ldr	r0, [sp, #0]
 801ff94:	f7fe f9da 	bl	801e34c <_localeconv_r>
 801ff98:	6883      	ldr	r3, [r0, #8]
 801ff9a:	9306      	str	r3, [sp, #24]
 801ff9c:	9b07      	ldr	r3, [sp, #28]
 801ff9e:	b12b      	cbz	r3, 801ffac <_vfiprintf_r+0x250>
 801ffa0:	9b06      	ldr	r3, [sp, #24]
 801ffa2:	b11b      	cbz	r3, 801ffac <_vfiprintf_r+0x250>
 801ffa4:	781b      	ldrb	r3, [r3, #0]
 801ffa6:	b10b      	cbz	r3, 801ffac <_vfiprintf_r+0x250>
 801ffa8:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 801ffac:	465c      	mov	r4, fp
 801ffae:	e75b      	b.n	801fe68 <_vfiprintf_r+0x10c>
 801ffb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	d1f9      	bne.n	801ffac <_vfiprintf_r+0x250>
 801ffb8:	2320      	movs	r3, #32
 801ffba:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801ffbe:	e7f5      	b.n	801ffac <_vfiprintf_r+0x250>
 801ffc0:	f04a 0a01 	orr.w	sl, sl, #1
 801ffc4:	e7f2      	b.n	801ffac <_vfiprintf_r+0x250>
 801ffc6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ffca:	9302      	str	r3, [sp, #8]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	daed      	bge.n	801ffac <_vfiprintf_r+0x250>
 801ffd0:	425b      	negs	r3, r3
 801ffd2:	9302      	str	r3, [sp, #8]
 801ffd4:	f04a 0a04 	orr.w	sl, sl, #4
 801ffd8:	e7e8      	b.n	801ffac <_vfiprintf_r+0x250>
 801ffda:	232b      	movs	r3, #43	@ 0x2b
 801ffdc:	e7ed      	b.n	801ffba <_vfiprintf_r+0x25e>
 801ffde:	465a      	mov	r2, fp
 801ffe0:	f812 3b01 	ldrb.w	r3, [r2], #1
 801ffe4:	2b2a      	cmp	r3, #42	@ 0x2a
 801ffe6:	d112      	bne.n	802000e <_vfiprintf_r+0x2b2>
 801ffe8:	f855 3b04 	ldr.w	r3, [r5], #4
 801ffec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fff0:	9301      	str	r3, [sp, #4]
 801fff2:	4693      	mov	fp, r2
 801fff4:	e7da      	b.n	801ffac <_vfiprintf_r+0x250>
 801fff6:	9b01      	ldr	r3, [sp, #4]
 801fff8:	fb00 1303 	mla	r3, r0, r3, r1
 801fffc:	9301      	str	r3, [sp, #4]
 801fffe:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020002:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8020006:	2909      	cmp	r1, #9
 8020008:	d9f5      	bls.n	801fff6 <_vfiprintf_r+0x29a>
 802000a:	4693      	mov	fp, r2
 802000c:	e72f      	b.n	801fe6e <_vfiprintf_r+0x112>
 802000e:	2100      	movs	r1, #0
 8020010:	9101      	str	r1, [sp, #4]
 8020012:	200a      	movs	r0, #10
 8020014:	e7f5      	b.n	8020002 <_vfiprintf_r+0x2a6>
 8020016:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802001a:	e7c7      	b.n	801ffac <_vfiprintf_r+0x250>
 802001c:	2100      	movs	r1, #0
 802001e:	465a      	mov	r2, fp
 8020020:	9102      	str	r1, [sp, #8]
 8020022:	200a      	movs	r0, #10
 8020024:	9902      	ldr	r1, [sp, #8]
 8020026:	3b30      	subs	r3, #48	@ 0x30
 8020028:	fb00 3301 	mla	r3, r0, r1, r3
 802002c:	9302      	str	r3, [sp, #8]
 802002e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020032:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8020036:	2909      	cmp	r1, #9
 8020038:	d9f4      	bls.n	8020024 <_vfiprintf_r+0x2c8>
 802003a:	e7e6      	b.n	802000a <_vfiprintf_r+0x2ae>
 802003c:	f89b 3000 	ldrb.w	r3, [fp]
 8020040:	2b68      	cmp	r3, #104	@ 0x68
 8020042:	bf06      	itte	eq
 8020044:	f10b 0b01 	addeq.w	fp, fp, #1
 8020048:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802004c:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8020050:	e7ac      	b.n	801ffac <_vfiprintf_r+0x250>
 8020052:	f89b 3000 	ldrb.w	r3, [fp]
 8020056:	2b6c      	cmp	r3, #108	@ 0x6c
 8020058:	d104      	bne.n	8020064 <_vfiprintf_r+0x308>
 802005a:	f10b 0b01 	add.w	fp, fp, #1
 802005e:	f04a 0a20 	orr.w	sl, sl, #32
 8020062:	e7a3      	b.n	801ffac <_vfiprintf_r+0x250>
 8020064:	f04a 0a10 	orr.w	sl, sl, #16
 8020068:	e7a0      	b.n	801ffac <_vfiprintf_r+0x250>
 802006a:	46a8      	mov	r8, r5
 802006c:	2400      	movs	r4, #0
 802006e:	f858 3b04 	ldr.w	r3, [r8], #4
 8020072:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8020076:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802007a:	2301      	movs	r3, #1
 802007c:	9301      	str	r3, [sp, #4]
 802007e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8020082:	e0ab      	b.n	80201dc <_vfiprintf_r+0x480>
 8020084:	f04a 0a10 	orr.w	sl, sl, #16
 8020088:	f01a 0f20 	tst.w	sl, #32
 802008c:	d011      	beq.n	80200b2 <_vfiprintf_r+0x356>
 802008e:	3507      	adds	r5, #7
 8020090:	f025 0507 	bic.w	r5, r5, #7
 8020094:	46a8      	mov	r8, r5
 8020096:	686d      	ldr	r5, [r5, #4]
 8020098:	f858 4b08 	ldr.w	r4, [r8], #8
 802009c:	2d00      	cmp	r5, #0
 802009e:	da06      	bge.n	80200ae <_vfiprintf_r+0x352>
 80200a0:	4264      	negs	r4, r4
 80200a2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80200a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80200aa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80200ae:	2301      	movs	r3, #1
 80200b0:	e048      	b.n	8020144 <_vfiprintf_r+0x3e8>
 80200b2:	46a8      	mov	r8, r5
 80200b4:	f01a 0f10 	tst.w	sl, #16
 80200b8:	f858 5b04 	ldr.w	r5, [r8], #4
 80200bc:	d002      	beq.n	80200c4 <_vfiprintf_r+0x368>
 80200be:	462c      	mov	r4, r5
 80200c0:	17ed      	asrs	r5, r5, #31
 80200c2:	e7eb      	b.n	802009c <_vfiprintf_r+0x340>
 80200c4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80200c8:	d003      	beq.n	80200d2 <_vfiprintf_r+0x376>
 80200ca:	b22c      	sxth	r4, r5
 80200cc:	f345 35c0 	sbfx	r5, r5, #15, #1
 80200d0:	e7e4      	b.n	802009c <_vfiprintf_r+0x340>
 80200d2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80200d6:	d0f2      	beq.n	80200be <_vfiprintf_r+0x362>
 80200d8:	b26c      	sxtb	r4, r5
 80200da:	f345 15c0 	sbfx	r5, r5, #7, #1
 80200de:	e7dd      	b.n	802009c <_vfiprintf_r+0x340>
 80200e0:	f01a 0f20 	tst.w	sl, #32
 80200e4:	d007      	beq.n	80200f6 <_vfiprintf_r+0x39a>
 80200e6:	9a03      	ldr	r2, [sp, #12]
 80200e8:	682b      	ldr	r3, [r5, #0]
 80200ea:	9903      	ldr	r1, [sp, #12]
 80200ec:	17d2      	asrs	r2, r2, #31
 80200ee:	e9c3 1200 	strd	r1, r2, [r3]
 80200f2:	3504      	adds	r5, #4
 80200f4:	e693      	b.n	801fe1e <_vfiprintf_r+0xc2>
 80200f6:	f01a 0f10 	tst.w	sl, #16
 80200fa:	d003      	beq.n	8020104 <_vfiprintf_r+0x3a8>
 80200fc:	682b      	ldr	r3, [r5, #0]
 80200fe:	9a03      	ldr	r2, [sp, #12]
 8020100:	601a      	str	r2, [r3, #0]
 8020102:	e7f6      	b.n	80200f2 <_vfiprintf_r+0x396>
 8020104:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8020108:	d003      	beq.n	8020112 <_vfiprintf_r+0x3b6>
 802010a:	682b      	ldr	r3, [r5, #0]
 802010c:	9a03      	ldr	r2, [sp, #12]
 802010e:	801a      	strh	r2, [r3, #0]
 8020110:	e7ef      	b.n	80200f2 <_vfiprintf_r+0x396>
 8020112:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8020116:	d0f1      	beq.n	80200fc <_vfiprintf_r+0x3a0>
 8020118:	682b      	ldr	r3, [r5, #0]
 802011a:	9a03      	ldr	r2, [sp, #12]
 802011c:	701a      	strb	r2, [r3, #0]
 802011e:	e7e8      	b.n	80200f2 <_vfiprintf_r+0x396>
 8020120:	f04a 0a10 	orr.w	sl, sl, #16
 8020124:	f01a 0320 	ands.w	r3, sl, #32
 8020128:	d01f      	beq.n	802016a <_vfiprintf_r+0x40e>
 802012a:	3507      	adds	r5, #7
 802012c:	f025 0507 	bic.w	r5, r5, #7
 8020130:	46a8      	mov	r8, r5
 8020132:	686d      	ldr	r5, [r5, #4]
 8020134:	f858 4b08 	ldr.w	r4, [r8], #8
 8020138:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802013c:	2300      	movs	r3, #0
 802013e:	2200      	movs	r2, #0
 8020140:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8020144:	9a01      	ldr	r2, [sp, #4]
 8020146:	3201      	adds	r2, #1
 8020148:	f000 825f 	beq.w	802060a <_vfiprintf_r+0x8ae>
 802014c:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8020150:	9204      	str	r2, [sp, #16]
 8020152:	ea54 0205 	orrs.w	r2, r4, r5
 8020156:	f040 825e 	bne.w	8020616 <_vfiprintf_r+0x8ba>
 802015a:	9a01      	ldr	r2, [sp, #4]
 802015c:	2a00      	cmp	r2, #0
 802015e:	f000 8198 	beq.w	8020492 <_vfiprintf_r+0x736>
 8020162:	2b01      	cmp	r3, #1
 8020164:	f040 825a 	bne.w	802061c <_vfiprintf_r+0x8c0>
 8020168:	e13b      	b.n	80203e2 <_vfiprintf_r+0x686>
 802016a:	46a8      	mov	r8, r5
 802016c:	f01a 0510 	ands.w	r5, sl, #16
 8020170:	f858 4b04 	ldr.w	r4, [r8], #4
 8020174:	d001      	beq.n	802017a <_vfiprintf_r+0x41e>
 8020176:	461d      	mov	r5, r3
 8020178:	e7de      	b.n	8020138 <_vfiprintf_r+0x3dc>
 802017a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802017e:	d001      	beq.n	8020184 <_vfiprintf_r+0x428>
 8020180:	b2a4      	uxth	r4, r4
 8020182:	e7d9      	b.n	8020138 <_vfiprintf_r+0x3dc>
 8020184:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8020188:	d0d6      	beq.n	8020138 <_vfiprintf_r+0x3dc>
 802018a:	b2e4      	uxtb	r4, r4
 802018c:	e7f3      	b.n	8020176 <_vfiprintf_r+0x41a>
 802018e:	46a8      	mov	r8, r5
 8020190:	f647 0330 	movw	r3, #30768	@ 0x7830
 8020194:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8020198:	f858 4b04 	ldr.w	r4, [r8], #4
 802019c:	4b03      	ldr	r3, [pc, #12]	@ (80201ac <_vfiprintf_r+0x450>)
 802019e:	9305      	str	r3, [sp, #20]
 80201a0:	2500      	movs	r5, #0
 80201a2:	f04a 0a02 	orr.w	sl, sl, #2
 80201a6:	2302      	movs	r3, #2
 80201a8:	e7c9      	b.n	802013e <_vfiprintf_r+0x3e2>
 80201aa:	bf00      	nop
 80201ac:	08023920 	.word	0x08023920
 80201b0:	9b01      	ldr	r3, [sp, #4]
 80201b2:	46a8      	mov	r8, r5
 80201b4:	1c5c      	adds	r4, r3, #1
 80201b6:	f04f 0500 	mov.w	r5, #0
 80201ba:	f858 9b04 	ldr.w	r9, [r8], #4
 80201be:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80201c2:	f000 80d0 	beq.w	8020366 <_vfiprintf_r+0x60a>
 80201c6:	461a      	mov	r2, r3
 80201c8:	4629      	mov	r1, r5
 80201ca:	4648      	mov	r0, r9
 80201cc:	f7e0 f808 	bl	80001e0 <memchr>
 80201d0:	4604      	mov	r4, r0
 80201d2:	b118      	cbz	r0, 80201dc <_vfiprintf_r+0x480>
 80201d4:	eba0 0309 	sub.w	r3, r0, r9
 80201d8:	9301      	str	r3, [sp, #4]
 80201da:	462c      	mov	r4, r5
 80201dc:	9b01      	ldr	r3, [sp, #4]
 80201de:	42a3      	cmp	r3, r4
 80201e0:	bfb8      	it	lt
 80201e2:	4623      	movlt	r3, r4
 80201e4:	9304      	str	r3, [sp, #16]
 80201e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80201ea:	b113      	cbz	r3, 80201f2 <_vfiprintf_r+0x496>
 80201ec:	9b04      	ldr	r3, [sp, #16]
 80201ee:	3301      	adds	r3, #1
 80201f0:	9304      	str	r3, [sp, #16]
 80201f2:	f01a 0302 	ands.w	r3, sl, #2
 80201f6:	9308      	str	r3, [sp, #32]
 80201f8:	bf1e      	ittt	ne
 80201fa:	9b04      	ldrne	r3, [sp, #16]
 80201fc:	3302      	addne	r3, #2
 80201fe:	9304      	strne	r3, [sp, #16]
 8020200:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8020204:	930a      	str	r3, [sp, #40]	@ 0x28
 8020206:	d11f      	bne.n	8020248 <_vfiprintf_r+0x4ec>
 8020208:	9b02      	ldr	r3, [sp, #8]
 802020a:	9a04      	ldr	r2, [sp, #16]
 802020c:	1a9d      	subs	r5, r3, r2
 802020e:	2d00      	cmp	r5, #0
 8020210:	dd1a      	ble.n	8020248 <_vfiprintf_r+0x4ec>
 8020212:	4ba9      	ldr	r3, [pc, #676]	@ (80204b8 <_vfiprintf_r+0x75c>)
 8020214:	6033      	str	r3, [r6, #0]
 8020216:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802021a:	2d10      	cmp	r5, #16
 802021c:	f102 0201 	add.w	r2, r2, #1
 8020220:	f106 0008 	add.w	r0, r6, #8
 8020224:	f300 814e 	bgt.w	80204c4 <_vfiprintf_r+0x768>
 8020228:	6075      	str	r5, [r6, #4]
 802022a:	2a07      	cmp	r2, #7
 802022c:	4465      	add	r5, ip
 802022e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8020232:	f340 815a 	ble.w	80204ea <_vfiprintf_r+0x78e>
 8020236:	9800      	ldr	r0, [sp, #0]
 8020238:	aa0e      	add	r2, sp, #56	@ 0x38
 802023a:	4639      	mov	r1, r7
 802023c:	f7ff fd5c 	bl	801fcf8 <__sprint_r>
 8020240:	2800      	cmp	r0, #0
 8020242:	f040 81b4 	bne.w	80205ae <_vfiprintf_r+0x852>
 8020246:	ae11      	add	r6, sp, #68	@ 0x44
 8020248:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802024c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8020250:	b161      	cbz	r1, 802026c <_vfiprintf_r+0x510>
 8020252:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8020256:	3301      	adds	r3, #1
 8020258:	6031      	str	r1, [r6, #0]
 802025a:	2101      	movs	r1, #1
 802025c:	440a      	add	r2, r1
 802025e:	2b07      	cmp	r3, #7
 8020260:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8020264:	6071      	str	r1, [r6, #4]
 8020266:	f300 8142 	bgt.w	80204ee <_vfiprintf_r+0x792>
 802026a:	3608      	adds	r6, #8
 802026c:	9908      	ldr	r1, [sp, #32]
 802026e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8020272:	b159      	cbz	r1, 802028c <_vfiprintf_r+0x530>
 8020274:	a90d      	add	r1, sp, #52	@ 0x34
 8020276:	3301      	adds	r3, #1
 8020278:	6031      	str	r1, [r6, #0]
 802027a:	2102      	movs	r1, #2
 802027c:	440a      	add	r2, r1
 802027e:	2b07      	cmp	r3, #7
 8020280:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8020284:	6071      	str	r1, [r6, #4]
 8020286:	f300 813b 	bgt.w	8020500 <_vfiprintf_r+0x7a4>
 802028a:	3608      	adds	r6, #8
 802028c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802028e:	2b80      	cmp	r3, #128	@ 0x80
 8020290:	d11f      	bne.n	80202d2 <_vfiprintf_r+0x576>
 8020292:	9b02      	ldr	r3, [sp, #8]
 8020294:	9a04      	ldr	r2, [sp, #16]
 8020296:	1a9d      	subs	r5, r3, r2
 8020298:	2d00      	cmp	r5, #0
 802029a:	dd1a      	ble.n	80202d2 <_vfiprintf_r+0x576>
 802029c:	4b87      	ldr	r3, [pc, #540]	@ (80204bc <_vfiprintf_r+0x760>)
 802029e:	6033      	str	r3, [r6, #0]
 80202a0:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80202a4:	2d10      	cmp	r5, #16
 80202a6:	f102 0201 	add.w	r2, r2, #1
 80202aa:	f106 0008 	add.w	r0, r6, #8
 80202ae:	f300 8130 	bgt.w	8020512 <_vfiprintf_r+0x7b6>
 80202b2:	6075      	str	r5, [r6, #4]
 80202b4:	2a07      	cmp	r2, #7
 80202b6:	4465      	add	r5, ip
 80202b8:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80202bc:	f340 813c 	ble.w	8020538 <_vfiprintf_r+0x7dc>
 80202c0:	9800      	ldr	r0, [sp, #0]
 80202c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80202c4:	4639      	mov	r1, r7
 80202c6:	f7ff fd17 	bl	801fcf8 <__sprint_r>
 80202ca:	2800      	cmp	r0, #0
 80202cc:	f040 816f 	bne.w	80205ae <_vfiprintf_r+0x852>
 80202d0:	ae11      	add	r6, sp, #68	@ 0x44
 80202d2:	9b01      	ldr	r3, [sp, #4]
 80202d4:	1ae4      	subs	r4, r4, r3
 80202d6:	2c00      	cmp	r4, #0
 80202d8:	dd1a      	ble.n	8020310 <_vfiprintf_r+0x5b4>
 80202da:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80202de:	4877      	ldr	r0, [pc, #476]	@ (80204bc <_vfiprintf_r+0x760>)
 80202e0:	6030      	str	r0, [r6, #0]
 80202e2:	2c10      	cmp	r4, #16
 80202e4:	f103 0301 	add.w	r3, r3, #1
 80202e8:	f106 0108 	add.w	r1, r6, #8
 80202ec:	f300 8126 	bgt.w	802053c <_vfiprintf_r+0x7e0>
 80202f0:	6074      	str	r4, [r6, #4]
 80202f2:	2b07      	cmp	r3, #7
 80202f4:	4414      	add	r4, r2
 80202f6:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80202fa:	f340 8130 	ble.w	802055e <_vfiprintf_r+0x802>
 80202fe:	9800      	ldr	r0, [sp, #0]
 8020300:	aa0e      	add	r2, sp, #56	@ 0x38
 8020302:	4639      	mov	r1, r7
 8020304:	f7ff fcf8 	bl	801fcf8 <__sprint_r>
 8020308:	2800      	cmp	r0, #0
 802030a:	f040 8150 	bne.w	80205ae <_vfiprintf_r+0x852>
 802030e:	ae11      	add	r6, sp, #68	@ 0x44
 8020310:	9b01      	ldr	r3, [sp, #4]
 8020312:	9a01      	ldr	r2, [sp, #4]
 8020314:	6073      	str	r3, [r6, #4]
 8020316:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020318:	f8c6 9000 	str.w	r9, [r6]
 802031c:	4413      	add	r3, r2
 802031e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020322:	3301      	adds	r3, #1
 8020324:	2b07      	cmp	r3, #7
 8020326:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020328:	f300 811b 	bgt.w	8020562 <_vfiprintf_r+0x806>
 802032c:	f106 0308 	add.w	r3, r6, #8
 8020330:	f01a 0f04 	tst.w	sl, #4
 8020334:	f040 811d 	bne.w	8020572 <_vfiprintf_r+0x816>
 8020338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802033c:	9904      	ldr	r1, [sp, #16]
 802033e:	428a      	cmp	r2, r1
 8020340:	bfac      	ite	ge
 8020342:	189b      	addge	r3, r3, r2
 8020344:	185b      	addlt	r3, r3, r1
 8020346:	9303      	str	r3, [sp, #12]
 8020348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802034a:	b13b      	cbz	r3, 802035c <_vfiprintf_r+0x600>
 802034c:	9800      	ldr	r0, [sp, #0]
 802034e:	aa0e      	add	r2, sp, #56	@ 0x38
 8020350:	4639      	mov	r1, r7
 8020352:	f7ff fcd1 	bl	801fcf8 <__sprint_r>
 8020356:	2800      	cmp	r0, #0
 8020358:	f040 8129 	bne.w	80205ae <_vfiprintf_r+0x852>
 802035c:	2300      	movs	r3, #0
 802035e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020360:	4645      	mov	r5, r8
 8020362:	ae11      	add	r6, sp, #68	@ 0x44
 8020364:	e55b      	b.n	801fe1e <_vfiprintf_r+0xc2>
 8020366:	4648      	mov	r0, r9
 8020368:	f7df ff32 	bl	80001d0 <strlen>
 802036c:	9001      	str	r0, [sp, #4]
 802036e:	e734      	b.n	80201da <_vfiprintf_r+0x47e>
 8020370:	f04a 0a10 	orr.w	sl, sl, #16
 8020374:	f01a 0320 	ands.w	r3, sl, #32
 8020378:	d008      	beq.n	802038c <_vfiprintf_r+0x630>
 802037a:	3507      	adds	r5, #7
 802037c:	f025 0507 	bic.w	r5, r5, #7
 8020380:	46a8      	mov	r8, r5
 8020382:	686d      	ldr	r5, [r5, #4]
 8020384:	f858 4b08 	ldr.w	r4, [r8], #8
 8020388:	2301      	movs	r3, #1
 802038a:	e6d8      	b.n	802013e <_vfiprintf_r+0x3e2>
 802038c:	46a8      	mov	r8, r5
 802038e:	f01a 0510 	ands.w	r5, sl, #16
 8020392:	f858 4b04 	ldr.w	r4, [r8], #4
 8020396:	d001      	beq.n	802039c <_vfiprintf_r+0x640>
 8020398:	461d      	mov	r5, r3
 802039a:	e7f5      	b.n	8020388 <_vfiprintf_r+0x62c>
 802039c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80203a0:	d001      	beq.n	80203a6 <_vfiprintf_r+0x64a>
 80203a2:	b2a4      	uxth	r4, r4
 80203a4:	e7f0      	b.n	8020388 <_vfiprintf_r+0x62c>
 80203a6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80203aa:	d0ed      	beq.n	8020388 <_vfiprintf_r+0x62c>
 80203ac:	b2e4      	uxtb	r4, r4
 80203ae:	e7f3      	b.n	8020398 <_vfiprintf_r+0x63c>
 80203b0:	4a43      	ldr	r2, [pc, #268]	@ (80204c0 <_vfiprintf_r+0x764>)
 80203b2:	e5c9      	b.n	801ff48 <_vfiprintf_r+0x1ec>
 80203b4:	46a8      	mov	r8, r5
 80203b6:	f01a 0510 	ands.w	r5, sl, #16
 80203ba:	f858 4b04 	ldr.w	r4, [r8], #4
 80203be:	d001      	beq.n	80203c4 <_vfiprintf_r+0x668>
 80203c0:	4615      	mov	r5, r2
 80203c2:	e5cd      	b.n	801ff60 <_vfiprintf_r+0x204>
 80203c4:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80203c8:	d001      	beq.n	80203ce <_vfiprintf_r+0x672>
 80203ca:	b2a4      	uxth	r4, r4
 80203cc:	e5c8      	b.n	801ff60 <_vfiprintf_r+0x204>
 80203ce:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80203d2:	f43f adc5 	beq.w	801ff60 <_vfiprintf_r+0x204>
 80203d6:	b2e4      	uxtb	r4, r4
 80203d8:	e7f2      	b.n	80203c0 <_vfiprintf_r+0x664>
 80203da:	2c0a      	cmp	r4, #10
 80203dc:	f175 0300 	sbcs.w	r3, r5, #0
 80203e0:	d206      	bcs.n	80203f0 <_vfiprintf_r+0x694>
 80203e2:	3430      	adds	r4, #48	@ 0x30
 80203e4:	b2e4      	uxtb	r4, r4
 80203e6:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80203ea:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80203ee:	e131      	b.n	8020654 <_vfiprintf_r+0x8f8>
 80203f0:	ab3a      	add	r3, sp, #232	@ 0xe8
 80203f2:	9308      	str	r3, [sp, #32]
 80203f4:	9b04      	ldr	r3, [sp, #16]
 80203f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80203fa:	f04f 0a00 	mov.w	sl, #0
 80203fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8020400:	220a      	movs	r2, #10
 8020402:	2300      	movs	r3, #0
 8020404:	4620      	mov	r0, r4
 8020406:	4629      	mov	r1, r5
 8020408:	f7e0 fc3e 	bl	8000c88 <__aeabi_uldivmod>
 802040c:	460b      	mov	r3, r1
 802040e:	9908      	ldr	r1, [sp, #32]
 8020410:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020412:	3230      	adds	r2, #48	@ 0x30
 8020414:	f801 2c01 	strb.w	r2, [r1, #-1]
 8020418:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802041a:	f101 39ff 	add.w	r9, r1, #4294967295
 802041e:	f10a 0a01 	add.w	sl, sl, #1
 8020422:	b1e2      	cbz	r2, 802045e <_vfiprintf_r+0x702>
 8020424:	9a06      	ldr	r2, [sp, #24]
 8020426:	7812      	ldrb	r2, [r2, #0]
 8020428:	4552      	cmp	r2, sl
 802042a:	d118      	bne.n	802045e <_vfiprintf_r+0x702>
 802042c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8020430:	d015      	beq.n	802045e <_vfiprintf_r+0x702>
 8020432:	2c0a      	cmp	r4, #10
 8020434:	f175 0200 	sbcs.w	r2, r5, #0
 8020438:	d311      	bcc.n	802045e <_vfiprintf_r+0x702>
 802043a:	9308      	str	r3, [sp, #32]
 802043c:	9b07      	ldr	r3, [sp, #28]
 802043e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020440:	eba9 0903 	sub.w	r9, r9, r3
 8020444:	461a      	mov	r2, r3
 8020446:	4648      	mov	r0, r9
 8020448:	f7fd ff67 	bl	801e31a <strncpy>
 802044c:	9b06      	ldr	r3, [sp, #24]
 802044e:	785a      	ldrb	r2, [r3, #1]
 8020450:	9b08      	ldr	r3, [sp, #32]
 8020452:	b172      	cbz	r2, 8020472 <_vfiprintf_r+0x716>
 8020454:	9a06      	ldr	r2, [sp, #24]
 8020456:	3201      	adds	r2, #1
 8020458:	9206      	str	r2, [sp, #24]
 802045a:	f04f 0a00 	mov.w	sl, #0
 802045e:	2c0a      	cmp	r4, #10
 8020460:	f175 0500 	sbcs.w	r5, r5, #0
 8020464:	f0c0 80f6 	bcc.w	8020654 <_vfiprintf_r+0x8f8>
 8020468:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802046a:	f8cd 9020 	str.w	r9, [sp, #32]
 802046e:	461d      	mov	r5, r3
 8020470:	e7c6      	b.n	8020400 <_vfiprintf_r+0x6a4>
 8020472:	4692      	mov	sl, r2
 8020474:	e7f3      	b.n	802045e <_vfiprintf_r+0x702>
 8020476:	f004 030f 	and.w	r3, r4, #15
 802047a:	9a05      	ldr	r2, [sp, #20]
 802047c:	0924      	lsrs	r4, r4, #4
 802047e:	5cd3      	ldrb	r3, [r2, r3]
 8020480:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8020484:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8020488:	092d      	lsrs	r5, r5, #4
 802048a:	ea54 0305 	orrs.w	r3, r4, r5
 802048e:	d1f2      	bne.n	8020476 <_vfiprintf_r+0x71a>
 8020490:	e0e0      	b.n	8020654 <_vfiprintf_r+0x8f8>
 8020492:	b923      	cbnz	r3, 802049e <_vfiprintf_r+0x742>
 8020494:	f01a 0f01 	tst.w	sl, #1
 8020498:	d001      	beq.n	802049e <_vfiprintf_r+0x742>
 802049a:	2430      	movs	r4, #48	@ 0x30
 802049c:	e7a3      	b.n	80203e6 <_vfiprintf_r+0x68a>
 802049e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80204a2:	e0d7      	b.n	8020654 <_vfiprintf_r+0x8f8>
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	f000 80a3 	beq.w	80205f0 <_vfiprintf_r+0x894>
 80204aa:	2400      	movs	r4, #0
 80204ac:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80204b0:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80204b4:	46a8      	mov	r8, r5
 80204b6:	e5e0      	b.n	802007a <_vfiprintf_r+0x31e>
 80204b8:	08023c8d 	.word	0x08023c8d
 80204bc:	08023c7d 	.word	0x08023c7d
 80204c0:	08023931 	.word	0x08023931
 80204c4:	2110      	movs	r1, #16
 80204c6:	6071      	str	r1, [r6, #4]
 80204c8:	2a07      	cmp	r2, #7
 80204ca:	4461      	add	r1, ip
 80204cc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80204d0:	dd08      	ble.n	80204e4 <_vfiprintf_r+0x788>
 80204d2:	9800      	ldr	r0, [sp, #0]
 80204d4:	aa0e      	add	r2, sp, #56	@ 0x38
 80204d6:	4639      	mov	r1, r7
 80204d8:	f7ff fc0e 	bl	801fcf8 <__sprint_r>
 80204dc:	2800      	cmp	r0, #0
 80204de:	d166      	bne.n	80205ae <_vfiprintf_r+0x852>
 80204e0:	4b60      	ldr	r3, [pc, #384]	@ (8020664 <_vfiprintf_r+0x908>)
 80204e2:	a811      	add	r0, sp, #68	@ 0x44
 80204e4:	3d10      	subs	r5, #16
 80204e6:	4606      	mov	r6, r0
 80204e8:	e694      	b.n	8020214 <_vfiprintf_r+0x4b8>
 80204ea:	4606      	mov	r6, r0
 80204ec:	e6ac      	b.n	8020248 <_vfiprintf_r+0x4ec>
 80204ee:	9800      	ldr	r0, [sp, #0]
 80204f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80204f2:	4639      	mov	r1, r7
 80204f4:	f7ff fc00 	bl	801fcf8 <__sprint_r>
 80204f8:	2800      	cmp	r0, #0
 80204fa:	d158      	bne.n	80205ae <_vfiprintf_r+0x852>
 80204fc:	ae11      	add	r6, sp, #68	@ 0x44
 80204fe:	e6b5      	b.n	802026c <_vfiprintf_r+0x510>
 8020500:	9800      	ldr	r0, [sp, #0]
 8020502:	aa0e      	add	r2, sp, #56	@ 0x38
 8020504:	4639      	mov	r1, r7
 8020506:	f7ff fbf7 	bl	801fcf8 <__sprint_r>
 802050a:	2800      	cmp	r0, #0
 802050c:	d14f      	bne.n	80205ae <_vfiprintf_r+0x852>
 802050e:	ae11      	add	r6, sp, #68	@ 0x44
 8020510:	e6bc      	b.n	802028c <_vfiprintf_r+0x530>
 8020512:	2110      	movs	r1, #16
 8020514:	6071      	str	r1, [r6, #4]
 8020516:	2a07      	cmp	r2, #7
 8020518:	4461      	add	r1, ip
 802051a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802051e:	dd08      	ble.n	8020532 <_vfiprintf_r+0x7d6>
 8020520:	9800      	ldr	r0, [sp, #0]
 8020522:	aa0e      	add	r2, sp, #56	@ 0x38
 8020524:	4639      	mov	r1, r7
 8020526:	f7ff fbe7 	bl	801fcf8 <__sprint_r>
 802052a:	2800      	cmp	r0, #0
 802052c:	d13f      	bne.n	80205ae <_vfiprintf_r+0x852>
 802052e:	4b4e      	ldr	r3, [pc, #312]	@ (8020668 <_vfiprintf_r+0x90c>)
 8020530:	a811      	add	r0, sp, #68	@ 0x44
 8020532:	3d10      	subs	r5, #16
 8020534:	4606      	mov	r6, r0
 8020536:	e6b2      	b.n	802029e <_vfiprintf_r+0x542>
 8020538:	4606      	mov	r6, r0
 802053a:	e6ca      	b.n	80202d2 <_vfiprintf_r+0x576>
 802053c:	2010      	movs	r0, #16
 802053e:	4402      	add	r2, r0
 8020540:	2b07      	cmp	r3, #7
 8020542:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8020546:	6070      	str	r0, [r6, #4]
 8020548:	dd06      	ble.n	8020558 <_vfiprintf_r+0x7fc>
 802054a:	9800      	ldr	r0, [sp, #0]
 802054c:	aa0e      	add	r2, sp, #56	@ 0x38
 802054e:	4639      	mov	r1, r7
 8020550:	f7ff fbd2 	bl	801fcf8 <__sprint_r>
 8020554:	bb58      	cbnz	r0, 80205ae <_vfiprintf_r+0x852>
 8020556:	a911      	add	r1, sp, #68	@ 0x44
 8020558:	3c10      	subs	r4, #16
 802055a:	460e      	mov	r6, r1
 802055c:	e6bd      	b.n	80202da <_vfiprintf_r+0x57e>
 802055e:	460e      	mov	r6, r1
 8020560:	e6d6      	b.n	8020310 <_vfiprintf_r+0x5b4>
 8020562:	9800      	ldr	r0, [sp, #0]
 8020564:	aa0e      	add	r2, sp, #56	@ 0x38
 8020566:	4639      	mov	r1, r7
 8020568:	f7ff fbc6 	bl	801fcf8 <__sprint_r>
 802056c:	b9f8      	cbnz	r0, 80205ae <_vfiprintf_r+0x852>
 802056e:	ab11      	add	r3, sp, #68	@ 0x44
 8020570:	e6de      	b.n	8020330 <_vfiprintf_r+0x5d4>
 8020572:	9a02      	ldr	r2, [sp, #8]
 8020574:	9904      	ldr	r1, [sp, #16]
 8020576:	1a54      	subs	r4, r2, r1
 8020578:	2c00      	cmp	r4, #0
 802057a:	f77f aedd 	ble.w	8020338 <_vfiprintf_r+0x5dc>
 802057e:	4d39      	ldr	r5, [pc, #228]	@ (8020664 <_vfiprintf_r+0x908>)
 8020580:	2610      	movs	r6, #16
 8020582:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8020586:	2c10      	cmp	r4, #16
 8020588:	f102 0201 	add.w	r2, r2, #1
 802058c:	601d      	str	r5, [r3, #0]
 802058e:	dc1d      	bgt.n	80205cc <_vfiprintf_r+0x870>
 8020590:	605c      	str	r4, [r3, #4]
 8020592:	2a07      	cmp	r2, #7
 8020594:	440c      	add	r4, r1
 8020596:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802059a:	f77f aecd 	ble.w	8020338 <_vfiprintf_r+0x5dc>
 802059e:	9800      	ldr	r0, [sp, #0]
 80205a0:	aa0e      	add	r2, sp, #56	@ 0x38
 80205a2:	4639      	mov	r1, r7
 80205a4:	f7ff fba8 	bl	801fcf8 <__sprint_r>
 80205a8:	2800      	cmp	r0, #0
 80205aa:	f43f aec5 	beq.w	8020338 <_vfiprintf_r+0x5dc>
 80205ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205b0:	07d9      	lsls	r1, r3, #31
 80205b2:	d405      	bmi.n	80205c0 <_vfiprintf_r+0x864>
 80205b4:	89bb      	ldrh	r3, [r7, #12]
 80205b6:	059a      	lsls	r2, r3, #22
 80205b8:	d402      	bmi.n	80205c0 <_vfiprintf_r+0x864>
 80205ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80205bc:	f7fc f851 	bl	801c662 <__retarget_lock_release_recursive>
 80205c0:	89bb      	ldrh	r3, [r7, #12]
 80205c2:	065b      	lsls	r3, r3, #25
 80205c4:	f57f abfb 	bpl.w	801fdbe <_vfiprintf_r+0x62>
 80205c8:	f7ff bbf6 	b.w	801fdb8 <_vfiprintf_r+0x5c>
 80205cc:	3110      	adds	r1, #16
 80205ce:	2a07      	cmp	r2, #7
 80205d0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80205d4:	605e      	str	r6, [r3, #4]
 80205d6:	dc02      	bgt.n	80205de <_vfiprintf_r+0x882>
 80205d8:	3308      	adds	r3, #8
 80205da:	3c10      	subs	r4, #16
 80205dc:	e7d1      	b.n	8020582 <_vfiprintf_r+0x826>
 80205de:	9800      	ldr	r0, [sp, #0]
 80205e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80205e2:	4639      	mov	r1, r7
 80205e4:	f7ff fb88 	bl	801fcf8 <__sprint_r>
 80205e8:	2800      	cmp	r0, #0
 80205ea:	d1e0      	bne.n	80205ae <_vfiprintf_r+0x852>
 80205ec:	ab11      	add	r3, sp, #68	@ 0x44
 80205ee:	e7f4      	b.n	80205da <_vfiprintf_r+0x87e>
 80205f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80205f2:	b913      	cbnz	r3, 80205fa <_vfiprintf_r+0x89e>
 80205f4:	2300      	movs	r3, #0
 80205f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80205f8:	e7d9      	b.n	80205ae <_vfiprintf_r+0x852>
 80205fa:	9800      	ldr	r0, [sp, #0]
 80205fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80205fe:	4639      	mov	r1, r7
 8020600:	f7ff fb7a 	bl	801fcf8 <__sprint_r>
 8020604:	2800      	cmp	r0, #0
 8020606:	d0f5      	beq.n	80205f4 <_vfiprintf_r+0x898>
 8020608:	e7d1      	b.n	80205ae <_vfiprintf_r+0x852>
 802060a:	ea54 0205 	orrs.w	r2, r4, r5
 802060e:	f8cd a010 	str.w	sl, [sp, #16]
 8020612:	f43f ada6 	beq.w	8020162 <_vfiprintf_r+0x406>
 8020616:	2b01      	cmp	r3, #1
 8020618:	f43f aedf 	beq.w	80203da <_vfiprintf_r+0x67e>
 802061c:	2b02      	cmp	r3, #2
 802061e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8020622:	f43f af28 	beq.w	8020476 <_vfiprintf_r+0x71a>
 8020626:	f004 0307 	and.w	r3, r4, #7
 802062a:	08e4      	lsrs	r4, r4, #3
 802062c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8020630:	08ed      	lsrs	r5, r5, #3
 8020632:	3330      	adds	r3, #48	@ 0x30
 8020634:	ea54 0105 	orrs.w	r1, r4, r5
 8020638:	464a      	mov	r2, r9
 802063a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802063e:	d1f2      	bne.n	8020626 <_vfiprintf_r+0x8ca>
 8020640:	9904      	ldr	r1, [sp, #16]
 8020642:	07c8      	lsls	r0, r1, #31
 8020644:	d506      	bpl.n	8020654 <_vfiprintf_r+0x8f8>
 8020646:	2b30      	cmp	r3, #48	@ 0x30
 8020648:	d004      	beq.n	8020654 <_vfiprintf_r+0x8f8>
 802064a:	2330      	movs	r3, #48	@ 0x30
 802064c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8020650:	f1a2 0902 	sub.w	r9, r2, #2
 8020654:	ab3a      	add	r3, sp, #232	@ 0xe8
 8020656:	eba3 0309 	sub.w	r3, r3, r9
 802065a:	9c01      	ldr	r4, [sp, #4]
 802065c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8020660:	9301      	str	r3, [sp, #4]
 8020662:	e5bb      	b.n	80201dc <_vfiprintf_r+0x480>
 8020664:	08023c8d 	.word	0x08023c8d
 8020668:	08023c7d 	.word	0x08023c7d

0802066c <__sbprintf>:
 802066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802066e:	461f      	mov	r7, r3
 8020670:	898b      	ldrh	r3, [r1, #12]
 8020672:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8020676:	f023 0302 	bic.w	r3, r3, #2
 802067a:	f8ad 300c 	strh.w	r3, [sp, #12]
 802067e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8020680:	9319      	str	r3, [sp, #100]	@ 0x64
 8020682:	89cb      	ldrh	r3, [r1, #14]
 8020684:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020688:	69cb      	ldr	r3, [r1, #28]
 802068a:	9307      	str	r3, [sp, #28]
 802068c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802068e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020690:	ab1a      	add	r3, sp, #104	@ 0x68
 8020692:	9300      	str	r3, [sp, #0]
 8020694:	9304      	str	r3, [sp, #16]
 8020696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802069a:	4615      	mov	r5, r2
 802069c:	4606      	mov	r6, r0
 802069e:	9302      	str	r3, [sp, #8]
 80206a0:	9305      	str	r3, [sp, #20]
 80206a2:	a816      	add	r0, sp, #88	@ 0x58
 80206a4:	2300      	movs	r3, #0
 80206a6:	460c      	mov	r4, r1
 80206a8:	9306      	str	r3, [sp, #24]
 80206aa:	f7fb ffd7 	bl	801c65c <__retarget_lock_init_recursive>
 80206ae:	462a      	mov	r2, r5
 80206b0:	463b      	mov	r3, r7
 80206b2:	4669      	mov	r1, sp
 80206b4:	4630      	mov	r0, r6
 80206b6:	f7ff fb51 	bl	801fd5c <_vfiprintf_r>
 80206ba:	1e05      	subs	r5, r0, #0
 80206bc:	db07      	blt.n	80206ce <__sbprintf+0x62>
 80206be:	4669      	mov	r1, sp
 80206c0:	4630      	mov	r0, r6
 80206c2:	f7fd fe05 	bl	801e2d0 <_fflush_r>
 80206c6:	2800      	cmp	r0, #0
 80206c8:	bf18      	it	ne
 80206ca:	f04f 35ff 	movne.w	r5, #4294967295
 80206ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80206d2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80206d4:	065b      	lsls	r3, r3, #25
 80206d6:	bf42      	ittt	mi
 80206d8:	89a3      	ldrhmi	r3, [r4, #12]
 80206da:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80206de:	81a3      	strhmi	r3, [r4, #12]
 80206e0:	f7fb ffbd 	bl	801c65e <__retarget_lock_close_recursive>
 80206e4:	4628      	mov	r0, r5
 80206e6:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80206ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080206ec <__sfvwrite_r>:
 80206ec:	6893      	ldr	r3, [r2, #8]
 80206ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206f2:	4606      	mov	r6, r0
 80206f4:	460c      	mov	r4, r1
 80206f6:	4691      	mov	r9, r2
 80206f8:	b91b      	cbnz	r3, 8020702 <__sfvwrite_r+0x16>
 80206fa:	2000      	movs	r0, #0
 80206fc:	b003      	add	sp, #12
 80206fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020702:	898b      	ldrh	r3, [r1, #12]
 8020704:	0718      	lsls	r0, r3, #28
 8020706:	d550      	bpl.n	80207aa <__sfvwrite_r+0xbe>
 8020708:	690b      	ldr	r3, [r1, #16]
 802070a:	2b00      	cmp	r3, #0
 802070c:	d04d      	beq.n	80207aa <__sfvwrite_r+0xbe>
 802070e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020712:	f8d9 8000 	ldr.w	r8, [r9]
 8020716:	f013 0702 	ands.w	r7, r3, #2
 802071a:	d16b      	bne.n	80207f4 <__sfvwrite_r+0x108>
 802071c:	f013 0301 	ands.w	r3, r3, #1
 8020720:	f000 809c 	beq.w	802085c <__sfvwrite_r+0x170>
 8020724:	4638      	mov	r0, r7
 8020726:	46ba      	mov	sl, r7
 8020728:	46bb      	mov	fp, r7
 802072a:	f1bb 0f00 	cmp.w	fp, #0
 802072e:	f000 8103 	beq.w	8020938 <__sfvwrite_r+0x24c>
 8020732:	b950      	cbnz	r0, 802074a <__sfvwrite_r+0x5e>
 8020734:	465a      	mov	r2, fp
 8020736:	210a      	movs	r1, #10
 8020738:	4650      	mov	r0, sl
 802073a:	f7df fd51 	bl	80001e0 <memchr>
 802073e:	2800      	cmp	r0, #0
 8020740:	f000 8100 	beq.w	8020944 <__sfvwrite_r+0x258>
 8020744:	3001      	adds	r0, #1
 8020746:	eba0 070a 	sub.w	r7, r0, sl
 802074a:	6820      	ldr	r0, [r4, #0]
 802074c:	6921      	ldr	r1, [r4, #16]
 802074e:	68a5      	ldr	r5, [r4, #8]
 8020750:	6963      	ldr	r3, [r4, #20]
 8020752:	455f      	cmp	r7, fp
 8020754:	463a      	mov	r2, r7
 8020756:	bf28      	it	cs
 8020758:	465a      	movcs	r2, fp
 802075a:	4288      	cmp	r0, r1
 802075c:	f240 80f5 	bls.w	802094a <__sfvwrite_r+0x25e>
 8020760:	441d      	add	r5, r3
 8020762:	42aa      	cmp	r2, r5
 8020764:	f340 80f1 	ble.w	802094a <__sfvwrite_r+0x25e>
 8020768:	4651      	mov	r1, sl
 802076a:	462a      	mov	r2, r5
 802076c:	f7ff fa44 	bl	801fbf8 <memmove>
 8020770:	6823      	ldr	r3, [r4, #0]
 8020772:	442b      	add	r3, r5
 8020774:	6023      	str	r3, [r4, #0]
 8020776:	4621      	mov	r1, r4
 8020778:	4630      	mov	r0, r6
 802077a:	f7fd fda9 	bl	801e2d0 <_fflush_r>
 802077e:	2800      	cmp	r0, #0
 8020780:	d167      	bne.n	8020852 <__sfvwrite_r+0x166>
 8020782:	1b7f      	subs	r7, r7, r5
 8020784:	f040 80f9 	bne.w	802097a <__sfvwrite_r+0x28e>
 8020788:	4621      	mov	r1, r4
 802078a:	4630      	mov	r0, r6
 802078c:	f7fd fda0 	bl	801e2d0 <_fflush_r>
 8020790:	2800      	cmp	r0, #0
 8020792:	d15e      	bne.n	8020852 <__sfvwrite_r+0x166>
 8020794:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8020798:	1b5b      	subs	r3, r3, r5
 802079a:	44aa      	add	sl, r5
 802079c:	ebab 0b05 	sub.w	fp, fp, r5
 80207a0:	f8c9 3008 	str.w	r3, [r9, #8]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d1c0      	bne.n	802072a <__sfvwrite_r+0x3e>
 80207a8:	e7a7      	b.n	80206fa <__sfvwrite_r+0xe>
 80207aa:	4621      	mov	r1, r4
 80207ac:	4630      	mov	r0, r6
 80207ae:	f000 f8e9 	bl	8020984 <__swsetup_r>
 80207b2:	2800      	cmp	r0, #0
 80207b4:	d0ab      	beq.n	802070e <__sfvwrite_r+0x22>
 80207b6:	f04f 30ff 	mov.w	r0, #4294967295
 80207ba:	e79f      	b.n	80206fc <__sfvwrite_r+0x10>
 80207bc:	e9d8 a500 	ldrd	sl, r5, [r8]
 80207c0:	f108 0808 	add.w	r8, r8, #8
 80207c4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80207c8:	69e1      	ldr	r1, [r4, #28]
 80207ca:	2d00      	cmp	r5, #0
 80207cc:	d0f6      	beq.n	80207bc <__sfvwrite_r+0xd0>
 80207ce:	42bd      	cmp	r5, r7
 80207d0:	462b      	mov	r3, r5
 80207d2:	4652      	mov	r2, sl
 80207d4:	bf28      	it	cs
 80207d6:	463b      	movcs	r3, r7
 80207d8:	4630      	mov	r0, r6
 80207da:	47d8      	blx	fp
 80207dc:	2800      	cmp	r0, #0
 80207de:	dd38      	ble.n	8020852 <__sfvwrite_r+0x166>
 80207e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80207e4:	1a1b      	subs	r3, r3, r0
 80207e6:	4482      	add	sl, r0
 80207e8:	1a2d      	subs	r5, r5, r0
 80207ea:	f8c9 3008 	str.w	r3, [r9, #8]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d1e8      	bne.n	80207c4 <__sfvwrite_r+0xd8>
 80207f2:	e782      	b.n	80206fa <__sfvwrite_r+0xe>
 80207f4:	f04f 0a00 	mov.w	sl, #0
 80207f8:	4f61      	ldr	r7, [pc, #388]	@ (8020980 <__sfvwrite_r+0x294>)
 80207fa:	4655      	mov	r5, sl
 80207fc:	e7e2      	b.n	80207c4 <__sfvwrite_r+0xd8>
 80207fe:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8020802:	f108 0808 	add.w	r8, r8, #8
 8020806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802080a:	6820      	ldr	r0, [r4, #0]
 802080c:	68a2      	ldr	r2, [r4, #8]
 802080e:	f1ba 0f00 	cmp.w	sl, #0
 8020812:	d0f4      	beq.n	80207fe <__sfvwrite_r+0x112>
 8020814:	0599      	lsls	r1, r3, #22
 8020816:	d563      	bpl.n	80208e0 <__sfvwrite_r+0x1f4>
 8020818:	4552      	cmp	r2, sl
 802081a:	d836      	bhi.n	802088a <__sfvwrite_r+0x19e>
 802081c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8020820:	d033      	beq.n	802088a <__sfvwrite_r+0x19e>
 8020822:	6921      	ldr	r1, [r4, #16]
 8020824:	6965      	ldr	r5, [r4, #20]
 8020826:	eba0 0b01 	sub.w	fp, r0, r1
 802082a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802082e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020832:	f10b 0201 	add.w	r2, fp, #1
 8020836:	106d      	asrs	r5, r5, #1
 8020838:	4452      	add	r2, sl
 802083a:	4295      	cmp	r5, r2
 802083c:	bf38      	it	cc
 802083e:	4615      	movcc	r5, r2
 8020840:	055b      	lsls	r3, r3, #21
 8020842:	d53d      	bpl.n	80208c0 <__sfvwrite_r+0x1d4>
 8020844:	4629      	mov	r1, r5
 8020846:	4630      	mov	r0, r6
 8020848:	f7fc f840 	bl	801c8cc <_malloc_r>
 802084c:	b948      	cbnz	r0, 8020862 <__sfvwrite_r+0x176>
 802084e:	230c      	movs	r3, #12
 8020850:	6033      	str	r3, [r6, #0]
 8020852:	89a3      	ldrh	r3, [r4, #12]
 8020854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020858:	81a3      	strh	r3, [r4, #12]
 802085a:	e7ac      	b.n	80207b6 <__sfvwrite_r+0xca>
 802085c:	461f      	mov	r7, r3
 802085e:	469a      	mov	sl, r3
 8020860:	e7d1      	b.n	8020806 <__sfvwrite_r+0x11a>
 8020862:	465a      	mov	r2, fp
 8020864:	6921      	ldr	r1, [r4, #16]
 8020866:	9001      	str	r0, [sp, #4]
 8020868:	f7fb fefc 	bl	801c664 <memcpy>
 802086c:	89a2      	ldrh	r2, [r4, #12]
 802086e:	9b01      	ldr	r3, [sp, #4]
 8020870:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8020874:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8020878:	81a2      	strh	r2, [r4, #12]
 802087a:	6123      	str	r3, [r4, #16]
 802087c:	6165      	str	r5, [r4, #20]
 802087e:	445b      	add	r3, fp
 8020880:	eba5 050b 	sub.w	r5, r5, fp
 8020884:	6023      	str	r3, [r4, #0]
 8020886:	4652      	mov	r2, sl
 8020888:	60a5      	str	r5, [r4, #8]
 802088a:	4552      	cmp	r2, sl
 802088c:	bf28      	it	cs
 802088e:	4652      	movcs	r2, sl
 8020890:	6820      	ldr	r0, [r4, #0]
 8020892:	9201      	str	r2, [sp, #4]
 8020894:	4639      	mov	r1, r7
 8020896:	f7ff f9af 	bl	801fbf8 <memmove>
 802089a:	68a3      	ldr	r3, [r4, #8]
 802089c:	9a01      	ldr	r2, [sp, #4]
 802089e:	1a9b      	subs	r3, r3, r2
 80208a0:	60a3      	str	r3, [r4, #8]
 80208a2:	6823      	ldr	r3, [r4, #0]
 80208a4:	4413      	add	r3, r2
 80208a6:	4655      	mov	r5, sl
 80208a8:	6023      	str	r3, [r4, #0]
 80208aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80208ae:	1b5b      	subs	r3, r3, r5
 80208b0:	442f      	add	r7, r5
 80208b2:	ebaa 0a05 	sub.w	sl, sl, r5
 80208b6:	f8c9 3008 	str.w	r3, [r9, #8]
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d1a3      	bne.n	8020806 <__sfvwrite_r+0x11a>
 80208be:	e71c      	b.n	80206fa <__sfvwrite_r+0xe>
 80208c0:	462a      	mov	r2, r5
 80208c2:	4630      	mov	r0, r6
 80208c4:	f7fe ff66 	bl	801f794 <_realloc_r>
 80208c8:	4603      	mov	r3, r0
 80208ca:	2800      	cmp	r0, #0
 80208cc:	d1d5      	bne.n	802087a <__sfvwrite_r+0x18e>
 80208ce:	6921      	ldr	r1, [r4, #16]
 80208d0:	4630      	mov	r0, r6
 80208d2:	f7fb ff3b 	bl	801c74c <_free_r>
 80208d6:	89a3      	ldrh	r3, [r4, #12]
 80208d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80208dc:	81a3      	strh	r3, [r4, #12]
 80208de:	e7b6      	b.n	802084e <__sfvwrite_r+0x162>
 80208e0:	6923      	ldr	r3, [r4, #16]
 80208e2:	4283      	cmp	r3, r0
 80208e4:	d302      	bcc.n	80208ec <__sfvwrite_r+0x200>
 80208e6:	6961      	ldr	r1, [r4, #20]
 80208e8:	4551      	cmp	r1, sl
 80208ea:	d915      	bls.n	8020918 <__sfvwrite_r+0x22c>
 80208ec:	4552      	cmp	r2, sl
 80208ee:	bf28      	it	cs
 80208f0:	4652      	movcs	r2, sl
 80208f2:	4639      	mov	r1, r7
 80208f4:	4615      	mov	r5, r2
 80208f6:	f7ff f97f 	bl	801fbf8 <memmove>
 80208fa:	68a3      	ldr	r3, [r4, #8]
 80208fc:	6822      	ldr	r2, [r4, #0]
 80208fe:	1b5b      	subs	r3, r3, r5
 8020900:	442a      	add	r2, r5
 8020902:	60a3      	str	r3, [r4, #8]
 8020904:	6022      	str	r2, [r4, #0]
 8020906:	2b00      	cmp	r3, #0
 8020908:	d1cf      	bne.n	80208aa <__sfvwrite_r+0x1be>
 802090a:	4621      	mov	r1, r4
 802090c:	4630      	mov	r0, r6
 802090e:	f7fd fcdf 	bl	801e2d0 <_fflush_r>
 8020912:	2800      	cmp	r0, #0
 8020914:	d0c9      	beq.n	80208aa <__sfvwrite_r+0x1be>
 8020916:	e79c      	b.n	8020852 <__sfvwrite_r+0x166>
 8020918:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802091c:	4553      	cmp	r3, sl
 802091e:	bf28      	it	cs
 8020920:	4653      	movcs	r3, sl
 8020922:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8020924:	fb93 f3f1 	sdiv	r3, r3, r1
 8020928:	463a      	mov	r2, r7
 802092a:	434b      	muls	r3, r1
 802092c:	4630      	mov	r0, r6
 802092e:	69e1      	ldr	r1, [r4, #28]
 8020930:	47a8      	blx	r5
 8020932:	1e05      	subs	r5, r0, #0
 8020934:	dcb9      	bgt.n	80208aa <__sfvwrite_r+0x1be>
 8020936:	e78c      	b.n	8020852 <__sfvwrite_r+0x166>
 8020938:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802093c:	2000      	movs	r0, #0
 802093e:	f108 0808 	add.w	r8, r8, #8
 8020942:	e6f2      	b.n	802072a <__sfvwrite_r+0x3e>
 8020944:	f10b 0701 	add.w	r7, fp, #1
 8020948:	e6ff      	b.n	802074a <__sfvwrite_r+0x5e>
 802094a:	4293      	cmp	r3, r2
 802094c:	dc08      	bgt.n	8020960 <__sfvwrite_r+0x274>
 802094e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8020950:	69e1      	ldr	r1, [r4, #28]
 8020952:	4652      	mov	r2, sl
 8020954:	4630      	mov	r0, r6
 8020956:	47a8      	blx	r5
 8020958:	1e05      	subs	r5, r0, #0
 802095a:	f73f af12 	bgt.w	8020782 <__sfvwrite_r+0x96>
 802095e:	e778      	b.n	8020852 <__sfvwrite_r+0x166>
 8020960:	4651      	mov	r1, sl
 8020962:	9201      	str	r2, [sp, #4]
 8020964:	f7ff f948 	bl	801fbf8 <memmove>
 8020968:	9a01      	ldr	r2, [sp, #4]
 802096a:	68a3      	ldr	r3, [r4, #8]
 802096c:	1a9b      	subs	r3, r3, r2
 802096e:	60a3      	str	r3, [r4, #8]
 8020970:	6823      	ldr	r3, [r4, #0]
 8020972:	4413      	add	r3, r2
 8020974:	6023      	str	r3, [r4, #0]
 8020976:	4615      	mov	r5, r2
 8020978:	e703      	b.n	8020782 <__sfvwrite_r+0x96>
 802097a:	2001      	movs	r0, #1
 802097c:	e70a      	b.n	8020794 <__sfvwrite_r+0xa8>
 802097e:	bf00      	nop
 8020980:	7ffffc00 	.word	0x7ffffc00

08020984 <__swsetup_r>:
 8020984:	b538      	push	{r3, r4, r5, lr}
 8020986:	4b29      	ldr	r3, [pc, #164]	@ (8020a2c <__swsetup_r+0xa8>)
 8020988:	4605      	mov	r5, r0
 802098a:	6818      	ldr	r0, [r3, #0]
 802098c:	460c      	mov	r4, r1
 802098e:	b118      	cbz	r0, 8020998 <__swsetup_r+0x14>
 8020990:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8020992:	b90b      	cbnz	r3, 8020998 <__swsetup_r+0x14>
 8020994:	f7fb fd10 	bl	801c3b8 <__sinit>
 8020998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802099c:	0719      	lsls	r1, r3, #28
 802099e:	d422      	bmi.n	80209e6 <__swsetup_r+0x62>
 80209a0:	06da      	lsls	r2, r3, #27
 80209a2:	d407      	bmi.n	80209b4 <__swsetup_r+0x30>
 80209a4:	2209      	movs	r2, #9
 80209a6:	602a      	str	r2, [r5, #0]
 80209a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80209ac:	81a3      	strh	r3, [r4, #12]
 80209ae:	f04f 30ff 	mov.w	r0, #4294967295
 80209b2:	e033      	b.n	8020a1c <__swsetup_r+0x98>
 80209b4:	0758      	lsls	r0, r3, #29
 80209b6:	d512      	bpl.n	80209de <__swsetup_r+0x5a>
 80209b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80209ba:	b141      	cbz	r1, 80209ce <__swsetup_r+0x4a>
 80209bc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80209c0:	4299      	cmp	r1, r3
 80209c2:	d002      	beq.n	80209ca <__swsetup_r+0x46>
 80209c4:	4628      	mov	r0, r5
 80209c6:	f7fb fec1 	bl	801c74c <_free_r>
 80209ca:	2300      	movs	r3, #0
 80209cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80209ce:	89a3      	ldrh	r3, [r4, #12]
 80209d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80209d4:	81a3      	strh	r3, [r4, #12]
 80209d6:	2300      	movs	r3, #0
 80209d8:	6063      	str	r3, [r4, #4]
 80209da:	6923      	ldr	r3, [r4, #16]
 80209dc:	6023      	str	r3, [r4, #0]
 80209de:	89a3      	ldrh	r3, [r4, #12]
 80209e0:	f043 0308 	orr.w	r3, r3, #8
 80209e4:	81a3      	strh	r3, [r4, #12]
 80209e6:	6923      	ldr	r3, [r4, #16]
 80209e8:	b94b      	cbnz	r3, 80209fe <__swsetup_r+0x7a>
 80209ea:	89a3      	ldrh	r3, [r4, #12]
 80209ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80209f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80209f4:	d003      	beq.n	80209fe <__swsetup_r+0x7a>
 80209f6:	4621      	mov	r1, r4
 80209f8:	4628      	mov	r0, r5
 80209fa:	f000 f8c9 	bl	8020b90 <__smakebuf_r>
 80209fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a02:	f013 0201 	ands.w	r2, r3, #1
 8020a06:	d00a      	beq.n	8020a1e <__swsetup_r+0x9a>
 8020a08:	2200      	movs	r2, #0
 8020a0a:	60a2      	str	r2, [r4, #8]
 8020a0c:	6962      	ldr	r2, [r4, #20]
 8020a0e:	4252      	negs	r2, r2
 8020a10:	61a2      	str	r2, [r4, #24]
 8020a12:	6922      	ldr	r2, [r4, #16]
 8020a14:	b942      	cbnz	r2, 8020a28 <__swsetup_r+0xa4>
 8020a16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020a1a:	d1c5      	bne.n	80209a8 <__swsetup_r+0x24>
 8020a1c:	bd38      	pop	{r3, r4, r5, pc}
 8020a1e:	0799      	lsls	r1, r3, #30
 8020a20:	bf58      	it	pl
 8020a22:	6962      	ldrpl	r2, [r4, #20]
 8020a24:	60a2      	str	r2, [r4, #8]
 8020a26:	e7f4      	b.n	8020a12 <__swsetup_r+0x8e>
 8020a28:	2000      	movs	r0, #0
 8020a2a:	e7f7      	b.n	8020a1c <__swsetup_r+0x98>
 8020a2c:	20000150 	.word	0x20000150

08020a30 <__fputwc>:
 8020a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020a34:	4680      	mov	r8, r0
 8020a36:	460f      	mov	r7, r1
 8020a38:	4614      	mov	r4, r2
 8020a3a:	f7fd fc81 	bl	801e340 <__locale_mb_cur_max>
 8020a3e:	2801      	cmp	r0, #1
 8020a40:	4605      	mov	r5, r0
 8020a42:	d11b      	bne.n	8020a7c <__fputwc+0x4c>
 8020a44:	1e7b      	subs	r3, r7, #1
 8020a46:	2bfe      	cmp	r3, #254	@ 0xfe
 8020a48:	d818      	bhi.n	8020a7c <__fputwc+0x4c>
 8020a4a:	f88d 7004 	strb.w	r7, [sp, #4]
 8020a4e:	2600      	movs	r6, #0
 8020a50:	f10d 0904 	add.w	r9, sp, #4
 8020a54:	42ae      	cmp	r6, r5
 8020a56:	d021      	beq.n	8020a9c <__fputwc+0x6c>
 8020a58:	68a3      	ldr	r3, [r4, #8]
 8020a5a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8020a5e:	3b01      	subs	r3, #1
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	60a3      	str	r3, [r4, #8]
 8020a64:	da04      	bge.n	8020a70 <__fputwc+0x40>
 8020a66:	69a2      	ldr	r2, [r4, #24]
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	db1b      	blt.n	8020aa4 <__fputwc+0x74>
 8020a6c:	290a      	cmp	r1, #10
 8020a6e:	d019      	beq.n	8020aa4 <__fputwc+0x74>
 8020a70:	6823      	ldr	r3, [r4, #0]
 8020a72:	1c5a      	adds	r2, r3, #1
 8020a74:	6022      	str	r2, [r4, #0]
 8020a76:	7019      	strb	r1, [r3, #0]
 8020a78:	3601      	adds	r6, #1
 8020a7a:	e7eb      	b.n	8020a54 <__fputwc+0x24>
 8020a7c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8020a80:	463a      	mov	r2, r7
 8020a82:	a901      	add	r1, sp, #4
 8020a84:	4640      	mov	r0, r8
 8020a86:	f000 f845 	bl	8020b14 <_wcrtomb_r>
 8020a8a:	1c43      	adds	r3, r0, #1
 8020a8c:	4605      	mov	r5, r0
 8020a8e:	d1de      	bne.n	8020a4e <__fputwc+0x1e>
 8020a90:	89a3      	ldrh	r3, [r4, #12]
 8020a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020a96:	81a3      	strh	r3, [r4, #12]
 8020a98:	f04f 37ff 	mov.w	r7, #4294967295
 8020a9c:	4638      	mov	r0, r7
 8020a9e:	b003      	add	sp, #12
 8020aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020aa4:	4622      	mov	r2, r4
 8020aa6:	4640      	mov	r0, r8
 8020aa8:	f000 f8ae 	bl	8020c08 <__swbuf_r>
 8020aac:	3001      	adds	r0, #1
 8020aae:	d1e3      	bne.n	8020a78 <__fputwc+0x48>
 8020ab0:	e7f2      	b.n	8020a98 <__fputwc+0x68>

08020ab2 <_fputwc_r>:
 8020ab2:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8020ab4:	07db      	lsls	r3, r3, #31
 8020ab6:	b570      	push	{r4, r5, r6, lr}
 8020ab8:	4605      	mov	r5, r0
 8020aba:	460e      	mov	r6, r1
 8020abc:	4614      	mov	r4, r2
 8020abe:	d405      	bmi.n	8020acc <_fputwc_r+0x1a>
 8020ac0:	8993      	ldrh	r3, [r2, #12]
 8020ac2:	0598      	lsls	r0, r3, #22
 8020ac4:	d402      	bmi.n	8020acc <_fputwc_r+0x1a>
 8020ac6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8020ac8:	f7fb fdca 	bl	801c660 <__retarget_lock_acquire_recursive>
 8020acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ad0:	0499      	lsls	r1, r3, #18
 8020ad2:	d406      	bmi.n	8020ae2 <_fputwc_r+0x30>
 8020ad4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020ad8:	81a3      	strh	r3, [r4, #12]
 8020ada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020adc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020ae0:	6663      	str	r3, [r4, #100]	@ 0x64
 8020ae2:	4622      	mov	r2, r4
 8020ae4:	4628      	mov	r0, r5
 8020ae6:	4631      	mov	r1, r6
 8020ae8:	f7ff ffa2 	bl	8020a30 <__fputwc>
 8020aec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020aee:	07da      	lsls	r2, r3, #31
 8020af0:	4605      	mov	r5, r0
 8020af2:	d405      	bmi.n	8020b00 <_fputwc_r+0x4e>
 8020af4:	89a3      	ldrh	r3, [r4, #12]
 8020af6:	059b      	lsls	r3, r3, #22
 8020af8:	d402      	bmi.n	8020b00 <_fputwc_r+0x4e>
 8020afa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020afc:	f7fb fdb1 	bl	801c662 <__retarget_lock_release_recursive>
 8020b00:	4628      	mov	r0, r5
 8020b02:	bd70      	pop	{r4, r5, r6, pc}

08020b04 <abort>:
 8020b04:	b508      	push	{r3, lr}
 8020b06:	2006      	movs	r0, #6
 8020b08:	f000 f8f0 	bl	8020cec <raise>
 8020b0c:	2001      	movs	r0, #1
 8020b0e:	f7e3 f96d 	bl	8003dec <_exit>
	...

08020b14 <_wcrtomb_r>:
 8020b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b16:	4c09      	ldr	r4, [pc, #36]	@ (8020b3c <_wcrtomb_r+0x28>)
 8020b18:	b085      	sub	sp, #20
 8020b1a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8020b1e:	4605      	mov	r5, r0
 8020b20:	461e      	mov	r6, r3
 8020b22:	b909      	cbnz	r1, 8020b28 <_wcrtomb_r+0x14>
 8020b24:	460a      	mov	r2, r1
 8020b26:	a901      	add	r1, sp, #4
 8020b28:	47b8      	blx	r7
 8020b2a:	1c43      	adds	r3, r0, #1
 8020b2c:	bf01      	itttt	eq
 8020b2e:	2300      	moveq	r3, #0
 8020b30:	6033      	streq	r3, [r6, #0]
 8020b32:	238a      	moveq	r3, #138	@ 0x8a
 8020b34:	602b      	streq	r3, [r5, #0]
 8020b36:	b005      	add	sp, #20
 8020b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b3a:	bf00      	nop
 8020b3c:	2000068c 	.word	0x2000068c

08020b40 <__swhatbuf_r>:
 8020b40:	b570      	push	{r4, r5, r6, lr}
 8020b42:	460c      	mov	r4, r1
 8020b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b48:	2900      	cmp	r1, #0
 8020b4a:	b096      	sub	sp, #88	@ 0x58
 8020b4c:	4615      	mov	r5, r2
 8020b4e:	461e      	mov	r6, r3
 8020b50:	da07      	bge.n	8020b62 <__swhatbuf_r+0x22>
 8020b52:	89a1      	ldrh	r1, [r4, #12]
 8020b54:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8020b58:	d117      	bne.n	8020b8a <__swhatbuf_r+0x4a>
 8020b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020b5e:	4608      	mov	r0, r1
 8020b60:	e00f      	b.n	8020b82 <__swhatbuf_r+0x42>
 8020b62:	466a      	mov	r2, sp
 8020b64:	f000 f8ca 	bl	8020cfc <_fstat_r>
 8020b68:	2800      	cmp	r0, #0
 8020b6a:	dbf2      	blt.n	8020b52 <__swhatbuf_r+0x12>
 8020b6c:	9901      	ldr	r1, [sp, #4]
 8020b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020b76:	4259      	negs	r1, r3
 8020b78:	4159      	adcs	r1, r3
 8020b7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8020b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020b82:	6031      	str	r1, [r6, #0]
 8020b84:	602b      	str	r3, [r5, #0]
 8020b86:	b016      	add	sp, #88	@ 0x58
 8020b88:	bd70      	pop	{r4, r5, r6, pc}
 8020b8a:	2100      	movs	r1, #0
 8020b8c:	2340      	movs	r3, #64	@ 0x40
 8020b8e:	e7e6      	b.n	8020b5e <__swhatbuf_r+0x1e>

08020b90 <__smakebuf_r>:
 8020b90:	898b      	ldrh	r3, [r1, #12]
 8020b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020b94:	079d      	lsls	r5, r3, #30
 8020b96:	4606      	mov	r6, r0
 8020b98:	460c      	mov	r4, r1
 8020b9a:	d507      	bpl.n	8020bac <__smakebuf_r+0x1c>
 8020b9c:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8020ba0:	6023      	str	r3, [r4, #0]
 8020ba2:	6123      	str	r3, [r4, #16]
 8020ba4:	2301      	movs	r3, #1
 8020ba6:	6163      	str	r3, [r4, #20]
 8020ba8:	b003      	add	sp, #12
 8020baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020bac:	ab01      	add	r3, sp, #4
 8020bae:	466a      	mov	r2, sp
 8020bb0:	f7ff ffc6 	bl	8020b40 <__swhatbuf_r>
 8020bb4:	9f00      	ldr	r7, [sp, #0]
 8020bb6:	4605      	mov	r5, r0
 8020bb8:	4639      	mov	r1, r7
 8020bba:	4630      	mov	r0, r6
 8020bbc:	f7fb fe86 	bl	801c8cc <_malloc_r>
 8020bc0:	b948      	cbnz	r0, 8020bd6 <__smakebuf_r+0x46>
 8020bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020bc6:	059a      	lsls	r2, r3, #22
 8020bc8:	d4ee      	bmi.n	8020ba8 <__smakebuf_r+0x18>
 8020bca:	f023 0303 	bic.w	r3, r3, #3
 8020bce:	f043 0302 	orr.w	r3, r3, #2
 8020bd2:	81a3      	strh	r3, [r4, #12]
 8020bd4:	e7e2      	b.n	8020b9c <__smakebuf_r+0xc>
 8020bd6:	89a3      	ldrh	r3, [r4, #12]
 8020bd8:	6020      	str	r0, [r4, #0]
 8020bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020bde:	81a3      	strh	r3, [r4, #12]
 8020be0:	9b01      	ldr	r3, [sp, #4]
 8020be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020be6:	b15b      	cbz	r3, 8020c00 <__smakebuf_r+0x70>
 8020be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bec:	4630      	mov	r0, r6
 8020bee:	f000 f897 	bl	8020d20 <_isatty_r>
 8020bf2:	b128      	cbz	r0, 8020c00 <__smakebuf_r+0x70>
 8020bf4:	89a3      	ldrh	r3, [r4, #12]
 8020bf6:	f023 0303 	bic.w	r3, r3, #3
 8020bfa:	f043 0301 	orr.w	r3, r3, #1
 8020bfe:	81a3      	strh	r3, [r4, #12]
 8020c00:	89a3      	ldrh	r3, [r4, #12]
 8020c02:	431d      	orrs	r5, r3
 8020c04:	81a5      	strh	r5, [r4, #12]
 8020c06:	e7cf      	b.n	8020ba8 <__smakebuf_r+0x18>

08020c08 <__swbuf_r>:
 8020c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c0a:	460e      	mov	r6, r1
 8020c0c:	4614      	mov	r4, r2
 8020c0e:	4605      	mov	r5, r0
 8020c10:	b118      	cbz	r0, 8020c1a <__swbuf_r+0x12>
 8020c12:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8020c14:	b90b      	cbnz	r3, 8020c1a <__swbuf_r+0x12>
 8020c16:	f7fb fbcf 	bl	801c3b8 <__sinit>
 8020c1a:	69a3      	ldr	r3, [r4, #24]
 8020c1c:	60a3      	str	r3, [r4, #8]
 8020c1e:	89a3      	ldrh	r3, [r4, #12]
 8020c20:	0719      	lsls	r1, r3, #28
 8020c22:	d501      	bpl.n	8020c28 <__swbuf_r+0x20>
 8020c24:	6923      	ldr	r3, [r4, #16]
 8020c26:	b943      	cbnz	r3, 8020c3a <__swbuf_r+0x32>
 8020c28:	4621      	mov	r1, r4
 8020c2a:	4628      	mov	r0, r5
 8020c2c:	f7ff feaa 	bl	8020984 <__swsetup_r>
 8020c30:	b118      	cbz	r0, 8020c3a <__swbuf_r+0x32>
 8020c32:	f04f 37ff 	mov.w	r7, #4294967295
 8020c36:	4638      	mov	r0, r7
 8020c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c3e:	b2f6      	uxtb	r6, r6
 8020c40:	049a      	lsls	r2, r3, #18
 8020c42:	4637      	mov	r7, r6
 8020c44:	d406      	bmi.n	8020c54 <__swbuf_r+0x4c>
 8020c46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020c4a:	81a3      	strh	r3, [r4, #12]
 8020c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020c4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020c52:	6663      	str	r3, [r4, #100]	@ 0x64
 8020c54:	6823      	ldr	r3, [r4, #0]
 8020c56:	6922      	ldr	r2, [r4, #16]
 8020c58:	1a98      	subs	r0, r3, r2
 8020c5a:	6963      	ldr	r3, [r4, #20]
 8020c5c:	4283      	cmp	r3, r0
 8020c5e:	dc05      	bgt.n	8020c6c <__swbuf_r+0x64>
 8020c60:	4621      	mov	r1, r4
 8020c62:	4628      	mov	r0, r5
 8020c64:	f7fd fb34 	bl	801e2d0 <_fflush_r>
 8020c68:	2800      	cmp	r0, #0
 8020c6a:	d1e2      	bne.n	8020c32 <__swbuf_r+0x2a>
 8020c6c:	68a3      	ldr	r3, [r4, #8]
 8020c6e:	3b01      	subs	r3, #1
 8020c70:	60a3      	str	r3, [r4, #8]
 8020c72:	6823      	ldr	r3, [r4, #0]
 8020c74:	1c5a      	adds	r2, r3, #1
 8020c76:	6022      	str	r2, [r4, #0]
 8020c78:	701e      	strb	r6, [r3, #0]
 8020c7a:	6962      	ldr	r2, [r4, #20]
 8020c7c:	1c43      	adds	r3, r0, #1
 8020c7e:	429a      	cmp	r2, r3
 8020c80:	d004      	beq.n	8020c8c <__swbuf_r+0x84>
 8020c82:	89a3      	ldrh	r3, [r4, #12]
 8020c84:	07db      	lsls	r3, r3, #31
 8020c86:	d5d6      	bpl.n	8020c36 <__swbuf_r+0x2e>
 8020c88:	2e0a      	cmp	r6, #10
 8020c8a:	d1d4      	bne.n	8020c36 <__swbuf_r+0x2e>
 8020c8c:	4621      	mov	r1, r4
 8020c8e:	4628      	mov	r0, r5
 8020c90:	f7fd fb1e 	bl	801e2d0 <_fflush_r>
 8020c94:	2800      	cmp	r0, #0
 8020c96:	d0ce      	beq.n	8020c36 <__swbuf_r+0x2e>
 8020c98:	e7cb      	b.n	8020c32 <__swbuf_r+0x2a>

08020c9a <_raise_r>:
 8020c9a:	291f      	cmp	r1, #31
 8020c9c:	b538      	push	{r3, r4, r5, lr}
 8020c9e:	4605      	mov	r5, r0
 8020ca0:	460c      	mov	r4, r1
 8020ca2:	d904      	bls.n	8020cae <_raise_r+0x14>
 8020ca4:	2316      	movs	r3, #22
 8020ca6:	6003      	str	r3, [r0, #0]
 8020ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8020cac:	bd38      	pop	{r3, r4, r5, pc}
 8020cae:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8020cb2:	b112      	cbz	r2, 8020cba <_raise_r+0x20>
 8020cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020cb8:	b94b      	cbnz	r3, 8020cce <_raise_r+0x34>
 8020cba:	4628      	mov	r0, r5
 8020cbc:	f000 f852 	bl	8020d64 <_getpid_r>
 8020cc0:	4622      	mov	r2, r4
 8020cc2:	4601      	mov	r1, r0
 8020cc4:	4628      	mov	r0, r5
 8020cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cca:	f000 b839 	b.w	8020d40 <_kill_r>
 8020cce:	2b01      	cmp	r3, #1
 8020cd0:	d00a      	beq.n	8020ce8 <_raise_r+0x4e>
 8020cd2:	1c59      	adds	r1, r3, #1
 8020cd4:	d103      	bne.n	8020cde <_raise_r+0x44>
 8020cd6:	2316      	movs	r3, #22
 8020cd8:	6003      	str	r3, [r0, #0]
 8020cda:	2001      	movs	r0, #1
 8020cdc:	e7e6      	b.n	8020cac <_raise_r+0x12>
 8020cde:	2100      	movs	r1, #0
 8020ce0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	4798      	blx	r3
 8020ce8:	2000      	movs	r0, #0
 8020cea:	e7df      	b.n	8020cac <_raise_r+0x12>

08020cec <raise>:
 8020cec:	4b02      	ldr	r3, [pc, #8]	@ (8020cf8 <raise+0xc>)
 8020cee:	4601      	mov	r1, r0
 8020cf0:	6818      	ldr	r0, [r3, #0]
 8020cf2:	f7ff bfd2 	b.w	8020c9a <_raise_r>
 8020cf6:	bf00      	nop
 8020cf8:	20000150 	.word	0x20000150

08020cfc <_fstat_r>:
 8020cfc:	b538      	push	{r3, r4, r5, lr}
 8020cfe:	4d07      	ldr	r5, [pc, #28]	@ (8020d1c <_fstat_r+0x20>)
 8020d00:	2300      	movs	r3, #0
 8020d02:	4604      	mov	r4, r0
 8020d04:	4608      	mov	r0, r1
 8020d06:	4611      	mov	r1, r2
 8020d08:	602b      	str	r3, [r5, #0]
 8020d0a:	f7e3 f8bf 	bl	8003e8c <_fstat>
 8020d0e:	1c43      	adds	r3, r0, #1
 8020d10:	d102      	bne.n	8020d18 <_fstat_r+0x1c>
 8020d12:	682b      	ldr	r3, [r5, #0]
 8020d14:	b103      	cbz	r3, 8020d18 <_fstat_r+0x1c>
 8020d16:	6023      	str	r3, [r4, #0]
 8020d18:	bd38      	pop	{r3, r4, r5, pc}
 8020d1a:	bf00      	nop
 8020d1c:	2000d4a4 	.word	0x2000d4a4

08020d20 <_isatty_r>:
 8020d20:	b538      	push	{r3, r4, r5, lr}
 8020d22:	4d06      	ldr	r5, [pc, #24]	@ (8020d3c <_isatty_r+0x1c>)
 8020d24:	2300      	movs	r3, #0
 8020d26:	4604      	mov	r4, r0
 8020d28:	4608      	mov	r0, r1
 8020d2a:	602b      	str	r3, [r5, #0]
 8020d2c:	f7e3 f8be 	bl	8003eac <_isatty>
 8020d30:	1c43      	adds	r3, r0, #1
 8020d32:	d102      	bne.n	8020d3a <_isatty_r+0x1a>
 8020d34:	682b      	ldr	r3, [r5, #0]
 8020d36:	b103      	cbz	r3, 8020d3a <_isatty_r+0x1a>
 8020d38:	6023      	str	r3, [r4, #0]
 8020d3a:	bd38      	pop	{r3, r4, r5, pc}
 8020d3c:	2000d4a4 	.word	0x2000d4a4

08020d40 <_kill_r>:
 8020d40:	b538      	push	{r3, r4, r5, lr}
 8020d42:	4d07      	ldr	r5, [pc, #28]	@ (8020d60 <_kill_r+0x20>)
 8020d44:	2300      	movs	r3, #0
 8020d46:	4604      	mov	r4, r0
 8020d48:	4608      	mov	r0, r1
 8020d4a:	4611      	mov	r1, r2
 8020d4c:	602b      	str	r3, [r5, #0]
 8020d4e:	f7e3 f83d 	bl	8003dcc <_kill>
 8020d52:	1c43      	adds	r3, r0, #1
 8020d54:	d102      	bne.n	8020d5c <_kill_r+0x1c>
 8020d56:	682b      	ldr	r3, [r5, #0]
 8020d58:	b103      	cbz	r3, 8020d5c <_kill_r+0x1c>
 8020d5a:	6023      	str	r3, [r4, #0]
 8020d5c:	bd38      	pop	{r3, r4, r5, pc}
 8020d5e:	bf00      	nop
 8020d60:	2000d4a4 	.word	0x2000d4a4

08020d64 <_getpid_r>:
 8020d64:	f7e3 b82a 	b.w	8003dbc <_getpid>

08020d68 <atan2>:
 8020d68:	f000 bdce 	b.w	8021908 <__ieee754_atan2>

08020d6c <pow>:
 8020d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d6e:	ed2d 8b02 	vpush	{d8}
 8020d72:	eeb0 8a40 	vmov.f32	s16, s0
 8020d76:	eef0 8a60 	vmov.f32	s17, s1
 8020d7a:	ec55 4b11 	vmov	r4, r5, d1
 8020d7e:	f000 fe8b 	bl	8021a98 <__ieee754_pow>
 8020d82:	4622      	mov	r2, r4
 8020d84:	462b      	mov	r3, r5
 8020d86:	4620      	mov	r0, r4
 8020d88:	4629      	mov	r1, r5
 8020d8a:	ec57 6b10 	vmov	r6, r7, d0
 8020d8e:	f7df fecd 	bl	8000b2c <__aeabi_dcmpun>
 8020d92:	2800      	cmp	r0, #0
 8020d94:	d13b      	bne.n	8020e0e <pow+0xa2>
 8020d96:	ec51 0b18 	vmov	r0, r1, d8
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	2300      	movs	r3, #0
 8020d9e:	f7df fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8020da2:	b1b8      	cbz	r0, 8020dd4 <pow+0x68>
 8020da4:	2200      	movs	r2, #0
 8020da6:	2300      	movs	r3, #0
 8020da8:	4620      	mov	r0, r4
 8020daa:	4629      	mov	r1, r5
 8020dac:	f7df fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8020db0:	2800      	cmp	r0, #0
 8020db2:	d146      	bne.n	8020e42 <pow+0xd6>
 8020db4:	ec45 4b10 	vmov	d0, r4, r5
 8020db8:	f000 fabe 	bl	8021338 <finite>
 8020dbc:	b338      	cbz	r0, 8020e0e <pow+0xa2>
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	4620      	mov	r0, r4
 8020dc4:	4629      	mov	r1, r5
 8020dc6:	f7df fe89 	bl	8000adc <__aeabi_dcmplt>
 8020dca:	b300      	cbz	r0, 8020e0e <pow+0xa2>
 8020dcc:	f7fb fc1c 	bl	801c608 <__errno>
 8020dd0:	2322      	movs	r3, #34	@ 0x22
 8020dd2:	e01b      	b.n	8020e0c <pow+0xa0>
 8020dd4:	ec47 6b10 	vmov	d0, r6, r7
 8020dd8:	f000 faae 	bl	8021338 <finite>
 8020ddc:	b9e0      	cbnz	r0, 8020e18 <pow+0xac>
 8020dde:	eeb0 0a48 	vmov.f32	s0, s16
 8020de2:	eef0 0a68 	vmov.f32	s1, s17
 8020de6:	f000 faa7 	bl	8021338 <finite>
 8020dea:	b1a8      	cbz	r0, 8020e18 <pow+0xac>
 8020dec:	ec45 4b10 	vmov	d0, r4, r5
 8020df0:	f000 faa2 	bl	8021338 <finite>
 8020df4:	b180      	cbz	r0, 8020e18 <pow+0xac>
 8020df6:	4632      	mov	r2, r6
 8020df8:	463b      	mov	r3, r7
 8020dfa:	4630      	mov	r0, r6
 8020dfc:	4639      	mov	r1, r7
 8020dfe:	f7df fe95 	bl	8000b2c <__aeabi_dcmpun>
 8020e02:	2800      	cmp	r0, #0
 8020e04:	d0e2      	beq.n	8020dcc <pow+0x60>
 8020e06:	f7fb fbff 	bl	801c608 <__errno>
 8020e0a:	2321      	movs	r3, #33	@ 0x21
 8020e0c:	6003      	str	r3, [r0, #0]
 8020e0e:	ecbd 8b02 	vpop	{d8}
 8020e12:	ec47 6b10 	vmov	d0, r6, r7
 8020e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e18:	2200      	movs	r2, #0
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	4630      	mov	r0, r6
 8020e1e:	4639      	mov	r1, r7
 8020e20:	f7df fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8020e24:	2800      	cmp	r0, #0
 8020e26:	d0f2      	beq.n	8020e0e <pow+0xa2>
 8020e28:	eeb0 0a48 	vmov.f32	s0, s16
 8020e2c:	eef0 0a68 	vmov.f32	s1, s17
 8020e30:	f000 fa82 	bl	8021338 <finite>
 8020e34:	2800      	cmp	r0, #0
 8020e36:	d0ea      	beq.n	8020e0e <pow+0xa2>
 8020e38:	ec45 4b10 	vmov	d0, r4, r5
 8020e3c:	f000 fa7c 	bl	8021338 <finite>
 8020e40:	e7c3      	b.n	8020dca <pow+0x5e>
 8020e42:	4f01      	ldr	r7, [pc, #4]	@ (8020e48 <pow+0xdc>)
 8020e44:	2600      	movs	r6, #0
 8020e46:	e7e2      	b.n	8020e0e <pow+0xa2>
 8020e48:	3ff00000 	.word	0x3ff00000

08020e4c <sqrt>:
 8020e4c:	b538      	push	{r3, r4, r5, lr}
 8020e4e:	ed2d 8b02 	vpush	{d8}
 8020e52:	ec55 4b10 	vmov	r4, r5, d0
 8020e56:	f000 fa7b 	bl	8021350 <__ieee754_sqrt>
 8020e5a:	4622      	mov	r2, r4
 8020e5c:	462b      	mov	r3, r5
 8020e5e:	4620      	mov	r0, r4
 8020e60:	4629      	mov	r1, r5
 8020e62:	eeb0 8a40 	vmov.f32	s16, s0
 8020e66:	eef0 8a60 	vmov.f32	s17, s1
 8020e6a:	f7df fe5f 	bl	8000b2c <__aeabi_dcmpun>
 8020e6e:	b990      	cbnz	r0, 8020e96 <sqrt+0x4a>
 8020e70:	2200      	movs	r2, #0
 8020e72:	2300      	movs	r3, #0
 8020e74:	4620      	mov	r0, r4
 8020e76:	4629      	mov	r1, r5
 8020e78:	f7df fe30 	bl	8000adc <__aeabi_dcmplt>
 8020e7c:	b158      	cbz	r0, 8020e96 <sqrt+0x4a>
 8020e7e:	f7fb fbc3 	bl	801c608 <__errno>
 8020e82:	2321      	movs	r3, #33	@ 0x21
 8020e84:	6003      	str	r3, [r0, #0]
 8020e86:	2200      	movs	r2, #0
 8020e88:	2300      	movs	r3, #0
 8020e8a:	4610      	mov	r0, r2
 8020e8c:	4619      	mov	r1, r3
 8020e8e:	f7df fcdd 	bl	800084c <__aeabi_ddiv>
 8020e92:	ec41 0b18 	vmov	d8, r0, r1
 8020e96:	eeb0 0a48 	vmov.f32	s0, s16
 8020e9a:	eef0 0a68 	vmov.f32	s1, s17
 8020e9e:	ecbd 8b02 	vpop	{d8}
 8020ea2:	bd38      	pop	{r3, r4, r5, pc}
 8020ea4:	0000      	movs	r0, r0
	...

08020ea8 <atan>:
 8020ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eac:	ec55 4b10 	vmov	r4, r5, d0
 8020eb0:	4bbf      	ldr	r3, [pc, #764]	@ (80211b0 <atan+0x308>)
 8020eb2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8020eb6:	429e      	cmp	r6, r3
 8020eb8:	46ab      	mov	fp, r5
 8020eba:	d918      	bls.n	8020eee <atan+0x46>
 8020ebc:	4bbd      	ldr	r3, [pc, #756]	@ (80211b4 <atan+0x30c>)
 8020ebe:	429e      	cmp	r6, r3
 8020ec0:	d801      	bhi.n	8020ec6 <atan+0x1e>
 8020ec2:	d109      	bne.n	8020ed8 <atan+0x30>
 8020ec4:	b144      	cbz	r4, 8020ed8 <atan+0x30>
 8020ec6:	4622      	mov	r2, r4
 8020ec8:	462b      	mov	r3, r5
 8020eca:	4620      	mov	r0, r4
 8020ecc:	4629      	mov	r1, r5
 8020ece:	f7df f9dd 	bl	800028c <__adddf3>
 8020ed2:	4604      	mov	r4, r0
 8020ed4:	460d      	mov	r5, r1
 8020ed6:	e006      	b.n	8020ee6 <atan+0x3e>
 8020ed8:	f1bb 0f00 	cmp.w	fp, #0
 8020edc:	f340 812b 	ble.w	8021136 <atan+0x28e>
 8020ee0:	a597      	add	r5, pc, #604	@ (adr r5, 8021140 <atan+0x298>)
 8020ee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020ee6:	ec45 4b10 	vmov	d0, r4, r5
 8020eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eee:	4bb2      	ldr	r3, [pc, #712]	@ (80211b8 <atan+0x310>)
 8020ef0:	429e      	cmp	r6, r3
 8020ef2:	d813      	bhi.n	8020f1c <atan+0x74>
 8020ef4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8020ef8:	429e      	cmp	r6, r3
 8020efa:	d80c      	bhi.n	8020f16 <atan+0x6e>
 8020efc:	a392      	add	r3, pc, #584	@ (adr r3, 8021148 <atan+0x2a0>)
 8020efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f02:	4620      	mov	r0, r4
 8020f04:	4629      	mov	r1, r5
 8020f06:	f7df f9c1 	bl	800028c <__adddf3>
 8020f0a:	4bac      	ldr	r3, [pc, #688]	@ (80211bc <atan+0x314>)
 8020f0c:	2200      	movs	r2, #0
 8020f0e:	f7df fe03 	bl	8000b18 <__aeabi_dcmpgt>
 8020f12:	2800      	cmp	r0, #0
 8020f14:	d1e7      	bne.n	8020ee6 <atan+0x3e>
 8020f16:	f04f 3aff 	mov.w	sl, #4294967295
 8020f1a:	e029      	b.n	8020f70 <atan+0xc8>
 8020f1c:	f000 f9b0 	bl	8021280 <fabs>
 8020f20:	4ba7      	ldr	r3, [pc, #668]	@ (80211c0 <atan+0x318>)
 8020f22:	429e      	cmp	r6, r3
 8020f24:	ec55 4b10 	vmov	r4, r5, d0
 8020f28:	f200 80bc 	bhi.w	80210a4 <atan+0x1fc>
 8020f2c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8020f30:	429e      	cmp	r6, r3
 8020f32:	f200 809e 	bhi.w	8021072 <atan+0x1ca>
 8020f36:	4622      	mov	r2, r4
 8020f38:	462b      	mov	r3, r5
 8020f3a:	4620      	mov	r0, r4
 8020f3c:	4629      	mov	r1, r5
 8020f3e:	f7df f9a5 	bl	800028c <__adddf3>
 8020f42:	4b9e      	ldr	r3, [pc, #632]	@ (80211bc <atan+0x314>)
 8020f44:	2200      	movs	r2, #0
 8020f46:	f7df f99f 	bl	8000288 <__aeabi_dsub>
 8020f4a:	2200      	movs	r2, #0
 8020f4c:	4606      	mov	r6, r0
 8020f4e:	460f      	mov	r7, r1
 8020f50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020f54:	4620      	mov	r0, r4
 8020f56:	4629      	mov	r1, r5
 8020f58:	f7df f998 	bl	800028c <__adddf3>
 8020f5c:	4602      	mov	r2, r0
 8020f5e:	460b      	mov	r3, r1
 8020f60:	4630      	mov	r0, r6
 8020f62:	4639      	mov	r1, r7
 8020f64:	f7df fc72 	bl	800084c <__aeabi_ddiv>
 8020f68:	f04f 0a00 	mov.w	sl, #0
 8020f6c:	4604      	mov	r4, r0
 8020f6e:	460d      	mov	r5, r1
 8020f70:	4622      	mov	r2, r4
 8020f72:	462b      	mov	r3, r5
 8020f74:	4620      	mov	r0, r4
 8020f76:	4629      	mov	r1, r5
 8020f78:	f7df fb3e 	bl	80005f8 <__aeabi_dmul>
 8020f7c:	4602      	mov	r2, r0
 8020f7e:	460b      	mov	r3, r1
 8020f80:	4680      	mov	r8, r0
 8020f82:	4689      	mov	r9, r1
 8020f84:	f7df fb38 	bl	80005f8 <__aeabi_dmul>
 8020f88:	a371      	add	r3, pc, #452	@ (adr r3, 8021150 <atan+0x2a8>)
 8020f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f8e:	4606      	mov	r6, r0
 8020f90:	460f      	mov	r7, r1
 8020f92:	f7df fb31 	bl	80005f8 <__aeabi_dmul>
 8020f96:	a370      	add	r3, pc, #448	@ (adr r3, 8021158 <atan+0x2b0>)
 8020f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f9c:	f7df f976 	bl	800028c <__adddf3>
 8020fa0:	4632      	mov	r2, r6
 8020fa2:	463b      	mov	r3, r7
 8020fa4:	f7df fb28 	bl	80005f8 <__aeabi_dmul>
 8020fa8:	a36d      	add	r3, pc, #436	@ (adr r3, 8021160 <atan+0x2b8>)
 8020faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fae:	f7df f96d 	bl	800028c <__adddf3>
 8020fb2:	4632      	mov	r2, r6
 8020fb4:	463b      	mov	r3, r7
 8020fb6:	f7df fb1f 	bl	80005f8 <__aeabi_dmul>
 8020fba:	a36b      	add	r3, pc, #428	@ (adr r3, 8021168 <atan+0x2c0>)
 8020fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc0:	f7df f964 	bl	800028c <__adddf3>
 8020fc4:	4632      	mov	r2, r6
 8020fc6:	463b      	mov	r3, r7
 8020fc8:	f7df fb16 	bl	80005f8 <__aeabi_dmul>
 8020fcc:	a368      	add	r3, pc, #416	@ (adr r3, 8021170 <atan+0x2c8>)
 8020fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fd2:	f7df f95b 	bl	800028c <__adddf3>
 8020fd6:	4632      	mov	r2, r6
 8020fd8:	463b      	mov	r3, r7
 8020fda:	f7df fb0d 	bl	80005f8 <__aeabi_dmul>
 8020fde:	a366      	add	r3, pc, #408	@ (adr r3, 8021178 <atan+0x2d0>)
 8020fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fe4:	f7df f952 	bl	800028c <__adddf3>
 8020fe8:	4642      	mov	r2, r8
 8020fea:	464b      	mov	r3, r9
 8020fec:	f7df fb04 	bl	80005f8 <__aeabi_dmul>
 8020ff0:	a363      	add	r3, pc, #396	@ (adr r3, 8021180 <atan+0x2d8>)
 8020ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ff6:	4680      	mov	r8, r0
 8020ff8:	4689      	mov	r9, r1
 8020ffa:	4630      	mov	r0, r6
 8020ffc:	4639      	mov	r1, r7
 8020ffe:	f7df fafb 	bl	80005f8 <__aeabi_dmul>
 8021002:	a361      	add	r3, pc, #388	@ (adr r3, 8021188 <atan+0x2e0>)
 8021004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021008:	f7df f93e 	bl	8000288 <__aeabi_dsub>
 802100c:	4632      	mov	r2, r6
 802100e:	463b      	mov	r3, r7
 8021010:	f7df faf2 	bl	80005f8 <__aeabi_dmul>
 8021014:	a35e      	add	r3, pc, #376	@ (adr r3, 8021190 <atan+0x2e8>)
 8021016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802101a:	f7df f935 	bl	8000288 <__aeabi_dsub>
 802101e:	4632      	mov	r2, r6
 8021020:	463b      	mov	r3, r7
 8021022:	f7df fae9 	bl	80005f8 <__aeabi_dmul>
 8021026:	a35c      	add	r3, pc, #368	@ (adr r3, 8021198 <atan+0x2f0>)
 8021028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802102c:	f7df f92c 	bl	8000288 <__aeabi_dsub>
 8021030:	4632      	mov	r2, r6
 8021032:	463b      	mov	r3, r7
 8021034:	f7df fae0 	bl	80005f8 <__aeabi_dmul>
 8021038:	a359      	add	r3, pc, #356	@ (adr r3, 80211a0 <atan+0x2f8>)
 802103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802103e:	f7df f923 	bl	8000288 <__aeabi_dsub>
 8021042:	4632      	mov	r2, r6
 8021044:	463b      	mov	r3, r7
 8021046:	f7df fad7 	bl	80005f8 <__aeabi_dmul>
 802104a:	4602      	mov	r2, r0
 802104c:	460b      	mov	r3, r1
 802104e:	4640      	mov	r0, r8
 8021050:	4649      	mov	r1, r9
 8021052:	f7df f91b 	bl	800028c <__adddf3>
 8021056:	4622      	mov	r2, r4
 8021058:	462b      	mov	r3, r5
 802105a:	f7df facd 	bl	80005f8 <__aeabi_dmul>
 802105e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8021062:	4602      	mov	r2, r0
 8021064:	460b      	mov	r3, r1
 8021066:	d148      	bne.n	80210fa <atan+0x252>
 8021068:	4620      	mov	r0, r4
 802106a:	4629      	mov	r1, r5
 802106c:	f7df f90c 	bl	8000288 <__aeabi_dsub>
 8021070:	e72f      	b.n	8020ed2 <atan+0x2a>
 8021072:	4b52      	ldr	r3, [pc, #328]	@ (80211bc <atan+0x314>)
 8021074:	2200      	movs	r2, #0
 8021076:	4620      	mov	r0, r4
 8021078:	4629      	mov	r1, r5
 802107a:	f7df f905 	bl	8000288 <__aeabi_dsub>
 802107e:	4b4f      	ldr	r3, [pc, #316]	@ (80211bc <atan+0x314>)
 8021080:	4606      	mov	r6, r0
 8021082:	460f      	mov	r7, r1
 8021084:	2200      	movs	r2, #0
 8021086:	4620      	mov	r0, r4
 8021088:	4629      	mov	r1, r5
 802108a:	f7df f8ff 	bl	800028c <__adddf3>
 802108e:	4602      	mov	r2, r0
 8021090:	460b      	mov	r3, r1
 8021092:	4630      	mov	r0, r6
 8021094:	4639      	mov	r1, r7
 8021096:	f7df fbd9 	bl	800084c <__aeabi_ddiv>
 802109a:	f04f 0a01 	mov.w	sl, #1
 802109e:	4604      	mov	r4, r0
 80210a0:	460d      	mov	r5, r1
 80210a2:	e765      	b.n	8020f70 <atan+0xc8>
 80210a4:	4b47      	ldr	r3, [pc, #284]	@ (80211c4 <atan+0x31c>)
 80210a6:	429e      	cmp	r6, r3
 80210a8:	d21c      	bcs.n	80210e4 <atan+0x23c>
 80210aa:	4b47      	ldr	r3, [pc, #284]	@ (80211c8 <atan+0x320>)
 80210ac:	2200      	movs	r2, #0
 80210ae:	4620      	mov	r0, r4
 80210b0:	4629      	mov	r1, r5
 80210b2:	f7df f8e9 	bl	8000288 <__aeabi_dsub>
 80210b6:	4b44      	ldr	r3, [pc, #272]	@ (80211c8 <atan+0x320>)
 80210b8:	4606      	mov	r6, r0
 80210ba:	460f      	mov	r7, r1
 80210bc:	2200      	movs	r2, #0
 80210be:	4620      	mov	r0, r4
 80210c0:	4629      	mov	r1, r5
 80210c2:	f7df fa99 	bl	80005f8 <__aeabi_dmul>
 80210c6:	4b3d      	ldr	r3, [pc, #244]	@ (80211bc <atan+0x314>)
 80210c8:	2200      	movs	r2, #0
 80210ca:	f7df f8df 	bl	800028c <__adddf3>
 80210ce:	4602      	mov	r2, r0
 80210d0:	460b      	mov	r3, r1
 80210d2:	4630      	mov	r0, r6
 80210d4:	4639      	mov	r1, r7
 80210d6:	f7df fbb9 	bl	800084c <__aeabi_ddiv>
 80210da:	f04f 0a02 	mov.w	sl, #2
 80210de:	4604      	mov	r4, r0
 80210e0:	460d      	mov	r5, r1
 80210e2:	e745      	b.n	8020f70 <atan+0xc8>
 80210e4:	4622      	mov	r2, r4
 80210e6:	462b      	mov	r3, r5
 80210e8:	4938      	ldr	r1, [pc, #224]	@ (80211cc <atan+0x324>)
 80210ea:	2000      	movs	r0, #0
 80210ec:	f7df fbae 	bl	800084c <__aeabi_ddiv>
 80210f0:	f04f 0a03 	mov.w	sl, #3
 80210f4:	4604      	mov	r4, r0
 80210f6:	460d      	mov	r5, r1
 80210f8:	e73a      	b.n	8020f70 <atan+0xc8>
 80210fa:	4b35      	ldr	r3, [pc, #212]	@ (80211d0 <atan+0x328>)
 80210fc:	4e35      	ldr	r6, [pc, #212]	@ (80211d4 <atan+0x32c>)
 80210fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021106:	f7df f8bf 	bl	8000288 <__aeabi_dsub>
 802110a:	4622      	mov	r2, r4
 802110c:	462b      	mov	r3, r5
 802110e:	f7df f8bb 	bl	8000288 <__aeabi_dsub>
 8021112:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8021116:	4602      	mov	r2, r0
 8021118:	460b      	mov	r3, r1
 802111a:	e9d6 0100 	ldrd	r0, r1, [r6]
 802111e:	f7df f8b3 	bl	8000288 <__aeabi_dsub>
 8021122:	f1bb 0f00 	cmp.w	fp, #0
 8021126:	4604      	mov	r4, r0
 8021128:	460d      	mov	r5, r1
 802112a:	f6bf aedc 	bge.w	8020ee6 <atan+0x3e>
 802112e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021132:	461d      	mov	r5, r3
 8021134:	e6d7      	b.n	8020ee6 <atan+0x3e>
 8021136:	a51c      	add	r5, pc, #112	@ (adr r5, 80211a8 <atan+0x300>)
 8021138:	e9d5 4500 	ldrd	r4, r5, [r5]
 802113c:	e6d3      	b.n	8020ee6 <atan+0x3e>
 802113e:	bf00      	nop
 8021140:	54442d18 	.word	0x54442d18
 8021144:	3ff921fb 	.word	0x3ff921fb
 8021148:	8800759c 	.word	0x8800759c
 802114c:	7e37e43c 	.word	0x7e37e43c
 8021150:	e322da11 	.word	0xe322da11
 8021154:	3f90ad3a 	.word	0x3f90ad3a
 8021158:	24760deb 	.word	0x24760deb
 802115c:	3fa97b4b 	.word	0x3fa97b4b
 8021160:	a0d03d51 	.word	0xa0d03d51
 8021164:	3fb10d66 	.word	0x3fb10d66
 8021168:	c54c206e 	.word	0xc54c206e
 802116c:	3fb745cd 	.word	0x3fb745cd
 8021170:	920083ff 	.word	0x920083ff
 8021174:	3fc24924 	.word	0x3fc24924
 8021178:	5555550d 	.word	0x5555550d
 802117c:	3fd55555 	.word	0x3fd55555
 8021180:	2c6a6c2f 	.word	0x2c6a6c2f
 8021184:	bfa2b444 	.word	0xbfa2b444
 8021188:	52defd9a 	.word	0x52defd9a
 802118c:	3fadde2d 	.word	0x3fadde2d
 8021190:	af749a6d 	.word	0xaf749a6d
 8021194:	3fb3b0f2 	.word	0x3fb3b0f2
 8021198:	fe231671 	.word	0xfe231671
 802119c:	3fbc71c6 	.word	0x3fbc71c6
 80211a0:	9998ebc4 	.word	0x9998ebc4
 80211a4:	3fc99999 	.word	0x3fc99999
 80211a8:	54442d18 	.word	0x54442d18
 80211ac:	bff921fb 	.word	0xbff921fb
 80211b0:	440fffff 	.word	0x440fffff
 80211b4:	7ff00000 	.word	0x7ff00000
 80211b8:	3fdbffff 	.word	0x3fdbffff
 80211bc:	3ff00000 	.word	0x3ff00000
 80211c0:	3ff2ffff 	.word	0x3ff2ffff
 80211c4:	40038000 	.word	0x40038000
 80211c8:	3ff80000 	.word	0x3ff80000
 80211cc:	bff00000 	.word	0xbff00000
 80211d0:	08023ca0 	.word	0x08023ca0
 80211d4:	08023cc0 	.word	0x08023cc0

080211d8 <cos>:
 80211d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211da:	ec53 2b10 	vmov	r2, r3, d0
 80211de:	4826      	ldr	r0, [pc, #152]	@ (8021278 <cos+0xa0>)
 80211e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80211e4:	4281      	cmp	r1, r0
 80211e6:	d806      	bhi.n	80211f6 <cos+0x1e>
 80211e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8021270 <cos+0x98>
 80211ec:	b005      	add	sp, #20
 80211ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80211f2:	f000 ba05 	b.w	8021600 <__kernel_cos>
 80211f6:	4821      	ldr	r0, [pc, #132]	@ (802127c <cos+0xa4>)
 80211f8:	4281      	cmp	r1, r0
 80211fa:	d908      	bls.n	802120e <cos+0x36>
 80211fc:	4610      	mov	r0, r2
 80211fe:	4619      	mov	r1, r3
 8021200:	f7df f842 	bl	8000288 <__aeabi_dsub>
 8021204:	ec41 0b10 	vmov	d0, r0, r1
 8021208:	b005      	add	sp, #20
 802120a:	f85d fb04 	ldr.w	pc, [sp], #4
 802120e:	4668      	mov	r0, sp
 8021210:	f001 f986 	bl	8022520 <__ieee754_rem_pio2>
 8021214:	f000 0003 	and.w	r0, r0, #3
 8021218:	2801      	cmp	r0, #1
 802121a:	d00b      	beq.n	8021234 <cos+0x5c>
 802121c:	2802      	cmp	r0, #2
 802121e:	d015      	beq.n	802124c <cos+0x74>
 8021220:	b9d8      	cbnz	r0, 802125a <cos+0x82>
 8021222:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021226:	ed9d 0b00 	vldr	d0, [sp]
 802122a:	f000 f9e9 	bl	8021600 <__kernel_cos>
 802122e:	ec51 0b10 	vmov	r0, r1, d0
 8021232:	e7e7      	b.n	8021204 <cos+0x2c>
 8021234:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021238:	ed9d 0b00 	vldr	d0, [sp]
 802123c:	f000 faa8 	bl	8021790 <__kernel_sin>
 8021240:	ec53 2b10 	vmov	r2, r3, d0
 8021244:	4610      	mov	r0, r2
 8021246:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 802124a:	e7db      	b.n	8021204 <cos+0x2c>
 802124c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021250:	ed9d 0b00 	vldr	d0, [sp]
 8021254:	f000 f9d4 	bl	8021600 <__kernel_cos>
 8021258:	e7f2      	b.n	8021240 <cos+0x68>
 802125a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802125e:	ed9d 0b00 	vldr	d0, [sp]
 8021262:	2001      	movs	r0, #1
 8021264:	f000 fa94 	bl	8021790 <__kernel_sin>
 8021268:	e7e1      	b.n	802122e <cos+0x56>
 802126a:	bf00      	nop
 802126c:	f3af 8000 	nop.w
	...
 8021278:	3fe921fb 	.word	0x3fe921fb
 802127c:	7fefffff 	.word	0x7fefffff

08021280 <fabs>:
 8021280:	ec51 0b10 	vmov	r0, r1, d0
 8021284:	4602      	mov	r2, r0
 8021286:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802128a:	ec43 2b10 	vmov	d0, r2, r3
 802128e:	4770      	bx	lr

08021290 <sin>:
 8021290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021292:	ec53 2b10 	vmov	r2, r3, d0
 8021296:	4826      	ldr	r0, [pc, #152]	@ (8021330 <sin+0xa0>)
 8021298:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802129c:	4281      	cmp	r1, r0
 802129e:	d807      	bhi.n	80212b0 <sin+0x20>
 80212a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8021328 <sin+0x98>
 80212a4:	2000      	movs	r0, #0
 80212a6:	b005      	add	sp, #20
 80212a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80212ac:	f000 ba70 	b.w	8021790 <__kernel_sin>
 80212b0:	4820      	ldr	r0, [pc, #128]	@ (8021334 <sin+0xa4>)
 80212b2:	4281      	cmp	r1, r0
 80212b4:	d908      	bls.n	80212c8 <sin+0x38>
 80212b6:	4610      	mov	r0, r2
 80212b8:	4619      	mov	r1, r3
 80212ba:	f7de ffe5 	bl	8000288 <__aeabi_dsub>
 80212be:	ec41 0b10 	vmov	d0, r0, r1
 80212c2:	b005      	add	sp, #20
 80212c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80212c8:	4668      	mov	r0, sp
 80212ca:	f001 f929 	bl	8022520 <__ieee754_rem_pio2>
 80212ce:	f000 0003 	and.w	r0, r0, #3
 80212d2:	2801      	cmp	r0, #1
 80212d4:	d00c      	beq.n	80212f0 <sin+0x60>
 80212d6:	2802      	cmp	r0, #2
 80212d8:	d011      	beq.n	80212fe <sin+0x6e>
 80212da:	b9e8      	cbnz	r0, 8021318 <sin+0x88>
 80212dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80212e0:	ed9d 0b00 	vldr	d0, [sp]
 80212e4:	2001      	movs	r0, #1
 80212e6:	f000 fa53 	bl	8021790 <__kernel_sin>
 80212ea:	ec51 0b10 	vmov	r0, r1, d0
 80212ee:	e7e6      	b.n	80212be <sin+0x2e>
 80212f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80212f4:	ed9d 0b00 	vldr	d0, [sp]
 80212f8:	f000 f982 	bl	8021600 <__kernel_cos>
 80212fc:	e7f5      	b.n	80212ea <sin+0x5a>
 80212fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021302:	ed9d 0b00 	vldr	d0, [sp]
 8021306:	2001      	movs	r0, #1
 8021308:	f000 fa42 	bl	8021790 <__kernel_sin>
 802130c:	ec53 2b10 	vmov	r2, r3, d0
 8021310:	4610      	mov	r0, r2
 8021312:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8021316:	e7d2      	b.n	80212be <sin+0x2e>
 8021318:	ed9d 1b02 	vldr	d1, [sp, #8]
 802131c:	ed9d 0b00 	vldr	d0, [sp]
 8021320:	f000 f96e 	bl	8021600 <__kernel_cos>
 8021324:	e7f2      	b.n	802130c <sin+0x7c>
 8021326:	bf00      	nop
	...
 8021330:	3fe921fb 	.word	0x3fe921fb
 8021334:	7fefffff 	.word	0x7fefffff

08021338 <finite>:
 8021338:	b082      	sub	sp, #8
 802133a:	ed8d 0b00 	vstr	d0, [sp]
 802133e:	9801      	ldr	r0, [sp, #4]
 8021340:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8021344:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8021348:	0fc0      	lsrs	r0, r0, #31
 802134a:	b002      	add	sp, #8
 802134c:	4770      	bx	lr
	...

08021350 <__ieee754_sqrt>:
 8021350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021354:	4a68      	ldr	r2, [pc, #416]	@ (80214f8 <__ieee754_sqrt+0x1a8>)
 8021356:	ec55 4b10 	vmov	r4, r5, d0
 802135a:	43aa      	bics	r2, r5
 802135c:	462b      	mov	r3, r5
 802135e:	4621      	mov	r1, r4
 8021360:	d110      	bne.n	8021384 <__ieee754_sqrt+0x34>
 8021362:	4622      	mov	r2, r4
 8021364:	4620      	mov	r0, r4
 8021366:	4629      	mov	r1, r5
 8021368:	f7df f946 	bl	80005f8 <__aeabi_dmul>
 802136c:	4602      	mov	r2, r0
 802136e:	460b      	mov	r3, r1
 8021370:	4620      	mov	r0, r4
 8021372:	4629      	mov	r1, r5
 8021374:	f7de ff8a 	bl	800028c <__adddf3>
 8021378:	4604      	mov	r4, r0
 802137a:	460d      	mov	r5, r1
 802137c:	ec45 4b10 	vmov	d0, r4, r5
 8021380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021384:	2d00      	cmp	r5, #0
 8021386:	dc0e      	bgt.n	80213a6 <__ieee754_sqrt+0x56>
 8021388:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802138c:	4322      	orrs	r2, r4
 802138e:	d0f5      	beq.n	802137c <__ieee754_sqrt+0x2c>
 8021390:	b19d      	cbz	r5, 80213ba <__ieee754_sqrt+0x6a>
 8021392:	4622      	mov	r2, r4
 8021394:	4620      	mov	r0, r4
 8021396:	4629      	mov	r1, r5
 8021398:	f7de ff76 	bl	8000288 <__aeabi_dsub>
 802139c:	4602      	mov	r2, r0
 802139e:	460b      	mov	r3, r1
 80213a0:	f7df fa54 	bl	800084c <__aeabi_ddiv>
 80213a4:	e7e8      	b.n	8021378 <__ieee754_sqrt+0x28>
 80213a6:	152a      	asrs	r2, r5, #20
 80213a8:	d115      	bne.n	80213d6 <__ieee754_sqrt+0x86>
 80213aa:	2000      	movs	r0, #0
 80213ac:	e009      	b.n	80213c2 <__ieee754_sqrt+0x72>
 80213ae:	0acb      	lsrs	r3, r1, #11
 80213b0:	3a15      	subs	r2, #21
 80213b2:	0549      	lsls	r1, r1, #21
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d0fa      	beq.n	80213ae <__ieee754_sqrt+0x5e>
 80213b8:	e7f7      	b.n	80213aa <__ieee754_sqrt+0x5a>
 80213ba:	462a      	mov	r2, r5
 80213bc:	e7fa      	b.n	80213b4 <__ieee754_sqrt+0x64>
 80213be:	005b      	lsls	r3, r3, #1
 80213c0:	3001      	adds	r0, #1
 80213c2:	02dc      	lsls	r4, r3, #11
 80213c4:	d5fb      	bpl.n	80213be <__ieee754_sqrt+0x6e>
 80213c6:	1e44      	subs	r4, r0, #1
 80213c8:	1b12      	subs	r2, r2, r4
 80213ca:	f1c0 0420 	rsb	r4, r0, #32
 80213ce:	fa21 f404 	lsr.w	r4, r1, r4
 80213d2:	4323      	orrs	r3, r4
 80213d4:	4081      	lsls	r1, r0
 80213d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80213da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80213de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80213e2:	07d2      	lsls	r2, r2, #31
 80213e4:	bf5c      	itt	pl
 80213e6:	005b      	lslpl	r3, r3, #1
 80213e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80213ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80213f0:	bf58      	it	pl
 80213f2:	0049      	lslpl	r1, r1, #1
 80213f4:	2600      	movs	r6, #0
 80213f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80213fa:	106d      	asrs	r5, r5, #1
 80213fc:	0049      	lsls	r1, r1, #1
 80213fe:	2016      	movs	r0, #22
 8021400:	4632      	mov	r2, r6
 8021402:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8021406:	1917      	adds	r7, r2, r4
 8021408:	429f      	cmp	r7, r3
 802140a:	bfde      	ittt	le
 802140c:	193a      	addle	r2, r7, r4
 802140e:	1bdb      	suble	r3, r3, r7
 8021410:	1936      	addle	r6, r6, r4
 8021412:	0fcf      	lsrs	r7, r1, #31
 8021414:	3801      	subs	r0, #1
 8021416:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 802141a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802141e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021422:	d1f0      	bne.n	8021406 <__ieee754_sqrt+0xb6>
 8021424:	4604      	mov	r4, r0
 8021426:	2720      	movs	r7, #32
 8021428:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802142c:	429a      	cmp	r2, r3
 802142e:	eb00 0e0c 	add.w	lr, r0, ip
 8021432:	db02      	blt.n	802143a <__ieee754_sqrt+0xea>
 8021434:	d113      	bne.n	802145e <__ieee754_sqrt+0x10e>
 8021436:	458e      	cmp	lr, r1
 8021438:	d811      	bhi.n	802145e <__ieee754_sqrt+0x10e>
 802143a:	f1be 0f00 	cmp.w	lr, #0
 802143e:	eb0e 000c 	add.w	r0, lr, ip
 8021442:	da42      	bge.n	80214ca <__ieee754_sqrt+0x17a>
 8021444:	2800      	cmp	r0, #0
 8021446:	db40      	blt.n	80214ca <__ieee754_sqrt+0x17a>
 8021448:	f102 0801 	add.w	r8, r2, #1
 802144c:	1a9b      	subs	r3, r3, r2
 802144e:	458e      	cmp	lr, r1
 8021450:	bf88      	it	hi
 8021452:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8021456:	eba1 010e 	sub.w	r1, r1, lr
 802145a:	4464      	add	r4, ip
 802145c:	4642      	mov	r2, r8
 802145e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8021462:	3f01      	subs	r7, #1
 8021464:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8021468:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802146c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8021470:	d1dc      	bne.n	802142c <__ieee754_sqrt+0xdc>
 8021472:	4319      	orrs	r1, r3
 8021474:	d01b      	beq.n	80214ae <__ieee754_sqrt+0x15e>
 8021476:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80214fc <__ieee754_sqrt+0x1ac>
 802147a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8021500 <__ieee754_sqrt+0x1b0>
 802147e:	e9da 0100 	ldrd	r0, r1, [sl]
 8021482:	e9db 2300 	ldrd	r2, r3, [fp]
 8021486:	f7de feff 	bl	8000288 <__aeabi_dsub>
 802148a:	e9da 8900 	ldrd	r8, r9, [sl]
 802148e:	4602      	mov	r2, r0
 8021490:	460b      	mov	r3, r1
 8021492:	4640      	mov	r0, r8
 8021494:	4649      	mov	r1, r9
 8021496:	f7df fb2b 	bl	8000af0 <__aeabi_dcmple>
 802149a:	b140      	cbz	r0, 80214ae <__ieee754_sqrt+0x15e>
 802149c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80214a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80214a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80214a8:	d111      	bne.n	80214ce <__ieee754_sqrt+0x17e>
 80214aa:	3601      	adds	r6, #1
 80214ac:	463c      	mov	r4, r7
 80214ae:	1072      	asrs	r2, r6, #1
 80214b0:	0863      	lsrs	r3, r4, #1
 80214b2:	07f1      	lsls	r1, r6, #31
 80214b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80214b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80214bc:	bf48      	it	mi
 80214be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80214c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80214c6:	4618      	mov	r0, r3
 80214c8:	e756      	b.n	8021378 <__ieee754_sqrt+0x28>
 80214ca:	4690      	mov	r8, r2
 80214cc:	e7be      	b.n	802144c <__ieee754_sqrt+0xfc>
 80214ce:	f7de fedd 	bl	800028c <__adddf3>
 80214d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80214d6:	4602      	mov	r2, r0
 80214d8:	460b      	mov	r3, r1
 80214da:	4640      	mov	r0, r8
 80214dc:	4649      	mov	r1, r9
 80214de:	f7df fafd 	bl	8000adc <__aeabi_dcmplt>
 80214e2:	b120      	cbz	r0, 80214ee <__ieee754_sqrt+0x19e>
 80214e4:	1ca0      	adds	r0, r4, #2
 80214e6:	bf08      	it	eq
 80214e8:	3601      	addeq	r6, #1
 80214ea:	3402      	adds	r4, #2
 80214ec:	e7df      	b.n	80214ae <__ieee754_sqrt+0x15e>
 80214ee:	1c63      	adds	r3, r4, #1
 80214f0:	f023 0401 	bic.w	r4, r3, #1
 80214f4:	e7db      	b.n	80214ae <__ieee754_sqrt+0x15e>
 80214f6:	bf00      	nop
 80214f8:	7ff00000 	.word	0x7ff00000
 80214fc:	20000800 	.word	0x20000800
 8021500:	200007f8 	.word	0x200007f8
 8021504:	00000000 	.word	0x00000000

08021508 <floor>:
 8021508:	ec51 0b10 	vmov	r0, r1, d0
 802150c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021514:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8021518:	2e13      	cmp	r6, #19
 802151a:	460c      	mov	r4, r1
 802151c:	4605      	mov	r5, r0
 802151e:	4680      	mov	r8, r0
 8021520:	dc34      	bgt.n	802158c <floor+0x84>
 8021522:	2e00      	cmp	r6, #0
 8021524:	da17      	bge.n	8021556 <floor+0x4e>
 8021526:	a332      	add	r3, pc, #200	@ (adr r3, 80215f0 <floor+0xe8>)
 8021528:	e9d3 2300 	ldrd	r2, r3, [r3]
 802152c:	f7de feae 	bl	800028c <__adddf3>
 8021530:	2200      	movs	r2, #0
 8021532:	2300      	movs	r3, #0
 8021534:	f7df faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8021538:	b150      	cbz	r0, 8021550 <floor+0x48>
 802153a:	2c00      	cmp	r4, #0
 802153c:	da55      	bge.n	80215ea <floor+0xe2>
 802153e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8021542:	432c      	orrs	r4, r5
 8021544:	2500      	movs	r5, #0
 8021546:	42ac      	cmp	r4, r5
 8021548:	4c2b      	ldr	r4, [pc, #172]	@ (80215f8 <floor+0xf0>)
 802154a:	bf08      	it	eq
 802154c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8021550:	4621      	mov	r1, r4
 8021552:	4628      	mov	r0, r5
 8021554:	e023      	b.n	802159e <floor+0x96>
 8021556:	4f29      	ldr	r7, [pc, #164]	@ (80215fc <floor+0xf4>)
 8021558:	4137      	asrs	r7, r6
 802155a:	ea01 0307 	and.w	r3, r1, r7
 802155e:	4303      	orrs	r3, r0
 8021560:	d01d      	beq.n	802159e <floor+0x96>
 8021562:	a323      	add	r3, pc, #140	@ (adr r3, 80215f0 <floor+0xe8>)
 8021564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021568:	f7de fe90 	bl	800028c <__adddf3>
 802156c:	2200      	movs	r2, #0
 802156e:	2300      	movs	r3, #0
 8021570:	f7df fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8021574:	2800      	cmp	r0, #0
 8021576:	d0eb      	beq.n	8021550 <floor+0x48>
 8021578:	2c00      	cmp	r4, #0
 802157a:	bfbe      	ittt	lt
 802157c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8021580:	4133      	asrlt	r3, r6
 8021582:	18e4      	addlt	r4, r4, r3
 8021584:	ea24 0407 	bic.w	r4, r4, r7
 8021588:	2500      	movs	r5, #0
 802158a:	e7e1      	b.n	8021550 <floor+0x48>
 802158c:	2e33      	cmp	r6, #51	@ 0x33
 802158e:	dd0a      	ble.n	80215a6 <floor+0x9e>
 8021590:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021594:	d103      	bne.n	802159e <floor+0x96>
 8021596:	4602      	mov	r2, r0
 8021598:	460b      	mov	r3, r1
 802159a:	f7de fe77 	bl	800028c <__adddf3>
 802159e:	ec41 0b10 	vmov	d0, r0, r1
 80215a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80215aa:	f04f 37ff 	mov.w	r7, #4294967295
 80215ae:	40df      	lsrs	r7, r3
 80215b0:	4207      	tst	r7, r0
 80215b2:	d0f4      	beq.n	802159e <floor+0x96>
 80215b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80215f0 <floor+0xe8>)
 80215b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215ba:	f7de fe67 	bl	800028c <__adddf3>
 80215be:	2200      	movs	r2, #0
 80215c0:	2300      	movs	r3, #0
 80215c2:	f7df faa9 	bl	8000b18 <__aeabi_dcmpgt>
 80215c6:	2800      	cmp	r0, #0
 80215c8:	d0c2      	beq.n	8021550 <floor+0x48>
 80215ca:	2c00      	cmp	r4, #0
 80215cc:	da0a      	bge.n	80215e4 <floor+0xdc>
 80215ce:	2e14      	cmp	r6, #20
 80215d0:	d101      	bne.n	80215d6 <floor+0xce>
 80215d2:	3401      	adds	r4, #1
 80215d4:	e006      	b.n	80215e4 <floor+0xdc>
 80215d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80215da:	2301      	movs	r3, #1
 80215dc:	40b3      	lsls	r3, r6
 80215de:	441d      	add	r5, r3
 80215e0:	4545      	cmp	r5, r8
 80215e2:	d3f6      	bcc.n	80215d2 <floor+0xca>
 80215e4:	ea25 0507 	bic.w	r5, r5, r7
 80215e8:	e7b2      	b.n	8021550 <floor+0x48>
 80215ea:	2500      	movs	r5, #0
 80215ec:	462c      	mov	r4, r5
 80215ee:	e7af      	b.n	8021550 <floor+0x48>
 80215f0:	8800759c 	.word	0x8800759c
 80215f4:	7e37e43c 	.word	0x7e37e43c
 80215f8:	bff00000 	.word	0xbff00000
 80215fc:	000fffff 	.word	0x000fffff

08021600 <__kernel_cos>:
 8021600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021604:	ec57 6b10 	vmov	r6, r7, d0
 8021608:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 802160c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8021610:	ed8d 1b00 	vstr	d1, [sp]
 8021614:	d206      	bcs.n	8021624 <__kernel_cos+0x24>
 8021616:	4630      	mov	r0, r6
 8021618:	4639      	mov	r1, r7
 802161a:	f7df fa9d 	bl	8000b58 <__aeabi_d2iz>
 802161e:	2800      	cmp	r0, #0
 8021620:	f000 8088 	beq.w	8021734 <__kernel_cos+0x134>
 8021624:	4632      	mov	r2, r6
 8021626:	463b      	mov	r3, r7
 8021628:	4630      	mov	r0, r6
 802162a:	4639      	mov	r1, r7
 802162c:	f7de ffe4 	bl	80005f8 <__aeabi_dmul>
 8021630:	4b51      	ldr	r3, [pc, #324]	@ (8021778 <__kernel_cos+0x178>)
 8021632:	2200      	movs	r2, #0
 8021634:	4604      	mov	r4, r0
 8021636:	460d      	mov	r5, r1
 8021638:	f7de ffde 	bl	80005f8 <__aeabi_dmul>
 802163c:	a340      	add	r3, pc, #256	@ (adr r3, 8021740 <__kernel_cos+0x140>)
 802163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021642:	4682      	mov	sl, r0
 8021644:	468b      	mov	fp, r1
 8021646:	4620      	mov	r0, r4
 8021648:	4629      	mov	r1, r5
 802164a:	f7de ffd5 	bl	80005f8 <__aeabi_dmul>
 802164e:	a33e      	add	r3, pc, #248	@ (adr r3, 8021748 <__kernel_cos+0x148>)
 8021650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021654:	f7de fe1a 	bl	800028c <__adddf3>
 8021658:	4622      	mov	r2, r4
 802165a:	462b      	mov	r3, r5
 802165c:	f7de ffcc 	bl	80005f8 <__aeabi_dmul>
 8021660:	a33b      	add	r3, pc, #236	@ (adr r3, 8021750 <__kernel_cos+0x150>)
 8021662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021666:	f7de fe0f 	bl	8000288 <__aeabi_dsub>
 802166a:	4622      	mov	r2, r4
 802166c:	462b      	mov	r3, r5
 802166e:	f7de ffc3 	bl	80005f8 <__aeabi_dmul>
 8021672:	a339      	add	r3, pc, #228	@ (adr r3, 8021758 <__kernel_cos+0x158>)
 8021674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021678:	f7de fe08 	bl	800028c <__adddf3>
 802167c:	4622      	mov	r2, r4
 802167e:	462b      	mov	r3, r5
 8021680:	f7de ffba 	bl	80005f8 <__aeabi_dmul>
 8021684:	a336      	add	r3, pc, #216	@ (adr r3, 8021760 <__kernel_cos+0x160>)
 8021686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802168a:	f7de fdfd 	bl	8000288 <__aeabi_dsub>
 802168e:	4622      	mov	r2, r4
 8021690:	462b      	mov	r3, r5
 8021692:	f7de ffb1 	bl	80005f8 <__aeabi_dmul>
 8021696:	a334      	add	r3, pc, #208	@ (adr r3, 8021768 <__kernel_cos+0x168>)
 8021698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802169c:	f7de fdf6 	bl	800028c <__adddf3>
 80216a0:	4622      	mov	r2, r4
 80216a2:	462b      	mov	r3, r5
 80216a4:	f7de ffa8 	bl	80005f8 <__aeabi_dmul>
 80216a8:	4622      	mov	r2, r4
 80216aa:	462b      	mov	r3, r5
 80216ac:	f7de ffa4 	bl	80005f8 <__aeabi_dmul>
 80216b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80216b4:	4604      	mov	r4, r0
 80216b6:	460d      	mov	r5, r1
 80216b8:	4630      	mov	r0, r6
 80216ba:	4639      	mov	r1, r7
 80216bc:	f7de ff9c 	bl	80005f8 <__aeabi_dmul>
 80216c0:	460b      	mov	r3, r1
 80216c2:	4602      	mov	r2, r0
 80216c4:	4629      	mov	r1, r5
 80216c6:	4620      	mov	r0, r4
 80216c8:	f7de fdde 	bl	8000288 <__aeabi_dsub>
 80216cc:	4b2b      	ldr	r3, [pc, #172]	@ (802177c <__kernel_cos+0x17c>)
 80216ce:	4598      	cmp	r8, r3
 80216d0:	4606      	mov	r6, r0
 80216d2:	460f      	mov	r7, r1
 80216d4:	d810      	bhi.n	80216f8 <__kernel_cos+0xf8>
 80216d6:	4602      	mov	r2, r0
 80216d8:	460b      	mov	r3, r1
 80216da:	4650      	mov	r0, sl
 80216dc:	4659      	mov	r1, fp
 80216de:	f7de fdd3 	bl	8000288 <__aeabi_dsub>
 80216e2:	460b      	mov	r3, r1
 80216e4:	4926      	ldr	r1, [pc, #152]	@ (8021780 <__kernel_cos+0x180>)
 80216e6:	4602      	mov	r2, r0
 80216e8:	2000      	movs	r0, #0
 80216ea:	f7de fdcd 	bl	8000288 <__aeabi_dsub>
 80216ee:	ec41 0b10 	vmov	d0, r0, r1
 80216f2:	b003      	add	sp, #12
 80216f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216f8:	4b22      	ldr	r3, [pc, #136]	@ (8021784 <__kernel_cos+0x184>)
 80216fa:	4921      	ldr	r1, [pc, #132]	@ (8021780 <__kernel_cos+0x180>)
 80216fc:	4598      	cmp	r8, r3
 80216fe:	bf8c      	ite	hi
 8021700:	4d21      	ldrhi	r5, [pc, #132]	@ (8021788 <__kernel_cos+0x188>)
 8021702:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8021706:	2400      	movs	r4, #0
 8021708:	4622      	mov	r2, r4
 802170a:	462b      	mov	r3, r5
 802170c:	2000      	movs	r0, #0
 802170e:	f7de fdbb 	bl	8000288 <__aeabi_dsub>
 8021712:	4622      	mov	r2, r4
 8021714:	4680      	mov	r8, r0
 8021716:	4689      	mov	r9, r1
 8021718:	462b      	mov	r3, r5
 802171a:	4650      	mov	r0, sl
 802171c:	4659      	mov	r1, fp
 802171e:	f7de fdb3 	bl	8000288 <__aeabi_dsub>
 8021722:	4632      	mov	r2, r6
 8021724:	463b      	mov	r3, r7
 8021726:	f7de fdaf 	bl	8000288 <__aeabi_dsub>
 802172a:	4602      	mov	r2, r0
 802172c:	460b      	mov	r3, r1
 802172e:	4640      	mov	r0, r8
 8021730:	4649      	mov	r1, r9
 8021732:	e7da      	b.n	80216ea <__kernel_cos+0xea>
 8021734:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8021770 <__kernel_cos+0x170>
 8021738:	e7db      	b.n	80216f2 <__kernel_cos+0xf2>
 802173a:	bf00      	nop
 802173c:	f3af 8000 	nop.w
 8021740:	be8838d4 	.word	0xbe8838d4
 8021744:	bda8fae9 	.word	0xbda8fae9
 8021748:	bdb4b1c4 	.word	0xbdb4b1c4
 802174c:	3e21ee9e 	.word	0x3e21ee9e
 8021750:	809c52ad 	.word	0x809c52ad
 8021754:	3e927e4f 	.word	0x3e927e4f
 8021758:	19cb1590 	.word	0x19cb1590
 802175c:	3efa01a0 	.word	0x3efa01a0
 8021760:	16c15177 	.word	0x16c15177
 8021764:	3f56c16c 	.word	0x3f56c16c
 8021768:	5555554c 	.word	0x5555554c
 802176c:	3fa55555 	.word	0x3fa55555
 8021770:	00000000 	.word	0x00000000
 8021774:	3ff00000 	.word	0x3ff00000
 8021778:	3fe00000 	.word	0x3fe00000
 802177c:	3fd33332 	.word	0x3fd33332
 8021780:	3ff00000 	.word	0x3ff00000
 8021784:	3fe90000 	.word	0x3fe90000
 8021788:	3fd20000 	.word	0x3fd20000
 802178c:	00000000 	.word	0x00000000

08021790 <__kernel_sin>:
 8021790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021794:	ec55 4b10 	vmov	r4, r5, d0
 8021798:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802179c:	b085      	sub	sp, #20
 802179e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80217a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80217a6:	4680      	mov	r8, r0
 80217a8:	d205      	bcs.n	80217b6 <__kernel_sin+0x26>
 80217aa:	4620      	mov	r0, r4
 80217ac:	4629      	mov	r1, r5
 80217ae:	f7df f9d3 	bl	8000b58 <__aeabi_d2iz>
 80217b2:	2800      	cmp	r0, #0
 80217b4:	d052      	beq.n	802185c <__kernel_sin+0xcc>
 80217b6:	4622      	mov	r2, r4
 80217b8:	462b      	mov	r3, r5
 80217ba:	4620      	mov	r0, r4
 80217bc:	4629      	mov	r1, r5
 80217be:	f7de ff1b 	bl	80005f8 <__aeabi_dmul>
 80217c2:	4682      	mov	sl, r0
 80217c4:	468b      	mov	fp, r1
 80217c6:	4602      	mov	r2, r0
 80217c8:	460b      	mov	r3, r1
 80217ca:	4620      	mov	r0, r4
 80217cc:	4629      	mov	r1, r5
 80217ce:	f7de ff13 	bl	80005f8 <__aeabi_dmul>
 80217d2:	a342      	add	r3, pc, #264	@ (adr r3, 80218dc <__kernel_sin+0x14c>)
 80217d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217d8:	e9cd 0100 	strd	r0, r1, [sp]
 80217dc:	4650      	mov	r0, sl
 80217de:	4659      	mov	r1, fp
 80217e0:	f7de ff0a 	bl	80005f8 <__aeabi_dmul>
 80217e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80218e4 <__kernel_sin+0x154>)
 80217e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217ea:	f7de fd4d 	bl	8000288 <__aeabi_dsub>
 80217ee:	4652      	mov	r2, sl
 80217f0:	465b      	mov	r3, fp
 80217f2:	f7de ff01 	bl	80005f8 <__aeabi_dmul>
 80217f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80218ec <__kernel_sin+0x15c>)
 80217f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217fc:	f7de fd46 	bl	800028c <__adddf3>
 8021800:	4652      	mov	r2, sl
 8021802:	465b      	mov	r3, fp
 8021804:	f7de fef8 	bl	80005f8 <__aeabi_dmul>
 8021808:	a33a      	add	r3, pc, #232	@ (adr r3, 80218f4 <__kernel_sin+0x164>)
 802180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802180e:	f7de fd3b 	bl	8000288 <__aeabi_dsub>
 8021812:	4652      	mov	r2, sl
 8021814:	465b      	mov	r3, fp
 8021816:	f7de feef 	bl	80005f8 <__aeabi_dmul>
 802181a:	a338      	add	r3, pc, #224	@ (adr r3, 80218fc <__kernel_sin+0x16c>)
 802181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021820:	f7de fd34 	bl	800028c <__adddf3>
 8021824:	4606      	mov	r6, r0
 8021826:	460f      	mov	r7, r1
 8021828:	f1b8 0f00 	cmp.w	r8, #0
 802182c:	d11b      	bne.n	8021866 <__kernel_sin+0xd6>
 802182e:	4602      	mov	r2, r0
 8021830:	460b      	mov	r3, r1
 8021832:	4650      	mov	r0, sl
 8021834:	4659      	mov	r1, fp
 8021836:	f7de fedf 	bl	80005f8 <__aeabi_dmul>
 802183a:	a325      	add	r3, pc, #148	@ (adr r3, 80218d0 <__kernel_sin+0x140>)
 802183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021840:	f7de fd22 	bl	8000288 <__aeabi_dsub>
 8021844:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021848:	f7de fed6 	bl	80005f8 <__aeabi_dmul>
 802184c:	4602      	mov	r2, r0
 802184e:	460b      	mov	r3, r1
 8021850:	4620      	mov	r0, r4
 8021852:	4629      	mov	r1, r5
 8021854:	f7de fd1a 	bl	800028c <__adddf3>
 8021858:	4604      	mov	r4, r0
 802185a:	460d      	mov	r5, r1
 802185c:	ec45 4b10 	vmov	d0, r4, r5
 8021860:	b005      	add	sp, #20
 8021862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802186a:	4b1b      	ldr	r3, [pc, #108]	@ (80218d8 <__kernel_sin+0x148>)
 802186c:	2200      	movs	r2, #0
 802186e:	f7de fec3 	bl	80005f8 <__aeabi_dmul>
 8021872:	4632      	mov	r2, r6
 8021874:	4680      	mov	r8, r0
 8021876:	4689      	mov	r9, r1
 8021878:	463b      	mov	r3, r7
 802187a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802187e:	f7de febb 	bl	80005f8 <__aeabi_dmul>
 8021882:	4602      	mov	r2, r0
 8021884:	460b      	mov	r3, r1
 8021886:	4640      	mov	r0, r8
 8021888:	4649      	mov	r1, r9
 802188a:	f7de fcfd 	bl	8000288 <__aeabi_dsub>
 802188e:	4652      	mov	r2, sl
 8021890:	465b      	mov	r3, fp
 8021892:	f7de feb1 	bl	80005f8 <__aeabi_dmul>
 8021896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802189a:	f7de fcf5 	bl	8000288 <__aeabi_dsub>
 802189e:	a30c      	add	r3, pc, #48	@ (adr r3, 80218d0 <__kernel_sin+0x140>)
 80218a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218a4:	4606      	mov	r6, r0
 80218a6:	460f      	mov	r7, r1
 80218a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80218ac:	f7de fea4 	bl	80005f8 <__aeabi_dmul>
 80218b0:	4602      	mov	r2, r0
 80218b2:	460b      	mov	r3, r1
 80218b4:	4630      	mov	r0, r6
 80218b6:	4639      	mov	r1, r7
 80218b8:	f7de fce8 	bl	800028c <__adddf3>
 80218bc:	4602      	mov	r2, r0
 80218be:	460b      	mov	r3, r1
 80218c0:	4620      	mov	r0, r4
 80218c2:	4629      	mov	r1, r5
 80218c4:	f7de fce0 	bl	8000288 <__aeabi_dsub>
 80218c8:	e7c6      	b.n	8021858 <__kernel_sin+0xc8>
 80218ca:	bf00      	nop
 80218cc:	f3af 8000 	nop.w
 80218d0:	55555549 	.word	0x55555549
 80218d4:	3fc55555 	.word	0x3fc55555
 80218d8:	3fe00000 	.word	0x3fe00000
 80218dc:	5acfd57c 	.word	0x5acfd57c
 80218e0:	3de5d93a 	.word	0x3de5d93a
 80218e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80218e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80218ec:	57b1fe7d 	.word	0x57b1fe7d
 80218f0:	3ec71de3 	.word	0x3ec71de3
 80218f4:	19c161d5 	.word	0x19c161d5
 80218f8:	3f2a01a0 	.word	0x3f2a01a0
 80218fc:	1110f8a6 	.word	0x1110f8a6
 8021900:	3f811111 	.word	0x3f811111
 8021904:	00000000 	.word	0x00000000

08021908 <__ieee754_atan2>:
 8021908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802190c:	ec57 6b11 	vmov	r6, r7, d1
 8021910:	4273      	negs	r3, r6
 8021912:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8021a90 <__ieee754_atan2+0x188>
 8021916:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 802191a:	4333      	orrs	r3, r6
 802191c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8021920:	4543      	cmp	r3, r8
 8021922:	ec51 0b10 	vmov	r0, r1, d0
 8021926:	4635      	mov	r5, r6
 8021928:	d809      	bhi.n	802193e <__ieee754_atan2+0x36>
 802192a:	4244      	negs	r4, r0
 802192c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8021930:	4304      	orrs	r4, r0
 8021932:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8021936:	4544      	cmp	r4, r8
 8021938:	468e      	mov	lr, r1
 802193a:	4681      	mov	r9, r0
 802193c:	d907      	bls.n	802194e <__ieee754_atan2+0x46>
 802193e:	4632      	mov	r2, r6
 8021940:	463b      	mov	r3, r7
 8021942:	f7de fca3 	bl	800028c <__adddf3>
 8021946:	ec41 0b10 	vmov	d0, r0, r1
 802194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802194e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8021952:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8021956:	4334      	orrs	r4, r6
 8021958:	d103      	bne.n	8021962 <__ieee754_atan2+0x5a>
 802195a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802195e:	f7ff baa3 	b.w	8020ea8 <atan>
 8021962:	17bc      	asrs	r4, r7, #30
 8021964:	f004 0402 	and.w	r4, r4, #2
 8021968:	ea53 0909 	orrs.w	r9, r3, r9
 802196c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8021970:	d107      	bne.n	8021982 <__ieee754_atan2+0x7a>
 8021972:	2c02      	cmp	r4, #2
 8021974:	d05f      	beq.n	8021a36 <__ieee754_atan2+0x12e>
 8021976:	2c03      	cmp	r4, #3
 8021978:	d1e5      	bne.n	8021946 <__ieee754_atan2+0x3e>
 802197a:	a141      	add	r1, pc, #260	@ (adr r1, 8021a80 <__ieee754_atan2+0x178>)
 802197c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021980:	e7e1      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021982:	4315      	orrs	r5, r2
 8021984:	d106      	bne.n	8021994 <__ieee754_atan2+0x8c>
 8021986:	f1be 0f00 	cmp.w	lr, #0
 802198a:	da5f      	bge.n	8021a4c <__ieee754_atan2+0x144>
 802198c:	a13e      	add	r1, pc, #248	@ (adr r1, 8021a88 <__ieee754_atan2+0x180>)
 802198e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021992:	e7d8      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021994:	4542      	cmp	r2, r8
 8021996:	d10f      	bne.n	80219b8 <__ieee754_atan2+0xb0>
 8021998:	4293      	cmp	r3, r2
 802199a:	f104 34ff 	add.w	r4, r4, #4294967295
 802199e:	d107      	bne.n	80219b0 <__ieee754_atan2+0xa8>
 80219a0:	2c02      	cmp	r4, #2
 80219a2:	d84c      	bhi.n	8021a3e <__ieee754_atan2+0x136>
 80219a4:	4b34      	ldr	r3, [pc, #208]	@ (8021a78 <__ieee754_atan2+0x170>)
 80219a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80219aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80219ae:	e7ca      	b.n	8021946 <__ieee754_atan2+0x3e>
 80219b0:	2c02      	cmp	r4, #2
 80219b2:	d848      	bhi.n	8021a46 <__ieee754_atan2+0x13e>
 80219b4:	4b31      	ldr	r3, [pc, #196]	@ (8021a7c <__ieee754_atan2+0x174>)
 80219b6:	e7f6      	b.n	80219a6 <__ieee754_atan2+0x9e>
 80219b8:	4543      	cmp	r3, r8
 80219ba:	d0e4      	beq.n	8021986 <__ieee754_atan2+0x7e>
 80219bc:	1a9b      	subs	r3, r3, r2
 80219be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80219c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80219c6:	da1e      	bge.n	8021a06 <__ieee754_atan2+0xfe>
 80219c8:	2f00      	cmp	r7, #0
 80219ca:	da01      	bge.n	80219d0 <__ieee754_atan2+0xc8>
 80219cc:	323c      	adds	r2, #60	@ 0x3c
 80219ce:	db1e      	blt.n	8021a0e <__ieee754_atan2+0x106>
 80219d0:	4632      	mov	r2, r6
 80219d2:	463b      	mov	r3, r7
 80219d4:	f7de ff3a 	bl	800084c <__aeabi_ddiv>
 80219d8:	ec41 0b10 	vmov	d0, r0, r1
 80219dc:	f7ff fc50 	bl	8021280 <fabs>
 80219e0:	f7ff fa62 	bl	8020ea8 <atan>
 80219e4:	ec51 0b10 	vmov	r0, r1, d0
 80219e8:	2c01      	cmp	r4, #1
 80219ea:	d013      	beq.n	8021a14 <__ieee754_atan2+0x10c>
 80219ec:	2c02      	cmp	r4, #2
 80219ee:	d015      	beq.n	8021a1c <__ieee754_atan2+0x114>
 80219f0:	2c00      	cmp	r4, #0
 80219f2:	d0a8      	beq.n	8021946 <__ieee754_atan2+0x3e>
 80219f4:	a318      	add	r3, pc, #96	@ (adr r3, 8021a58 <__ieee754_atan2+0x150>)
 80219f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219fa:	f7de fc45 	bl	8000288 <__aeabi_dsub>
 80219fe:	a318      	add	r3, pc, #96	@ (adr r3, 8021a60 <__ieee754_atan2+0x158>)
 8021a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a04:	e014      	b.n	8021a30 <__ieee754_atan2+0x128>
 8021a06:	a118      	add	r1, pc, #96	@ (adr r1, 8021a68 <__ieee754_atan2+0x160>)
 8021a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021a0c:	e7ec      	b.n	80219e8 <__ieee754_atan2+0xe0>
 8021a0e:	2000      	movs	r0, #0
 8021a10:	2100      	movs	r1, #0
 8021a12:	e7e9      	b.n	80219e8 <__ieee754_atan2+0xe0>
 8021a14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021a18:	4619      	mov	r1, r3
 8021a1a:	e794      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021a1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8021a58 <__ieee754_atan2+0x150>)
 8021a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a22:	f7de fc31 	bl	8000288 <__aeabi_dsub>
 8021a26:	4602      	mov	r2, r0
 8021a28:	460b      	mov	r3, r1
 8021a2a:	a10d      	add	r1, pc, #52	@ (adr r1, 8021a60 <__ieee754_atan2+0x158>)
 8021a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021a30:	f7de fc2a 	bl	8000288 <__aeabi_dsub>
 8021a34:	e787      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021a36:	a10a      	add	r1, pc, #40	@ (adr r1, 8021a60 <__ieee754_atan2+0x158>)
 8021a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021a3c:	e783      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021a3e:	a10c      	add	r1, pc, #48	@ (adr r1, 8021a70 <__ieee754_atan2+0x168>)
 8021a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021a44:	e77f      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021a46:	2000      	movs	r0, #0
 8021a48:	2100      	movs	r1, #0
 8021a4a:	e77c      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021a4c:	a106      	add	r1, pc, #24	@ (adr r1, 8021a68 <__ieee754_atan2+0x160>)
 8021a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021a52:	e778      	b.n	8021946 <__ieee754_atan2+0x3e>
 8021a54:	f3af 8000 	nop.w
 8021a58:	33145c07 	.word	0x33145c07
 8021a5c:	3ca1a626 	.word	0x3ca1a626
 8021a60:	54442d18 	.word	0x54442d18
 8021a64:	400921fb 	.word	0x400921fb
 8021a68:	54442d18 	.word	0x54442d18
 8021a6c:	3ff921fb 	.word	0x3ff921fb
 8021a70:	54442d18 	.word	0x54442d18
 8021a74:	3fe921fb 	.word	0x3fe921fb
 8021a78:	08023cf8 	.word	0x08023cf8
 8021a7c:	08023ce0 	.word	0x08023ce0
 8021a80:	54442d18 	.word	0x54442d18
 8021a84:	c00921fb 	.word	0xc00921fb
 8021a88:	54442d18 	.word	0x54442d18
 8021a8c:	bff921fb 	.word	0xbff921fb
 8021a90:	7ff00000 	.word	0x7ff00000
 8021a94:	00000000 	.word	0x00000000

08021a98 <__ieee754_pow>:
 8021a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a9c:	b091      	sub	sp, #68	@ 0x44
 8021a9e:	ed8d 1b00 	vstr	d1, [sp]
 8021aa2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8021aa6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8021aaa:	ea5a 0001 	orrs.w	r0, sl, r1
 8021aae:	ec57 6b10 	vmov	r6, r7, d0
 8021ab2:	d113      	bne.n	8021adc <__ieee754_pow+0x44>
 8021ab4:	19b3      	adds	r3, r6, r6
 8021ab6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8021aba:	4152      	adcs	r2, r2
 8021abc:	4298      	cmp	r0, r3
 8021abe:	4b98      	ldr	r3, [pc, #608]	@ (8021d20 <__ieee754_pow+0x288>)
 8021ac0:	4193      	sbcs	r3, r2
 8021ac2:	f080 84ea 	bcs.w	802249a <__ieee754_pow+0xa02>
 8021ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021aca:	4630      	mov	r0, r6
 8021acc:	4639      	mov	r1, r7
 8021ace:	f7de fbdd 	bl	800028c <__adddf3>
 8021ad2:	ec41 0b10 	vmov	d0, r0, r1
 8021ad6:	b011      	add	sp, #68	@ 0x44
 8021ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021adc:	4a91      	ldr	r2, [pc, #580]	@ (8021d24 <__ieee754_pow+0x28c>)
 8021ade:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8021ae2:	4590      	cmp	r8, r2
 8021ae4:	463d      	mov	r5, r7
 8021ae6:	4633      	mov	r3, r6
 8021ae8:	d806      	bhi.n	8021af8 <__ieee754_pow+0x60>
 8021aea:	d101      	bne.n	8021af0 <__ieee754_pow+0x58>
 8021aec:	2e00      	cmp	r6, #0
 8021aee:	d1ea      	bne.n	8021ac6 <__ieee754_pow+0x2e>
 8021af0:	4592      	cmp	sl, r2
 8021af2:	d801      	bhi.n	8021af8 <__ieee754_pow+0x60>
 8021af4:	d10e      	bne.n	8021b14 <__ieee754_pow+0x7c>
 8021af6:	b169      	cbz	r1, 8021b14 <__ieee754_pow+0x7c>
 8021af8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8021afc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8021b00:	431d      	orrs	r5, r3
 8021b02:	d1e0      	bne.n	8021ac6 <__ieee754_pow+0x2e>
 8021b04:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021b08:	18db      	adds	r3, r3, r3
 8021b0a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8021b0e:	4152      	adcs	r2, r2
 8021b10:	429d      	cmp	r5, r3
 8021b12:	e7d4      	b.n	8021abe <__ieee754_pow+0x26>
 8021b14:	2d00      	cmp	r5, #0
 8021b16:	46c3      	mov	fp, r8
 8021b18:	da3a      	bge.n	8021b90 <__ieee754_pow+0xf8>
 8021b1a:	4a83      	ldr	r2, [pc, #524]	@ (8021d28 <__ieee754_pow+0x290>)
 8021b1c:	4592      	cmp	sl, r2
 8021b1e:	d84d      	bhi.n	8021bbc <__ieee754_pow+0x124>
 8021b20:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8021b24:	4592      	cmp	sl, r2
 8021b26:	f240 84c7 	bls.w	80224b8 <__ieee754_pow+0xa20>
 8021b2a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8021b2e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8021b32:	2a14      	cmp	r2, #20
 8021b34:	dd0f      	ble.n	8021b56 <__ieee754_pow+0xbe>
 8021b36:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8021b3a:	fa21 f402 	lsr.w	r4, r1, r2
 8021b3e:	fa04 f202 	lsl.w	r2, r4, r2
 8021b42:	428a      	cmp	r2, r1
 8021b44:	f040 84b8 	bne.w	80224b8 <__ieee754_pow+0xa20>
 8021b48:	f004 0401 	and.w	r4, r4, #1
 8021b4c:	f1c4 0402 	rsb	r4, r4, #2
 8021b50:	2900      	cmp	r1, #0
 8021b52:	d158      	bne.n	8021c06 <__ieee754_pow+0x16e>
 8021b54:	e00e      	b.n	8021b74 <__ieee754_pow+0xdc>
 8021b56:	2900      	cmp	r1, #0
 8021b58:	d154      	bne.n	8021c04 <__ieee754_pow+0x16c>
 8021b5a:	f1c2 0214 	rsb	r2, r2, #20
 8021b5e:	fa4a f402 	asr.w	r4, sl, r2
 8021b62:	fa04 f202 	lsl.w	r2, r4, r2
 8021b66:	4552      	cmp	r2, sl
 8021b68:	f040 84a3 	bne.w	80224b2 <__ieee754_pow+0xa1a>
 8021b6c:	f004 0401 	and.w	r4, r4, #1
 8021b70:	f1c4 0402 	rsb	r4, r4, #2
 8021b74:	4a6d      	ldr	r2, [pc, #436]	@ (8021d2c <__ieee754_pow+0x294>)
 8021b76:	4592      	cmp	sl, r2
 8021b78:	d12e      	bne.n	8021bd8 <__ieee754_pow+0x140>
 8021b7a:	f1b9 0f00 	cmp.w	r9, #0
 8021b7e:	f280 8494 	bge.w	80224aa <__ieee754_pow+0xa12>
 8021b82:	496a      	ldr	r1, [pc, #424]	@ (8021d2c <__ieee754_pow+0x294>)
 8021b84:	4632      	mov	r2, r6
 8021b86:	463b      	mov	r3, r7
 8021b88:	2000      	movs	r0, #0
 8021b8a:	f7de fe5f 	bl	800084c <__aeabi_ddiv>
 8021b8e:	e7a0      	b.n	8021ad2 <__ieee754_pow+0x3a>
 8021b90:	2400      	movs	r4, #0
 8021b92:	bbc1      	cbnz	r1, 8021c06 <__ieee754_pow+0x16e>
 8021b94:	4a63      	ldr	r2, [pc, #396]	@ (8021d24 <__ieee754_pow+0x28c>)
 8021b96:	4592      	cmp	sl, r2
 8021b98:	d1ec      	bne.n	8021b74 <__ieee754_pow+0xdc>
 8021b9a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8021b9e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8021ba2:	431a      	orrs	r2, r3
 8021ba4:	f000 8479 	beq.w	802249a <__ieee754_pow+0xa02>
 8021ba8:	4b61      	ldr	r3, [pc, #388]	@ (8021d30 <__ieee754_pow+0x298>)
 8021baa:	4598      	cmp	r8, r3
 8021bac:	d908      	bls.n	8021bc0 <__ieee754_pow+0x128>
 8021bae:	f1b9 0f00 	cmp.w	r9, #0
 8021bb2:	f2c0 8476 	blt.w	80224a2 <__ieee754_pow+0xa0a>
 8021bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021bba:	e78a      	b.n	8021ad2 <__ieee754_pow+0x3a>
 8021bbc:	2402      	movs	r4, #2
 8021bbe:	e7e8      	b.n	8021b92 <__ieee754_pow+0xfa>
 8021bc0:	f1b9 0f00 	cmp.w	r9, #0
 8021bc4:	f04f 0000 	mov.w	r0, #0
 8021bc8:	f04f 0100 	mov.w	r1, #0
 8021bcc:	da81      	bge.n	8021ad2 <__ieee754_pow+0x3a>
 8021bce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8021bd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8021bd6:	e77c      	b.n	8021ad2 <__ieee754_pow+0x3a>
 8021bd8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8021bdc:	d106      	bne.n	8021bec <__ieee754_pow+0x154>
 8021bde:	4632      	mov	r2, r6
 8021be0:	463b      	mov	r3, r7
 8021be2:	4630      	mov	r0, r6
 8021be4:	4639      	mov	r1, r7
 8021be6:	f7de fd07 	bl	80005f8 <__aeabi_dmul>
 8021bea:	e772      	b.n	8021ad2 <__ieee754_pow+0x3a>
 8021bec:	4a51      	ldr	r2, [pc, #324]	@ (8021d34 <__ieee754_pow+0x29c>)
 8021bee:	4591      	cmp	r9, r2
 8021bf0:	d109      	bne.n	8021c06 <__ieee754_pow+0x16e>
 8021bf2:	2d00      	cmp	r5, #0
 8021bf4:	db07      	blt.n	8021c06 <__ieee754_pow+0x16e>
 8021bf6:	ec47 6b10 	vmov	d0, r6, r7
 8021bfa:	b011      	add	sp, #68	@ 0x44
 8021bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c00:	f7ff bba6 	b.w	8021350 <__ieee754_sqrt>
 8021c04:	2400      	movs	r4, #0
 8021c06:	ec47 6b10 	vmov	d0, r6, r7
 8021c0a:	9302      	str	r3, [sp, #8]
 8021c0c:	f7ff fb38 	bl	8021280 <fabs>
 8021c10:	9b02      	ldr	r3, [sp, #8]
 8021c12:	ec51 0b10 	vmov	r0, r1, d0
 8021c16:	bb53      	cbnz	r3, 8021c6e <__ieee754_pow+0x1d6>
 8021c18:	4b44      	ldr	r3, [pc, #272]	@ (8021d2c <__ieee754_pow+0x294>)
 8021c1a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8021c1e:	429a      	cmp	r2, r3
 8021c20:	d002      	beq.n	8021c28 <__ieee754_pow+0x190>
 8021c22:	f1b8 0f00 	cmp.w	r8, #0
 8021c26:	d122      	bne.n	8021c6e <__ieee754_pow+0x1d6>
 8021c28:	f1b9 0f00 	cmp.w	r9, #0
 8021c2c:	da05      	bge.n	8021c3a <__ieee754_pow+0x1a2>
 8021c2e:	4602      	mov	r2, r0
 8021c30:	460b      	mov	r3, r1
 8021c32:	2000      	movs	r0, #0
 8021c34:	493d      	ldr	r1, [pc, #244]	@ (8021d2c <__ieee754_pow+0x294>)
 8021c36:	f7de fe09 	bl	800084c <__aeabi_ddiv>
 8021c3a:	2d00      	cmp	r5, #0
 8021c3c:	f6bf af49 	bge.w	8021ad2 <__ieee754_pow+0x3a>
 8021c40:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8021c44:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8021c48:	ea58 0804 	orrs.w	r8, r8, r4
 8021c4c:	d108      	bne.n	8021c60 <__ieee754_pow+0x1c8>
 8021c4e:	4602      	mov	r2, r0
 8021c50:	460b      	mov	r3, r1
 8021c52:	4610      	mov	r0, r2
 8021c54:	4619      	mov	r1, r3
 8021c56:	f7de fb17 	bl	8000288 <__aeabi_dsub>
 8021c5a:	4602      	mov	r2, r0
 8021c5c:	460b      	mov	r3, r1
 8021c5e:	e794      	b.n	8021b8a <__ieee754_pow+0xf2>
 8021c60:	2c01      	cmp	r4, #1
 8021c62:	f47f af36 	bne.w	8021ad2 <__ieee754_pow+0x3a>
 8021c66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021c6a:	4619      	mov	r1, r3
 8021c6c:	e731      	b.n	8021ad2 <__ieee754_pow+0x3a>
 8021c6e:	0feb      	lsrs	r3, r5, #31
 8021c70:	3b01      	subs	r3, #1
 8021c72:	ea53 0204 	orrs.w	r2, r3, r4
 8021c76:	d102      	bne.n	8021c7e <__ieee754_pow+0x1e6>
 8021c78:	4632      	mov	r2, r6
 8021c7a:	463b      	mov	r3, r7
 8021c7c:	e7e9      	b.n	8021c52 <__ieee754_pow+0x1ba>
 8021c7e:	3c01      	subs	r4, #1
 8021c80:	431c      	orrs	r4, r3
 8021c82:	d016      	beq.n	8021cb2 <__ieee754_pow+0x21a>
 8021c84:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8021d10 <__ieee754_pow+0x278>
 8021c88:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8021c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021c90:	f240 8112 	bls.w	8021eb8 <__ieee754_pow+0x420>
 8021c94:	4b28      	ldr	r3, [pc, #160]	@ (8021d38 <__ieee754_pow+0x2a0>)
 8021c96:	459a      	cmp	sl, r3
 8021c98:	4b25      	ldr	r3, [pc, #148]	@ (8021d30 <__ieee754_pow+0x298>)
 8021c9a:	d916      	bls.n	8021cca <__ieee754_pow+0x232>
 8021c9c:	4598      	cmp	r8, r3
 8021c9e:	d80b      	bhi.n	8021cb8 <__ieee754_pow+0x220>
 8021ca0:	f1b9 0f00 	cmp.w	r9, #0
 8021ca4:	da0b      	bge.n	8021cbe <__ieee754_pow+0x226>
 8021ca6:	2000      	movs	r0, #0
 8021ca8:	b011      	add	sp, #68	@ 0x44
 8021caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cae:	f000 bee7 	b.w	8022a80 <__math_oflow>
 8021cb2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8021d18 <__ieee754_pow+0x280>
 8021cb6:	e7e7      	b.n	8021c88 <__ieee754_pow+0x1f0>
 8021cb8:	f1b9 0f00 	cmp.w	r9, #0
 8021cbc:	dcf3      	bgt.n	8021ca6 <__ieee754_pow+0x20e>
 8021cbe:	2000      	movs	r0, #0
 8021cc0:	b011      	add	sp, #68	@ 0x44
 8021cc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cc6:	f000 bed3 	b.w	8022a70 <__math_uflow>
 8021cca:	4598      	cmp	r8, r3
 8021ccc:	d20c      	bcs.n	8021ce8 <__ieee754_pow+0x250>
 8021cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021cd2:	2200      	movs	r2, #0
 8021cd4:	2300      	movs	r3, #0
 8021cd6:	f7de ff01 	bl	8000adc <__aeabi_dcmplt>
 8021cda:	3800      	subs	r0, #0
 8021cdc:	bf18      	it	ne
 8021cde:	2001      	movne	r0, #1
 8021ce0:	f1b9 0f00 	cmp.w	r9, #0
 8021ce4:	daec      	bge.n	8021cc0 <__ieee754_pow+0x228>
 8021ce6:	e7df      	b.n	8021ca8 <__ieee754_pow+0x210>
 8021ce8:	4b10      	ldr	r3, [pc, #64]	@ (8021d2c <__ieee754_pow+0x294>)
 8021cea:	4598      	cmp	r8, r3
 8021cec:	f04f 0200 	mov.w	r2, #0
 8021cf0:	d924      	bls.n	8021d3c <__ieee754_pow+0x2a4>
 8021cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	f7de fef0 	bl	8000adc <__aeabi_dcmplt>
 8021cfc:	3800      	subs	r0, #0
 8021cfe:	bf18      	it	ne
 8021d00:	2001      	movne	r0, #1
 8021d02:	f1b9 0f00 	cmp.w	r9, #0
 8021d06:	dccf      	bgt.n	8021ca8 <__ieee754_pow+0x210>
 8021d08:	e7da      	b.n	8021cc0 <__ieee754_pow+0x228>
 8021d0a:	bf00      	nop
 8021d0c:	f3af 8000 	nop.w
 8021d10:	00000000 	.word	0x00000000
 8021d14:	3ff00000 	.word	0x3ff00000
 8021d18:	00000000 	.word	0x00000000
 8021d1c:	bff00000 	.word	0xbff00000
 8021d20:	fff00000 	.word	0xfff00000
 8021d24:	7ff00000 	.word	0x7ff00000
 8021d28:	433fffff 	.word	0x433fffff
 8021d2c:	3ff00000 	.word	0x3ff00000
 8021d30:	3fefffff 	.word	0x3fefffff
 8021d34:	3fe00000 	.word	0x3fe00000
 8021d38:	43f00000 	.word	0x43f00000
 8021d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8021ea8 <__ieee754_pow+0x410>)
 8021d3e:	f7de faa3 	bl	8000288 <__aeabi_dsub>
 8021d42:	a351      	add	r3, pc, #324	@ (adr r3, 8021e88 <__ieee754_pow+0x3f0>)
 8021d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d48:	4604      	mov	r4, r0
 8021d4a:	460d      	mov	r5, r1
 8021d4c:	f7de fc54 	bl	80005f8 <__aeabi_dmul>
 8021d50:	a34f      	add	r3, pc, #316	@ (adr r3, 8021e90 <__ieee754_pow+0x3f8>)
 8021d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d56:	4606      	mov	r6, r0
 8021d58:	460f      	mov	r7, r1
 8021d5a:	4620      	mov	r0, r4
 8021d5c:	4629      	mov	r1, r5
 8021d5e:	f7de fc4b 	bl	80005f8 <__aeabi_dmul>
 8021d62:	4b52      	ldr	r3, [pc, #328]	@ (8021eac <__ieee754_pow+0x414>)
 8021d64:	4682      	mov	sl, r0
 8021d66:	468b      	mov	fp, r1
 8021d68:	2200      	movs	r2, #0
 8021d6a:	4620      	mov	r0, r4
 8021d6c:	4629      	mov	r1, r5
 8021d6e:	f7de fc43 	bl	80005f8 <__aeabi_dmul>
 8021d72:	4602      	mov	r2, r0
 8021d74:	460b      	mov	r3, r1
 8021d76:	a148      	add	r1, pc, #288	@ (adr r1, 8021e98 <__ieee754_pow+0x400>)
 8021d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021d7c:	f7de fa84 	bl	8000288 <__aeabi_dsub>
 8021d80:	4622      	mov	r2, r4
 8021d82:	462b      	mov	r3, r5
 8021d84:	f7de fc38 	bl	80005f8 <__aeabi_dmul>
 8021d88:	4602      	mov	r2, r0
 8021d8a:	460b      	mov	r3, r1
 8021d8c:	2000      	movs	r0, #0
 8021d8e:	4948      	ldr	r1, [pc, #288]	@ (8021eb0 <__ieee754_pow+0x418>)
 8021d90:	f7de fa7a 	bl	8000288 <__aeabi_dsub>
 8021d94:	4622      	mov	r2, r4
 8021d96:	4680      	mov	r8, r0
 8021d98:	4689      	mov	r9, r1
 8021d9a:	462b      	mov	r3, r5
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	4629      	mov	r1, r5
 8021da0:	f7de fc2a 	bl	80005f8 <__aeabi_dmul>
 8021da4:	4602      	mov	r2, r0
 8021da6:	460b      	mov	r3, r1
 8021da8:	4640      	mov	r0, r8
 8021daa:	4649      	mov	r1, r9
 8021dac:	f7de fc24 	bl	80005f8 <__aeabi_dmul>
 8021db0:	a33b      	add	r3, pc, #236	@ (adr r3, 8021ea0 <__ieee754_pow+0x408>)
 8021db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021db6:	f7de fc1f 	bl	80005f8 <__aeabi_dmul>
 8021dba:	4602      	mov	r2, r0
 8021dbc:	460b      	mov	r3, r1
 8021dbe:	4650      	mov	r0, sl
 8021dc0:	4659      	mov	r1, fp
 8021dc2:	f7de fa61 	bl	8000288 <__aeabi_dsub>
 8021dc6:	4602      	mov	r2, r0
 8021dc8:	460b      	mov	r3, r1
 8021dca:	4680      	mov	r8, r0
 8021dcc:	4689      	mov	r9, r1
 8021dce:	4630      	mov	r0, r6
 8021dd0:	4639      	mov	r1, r7
 8021dd2:	f7de fa5b 	bl	800028c <__adddf3>
 8021dd6:	2400      	movs	r4, #0
 8021dd8:	4632      	mov	r2, r6
 8021dda:	463b      	mov	r3, r7
 8021ddc:	4620      	mov	r0, r4
 8021dde:	460d      	mov	r5, r1
 8021de0:	f7de fa52 	bl	8000288 <__aeabi_dsub>
 8021de4:	4602      	mov	r2, r0
 8021de6:	460b      	mov	r3, r1
 8021de8:	4640      	mov	r0, r8
 8021dea:	4649      	mov	r1, r9
 8021dec:	f7de fa4c 	bl	8000288 <__aeabi_dsub>
 8021df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021df4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021df8:	2300      	movs	r3, #0
 8021dfa:	9304      	str	r3, [sp, #16]
 8021dfc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021e00:	4606      	mov	r6, r0
 8021e02:	460f      	mov	r7, r1
 8021e04:	4652      	mov	r2, sl
 8021e06:	465b      	mov	r3, fp
 8021e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021e0c:	f7de fa3c 	bl	8000288 <__aeabi_dsub>
 8021e10:	4622      	mov	r2, r4
 8021e12:	462b      	mov	r3, r5
 8021e14:	f7de fbf0 	bl	80005f8 <__aeabi_dmul>
 8021e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021e1c:	4680      	mov	r8, r0
 8021e1e:	4689      	mov	r9, r1
 8021e20:	4630      	mov	r0, r6
 8021e22:	4639      	mov	r1, r7
 8021e24:	f7de fbe8 	bl	80005f8 <__aeabi_dmul>
 8021e28:	4602      	mov	r2, r0
 8021e2a:	460b      	mov	r3, r1
 8021e2c:	4640      	mov	r0, r8
 8021e2e:	4649      	mov	r1, r9
 8021e30:	f7de fa2c 	bl	800028c <__adddf3>
 8021e34:	4652      	mov	r2, sl
 8021e36:	465b      	mov	r3, fp
 8021e38:	4606      	mov	r6, r0
 8021e3a:	460f      	mov	r7, r1
 8021e3c:	4620      	mov	r0, r4
 8021e3e:	4629      	mov	r1, r5
 8021e40:	f7de fbda 	bl	80005f8 <__aeabi_dmul>
 8021e44:	460b      	mov	r3, r1
 8021e46:	4602      	mov	r2, r0
 8021e48:	4680      	mov	r8, r0
 8021e4a:	4689      	mov	r9, r1
 8021e4c:	4630      	mov	r0, r6
 8021e4e:	4639      	mov	r1, r7
 8021e50:	f7de fa1c 	bl	800028c <__adddf3>
 8021e54:	4b17      	ldr	r3, [pc, #92]	@ (8021eb4 <__ieee754_pow+0x41c>)
 8021e56:	4299      	cmp	r1, r3
 8021e58:	4604      	mov	r4, r0
 8021e5a:	460d      	mov	r5, r1
 8021e5c:	468a      	mov	sl, r1
 8021e5e:	468b      	mov	fp, r1
 8021e60:	f340 82ef 	ble.w	8022442 <__ieee754_pow+0x9aa>
 8021e64:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8021e68:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8021e6c:	4303      	orrs	r3, r0
 8021e6e:	f000 81e8 	beq.w	8022242 <__ieee754_pow+0x7aa>
 8021e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021e76:	2200      	movs	r2, #0
 8021e78:	2300      	movs	r3, #0
 8021e7a:	f7de fe2f 	bl	8000adc <__aeabi_dcmplt>
 8021e7e:	3800      	subs	r0, #0
 8021e80:	bf18      	it	ne
 8021e82:	2001      	movne	r0, #1
 8021e84:	e710      	b.n	8021ca8 <__ieee754_pow+0x210>
 8021e86:	bf00      	nop
 8021e88:	60000000 	.word	0x60000000
 8021e8c:	3ff71547 	.word	0x3ff71547
 8021e90:	f85ddf44 	.word	0xf85ddf44
 8021e94:	3e54ae0b 	.word	0x3e54ae0b
 8021e98:	55555555 	.word	0x55555555
 8021e9c:	3fd55555 	.word	0x3fd55555
 8021ea0:	652b82fe 	.word	0x652b82fe
 8021ea4:	3ff71547 	.word	0x3ff71547
 8021ea8:	3ff00000 	.word	0x3ff00000
 8021eac:	3fd00000 	.word	0x3fd00000
 8021eb0:	3fe00000 	.word	0x3fe00000
 8021eb4:	408fffff 	.word	0x408fffff
 8021eb8:	4bd5      	ldr	r3, [pc, #852]	@ (8022210 <__ieee754_pow+0x778>)
 8021eba:	402b      	ands	r3, r5
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	b92b      	cbnz	r3, 8021ecc <__ieee754_pow+0x434>
 8021ec0:	4bd4      	ldr	r3, [pc, #848]	@ (8022214 <__ieee754_pow+0x77c>)
 8021ec2:	f7de fb99 	bl	80005f8 <__aeabi_dmul>
 8021ec6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8021eca:	468b      	mov	fp, r1
 8021ecc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8021ed0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8021ed4:	4413      	add	r3, r2
 8021ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8021ed8:	4bcf      	ldr	r3, [pc, #828]	@ (8022218 <__ieee754_pow+0x780>)
 8021eda:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8021ede:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8021ee2:	459b      	cmp	fp, r3
 8021ee4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8021ee8:	dd08      	ble.n	8021efc <__ieee754_pow+0x464>
 8021eea:	4bcc      	ldr	r3, [pc, #816]	@ (802221c <__ieee754_pow+0x784>)
 8021eec:	459b      	cmp	fp, r3
 8021eee:	f340 81a5 	ble.w	802223c <__ieee754_pow+0x7a4>
 8021ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021ef4:	3301      	adds	r3, #1
 8021ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8021ef8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8021efc:	f04f 0a00 	mov.w	sl, #0
 8021f00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8021f04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021f06:	4bc6      	ldr	r3, [pc, #792]	@ (8022220 <__ieee754_pow+0x788>)
 8021f08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021f0c:	ed93 7b00 	vldr	d7, [r3]
 8021f10:	4629      	mov	r1, r5
 8021f12:	ec53 2b17 	vmov	r2, r3, d7
 8021f16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021f1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021f1e:	f7de f9b3 	bl	8000288 <__aeabi_dsub>
 8021f22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021f26:	4606      	mov	r6, r0
 8021f28:	460f      	mov	r7, r1
 8021f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021f2e:	f7de f9ad 	bl	800028c <__adddf3>
 8021f32:	4602      	mov	r2, r0
 8021f34:	460b      	mov	r3, r1
 8021f36:	2000      	movs	r0, #0
 8021f38:	49ba      	ldr	r1, [pc, #744]	@ (8022224 <__ieee754_pow+0x78c>)
 8021f3a:	f7de fc87 	bl	800084c <__aeabi_ddiv>
 8021f3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8021f42:	4602      	mov	r2, r0
 8021f44:	460b      	mov	r3, r1
 8021f46:	4630      	mov	r0, r6
 8021f48:	4639      	mov	r1, r7
 8021f4a:	f7de fb55 	bl	80005f8 <__aeabi_dmul>
 8021f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021f52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8021f56:	106d      	asrs	r5, r5, #1
 8021f58:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8021f5c:	f04f 0b00 	mov.w	fp, #0
 8021f60:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8021f64:	4661      	mov	r1, ip
 8021f66:	2200      	movs	r2, #0
 8021f68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8021f6c:	4658      	mov	r0, fp
 8021f6e:	46e1      	mov	r9, ip
 8021f70:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8021f74:	4614      	mov	r4, r2
 8021f76:	461d      	mov	r5, r3
 8021f78:	f7de fb3e 	bl	80005f8 <__aeabi_dmul>
 8021f7c:	4602      	mov	r2, r0
 8021f7e:	460b      	mov	r3, r1
 8021f80:	4630      	mov	r0, r6
 8021f82:	4639      	mov	r1, r7
 8021f84:	f7de f980 	bl	8000288 <__aeabi_dsub>
 8021f88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021f8c:	4606      	mov	r6, r0
 8021f8e:	460f      	mov	r7, r1
 8021f90:	4620      	mov	r0, r4
 8021f92:	4629      	mov	r1, r5
 8021f94:	f7de f978 	bl	8000288 <__aeabi_dsub>
 8021f98:	4602      	mov	r2, r0
 8021f9a:	460b      	mov	r3, r1
 8021f9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8021fa0:	f7de f972 	bl	8000288 <__aeabi_dsub>
 8021fa4:	465a      	mov	r2, fp
 8021fa6:	464b      	mov	r3, r9
 8021fa8:	f7de fb26 	bl	80005f8 <__aeabi_dmul>
 8021fac:	4602      	mov	r2, r0
 8021fae:	460b      	mov	r3, r1
 8021fb0:	4630      	mov	r0, r6
 8021fb2:	4639      	mov	r1, r7
 8021fb4:	f7de f968 	bl	8000288 <__aeabi_dsub>
 8021fb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8021fbc:	f7de fb1c 	bl	80005f8 <__aeabi_dmul>
 8021fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021fc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021fc8:	4610      	mov	r0, r2
 8021fca:	4619      	mov	r1, r3
 8021fcc:	f7de fb14 	bl	80005f8 <__aeabi_dmul>
 8021fd0:	a37d      	add	r3, pc, #500	@ (adr r3, 80221c8 <__ieee754_pow+0x730>)
 8021fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fd6:	4604      	mov	r4, r0
 8021fd8:	460d      	mov	r5, r1
 8021fda:	f7de fb0d 	bl	80005f8 <__aeabi_dmul>
 8021fde:	a37c      	add	r3, pc, #496	@ (adr r3, 80221d0 <__ieee754_pow+0x738>)
 8021fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fe4:	f7de f952 	bl	800028c <__adddf3>
 8021fe8:	4622      	mov	r2, r4
 8021fea:	462b      	mov	r3, r5
 8021fec:	f7de fb04 	bl	80005f8 <__aeabi_dmul>
 8021ff0:	a379      	add	r3, pc, #484	@ (adr r3, 80221d8 <__ieee754_pow+0x740>)
 8021ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ff6:	f7de f949 	bl	800028c <__adddf3>
 8021ffa:	4622      	mov	r2, r4
 8021ffc:	462b      	mov	r3, r5
 8021ffe:	f7de fafb 	bl	80005f8 <__aeabi_dmul>
 8022002:	a377      	add	r3, pc, #476	@ (adr r3, 80221e0 <__ieee754_pow+0x748>)
 8022004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022008:	f7de f940 	bl	800028c <__adddf3>
 802200c:	4622      	mov	r2, r4
 802200e:	462b      	mov	r3, r5
 8022010:	f7de faf2 	bl	80005f8 <__aeabi_dmul>
 8022014:	a374      	add	r3, pc, #464	@ (adr r3, 80221e8 <__ieee754_pow+0x750>)
 8022016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802201a:	f7de f937 	bl	800028c <__adddf3>
 802201e:	4622      	mov	r2, r4
 8022020:	462b      	mov	r3, r5
 8022022:	f7de fae9 	bl	80005f8 <__aeabi_dmul>
 8022026:	a372      	add	r3, pc, #456	@ (adr r3, 80221f0 <__ieee754_pow+0x758>)
 8022028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802202c:	f7de f92e 	bl	800028c <__adddf3>
 8022030:	4622      	mov	r2, r4
 8022032:	4606      	mov	r6, r0
 8022034:	460f      	mov	r7, r1
 8022036:	462b      	mov	r3, r5
 8022038:	4620      	mov	r0, r4
 802203a:	4629      	mov	r1, r5
 802203c:	f7de fadc 	bl	80005f8 <__aeabi_dmul>
 8022040:	4602      	mov	r2, r0
 8022042:	460b      	mov	r3, r1
 8022044:	4630      	mov	r0, r6
 8022046:	4639      	mov	r1, r7
 8022048:	f7de fad6 	bl	80005f8 <__aeabi_dmul>
 802204c:	465a      	mov	r2, fp
 802204e:	4604      	mov	r4, r0
 8022050:	460d      	mov	r5, r1
 8022052:	464b      	mov	r3, r9
 8022054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022058:	f7de f918 	bl	800028c <__adddf3>
 802205c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022060:	f7de faca 	bl	80005f8 <__aeabi_dmul>
 8022064:	4622      	mov	r2, r4
 8022066:	462b      	mov	r3, r5
 8022068:	f7de f910 	bl	800028c <__adddf3>
 802206c:	465a      	mov	r2, fp
 802206e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022072:	464b      	mov	r3, r9
 8022074:	4658      	mov	r0, fp
 8022076:	4649      	mov	r1, r9
 8022078:	f7de fabe 	bl	80005f8 <__aeabi_dmul>
 802207c:	4b6a      	ldr	r3, [pc, #424]	@ (8022228 <__ieee754_pow+0x790>)
 802207e:	2200      	movs	r2, #0
 8022080:	4606      	mov	r6, r0
 8022082:	460f      	mov	r7, r1
 8022084:	f7de f902 	bl	800028c <__adddf3>
 8022088:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802208c:	f7de f8fe 	bl	800028c <__adddf3>
 8022090:	46d8      	mov	r8, fp
 8022092:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8022096:	460d      	mov	r5, r1
 8022098:	465a      	mov	r2, fp
 802209a:	460b      	mov	r3, r1
 802209c:	4640      	mov	r0, r8
 802209e:	4649      	mov	r1, r9
 80220a0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80220a4:	f7de faa8 	bl	80005f8 <__aeabi_dmul>
 80220a8:	465c      	mov	r4, fp
 80220aa:	4680      	mov	r8, r0
 80220ac:	4689      	mov	r9, r1
 80220ae:	4b5e      	ldr	r3, [pc, #376]	@ (8022228 <__ieee754_pow+0x790>)
 80220b0:	2200      	movs	r2, #0
 80220b2:	4620      	mov	r0, r4
 80220b4:	4629      	mov	r1, r5
 80220b6:	f7de f8e7 	bl	8000288 <__aeabi_dsub>
 80220ba:	4632      	mov	r2, r6
 80220bc:	463b      	mov	r3, r7
 80220be:	f7de f8e3 	bl	8000288 <__aeabi_dsub>
 80220c2:	4602      	mov	r2, r0
 80220c4:	460b      	mov	r3, r1
 80220c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80220ca:	f7de f8dd 	bl	8000288 <__aeabi_dsub>
 80220ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80220d2:	f7de fa91 	bl	80005f8 <__aeabi_dmul>
 80220d6:	4622      	mov	r2, r4
 80220d8:	4606      	mov	r6, r0
 80220da:	460f      	mov	r7, r1
 80220dc:	462b      	mov	r3, r5
 80220de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80220e2:	f7de fa89 	bl	80005f8 <__aeabi_dmul>
 80220e6:	4602      	mov	r2, r0
 80220e8:	460b      	mov	r3, r1
 80220ea:	4630      	mov	r0, r6
 80220ec:	4639      	mov	r1, r7
 80220ee:	f7de f8cd 	bl	800028c <__adddf3>
 80220f2:	4606      	mov	r6, r0
 80220f4:	460f      	mov	r7, r1
 80220f6:	4602      	mov	r2, r0
 80220f8:	460b      	mov	r3, r1
 80220fa:	4640      	mov	r0, r8
 80220fc:	4649      	mov	r1, r9
 80220fe:	f7de f8c5 	bl	800028c <__adddf3>
 8022102:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8022106:	a33c      	add	r3, pc, #240	@ (adr r3, 80221f8 <__ieee754_pow+0x760>)
 8022108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802210c:	4658      	mov	r0, fp
 802210e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8022112:	460d      	mov	r5, r1
 8022114:	f7de fa70 	bl	80005f8 <__aeabi_dmul>
 8022118:	465c      	mov	r4, fp
 802211a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802211e:	4642      	mov	r2, r8
 8022120:	464b      	mov	r3, r9
 8022122:	4620      	mov	r0, r4
 8022124:	4629      	mov	r1, r5
 8022126:	f7de f8af 	bl	8000288 <__aeabi_dsub>
 802212a:	4602      	mov	r2, r0
 802212c:	460b      	mov	r3, r1
 802212e:	4630      	mov	r0, r6
 8022130:	4639      	mov	r1, r7
 8022132:	f7de f8a9 	bl	8000288 <__aeabi_dsub>
 8022136:	a332      	add	r3, pc, #200	@ (adr r3, 8022200 <__ieee754_pow+0x768>)
 8022138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802213c:	f7de fa5c 	bl	80005f8 <__aeabi_dmul>
 8022140:	a331      	add	r3, pc, #196	@ (adr r3, 8022208 <__ieee754_pow+0x770>)
 8022142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022146:	4606      	mov	r6, r0
 8022148:	460f      	mov	r7, r1
 802214a:	4620      	mov	r0, r4
 802214c:	4629      	mov	r1, r5
 802214e:	f7de fa53 	bl	80005f8 <__aeabi_dmul>
 8022152:	4602      	mov	r2, r0
 8022154:	460b      	mov	r3, r1
 8022156:	4630      	mov	r0, r6
 8022158:	4639      	mov	r1, r7
 802215a:	f7de f897 	bl	800028c <__adddf3>
 802215e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022160:	4b32      	ldr	r3, [pc, #200]	@ (802222c <__ieee754_pow+0x794>)
 8022162:	4413      	add	r3, r2
 8022164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022168:	f7de f890 	bl	800028c <__adddf3>
 802216c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022170:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022172:	f7de f9d7 	bl	8000524 <__aeabi_i2d>
 8022176:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022178:	4b2d      	ldr	r3, [pc, #180]	@ (8022230 <__ieee754_pow+0x798>)
 802217a:	4413      	add	r3, r2
 802217c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022180:	4606      	mov	r6, r0
 8022182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022186:	460f      	mov	r7, r1
 8022188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802218c:	f7de f87e 	bl	800028c <__adddf3>
 8022190:	4642      	mov	r2, r8
 8022192:	464b      	mov	r3, r9
 8022194:	f7de f87a 	bl	800028c <__adddf3>
 8022198:	4632      	mov	r2, r6
 802219a:	463b      	mov	r3, r7
 802219c:	f7de f876 	bl	800028c <__adddf3>
 80221a0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80221a4:	4632      	mov	r2, r6
 80221a6:	463b      	mov	r3, r7
 80221a8:	4658      	mov	r0, fp
 80221aa:	460d      	mov	r5, r1
 80221ac:	f7de f86c 	bl	8000288 <__aeabi_dsub>
 80221b0:	4642      	mov	r2, r8
 80221b2:	464b      	mov	r3, r9
 80221b4:	f7de f868 	bl	8000288 <__aeabi_dsub>
 80221b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80221bc:	f7de f864 	bl	8000288 <__aeabi_dsub>
 80221c0:	465c      	mov	r4, fp
 80221c2:	4602      	mov	r2, r0
 80221c4:	e036      	b.n	8022234 <__ieee754_pow+0x79c>
 80221c6:	bf00      	nop
 80221c8:	4a454eef 	.word	0x4a454eef
 80221cc:	3fca7e28 	.word	0x3fca7e28
 80221d0:	93c9db65 	.word	0x93c9db65
 80221d4:	3fcd864a 	.word	0x3fcd864a
 80221d8:	a91d4101 	.word	0xa91d4101
 80221dc:	3fd17460 	.word	0x3fd17460
 80221e0:	518f264d 	.word	0x518f264d
 80221e4:	3fd55555 	.word	0x3fd55555
 80221e8:	db6fabff 	.word	0xdb6fabff
 80221ec:	3fdb6db6 	.word	0x3fdb6db6
 80221f0:	33333303 	.word	0x33333303
 80221f4:	3fe33333 	.word	0x3fe33333
 80221f8:	e0000000 	.word	0xe0000000
 80221fc:	3feec709 	.word	0x3feec709
 8022200:	dc3a03fd 	.word	0xdc3a03fd
 8022204:	3feec709 	.word	0x3feec709
 8022208:	145b01f5 	.word	0x145b01f5
 802220c:	be3e2fe0 	.word	0xbe3e2fe0
 8022210:	7ff00000 	.word	0x7ff00000
 8022214:	43400000 	.word	0x43400000
 8022218:	0003988e 	.word	0x0003988e
 802221c:	000bb679 	.word	0x000bb679
 8022220:	08023d30 	.word	0x08023d30
 8022224:	3ff00000 	.word	0x3ff00000
 8022228:	40080000 	.word	0x40080000
 802222c:	08023d10 	.word	0x08023d10
 8022230:	08023d20 	.word	0x08023d20
 8022234:	460b      	mov	r3, r1
 8022236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802223a:	e5d7      	b.n	8021dec <__ieee754_pow+0x354>
 802223c:	f04f 0a01 	mov.w	sl, #1
 8022240:	e65e      	b.n	8021f00 <__ieee754_pow+0x468>
 8022242:	a3b4      	add	r3, pc, #720	@ (adr r3, 8022514 <__ieee754_pow+0xa7c>)
 8022244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022248:	4630      	mov	r0, r6
 802224a:	4639      	mov	r1, r7
 802224c:	f7de f81e 	bl	800028c <__adddf3>
 8022250:	4642      	mov	r2, r8
 8022252:	e9cd 0100 	strd	r0, r1, [sp]
 8022256:	464b      	mov	r3, r9
 8022258:	4620      	mov	r0, r4
 802225a:	4629      	mov	r1, r5
 802225c:	f7de f814 	bl	8000288 <__aeabi_dsub>
 8022260:	4602      	mov	r2, r0
 8022262:	460b      	mov	r3, r1
 8022264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022268:	f7de fc56 	bl	8000b18 <__aeabi_dcmpgt>
 802226c:	2800      	cmp	r0, #0
 802226e:	f47f ae00 	bne.w	8021e72 <__ieee754_pow+0x3da>
 8022272:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8022276:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802227a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 802227e:	fa43 fa0a 	asr.w	sl, r3, sl
 8022282:	44da      	add	sl, fp
 8022284:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8022288:	489d      	ldr	r0, [pc, #628]	@ (8022500 <__ieee754_pow+0xa68>)
 802228a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 802228e:	4108      	asrs	r0, r1
 8022290:	ea00 030a 	and.w	r3, r0, sl
 8022294:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8022298:	f1c1 0114 	rsb	r1, r1, #20
 802229c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80222a0:	fa4a fa01 	asr.w	sl, sl, r1
 80222a4:	f1bb 0f00 	cmp.w	fp, #0
 80222a8:	4640      	mov	r0, r8
 80222aa:	4649      	mov	r1, r9
 80222ac:	f04f 0200 	mov.w	r2, #0
 80222b0:	bfb8      	it	lt
 80222b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80222b6:	f7dd ffe7 	bl	8000288 <__aeabi_dsub>
 80222ba:	4680      	mov	r8, r0
 80222bc:	4689      	mov	r9, r1
 80222be:	4632      	mov	r2, r6
 80222c0:	463b      	mov	r3, r7
 80222c2:	4640      	mov	r0, r8
 80222c4:	4649      	mov	r1, r9
 80222c6:	f7dd ffe1 	bl	800028c <__adddf3>
 80222ca:	2400      	movs	r4, #0
 80222cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80224c0 <__ieee754_pow+0xa28>)
 80222ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222d2:	4620      	mov	r0, r4
 80222d4:	460d      	mov	r5, r1
 80222d6:	f7de f98f 	bl	80005f8 <__aeabi_dmul>
 80222da:	4642      	mov	r2, r8
 80222dc:	e9cd 0100 	strd	r0, r1, [sp]
 80222e0:	464b      	mov	r3, r9
 80222e2:	4620      	mov	r0, r4
 80222e4:	4629      	mov	r1, r5
 80222e6:	f7dd ffcf 	bl	8000288 <__aeabi_dsub>
 80222ea:	4602      	mov	r2, r0
 80222ec:	460b      	mov	r3, r1
 80222ee:	4630      	mov	r0, r6
 80222f0:	4639      	mov	r1, r7
 80222f2:	f7dd ffc9 	bl	8000288 <__aeabi_dsub>
 80222f6:	a374      	add	r3, pc, #464	@ (adr r3, 80224c8 <__ieee754_pow+0xa30>)
 80222f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222fc:	f7de f97c 	bl	80005f8 <__aeabi_dmul>
 8022300:	a373      	add	r3, pc, #460	@ (adr r3, 80224d0 <__ieee754_pow+0xa38>)
 8022302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022306:	4680      	mov	r8, r0
 8022308:	4689      	mov	r9, r1
 802230a:	4620      	mov	r0, r4
 802230c:	4629      	mov	r1, r5
 802230e:	f7de f973 	bl	80005f8 <__aeabi_dmul>
 8022312:	4602      	mov	r2, r0
 8022314:	460b      	mov	r3, r1
 8022316:	4640      	mov	r0, r8
 8022318:	4649      	mov	r1, r9
 802231a:	f7dd ffb7 	bl	800028c <__adddf3>
 802231e:	4604      	mov	r4, r0
 8022320:	460d      	mov	r5, r1
 8022322:	4602      	mov	r2, r0
 8022324:	460b      	mov	r3, r1
 8022326:	e9dd 0100 	ldrd	r0, r1, [sp]
 802232a:	f7dd ffaf 	bl	800028c <__adddf3>
 802232e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022332:	4680      	mov	r8, r0
 8022334:	4689      	mov	r9, r1
 8022336:	f7dd ffa7 	bl	8000288 <__aeabi_dsub>
 802233a:	4602      	mov	r2, r0
 802233c:	460b      	mov	r3, r1
 802233e:	4620      	mov	r0, r4
 8022340:	4629      	mov	r1, r5
 8022342:	f7dd ffa1 	bl	8000288 <__aeabi_dsub>
 8022346:	4642      	mov	r2, r8
 8022348:	4606      	mov	r6, r0
 802234a:	460f      	mov	r7, r1
 802234c:	464b      	mov	r3, r9
 802234e:	4640      	mov	r0, r8
 8022350:	4649      	mov	r1, r9
 8022352:	f7de f951 	bl	80005f8 <__aeabi_dmul>
 8022356:	a360      	add	r3, pc, #384	@ (adr r3, 80224d8 <__ieee754_pow+0xa40>)
 8022358:	e9d3 2300 	ldrd	r2, r3, [r3]
 802235c:	4604      	mov	r4, r0
 802235e:	460d      	mov	r5, r1
 8022360:	f7de f94a 	bl	80005f8 <__aeabi_dmul>
 8022364:	a35e      	add	r3, pc, #376	@ (adr r3, 80224e0 <__ieee754_pow+0xa48>)
 8022366:	e9d3 2300 	ldrd	r2, r3, [r3]
 802236a:	f7dd ff8d 	bl	8000288 <__aeabi_dsub>
 802236e:	4622      	mov	r2, r4
 8022370:	462b      	mov	r3, r5
 8022372:	f7de f941 	bl	80005f8 <__aeabi_dmul>
 8022376:	a35c      	add	r3, pc, #368	@ (adr r3, 80224e8 <__ieee754_pow+0xa50>)
 8022378:	e9d3 2300 	ldrd	r2, r3, [r3]
 802237c:	f7dd ff86 	bl	800028c <__adddf3>
 8022380:	4622      	mov	r2, r4
 8022382:	462b      	mov	r3, r5
 8022384:	f7de f938 	bl	80005f8 <__aeabi_dmul>
 8022388:	a359      	add	r3, pc, #356	@ (adr r3, 80224f0 <__ieee754_pow+0xa58>)
 802238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802238e:	f7dd ff7b 	bl	8000288 <__aeabi_dsub>
 8022392:	4622      	mov	r2, r4
 8022394:	462b      	mov	r3, r5
 8022396:	f7de f92f 	bl	80005f8 <__aeabi_dmul>
 802239a:	a357      	add	r3, pc, #348	@ (adr r3, 80224f8 <__ieee754_pow+0xa60>)
 802239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223a0:	f7dd ff74 	bl	800028c <__adddf3>
 80223a4:	4622      	mov	r2, r4
 80223a6:	462b      	mov	r3, r5
 80223a8:	f7de f926 	bl	80005f8 <__aeabi_dmul>
 80223ac:	4602      	mov	r2, r0
 80223ae:	460b      	mov	r3, r1
 80223b0:	4640      	mov	r0, r8
 80223b2:	4649      	mov	r1, r9
 80223b4:	f7dd ff68 	bl	8000288 <__aeabi_dsub>
 80223b8:	4604      	mov	r4, r0
 80223ba:	460d      	mov	r5, r1
 80223bc:	4602      	mov	r2, r0
 80223be:	460b      	mov	r3, r1
 80223c0:	4640      	mov	r0, r8
 80223c2:	4649      	mov	r1, r9
 80223c4:	f7de f918 	bl	80005f8 <__aeabi_dmul>
 80223c8:	2200      	movs	r2, #0
 80223ca:	e9cd 0100 	strd	r0, r1, [sp]
 80223ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80223d2:	4620      	mov	r0, r4
 80223d4:	4629      	mov	r1, r5
 80223d6:	f7dd ff57 	bl	8000288 <__aeabi_dsub>
 80223da:	4602      	mov	r2, r0
 80223dc:	460b      	mov	r3, r1
 80223de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80223e2:	f7de fa33 	bl	800084c <__aeabi_ddiv>
 80223e6:	4632      	mov	r2, r6
 80223e8:	4604      	mov	r4, r0
 80223ea:	460d      	mov	r5, r1
 80223ec:	463b      	mov	r3, r7
 80223ee:	4640      	mov	r0, r8
 80223f0:	4649      	mov	r1, r9
 80223f2:	f7de f901 	bl	80005f8 <__aeabi_dmul>
 80223f6:	4632      	mov	r2, r6
 80223f8:	463b      	mov	r3, r7
 80223fa:	f7dd ff47 	bl	800028c <__adddf3>
 80223fe:	4602      	mov	r2, r0
 8022400:	460b      	mov	r3, r1
 8022402:	4620      	mov	r0, r4
 8022404:	4629      	mov	r1, r5
 8022406:	f7dd ff3f 	bl	8000288 <__aeabi_dsub>
 802240a:	4642      	mov	r2, r8
 802240c:	464b      	mov	r3, r9
 802240e:	f7dd ff3b 	bl	8000288 <__aeabi_dsub>
 8022412:	460b      	mov	r3, r1
 8022414:	4602      	mov	r2, r0
 8022416:	493b      	ldr	r1, [pc, #236]	@ (8022504 <__ieee754_pow+0xa6c>)
 8022418:	2000      	movs	r0, #0
 802241a:	f7dd ff35 	bl	8000288 <__aeabi_dsub>
 802241e:	ec41 0b10 	vmov	d0, r0, r1
 8022422:	ee10 3a90 	vmov	r3, s1
 8022426:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802242a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802242e:	da30      	bge.n	8022492 <__ieee754_pow+0x9fa>
 8022430:	4650      	mov	r0, sl
 8022432:	f000 fa71 	bl	8022918 <scalbn>
 8022436:	ec51 0b10 	vmov	r0, r1, d0
 802243a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802243e:	f7ff bbd2 	b.w	8021be6 <__ieee754_pow+0x14e>
 8022442:	4c31      	ldr	r4, [pc, #196]	@ (8022508 <__ieee754_pow+0xa70>)
 8022444:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022448:	42a3      	cmp	r3, r4
 802244a:	d91a      	bls.n	8022482 <__ieee754_pow+0x9ea>
 802244c:	4b2f      	ldr	r3, [pc, #188]	@ (802250c <__ieee754_pow+0xa74>)
 802244e:	440b      	add	r3, r1
 8022450:	4303      	orrs	r3, r0
 8022452:	d009      	beq.n	8022468 <__ieee754_pow+0x9d0>
 8022454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022458:	2200      	movs	r2, #0
 802245a:	2300      	movs	r3, #0
 802245c:	f7de fb3e 	bl	8000adc <__aeabi_dcmplt>
 8022460:	3800      	subs	r0, #0
 8022462:	bf18      	it	ne
 8022464:	2001      	movne	r0, #1
 8022466:	e42b      	b.n	8021cc0 <__ieee754_pow+0x228>
 8022468:	4642      	mov	r2, r8
 802246a:	464b      	mov	r3, r9
 802246c:	f7dd ff0c 	bl	8000288 <__aeabi_dsub>
 8022470:	4632      	mov	r2, r6
 8022472:	463b      	mov	r3, r7
 8022474:	f7de fb46 	bl	8000b04 <__aeabi_dcmpge>
 8022478:	2800      	cmp	r0, #0
 802247a:	d1eb      	bne.n	8022454 <__ieee754_pow+0x9bc>
 802247c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 802251c <__ieee754_pow+0xa84>
 8022480:	e6f7      	b.n	8022272 <__ieee754_pow+0x7da>
 8022482:	469a      	mov	sl, r3
 8022484:	4b22      	ldr	r3, [pc, #136]	@ (8022510 <__ieee754_pow+0xa78>)
 8022486:	459a      	cmp	sl, r3
 8022488:	f63f aef3 	bhi.w	8022272 <__ieee754_pow+0x7da>
 802248c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022490:	e715      	b.n	80222be <__ieee754_pow+0x826>
 8022492:	ec51 0b10 	vmov	r0, r1, d0
 8022496:	4619      	mov	r1, r3
 8022498:	e7cf      	b.n	802243a <__ieee754_pow+0x9a2>
 802249a:	491a      	ldr	r1, [pc, #104]	@ (8022504 <__ieee754_pow+0xa6c>)
 802249c:	2000      	movs	r0, #0
 802249e:	f7ff bb18 	b.w	8021ad2 <__ieee754_pow+0x3a>
 80224a2:	2000      	movs	r0, #0
 80224a4:	2100      	movs	r1, #0
 80224a6:	f7ff bb14 	b.w	8021ad2 <__ieee754_pow+0x3a>
 80224aa:	4630      	mov	r0, r6
 80224ac:	4639      	mov	r1, r7
 80224ae:	f7ff bb10 	b.w	8021ad2 <__ieee754_pow+0x3a>
 80224b2:	460c      	mov	r4, r1
 80224b4:	f7ff bb5e 	b.w	8021b74 <__ieee754_pow+0xdc>
 80224b8:	2400      	movs	r4, #0
 80224ba:	f7ff bb49 	b.w	8021b50 <__ieee754_pow+0xb8>
 80224be:	bf00      	nop
 80224c0:	00000000 	.word	0x00000000
 80224c4:	3fe62e43 	.word	0x3fe62e43
 80224c8:	fefa39ef 	.word	0xfefa39ef
 80224cc:	3fe62e42 	.word	0x3fe62e42
 80224d0:	0ca86c39 	.word	0x0ca86c39
 80224d4:	be205c61 	.word	0xbe205c61
 80224d8:	72bea4d0 	.word	0x72bea4d0
 80224dc:	3e663769 	.word	0x3e663769
 80224e0:	c5d26bf1 	.word	0xc5d26bf1
 80224e4:	3ebbbd41 	.word	0x3ebbbd41
 80224e8:	af25de2c 	.word	0xaf25de2c
 80224ec:	3f11566a 	.word	0x3f11566a
 80224f0:	16bebd93 	.word	0x16bebd93
 80224f4:	3f66c16c 	.word	0x3f66c16c
 80224f8:	5555553e 	.word	0x5555553e
 80224fc:	3fc55555 	.word	0x3fc55555
 8022500:	fff00000 	.word	0xfff00000
 8022504:	3ff00000 	.word	0x3ff00000
 8022508:	4090cbff 	.word	0x4090cbff
 802250c:	3f6f3400 	.word	0x3f6f3400
 8022510:	3fe00000 	.word	0x3fe00000
 8022514:	652b82fe 	.word	0x652b82fe
 8022518:	3c971547 	.word	0x3c971547
 802251c:	4090cc00 	.word	0x4090cc00

08022520 <__ieee754_rem_pio2>:
 8022520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022524:	ec57 6b10 	vmov	r6, r7, d0
 8022528:	4bc5      	ldr	r3, [pc, #788]	@ (8022840 <__ieee754_rem_pio2+0x320>)
 802252a:	b08d      	sub	sp, #52	@ 0x34
 802252c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8022530:	4598      	cmp	r8, r3
 8022532:	4604      	mov	r4, r0
 8022534:	9704      	str	r7, [sp, #16]
 8022536:	d807      	bhi.n	8022548 <__ieee754_rem_pio2+0x28>
 8022538:	2200      	movs	r2, #0
 802253a:	2300      	movs	r3, #0
 802253c:	ed80 0b00 	vstr	d0, [r0]
 8022540:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8022544:	2500      	movs	r5, #0
 8022546:	e028      	b.n	802259a <__ieee754_rem_pio2+0x7a>
 8022548:	4bbe      	ldr	r3, [pc, #760]	@ (8022844 <__ieee754_rem_pio2+0x324>)
 802254a:	4598      	cmp	r8, r3
 802254c:	d878      	bhi.n	8022640 <__ieee754_rem_pio2+0x120>
 802254e:	9b04      	ldr	r3, [sp, #16]
 8022550:	4dbd      	ldr	r5, [pc, #756]	@ (8022848 <__ieee754_rem_pio2+0x328>)
 8022552:	2b00      	cmp	r3, #0
 8022554:	4630      	mov	r0, r6
 8022556:	a3ac      	add	r3, pc, #688	@ (adr r3, 8022808 <__ieee754_rem_pio2+0x2e8>)
 8022558:	e9d3 2300 	ldrd	r2, r3, [r3]
 802255c:	4639      	mov	r1, r7
 802255e:	dd38      	ble.n	80225d2 <__ieee754_rem_pio2+0xb2>
 8022560:	f7dd fe92 	bl	8000288 <__aeabi_dsub>
 8022564:	45a8      	cmp	r8, r5
 8022566:	4606      	mov	r6, r0
 8022568:	460f      	mov	r7, r1
 802256a:	d01a      	beq.n	80225a2 <__ieee754_rem_pio2+0x82>
 802256c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8022810 <__ieee754_rem_pio2+0x2f0>)
 802256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022572:	f7dd fe89 	bl	8000288 <__aeabi_dsub>
 8022576:	4602      	mov	r2, r0
 8022578:	460b      	mov	r3, r1
 802257a:	4680      	mov	r8, r0
 802257c:	4689      	mov	r9, r1
 802257e:	4630      	mov	r0, r6
 8022580:	4639      	mov	r1, r7
 8022582:	f7dd fe81 	bl	8000288 <__aeabi_dsub>
 8022586:	a3a2      	add	r3, pc, #648	@ (adr r3, 8022810 <__ieee754_rem_pio2+0x2f0>)
 8022588:	e9d3 2300 	ldrd	r2, r3, [r3]
 802258c:	f7dd fe7c 	bl	8000288 <__aeabi_dsub>
 8022590:	e9c4 8900 	strd	r8, r9, [r4]
 8022594:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022598:	2501      	movs	r5, #1
 802259a:	4628      	mov	r0, r5
 802259c:	b00d      	add	sp, #52	@ 0x34
 802259e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8022818 <__ieee754_rem_pio2+0x2f8>)
 80225a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225a8:	f7dd fe6e 	bl	8000288 <__aeabi_dsub>
 80225ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8022820 <__ieee754_rem_pio2+0x300>)
 80225ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225b2:	4606      	mov	r6, r0
 80225b4:	460f      	mov	r7, r1
 80225b6:	f7dd fe67 	bl	8000288 <__aeabi_dsub>
 80225ba:	4602      	mov	r2, r0
 80225bc:	460b      	mov	r3, r1
 80225be:	4680      	mov	r8, r0
 80225c0:	4689      	mov	r9, r1
 80225c2:	4630      	mov	r0, r6
 80225c4:	4639      	mov	r1, r7
 80225c6:	f7dd fe5f 	bl	8000288 <__aeabi_dsub>
 80225ca:	a395      	add	r3, pc, #596	@ (adr r3, 8022820 <__ieee754_rem_pio2+0x300>)
 80225cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225d0:	e7dc      	b.n	802258c <__ieee754_rem_pio2+0x6c>
 80225d2:	f7dd fe5b 	bl	800028c <__adddf3>
 80225d6:	45a8      	cmp	r8, r5
 80225d8:	4606      	mov	r6, r0
 80225da:	460f      	mov	r7, r1
 80225dc:	d018      	beq.n	8022610 <__ieee754_rem_pio2+0xf0>
 80225de:	a38c      	add	r3, pc, #560	@ (adr r3, 8022810 <__ieee754_rem_pio2+0x2f0>)
 80225e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225e4:	f7dd fe52 	bl	800028c <__adddf3>
 80225e8:	4602      	mov	r2, r0
 80225ea:	460b      	mov	r3, r1
 80225ec:	4680      	mov	r8, r0
 80225ee:	4689      	mov	r9, r1
 80225f0:	4630      	mov	r0, r6
 80225f2:	4639      	mov	r1, r7
 80225f4:	f7dd fe48 	bl	8000288 <__aeabi_dsub>
 80225f8:	a385      	add	r3, pc, #532	@ (adr r3, 8022810 <__ieee754_rem_pio2+0x2f0>)
 80225fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225fe:	f7dd fe45 	bl	800028c <__adddf3>
 8022602:	f04f 35ff 	mov.w	r5, #4294967295
 8022606:	e9c4 8900 	strd	r8, r9, [r4]
 802260a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802260e:	e7c4      	b.n	802259a <__ieee754_rem_pio2+0x7a>
 8022610:	a381      	add	r3, pc, #516	@ (adr r3, 8022818 <__ieee754_rem_pio2+0x2f8>)
 8022612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022616:	f7dd fe39 	bl	800028c <__adddf3>
 802261a:	a381      	add	r3, pc, #516	@ (adr r3, 8022820 <__ieee754_rem_pio2+0x300>)
 802261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022620:	4606      	mov	r6, r0
 8022622:	460f      	mov	r7, r1
 8022624:	f7dd fe32 	bl	800028c <__adddf3>
 8022628:	4602      	mov	r2, r0
 802262a:	460b      	mov	r3, r1
 802262c:	4680      	mov	r8, r0
 802262e:	4689      	mov	r9, r1
 8022630:	4630      	mov	r0, r6
 8022632:	4639      	mov	r1, r7
 8022634:	f7dd fe28 	bl	8000288 <__aeabi_dsub>
 8022638:	a379      	add	r3, pc, #484	@ (adr r3, 8022820 <__ieee754_rem_pio2+0x300>)
 802263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802263e:	e7de      	b.n	80225fe <__ieee754_rem_pio2+0xde>
 8022640:	4b82      	ldr	r3, [pc, #520]	@ (802284c <__ieee754_rem_pio2+0x32c>)
 8022642:	4598      	cmp	r8, r3
 8022644:	f200 80d1 	bhi.w	80227ea <__ieee754_rem_pio2+0x2ca>
 8022648:	f7fe fe1a 	bl	8021280 <fabs>
 802264c:	ec57 6b10 	vmov	r6, r7, d0
 8022650:	a375      	add	r3, pc, #468	@ (adr r3, 8022828 <__ieee754_rem_pio2+0x308>)
 8022652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022656:	4630      	mov	r0, r6
 8022658:	4639      	mov	r1, r7
 802265a:	f7dd ffcd 	bl	80005f8 <__aeabi_dmul>
 802265e:	4b7c      	ldr	r3, [pc, #496]	@ (8022850 <__ieee754_rem_pio2+0x330>)
 8022660:	2200      	movs	r2, #0
 8022662:	f7dd fe13 	bl	800028c <__adddf3>
 8022666:	f7de fa77 	bl	8000b58 <__aeabi_d2iz>
 802266a:	4605      	mov	r5, r0
 802266c:	f7dd ff5a 	bl	8000524 <__aeabi_i2d>
 8022670:	4602      	mov	r2, r0
 8022672:	460b      	mov	r3, r1
 8022674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022678:	a363      	add	r3, pc, #396	@ (adr r3, 8022808 <__ieee754_rem_pio2+0x2e8>)
 802267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802267e:	f7dd ffbb 	bl	80005f8 <__aeabi_dmul>
 8022682:	4602      	mov	r2, r0
 8022684:	460b      	mov	r3, r1
 8022686:	4630      	mov	r0, r6
 8022688:	4639      	mov	r1, r7
 802268a:	f7dd fdfd 	bl	8000288 <__aeabi_dsub>
 802268e:	a360      	add	r3, pc, #384	@ (adr r3, 8022810 <__ieee754_rem_pio2+0x2f0>)
 8022690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022694:	4682      	mov	sl, r0
 8022696:	468b      	mov	fp, r1
 8022698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802269c:	f7dd ffac 	bl	80005f8 <__aeabi_dmul>
 80226a0:	2d1f      	cmp	r5, #31
 80226a2:	4606      	mov	r6, r0
 80226a4:	460f      	mov	r7, r1
 80226a6:	dc0c      	bgt.n	80226c2 <__ieee754_rem_pio2+0x1a2>
 80226a8:	4b6a      	ldr	r3, [pc, #424]	@ (8022854 <__ieee754_rem_pio2+0x334>)
 80226aa:	1e6a      	subs	r2, r5, #1
 80226ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80226b0:	4543      	cmp	r3, r8
 80226b2:	d006      	beq.n	80226c2 <__ieee754_rem_pio2+0x1a2>
 80226b4:	4632      	mov	r2, r6
 80226b6:	463b      	mov	r3, r7
 80226b8:	4650      	mov	r0, sl
 80226ba:	4659      	mov	r1, fp
 80226bc:	f7dd fde4 	bl	8000288 <__aeabi_dsub>
 80226c0:	e00e      	b.n	80226e0 <__ieee754_rem_pio2+0x1c0>
 80226c2:	463b      	mov	r3, r7
 80226c4:	4632      	mov	r2, r6
 80226c6:	4650      	mov	r0, sl
 80226c8:	4659      	mov	r1, fp
 80226ca:	f7dd fddd 	bl	8000288 <__aeabi_dsub>
 80226ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80226d2:	9305      	str	r3, [sp, #20]
 80226d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80226d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80226dc:	2b10      	cmp	r3, #16
 80226de:	dc02      	bgt.n	80226e6 <__ieee754_rem_pio2+0x1c6>
 80226e0:	e9c4 0100 	strd	r0, r1, [r4]
 80226e4:	e039      	b.n	802275a <__ieee754_rem_pio2+0x23a>
 80226e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8022818 <__ieee754_rem_pio2+0x2f8>)
 80226e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80226f0:	f7dd ff82 	bl	80005f8 <__aeabi_dmul>
 80226f4:	4606      	mov	r6, r0
 80226f6:	460f      	mov	r7, r1
 80226f8:	4602      	mov	r2, r0
 80226fa:	460b      	mov	r3, r1
 80226fc:	4650      	mov	r0, sl
 80226fe:	4659      	mov	r1, fp
 8022700:	f7dd fdc2 	bl	8000288 <__aeabi_dsub>
 8022704:	4602      	mov	r2, r0
 8022706:	460b      	mov	r3, r1
 8022708:	4680      	mov	r8, r0
 802270a:	4689      	mov	r9, r1
 802270c:	4650      	mov	r0, sl
 802270e:	4659      	mov	r1, fp
 8022710:	f7dd fdba 	bl	8000288 <__aeabi_dsub>
 8022714:	4632      	mov	r2, r6
 8022716:	463b      	mov	r3, r7
 8022718:	f7dd fdb6 	bl	8000288 <__aeabi_dsub>
 802271c:	a340      	add	r3, pc, #256	@ (adr r3, 8022820 <__ieee754_rem_pio2+0x300>)
 802271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022722:	4606      	mov	r6, r0
 8022724:	460f      	mov	r7, r1
 8022726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802272a:	f7dd ff65 	bl	80005f8 <__aeabi_dmul>
 802272e:	4632      	mov	r2, r6
 8022730:	463b      	mov	r3, r7
 8022732:	f7dd fda9 	bl	8000288 <__aeabi_dsub>
 8022736:	4602      	mov	r2, r0
 8022738:	460b      	mov	r3, r1
 802273a:	4606      	mov	r6, r0
 802273c:	460f      	mov	r7, r1
 802273e:	4640      	mov	r0, r8
 8022740:	4649      	mov	r1, r9
 8022742:	f7dd fda1 	bl	8000288 <__aeabi_dsub>
 8022746:	9a05      	ldr	r2, [sp, #20]
 8022748:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802274c:	1ad3      	subs	r3, r2, r3
 802274e:	2b31      	cmp	r3, #49	@ 0x31
 8022750:	dc20      	bgt.n	8022794 <__ieee754_rem_pio2+0x274>
 8022752:	e9c4 0100 	strd	r0, r1, [r4]
 8022756:	46c2      	mov	sl, r8
 8022758:	46cb      	mov	fp, r9
 802275a:	e9d4 8900 	ldrd	r8, r9, [r4]
 802275e:	4650      	mov	r0, sl
 8022760:	4642      	mov	r2, r8
 8022762:	464b      	mov	r3, r9
 8022764:	4659      	mov	r1, fp
 8022766:	f7dd fd8f 	bl	8000288 <__aeabi_dsub>
 802276a:	463b      	mov	r3, r7
 802276c:	4632      	mov	r2, r6
 802276e:	f7dd fd8b 	bl	8000288 <__aeabi_dsub>
 8022772:	9b04      	ldr	r3, [sp, #16]
 8022774:	2b00      	cmp	r3, #0
 8022776:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802277a:	f6bf af0e 	bge.w	802259a <__ieee754_rem_pio2+0x7a>
 802277e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8022782:	6063      	str	r3, [r4, #4]
 8022784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022788:	f8c4 8000 	str.w	r8, [r4]
 802278c:	60a0      	str	r0, [r4, #8]
 802278e:	60e3      	str	r3, [r4, #12]
 8022790:	426d      	negs	r5, r5
 8022792:	e702      	b.n	802259a <__ieee754_rem_pio2+0x7a>
 8022794:	a326      	add	r3, pc, #152	@ (adr r3, 8022830 <__ieee754_rem_pio2+0x310>)
 8022796:	e9d3 2300 	ldrd	r2, r3, [r3]
 802279a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802279e:	f7dd ff2b 	bl	80005f8 <__aeabi_dmul>
 80227a2:	4606      	mov	r6, r0
 80227a4:	460f      	mov	r7, r1
 80227a6:	4602      	mov	r2, r0
 80227a8:	460b      	mov	r3, r1
 80227aa:	4640      	mov	r0, r8
 80227ac:	4649      	mov	r1, r9
 80227ae:	f7dd fd6b 	bl	8000288 <__aeabi_dsub>
 80227b2:	4602      	mov	r2, r0
 80227b4:	460b      	mov	r3, r1
 80227b6:	4682      	mov	sl, r0
 80227b8:	468b      	mov	fp, r1
 80227ba:	4640      	mov	r0, r8
 80227bc:	4649      	mov	r1, r9
 80227be:	f7dd fd63 	bl	8000288 <__aeabi_dsub>
 80227c2:	4632      	mov	r2, r6
 80227c4:	463b      	mov	r3, r7
 80227c6:	f7dd fd5f 	bl	8000288 <__aeabi_dsub>
 80227ca:	a31b      	add	r3, pc, #108	@ (adr r3, 8022838 <__ieee754_rem_pio2+0x318>)
 80227cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227d0:	4606      	mov	r6, r0
 80227d2:	460f      	mov	r7, r1
 80227d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80227d8:	f7dd ff0e 	bl	80005f8 <__aeabi_dmul>
 80227dc:	4632      	mov	r2, r6
 80227de:	463b      	mov	r3, r7
 80227e0:	f7dd fd52 	bl	8000288 <__aeabi_dsub>
 80227e4:	4606      	mov	r6, r0
 80227e6:	460f      	mov	r7, r1
 80227e8:	e764      	b.n	80226b4 <__ieee754_rem_pio2+0x194>
 80227ea:	4b1b      	ldr	r3, [pc, #108]	@ (8022858 <__ieee754_rem_pio2+0x338>)
 80227ec:	4598      	cmp	r8, r3
 80227ee:	d935      	bls.n	802285c <__ieee754_rem_pio2+0x33c>
 80227f0:	4632      	mov	r2, r6
 80227f2:	463b      	mov	r3, r7
 80227f4:	4630      	mov	r0, r6
 80227f6:	4639      	mov	r1, r7
 80227f8:	f7dd fd46 	bl	8000288 <__aeabi_dsub>
 80227fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022800:	e9c4 0100 	strd	r0, r1, [r4]
 8022804:	e69e      	b.n	8022544 <__ieee754_rem_pio2+0x24>
 8022806:	bf00      	nop
 8022808:	54400000 	.word	0x54400000
 802280c:	3ff921fb 	.word	0x3ff921fb
 8022810:	1a626331 	.word	0x1a626331
 8022814:	3dd0b461 	.word	0x3dd0b461
 8022818:	1a600000 	.word	0x1a600000
 802281c:	3dd0b461 	.word	0x3dd0b461
 8022820:	2e037073 	.word	0x2e037073
 8022824:	3ba3198a 	.word	0x3ba3198a
 8022828:	6dc9c883 	.word	0x6dc9c883
 802282c:	3fe45f30 	.word	0x3fe45f30
 8022830:	2e000000 	.word	0x2e000000
 8022834:	3ba3198a 	.word	0x3ba3198a
 8022838:	252049c1 	.word	0x252049c1
 802283c:	397b839a 	.word	0x397b839a
 8022840:	3fe921fb 	.word	0x3fe921fb
 8022844:	4002d97b 	.word	0x4002d97b
 8022848:	3ff921fb 	.word	0x3ff921fb
 802284c:	413921fb 	.word	0x413921fb
 8022850:	3fe00000 	.word	0x3fe00000
 8022854:	08023d40 	.word	0x08023d40
 8022858:	7fefffff 	.word	0x7fefffff
 802285c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8022860:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8022864:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8022868:	4630      	mov	r0, r6
 802286a:	460f      	mov	r7, r1
 802286c:	f7de f974 	bl	8000b58 <__aeabi_d2iz>
 8022870:	f7dd fe58 	bl	8000524 <__aeabi_i2d>
 8022874:	4602      	mov	r2, r0
 8022876:	460b      	mov	r3, r1
 8022878:	4630      	mov	r0, r6
 802287a:	4639      	mov	r1, r7
 802287c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022880:	f7dd fd02 	bl	8000288 <__aeabi_dsub>
 8022884:	4b22      	ldr	r3, [pc, #136]	@ (8022910 <__ieee754_rem_pio2+0x3f0>)
 8022886:	2200      	movs	r2, #0
 8022888:	f7dd feb6 	bl	80005f8 <__aeabi_dmul>
 802288c:	460f      	mov	r7, r1
 802288e:	4606      	mov	r6, r0
 8022890:	f7de f962 	bl	8000b58 <__aeabi_d2iz>
 8022894:	f7dd fe46 	bl	8000524 <__aeabi_i2d>
 8022898:	4602      	mov	r2, r0
 802289a:	460b      	mov	r3, r1
 802289c:	4630      	mov	r0, r6
 802289e:	4639      	mov	r1, r7
 80228a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80228a4:	f7dd fcf0 	bl	8000288 <__aeabi_dsub>
 80228a8:	4b19      	ldr	r3, [pc, #100]	@ (8022910 <__ieee754_rem_pio2+0x3f0>)
 80228aa:	2200      	movs	r2, #0
 80228ac:	f7dd fea4 	bl	80005f8 <__aeabi_dmul>
 80228b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80228b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80228b8:	f04f 0803 	mov.w	r8, #3
 80228bc:	2600      	movs	r6, #0
 80228be:	2700      	movs	r7, #0
 80228c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80228c4:	4632      	mov	r2, r6
 80228c6:	463b      	mov	r3, r7
 80228c8:	46c2      	mov	sl, r8
 80228ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80228ce:	f7de f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80228d2:	2800      	cmp	r0, #0
 80228d4:	d1f4      	bne.n	80228c0 <__ieee754_rem_pio2+0x3a0>
 80228d6:	4b0f      	ldr	r3, [pc, #60]	@ (8022914 <__ieee754_rem_pio2+0x3f4>)
 80228d8:	9301      	str	r3, [sp, #4]
 80228da:	2302      	movs	r3, #2
 80228dc:	9300      	str	r3, [sp, #0]
 80228de:	462a      	mov	r2, r5
 80228e0:	4653      	mov	r3, sl
 80228e2:	4621      	mov	r1, r4
 80228e4:	a806      	add	r0, sp, #24
 80228e6:	f000 f8d3 	bl	8022a90 <__kernel_rem_pio2>
 80228ea:	9b04      	ldr	r3, [sp, #16]
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	4605      	mov	r5, r0
 80228f0:	f6bf ae53 	bge.w	802259a <__ieee754_rem_pio2+0x7a>
 80228f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80228f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80228fc:	e9c4 2300 	strd	r2, r3, [r4]
 8022900:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8022904:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022908:	e9c4 2302 	strd	r2, r3, [r4, #8]
 802290c:	e740      	b.n	8022790 <__ieee754_rem_pio2+0x270>
 802290e:	bf00      	nop
 8022910:	41700000 	.word	0x41700000
 8022914:	08023dc0 	.word	0x08023dc0

08022918 <scalbn>:
 8022918:	b570      	push	{r4, r5, r6, lr}
 802291a:	ec55 4b10 	vmov	r4, r5, d0
 802291e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8022922:	4606      	mov	r6, r0
 8022924:	462b      	mov	r3, r5
 8022926:	b991      	cbnz	r1, 802294e <scalbn+0x36>
 8022928:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802292c:	4323      	orrs	r3, r4
 802292e:	d03d      	beq.n	80229ac <scalbn+0x94>
 8022930:	4b35      	ldr	r3, [pc, #212]	@ (8022a08 <scalbn+0xf0>)
 8022932:	4620      	mov	r0, r4
 8022934:	4629      	mov	r1, r5
 8022936:	2200      	movs	r2, #0
 8022938:	f7dd fe5e 	bl	80005f8 <__aeabi_dmul>
 802293c:	4b33      	ldr	r3, [pc, #204]	@ (8022a0c <scalbn+0xf4>)
 802293e:	429e      	cmp	r6, r3
 8022940:	4604      	mov	r4, r0
 8022942:	460d      	mov	r5, r1
 8022944:	da0f      	bge.n	8022966 <scalbn+0x4e>
 8022946:	a328      	add	r3, pc, #160	@ (adr r3, 80229e8 <scalbn+0xd0>)
 8022948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802294c:	e01e      	b.n	802298c <scalbn+0x74>
 802294e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8022952:	4291      	cmp	r1, r2
 8022954:	d10b      	bne.n	802296e <scalbn+0x56>
 8022956:	4622      	mov	r2, r4
 8022958:	4620      	mov	r0, r4
 802295a:	4629      	mov	r1, r5
 802295c:	f7dd fc96 	bl	800028c <__adddf3>
 8022960:	4604      	mov	r4, r0
 8022962:	460d      	mov	r5, r1
 8022964:	e022      	b.n	80229ac <scalbn+0x94>
 8022966:	460b      	mov	r3, r1
 8022968:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802296c:	3936      	subs	r1, #54	@ 0x36
 802296e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8022972:	4296      	cmp	r6, r2
 8022974:	dd0d      	ble.n	8022992 <scalbn+0x7a>
 8022976:	2d00      	cmp	r5, #0
 8022978:	a11d      	add	r1, pc, #116	@ (adr r1, 80229f0 <scalbn+0xd8>)
 802297a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802297e:	da02      	bge.n	8022986 <scalbn+0x6e>
 8022980:	a11d      	add	r1, pc, #116	@ (adr r1, 80229f8 <scalbn+0xe0>)
 8022982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022986:	a31a      	add	r3, pc, #104	@ (adr r3, 80229f0 <scalbn+0xd8>)
 8022988:	e9d3 2300 	ldrd	r2, r3, [r3]
 802298c:	f7dd fe34 	bl	80005f8 <__aeabi_dmul>
 8022990:	e7e6      	b.n	8022960 <scalbn+0x48>
 8022992:	1872      	adds	r2, r6, r1
 8022994:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8022998:	428a      	cmp	r2, r1
 802299a:	dcec      	bgt.n	8022976 <scalbn+0x5e>
 802299c:	2a00      	cmp	r2, #0
 802299e:	dd08      	ble.n	80229b2 <scalbn+0x9a>
 80229a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80229a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80229a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80229ac:	ec45 4b10 	vmov	d0, r4, r5
 80229b0:	bd70      	pop	{r4, r5, r6, pc}
 80229b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80229b6:	da08      	bge.n	80229ca <scalbn+0xb2>
 80229b8:	2d00      	cmp	r5, #0
 80229ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80229e8 <scalbn+0xd0>)
 80229bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80229c0:	dac1      	bge.n	8022946 <scalbn+0x2e>
 80229c2:	a10f      	add	r1, pc, #60	@ (adr r1, 8022a00 <scalbn+0xe8>)
 80229c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80229c8:	e7bd      	b.n	8022946 <scalbn+0x2e>
 80229ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80229ce:	3236      	adds	r2, #54	@ 0x36
 80229d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80229d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80229d8:	4620      	mov	r0, r4
 80229da:	4b0d      	ldr	r3, [pc, #52]	@ (8022a10 <scalbn+0xf8>)
 80229dc:	4629      	mov	r1, r5
 80229de:	2200      	movs	r2, #0
 80229e0:	e7d4      	b.n	802298c <scalbn+0x74>
 80229e2:	bf00      	nop
 80229e4:	f3af 8000 	nop.w
 80229e8:	c2f8f359 	.word	0xc2f8f359
 80229ec:	01a56e1f 	.word	0x01a56e1f
 80229f0:	8800759c 	.word	0x8800759c
 80229f4:	7e37e43c 	.word	0x7e37e43c
 80229f8:	8800759c 	.word	0x8800759c
 80229fc:	fe37e43c 	.word	0xfe37e43c
 8022a00:	c2f8f359 	.word	0xc2f8f359
 8022a04:	81a56e1f 	.word	0x81a56e1f
 8022a08:	43500000 	.word	0x43500000
 8022a0c:	ffff3cb0 	.word	0xffff3cb0
 8022a10:	3c900000 	.word	0x3c900000

08022a14 <with_errno>:
 8022a14:	b510      	push	{r4, lr}
 8022a16:	ed2d 8b02 	vpush	{d8}
 8022a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8022a1e:	eef0 8a60 	vmov.f32	s17, s1
 8022a22:	4604      	mov	r4, r0
 8022a24:	f7f9 fdf0 	bl	801c608 <__errno>
 8022a28:	eeb0 0a48 	vmov.f32	s0, s16
 8022a2c:	eef0 0a68 	vmov.f32	s1, s17
 8022a30:	ecbd 8b02 	vpop	{d8}
 8022a34:	6004      	str	r4, [r0, #0]
 8022a36:	bd10      	pop	{r4, pc}

08022a38 <xflow>:
 8022a38:	4603      	mov	r3, r0
 8022a3a:	b507      	push	{r0, r1, r2, lr}
 8022a3c:	ec51 0b10 	vmov	r0, r1, d0
 8022a40:	b183      	cbz	r3, 8022a64 <xflow+0x2c>
 8022a42:	4602      	mov	r2, r0
 8022a44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022a48:	e9cd 2300 	strd	r2, r3, [sp]
 8022a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022a50:	f7dd fdd2 	bl	80005f8 <__aeabi_dmul>
 8022a54:	ec41 0b10 	vmov	d0, r0, r1
 8022a58:	2022      	movs	r0, #34	@ 0x22
 8022a5a:	b003      	add	sp, #12
 8022a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a60:	f7ff bfd8 	b.w	8022a14 <with_errno>
 8022a64:	4602      	mov	r2, r0
 8022a66:	460b      	mov	r3, r1
 8022a68:	e7ee      	b.n	8022a48 <xflow+0x10>
 8022a6a:	0000      	movs	r0, r0
 8022a6c:	0000      	movs	r0, r0
	...

08022a70 <__math_uflow>:
 8022a70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022a78 <__math_uflow+0x8>
 8022a74:	f7ff bfe0 	b.w	8022a38 <xflow>
 8022a78:	00000000 	.word	0x00000000
 8022a7c:	10000000 	.word	0x10000000

08022a80 <__math_oflow>:
 8022a80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022a88 <__math_oflow+0x8>
 8022a84:	f7ff bfd8 	b.w	8022a38 <xflow>
 8022a88:	00000000 	.word	0x00000000
 8022a8c:	70000000 	.word	0x70000000

08022a90 <__kernel_rem_pio2>:
 8022a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a94:	ed2d 8b02 	vpush	{d8}
 8022a98:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8022a9c:	f112 0f14 	cmn.w	r2, #20
 8022aa0:	9306      	str	r3, [sp, #24]
 8022aa2:	9104      	str	r1, [sp, #16]
 8022aa4:	4bbe      	ldr	r3, [pc, #760]	@ (8022da0 <__kernel_rem_pio2+0x310>)
 8022aa6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8022aa8:	9008      	str	r0, [sp, #32]
 8022aaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022aae:	9300      	str	r3, [sp, #0]
 8022ab0:	9b06      	ldr	r3, [sp, #24]
 8022ab2:	f103 33ff 	add.w	r3, r3, #4294967295
 8022ab6:	bfa8      	it	ge
 8022ab8:	1ed4      	subge	r4, r2, #3
 8022aba:	9305      	str	r3, [sp, #20]
 8022abc:	bfb2      	itee	lt
 8022abe:	2400      	movlt	r4, #0
 8022ac0:	2318      	movge	r3, #24
 8022ac2:	fb94 f4f3 	sdivge	r4, r4, r3
 8022ac6:	f06f 0317 	mvn.w	r3, #23
 8022aca:	fb04 3303 	mla	r3, r4, r3, r3
 8022ace:	eb03 0b02 	add.w	fp, r3, r2
 8022ad2:	9b00      	ldr	r3, [sp, #0]
 8022ad4:	9a05      	ldr	r2, [sp, #20]
 8022ad6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8022d90 <__kernel_rem_pio2+0x300>
 8022ada:	eb03 0802 	add.w	r8, r3, r2
 8022ade:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8022ae0:	1aa7      	subs	r7, r4, r2
 8022ae2:	ae20      	add	r6, sp, #128	@ 0x80
 8022ae4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022ae8:	2500      	movs	r5, #0
 8022aea:	4545      	cmp	r5, r8
 8022aec:	dd13      	ble.n	8022b16 <__kernel_rem_pio2+0x86>
 8022aee:	9b06      	ldr	r3, [sp, #24]
 8022af0:	aa20      	add	r2, sp, #128	@ 0x80
 8022af2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8022af6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8022afa:	f04f 0800 	mov.w	r8, #0
 8022afe:	9b00      	ldr	r3, [sp, #0]
 8022b00:	4598      	cmp	r8, r3
 8022b02:	dc31      	bgt.n	8022b68 <__kernel_rem_pio2+0xd8>
 8022b04:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8022d90 <__kernel_rem_pio2+0x300>
 8022b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022b0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022b10:	462f      	mov	r7, r5
 8022b12:	2600      	movs	r6, #0
 8022b14:	e01b      	b.n	8022b4e <__kernel_rem_pio2+0xbe>
 8022b16:	42ef      	cmn	r7, r5
 8022b18:	d407      	bmi.n	8022b2a <__kernel_rem_pio2+0x9a>
 8022b1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8022b1e:	f7dd fd01 	bl	8000524 <__aeabi_i2d>
 8022b22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022b26:	3501      	adds	r5, #1
 8022b28:	e7df      	b.n	8022aea <__kernel_rem_pio2+0x5a>
 8022b2a:	ec51 0b18 	vmov	r0, r1, d8
 8022b2e:	e7f8      	b.n	8022b22 <__kernel_rem_pio2+0x92>
 8022b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022b38:	f7dd fd5e 	bl	80005f8 <__aeabi_dmul>
 8022b3c:	4602      	mov	r2, r0
 8022b3e:	460b      	mov	r3, r1
 8022b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022b44:	f7dd fba2 	bl	800028c <__adddf3>
 8022b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022b4c:	3601      	adds	r6, #1
 8022b4e:	9b05      	ldr	r3, [sp, #20]
 8022b50:	429e      	cmp	r6, r3
 8022b52:	f1a7 0708 	sub.w	r7, r7, #8
 8022b56:	ddeb      	ble.n	8022b30 <__kernel_rem_pio2+0xa0>
 8022b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022b5c:	f108 0801 	add.w	r8, r8, #1
 8022b60:	ecaa 7b02 	vstmia	sl!, {d7}
 8022b64:	3508      	adds	r5, #8
 8022b66:	e7ca      	b.n	8022afe <__kernel_rem_pio2+0x6e>
 8022b68:	9b00      	ldr	r3, [sp, #0]
 8022b6a:	f8dd 8000 	ldr.w	r8, [sp]
 8022b6e:	aa0c      	add	r2, sp, #48	@ 0x30
 8022b70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8022b76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8022b78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b7e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8022b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022b84:	ab98      	add	r3, sp, #608	@ 0x260
 8022b86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8022b8a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8022b8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022b92:	ac0c      	add	r4, sp, #48	@ 0x30
 8022b94:	ab70      	add	r3, sp, #448	@ 0x1c0
 8022b96:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8022b9a:	46a1      	mov	r9, r4
 8022b9c:	46c2      	mov	sl, r8
 8022b9e:	f1ba 0f00 	cmp.w	sl, #0
 8022ba2:	f1a5 0508 	sub.w	r5, r5, #8
 8022ba6:	dc77      	bgt.n	8022c98 <__kernel_rem_pio2+0x208>
 8022ba8:	4658      	mov	r0, fp
 8022baa:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022bae:	f7ff feb3 	bl	8022918 <scalbn>
 8022bb2:	ec57 6b10 	vmov	r6, r7, d0
 8022bb6:	2200      	movs	r2, #0
 8022bb8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8022bbc:	4630      	mov	r0, r6
 8022bbe:	4639      	mov	r1, r7
 8022bc0:	f7dd fd1a 	bl	80005f8 <__aeabi_dmul>
 8022bc4:	ec41 0b10 	vmov	d0, r0, r1
 8022bc8:	f7fe fc9e 	bl	8021508 <floor>
 8022bcc:	4b75      	ldr	r3, [pc, #468]	@ (8022da4 <__kernel_rem_pio2+0x314>)
 8022bce:	ec51 0b10 	vmov	r0, r1, d0
 8022bd2:	2200      	movs	r2, #0
 8022bd4:	f7dd fd10 	bl	80005f8 <__aeabi_dmul>
 8022bd8:	4602      	mov	r2, r0
 8022bda:	460b      	mov	r3, r1
 8022bdc:	4630      	mov	r0, r6
 8022bde:	4639      	mov	r1, r7
 8022be0:	f7dd fb52 	bl	8000288 <__aeabi_dsub>
 8022be4:	460f      	mov	r7, r1
 8022be6:	4606      	mov	r6, r0
 8022be8:	f7dd ffb6 	bl	8000b58 <__aeabi_d2iz>
 8022bec:	9002      	str	r0, [sp, #8]
 8022bee:	f7dd fc99 	bl	8000524 <__aeabi_i2d>
 8022bf2:	4602      	mov	r2, r0
 8022bf4:	460b      	mov	r3, r1
 8022bf6:	4630      	mov	r0, r6
 8022bf8:	4639      	mov	r1, r7
 8022bfa:	f7dd fb45 	bl	8000288 <__aeabi_dsub>
 8022bfe:	f1bb 0f00 	cmp.w	fp, #0
 8022c02:	4606      	mov	r6, r0
 8022c04:	460f      	mov	r7, r1
 8022c06:	dd6c      	ble.n	8022ce2 <__kernel_rem_pio2+0x252>
 8022c08:	f108 31ff 	add.w	r1, r8, #4294967295
 8022c0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8022c0e:	9d02      	ldr	r5, [sp, #8]
 8022c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022c14:	f1cb 0018 	rsb	r0, fp, #24
 8022c18:	fa43 f200 	asr.w	r2, r3, r0
 8022c1c:	4415      	add	r5, r2
 8022c1e:	4082      	lsls	r2, r0
 8022c20:	1a9b      	subs	r3, r3, r2
 8022c22:	aa0c      	add	r2, sp, #48	@ 0x30
 8022c24:	9502      	str	r5, [sp, #8]
 8022c26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8022c2a:	f1cb 0217 	rsb	r2, fp, #23
 8022c2e:	fa43 f902 	asr.w	r9, r3, r2
 8022c32:	f1b9 0f00 	cmp.w	r9, #0
 8022c36:	dd64      	ble.n	8022d02 <__kernel_rem_pio2+0x272>
 8022c38:	9b02      	ldr	r3, [sp, #8]
 8022c3a:	2200      	movs	r2, #0
 8022c3c:	3301      	adds	r3, #1
 8022c3e:	9302      	str	r3, [sp, #8]
 8022c40:	4615      	mov	r5, r2
 8022c42:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8022c46:	4590      	cmp	r8, r2
 8022c48:	f300 80b8 	bgt.w	8022dbc <__kernel_rem_pio2+0x32c>
 8022c4c:	f1bb 0f00 	cmp.w	fp, #0
 8022c50:	dd07      	ble.n	8022c62 <__kernel_rem_pio2+0x1d2>
 8022c52:	f1bb 0f01 	cmp.w	fp, #1
 8022c56:	f000 80bf 	beq.w	8022dd8 <__kernel_rem_pio2+0x348>
 8022c5a:	f1bb 0f02 	cmp.w	fp, #2
 8022c5e:	f000 80c6 	beq.w	8022dee <__kernel_rem_pio2+0x35e>
 8022c62:	f1b9 0f02 	cmp.w	r9, #2
 8022c66:	d14c      	bne.n	8022d02 <__kernel_rem_pio2+0x272>
 8022c68:	4632      	mov	r2, r6
 8022c6a:	463b      	mov	r3, r7
 8022c6c:	494e      	ldr	r1, [pc, #312]	@ (8022da8 <__kernel_rem_pio2+0x318>)
 8022c6e:	2000      	movs	r0, #0
 8022c70:	f7dd fb0a 	bl	8000288 <__aeabi_dsub>
 8022c74:	4606      	mov	r6, r0
 8022c76:	460f      	mov	r7, r1
 8022c78:	2d00      	cmp	r5, #0
 8022c7a:	d042      	beq.n	8022d02 <__kernel_rem_pio2+0x272>
 8022c7c:	4658      	mov	r0, fp
 8022c7e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8022d98 <__kernel_rem_pio2+0x308>
 8022c82:	f7ff fe49 	bl	8022918 <scalbn>
 8022c86:	4630      	mov	r0, r6
 8022c88:	4639      	mov	r1, r7
 8022c8a:	ec53 2b10 	vmov	r2, r3, d0
 8022c8e:	f7dd fafb 	bl	8000288 <__aeabi_dsub>
 8022c92:	4606      	mov	r6, r0
 8022c94:	460f      	mov	r7, r1
 8022c96:	e034      	b.n	8022d02 <__kernel_rem_pio2+0x272>
 8022c98:	4b44      	ldr	r3, [pc, #272]	@ (8022dac <__kernel_rem_pio2+0x31c>)
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ca0:	f7dd fcaa 	bl	80005f8 <__aeabi_dmul>
 8022ca4:	f7dd ff58 	bl	8000b58 <__aeabi_d2iz>
 8022ca8:	f7dd fc3c 	bl	8000524 <__aeabi_i2d>
 8022cac:	4b40      	ldr	r3, [pc, #256]	@ (8022db0 <__kernel_rem_pio2+0x320>)
 8022cae:	2200      	movs	r2, #0
 8022cb0:	4606      	mov	r6, r0
 8022cb2:	460f      	mov	r7, r1
 8022cb4:	f7dd fca0 	bl	80005f8 <__aeabi_dmul>
 8022cb8:	4602      	mov	r2, r0
 8022cba:	460b      	mov	r3, r1
 8022cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022cc0:	f7dd fae2 	bl	8000288 <__aeabi_dsub>
 8022cc4:	f7dd ff48 	bl	8000b58 <__aeabi_d2iz>
 8022cc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022ccc:	f849 0b04 	str.w	r0, [r9], #4
 8022cd0:	4639      	mov	r1, r7
 8022cd2:	4630      	mov	r0, r6
 8022cd4:	f7dd fada 	bl	800028c <__adddf3>
 8022cd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022ce0:	e75d      	b.n	8022b9e <__kernel_rem_pio2+0x10e>
 8022ce2:	d107      	bne.n	8022cf4 <__kernel_rem_pio2+0x264>
 8022ce4:	f108 33ff 	add.w	r3, r8, #4294967295
 8022ce8:	aa0c      	add	r2, sp, #48	@ 0x30
 8022cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022cee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8022cf2:	e79e      	b.n	8022c32 <__kernel_rem_pio2+0x1a2>
 8022cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8022db4 <__kernel_rem_pio2+0x324>)
 8022cf6:	2200      	movs	r2, #0
 8022cf8:	f7dd ff04 	bl	8000b04 <__aeabi_dcmpge>
 8022cfc:	2800      	cmp	r0, #0
 8022cfe:	d143      	bne.n	8022d88 <__kernel_rem_pio2+0x2f8>
 8022d00:	4681      	mov	r9, r0
 8022d02:	2200      	movs	r2, #0
 8022d04:	2300      	movs	r3, #0
 8022d06:	4630      	mov	r0, r6
 8022d08:	4639      	mov	r1, r7
 8022d0a:	f7dd fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8022d0e:	2800      	cmp	r0, #0
 8022d10:	f000 80bf 	beq.w	8022e92 <__kernel_rem_pio2+0x402>
 8022d14:	f108 33ff 	add.w	r3, r8, #4294967295
 8022d18:	2200      	movs	r2, #0
 8022d1a:	9900      	ldr	r1, [sp, #0]
 8022d1c:	428b      	cmp	r3, r1
 8022d1e:	da6e      	bge.n	8022dfe <__kernel_rem_pio2+0x36e>
 8022d20:	2a00      	cmp	r2, #0
 8022d22:	f000 8089 	beq.w	8022e38 <__kernel_rem_pio2+0x3a8>
 8022d26:	f108 38ff 	add.w	r8, r8, #4294967295
 8022d2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8022d2c:	f1ab 0b18 	sub.w	fp, fp, #24
 8022d30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d0f6      	beq.n	8022d26 <__kernel_rem_pio2+0x296>
 8022d38:	4658      	mov	r0, fp
 8022d3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8022d98 <__kernel_rem_pio2+0x308>
 8022d3e:	f7ff fdeb 	bl	8022918 <scalbn>
 8022d42:	f108 0301 	add.w	r3, r8, #1
 8022d46:	00da      	lsls	r2, r3, #3
 8022d48:	9205      	str	r2, [sp, #20]
 8022d4a:	ec55 4b10 	vmov	r4, r5, d0
 8022d4e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8022d50:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8022dac <__kernel_rem_pio2+0x31c>
 8022d54:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8022d58:	4646      	mov	r6, r8
 8022d5a:	f04f 0a00 	mov.w	sl, #0
 8022d5e:	2e00      	cmp	r6, #0
 8022d60:	f280 80cf 	bge.w	8022f02 <__kernel_rem_pio2+0x472>
 8022d64:	4644      	mov	r4, r8
 8022d66:	2c00      	cmp	r4, #0
 8022d68:	f2c0 80fd 	blt.w	8022f66 <__kernel_rem_pio2+0x4d6>
 8022d6c:	4b12      	ldr	r3, [pc, #72]	@ (8022db8 <__kernel_rem_pio2+0x328>)
 8022d6e:	461f      	mov	r7, r3
 8022d70:	ab70      	add	r3, sp, #448	@ 0x1c0
 8022d72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022d76:	9306      	str	r3, [sp, #24]
 8022d78:	f04f 0a00 	mov.w	sl, #0
 8022d7c:	f04f 0b00 	mov.w	fp, #0
 8022d80:	2600      	movs	r6, #0
 8022d82:	eba8 0504 	sub.w	r5, r8, r4
 8022d86:	e0e2      	b.n	8022f4e <__kernel_rem_pio2+0x4be>
 8022d88:	f04f 0902 	mov.w	r9, #2
 8022d8c:	e754      	b.n	8022c38 <__kernel_rem_pio2+0x1a8>
 8022d8e:	bf00      	nop
	...
 8022d9c:	3ff00000 	.word	0x3ff00000
 8022da0:	08023f08 	.word	0x08023f08
 8022da4:	40200000 	.word	0x40200000
 8022da8:	3ff00000 	.word	0x3ff00000
 8022dac:	3e700000 	.word	0x3e700000
 8022db0:	41700000 	.word	0x41700000
 8022db4:	3fe00000 	.word	0x3fe00000
 8022db8:	08023ec8 	.word	0x08023ec8
 8022dbc:	f854 3b04 	ldr.w	r3, [r4], #4
 8022dc0:	b945      	cbnz	r5, 8022dd4 <__kernel_rem_pio2+0x344>
 8022dc2:	b123      	cbz	r3, 8022dce <__kernel_rem_pio2+0x33e>
 8022dc4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8022dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8022dcc:	2301      	movs	r3, #1
 8022dce:	3201      	adds	r2, #1
 8022dd0:	461d      	mov	r5, r3
 8022dd2:	e738      	b.n	8022c46 <__kernel_rem_pio2+0x1b6>
 8022dd4:	1acb      	subs	r3, r1, r3
 8022dd6:	e7f7      	b.n	8022dc8 <__kernel_rem_pio2+0x338>
 8022dd8:	f108 32ff 	add.w	r2, r8, #4294967295
 8022ddc:	ab0c      	add	r3, sp, #48	@ 0x30
 8022dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022de2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022de6:	a90c      	add	r1, sp, #48	@ 0x30
 8022de8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8022dec:	e739      	b.n	8022c62 <__kernel_rem_pio2+0x1d2>
 8022dee:	f108 32ff 	add.w	r2, r8, #4294967295
 8022df2:	ab0c      	add	r3, sp, #48	@ 0x30
 8022df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022df8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022dfc:	e7f3      	b.n	8022de6 <__kernel_rem_pio2+0x356>
 8022dfe:	a90c      	add	r1, sp, #48	@ 0x30
 8022e00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022e04:	3b01      	subs	r3, #1
 8022e06:	430a      	orrs	r2, r1
 8022e08:	e787      	b.n	8022d1a <__kernel_rem_pio2+0x28a>
 8022e0a:	3401      	adds	r4, #1
 8022e0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022e10:	2a00      	cmp	r2, #0
 8022e12:	d0fa      	beq.n	8022e0a <__kernel_rem_pio2+0x37a>
 8022e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8022e1a:	eb0d 0503 	add.w	r5, sp, r3
 8022e1e:	9b06      	ldr	r3, [sp, #24]
 8022e20:	aa20      	add	r2, sp, #128	@ 0x80
 8022e22:	4443      	add	r3, r8
 8022e24:	f108 0701 	add.w	r7, r8, #1
 8022e28:	3d98      	subs	r5, #152	@ 0x98
 8022e2a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8022e2e:	4444      	add	r4, r8
 8022e30:	42bc      	cmp	r4, r7
 8022e32:	da04      	bge.n	8022e3e <__kernel_rem_pio2+0x3ae>
 8022e34:	46a0      	mov	r8, r4
 8022e36:	e6a2      	b.n	8022b7e <__kernel_rem_pio2+0xee>
 8022e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e3a:	2401      	movs	r4, #1
 8022e3c:	e7e6      	b.n	8022e0c <__kernel_rem_pio2+0x37c>
 8022e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e40:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8022e44:	f7dd fb6e 	bl	8000524 <__aeabi_i2d>
 8022e48:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8023110 <__kernel_rem_pio2+0x680>
 8022e4c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022e50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022e58:	46b2      	mov	sl, r6
 8022e5a:	f04f 0800 	mov.w	r8, #0
 8022e5e:	9b05      	ldr	r3, [sp, #20]
 8022e60:	4598      	cmp	r8, r3
 8022e62:	dd05      	ble.n	8022e70 <__kernel_rem_pio2+0x3e0>
 8022e64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022e68:	3701      	adds	r7, #1
 8022e6a:	eca5 7b02 	vstmia	r5!, {d7}
 8022e6e:	e7df      	b.n	8022e30 <__kernel_rem_pio2+0x3a0>
 8022e70:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8022e74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022e78:	f7dd fbbe 	bl	80005f8 <__aeabi_dmul>
 8022e7c:	4602      	mov	r2, r0
 8022e7e:	460b      	mov	r3, r1
 8022e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022e84:	f7dd fa02 	bl	800028c <__adddf3>
 8022e88:	f108 0801 	add.w	r8, r8, #1
 8022e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e90:	e7e5      	b.n	8022e5e <__kernel_rem_pio2+0x3ce>
 8022e92:	f1cb 0000 	rsb	r0, fp, #0
 8022e96:	ec47 6b10 	vmov	d0, r6, r7
 8022e9a:	f7ff fd3d 	bl	8022918 <scalbn>
 8022e9e:	ec55 4b10 	vmov	r4, r5, d0
 8022ea2:	4b9d      	ldr	r3, [pc, #628]	@ (8023118 <__kernel_rem_pio2+0x688>)
 8022ea4:	2200      	movs	r2, #0
 8022ea6:	4620      	mov	r0, r4
 8022ea8:	4629      	mov	r1, r5
 8022eaa:	f7dd fe2b 	bl	8000b04 <__aeabi_dcmpge>
 8022eae:	b300      	cbz	r0, 8022ef2 <__kernel_rem_pio2+0x462>
 8022eb0:	4b9a      	ldr	r3, [pc, #616]	@ (802311c <__kernel_rem_pio2+0x68c>)
 8022eb2:	2200      	movs	r2, #0
 8022eb4:	4620      	mov	r0, r4
 8022eb6:	4629      	mov	r1, r5
 8022eb8:	f7dd fb9e 	bl	80005f8 <__aeabi_dmul>
 8022ebc:	f7dd fe4c 	bl	8000b58 <__aeabi_d2iz>
 8022ec0:	4606      	mov	r6, r0
 8022ec2:	f7dd fb2f 	bl	8000524 <__aeabi_i2d>
 8022ec6:	4b94      	ldr	r3, [pc, #592]	@ (8023118 <__kernel_rem_pio2+0x688>)
 8022ec8:	2200      	movs	r2, #0
 8022eca:	f7dd fb95 	bl	80005f8 <__aeabi_dmul>
 8022ece:	460b      	mov	r3, r1
 8022ed0:	4602      	mov	r2, r0
 8022ed2:	4629      	mov	r1, r5
 8022ed4:	4620      	mov	r0, r4
 8022ed6:	f7dd f9d7 	bl	8000288 <__aeabi_dsub>
 8022eda:	f7dd fe3d 	bl	8000b58 <__aeabi_d2iz>
 8022ede:	ab0c      	add	r3, sp, #48	@ 0x30
 8022ee0:	f10b 0b18 	add.w	fp, fp, #24
 8022ee4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8022ee8:	f108 0801 	add.w	r8, r8, #1
 8022eec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8022ef0:	e722      	b.n	8022d38 <__kernel_rem_pio2+0x2a8>
 8022ef2:	4620      	mov	r0, r4
 8022ef4:	4629      	mov	r1, r5
 8022ef6:	f7dd fe2f 	bl	8000b58 <__aeabi_d2iz>
 8022efa:	ab0c      	add	r3, sp, #48	@ 0x30
 8022efc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8022f00:	e71a      	b.n	8022d38 <__kernel_rem_pio2+0x2a8>
 8022f02:	ab0c      	add	r3, sp, #48	@ 0x30
 8022f04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8022f08:	f7dd fb0c 	bl	8000524 <__aeabi_i2d>
 8022f0c:	4622      	mov	r2, r4
 8022f0e:	462b      	mov	r3, r5
 8022f10:	f7dd fb72 	bl	80005f8 <__aeabi_dmul>
 8022f14:	4652      	mov	r2, sl
 8022f16:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8022f1a:	465b      	mov	r3, fp
 8022f1c:	4620      	mov	r0, r4
 8022f1e:	4629      	mov	r1, r5
 8022f20:	f7dd fb6a 	bl	80005f8 <__aeabi_dmul>
 8022f24:	3e01      	subs	r6, #1
 8022f26:	4604      	mov	r4, r0
 8022f28:	460d      	mov	r5, r1
 8022f2a:	e718      	b.n	8022d5e <__kernel_rem_pio2+0x2ce>
 8022f2c:	9906      	ldr	r1, [sp, #24]
 8022f2e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8022f32:	9106      	str	r1, [sp, #24]
 8022f34:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8022f38:	f7dd fb5e 	bl	80005f8 <__aeabi_dmul>
 8022f3c:	4602      	mov	r2, r0
 8022f3e:	460b      	mov	r3, r1
 8022f40:	4650      	mov	r0, sl
 8022f42:	4659      	mov	r1, fp
 8022f44:	f7dd f9a2 	bl	800028c <__adddf3>
 8022f48:	3601      	adds	r6, #1
 8022f4a:	4682      	mov	sl, r0
 8022f4c:	468b      	mov	fp, r1
 8022f4e:	9b00      	ldr	r3, [sp, #0]
 8022f50:	429e      	cmp	r6, r3
 8022f52:	dc01      	bgt.n	8022f58 <__kernel_rem_pio2+0x4c8>
 8022f54:	42b5      	cmp	r5, r6
 8022f56:	dae9      	bge.n	8022f2c <__kernel_rem_pio2+0x49c>
 8022f58:	ab48      	add	r3, sp, #288	@ 0x120
 8022f5a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8022f5e:	e9c5 ab00 	strd	sl, fp, [r5]
 8022f62:	3c01      	subs	r4, #1
 8022f64:	e6ff      	b.n	8022d66 <__kernel_rem_pio2+0x2d6>
 8022f66:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8022f68:	2b02      	cmp	r3, #2
 8022f6a:	dc0b      	bgt.n	8022f84 <__kernel_rem_pio2+0x4f4>
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	dc39      	bgt.n	8022fe4 <__kernel_rem_pio2+0x554>
 8022f70:	d05d      	beq.n	802302e <__kernel_rem_pio2+0x59e>
 8022f72:	9b02      	ldr	r3, [sp, #8]
 8022f74:	f003 0007 	and.w	r0, r3, #7
 8022f78:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8022f7c:	ecbd 8b02 	vpop	{d8}
 8022f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f84:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8022f86:	2b03      	cmp	r3, #3
 8022f88:	d1f3      	bne.n	8022f72 <__kernel_rem_pio2+0x4e2>
 8022f8a:	9b05      	ldr	r3, [sp, #20]
 8022f8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8022f90:	eb0d 0403 	add.w	r4, sp, r3
 8022f94:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8022f98:	4625      	mov	r5, r4
 8022f9a:	46c2      	mov	sl, r8
 8022f9c:	f1ba 0f00 	cmp.w	sl, #0
 8022fa0:	f1a5 0508 	sub.w	r5, r5, #8
 8022fa4:	dc6b      	bgt.n	802307e <__kernel_rem_pio2+0x5ee>
 8022fa6:	4645      	mov	r5, r8
 8022fa8:	2d01      	cmp	r5, #1
 8022faa:	f1a4 0408 	sub.w	r4, r4, #8
 8022fae:	f300 8087 	bgt.w	80230c0 <__kernel_rem_pio2+0x630>
 8022fb2:	9c05      	ldr	r4, [sp, #20]
 8022fb4:	ab48      	add	r3, sp, #288	@ 0x120
 8022fb6:	441c      	add	r4, r3
 8022fb8:	2000      	movs	r0, #0
 8022fba:	2100      	movs	r1, #0
 8022fbc:	f1b8 0f01 	cmp.w	r8, #1
 8022fc0:	f300 809c 	bgt.w	80230fc <__kernel_rem_pio2+0x66c>
 8022fc4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8022fc8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8022fcc:	f1b9 0f00 	cmp.w	r9, #0
 8022fd0:	f040 80a6 	bne.w	8023120 <__kernel_rem_pio2+0x690>
 8022fd4:	9b04      	ldr	r3, [sp, #16]
 8022fd6:	e9c3 7800 	strd	r7, r8, [r3]
 8022fda:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8022fde:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8022fe2:	e7c6      	b.n	8022f72 <__kernel_rem_pio2+0x4e2>
 8022fe4:	9d05      	ldr	r5, [sp, #20]
 8022fe6:	ab48      	add	r3, sp, #288	@ 0x120
 8022fe8:	441d      	add	r5, r3
 8022fea:	4644      	mov	r4, r8
 8022fec:	2000      	movs	r0, #0
 8022fee:	2100      	movs	r1, #0
 8022ff0:	2c00      	cmp	r4, #0
 8022ff2:	da35      	bge.n	8023060 <__kernel_rem_pio2+0x5d0>
 8022ff4:	f1b9 0f00 	cmp.w	r9, #0
 8022ff8:	d038      	beq.n	802306c <__kernel_rem_pio2+0x5dc>
 8022ffa:	4602      	mov	r2, r0
 8022ffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023000:	9c04      	ldr	r4, [sp, #16]
 8023002:	e9c4 2300 	strd	r2, r3, [r4]
 8023006:	4602      	mov	r2, r0
 8023008:	460b      	mov	r3, r1
 802300a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 802300e:	f7dd f93b 	bl	8000288 <__aeabi_dsub>
 8023012:	ad4a      	add	r5, sp, #296	@ 0x128
 8023014:	2401      	movs	r4, #1
 8023016:	45a0      	cmp	r8, r4
 8023018:	da2b      	bge.n	8023072 <__kernel_rem_pio2+0x5e2>
 802301a:	f1b9 0f00 	cmp.w	r9, #0
 802301e:	d002      	beq.n	8023026 <__kernel_rem_pio2+0x596>
 8023020:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023024:	4619      	mov	r1, r3
 8023026:	9b04      	ldr	r3, [sp, #16]
 8023028:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802302c:	e7a1      	b.n	8022f72 <__kernel_rem_pio2+0x4e2>
 802302e:	9c05      	ldr	r4, [sp, #20]
 8023030:	ab48      	add	r3, sp, #288	@ 0x120
 8023032:	441c      	add	r4, r3
 8023034:	2000      	movs	r0, #0
 8023036:	2100      	movs	r1, #0
 8023038:	f1b8 0f00 	cmp.w	r8, #0
 802303c:	da09      	bge.n	8023052 <__kernel_rem_pio2+0x5c2>
 802303e:	f1b9 0f00 	cmp.w	r9, #0
 8023042:	d002      	beq.n	802304a <__kernel_rem_pio2+0x5ba>
 8023044:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023048:	4619      	mov	r1, r3
 802304a:	9b04      	ldr	r3, [sp, #16]
 802304c:	e9c3 0100 	strd	r0, r1, [r3]
 8023050:	e78f      	b.n	8022f72 <__kernel_rem_pio2+0x4e2>
 8023052:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023056:	f7dd f919 	bl	800028c <__adddf3>
 802305a:	f108 38ff 	add.w	r8, r8, #4294967295
 802305e:	e7eb      	b.n	8023038 <__kernel_rem_pio2+0x5a8>
 8023060:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8023064:	f7dd f912 	bl	800028c <__adddf3>
 8023068:	3c01      	subs	r4, #1
 802306a:	e7c1      	b.n	8022ff0 <__kernel_rem_pio2+0x560>
 802306c:	4602      	mov	r2, r0
 802306e:	460b      	mov	r3, r1
 8023070:	e7c6      	b.n	8023000 <__kernel_rem_pio2+0x570>
 8023072:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8023076:	f7dd f909 	bl	800028c <__adddf3>
 802307a:	3401      	adds	r4, #1
 802307c:	e7cb      	b.n	8023016 <__kernel_rem_pio2+0x586>
 802307e:	ed95 7b00 	vldr	d7, [r5]
 8023082:	ed8d 7b00 	vstr	d7, [sp]
 8023086:	ed95 7b02 	vldr	d7, [r5, #8]
 802308a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802308e:	ec53 2b17 	vmov	r2, r3, d7
 8023092:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023096:	f7dd f8f9 	bl	800028c <__adddf3>
 802309a:	4602      	mov	r2, r0
 802309c:	460b      	mov	r3, r1
 802309e:	4606      	mov	r6, r0
 80230a0:	460f      	mov	r7, r1
 80230a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80230a6:	f7dd f8ef 	bl	8000288 <__aeabi_dsub>
 80230aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80230ae:	f7dd f8ed 	bl	800028c <__adddf3>
 80230b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80230b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80230ba:	e9c5 6700 	strd	r6, r7, [r5]
 80230be:	e76d      	b.n	8022f9c <__kernel_rem_pio2+0x50c>
 80230c0:	ed94 7b00 	vldr	d7, [r4]
 80230c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80230c8:	ec51 0b17 	vmov	r0, r1, d7
 80230cc:	4652      	mov	r2, sl
 80230ce:	465b      	mov	r3, fp
 80230d0:	ed8d 7b00 	vstr	d7, [sp]
 80230d4:	f7dd f8da 	bl	800028c <__adddf3>
 80230d8:	4602      	mov	r2, r0
 80230da:	460b      	mov	r3, r1
 80230dc:	4606      	mov	r6, r0
 80230de:	460f      	mov	r7, r1
 80230e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80230e4:	f7dd f8d0 	bl	8000288 <__aeabi_dsub>
 80230e8:	4652      	mov	r2, sl
 80230ea:	465b      	mov	r3, fp
 80230ec:	f7dd f8ce 	bl	800028c <__adddf3>
 80230f0:	3d01      	subs	r5, #1
 80230f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80230f6:	e9c4 6700 	strd	r6, r7, [r4]
 80230fa:	e755      	b.n	8022fa8 <__kernel_rem_pio2+0x518>
 80230fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023100:	f7dd f8c4 	bl	800028c <__adddf3>
 8023104:	f108 38ff 	add.w	r8, r8, #4294967295
 8023108:	e758      	b.n	8022fbc <__kernel_rem_pio2+0x52c>
 802310a:	bf00      	nop
 802310c:	f3af 8000 	nop.w
	...
 8023118:	41700000 	.word	0x41700000
 802311c:	3e700000 	.word	0x3e700000
 8023120:	9b04      	ldr	r3, [sp, #16]
 8023122:	9a04      	ldr	r2, [sp, #16]
 8023124:	601f      	str	r7, [r3, #0]
 8023126:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 802312a:	605c      	str	r4, [r3, #4]
 802312c:	609d      	str	r5, [r3, #8]
 802312e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8023132:	60d3      	str	r3, [r2, #12]
 8023134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023138:	6110      	str	r0, [r2, #16]
 802313a:	6153      	str	r3, [r2, #20]
 802313c:	e719      	b.n	8022f72 <__kernel_rem_pio2+0x4e2>
 802313e:	bf00      	nop

08023140 <_init>:
 8023140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023142:	bf00      	nop
 8023144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023146:	bc08      	pop	{r3}
 8023148:	469e      	mov	lr, r3
 802314a:	4770      	bx	lr

0802314c <_fini>:
 802314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802314e:	bf00      	nop
 8023150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023152:	bc08      	pop	{r3}
 8023154:	469e      	mov	lr, r3
 8023156:	4770      	bx	lr
