
standard_bot_v5C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ff78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08020108  08020108  00021108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020d48  08020d48  000227c8  2**0
                  CONTENTS
  4 .ARM          00000008  08020d48  08020d48  00021d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020d50  08020d50  000227c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020d50  08020d50  00021d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020d58  08020d58  00021d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c8  20000000  08020d5c  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c638  200007c8  08021524  000227c8  2**3
                  ALLOC
 10 ._user_heap_stack 0000d000  2000ce00  08021524  00022e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000227c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f8fa  00000000  00000000  000227f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b05a  00000000  00000000  000620f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f10  00000000  00000000  0006d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023c4  00000000  00000000  00070060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a857  00000000  00000000  00072424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00050f52  00000000  00000000  000acc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102adb  00000000  00000000  000fdbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002006a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d16c  00000000  00000000  002006ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0020d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007c8 	.word	0x200007c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080200f0 	.word	0x080200f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007cc 	.word	0x200007cc
 80001cc:	080200f0 	.word	0x080200f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8000f86:	e00a      	b.n	8000f9e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60fa      	str	r2, [r7, #12]
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4053      	eors	r3, r2
 8000f94:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <get_CRC8_check_sum+0x40>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60ba      	str	r2, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ef      	bne.n	8000f88 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	08020318 	.word	0x08020318

08000fbc <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <verify_CRC8_check_sum+0x1a>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d801      	bhi.n	8000fda <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e013      	b.n	8001002 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	22ff      	movs	r2, #255	@ 0xff
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffc8 	bl	8000f78 <get_CRC8_check_sum>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <append_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
    unsigned char ucCRC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d012      	beq.n	8001044 <append_CRC8_check_sum+0x3a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d90f      	bls.n	8001044 <append_CRC8_check_sum+0x3a>
    {
        return;
    }
    ucCRC = get_CRC8_check_sum((unsigned char *)pch_message, dw_length - 1, CRC8_INIT);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	22ff      	movs	r2, #255	@ 0xff
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffa3 	bl	8000f78 <get_CRC8_check_sum>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e000      	b.n	8001046 <append_CRC8_check_sum+0x3c>
        return;
 8001044:	bf00      	nop
}
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d113      	bne.n	8001088 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 8001060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001064:	e016      	b.n	8001094 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60fa      	str	r2, [r7, #12]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29a      	uxth	r2, r3
 8001076:	88f9      	ldrh	r1, [r7, #6]
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	404b      	eors	r3, r1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <get_CRC16_check_sum+0x54>)
 8001080:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001084:	4053      	eors	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e9      	bne.n	8001066 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8001092:	88fb      	ldrh	r3, [r7, #6]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	08020418 	.word	0x08020418

080010a4 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <verify_CRC16_check_sum+0x1a>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d801      	bhi.n	80010c2 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e020      	b.n	8001104 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <verify_CRC16_check_sum+0x68>)
 80010c8:	8812      	ldrh	r2, [r2, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffbd 	bl	800104c <get_CRC16_check_sum>
 80010d2:	4603      	mov	r3, r0
 80010d4:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	3a02      	subs	r2, #2
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	440a      	add	r2, r1
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d10c      	bne.n	8001102 <verify_CRC16_check_sum+0x5e>
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	3a01      	subs	r2, #1
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	440a      	add	r2, r1
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <verify_CRC16_check_sum+0x5e>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <verify_CRC16_check_sum+0x60>
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000

08001110 <append_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC16_check_sum(uint8_t * pchMessage,uint32_t dwLength)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01d      	beq.n	8001160 <append_CRC16_check_sum+0x50>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d91a      	bls.n	8001160 <append_CRC16_check_sum+0x50>
    {
        return;
    }
    wCRC = get_CRC16_check_sum ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3b02      	subs	r3, #2
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <append_CRC16_check_sum+0x58>)
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff89 	bl	800104c <get_CRC16_check_sum>
 800113a:	4603      	mov	r3, r0
 800113c:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3b02      	subs	r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	89fa      	ldrh	r2, [r7, #14]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b299      	uxth	r1, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e000      	b.n	8001162 <append_CRC16_check_sum+0x52>
        return;
 8001160:	bf00      	nop
}
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000

0800116c <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <buzzer+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001184:	e00c      	b.n	80011a0 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	f24a 4210 	movw	r2, #42000	@ 0xa410
 800118c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <buzzer+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
		htim4.Instance->CCR3 = 500;
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <buzzer+0x40>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20001b00 	.word	0x20001b00

080011b0 <buzzer_init>:


void buzzer_init()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80011b4:	2108      	movs	r1, #8
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <buzzer_init+0x18>)
 80011b8:	f00e ff7e 	bl	80100b8 <HAL_TIM_PWM_Start>
	  htim4.Instance->CCR3 = 0;
 80011bc:	4b02      	ldr	r3, [pc, #8]	@ (80011c8 <buzzer_init+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20001b00 	.word	0x20001b00

080011cc <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f003 fdc7 	bl	8004d68 <can_ISR>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f003 fdbc 	bl	8004d68 <can_ISR>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	2100      	movs	r1, #0
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f009 fa4f 	bl	800a6ae <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2101      	movs	r1, #1
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f009 fa3e 	bl	800a6ae <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2228      	movs	r2, #40	@ 0x28
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f018 fd40 	bl	8019cd6 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	@ 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800125e:	2301      	movs	r3, #1
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	b29b      	uxth	r3, r3
 800126c:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b29b      	uxth	r3, r3
 8001278:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <can_start+0xa4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d111      	bne.n	80012a8 <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f009 f80c 	bl	800a2b0 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f009 f8e9 	bl	800a470 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800129e:	2102      	movs	r1, #2
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f009 fb16 	bl	800a8d2 <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 80012a6:	e017      	b.n	80012d8 <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <can_start+0xa8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d112      	bne.n	80012d8 <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 80012b6:	230e      	movs	r3, #14
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
		can_filter_st.FilterBank = 14;
 80012ba:	230e      	movs	r3, #14
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f008 fff3 	bl	800a2b0 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f009 f8d0 	bl	800a470 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80012d0:	2110      	movs	r1, #16
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f009 fafd 	bl	800a8d2 <HAL_CAN_ActivateNotification>
}
 80012d8:	bf00      	nop
 80012da:	3738      	adds	r7, #56	@ 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40006400 	.word	0x40006400
 80012e4:	40006800 	.word	0x40006800

080012e8 <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t g_remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	g_remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80012f0:	4b79      	ldr	r3, [pc, #484]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800130a:	801a      	strh	r2, [r3, #0]
	g_remote_cmd.right_x -= JOYSTICK_OFFSET;
 800130c:	4b73      	ldr	r3, [pc, #460]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800131e:	801a      	strh	r2, [r3, #0]
	g_remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8001320:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b6b      	ldr	r3, [pc, #428]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800133e:	805a      	strh	r2, [r3, #2]
	g_remote_cmd.right_y -= JOYSTICK_OFFSET;
 8001340:	4b66      	ldr	r3, [pc, #408]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b62      	ldr	r3, [pc, #392]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001352:	805a      	strh	r2, [r3, #2]
	g_remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	b2db      	uxtb	r3, r3
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	b21a      	sxth	r2, r3
	g_remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 800137c:	4b57      	ldr	r3, [pc, #348]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800137e:	809a      	strh	r2, [r3, #4]
	g_remote_cmd.left_x -= JOYSTICK_OFFSET;
 8001380:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b52      	ldr	r3, [pc, #328]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001392:	809a      	strh	r2, [r3, #4]
	g_remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013b2:	80da      	strh	r2, [r3, #6]
	g_remote_cmd.left_y -= JOYSTICK_OFFSET;
 80013b4:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013c6:	80da      	strh	r2, [r3, #6]
	//Left switch position
	g_remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80013c8:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	109b      	asrs	r3, r3, #2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013dc:	721a      	strb	r2, [r3, #8]
	g_remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013f0:	725a      	strb	r2, [r3, #9]
	g_remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001406:	815a      	strh	r2, [r3, #10]
	g_remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 8001408:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001410:	7a5b      	ldrb	r3, [r3, #9]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800141c:	819a      	strh	r2, [r3, #12]
	g_remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001420:	7a9b      	ldrb	r3, [r3, #10]
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001426:	7adb      	ldrb	r3, [r3, #11]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001432:	81da      	strh	r2, [r3, #14]
	g_remote_cmd.mouse_hori += g_remote_cmd.mouse_x;
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800143a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800143e:	4413      	add	r3, r2
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001442:	6113      	str	r3, [r2, #16]
	g_remote_cmd.mouse_vert += g_remote_cmd.mouse_y;
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800144a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800144e:	4413      	add	r3, r2
 8001450:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001452:	6153      	str	r3, [r2, #20]
	g_remote_cmd.mouse_left = (remote_raw_data[12]);
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001456:	7b1b      	ldrb	r3, [r3, #12]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800145c:	761a      	strb	r2, [r3, #24]
	g_remote_cmd.mouse_right = (remote_raw_data[13]);
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001460:	7b5b      	ldrb	r3, [r3, #13]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001466:	765a      	strb	r2, [r3, #25]
	g_remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800146a:	7b9b      	ldrb	r3, [r3, #14]
 800146c:	461a      	mov	r2, r3
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001470:	835a      	strh	r2, [r3, #26]
	g_remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001474:	7c1b      	ldrb	r3, [r3, #16]
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800147a:	7c5b      	ldrb	r3, [r3, #17]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001486:	839a      	strh	r2, [r3, #28]
	g_remote_cmd.side_dial -= JOYSTICK_OFFSET;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800148a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800148e:	b29b      	uxth	r3, r3
 8001490:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001494:	b29b      	uxth	r3, r3
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800149a:	839a      	strh	r2, [r3, #28]
	g_remote_cmd.last_time = HAL_GetTick();
 800149c:	f008 fb7a 	bl	8009b94 <HAL_GetTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80014a4:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <dbus_remote_ISR+0x1f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f016 fcd3 	bl	8017e60 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <dbus_remote_ISR+0x1e8>
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <dbus_remote_ISR+0x1fc>)
 80014c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	f3bf 8f6f 	isb	sy
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200007e4 	.word	0x200007e4
 80014dc:	200007f8 	.word	0x200007f8
 80014e0:	20003294 	.word	0x20003294
 80014e4:	e000ed04 	.word	0xe000ed04

080014e8 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <dbus_remote_start+0x13c>)
 80014f0:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 80014f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001628 <dbus_remote_start+0x140>)
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	f040 808b 	bne.w	800161a <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <dbus_remote_start+0x26>
			return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e086      	b.n	800161c <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <dbus_remote_start+0x34>
 8001518:	2302      	movs	r3, #2
 800151a:	e07f      	b.n	800161c <dbus_remote_start+0x134>
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	2201      	movs	r2, #1
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
		huart->pRxBuffPtr = pData;
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8001530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001532:	2212      	movs	r2, #18
 8001534:	859a      	strh	r2, [r3, #44]	@ 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001538:	2200      	movs	r2, #0
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800153c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153e:	2222      	movs	r2, #34	@ 0x22
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001548:	4a38      	ldr	r2, [pc, #224]	@ (800162c <dbus_remote_start+0x144>)
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 800154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001550:	2200      	movs	r2, #0
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 800155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3304      	adds	r3, #4
 8001564:	4619      	mov	r1, r3
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2312      	movs	r3, #18
 800156c:	f009 fde6 	bl	800b13c <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800159c:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015bc:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d125      	bne.n	8001612 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	330c      	adds	r3, #12
 80015e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	e853 3f00 	ldrex	r3, [r3]
 80015ea:	613b      	str	r3, [r7, #16]
   return(result);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	330c      	adds	r3, #12
 80015fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fc:	623a      	str	r2, [r7, #32]
 80015fe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001600:	69f9      	ldr	r1, [r7, #28]
 8001602:	6a3a      	ldr	r2, [r7, #32]
 8001604:	e841 2300 	strex	r3, r2, [r1]
 8001608:	61bb      	str	r3, [r7, #24]
   return(result);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <dbus_remote_start+0xf4>
 8001610:	e001      	b.n	8001616 <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <dbus_remote_start+0x134>
		}
		return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 800161a:	2302      	movs	r3, #2
	}
}
 800161c:	4618      	mov	r0, r3
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200007e4 	.word	0x200007e4
 8001628:	20001c1c 	.word	0x20001c1c
 800162c:	080012e9 	.word	0x080012e9

08001630 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	4802      	ldr	r0, [pc, #8]	@ (8001644 <laser_on+0x14>)
 800163c:	f00a fa7a 	bl	800bb34 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020800 	.word	0x40020800

08001648 <laser_off>:

void laser_off()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001652:	4802      	ldr	r0, [pc, #8]	@ (800165c <laser_off+0x14>)
 8001654:	f00a fa6e 	bl	800bb34 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020800 	.word	0x40020800

08001660 <hall_disable>:
void hall_enable(){
	hall_state = HALL_ON;
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void hall_disable(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	hall_state = HALL_OFF;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <hall_disable+0x14>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800166a:	2028      	movs	r0, #40	@ 0x28
 800166c:	f009 fcaa 	bl	800afc4 <HAL_NVIC_DisableIRQ>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000003 	.word	0x20000003

08001678 <hall_int>:


void hall_int(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	static int32_t prev_tick;
	uint8_t curr_state = (GPIOE->IDR & GPIO_PIN_11) ? 1 : 0;
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <hall_int+0x80>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	71fb      	strb	r3, [r7, #7]
	if (curr_state & GPIO_PIN_11){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001698:	2b00      	cmp	r3, #0
 800169a:	d128      	bne.n	80016ee <hall_int+0x76>
		//current state and previous state are the same, do nothing
		return;
	}
	if (hall_state == HALL_ON){
 800169c:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <hall_int+0x84>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d121      	bne.n	80016e8 <hall_int+0x70>
	//assume hall sensor has changed state
		switch (curr_state){
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <hall_int+0x42>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d115      	bne.n	80016da <hall_int+0x62>
		case HALL_OFF:
			//hall went from on to off
			//motor just brushed past
			prev_tick = g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <hall_int+0x88>)
 80016b0:	f8d3 3e64 	ldr.w	r3, [r3, #3684]	@ 0xe64
 80016b4:	4a13      	ldr	r2, [pc, #76]	@ (8001704 <hall_int+0x8c>)
 80016b6:	6013      	str	r3, [r2, #0]

			break;
 80016b8:	e012      	b.n	80016e0 <hall_int+0x68>
		case HALL_ON:
			//hall went from off to on
			//yaw motor just let goo
			g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks = (g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks-prev_tick)/2 ;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <hall_int+0x88>)
 80016bc:	f8d3 2e64 	ldr.w	r2, [r3, #3684]	@ 0xe64
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <hall_int+0x8c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	0fda      	lsrs	r2, r3, #31
 80016c8:	4413      	add	r3, r2
 80016ca:	105b      	asrs	r3, r3, #1
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <hall_int+0x88>)
 80016d0:	f8c3 2e64 	str.w	r2, [r3, #3684]	@ 0xe64
			//sensor is done, turn it off
			hall_disable();
 80016d4:	f7ff ffc4 	bl	8001660 <hall_disable>
			break;
 80016d8:	e002      	b.n	80016e0 <hall_int+0x68>

		default:
			prev_state = 1;
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <hall_int+0x90>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
		}
		prev_state = curr_state;
 80016e0:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <hall_int+0x90>)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	7013      	strb	r3, [r2, #0]
		return;
 80016e6:	e003      	b.n	80016f0 <hall_int+0x78>
	} else{
		hall_disable();
 80016e8:	f7ff ffba 	bl	8001660 <hall_disable>
		return;
 80016ec:	e000      	b.n	80016f0 <hall_int+0x78>
		return;
 80016ee:	bf00      	nop
	}
}
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	20000003 	.word	0x20000003
 8001700:	20001e24 	.word	0x20001e24
 8001704:	2000081c 	.word	0x2000081c
 8001708:	20000002 	.word	0x20000002

0800170c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001710:	f3bf 8f4f 	dsb	sy
}
 8001714:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <__NVIC_SystemReset+0x24>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800171e:	4904      	ldr	r1, [pc, #16]	@ (8001730 <__NVIC_SystemReset+0x24>)
 8001720:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <__NVIC_SystemReset+0x28>)
 8001722:	4313      	orrs	r3, r2
 8001724:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001726:	f3bf 8f4f 	dsb	sy
}
 800172a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <__NVIC_SystemReset+0x20>
 8001730:	e000ed00 	.word	0xe000ed00
 8001734:	05fa0004 	.word	0x05fa0004

08001738 <gyro_write_byte>:
	y = y * (1.5f - (halfx * y * y));

	return y;
}

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 8001748:	2200      	movs	r2, #0
 800174a:	2101      	movs	r1, #1
 800174c:	4811      	ldr	r0, [pc, #68]	@ (8001794 <gyro_write_byte+0x5c>)
 800174e:	f00a f9f1 	bl	800bb34 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001756:	f107 020e 	add.w	r2, r7, #14
 800175a:	f107 010f 	add.w	r1, r7, #15
 800175e:	2364      	movs	r3, #100	@ 0x64
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <gyro_write_byte+0x60>)
 8001766:	f00e f86d 	bl	800f844 <HAL_SPI_TransmitReceive>
	tx = data;
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800176e:	f107 020e 	add.w	r2, r7, #14
 8001772:	f107 010f 	add.w	r1, r7, #15
 8001776:	2364      	movs	r3, #100	@ 0x64
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	4806      	ldr	r0, [pc, #24]	@ (8001798 <gyro_write_byte+0x60>)
 800177e:	f00e f861 	bl	800f844 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 8001782:	2201      	movs	r2, #1
 8001784:	2101      	movs	r1, #1
 8001786:	4803      	ldr	r0, [pc, #12]	@ (8001794 <gyro_write_byte+0x5c>)
 8001788:	f00a f9d4 	bl	800bb34 <HAL_GPIO_WritePin>
	return;
 800178c:	bf00      	nop
}
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40020400 	.word	0x40020400
 8001798:	20001954 	.word	0x20001954

0800179c <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	4811      	ldr	r0, [pc, #68]	@ (80017f0 <gyro_read_byte+0x54>)
 80017ac:	f00a f9c2 	bl	800bb34 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017ba:	f107 020f 	add.w	r2, r7, #15
 80017be:	f107 010e 	add.w	r1, r7, #14
 80017c2:	2364      	movs	r3, #100	@ 0x64
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2301      	movs	r3, #1
 80017c8:	480a      	ldr	r0, [pc, #40]	@ (80017f4 <gyro_read_byte+0x58>)
 80017ca:	f00e f83b 	bl	800f844 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80017ce:	f107 010f 	add.w	r1, r7, #15
 80017d2:	2364      	movs	r3, #100	@ 0x64
 80017d4:	2201      	movs	r2, #1
 80017d6:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <gyro_read_byte+0x58>)
 80017d8:	f00d ff23 	bl	800f622 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017dc:	2201      	movs	r2, #1
 80017de:	2101      	movs	r1, #1
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <gyro_read_byte+0x54>)
 80017e2:	f00a f9a7 	bl	800bb34 <HAL_GPIO_WritePin>
	return rx;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020400 	.word	0x40020400
 80017f4:	20001954 	.word	0x20001954

080017f8 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001808:	2200      	movs	r2, #0
 800180a:	2101      	movs	r1, #1
 800180c:	4811      	ldr	r0, [pc, #68]	@ (8001854 <gyro_read_bytes+0x5c>)
 800180e:	f00a f991 	bl	800bb34 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001818:	b2db      	uxtb	r3, r3
 800181a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800181c:	f107 020e 	add.w	r2, r7, #14
 8001820:	f107 010f 	add.w	r1, r7, #15
 8001824:	2364      	movs	r3, #100	@ 0x64
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <gyro_read_bytes+0x60>)
 800182c:	f00e f80a 	bl	800f844 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	b29a      	uxth	r2, r3
 8001834:	2364      	movs	r3, #100	@ 0x64
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <gyro_read_bytes+0x60>)
 800183a:	f00d fef2 	bl	800f622 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800183e:	2201      	movs	r2, #1
 8001840:	2101      	movs	r1, #1
 8001842:	4804      	ldr	r0, [pc, #16]	@ (8001854 <gyro_read_bytes+0x5c>)
 8001844:	f00a f976 	bl	800bb34 <HAL_GPIO_WritePin>
	return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020400 	.word	0x40020400
 8001858:	20001954 	.word	0x20001954

0800185c <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af02      	add	r7, sp, #8
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	4613      	mov	r3, r2
 800186a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 800186c:	2200      	movs	r2, #0
 800186e:	2110      	movs	r1, #16
 8001870:	4811      	ldr	r0, [pc, #68]	@ (80018b8 <accel_write_byte+0x5c>)
 8001872:	f00a f95f 	bl	800bb34 <HAL_GPIO_WritePin>
	tx = reg;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800187a:	f107 020e 	add.w	r2, r7, #14
 800187e:	f107 010f 	add.w	r1, r7, #15
 8001882:	2364      	movs	r3, #100	@ 0x64
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <accel_write_byte+0x60>)
 800188a:	f00d ffdb 	bl	800f844 <HAL_SPI_TransmitReceive>
	tx = data;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001892:	f107 020e 	add.w	r2, r7, #14
 8001896:	f107 010f 	add.w	r1, r7, #15
 800189a:	2364      	movs	r3, #100	@ 0x64
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	4806      	ldr	r0, [pc, #24]	@ (80018bc <accel_write_byte+0x60>)
 80018a2:	f00d ffcf 	bl	800f844 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 80018a6:	2201      	movs	r2, #1
 80018a8:	2110      	movs	r1, #16
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <accel_write_byte+0x5c>)
 80018ac:	f00a f942 	bl	800bb34 <HAL_GPIO_WritePin>
	return;
 80018b0:	bf00      	nop
}
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020000 	.word	0x40020000
 80018bc:	20001954 	.word	0x20001954

080018c0 <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80018ca:	2200      	movs	r2, #0
 80018cc:	2110      	movs	r1, #16
 80018ce:	4816      	ldr	r0, [pc, #88]	@ (8001928 <accel_read_byte+0x68>)
 80018d0:	f00a f930 	bl	800bb34 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018de:	f107 020e 	add.w	r2, r7, #14
 80018e2:	f107 010f 	add.w	r1, r7, #15
 80018e6:	2364      	movs	r3, #100	@ 0x64
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	480f      	ldr	r0, [pc, #60]	@ (800192c <accel_read_byte+0x6c>)
 80018ee:	f00d ffa9 	bl	800f844 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 80018f2:	2355      	movs	r3, #85	@ 0x55
 80018f4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80018f6:	f107 010e 	add.w	r1, r7, #14
 80018fa:	2364      	movs	r3, #100	@ 0x64
 80018fc:	2201      	movs	r2, #1
 80018fe:	480b      	ldr	r0, [pc, #44]	@ (800192c <accel_read_byte+0x6c>)
 8001900:	f00d fe8f 	bl	800f622 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001904:	f107 010e 	add.w	r1, r7, #14
 8001908:	2364      	movs	r3, #100	@ 0x64
 800190a:	2201      	movs	r2, #1
 800190c:	4807      	ldr	r0, [pc, #28]	@ (800192c <accel_read_byte+0x6c>)
 800190e:	f00d fe88 	bl	800f622 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001912:	2201      	movs	r2, #1
 8001914:	2110      	movs	r1, #16
 8001916:	4804      	ldr	r0, [pc, #16]	@ (8001928 <accel_read_byte+0x68>)
 8001918:	f00a f90c 	bl	800bb34 <HAL_GPIO_WritePin>
	return rx;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020000 	.word	0x40020000
 800192c:	20001954 	.word	0x20001954

08001930 <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af02      	add	r7, sp, #8
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 8001940:	2200      	movs	r2, #0
 8001942:	2110      	movs	r1, #16
 8001944:	4814      	ldr	r0, [pc, #80]	@ (8001998 <accel_read_bytes+0x68>)
 8001946:	f00a f8f5 	bl	800bb34 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001950:	b2db      	uxtb	r3, r3
 8001952:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001954:	f107 020e 	add.w	r2, r7, #14
 8001958:	f107 010f 	add.w	r1, r7, #15
 800195c:	2364      	movs	r3, #100	@ 0x64
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	480e      	ldr	r0, [pc, #56]	@ (800199c <accel_read_bytes+0x6c>)
 8001964:	f00d ff6e 	bl	800f844 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001968:	f107 010e 	add.w	r1, r7, #14
 800196c:	2364      	movs	r3, #100	@ 0x64
 800196e:	2201      	movs	r2, #1
 8001970:	480a      	ldr	r0, [pc, #40]	@ (800199c <accel_read_bytes+0x6c>)
 8001972:	f00d fe56 	bl	800f622 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	b29a      	uxth	r2, r3
 800197a:	2364      	movs	r3, #100	@ 0x64
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	4807      	ldr	r0, [pc, #28]	@ (800199c <accel_read_bytes+0x6c>)
 8001980:	f00d fe4f 	bl	800f622 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001984:	2201      	movs	r2, #1
 8001986:	2110      	movs	r1, #16
 8001988:	4803      	ldr	r0, [pc, #12]	@ (8001998 <accel_read_bytes+0x68>)
 800198a:	f00a f8d3 	bl	800bb34 <HAL_GPIO_WritePin>
	return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40020000 	.word	0x40020000
 800199c:	20001954 	.word	0x20001954

080019a0 <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80019a6:	21b6      	movs	r1, #182	@ 0xb6
 80019a8:	2014      	movs	r0, #20
 80019aa:	f7ff fec5 	bl	8001738 <gyro_write_byte>
	HAL_Delay(10);
 80019ae:	200a      	movs	r0, #10
 80019b0:	f008 f8fc 	bl	8009bac <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2011      	movs	r0, #17
 80019b8:	f7ff febe 	bl	8001738 <gyro_write_byte>
	HAL_Delay(2);
 80019bc:	2002      	movs	r0, #2
 80019be:	f008 f8f5 	bl	8009bac <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff feea 	bl	800179c <gyro_read_byte>
 80019c8:	4603      	mov	r3, r0
 80019ca:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 80019cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d001      	beq.n	80019d8 <gyro_init+0x38>
		NVIC_SystemReset();
 80019d4:	f7ff fe9a 	bl	800170c <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 80019d8:	2002      	movs	r0, #2
 80019da:	f008 f8e7 	bl	8009bac <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 80019de:	2102      	movs	r1, #2
 80019e0:	200f      	movs	r0, #15
 80019e2:	f7ff fea9 	bl	8001738 <gyro_write_byte>
	HAL_Delay(2);
 80019e6:	2002      	movs	r0, #2
 80019e8:	f008 f8e0 	bl	8009bac <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 80019ec:	2182      	movs	r1, #130	@ 0x82
 80019ee:	2010      	movs	r0, #16
 80019f0:	f7ff fea2 	bl	8001738 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_1000_116_HZ));
	HAL_Delay(2);
 80019f4:	2002      	movs	r0, #2
 80019f6:	f008 f8d9 	bl	8009bac <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 80019fa:	2101      	movs	r1, #1
 80019fc:	2016      	movs	r0, #22
 80019fe:	f7ff fe9b 	bl	8001738 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001a02:	2002      	movs	r0, #2
 8001a04:	f008 f8d2 	bl	8009bac <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	2018      	movs	r0, #24
 8001a0c:	f7ff fe94 	bl	8001738 <gyro_write_byte>
	HAL_Delay(2);
 8001a10:	2002      	movs	r0, #2
 8001a12:	f008 f8cb 	bl	8009bac <HAL_Delay>

	return 0;
 8001a16:	2300      	movs	r3, #0
	//blah
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <accel_init>:

uint8_t accel_init() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff ff4a 	bl	80018c0 <accel_read_byte>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a30:	2002      	movs	r0, #2
 8001a32:	f008 f8bb 	bl	8009bac <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff ff42 	bl	80018c0 <accel_read_byte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f008 f8b3 	bl	8009bac <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001a46:	21b6      	movs	r1, #182	@ 0xb6
 8001a48:	207e      	movs	r0, #126	@ 0x7e
 8001a4a:	f7ff ff07 	bl	800185c <accel_write_byte>
	HAL_Delay(10);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f008 f8ac 	bl	8009bac <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff ff33 	bl	80018c0 <accel_read_byte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f008 f8a4 	bl	8009bac <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff ff2b 	bl	80018c0 <accel_read_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f008 f89c 	bl	8009bac <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b1e      	cmp	r3, #30
 8001a78:	d001      	beq.n	8001a7e <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e023      	b.n	8001ac6 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a7e:	2104      	movs	r1, #4
 8001a80:	207d      	movs	r0, #125	@ 0x7d
 8001a82:	f7ff feeb 	bl	800185c <accel_write_byte>
	HAL_Delay(2);
 8001a86:	2002      	movs	r0, #2
 8001a88:	f008 f890 	bl	8009bac <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	207c      	movs	r0, #124	@ 0x7c
 8001a90:	f7ff fee4 	bl	800185c <accel_write_byte>
	HAL_Delay(2);
 8001a94:	2002      	movs	r0, #2
 8001a96:	f008 f889 	bl	8009bac <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001a9a:	21a8      	movs	r1, #168	@ 0xa8
 8001a9c:	2040      	movs	r0, #64	@ 0x40
 8001a9e:	f7ff fedd 	bl	800185c <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_100_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f008 f882 	bl	8009bac <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	2041      	movs	r0, #65	@ 0x41
 8001aac:	f7ff fed6 	bl	800185c <accel_write_byte>
	HAL_Delay(2);
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f008 f87b 	bl	8009bac <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	2053      	movs	r0, #83	@ 0x53
 8001aba:	f7ff fecf 	bl	800185c <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f008 f874 	bl	8009bac <HAL_Delay>
	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	f107 030f 	add.w	r3, r7, #15
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	211c      	movs	r1, #28
 8001af4:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <mag_read_single_reg+0x34>)
 8001af6:	f00a fa8d 	bl	800c014 <HAL_I2C_Mem_Read>
	return data;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20001830 	.word	0x20001830

08001b08 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	1dbb      	adds	r3, r7, #6
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	211c      	movs	r1, #28
 8001b2c:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <mag_write_single_reg+0x34>)
 8001b2e:	f00a f977 	bl	800be20 <HAL_I2C_Mem_Write>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20001830 	.word	0x20001830

08001b40 <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	4603      	mov	r3, r0
 8001b48:	603a      	str	r2, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	211c      	movs	r1, #28
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <mag_read_multi_reg_dma+0x30>)
 8001b62:	f00a fc7d 	bl	800c460 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20001830 	.word	0x20001830

08001b74 <imu_init>:
	imu_data.gy_offset = gyro_y_total / 50;
	imu_data.gz_offset = gyro_z_total / 50;

}

void imu_init() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <imu_init+0x44>)
 8001b7e:	f009 ffd9 	bl	800bb34 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001b82:	2200      	movs	r2, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <imu_init+0x48>)
 8001b88:	f009 ffd4 	bl	800bb34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b8c:	2064      	movs	r0, #100	@ 0x64
 8001b8e:	f008 f80d 	bl	8009bac <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001b92:	2201      	movs	r2, #1
 8001b94:	2110      	movs	r1, #16
 8001b96:	4808      	ldr	r0, [pc, #32]	@ (8001bb8 <imu_init+0x44>)
 8001b98:	f009 ffcc 	bl	800bb34 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <imu_init+0x48>)
 8001ba2:	f009 ffc7 	bl	800bb34 <HAL_GPIO_WritePin>
	gyro_init();
 8001ba6:	f7ff fefb 	bl	80019a0 <gyro_init>
	accel_init();
 8001baa:	f7ff ff39 	bl	8001a20 <accel_init>
	ist8310_init();
 8001bae:	f000 f905 	bl	8001dbc <ist8310_init>
//	gyro_offset_cali();

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <imu_start_ints>:

void imu_start_ints() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001bc4:	2180      	movs	r1, #128	@ 0x80
 8001bc6:	2015      	movs	r0, #21
 8001bc8:	f7ff fdb6 	bl	8001738 <gyro_write_byte>
	vTaskDelay(10);
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f015 fad5 	bl	801717c <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	2058      	movs	r0, #88	@ 0x58
 8001bd6:	f7ff fe41 	bl	800185c <accel_write_byte>
	vTaskDelay(10);
 8001bda:	200a      	movs	r0, #10
 8001bdc:	f015 face 	bl	801717c <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001be0:	2108      	movs	r1, #8
 8001be2:	200b      	movs	r0, #11
 8001be4:	f7ff ff90 	bl	8001b08 <mag_write_single_reg>
	imu_init_status = 1;
 8001be8:	4b02      	ldr	r3, [pc, #8]	@ (8001bf4 <imu_start_ints+0x34>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000870 	.word	0x20000870

08001bf8 <accel_get_data>:

void accel_get_data() {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001bfc:	2206      	movs	r2, #6
 8001bfe:	4903      	ldr	r1, [pc, #12]	@ (8001c0c <accel_get_data+0x14>)
 8001c00:	2012      	movs	r0, #18
 8001c02:	f7ff fe95 	bl	8001930 <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000820 	.word	0x20000820

08001c10 <accel_process_data>:

void accel_process_data() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001c16:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <accel_process_data+0xa8>)
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <accel_process_data+0xa8>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001cbc <accel_process_data+0xac>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <accel_process_data+0xb0>)
 8001c3e:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <accel_process_data+0xa8>)
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <accel_process_data+0xa8>)
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c60:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001cbc <accel_process_data+0xac>
 8001c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <accel_process_data+0xb0>)
 8001c6a:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <accel_process_data+0xa8>)
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <accel_process_data+0xa8>)
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001cbc <accel_process_data+0xac>
 8001c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <accel_process_data+0xb0>)
 8001c96:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001c9a:	f007 ff7b 	bl	8009b94 <HAL_GetTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <accel_process_data+0xb0>)
 8001ca2:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <accel_process_data+0xb0>)
 8001ca6:	3310      	adds	r3, #16
 8001ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001caa:	f005 fa2b 	bl	8007104 <accel_data_ready>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000820 	.word	0x20000820
 8001cbc:	3aeb3333 	.word	0x3aeb3333
 8001cc0:	20000838 	.word	0x20000838

08001cc4 <gyro_get_data>:

void gyro_get_data() {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001cc8:	2206      	movs	r2, #6
 8001cca:	4903      	ldr	r1, [pc, #12]	@ (8001cd8 <gyro_get_data+0x14>)
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff fd93 	bl	80017f8 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000828 	.word	0x20000828

08001cdc <gyro_process_data>:

void gyro_process_data() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001ce2:	4b33      	ldr	r3, [pc, #204]	@ (8001db0 <gyro_process_data+0xd4>)
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <gyro_process_data+0xd4>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <gyro_process_data+0xd8>)
 8001cf8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d10:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001db8 <gyro_process_data+0xdc>
 8001d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <gyro_process_data+0xd8>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <gyro_process_data+0xd4>)
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <gyro_process_data+0xd4>)
 8001d28:	789b      	ldrb	r3, [r3, #2]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001d30:	88fa      	ldrh	r2, [r7, #6]
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <gyro_process_data+0xd8>)
 8001d34:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001db8 <gyro_process_data+0xdc>
 8001d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <gyro_process_data+0xd8>)
 8001d56:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <gyro_process_data+0xd4>)
 8001d5c:	795b      	ldrb	r3, [r3, #5]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <gyro_process_data+0xd4>)
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <gyro_process_data+0xd8>)
 8001d70:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001db8 <gyro_process_data+0xdc>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <gyro_process_data+0xd8>)
 8001d92:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001d96:	f007 fefd 	bl	8009b94 <HAL_GetTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <gyro_process_data+0xd8>)
 8001d9e:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <gyro_process_data+0xd8>)
 8001da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da4:	f005 f982 	bl	80070ac <gyro_data_ready>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000828 	.word	0x20000828
 8001db4:	20000838 	.word	0x20000838
 8001db8:	398ba058 	.word	0x398ba058

08001dbc <ist8310_init>:

uint8_t ist8310_init() {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	@ 0x40
 8001dc6:	481d      	ldr	r0, [pc, #116]	@ (8001e3c <ist8310_init+0x80>)
 8001dc8:	f009 feb4 	bl	800bb34 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f007 feed 	bl	8009bac <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2140      	movs	r1, #64	@ 0x40
 8001dd6:	4819      	ldr	r0, [pc, #100]	@ (8001e3c <ist8310_init+0x80>)
 8001dd8:	f009 feac 	bl	800bb34 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f007 fee5 	bl	8009bac <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fe74 	bl	8001ad0 <mag_read_single_reg>
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d00a      	beq.n	8001e08 <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <ist8310_init+0x84>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <ist8310_init+0x84>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	845a      	strh	r2, [r3, #34]	@ 0x22
		imu_data.mag_data.mz = 0;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <ist8310_init+0x84>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	849a      	strh	r2, [r3, #36]	@ 0x24
		return 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e015      	b.n	8001e34 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f007 fecf 	bl	8009bac <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001e0e:	2109      	movs	r1, #9
 8001e10:	2041      	movs	r0, #65	@ 0x41
 8001e12:	f7ff fe79 	bl	8001b08 <mag_write_single_reg>
	HAL_Delay(2);
 8001e16:	2002      	movs	r0, #2
 8001e18:	f007 fec8 	bl	8009bac <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001e1c:	21c0      	movs	r1, #192	@ 0xc0
 8001e1e:	2042      	movs	r0, #66	@ 0x42
 8001e20:	f7ff fe72 	bl	8001b08 <mag_write_single_reg>
	HAL_Delay(2);
 8001e24:	2002      	movs	r0, #2
 8001e26:	f007 fec1 	bl	8009bac <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001e2a:	210b      	movs	r1, #11
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	f7ff fe6b 	bl	8001b08 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021800 	.word	0x40021800
 8001e40:	20000838 	.word	0x20000838

08001e44 <ist8310_get_data>:

void ist8310_get_data() {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001e48:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <ist8310_get_data+0x1c>)
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f7ff fe77 	bl	8001b40 <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001e52:	f007 fe9f 	bl	8009b94 <HAL_GetTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a02      	ldr	r2, [pc, #8]	@ (8001e64 <ist8310_get_data+0x20>)
 8001e5a:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000830 	.word	0x20000830
 8001e64:	20000838 	.word	0x20000838

08001e68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d11e      	bne.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10d      	bne.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d103      	bne.n	8001e94 <HAL_GPIO_EXTI_Callback+0x2c>
				gyro_get_data();
 8001e8c:	f7ff ff1a 	bl	8001cc4 <gyro_get_data>
				gyro_process_data();
 8001e90:	f7ff ff24 	bl	8001cdc <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d103      	bne.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x3a>
				accel_get_data();
 8001e9a:	f7ff fead 	bl	8001bf8 <accel_get_data>
				accel_process_data();
 8001e9e:	f7ff feb7 	bl	8001c10 <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d107      	bne.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001eb4:	f7ff ffc6 	bl	8001e44 <ist8310_get_data>
			}
		}
	}
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000870 	.word	0x20000870
 8001ec4:	20001954 	.word	0x20001954
 8001ec8:	20001830 	.word	0x20001830

08001ecc <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001eea:	78db      	ldrb	r3, [r3, #3]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ef2:	789b      	ldrb	r3, [r3, #2]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001efe:	795b      	ldrb	r3, [r3, #5]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f06:	791b      	ldrb	r3, [r3, #4]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8001f10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f16:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 8001f18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f1e:	845a      	strh	r2, [r3, #34]	@ 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8001f20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f26:	849a      	strh	r2, [r3, #36]	@ 0x24
	mag_data_ready(imu_data.mag_data);
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f2a:	3320      	adds	r3, #32
 8001f2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f30:	f005 f914 	bl	800715c <mag_data_ready>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000830 	.word	0x20000830
 8001f40:	20000838 	.word	0x20000838

08001f44 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <led_green_off+0x18>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20001b48 	.word	0x20001b48

08001f60 <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001f64:	2100      	movs	r1, #0
 8001f66:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <led_on+0x38>)
 8001f68:	f00e f8a6 	bl	80100b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	480a      	ldr	r0, [pc, #40]	@ (8001f98 <led_on+0x38>)
 8001f70:	f00e f8a2 	bl	80100b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001f74:	2108      	movs	r1, #8
 8001f76:	4808      	ldr	r0, [pc, #32]	@ (8001f98 <led_on+0x38>)
 8001f78:	f00e f89e 	bl	80100b8 <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <led_on+0x38>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	22ff      	movs	r2, #255	@ 0xff
 8001f82:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim5.Instance->CCR2 = 255;
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <led_on+0x38>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	22ff      	movs	r2, #255	@ 0xff
 8001f8a:	639a      	str	r2, [r3, #56]	@ 0x38
	htim5.Instance->CCR1 = 255;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	@ (8001f98 <led_on+0x38>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	22ff      	movs	r2, #255	@ 0xff
 8001f92:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20001b48 	.word	0x20001b48

08001f9c <led_toggle>:
void led_toggle(void){
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	80fb      	strh	r3, [r7, #6]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 8001fbc:	797b      	ldrb	r3, [r7, #5]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8090 	bne.w	80020e4 <status_led+0x138>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	f200 808a 	bhi.w	80020e2 <status_led+0x136>
 8001fce:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <status_led+0x28>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001ff9 	.word	0x08001ff9
 8001fd8:	08002013 	.word	0x08002013
 8001fdc:	0800202d 	.word	0x0800202d
 8001fe0:	08002047 	.word	0x08002047
 8001fe4:	08002061 	.word	0x08002061
 8001fe8:	0800207b 	.word	0x0800207b
 8001fec:	08002095 	.word	0x08002095
 8001ff0:	080020af 	.word	0x080020af
 8001ff4:	080020c9 	.word	0x080020c9
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 8001ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80020f0 <status_led+0x144>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	22ff      	movs	r2, #255	@ 0xff
 8001ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 8002000:	4b3b      	ldr	r3, [pc, #236]	@ (80020f0 <status_led+0x144>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 8002008:	4b39      	ldr	r3, [pc, #228]	@ (80020f0 <status_led+0x144>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002010:	e068      	b.n	80020e4 <status_led+0x138>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 8002012:	4b37      	ldr	r3, [pc, #220]	@ (80020f0 <status_led+0x144>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 800201a:	4b35      	ldr	r3, [pc, #212]	@ (80020f0 <status_led+0x144>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	22ff      	movs	r2, #255	@ 0xff
 8002020:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 8002022:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <status_led+0x144>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800202a:	e05b      	b.n	80020e4 <status_led+0x138>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 800202c:	4b30      	ldr	r3, [pc, #192]	@ (80020f0 <status_led+0x144>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8002034:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <status_led+0x144>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 800203c:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <status_led+0x144>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	22ff      	movs	r2, #255	@ 0xff
 8002042:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002044:	e04e      	b.n	80020e4 <status_led+0x138>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 8002046:	4b2a      	ldr	r3, [pc, #168]	@ (80020f0 <status_led+0x144>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	22ff      	movs	r2, #255	@ 0xff
 800204c:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 800204e:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <status_led+0x144>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 8002056:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <status_led+0x144>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	22ff      	movs	r2, #255	@ 0xff
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800205e:	e041      	b.n	80020e4 <status_led+0x138>
		case 5:
			htim5.Instance->CCR3 = 0;
 8002060:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <status_led+0x144>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <status_led+0x144>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <status_led+0x144>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002078:	e034      	b.n	80020e4 <status_led+0x138>
		case 6:
			htim5.Instance->CCR3 = 0;
 800207a:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <status_led+0x144>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <status_led+0x144>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 800208a:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <status_led+0x144>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002092:	e027      	b.n	80020e4 <status_led+0x138>
		case 7:
			htim5.Instance->CCR3 = 0;
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <status_led+0x144>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <status_led+0x144>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <status_led+0x144>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020ac:	e01a      	b.n	80020e4 <status_led+0x138>
		case 8:
			htim5.Instance->CCR3 = 0;
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <status_led+0x144>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <status_led+0x144>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <status_led+0x144>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020c6:	e00d      	b.n	80020e4 <status_led+0x138>
		case 9:
			htim5.Instance->CCR3 = 0;
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <status_led+0x144>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <status_led+0x144>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <status_led+0x144>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020e0:	e000      	b.n	80020e4 <status_led+0x138>

		default:
			break;
 80020e2:	bf00      	nop
		}
	}

}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20001b48 	.word	0x20001b48

080020f4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 0201 	bic.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <micros_tick>:
#include "board_lib.h"
#include "robot_config.h"

static uint32_t gv_overflow_times = 0;

void micros_tick(){
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	gv_overflow_times ++;
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <micros_tick+0x18>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	4a03      	ldr	r2, [pc, #12]	@ (8002168 <micros_tick+0x18>)
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20000874 	.word	0x20000874

0800216c <start_micros_timer>:

void start_micros_timer()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	LL_TIM_SetPrescaler(TIM2, 83999999/TIMER_FREQ);
 8002170:	f240 3147 	movw	r1, #839	@ 0x347
 8002174:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002178:	f7ff ffdc 	bl	8002134 <LL_TIM_SetPrescaler>
	LL_TIM_DisableCounter(TIM2);
 800217c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002180:	f7ff ffc8 	bl	8002114 <LL_TIM_DisableCounter>
	TIM2->CNT =0;
 8002184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002188:	2200      	movs	r2, #0
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24
//	LL_TIM_DisableExternalClock(TIM2);
	LL_TIM_SetPrescaler(TIM2, 83999999/TIMER_FREQ);
 800218c:	f240 3147 	movw	r1, #839	@ 0x347
 8002190:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002194:	f7ff ffce 	bl	8002134 <LL_TIM_SetPrescaler>
//	LL_TIM_EnableUpdateEvent(TIM2);
//	LL_TIM_EnableIT_UPDATE(TIM2);
	TIM2->EGR |= TIM_EGR_UG_Msk;
 8002198:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6153      	str	r3, [r2, #20]
	LL_TIM_EnableCounter(TIM2);
 80021a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021ac:	f7ff ffa2 	bl	80020f4 <LL_TIM_EnableCounter>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <get_microseconds>:

static uint32_t current_cnt;

uint32_t get_microseconds()
{
 80021b4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
	current_cnt = TIM2->CNT;
 80021bc:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80021c0:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80021c2:	4d15      	ldr	r5, [pc, #84]	@ (8002218 <get_microseconds+0x64>)
 80021c4:	602c      	str	r4, [r5, #0]
	uint64_t temp_cnt = TIM2->CNT;
 80021c6:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80021ca:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80021cc:	2500      	movs	r5, #0
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	e9c7 0100 	strd	r0, r1, [r7]
	temp_cnt = temp_cnt * (1000000 / TIMER_FREQ);
 80021d6:	e9d7 8900 	ldrd	r8, r9, [r7]
 80021da:	4640      	mov	r0, r8
 80021dc:	4649      	mov	r1, r9
 80021de:	f04f 0400 	mov.w	r4, #0
 80021e2:	f04f 0500 	mov.w	r5, #0
 80021e6:	008d      	lsls	r5, r1, #2
 80021e8:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 80021ec:	0084      	lsls	r4, r0, #2
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	eb10 0208 	adds.w	r2, r0, r8
 80021f6:	eb41 0309 	adc.w	r3, r1, r9
 80021fa:	eb12 0a02 	adds.w	sl, r2, r2
 80021fe:	eb43 0b03 	adc.w	fp, r3, r3
 8002202:	4652      	mov	r2, sl
 8002204:	465b      	mov	r3, fp
 8002206:	e9c7 2300 	strd	r2, r3, [r7]
	return (uint32_t)temp_cnt;
 800220a:	683b      	ldr	r3, [r7, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002216:	4770      	bx	lr
 8002218:	20000878 	.word	0x20000878

0800221c <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 800222e:	2304      	movs	r3, #4
 8002230:	723b      	strb	r3, [r7, #8]
		return op_stat;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e00d      	b.n	8002254 <queue_init+0x38>
	}
	queue->curr_byte_pos = 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	queue->last_byte_pos=0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	queue->last_time=0;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	return op_stat;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60fb      	str	r3, [r7, #12]
}
 8002254:	2300      	movs	r3, #0
 8002256:	89ba      	ldrh	r2, [r7, #12]
 8002258:	f362 030f 	bfi	r3, r2, #0, #16
 800225c:	89fa      	ldrh	r2, [r7, #14]
 800225e:	f362 431f 	bfi	r3, r2, #16, #16
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	uint16_t size = queue->last_byte_pos - queue->curr_byte_pos;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	81fb      	strh	r3, [r7, #14]
	size = (size > TQUEUE_SIZE) ? size + TQUEUE_SIZE : size;
 8002286:	89fb      	ldrh	r3, [r7, #14]
 8002288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228c:	d904      	bls.n	8002298 <queue_get_size+0x2a>
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002294:	b29b      	uxth	r3, r3
 8002296:	e000      	b.n	800229a <queue_get_size+0x2c>
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	81fb      	strh	r3, [r7, #14]
	return size;
 800229c:	89fb      	ldrh	r3, [r7, #14]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 80022ba:	f007 fc6b 	bl	8009b94 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	queue->queue[queue->last_byte_pos] = data;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022cc:	4619      	mov	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022de:	2bfe      	cmp	r3, #254	@ 0xfe
 80022e0:	d805      	bhi.n	80022ee <queue_append_byte+0x44>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022e8:	3301      	adds	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	e000      	b.n	80022f0 <queue_append_byte+0x46>
 80022ee:	2200      	movs	r2, #0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	if (queue_get_size(queue) > TQUEUE_SIZE) {
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffb9 	bl	800226e <queue_get_size>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002302:	d913      	bls.n	800232c <queue_append_byte+0x82>
		op_stat.op_status = Q_FULL;
 8002304:	2301      	movs	r3, #1
 8002306:	723b      	strb	r3, [r7, #8]
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800230e:	2bff      	cmp	r3, #255	@ 0xff
 8002310:	d005      	beq.n	800231e <queue_append_byte+0x74>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002318:	3301      	adds	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	e000      	b.n	8002320 <queue_append_byte+0x76>
 800231e:	2200      	movs	r2, #0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		return op_stat;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e001      	b.n	8002330 <queue_append_byte+0x86>
	}
	return op_stat;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60fb      	str	r3, [r7, #12]
}
 8002330:	2300      	movs	r3, #0
 8002332:	89ba      	ldrh	r2, [r7, #12]
 8002334:	f362 030f 	bfi	r3, r2, #0, #16
 8002338:	89fa      	ldrh	r2, [r7, #14]
 800233a:	f362 431f 	bfi	r3, r2, #16, #16
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <queue_pop_element>:
		len--;
	}
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	if (queue_get_size(queue) == 0){
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff8d 	bl	800226e <queue_get_size>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <queue_pop_element+0x18>
		return 0;
 800235a:	2300      	movs	r3, #0
 800235c:	e01c      	b.n	8002398 <queue_pop_element+0x52>
	} else {
		queue->curr_byte_pos +=1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002364:	3301      	adds	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002374:	2bff      	cmp	r3, #255	@ 0xff
 8002376:	d803      	bhi.n	8002380 <queue_pop_element+0x3a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 800237e:	e000      	b.n	8002382 <queue_pop_element+0x3c>
 8002380:	2200      	movs	r2, #0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
				0:queue->curr_byte_pos;
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	73fb      	strb	r3, [r7, #15]
		return temp;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;
		uint16_t q_size = queue_get_size(queue);
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff ff5d 	bl	800226e <queue_get_size>
 80023b4:	4603      	mov	r3, r0
 80023b6:	83fb      	strh	r3, [r7, #30]
		if (q_size < len){
 80023b8:	8bfa      	ldrh	r2, [r7, #30]
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d203      	bcs.n	80023c8 <queue_pop_elements+0x28>
			op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80023c0:	2303      	movs	r3, #3
 80023c2:	753b      	strb	r3, [r7, #20]
			len = q_size;
 80023c4:	8bfb      	ldrh	r3, [r7, #30]
 80023c6:	80fb      	strh	r3, [r7, #6]
		}

		uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023ce:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80023d2:	83bb      	strh	r3, [r7, #28]
		if (bytes_to_end >= len){
 80023d4:	8bba      	ldrh	r2, [r7, #28]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d30b      	bcc.n	80023f4 <queue_pop_elements+0x54>
			memcpy(data, &queue->queue[queue->curr_byte_pos], len);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	4619      	mov	r1, r3
 80023ec:	68b8      	ldr	r0, [r7, #8]
 80023ee:	f017 fd1b 	bl	8019e28 <memcpy>
 80023f2:	e014      	b.n	800241e <queue_pop_elements+0x7e>
		} else {
			memcpy(data, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	8bba      	ldrh	r2, [r7, #28]
 8002402:	4619      	mov	r1, r3
 8002404:	68b8      	ldr	r0, [r7, #8]
 8002406:	f017 fd0f 	bl	8019e28 <memcpy>
			memcpy((data+bytes_to_end), &queue->queue[0],(len-bytes_to_end));
 800240a:	8bbb      	ldrh	r3, [r7, #28]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	18d0      	adds	r0, r2, r3
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	8bbb      	ldrh	r3, [r7, #28]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	461a      	mov	r2, r3
 800241a:	f017 fd05 	bl	8019e28 <memcpy>
		}

		queue->curr_byte_pos += len;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4413      	add	r3, r2
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002436:	2bff      	cmp	r3, #255	@ 0xff
 8002438:	d906      	bls.n	8002448 <queue_pop_elements+0xa8>
				queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002440:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002444:	b29b      	uxth	r3, r3
 8002446:	e002      	b.n	800244e <queue_pop_elements+0xae>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f8a2 3102 	strh.w	r3, [r2, #258]	@ 0x102

	return op_stat;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	2300      	movs	r3, #0
 800245a:	8b3a      	ldrh	r2, [r7, #24]
 800245c:	f362 030f 	bfi	r3, r2, #0, #16
 8002460:	8b7a      	ldrh	r2, [r7, #26]
 8002462:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	if (queue_get_size(queue)>0){
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fef9 	bl	800226e <queue_get_size>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <queue_peek+0x22>
		return queue->queue[queue->curr_byte_pos];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	e000      	b.n	8002492 <queue_peek+0x24>
	}
	else{
		return 0;
 8002490:	2300      	movs	r3, #0
	}
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 800249a:	b580      	push	{r7, lr}
 800249c:	b088      	sub	sp, #32
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	4613      	mov	r3, r2
 80024a6:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 80024a8:	f007 fb74 	bl	8009b94 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	op_stat.op_status = Q_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	753b      	strb	r3, [r7, #20]
	uint16_t q_size = queue_get_size(queue);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff fed8 	bl	800226e <queue_get_size>
 80024be:	4603      	mov	r3, r0
 80024c0:	83fb      	strh	r3, [r7, #30]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80024c8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80024cc:	83bb      	strh	r3, [r7, #28]
	if (q_size < size){
 80024ce:	8bfa      	ldrh	r2, [r7, #30]
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d203      	bcs.n	80024de <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80024d6:	2303      	movs	r3, #3
 80024d8:	753b      	strb	r3, [r7, #20]
		size = q_size;
 80024da:	8bfb      	ldrh	r3, [r7, #30]
 80024dc:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 80024de:	8bba      	ldrh	r2, [r7, #28]
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d30b      	bcc.n	80024fe <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80024ec:	461a      	mov	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	4619      	mov	r1, r3
 80024f6:	68b8      	ldr	r0, [r7, #8]
 80024f8:	f017 fc96 	bl	8019e28 <memcpy>
 80024fc:	e014      	b.n	8002528 <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002504:	461a      	mov	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	8bba      	ldrh	r2, [r7, #28]
 800250c:	4619      	mov	r1, r3
 800250e:	68b8      	ldr	r0, [r7, #8]
 8002510:	f017 fc8a 	bl	8019e28 <memcpy>
		memcpy((buffer+bytes_to_end), &queue->queue[0],(size-bytes_to_end));
 8002514:	8bbb      	ldrh	r3, [r7, #28]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	18d0      	adds	r0, r2, r3
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	8bbb      	ldrh	r3, [r7, #28]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	461a      	mov	r2, r3
 8002524:	f017 fc80 	bl	8019e28 <memcpy>
	}
	op_stat.bytes_appended = size;
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	2300      	movs	r3, #0
 8002532:	8b3a      	ldrh	r2, [r7, #24]
 8002534:	f362 030f 	bfi	r3, r2, #0, #16
 8002538:	8b7a      	ldrh	r2, [r7, #26]
 800253a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b097      	sub	sp, #92	@ 0x5c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6578      	str	r0, [r7, #84]	@ 0x54
 8002550:	6539      	str	r1, [r7, #80]	@ 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002552:	e066      	b.n	8002622 <ref_process_data+0xda>
		switch(state){
 8002554:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <ref_process_data+0xf0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <ref_process_data+0x1a>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d036      	beq.n	80025ce <ref_process_data+0x86>
 8002560:	e05f      	b.n	8002622 <ref_process_data+0xda>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 8002562:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002564:	f7ff fe83 	bl	800226e <queue_get_size>
 8002568:	4603      	mov	r3, r0
 800256a:	2b06      	cmp	r3, #6
 800256c:	d801      	bhi.n	8002572 <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 800256e:	2302      	movs	r3, #2
 8002570:	e05e      	b.n	8002630 <ref_process_data+0xe8>
				}
				if (queue_peek(uart_queue) != 0xA5){
 8002572:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002574:	f7ff ff7b 	bl	800246e <queue_peek>
 8002578:	4603      	mov	r3, r0
 800257a:	2ba5      	cmp	r3, #165	@ 0xa5
 800257c:	d003      	beq.n	8002586 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800257e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002580:	f7ff fee1 	bl	8002346 <queue_pop_element>
						state = DATA;
					} else {
						return INSUFFICIENT_DATA;
					}
				}
				break;
 8002584:	e04d      	b.n	8002622 <ref_process_data+0xda>
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002586:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002588:	f7ff fe71 	bl	800226e <queue_get_size>
 800258c:	4603      	mov	r3, r0
 800258e:	2b07      	cmp	r3, #7
 8002590:	d91b      	bls.n	80025ca <ref_process_data+0x82>
						header = ref_get_header(uart_queue);
 8002592:	4c2a      	ldr	r4, [pc, #168]	@ (800263c <ref_process_data+0xf4>)
 8002594:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f850 	bl	8002640 <ref_get_header>
 80025a0:	4622      	mov	r2, r4
 80025a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	6010      	str	r0, [r2, #0]
 80025aa:	8899      	ldrh	r1, [r3, #4]
 80025ac:	799b      	ldrb	r3, [r3, #6]
 80025ae:	8091      	strh	r1, [r2, #4]
 80025b0:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <ref_process_data+0xf4>)
 80025b4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02c      	beq.n	800261c <ref_process_data+0xd4>
						state = DATA;
 80025c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <ref_process_data+0xf0>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
				break;
 80025c8:	e02b      	b.n	8002622 <ref_process_data+0xda>
						return INSUFFICIENT_DATA;
 80025ca:	2302      	movs	r3, #2
 80025cc:	e030      	b.n	8002630 <ref_process_data+0xe8>
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 80025ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025d0:	f7ff fe4d 	bl	800226e <queue_get_size>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b18      	ldr	r3, [pc, #96]	@ (800263c <ref_process_data+0xf4>)
 80025da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3309      	adds	r3, #9
 80025e2:	429a      	cmp	r2, r3
 80025e4:	dd18      	ble.n	8002618 <ref_process_data+0xd0>
					state = HEADER;
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <ref_process_data+0xf0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 80025ec:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 80025ee:	4638      	mov	r0, r7
 80025f0:	4a12      	ldr	r2, [pc, #72]	@ (800263c <ref_process_data+0xf4>)
 80025f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f4:	ca06      	ldmia	r2, {r1, r2}
 80025f6:	f000 f89b 	bl	8002730 <ref_get_msg>
 80025fa:	4620      	mov	r0, r4
 80025fc:	463b      	mov	r3, r7
 80025fe:	2242      	movs	r2, #66	@ 0x42
 8002600:	4619      	mov	r1, r3
 8002602:	f017 fc11 	bl	8019e28 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002610:	4293      	cmp	r3, r2
 8002612:	d005      	beq.n	8002620 <ref_process_data+0xd8>
						return PROCESS_SUCCESS;
 8002614:	2300      	movs	r3, #0
 8002616:	e00b      	b.n	8002630 <ref_process_data+0xe8>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 8002618:	2302      	movs	r3, #2
 800261a:	e009      	b.n	8002630 <ref_process_data+0xe8>
							break;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <ref_process_data+0xda>
						break;
 8002620:	bf00      	nop
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002622:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002624:	f7ff fe23 	bl	800226e <queue_get_size>
 8002628:	4603      	mov	r3, r0
 800262a:	2b07      	cmp	r3, #7
 800262c:	d892      	bhi.n	8002554 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 800262e:	2302      	movs	r3, #2
}
 8002630:	4618      	mov	r0, r3
 8002632:	375c      	adds	r7, #92	@ 0x5c
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}
 8002638:	2000087c 	.word	0x2000087c
 800263c:	20000880 	.word	0x20000880

08002640 <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	2207      	movs	r2, #7
 8002650:	4619      	mov	r1, r3
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f7ff ff21 	bl	800249a <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 8002658:	7b3b      	ldrb	r3, [r7, #12]
 800265a:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 800265c:	7d3b      	ldrb	r3, [r7, #20]
 800265e:	2ba5      	cmp	r3, #165	@ 0xa5
 8002660:	d013      	beq.n	800268a <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 8002662:	6838      	ldr	r0, [r7, #0]
 8002664:	f7ff fe6f 	bl	8002346 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
 800266c:	767b      	strb	r3, [r7, #25]
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	6010      	str	r0, [r2, #0]
 8002680:	8899      	ldrh	r1, [r3, #4]
 8002682:	799b      	ldrb	r3, [r3, #6]
 8002684:	8091      	strh	r1, [r2, #4]
 8002686:	7193      	strb	r3, [r2, #6]
 8002688:	e04d      	b.n	8002726 <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 800268a:	7bbb      	ldrb	r3, [r7, #14]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	b21a      	sxth	r2, r3
 8002690:	7b7b      	ldrb	r3, [r7, #13]
 8002692:	b21b      	sxth	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b21b      	sxth	r3, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 80026a2:	7c3b      	ldrb	r3, [r7, #16]
 80026a4:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2105      	movs	r1, #5
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fc85 	bl	8000fbc <verify_CRC8_check_sum>
 80026b2:	4603      	mov	r3, r0
 80026b4:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 80026b6:	7cbb      	ldrb	r3, [r7, #18]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	7c7b      	ldrb	r3, [r7, #17]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <ref_get_header+0xaa>
 80026d0:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026da:	d806      	bhi.n	80026ea <ref_get_header+0xaa>
 80026dc:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f240 3205 	movw	r2, #773	@ 0x305
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d913      	bls.n	8002712 <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	767b      	strb	r3, [r7, #25]
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f7ff fe25 	bl	8002346 <queue_pop_element>
		return ret_header;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	6010      	str	r0, [r2, #0]
 8002708:	8899      	ldrh	r1, [r3, #4]
 800270a:	799b      	ldrb	r3, [r3, #6]
 800270c:	8091      	strh	r1, [r2, #4]
 800270e:	7193      	strb	r3, [r2, #6]
 8002710:	e009      	b.n	8002726 <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	461a      	mov	r2, r3
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	6010      	str	r0, [r2, #0]
 800271e:	8899      	ldrh	r1, [r3, #4]
 8002720:	799b      	ldrb	r3, [r3, #6]
 8002722:	8091      	strh	r1, [r2, #4]
 8002724:	7193      	strb	r3, [r2, #6]
}
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b0d8      	sub	sp, #352	@ 0x160
 8002734:	af00      	add	r7, sp, #0
 8002736:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 800273a:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 800273e:	6020      	str	r0, [r4, #0]
 8002740:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002744:	f5a0 70ae 	sub.w	r0, r0, #348	@ 0x15c
 8002748:	e880 0006 	stmia.w	r0, {r1, r2}
 800274c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8002750:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002754:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002756:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800275a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800275e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002762:	b29b      	uxth	r3, r3
 8002764:	3309      	adds	r3, #9
 8002766:	b29a      	uxth	r2, r3
 8002768:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800276c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002770:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	f7ff fe13 	bl	80023a0 <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 800277a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800277e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002782:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002786:	b29b      	uxth	r3, r3
 8002788:	3309      	adds	r3, #9
 800278a:	461a      	mov	r2, r3
 800278c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc86 	bl	80010a4 <verify_CRC16_check_sum>
 8002798:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
	if (!crc_test){
 800279c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d116      	bne.n	80027d2 <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 80027a4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027b0:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 80027b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027c0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	2342      	movs	r3, #66	@ 0x42
 80027ca:	461a      	mov	r2, r3
 80027cc:	f017 fb2c 	bl	8019e28 <memcpy>
 80027d0:	e1a1      	b.n	8002b16 <ref_get_msg+0x3e6>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 80027d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027d6:	3307      	adds	r3, #7
 80027d8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	buffer_msg.cmd_id = header.cmd_id;
 80027dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80027e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027f2:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 80027f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027f8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80027fc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002800:	b29b      	uxth	r3, r3
 8002802:	f240 3202 	movw	r2, #770	@ 0x302
 8002806:	4293      	cmp	r3, r2
 8002808:	f000 815e 	beq.w	8002ac8 <ref_get_msg+0x398>
 800280c:	f240 3202 	movw	r2, #770	@ 0x302
 8002810:	4293      	cmp	r3, r2
 8002812:	f300 8169 	bgt.w	8002ae8 <ref_get_msg+0x3b8>
 8002816:	f240 3201 	movw	r2, #769	@ 0x301
 800281a:	4293      	cmp	r3, r2
 800281c:	f000 8148 	beq.w	8002ab0 <ref_get_msg+0x380>
 8002820:	f240 3201 	movw	r2, #769	@ 0x301
 8002824:	4293      	cmp	r3, r2
 8002826:	f300 815f 	bgt.w	8002ae8 <ref_get_msg+0x3b8>
 800282a:	f240 220a 	movw	r2, #522	@ 0x20a
 800282e:	4293      	cmp	r3, r2
 8002830:	f300 815a 	bgt.w	8002ae8 <ref_get_msg+0x3b8>
 8002834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002838:	dc04      	bgt.n	8002844 <ref_get_msg+0x114>
 800283a:	2b04      	cmp	r3, #4
 800283c:	dc40      	bgt.n	80028c0 <ref_get_msg+0x190>
 800283e:	2b00      	cmp	r3, #0
 8002840:	dc2e      	bgt.n	80028a0 <ref_get_msg+0x170>
 8002842:	e151      	b.n	8002ae8 <ref_get_msg+0x3b8>
 8002844:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002848:	2b09      	cmp	r3, #9
 800284a:	f200 814d 	bhi.w	8002ae8 <ref_get_msg+0x3b8>
 800284e:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <ref_get_msg+0x124>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	080029a9 	.word	0x080029a9
 8002858:	080029d9 	.word	0x080029d9
 800285c:	080029f9 	.word	0x080029f9
 8002860:	08002a15 	.word	0x08002a15
 8002864:	08002a2d 	.word	0x08002a2d
 8002868:	08002a41 	.word	0x08002a41
 800286c:	08002a53 	.word	0x08002a53
 8002870:	08002a6f 	.word	0x08002a6f
 8002874:	08002a87 	.word	0x08002a87
 8002878:	08002a9d 	.word	0x08002a9d
 800287c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8002880:	2b04      	cmp	r3, #4
 8002882:	f200 8131 	bhi.w	8002ae8 <ref_get_msg+0x3b8>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <ref_get_msg+0x15c>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800293f 	.word	0x0800293f
 8002890:	08002955 	.word	0x08002955
 8002894:	0800296b 	.word	0x0800296b
 8002898:	08002983 	.word	0x08002983
 800289c:	08002997 	.word	0x08002997
 80028a0:	3b01      	subs	r3, #1
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	f200 8120 	bhi.w	8002ae8 <ref_get_msg+0x3b8>
 80028a8:	a201      	add	r2, pc, #4	@ (adr r2, 80028b0 <ref_get_msg+0x180>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028d1 	.word	0x080028d1
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080028fb 	.word	0x080028fb
 80028bc:	08002927 	.word	0x08002927
 80028c0:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80028c4:	f280 8110 	bge.w	8002ae8 <ref_get_msg+0x3b8>
 80028c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028cc:	dcd6      	bgt.n	800287c <ref_get_msg+0x14c>
 80028ce:	e10b      	b.n	8002ae8 <ref_get_msg+0x3b8>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 80028d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028d4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028d8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80028dc:	3302      	adds	r3, #2
 80028de:	8811      	ldrh	r1, [r2, #0]
 80028e0:	7892      	ldrb	r2, [r2, #2]
 80028e2:	8019      	strh	r1, [r3, #0]
 80028e4:	709a      	strb	r2, [r3, #2]
		break;
 80028e6:	e107      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 80028e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028f6:	709a      	strb	r2, [r3, #2]
		break;
 80028f8:	e0fe      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 80028fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002902:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002906:	3302      	adds	r3, #2
 8002908:	6814      	ldr	r4, [r2, #0]
 800290a:	6850      	ldr	r0, [r2, #4]
 800290c:	6891      	ldr	r1, [r2, #8]
 800290e:	68d5      	ldr	r5, [r2, #12]
 8002910:	601c      	str	r4, [r3, #0]
 8002912:	6058      	str	r0, [r3, #4]
 8002914:	6099      	str	r1, [r3, #8]
 8002916:	60dd      	str	r5, [r3, #12]
 8002918:	6914      	ldr	r4, [r2, #16]
 800291a:	6950      	ldr	r0, [r2, #20]
 800291c:	6991      	ldr	r1, [r2, #24]
 800291e:	611c      	str	r4, [r3, #16]
 8002920:	6158      	str	r0, [r3, #20]
 8002922:	6199      	str	r1, [r3, #24]
		break;
 8002924:	e0e8      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 8002926:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800292a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800292e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002932:	3302      	adds	r3, #2
 8002934:	8811      	ldrh	r1, [r2, #0]
 8002936:	7892      	ldrb	r2, [r2, #2]
 8002938:	8019      	strh	r1, [r3, #0]
 800293a:	709a      	strb	r2, [r3, #2]
		break;
 800293c:	e0dc      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 800293e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800294a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800294e:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002952:	e0d1      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 8002954:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002960:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002964:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002968:	e0c6      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 800296a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800296e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002972:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002976:	3302      	adds	r3, #2
 8002978:	8811      	ldrh	r1, [r2, #0]
 800297a:	7892      	ldrb	r2, [r2, #2]
 800297c:	8019      	strh	r1, [r3, #0]
 800297e:	709a      	strb	r2, [r3, #2]
		break;
 8002980:	e0ba      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 8002982:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29a      	uxth	r2, r3
 800298a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800298e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002992:	805a      	strh	r2, [r3, #2]
		break;
 8002994:	e0b0      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 8002996:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029a4:	709a      	strb	r2, [r3, #2]
		break;
 80029a6:	e0a7      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 80029a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029b0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80029b4:	3302      	adds	r3, #2
 80029b6:	6810      	ldr	r0, [r2, #0]
 80029b8:	6851      	ldr	r1, [r2, #4]
 80029ba:	6895      	ldr	r5, [r2, #8]
 80029bc:	68d4      	ldr	r4, [r2, #12]
 80029be:	6018      	str	r0, [r3, #0]
 80029c0:	6059      	str	r1, [r3, #4]
 80029c2:	609d      	str	r5, [r3, #8]
 80029c4:	60dc      	str	r4, [r3, #12]
 80029c6:	6910      	ldr	r0, [r2, #16]
 80029c8:	6951      	ldr	r1, [r2, #20]
 80029ca:	6118      	str	r0, [r3, #16]
 80029cc:	6159      	str	r1, [r3, #20]
 80029ce:	8b11      	ldrh	r1, [r2, #24]
 80029d0:	7e92      	ldrb	r2, [r2, #26]
 80029d2:	8319      	strh	r1, [r3, #24]
 80029d4:	769a      	strb	r2, [r3, #26]
		break;
 80029d6:	e08f      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 80029d8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029e0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80029e4:	3302      	adds	r3, #2
 80029e6:	6814      	ldr	r4, [r2, #0]
 80029e8:	6850      	ldr	r0, [r2, #4]
 80029ea:	6891      	ldr	r1, [r2, #8]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	601c      	str	r4, [r3, #0]
 80029f0:	6058      	str	r0, [r3, #4]
 80029f2:	6099      	str	r1, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
		break;
 80029f6:	e07f      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 80029f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a00:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a04:	3302      	adds	r3, #2
 8002a06:	6810      	ldr	r0, [r2, #0]
 8002a08:	6851      	ldr	r1, [r2, #4]
 8002a0a:	6892      	ldr	r2, [r2, #8]
 8002a0c:	6018      	str	r0, [r3, #0]
 8002a0e:	6059      	str	r1, [r3, #4]
 8002a10:	609a      	str	r2, [r3, #8]
		break;
 8002a12:	e071      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 8002a14:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a18:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a1c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a20:	3302      	adds	r3, #2
 8002a22:	6811      	ldr	r1, [r2, #0]
 8002a24:	6019      	str	r1, [r3, #0]
 8002a26:	8892      	ldrh	r2, [r2, #4]
 8002a28:	809a      	strh	r2, [r3, #4]
		break;
 8002a2a:	e065      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 8002a2c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a38:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a3c:	805a      	strh	r2, [r3, #2]
		break;
 8002a3e:	e05b      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 8002a40:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a4e:	709a      	strb	r2, [r3, #2]
		break;
 8002a50:	e052      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 8002a52:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a5a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a5e:	3302      	adds	r3, #2
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	6019      	str	r1, [r3, #0]
 8002a64:	8891      	ldrh	r1, [r2, #4]
 8002a66:	7992      	ldrb	r2, [r2, #6]
 8002a68:	8099      	strh	r1, [r3, #4]
 8002a6a:	719a      	strb	r2, [r3, #6]
		break;
 8002a6c:	e044      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002a6e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a72:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a76:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	6811      	ldr	r1, [r2, #0]
 8002a7e:	6019      	str	r1, [r3, #0]
 8002a80:	8892      	ldrh	r2, [r2, #4]
 8002a82:	809a      	strh	r2, [r3, #4]
		break;
 8002a84:	e038      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002a86:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a92:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a96:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002a9a:	e02d      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f017 f9bd 	bl	8019e28 <memcpy>
		break;
 8002aae:	e023      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 8002ab0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002ab4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ab8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002abc:	3302      	adds	r3, #2
 8002abe:	6811      	ldr	r1, [r2, #0]
 8002ac0:	6019      	str	r1, [r3, #0]
 8002ac2:	8892      	ldrh	r2, [r2, #4]
 8002ac4:	809a      	strh	r2, [r3, #4]
		break;
 8002ac6:	e017      	b.n	8002af8 <ref_get_msg+0x3c8>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 8002ac8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002acc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ad0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	6814      	ldr	r4, [r2, #0]
 8002ad8:	6850      	ldr	r0, [r2, #4]
 8002ada:	6891      	ldr	r1, [r2, #8]
 8002adc:	601c      	str	r4, [r3, #0]
 8002ade:	6058      	str	r0, [r3, #4]
 8002ae0:	6099      	str	r1, [r3, #8]
 8002ae2:	7b12      	ldrb	r2, [r2, #12]
 8002ae4:	731a      	strb	r2, [r3, #12]
		break;
 8002ae6:	e007      	b.n	8002af8 <ref_get_msg+0x3c8>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 8002ae8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002aec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002af4:	801a      	strh	r2, [r3, #0]
		break;
 8002af6:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 8002af8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002afc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	2342      	movs	r3, #66	@ 0x42
 8002b10:	461a      	mov	r2, r3
 8002b12:	f017 f989 	bl	8019e28 <memcpy>
}
 8002b16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b1a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}

08002b28 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002b38:	4a3a      	ldr	r2, [pc, #232]	@ (8002c24 <ref_usart_start+0xfc>)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <ref_usart_start+0xfc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fb6a 	bl	800221c <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d162      	bne.n	8002c1a <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <ref_usart_start+0x38>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e05b      	b.n	8002c1c <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <ref_usart_start+0x4a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e054      	b.n	8002c1c <ref_usart_start+0xf4>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		huart->pRxBuffPtr = pData;
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28
		huart->RxXferSize = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	859a      	strh	r2, [r3, #44]	@ 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2222      	movs	r2, #34	@ 0x22
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	4a23      	ldr	r2, [pc, #140]	@ (8002c28 <ref_usart_start+0x100>)
 8002b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <ref_usart_start+0x104>)
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	2200      	movs	r2, #0
 8002baa:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	f008 faba 	bl	800b13c <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf4:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c14:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
	}
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000888 	.word	0x20000888
 8002c28:	08002c8d 	.word	0x08002c8d
 8002c2c:	08002c31 	.word	0x08002c31

08002c30 <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <ref_half_cplt_isr+0x50>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7ff fb2f 	bl	80022aa <queue_append_byte>

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(referee_processing_task_handle, &xHigherPriorityTaskWoken);
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <ref_half_cplt_isr+0x54>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f107 020c 	add.w	r2, r7, #12
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f015 f900 	bl	8017e60 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <ref_half_cplt_isr+0x46>
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <ref_half_cplt_isr+0x58>)
 8002c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000888 	.word	0x20000888
 8002c84:	20003290 	.word	0x20003290
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <ref_full_cplt_isr+0x50>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7ff fb00 	bl	80022aa <queue_append_byte>

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(referee_processing_task_handle, &xHigherPriorityTaskWoken);
 8002cae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <ref_full_cplt_isr+0x54>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f107 020c 	add.w	r2, r7, #12
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f015 f8d1 	bl	8017e60 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <ref_full_cplt_isr+0x48>
 8002cc4:	4b07      	ldr	r3, [pc, #28]	@ (8002ce4 <ref_full_cplt_isr+0x58>)
 8002cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	f3bf 8f6f 	isb	sy
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000888 	.word	0x20000888
 8002ce0:	20003290 	.word	0x20003290
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cee:	463b      	mov	r3, r7
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002cfa:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002cfc:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <MX_ADC3_Init+0x9c>)
 8002cfe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d00:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d22:	4b17      	ldr	r3, [pc, #92]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d28:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d2a:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <MX_ADC3_Init+0xa0>)
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d2e:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d42:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002d48:	480d      	ldr	r0, [pc, #52]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d4a:	f006 ff53 	bl	8009bf4 <HAL_ADC_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002d54:	f000 fd4a 	bl	80037ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d64:	463b      	mov	r3, r7
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <MX_ADC3_Init+0x98>)
 8002d6a:	f006 ff87 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002d74:	f000 fd3a 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	2000088c 	.word	0x2000088c
 8002d84:	40012200 	.word	0x40012200
 8002d88:	0f000001 	.word	0x0f000001

08002d8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	@ 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <HAL_ADC_MspInit+0x7c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d128      	bne.n	8002e00 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_ADC_MspInit+0x80>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	4a15      	ldr	r2, [pc, #84]	@ (8002e0c <HAL_ADC_MspInit+0x80>)
 8002db8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dbe:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <HAL_ADC_MspInit+0x80>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_ADC_MspInit+0x80>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e0c <HAL_ADC_MspInit+0x80>)
 8002dd4:	f043 0320 	orr.w	r3, r3, #32
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <HAL_ADC_MspInit+0x80>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dec:	2303      	movs	r3, #3
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <HAL_ADC_MspInit+0x84>)
 8002dfc:	f008 fcfe 	bl	800b7fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002e00:	bf00      	nop
 8002e02:	3728      	adds	r7, #40	@ 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012200 	.word	0x40012200
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40021400 	.word	0x40021400

08002e14 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e18:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e1a:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <MX_CAN1_Init+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002e1e:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e20:	2203      	movs	r2, #3
 8002e22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e3a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002e3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e40:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e46:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002e52:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e64:	4804      	ldr	r0, [pc, #16]	@ (8002e78 <MX_CAN1_Init+0x64>)
 8002e66:	f007 f927 	bl	800a0b8 <HAL_CAN_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002e70:	f000 fcbc 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200008d4 	.word	0x200008d4
 8002e7c:	40006400 	.word	0x40006400

08002e80 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002e84:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002e86:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <MX_CAN2_Init+0x68>)
 8002e88:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002e8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002e9e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002ea2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002ea6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002eaa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002eac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002ed0:	4804      	ldr	r0, [pc, #16]	@ (8002ee4 <MX_CAN2_Init+0x64>)
 8002ed2:	f007 f8f1 	bl	800a0b8 <HAL_CAN_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002edc:	f000 fc86 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200008fc 	.word	0x200008fc
 8002ee8:	40006800 	.word	0x40006800

08002eec <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	@ 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a52      	ldr	r2, [pc, #328]	@ (8003054 <HAL_CAN_MspInit+0x168>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d145      	bne.n	8002f9a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f0e:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <HAL_CAN_MspInit+0x16c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a50      	ldr	r2, [pc, #320]	@ (8003058 <HAL_CAN_MspInit+0x16c>)
 8002f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f18:	4b4f      	ldr	r3, [pc, #316]	@ (8003058 <HAL_CAN_MspInit+0x16c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10d      	bne.n	8002f3c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	4b4d      	ldr	r3, [pc, #308]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	4a4c      	ldr	r2, [pc, #304]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f30:	4b4a      	ldr	r3, [pc, #296]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	4b46      	ldr	r3, [pc, #280]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	4a45      	ldr	r2, [pc, #276]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4c:	4b43      	ldr	r3, [pc, #268]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f68:	2309      	movs	r3, #9
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	483b      	ldr	r0, [pc, #236]	@ (8003060 <HAL_CAN_MspInit+0x174>)
 8002f74:	f008 fc42 	bl	800b7fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2105      	movs	r1, #5
 8002f7c:	2014      	movs	r0, #20
 8002f7e:	f007 fff7 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f82:	2014      	movs	r0, #20
 8002f84:	f008 f810 	bl	800afa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2105      	movs	r1, #5
 8002f8c:	2015      	movs	r0, #21
 8002f8e:	f007 ffef 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002f92:	2015      	movs	r0, #21
 8002f94:	f008 f808 	bl	800afa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002f98:	e057      	b.n	800304a <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a31      	ldr	r2, [pc, #196]	@ (8003064 <HAL_CAN_MspInit+0x178>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d152      	bne.n	800304a <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002fae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb4:	4b29      	ldr	r3, [pc, #164]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002fc0:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <HAL_CAN_MspInit+0x16c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4a24      	ldr	r2, [pc, #144]	@ (8003058 <HAL_CAN_MspInit+0x16c>)
 8002fc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002fca:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <HAL_CAN_MspInit+0x16c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10d      	bne.n	8002fee <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b21      	ldr	r3, [pc, #132]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	4a20      	ldr	r2, [pc, #128]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002fdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a19      	ldr	r2, [pc, #100]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_CAN_MspInit+0x170>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800300a:	2360      	movs	r3, #96	@ 0x60
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800301a:	2309      	movs	r3, #9
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	4810      	ldr	r0, [pc, #64]	@ (8003068 <HAL_CAN_MspInit+0x17c>)
 8003026:	f008 fbe9 	bl	800b7fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2105      	movs	r1, #5
 800302e:	2040      	movs	r0, #64	@ 0x40
 8003030:	f007 ff9e 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003034:	2040      	movs	r0, #64	@ 0x40
 8003036:	f007 ffb7 	bl	800afa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2105      	movs	r1, #5
 800303e:	2041      	movs	r0, #65	@ 0x41
 8003040:	f007 ff96 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003044:	2041      	movs	r0, #65	@ 0x41
 8003046:	f007 ffaf 	bl	800afa8 <HAL_NVIC_EnableIRQ>
}
 800304a:	bf00      	nop
 800304c:	3730      	adds	r7, #48	@ 0x30
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40006400 	.word	0x40006400
 8003058:	20000924 	.word	0x20000924
 800305c:	40023800 	.word	0x40023800
 8003060:	40020c00 	.word	0x40020c00
 8003064:	40006800 	.word	0x40006800
 8003068:	40020400 	.word	0x40020400

0800306c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <MX_DMA_Init+0xc8>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a2e      	ldr	r2, [pc, #184]	@ (8003134 <MX_DMA_Init+0xc8>)
 800307c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b2c      	ldr	r3, [pc, #176]	@ (8003134 <MX_DMA_Init+0xc8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <MX_DMA_Init+0xc8>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a27      	ldr	r2, [pc, #156]	@ (8003134 <MX_DMA_Init+0xc8>)
 8003098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b25      	ldr	r3, [pc, #148]	@ (8003134 <MX_DMA_Init+0xc8>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2105      	movs	r1, #5
 80030ae:	200c      	movs	r0, #12
 80030b0:	f007 ff5e 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80030b4:	200c      	movs	r0, #12
 80030b6:	f007 ff77 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2105      	movs	r1, #5
 80030be:	200d      	movs	r0, #13
 80030c0:	f007 ff56 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80030c4:	200d      	movs	r0, #13
 80030c6:	f007 ff6f 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2105      	movs	r1, #5
 80030ce:	200f      	movs	r0, #15
 80030d0:	f007 ff4e 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80030d4:	200f      	movs	r0, #15
 80030d6:	f007 ff67 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2105      	movs	r1, #5
 80030de:	2038      	movs	r0, #56	@ 0x38
 80030e0:	f007 ff46 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030e4:	2038      	movs	r0, #56	@ 0x38
 80030e6:	f007 ff5f 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2105      	movs	r1, #5
 80030ee:	2039      	movs	r0, #57	@ 0x39
 80030f0:	f007 ff3e 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80030f4:	2039      	movs	r0, #57	@ 0x39
 80030f6:	f007 ff57 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2105      	movs	r1, #5
 80030fe:	203b      	movs	r0, #59	@ 0x3b
 8003100:	f007 ff36 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003104:	203b      	movs	r0, #59	@ 0x3b
 8003106:	f007 ff4f 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2105      	movs	r1, #5
 800310e:	2044      	movs	r0, #68	@ 0x44
 8003110:	f007 ff2e 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003114:	2044      	movs	r0, #68	@ 0x44
 8003116:	f007 ff47 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2105      	movs	r1, #5
 800311e:	2045      	movs	r0, #69	@ 0x45
 8003120:	f007 ff26 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003124:	2045      	movs	r0, #69	@ 0x45
 8003126:	f007 ff3f 	bl	800afa8 <HAL_NVIC_EnableIRQ>

}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0

}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
	return 0;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a07      	ldr	r2, [pc, #28]	@ (8003198 <vApplicationGetIdleTaskMemory+0x2c>)
 800317c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4a06      	ldr	r2, [pc, #24]	@ (800319c <vApplicationGetIdleTaskMemory+0x30>)
 8003182:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800318a:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	20000930 	.word	0x20000930
 800319c:	20000ab0 	.word	0x20000ab0

080031a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a07      	ldr	r2, [pc, #28]	@ (80031cc <vApplicationGetTimerTaskMemory+0x2c>)
 80031b0:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4a06      	ldr	r2, [pc, #24]	@ (80031d0 <vApplicationGetTimerTaskMemory+0x30>)
 80031b6:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031be:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	20000eb0 	.word	0x20000eb0
 80031d0:	20001030 	.word	0x20001030

080031d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <MX_FREERTOS_Init+0x48>)
 80031dc:	1d3c      	adds	r4, r7, #4
 80031de:	461d      	mov	r5, r3
 80031e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f012 fc8a 	bl	8015b0a <osThreadCreate>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <MX_FREERTOS_Init+0x4c>)
 80031fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	xTaskCreate(master_task, "master_task",
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <MX_FREERTOS_Init+0x50>)
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	230c      	movs	r3, #12
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2301      	movs	r3, #1
 8003206:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800320a:	4907      	ldr	r1, [pc, #28]	@ (8003228 <MX_FREERTOS_Init+0x54>)
 800320c:	4807      	ldr	r0, [pc, #28]	@ (800322c <MX_FREERTOS_Init+0x58>)
 800320e:	f013 fdad 	bl	8016d6c <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 12,
			&master_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 8003212:	bf00      	nop
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	bf00      	nop
 800321c:	08020120 	.word	0x08020120
 8003220:	2000092c 	.word	0x2000092c
 8003224:	20000928 	.word	0x20000928
 8003228:	08020108 	.word	0x08020108
 800322c:	08007951 	.word	0x08007951

08003230 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003238:	f015 fec6 	bl	8018fc8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(100000);
 800323c:	4801      	ldr	r0, [pc, #4]	@ (8003244 <StartDefaultTask+0x14>)
 800323e:	f012 fcb0 	bl	8015ba2 <osDelay>
 8003242:	e7fb      	b.n	800323c <StartDefaultTask+0xc>
 8003244:	000186a0 	.word	0x000186a0

08003248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	4b84      	ldr	r3, [pc, #528]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	4a83      	ldr	r2, [pc, #524]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	@ 0x30
 800326e:	4b81      	ldr	r3, [pc, #516]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	4b7d      	ldr	r3, [pc, #500]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a7c      	ldr	r2, [pc, #496]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b7a      	ldr	r3, [pc, #488]	@ (8003474 <MX_GPIO_Init+0x22c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	4b76      	ldr	r3, [pc, #472]	@ (8003474 <MX_GPIO_Init+0x22c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a75      	ldr	r2, [pc, #468]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b73      	ldr	r3, [pc, #460]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	4b68      	ldr	r3, [pc, #416]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a67      	ldr	r2, [pc, #412]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b65      	ldr	r3, [pc, #404]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4b61      	ldr	r3, [pc, #388]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	4a60      	ldr	r2, [pc, #384]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003474 <MX_GPIO_Init+0x22c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	4b5a      	ldr	r3, [pc, #360]	@ (8003474 <MX_GPIO_Init+0x22c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4a59      	ldr	r2, [pc, #356]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003310:	f043 0320 	orr.w	r3, r3, #32
 8003314:	6313      	str	r3, [r2, #48]	@ 0x30
 8003316:	4b57      	ldr	r3, [pc, #348]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <MX_GPIO_Init+0x22c>)
 800332c:	f043 0310 	orr.w	r3, r3, #16
 8003330:	6313      	str	r3, [r2, #48]	@ 0x30
 8003332:	4b50      	ldr	r3, [pc, #320]	@ (8003474 <MX_GPIO_Init+0x22c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800333e:	2200      	movs	r2, #0
 8003340:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003344:	484c      	ldr	r0, [pc, #304]	@ (8003478 <MX_GPIO_Init+0x230>)
 8003346:	f008 fbf5 	bl	800bb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	2140      	movs	r1, #64	@ 0x40
 800334e:	484b      	ldr	r0, [pc, #300]	@ (800347c <MX_GPIO_Init+0x234>)
 8003350:	f008 fbf0 	bl	800bb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003354:	2201      	movs	r2, #1
 8003356:	2110      	movs	r1, #16
 8003358:	4849      	ldr	r0, [pc, #292]	@ (8003480 <MX_GPIO_Init+0x238>)
 800335a:	f008 fbeb 	bl	800bb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800335e:	2201      	movs	r2, #1
 8003360:	2101      	movs	r1, #1
 8003362:	4848      	ldr	r0, [pc, #288]	@ (8003484 <MX_GPIO_Init+0x23c>)
 8003364:	f008 fbe6 	bl	800bb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 8003368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336e:	2301      	movs	r3, #1
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 800337a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337e:	4619      	mov	r1, r3
 8003380:	483d      	ldr	r0, [pc, #244]	@ (8003478 <MX_GPIO_Init+0x230>)
 8003382:	f008 fa3b 	bl	800b7fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 8003386:	2340      	movs	r3, #64	@ 0x40
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338a:	2301      	movs	r3, #1
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003392:	2300      	movs	r3, #0
 8003394:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 8003396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800339a:	4619      	mov	r1, r3
 800339c:	4837      	ldr	r0, [pc, #220]	@ (800347c <MX_GPIO_Init+0x234>)
 800339e:	f008 fa2d 	bl	800b7fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80033a2:	2308      	movs	r3, #8
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ac:	2301      	movs	r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033b4:	4619      	mov	r1, r3
 80033b6:	4831      	ldr	r0, [pc, #196]	@ (800347c <MX_GPIO_Init+0x234>)
 80033b8:	f008 fa20 	bl	800b7fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033bc:	2310      	movs	r3, #16
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	2301      	movs	r3, #1
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d0:	4619      	mov	r1, r3
 80033d2:	482b      	ldr	r0, [pc, #172]	@ (8003480 <MX_GPIO_Init+0x238>)
 80033d4:	f008 fa12 	bl	800b7fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 80033d8:	2330      	movs	r3, #48	@ 0x30
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e2:	2301      	movs	r3, #1
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ea:	4619      	mov	r1, r3
 80033ec:	4822      	ldr	r0, [pc, #136]	@ (8003478 <MX_GPIO_Init+0x230>)
 80033ee:	f008 fa05 	bl	800b7fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033f8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003406:	4619      	mov	r1, r3
 8003408:	481f      	ldr	r0, [pc, #124]	@ (8003488 <MX_GPIO_Init+0x240>)
 800340a:	f008 f9f7 	bl	800b7fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800340e:	2301      	movs	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003412:	2301      	movs	r3, #1
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003422:	4619      	mov	r1, r3
 8003424:	4817      	ldr	r0, [pc, #92]	@ (8003484 <MX_GPIO_Init+0x23c>)
 8003426:	f008 f9e9 	bl	800b7fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2105      	movs	r1, #5
 800342e:	2009      	movs	r0, #9
 8003430:	f007 fd9e 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003434:	2009      	movs	r0, #9
 8003436:	f007 fdb7 	bl	800afa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2105      	movs	r1, #5
 800343e:	200a      	movs	r0, #10
 8003440:	f007 fd96 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003444:	200a      	movs	r0, #10
 8003446:	f007 fdaf 	bl	800afa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2105      	movs	r1, #5
 800344e:	2017      	movs	r0, #23
 8003450:	f007 fd8e 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003454:	2017      	movs	r0, #23
 8003456:	f007 fda7 	bl	800afa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2105      	movs	r1, #5
 800345e:	2028      	movs	r0, #40	@ 0x28
 8003460:	f007 fd86 	bl	800af70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003464:	2028      	movs	r0, #40	@ 0x28
 8003466:	f007 fd9f 	bl	800afa8 <HAL_NVIC_EnableIRQ>

}
 800346a:	bf00      	nop
 800346c:	3738      	adds	r7, #56	@ 0x38
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40020800 	.word	0x40020800
 800347c:	40021800 	.word	0x40021800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40021000 	.word	0x40021000

0800348c <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <MX_I2C3_Init+0x50>)
 8003492:	4a13      	ldr	r2, [pc, #76]	@ (80034e0 <MX_I2C3_Init+0x54>)
 8003494:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003496:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <MX_I2C3_Init+0x50>)
 8003498:	4a12      	ldr	r2, [pc, #72]	@ (80034e4 <MX_I2C3_Init+0x58>)
 800349a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800349c:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <MX_I2C3_Init+0x50>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80034a2:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034a8:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034b0:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034bc:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034c8:	4804      	ldr	r0, [pc, #16]	@ (80034dc <MX_I2C3_Init+0x50>)
 80034ca:	f008 fb65 	bl	800bb98 <HAL_I2C_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034d4:	f000 f98a 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20001830 	.word	0x20001830
 80034e0:	40005c00 	.word	0x40005c00
 80034e4:	00061a80 	.word	0x00061a80

080034e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5b      	ldr	r2, [pc, #364]	@ (8003674 <HAL_I2C_MspInit+0x18c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	f040 80b0 	bne.w	800366c <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	4b59      	ldr	r3, [pc, #356]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4a58      	ldr	r2, [pc, #352]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6313      	str	r3, [r2, #48]	@ 0x30
 800351c:	4b56      	ldr	r3, [pc, #344]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b52      	ldr	r3, [pc, #328]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	4a51      	ldr	r2, [pc, #324]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6313      	str	r3, [r2, #48]	@ 0x30
 8003538:	4b4f      	ldr	r3, [pc, #316]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800354a:	2312      	movs	r3, #18
 800354c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003556:	2304      	movs	r3, #4
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	4846      	ldr	r0, [pc, #280]	@ (800367c <HAL_I2C_MspInit+0x194>)
 8003562:	f008 f94b 	bl	800b7fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003566:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800356a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800356c:	2312      	movs	r3, #18
 800356e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003570:	2301      	movs	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003574:	2303      	movs	r3, #3
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003578:	2304      	movs	r3, #4
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	4619      	mov	r1, r3
 8003582:	483f      	ldr	r0, [pc, #252]	@ (8003680 <HAL_I2C_MspInit+0x198>)
 8003584:	f008 f93a 	bl	800b7fc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	4b3a      	ldr	r3, [pc, #232]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	4a39      	ldr	r2, [pc, #228]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 8003592:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003596:	6413      	str	r3, [r2, #64]	@ 0x40
 8003598:	4b37      	ldr	r3, [pc, #220]	@ (8003678 <HAL_I2C_MspInit+0x190>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80035a4:	4b37      	ldr	r3, [pc, #220]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035a6:	4a38      	ldr	r2, [pc, #224]	@ (8003688 <HAL_I2C_MspInit+0x1a0>)
 80035a8:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80035aa:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035ac:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035b0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b2:	4b34      	ldr	r3, [pc, #208]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	4b32      	ldr	r3, [pc, #200]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035be:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035c4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80035d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035de:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80035e4:	4827      	ldr	r0, [pc, #156]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035e6:	f007 fcfb 	bl	800afe0 <HAL_DMA_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80035f0:	f000 f8fc 	bl	80037ec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a23      	ldr	r2, [pc, #140]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80035fa:	4a22      	ldr	r2, [pc, #136]	@ (8003684 <HAL_I2C_MspInit+0x19c>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8003600:	4b22      	ldr	r3, [pc, #136]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003602:	4a23      	ldr	r2, [pc, #140]	@ (8003690 <HAL_I2C_MspInit+0x1a8>)
 8003604:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8003606:	4b21      	ldr	r3, [pc, #132]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003608:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800360c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360e:	4b1f      	ldr	r3, [pc, #124]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003610:	2240      	movs	r2, #64	@ 0x40
 8003612:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003616:	2200      	movs	r2, #0
 8003618:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800361a:	4b1c      	ldr	r3, [pc, #112]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 800361c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003620:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003622:	4b1a      	ldr	r3, [pc, #104]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003624:	2200      	movs	r2, #0
 8003626:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003628:	4b18      	ldr	r3, [pc, #96]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 800362a:	2200      	movs	r2, #0
 800362c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800362e:	4b17      	ldr	r3, [pc, #92]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003630:	2200      	movs	r2, #0
 8003632:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003634:	4b15      	ldr	r3, [pc, #84]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003636:	2200      	movs	r2, #0
 8003638:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800363a:	4b14      	ldr	r3, [pc, #80]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 800363c:	2200      	movs	r2, #0
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8003640:	4812      	ldr	r0, [pc, #72]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003642:	f007 fccd 	bl	800afe0 <HAL_DMA_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800364c:	f000 f8ce 	bl	80037ec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0e      	ldr	r2, [pc, #56]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34
 8003656:	4a0d      	ldr	r2, [pc, #52]	@ (800368c <HAL_I2C_MspInit+0x1a4>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2105      	movs	r1, #5
 8003660:	2049      	movs	r0, #73	@ 0x49
 8003662:	f007 fc85 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003666:	2049      	movs	r0, #73	@ 0x49
 8003668:	f007 fc9e 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800366c:	bf00      	nop
 800366e:	3728      	adds	r7, #40	@ 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40005c00 	.word	0x40005c00
 8003678:	40023800 	.word	0x40023800
 800367c:	40020800 	.word	0x40020800
 8003680:	40020000 	.word	0x40020000
 8003684:	20001884 	.word	0x20001884
 8003688:	40026040 	.word	0x40026040
 800368c:	200018e4 	.word	0x200018e4
 8003690:	40026070 	.word	0x40026070

08003694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003698:	f006 fa46 	bl	8009b28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800369c:	f000 f82a 	bl	80036f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036a0:	f7ff fdd2 	bl	8003248 <MX_GPIO_Init>
  MX_DMA_Init();
 80036a4:	f7ff fce2 	bl	800306c <MX_DMA_Init>
  MX_CAN1_Init();
 80036a8:	f7ff fbb4 	bl	8002e14 <MX_CAN1_Init>
  MX_CAN2_Init();
 80036ac:	f7ff fbe8 	bl	8002e80 <MX_CAN2_Init>
  MX_TIM5_Init();
 80036b0:	f000 fdb8 	bl	8004224 <MX_TIM5_Init>
  MX_TIM10_Init();
 80036b4:	f000 fe26 	bl	8004304 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80036b8:	f000 ff74 	bl	80045a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80036bc:	f000 ff9c 	bl	80045f8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80036c0:	f000 ffc6 	bl	8004650 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80036c4:	f000 f8ce 	bl	8003864 <MX_SPI1_Init>
  MX_I2C3_Init();
 80036c8:	f7ff fee0 	bl	800348c <MX_I2C3_Init>
  MX_ADC3_Init();
 80036cc:	f7ff fb0c 	bl	8002ce8 <MX_ADC3_Init>
  MX_TIM3_Init();
 80036d0:	f000 fcdc 	bl	800408c <MX_TIM3_Init>
  MX_TIM4_Init();
 80036d4:	f000 fd4c 	bl	8004170 <MX_TIM4_Init>
  MX_RNG_Init();
 80036d8:	f000 f88e 	bl	80037f8 <MX_RNG_Init>
  MX_TIM2_Init();
 80036dc:	f000 fca4 	bl	8004028 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 80036e0:	f006 f9a4 	bl	8009a2c <startup_task>
  MX_USB_DEVICE_Init();
 80036e4:	f015 fc70 	bl	8018fc8 <MX_USB_DEVICE_Init>
//  HAL_TIM_Base_Start(&htim3); //start micros clock
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80036e8:	f7ff fd74 	bl	80031d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036ec:	f012 fa06 	bl	8015afc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <main+0x5c>

080036f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b094      	sub	sp, #80	@ 0x50
 80036f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036fa:	f107 0320 	add.w	r3, r7, #32
 80036fe:	2230      	movs	r2, #48	@ 0x30
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f016 fae7 	bl	8019cd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <SystemClock_Config+0xcc>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <SystemClock_Config+0xcc>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
 8003728:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <SystemClock_Config+0xcc>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003734:	2300      	movs	r3, #0
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	4b22      	ldr	r3, [pc, #136]	@ (80037c4 <SystemClock_Config+0xd0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a21      	ldr	r2, [pc, #132]	@ (80037c4 <SystemClock_Config+0xd0>)
 800373e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b1f      	ldr	r3, [pc, #124]	@ (80037c4 <SystemClock_Config+0xd0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003750:	2301      	movs	r3, #1
 8003752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800375a:	2302      	movs	r3, #2
 800375c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800375e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003764:	2306      	movs	r3, #6
 8003766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003768:	23a8      	movs	r3, #168	@ 0xa8
 800376a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800376c:	2302      	movs	r3, #2
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003770:	2307      	movs	r3, #7
 8003772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003774:	f107 0320 	add.w	r3, r7, #32
 8003778:	4618      	mov	r0, r3
 800377a:	f00b fa15 	bl	800eba8 <HAL_RCC_OscConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003784:	f000 f832 	bl	80037ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003788:	230f      	movs	r3, #15
 800378a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378c:	2302      	movs	r3, #2
 800378e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003794:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800379a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800379e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	2105      	movs	r1, #5
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00b fc76 	bl	800f098 <HAL_RCC_ClockConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037b2:	f000 f81b 	bl	80037ec <Error_Handler>
  }
}
 80037b6:	bf00      	nop
 80037b8:	3750      	adds	r7, #80	@ 0x50
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000

080037c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037da:	f006 f9c7 	bl	8009b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40001000 	.word	0x40001000

080037ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037f0:	b672      	cpsid	i
}
 80037f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <Error_Handler+0x8>

080037f8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <MX_RNG_Init+0x20>)
 80037fe:	4a07      	ldr	r2, [pc, #28]	@ (800381c <MX_RNG_Init+0x24>)
 8003800:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003802:	4805      	ldr	r0, [pc, #20]	@ (8003818 <MX_RNG_Init+0x20>)
 8003804:	f00b fe5a 	bl	800f4bc <HAL_RNG_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800380e:	f7ff ffed 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20001944 	.word	0x20001944
 800381c:	50060800 	.word	0x50060800

08003820 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0b      	ldr	r2, [pc, #44]	@ (800385c <HAL_RNG_MspInit+0x3c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10d      	bne.n	800384e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <HAL_RNG_MspInit+0x40>)
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <HAL_RNG_MspInit+0x40>)
 800383c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003840:	6353      	str	r3, [r2, #52]	@ 0x34
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <HAL_RNG_MspInit+0x40>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	50060800 	.word	0x50060800
 8003860:	40023800 	.word	0x40023800

08003864 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003868:	4b17      	ldr	r3, [pc, #92]	@ (80038c8 <MX_SPI1_Init+0x64>)
 800386a:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <MX_SPI1_Init+0x68>)
 800386c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800386e:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <MX_SPI1_Init+0x64>)
 8003870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003876:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <MX_SPI1_Init+0x64>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800387c:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <MX_SPI1_Init+0x64>)
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003882:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <MX_SPI1_Init+0x64>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <MX_SPI1_Init+0x64>)
 800388a:	2200      	movs	r2, #0
 800388c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <MX_SPI1_Init+0x64>)
 8003890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003896:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <MX_SPI1_Init+0x64>)
 8003898:	2228      	movs	r2, #40	@ 0x28
 800389a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800389c:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <MX_SPI1_Init+0x64>)
 800389e:	2200      	movs	r2, #0
 80038a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a2:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <MX_SPI1_Init+0x64>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <MX_SPI1_Init+0x64>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <MX_SPI1_Init+0x64>)
 80038b0:	220a      	movs	r2, #10
 80038b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038b4:	4804      	ldr	r0, [pc, #16]	@ (80038c8 <MX_SPI1_Init+0x64>)
 80038b6:	f00b fe2b 	bl	800f510 <HAL_SPI_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038c0:	f7ff ff94 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20001954 	.word	0x20001954
 80038cc:	40013000 	.word	0x40013000

080038d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a56      	ldr	r2, [pc, #344]	@ (8003a48 <HAL_SPI_MspInit+0x178>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f040 80a6 	bne.w	8003a40 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	4b54      	ldr	r3, [pc, #336]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	4a53      	ldr	r2, [pc, #332]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 80038fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003902:	6453      	str	r3, [r2, #68]	@ 0x44
 8003904:	4b51      	ldr	r3, [pc, #324]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	4b4d      	ldr	r3, [pc, #308]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	4a4c      	ldr	r2, [pc, #304]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003920:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	4b46      	ldr	r3, [pc, #280]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	4a45      	ldr	r2, [pc, #276]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6313      	str	r3, [r2, #48]	@ 0x30
 800393c:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <HAL_SPI_MspInit+0x17c>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003948:	2318      	movs	r3, #24
 800394a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003958:	2305      	movs	r3, #5
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	483b      	ldr	r0, [pc, #236]	@ (8003a50 <HAL_SPI_MspInit+0x180>)
 8003964:	f007 ff4a 	bl	800b7fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003968:	2380      	movs	r3, #128	@ 0x80
 800396a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003978:	2305      	movs	r3, #5
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4619      	mov	r1, r3
 8003982:	4834      	ldr	r0, [pc, #208]	@ (8003a54 <HAL_SPI_MspInit+0x184>)
 8003984:	f007 ff3a 	bl	800b7fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003988:	4b33      	ldr	r3, [pc, #204]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 800398a:	4a34      	ldr	r2, [pc, #208]	@ (8003a5c <HAL_SPI_MspInit+0x18c>)
 800398c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800398e:	4b32      	ldr	r3, [pc, #200]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 8003990:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003994:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003996:	4b30      	ldr	r3, [pc, #192]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800399c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b0:	4b29      	ldr	r3, [pc, #164]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039b6:	4b28      	ldr	r3, [pc, #160]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039bc:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039be:	2200      	movs	r2, #0
 80039c0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039c2:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80039c8:	4823      	ldr	r0, [pc, #140]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039ca:	f007 fb09 	bl	800afe0 <HAL_DMA_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80039d4:	f7ff ff0a 	bl	80037ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a1f      	ldr	r2, [pc, #124]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80039de:	4a1e      	ldr	r2, [pc, #120]	@ (8003a58 <HAL_SPI_MspInit+0x188>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80039e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 80039e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_SPI_MspInit+0x194>)
 80039e8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80039ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 80039ec:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80039f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 80039f4:	2240      	movs	r2, #64	@ 0x40
 80039f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a04:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a06:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a24:	480e      	ldr	r0, [pc, #56]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a26:	f007 fadb 	bl	800afe0 <HAL_DMA_Init>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003a30:	f7ff fedc 	bl	80037ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0a      	ldr	r2, [pc, #40]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a38:	649a      	str	r2, [r3, #72]	@ 0x48
 8003a3a:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <HAL_SPI_MspInit+0x190>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a40:	bf00      	nop
 8003a42:	3728      	adds	r7, #40	@ 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40013000 	.word	0x40013000
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40020400 	.word	0x40020400
 8003a54:	40020000 	.word	0x40020000
 8003a58:	200019ac 	.word	0x200019ac
 8003a5c:	40026410 	.word	0x40026410
 8003a60:	20001a0c 	.word	0x20001a0c
 8003a64:	40026458 	.word	0x40026458

08003a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_MspInit+0x54>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	4a11      	ldr	r2, [pc, #68]	@ (8003abc <HAL_MspInit+0x54>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_MspInit+0x54>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_MspInit+0x54>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <HAL_MspInit+0x54>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9a:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <HAL_MspInit+0x54>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	210f      	movs	r1, #15
 8003aaa:	f06f 0001 	mvn.w	r0, #1
 8003aae:	f007 fa5f 	bl	800af70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	@ 0x38
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	4b33      	ldr	r3, [pc, #204]	@ (8003ba4 <HAL_InitTick+0xe4>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	4a32      	ldr	r2, [pc, #200]	@ (8003ba4 <HAL_InitTick+0xe4>)
 8003ada:	f043 0310 	orr.w	r3, r3, #16
 8003ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae0:	4b30      	ldr	r3, [pc, #192]	@ (8003ba4 <HAL_InitTick+0xe4>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aec:	f107 0210 	add.w	r2, r7, #16
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00b fcae 	bl	800f458 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b06:	f00b fc7f 	bl	800f408 <HAL_RCC_GetPCLK1Freq>
 8003b0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b0c:	e004      	b.n	8003b18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b0e:	f00b fc7b 	bl	800f408 <HAL_RCC_GetPCLK1Freq>
 8003b12:	4603      	mov	r3, r0
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1a:	4a23      	ldr	r2, [pc, #140]	@ (8003ba8 <HAL_InitTick+0xe8>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	3b01      	subs	r3, #1
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b26:	4b21      	ldr	r3, [pc, #132]	@ (8003bac <HAL_InitTick+0xec>)
 8003b28:	4a21      	ldr	r2, [pc, #132]	@ (8003bb0 <HAL_InitTick+0xf0>)
 8003b2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <HAL_InitTick+0xec>)
 8003b2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b34:	4a1d      	ldr	r2, [pc, #116]	@ (8003bac <HAL_InitTick+0xec>)
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <HAL_InitTick+0xec>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b40:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <HAL_InitTick+0xec>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b46:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <HAL_InitTick+0xec>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003b4c:	4817      	ldr	r0, [pc, #92]	@ (8003bac <HAL_InitTick+0xec>)
 8003b4e:	f00c f94b 	bl	800fde8 <HAL_TIM_Base_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11b      	bne.n	8003b98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003b60:	4812      	ldr	r0, [pc, #72]	@ (8003bac <HAL_InitTick+0xec>)
 8003b62:	f00c f991 	bl	800fe88 <HAL_TIM_Base_Start_IT>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b74:	2036      	movs	r0, #54	@ 0x36
 8003b76:	f007 fa17 	bl	800afa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	d808      	bhi.n	8003b92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	2036      	movs	r0, #54	@ 0x36
 8003b86:	f007 f9f3 	bl	800af70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <HAL_InitTick+0xf4>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e002      	b.n	8003b98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3738      	adds	r7, #56	@ 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	431bde83 	.word	0x431bde83
 8003bac:	20001a6c 	.word	0x20001a6c
 8003bb0:	40001000 	.word	0x40001000
 8003bb4:	2000000c 	.word	0x2000000c

08003bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <NMI_Handler+0x4>

08003bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <HardFault_Handler+0x4>

08003bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <MemManage_Handler+0x4>

08003bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <BusFault_Handler+0x4>

08003bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <UsageFault_Handler+0x4>

08003be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003bf2:	2008      	movs	r0, #8
 8003bf4:	f007 ffb8 	bl	800bb68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003c00:	2010      	movs	r0, #16
 8003c02:	f007 ffb1 	bl	800bb68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c10:	4802      	ldr	r0, [pc, #8]	@ (8003c1c <DMA1_Stream1_IRQHandler+0x10>)
 8003c12:	f007 fb7d 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20001d04 	.word	0x20001d04

08003c20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003c24:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <DMA1_Stream2_IRQHandler+0x10>)
 8003c26:	f007 fb73 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20001884 	.word	0x20001884

08003c34 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <DMA1_Stream4_IRQHandler+0x10>)
 8003c3a:	f007 fb69 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200018e4 	.word	0x200018e4

08003c48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <CAN1_RX0_IRQHandler+0x10>)
 8003c4e:	f006 fe8d 	bl	800a96c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200008d4 	.word	0x200008d4

08003c5c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c60:	4802      	ldr	r0, [pc, #8]	@ (8003c6c <CAN1_RX1_IRQHandler+0x10>)
 8003c62:	f006 fe83 	bl	800a96c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200008d4 	.word	0x200008d4

08003c70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003c74:	2020      	movs	r0, #32
 8003c76:	f007 ff77 	bl	800bb68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c84:	4803      	ldr	r0, [pc, #12]	@ (8003c94 <TIM3_IRQHandler+0x14>)
 8003c86:	f00c fadf 	bl	8010248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003c8a:	f7fe fa61 	bl	8002150 <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20001ab8 	.word	0x20001ab8

08003c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c9c:	4802      	ldr	r0, [pc, #8]	@ (8003ca8 <USART1_IRQHandler+0x10>)
 8003c9e:	f00d fad5 	bl	801124c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20001bd8 	.word	0x20001bd8

08003cac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cb0:	4802      	ldr	r0, [pc, #8]	@ (8003cbc <USART3_IRQHandler+0x10>)
 8003cb2:	f00d facb 	bl	801124c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20001c1c 	.word	0x20001c1c

08003cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003cc4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003cc8:	f007 ff4e 	bl	800bb68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  hall_int();
 8003ccc:	f7fd fcd4 	bl	8001678 <hall_int>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cd8:	4802      	ldr	r0, [pc, #8]	@ (8003ce4 <TIM6_DAC_IRQHandler+0x10>)
 8003cda:	f00c fab5 	bl	8010248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20001a6c 	.word	0x20001a6c

08003ce8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003cec:	4802      	ldr	r0, [pc, #8]	@ (8003cf8 <DMA2_Stream0_IRQHandler+0x10>)
 8003cee:	f007 fb0f 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200019ac 	.word	0x200019ac

08003cfc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003d00:	4802      	ldr	r0, [pc, #8]	@ (8003d0c <DMA2_Stream1_IRQHandler+0x10>)
 8003d02:	f007 fb05 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20001d64 	.word	0x20001d64

08003d10 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d14:	4802      	ldr	r0, [pc, #8]	@ (8003d20 <DMA2_Stream3_IRQHandler+0x10>)
 8003d16:	f007 fafb 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20001a0c 	.word	0x20001a0c

08003d24 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d28:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <CAN2_RX0_IRQHandler+0x10>)
 8003d2a:	f006 fe1f 	bl	800a96c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200008fc 	.word	0x200008fc

08003d38 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d3c:	4802      	ldr	r0, [pc, #8]	@ (8003d48 <CAN2_RX1_IRQHandler+0x10>)
 8003d3e:	f006 fe15 	bl	800a96c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200008fc 	.word	0x200008fc

08003d4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d50:	4802      	ldr	r0, [pc, #8]	@ (8003d5c <OTG_FS_IRQHandler+0x10>)
 8003d52:	f009 fdfc 	bl	800d94e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000c3c8 	.word	0x2000c3c8

08003d60 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d64:	4802      	ldr	r0, [pc, #8]	@ (8003d70 <DMA2_Stream5_IRQHandler+0x10>)
 8003d66:	f007 fad3 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20001ca4 	.word	0x20001ca4

08003d74 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003d78:	4802      	ldr	r0, [pc, #8]	@ (8003d84 <DMA2_Stream6_IRQHandler+0x10>)
 8003d7a:	f007 fac9 	bl	800b310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20001dc4 	.word	0x20001dc4

08003d88 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d8c:	4802      	ldr	r0, [pc, #8]	@ (8003d98 <USART6_IRQHandler+0x10>)
 8003d8e:	f00d fa5d 	bl	801124c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20001c60 	.word	0x20001c60

08003d9c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003da0:	4802      	ldr	r0, [pc, #8]	@ (8003dac <I2C3_ER_IRQHandler+0x10>)
 8003da2:	f008 fcf1 	bl	800c788 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20001830 	.word	0x20001830

08003db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return 1;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_kill>:

int _kill(int pid, int sig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dca:	f015 ffff 	bl	8019dcc <__errno>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2216      	movs	r2, #22
 8003dd2:	601a      	str	r2, [r3, #0]
  return -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_exit>:

void _exit (int status)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ffe7 	bl	8003dc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003df2:	bf00      	nop
 8003df4:	e7fd      	b.n	8003df2 <_exit+0x12>

08003df6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e00a      	b.n	8003e1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e08:	f3af 8000 	nop.w
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	60ba      	str	r2, [r7, #8]
 8003e14:	b2ca      	uxtb	r2, r1
 8003e16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	dbf0      	blt.n	8003e08 <_read+0x12>
  }

  return len;
 8003e26:	687b      	ldr	r3, [r7, #4]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e009      	b.n	8003e56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	60ba      	str	r2, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3301      	adds	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	dbf1      	blt.n	8003e42 <_write+0x12>
  }
  return len;
 8003e5e:	687b      	ldr	r3, [r7, #4]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_close>:

int _close(int file)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e90:	605a      	str	r2, [r3, #4]
  return 0;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_isatty>:

int _isatty(int file)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ea8:	2301      	movs	r3, #1
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <_sbrk+0x5c>)
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <_sbrk+0x60>)
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee4:	4b13      	ldr	r3, [pc, #76]	@ (8003f34 <_sbrk+0x64>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <_sbrk+0x64>)
 8003eee:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <_sbrk+0x68>)
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d207      	bcs.n	8003f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f00:	f015 ff64 	bl	8019dcc <__errno>
 8003f04:	4603      	mov	r3, r0
 8003f06:	220c      	movs	r2, #12
 8003f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e009      	b.n	8003f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <_sbrk+0x64>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a05      	ldr	r2, [pc, #20]	@ (8003f34 <_sbrk+0x64>)
 8003f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20020000 	.word	0x20020000
 8003f30:	00009000 	.word	0x00009000
 8003f34:	20001ab4 	.word	0x20001ab4
 8003f38:	2000ce00 	.word	0x2000ce00

08003f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <SystemInit+0x28>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	4a07      	ldr	r2, [pc, #28]	@ (8003f64 <SystemInit+0x28>)
 8003f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f50:	4b04      	ldr	r3, [pc, #16]	@ (8003f64 <SystemInit+0x28>)
 8003f52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f56:	609a      	str	r2, [r3, #8]
#endif
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <LL_TIM_DisableARRPreload>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f9a:	f023 0307 	bic.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	605a      	str	r2, [r3, #4]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004000:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004004:	4907      	ldr	r1, [pc, #28]	@ (8004024 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4313      	orrs	r3, r2
 800400a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <LL_APB1_GRP1_EnableClock+0x2c>)
 800400e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40023800 	.word	0x40023800

08004028 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800403c:	2001      	movs	r0, #1
 800403e:	f7ff ffdb 	bl	8003ff8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	4619      	mov	r1, r3
 8004058:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800405c:	f00e f8ce 	bl	80121fc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8004060:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004064:	f7ff ff80 	bl	8003f68 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004068:	2100      	movs	r1, #0
 800406a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800406e:	f7ff ff8b 	bl	8003f88 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8004072:	2100      	movs	r1, #0
 8004074:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004078:	f7ff ff9b 	bl	8003fb2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800407c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004080:	f7ff ffaa 	bl	8003fd8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08e      	sub	sp, #56	@ 0x38
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040a0:	f107 0320 	add.w	r3, r7, #32
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
 80040b8:	615a      	str	r2, [r3, #20]
 80040ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040be:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <MX_TIM3_Init+0xe0>)
 80040c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80040c2:	4b29      	ldr	r3, [pc, #164]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040c4:	22a7      	movs	r2, #167	@ 0xa7
 80040c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c8:	4b27      	ldr	r3, [pc, #156]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d4:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040da:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040e0:	4821      	ldr	r0, [pc, #132]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040e2:	f00b fe81 	bl	800fde8 <HAL_TIM_Base_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80040ec:	f7ff fb7e 	bl	80037ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040fa:	4619      	mov	r1, r3
 80040fc:	481a      	ldr	r0, [pc, #104]	@ (8004168 <MX_TIM3_Init+0xdc>)
 80040fe:	f00c fac9 	bl	8010694 <HAL_TIM_ConfigClockSource>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004108:	f7ff fb70 	bl	80037ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800410c:	4816      	ldr	r0, [pc, #88]	@ (8004168 <MX_TIM3_Init+0xdc>)
 800410e:	f00b ff2b 	bl	800ff68 <HAL_TIM_OC_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004118:	f7ff fb68 	bl	80037ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004124:	f107 0320 	add.w	r3, r7, #32
 8004128:	4619      	mov	r1, r3
 800412a:	480f      	ldr	r0, [pc, #60]	@ (8004168 <MX_TIM3_Init+0xdc>)
 800412c:	f00c feb2 	bl	8010e94 <HAL_TIMEx_MasterConfigSynchronization>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004136:	f7ff fb59 	bl	80037ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2200      	movs	r2, #0
 800414e:	4619      	mov	r1, r3
 8004150:	4805      	ldr	r0, [pc, #20]	@ (8004168 <MX_TIM3_Init+0xdc>)
 8004152:	f00c f981 	bl	8010458 <HAL_TIM_OC_ConfigChannel>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800415c:	f7ff fb46 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004160:	bf00      	nop
 8004162:	3738      	adds	r7, #56	@ 0x38
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20001ab8 	.word	0x20001ab8
 800416c:	40000400 	.word	0x40000400

08004170 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004176:	f107 0320 	add.w	r3, r7, #32
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	615a      	str	r2, [r3, #20]
 8004190:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004192:	4b22      	ldr	r3, [pc, #136]	@ (800421c <MX_TIM4_Init+0xac>)
 8004194:	4a22      	ldr	r2, [pc, #136]	@ (8004220 <MX_TIM4_Init+0xb0>)
 8004196:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8004198:	4b20      	ldr	r3, [pc, #128]	@ (800421c <MX_TIM4_Init+0xac>)
 800419a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800419e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <MX_TIM4_Init+0xac>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80041a6:	4b1d      	ldr	r3, [pc, #116]	@ (800421c <MX_TIM4_Init+0xac>)
 80041a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ae:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <MX_TIM4_Init+0xac>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b4:	4b19      	ldr	r3, [pc, #100]	@ (800421c <MX_TIM4_Init+0xac>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80041ba:	4818      	ldr	r0, [pc, #96]	@ (800421c <MX_TIM4_Init+0xac>)
 80041bc:	f00b ff2d 	bl	801001a <HAL_TIM_PWM_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80041c6:	f7ff fb11 	bl	80037ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041d2:	f107 0320 	add.w	r3, r7, #32
 80041d6:	4619      	mov	r1, r3
 80041d8:	4810      	ldr	r0, [pc, #64]	@ (800421c <MX_TIM4_Init+0xac>)
 80041da:	f00c fe5b 	bl	8010e94 <HAL_TIMEx_MasterConfigSynchronization>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80041e4:	f7ff fb02 	bl	80037ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e8:	2360      	movs	r3, #96	@ 0x60
 80041ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	2208      	movs	r2, #8
 80041fc:	4619      	mov	r1, r3
 80041fe:	4807      	ldr	r0, [pc, #28]	@ (800421c <MX_TIM4_Init+0xac>)
 8004200:	f00c f986 	bl	8010510 <HAL_TIM_PWM_ConfigChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800420a:	f7ff faef 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800420e:	4803      	ldr	r0, [pc, #12]	@ (800421c <MX_TIM4_Init+0xac>)
 8004210:	f000 f93c 	bl	800448c <HAL_TIM_MspPostInit>

}
 8004214:	bf00      	nop
 8004216:	3728      	adds	r7, #40	@ 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20001b00 	.word	0x20001b00
 8004220:	40000800 	.word	0x40000800

08004224 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800422a:	f107 0320 	add.w	r3, r7, #32
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	615a      	str	r2, [r3, #20]
 8004244:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004246:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <MX_TIM5_Init+0xd8>)
 8004248:	4a2d      	ldr	r2, [pc, #180]	@ (8004300 <MX_TIM5_Init+0xdc>)
 800424a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <MX_TIM5_Init+0xd8>)
 800424e:	f240 5225 	movw	r2, #1317	@ 0x525
 8004252:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004254:	4b29      	ldr	r3, [pc, #164]	@ (80042fc <MX_TIM5_Init+0xd8>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 800425a:	4b28      	ldr	r3, [pc, #160]	@ (80042fc <MX_TIM5_Init+0xd8>)
 800425c:	22ff      	movs	r2, #255	@ 0xff
 800425e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004260:	4b26      	ldr	r3, [pc, #152]	@ (80042fc <MX_TIM5_Init+0xd8>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004266:	4b25      	ldr	r3, [pc, #148]	@ (80042fc <MX_TIM5_Init+0xd8>)
 8004268:	2280      	movs	r2, #128	@ 0x80
 800426a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800426c:	4823      	ldr	r0, [pc, #140]	@ (80042fc <MX_TIM5_Init+0xd8>)
 800426e:	f00b fed4 	bl	801001a <HAL_TIM_PWM_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004278:	f7ff fab8 	bl	80037ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800427c:	2300      	movs	r3, #0
 800427e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004284:	f107 0320 	add.w	r3, r7, #32
 8004288:	4619      	mov	r1, r3
 800428a:	481c      	ldr	r0, [pc, #112]	@ (80042fc <MX_TIM5_Init+0xd8>)
 800428c:	f00c fe02 	bl	8010e94 <HAL_TIMEx_MasterConfigSynchronization>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8004296:	f7ff faa9 	bl	80037ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800429a:	2360      	movs	r3, #96	@ 0x60
 800429c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80042a2:	2302      	movs	r3, #2
 80042a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80042a6:	2304      	movs	r3, #4
 80042a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	2200      	movs	r2, #0
 80042ae:	4619      	mov	r1, r3
 80042b0:	4812      	ldr	r0, [pc, #72]	@ (80042fc <MX_TIM5_Init+0xd8>)
 80042b2:	f00c f92d 	bl	8010510 <HAL_TIM_PWM_ConfigChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80042bc:	f7ff fa96 	bl	80037ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	2204      	movs	r2, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	480d      	ldr	r0, [pc, #52]	@ (80042fc <MX_TIM5_Init+0xd8>)
 80042c8:	f00c f922 	bl	8010510 <HAL_TIM_PWM_ConfigChannel>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80042d2:	f7ff fa8b 	bl	80037ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	2208      	movs	r2, #8
 80042da:	4619      	mov	r1, r3
 80042dc:	4807      	ldr	r0, [pc, #28]	@ (80042fc <MX_TIM5_Init+0xd8>)
 80042de:	f00c f917 	bl	8010510 <HAL_TIM_PWM_ConfigChannel>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80042e8:	f7ff fa80 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80042ec:	4803      	ldr	r0, [pc, #12]	@ (80042fc <MX_TIM5_Init+0xd8>)
 80042ee:	f000 f8cd 	bl	800448c <HAL_TIM_MspPostInit>

}
 80042f2:	bf00      	nop
 80042f4:	3728      	adds	r7, #40	@ 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20001b48 	.word	0x20001b48
 8004300:	40000c00 	.word	0x40000c00

08004304 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]
 8004318:	615a      	str	r2, [r3, #20]
 800431a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800431c:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <MX_TIM10_Init+0x94>)
 800431e:	4a1f      	ldr	r2, [pc, #124]	@ (800439c <MX_TIM10_Init+0x98>)
 8004320:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004322:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <MX_TIM10_Init+0x94>)
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004328:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <MX_TIM10_Init+0x94>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800432e:	4b1a      	ldr	r3, [pc, #104]	@ (8004398 <MX_TIM10_Init+0x94>)
 8004330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004334:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004336:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <MX_TIM10_Init+0x94>)
 8004338:	2200      	movs	r2, #0
 800433a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800433c:	4b16      	ldr	r3, [pc, #88]	@ (8004398 <MX_TIM10_Init+0x94>)
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004342:	4815      	ldr	r0, [pc, #84]	@ (8004398 <MX_TIM10_Init+0x94>)
 8004344:	f00b fd50 	bl	800fde8 <HAL_TIM_Base_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800434e:	f7ff fa4d 	bl	80037ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004352:	4811      	ldr	r0, [pc, #68]	@ (8004398 <MX_TIM10_Init+0x94>)
 8004354:	f00b fe61 	bl	801001a <HAL_TIM_PWM_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800435e:	f7ff fa45 	bl	80037ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004362:	2360      	movs	r3, #96	@ 0x60
 8004364:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	2200      	movs	r2, #0
 8004376:	4619      	mov	r1, r3
 8004378:	4807      	ldr	r0, [pc, #28]	@ (8004398 <MX_TIM10_Init+0x94>)
 800437a:	f00c f8c9 	bl	8010510 <HAL_TIM_PWM_ConfigChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004384:	f7ff fa32 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004388:	4803      	ldr	r0, [pc, #12]	@ (8004398 <MX_TIM10_Init+0x94>)
 800438a:	f000 f87f 	bl	800448c <HAL_TIM_MspPostInit>

}
 800438e:	bf00      	nop
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20001b90 	.word	0x20001b90
 800439c:	40014400 	.word	0x40014400

080043a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a18      	ldr	r2, [pc, #96]	@ (8004410 <HAL_TIM_Base_MspInit+0x70>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d116      	bne.n	80043e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <HAL_TIM_Base_MspInit+0x74>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <HAL_TIM_Base_MspInit+0x74>)
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c2:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <HAL_TIM_Base_MspInit+0x74>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2105      	movs	r1, #5
 80043d2:	201d      	movs	r0, #29
 80043d4:	f006 fdcc 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043d8:	201d      	movs	r0, #29
 80043da:	f006 fde5 	bl	800afa8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80043de:	e012      	b.n	8004406 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004418 <HAL_TIM_Base_MspInit+0x78>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10d      	bne.n	8004406 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_TIM_Base_MspInit+0x74>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	4a08      	ldr	r2, [pc, #32]	@ (8004414 <HAL_TIM_Base_MspInit+0x74>)
 80043f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_TIM_Base_MspInit+0x74>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40000400 	.word	0x40000400
 8004414:	40023800 	.word	0x40023800
 8004418:	40014400 	.word	0x40014400

0800441c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a15      	ldr	r2, [pc, #84]	@ (8004480 <HAL_TIM_PWM_MspInit+0x64>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10e      	bne.n	800444c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	4b14      	ldr	r3, [pc, #80]	@ (8004484 <HAL_TIM_PWM_MspInit+0x68>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	4a13      	ldr	r2, [pc, #76]	@ (8004484 <HAL_TIM_PWM_MspInit+0x68>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	6413      	str	r3, [r2, #64]	@ 0x40
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <HAL_TIM_PWM_MspInit+0x68>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800444a:	e012      	b.n	8004472 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <HAL_TIM_PWM_MspInit+0x6c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10d      	bne.n	8004472 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <HAL_TIM_PWM_MspInit+0x68>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	4a09      	ldr	r2, [pc, #36]	@ (8004484 <HAL_TIM_PWM_MspInit+0x68>)
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	6413      	str	r3, [r2, #64]	@ 0x40
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <HAL_TIM_PWM_MspInit+0x68>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40000800 	.word	0x40000800
 8004484:	40023800 	.word	0x40023800
 8004488:	40000c00 	.word	0x40000c00

0800448c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a37      	ldr	r2, [pc, #220]	@ (8004588 <HAL_TIM_MspPostInit+0xfc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d11f      	bne.n	80044ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	4b36      	ldr	r3, [pc, #216]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	4a35      	ldr	r2, [pc, #212]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 80044b8:	f043 0308 	orr.w	r3, r3, #8
 80044bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044be:	4b33      	ldr	r3, [pc, #204]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80044ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d0:	2302      	movs	r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d8:	2300      	movs	r3, #0
 80044da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044dc:	2302      	movs	r3, #2
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	4619      	mov	r1, r3
 80044e6:	482a      	ldr	r0, [pc, #168]	@ (8004590 <HAL_TIM_MspPostInit+0x104>)
 80044e8:	f007 f988 	bl	800b7fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80044ec:	e047      	b.n	800457e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM5)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <HAL_TIM_MspPostInit+0x108>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d11f      	bne.n	8004538 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	4b23      	ldr	r3, [pc, #140]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004500:	4a22      	ldr	r2, [pc, #136]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 8004502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004506:	6313      	str	r3, [r2, #48]	@ 0x30
 8004508:	4b20      	ldr	r3, [pc, #128]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 8004514:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451a:	2302      	movs	r3, #2
 800451c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004522:	2300      	movs	r3, #0
 8004524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004526:	2302      	movs	r3, #2
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4619      	mov	r1, r3
 8004530:	4819      	ldr	r0, [pc, #100]	@ (8004598 <HAL_TIM_MspPostInit+0x10c>)
 8004532:	f007 f963 	bl	800b7fc <HAL_GPIO_Init>
}
 8004536:	e022      	b.n	800457e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a17      	ldr	r2, [pc, #92]	@ (800459c <HAL_TIM_MspPostInit+0x110>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d11d      	bne.n	800457e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	4a10      	ldr	r2, [pc, #64]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 800454c:	f043 0320 	orr.w	r3, r3, #32
 8004550:	6313      	str	r3, [r2, #48]	@ 0x30
 8004552:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <HAL_TIM_MspPostInit+0x100>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 800455e:	2340      	movs	r3, #64	@ 0x40
 8004560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800456e:	2303      	movs	r3, #3
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	4619      	mov	r1, r3
 8004578:	4809      	ldr	r0, [pc, #36]	@ (80045a0 <HAL_TIM_MspPostInit+0x114>)
 800457a:	f007 f93f 	bl	800b7fc <HAL_GPIO_Init>
}
 800457e:	bf00      	nop
 8004580:	3728      	adds	r7, #40	@ 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40000800 	.word	0x40000800
 800458c:	40023800 	.word	0x40023800
 8004590:	40020c00 	.word	0x40020c00
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40021c00 	.word	0x40021c00
 800459c:	40014400 	.word	0x40014400
 80045a0:	40021400 	.word	0x40021400

080045a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045a8:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045aa:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <MX_USART1_UART_Init+0x50>)
 80045ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045ae:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045b6:	4b0e      	ldr	r3, [pc, #56]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045c2:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045c8:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045ca:	220c      	movs	r2, #12
 80045cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ce:	4b08      	ldr	r3, [pc, #32]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045d4:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045da:	4805      	ldr	r0, [pc, #20]	@ (80045f0 <MX_USART1_UART_Init+0x4c>)
 80045dc:	f00c fcea 	bl	8010fb4 <HAL_UART_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045e6:	f7ff f901 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20001bd8 	.word	0x20001bd8
 80045f4:	40011000 	.word	0x40011000

080045f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 80045fe:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <MX_USART3_UART_Init+0x50>)
 8004600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004604:	4a11      	ldr	r2, [pc, #68]	@ (800464c <MX_USART3_UART_Init+0x54>)
 8004606:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8004608:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 800460a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800460e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004616:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800461c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800461e:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004620:	220c      	movs	r2, #12
 8004622:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004626:	2200      	movs	r2, #0
 8004628:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 800462c:	2200      	movs	r2, #0
 800462e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004630:	4804      	ldr	r0, [pc, #16]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004632:	f00c fcbf 	bl	8010fb4 <HAL_UART_Init>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 800463c:	f7ff f8d6 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20001c1c 	.word	0x20001c1c
 8004648:	40004800 	.word	0x40004800
 800464c:	000186a0 	.word	0x000186a0

08004650 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004654:	4b11      	ldr	r3, [pc, #68]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 8004656:	4a12      	ldr	r2, [pc, #72]	@ (80046a0 <MX_USART6_UART_Init+0x50>)
 8004658:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800465a:	4b10      	ldr	r3, [pc, #64]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 800465c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004660:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004662:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 8004676:	220c      	movs	r2, #12
 8004678:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800467a:	4b08      	ldr	r3, [pc, #32]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004686:	4805      	ldr	r0, [pc, #20]	@ (800469c <MX_USART6_UART_Init+0x4c>)
 8004688:	f00c fc94 	bl	8010fb4 <HAL_UART_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004692:	f7ff f8ab 	bl	80037ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20001c60 	.word	0x20001c60
 80046a0:	40011400 	.word	0x40011400

080046a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	@ 0x38
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a78      	ldr	r2, [pc, #480]	@ (80048a4 <HAL_UART_MspInit+0x200>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f040 8083 	bne.w	80047ce <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	4b76      	ldr	r3, [pc, #472]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80046ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d0:	4a75      	ldr	r2, [pc, #468]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80046d2:	f043 0310 	orr.w	r3, r3, #16
 80046d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80046d8:	4b73      	ldr	r3, [pc, #460]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	4b6f      	ldr	r3, [pc, #444]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ec:	4a6e      	ldr	r2, [pc, #440]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f4:	4b6c      	ldr	r3, [pc, #432]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	4b68      	ldr	r3, [pc, #416]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	4a67      	ldr	r2, [pc, #412]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004710:	4b65      	ldr	r3, [pc, #404]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800471c:	2380      	movs	r3, #128	@ 0x80
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004728:	2303      	movs	r3, #3
 800472a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800472c:	2307      	movs	r3, #7
 800472e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004734:	4619      	mov	r1, r3
 8004736:	485d      	ldr	r0, [pc, #372]	@ (80048ac <HAL_UART_MspInit+0x208>)
 8004738:	f007 f860 	bl	800b7fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800473c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004742:	2302      	movs	r3, #2
 8004744:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474a:	2303      	movs	r3, #3
 800474c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800474e:	2307      	movs	r3, #7
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004756:	4619      	mov	r1, r3
 8004758:	4855      	ldr	r0, [pc, #340]	@ (80048b0 <HAL_UART_MspInit+0x20c>)
 800475a:	f007 f84f 	bl	800b7fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800475e:	4b55      	ldr	r3, [pc, #340]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 8004760:	4a55      	ldr	r2, [pc, #340]	@ (80048b8 <HAL_UART_MspInit+0x214>)
 8004762:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 8004766:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800476a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800476c:	4b51      	ldr	r3, [pc, #324]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004772:	4b50      	ldr	r3, [pc, #320]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 8004774:	2200      	movs	r2, #0
 8004776:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004778:	4b4e      	ldr	r3, [pc, #312]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 800477a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800477e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004780:	4b4c      	ldr	r3, [pc, #304]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 8004782:	2200      	movs	r2, #0
 8004784:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004786:	4b4b      	ldr	r3, [pc, #300]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 8004788:	2200      	movs	r2, #0
 800478a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800478c:	4b49      	ldr	r3, [pc, #292]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 800478e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004792:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004794:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 8004796:	2200      	movs	r2, #0
 8004798:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800479a:	4b46      	ldr	r3, [pc, #280]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 800479c:	2200      	movs	r2, #0
 800479e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047a0:	4844      	ldr	r0, [pc, #272]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 80047a2:	f006 fc1d 	bl	800afe0 <HAL_DMA_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80047ac:	f7ff f81e 	bl	80037ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a40      	ldr	r2, [pc, #256]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80047b6:	4a3f      	ldr	r2, [pc, #252]	@ (80048b4 <HAL_UART_MspInit+0x210>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80047bc:	2200      	movs	r2, #0
 80047be:	2105      	movs	r1, #5
 80047c0:	2025      	movs	r0, #37	@ 0x25
 80047c2:	f006 fbd5 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047c6:	2025      	movs	r0, #37	@ 0x25
 80047c8:	f006 fbee 	bl	800afa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80047cc:	e116      	b.n	80049fc <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <HAL_UART_MspInit+0x218>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d179      	bne.n	80048cc <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	4b32      	ldr	r3, [pc, #200]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	4a31      	ldr	r2, [pc, #196]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80047e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80047e8:	4b2f      	ldr	r3, [pc, #188]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	4b2b      	ldr	r3, [pc, #172]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	4a2a      	ldr	r2, [pc, #168]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6313      	str	r3, [r2, #48]	@ 0x30
 8004804:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <HAL_UART_MspInit+0x204>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004810:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800481e:	2303      	movs	r3, #3
 8004820:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004822:	2307      	movs	r3, #7
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800482a:	4619      	mov	r1, r3
 800482c:	4824      	ldr	r0, [pc, #144]	@ (80048c0 <HAL_UART_MspInit+0x21c>)
 800482e:	f006 ffe5 	bl	800b7fc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004834:	4a24      	ldr	r2, [pc, #144]	@ (80048c8 <HAL_UART_MspInit+0x224>)
 8004836:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004838:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 800483a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800483e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004840:	4b20      	ldr	r3, [pc, #128]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004842:	2200      	movs	r2, #0
 8004844:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004848:	2200      	movs	r2, #0
 800484a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800484c:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 800484e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004852:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004854:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004856:	2200      	movs	r2, #0
 8004858:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800485a:	4b1a      	ldr	r3, [pc, #104]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 800485c:	2200      	movs	r2, #0
 800485e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004860:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004866:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004868:	4b16      	ldr	r3, [pc, #88]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 800486a:	2200      	movs	r2, #0
 800486c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800486e:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004870:	2200      	movs	r2, #0
 8004872:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004874:	4813      	ldr	r0, [pc, #76]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004876:	f006 fbb3 	bl	800afe0 <HAL_DMA_Init>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8004880:	f7fe ffb4 	bl	80037ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0f      	ldr	r2, [pc, #60]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38
 800488a:	4a0e      	ldr	r2, [pc, #56]	@ (80048c4 <HAL_UART_MspInit+0x220>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004890:	2200      	movs	r2, #0
 8004892:	2105      	movs	r1, #5
 8004894:	2027      	movs	r0, #39	@ 0x27
 8004896:	f006 fb6b 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800489a:	2027      	movs	r0, #39	@ 0x27
 800489c:	f006 fb84 	bl	800afa8 <HAL_NVIC_EnableIRQ>
}
 80048a0:	e0ac      	b.n	80049fc <HAL_UART_MspInit+0x358>
 80048a2:	bf00      	nop
 80048a4:	40011000 	.word	0x40011000
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40020400 	.word	0x40020400
 80048b0:	40020000 	.word	0x40020000
 80048b4:	20001ca4 	.word	0x20001ca4
 80048b8:	40026488 	.word	0x40026488
 80048bc:	40004800 	.word	0x40004800
 80048c0:	40020800 	.word	0x40020800
 80048c4:	20001d04 	.word	0x20001d04
 80048c8:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004a04 <HAL_UART_MspInit+0x360>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f040 8092 	bne.w	80049fc <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004a08 <HAL_UART_MspInit+0x364>)
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	4a49      	ldr	r2, [pc, #292]	@ (8004a08 <HAL_UART_MspInit+0x364>)
 80048e2:	f043 0320 	orr.w	r3, r3, #32
 80048e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80048e8:	4b47      	ldr	r3, [pc, #284]	@ (8004a08 <HAL_UART_MspInit+0x364>)
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048f4:	2300      	movs	r3, #0
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	4b43      	ldr	r3, [pc, #268]	@ (8004a08 <HAL_UART_MspInit+0x364>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fc:	4a42      	ldr	r2, [pc, #264]	@ (8004a08 <HAL_UART_MspInit+0x364>)
 80048fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004902:	6313      	str	r3, [r2, #48]	@ 0x30
 8004904:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <HAL_UART_MspInit+0x364>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004910:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	2302      	movs	r3, #2
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491e:	2303      	movs	r3, #3
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004922:	2308      	movs	r3, #8
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800492a:	4619      	mov	r1, r3
 800492c:	4837      	ldr	r0, [pc, #220]	@ (8004a0c <HAL_UART_MspInit+0x368>)
 800492e:	f006 ff65 	bl	800b7fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004932:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004934:	4a37      	ldr	r2, [pc, #220]	@ (8004a14 <HAL_UART_MspInit+0x370>)
 8004936:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004938:	4b35      	ldr	r3, [pc, #212]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 800493a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800493e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004940:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004946:	4b32      	ldr	r3, [pc, #200]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800494c:	4b30      	ldr	r3, [pc, #192]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 800494e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004952:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004954:	4b2e      	ldr	r3, [pc, #184]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004956:	2200      	movs	r2, #0
 8004958:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800495a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 800495c:	2200      	movs	r2, #0
 800495e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004960:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004966:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004968:	4b29      	ldr	r3, [pc, #164]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 800496a:	2200      	movs	r2, #0
 800496c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800496e:	4b28      	ldr	r3, [pc, #160]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004970:	2200      	movs	r2, #0
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004974:	4826      	ldr	r0, [pc, #152]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004976:	f006 fb33 	bl	800afe0 <HAL_DMA_Init>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8004980:	f7fe ff34 	bl	80037ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a22      	ldr	r2, [pc, #136]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 8004988:	639a      	str	r2, [r3, #56]	@ 0x38
 800498a:	4a21      	ldr	r2, [pc, #132]	@ (8004a10 <HAL_UART_MspInit+0x36c>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 8004992:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_UART_MspInit+0x378>)
 8004994:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004996:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 8004998:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800499c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800499e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049a0:	2240      	movs	r2, #64	@ 0x40
 80049a2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049b0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b2:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049b8:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80049be:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049c4:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ca:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80049d0:	4811      	ldr	r0, [pc, #68]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049d2:	f006 fb05 	bl	800afe0 <HAL_DMA_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80049dc:	f7fe ff06 	bl	80037ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004a18 <HAL_UART_MspInit+0x374>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2105      	movs	r1, #5
 80049f0:	2047      	movs	r0, #71	@ 0x47
 80049f2:	f006 fabd 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049f6:	2047      	movs	r0, #71	@ 0x47
 80049f8:	f006 fad6 	bl	800afa8 <HAL_NVIC_EnableIRQ>
}
 80049fc:	bf00      	nop
 80049fe:	3738      	adds	r7, #56	@ 0x38
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40011400 	.word	0x40011400
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40021800 	.word	0x40021800
 8004a10:	20001d64 	.word	0x20001d64
 8004a14:	40026428 	.word	0x40026428
 8004a18:	20001dc4 	.word	0x20001dc4
 8004a1c:	400264a0 	.word	0x400264a0

08004a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
	Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a58 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a26:	e003      	b.n	8004a30 <LoopCopyDataInit>

08004a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a28:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a2e:	3104      	adds	r1, #4

08004a30 <LoopCopyDataInit>:
    

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a30:	480b      	ldr	r0, [pc, #44]	@ (8004a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a38:	d3f6      	bcc.n	8004a28 <CopyDataInit>
  ldr  r2, =_sbss
 8004a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8004a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a3c:	e002      	b.n	8004a44 <LoopFillZerobss>

08004a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a40:	f842 3b04 	str.w	r3, [r2], #4

08004a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a44:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a48:	d3f9      	bcc.n	8004a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a4a:	f7ff fa77 	bl	8003f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a4e:	f015 f9c3 	bl	8019dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a52:	f7fe fe1f 	bl	8003694 <main>
  bx  lr    
 8004a56:	4770      	bx	lr
	Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004a58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a5c:	08020d5c 	.word	0x08020d5c
  ldr  r0, =_sdata
 8004a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a64:	200007c8 	.word	0x200007c8
  ldr  r2, =_sbss
 8004a68:	200007c8 	.word	0x200007c8
  ldr  r3, = _ebss
 8004a6c:	2000ce00 	.word	0x2000ce00

08004a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a70:	e7fe      	b.n	8004a70 <ADC_IRQHandler>
 8004a72:	0000      	movs	r0, r0
 8004a74:	0000      	movs	r0, r0
	...

08004a78 <buzzing_task>:
 4, 3, 1, 8
 };
*/

//fun
void buzzing_task(void *argument) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000.0 / (4 * TEMPO);
 8004a80:	4bb5      	ldr	r3, [pc, #724]	@ (8004d58 <buzzing_task+0x2e0>)
 8004a82:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(g_buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004a84:	4bb5      	ldr	r3, [pc, #724]	@ (8004d5c <buzzing_task+0x2e4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f107 010d 	add.w	r1, r7, #13
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	4618      	mov	r0, r3
 8004a92:	f011 feb9 	bl	8016808 <xQueueReceive>
		switch (buzzing_type) {
 8004a96:	7b7b      	ldrb	r3, [r7, #13]
 8004a98:	2b0d      	cmp	r3, #13
 8004a9a:	f200 814c 	bhi.w	8004d36 <buzzing_task+0x2be>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <buzzing_task+0x2c>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004b83 	.word	0x08004b83
 8004aac:	08004bb5 	.word	0x08004bb5
 8004ab0:	08004c39 	.word	0x08004c39
 8004ab4:	08004c07 	.word	0x08004c07
 8004ab8:	08004c71 	.word	0x08004c71
 8004abc:	08004ccb 	.word	0x08004ccb
 8004ac0:	08004cdb 	.word	0x08004cdb
 8004ac4:	08004c9d 	.word	0x08004c9d
 8004ac8:	08004cad 	.word	0x08004cad
 8004acc:	08004cbd 	.word	0x08004cbd
 8004ad0:	08004ceb 	.word	0x08004ceb
 8004ad4:	08004d17 	.word	0x08004d17
 8004ad8:	08004d27 	.word	0x08004d27
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004adc:	2300      	movs	r3, #0
 8004ade:	82fb      	strh	r3, [r7, #22]
 8004ae0:	e04b      	b.n	8004b7a <buzzing_task+0x102>
				last_wake_time = xTaskGetTickCount();
 8004ae2:	f012 fc9f 	bl	8017424 <xTaskGetTickCount>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8004aea:	8afb      	ldrh	r3, [r7, #22]
 8004aec:	4a9c      	ldr	r2, [pc, #624]	@ (8004d60 <buzzing_task+0x2e8>)
 8004aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fc fb3a 	bl	800116c <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8004af8:	8afb      	ldrh	r3, [r7, #22]
 8004afa:	4a9a      	ldr	r2, [pc, #616]	@ (8004d64 <buzzing_task+0x2ec>)
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	ed93 7a00 	vldr	s14, [r3]
 8004b04:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b10:	ee17 3a90 	vmov	r3, s15
 8004b14:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time*0.95);
 8004b16:	89fb      	ldrh	r3, [r7, #14]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fb fd03 	bl	8000524 <__aeabi_i2d>
 8004b1e:	a38a      	add	r3, pc, #552	@ (adr r3, 8004d48 <buzzing_task+0x2d0>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fd68 	bl	80005f8 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f7fc f83a 	bl	8000ba8 <__aeabi_d2uiz>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f107 0308 	add.w	r3, r7, #8
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f012 fa9d 	bl	801707c <vTaskDelayUntil>
				buzzer(0);
 8004b42:	2000      	movs	r0, #0
 8004b44:	f7fc fb12 	bl	800116c <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time*0.05);
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fb fcea 	bl	8000524 <__aeabi_i2d>
 8004b50:	a37f      	add	r3, pc, #508	@ (adr r3, 8004d50 <buzzing_task+0x2d8>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fd4f 	bl	80005f8 <__aeabi_dmul>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7fc f821 	bl	8000ba8 <__aeabi_d2uiz>
 8004b66:	4602      	mov	r2, r0
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f012 fa84 	bl	801707c <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004b74:	8afb      	ldrh	r3, [r7, #22]
 8004b76:	3301      	adds	r3, #1
 8004b78:	82fb      	strh	r3, [r7, #22]
 8004b7a:	8afb      	ldrh	r3, [r7, #22]
 8004b7c:	2b7c      	cmp	r3, #124	@ 0x7c
 8004b7e:	d9b0      	bls.n	8004ae2 <buzzing_task+0x6a>
			}
			break;
 8004b80:	e0da      	b.n	8004d38 <buzzing_task+0x2c0>
		case ok:
			last_wake_time = xTaskGetTickCount();
 8004b82:	f012 fc4f 	bl	8017424 <xTaskGetTickCount>
 8004b86:	4603      	mov	r3, r0
 8004b88:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004b8a:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004b8e:	f7fc faed 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b92:	2064      	movs	r0, #100	@ 0x64
 8004b94:	f012 faf2 	bl	801717c <vTaskDelay>
			buzzer(0);
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fc fae7 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004b9e:	2032      	movs	r0, #50	@ 0x32
 8004ba0:	f012 faec 	bl	801717c <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004ba4:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8004ba8:	f7fc fae0 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bac:	2064      	movs	r0, #100	@ 0x64
 8004bae:	f012 fae5 	bl	801717c <vTaskDelay>
			break;
 8004bb2:	e0c1      	b.n	8004d38 <buzzing_task+0x2c0>
		case not_ok:
			last_wake_time = xTaskGetTickCount();
 8004bb4:	f012 fc36 	bl	8017424 <xTaskGetTickCount>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004bbc:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004bc0:	f7fc fad4 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bc4:	2064      	movs	r0, #100	@ 0x64
 8004bc6:	f012 fad9 	bl	801717c <vTaskDelay>
			buzzer(0);
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fc face 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004bd0:	2032      	movs	r0, #50	@ 0x32
 8004bd2:	f012 fad3 	bl	801717c <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004bd6:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8004bda:	f7fc fac7 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bde:	2064      	movs	r0, #100	@ 0x64
 8004be0:	f012 facc 	bl	801717c <vTaskDelay>
			buzzer(0);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7fc fac1 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004bea:	2032      	movs	r0, #50	@ 0x32
 8004bec:	f012 fac6 	bl	801717c <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004bf0:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004bf4:	f7fc faba 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bf8:	2064      	movs	r0, #100	@ 0x64
 8004bfa:	f012 fabf 	bl	801717c <vTaskDelay>
			buzzer(0);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fc fab4 	bl	800116c <buzzer>
			break;
 8004c04:	e098      	b.n	8004d38 <buzzing_task+0x2c0>
		case control_control:
			last_wake_time = xTaskGetTickCount();
 8004c06:	f012 fc0d 	bl	8017424 <xTaskGetTickCount>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8004c0e:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8004c12:	f7fc faab 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c16:	2064      	movs	r0, #100	@ 0x64
 8004c18:	f012 fab0 	bl	801717c <vTaskDelay>
			buzzer(0);
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fc faa5 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004c22:	2032      	movs	r0, #50	@ 0x32
 8004c24:	f012 faaa 	bl	801717c <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004c28:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8004c2c:	f7fc fa9e 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c30:	2064      	movs	r0, #100	@ 0x64
 8004c32:	f012 faa3 	bl	801717c <vTaskDelay>
			break;
 8004c36:	e07f      	b.n	8004d38 <buzzing_task+0x2c0>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8004c38:	f012 fbf4 	bl	8017424 <xTaskGetTickCount>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004c40:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004c44:	f7fc fa92 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c48:	2064      	movs	r0, #100	@ 0x64
 8004c4a:	f012 fa97 	bl	801717c <vTaskDelay>
			buzzer(0);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fc fa8c 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004c54:	2032      	movs	r0, #50	@ 0x32
 8004c56:	f012 fa91 	bl	801717c <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004c5a:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004c5e:	f7fc fa85 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c62:	2064      	movs	r0, #100	@ 0x64
 8004c64:	f012 fa8a 	bl	801717c <vTaskDelay>
			buzzer(BUZZ_TIME);
 8004c68:	2064      	movs	r0, #100	@ 0x64
 8004c6a:	f7fc fa7f 	bl	800116c <buzzer>
			break;
 8004c6e:	e063      	b.n	8004d38 <buzzing_task+0x2c0>

		case control_sbc:
			buzzer(BUZZER_LOW);
 8004c70:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8004c74:	f7fc fa7a 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c78:	2064      	movs	r0, #100	@ 0x64
 8004c7a:	f012 fa7f 	bl	801717c <vTaskDelay>
			buzzer((BUZZER_HIGH+BUZZER_LOW)/2);
 8004c7e:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8004c82:	f7fc fa73 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c86:	2064      	movs	r0, #100	@ 0x64
 8004c88:	f012 fa78 	bl	801717c <vTaskDelay>
			buzzer(BUZZER_HIGH);;
 8004c8c:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004c90:	f7fc fa6c 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c94:	2064      	movs	r0, #100	@ 0x64
 8004c96:	f012 fa71 	bl	801717c <vTaskDelay>
			break;
 8004c9a:	e04d      	b.n	8004d38 <buzzing_task+0x2c0>


		case bz_debug_low:
			buzzer(DEBUG_LOW_FREQ);
 8004c9c:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8004ca0:	f7fc fa64 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004ca4:	2064      	movs	r0, #100	@ 0x64
 8004ca6:	f012 fa69 	bl	801717c <vTaskDelay>
			break;
 8004caa:	e045      	b.n	8004d38 <buzzing_task+0x2c0>

		case bz_debug_high:
			buzzer(DEBUG_HIGH_FREQ);
 8004cac:	f640 1082 	movw	r0, #2434	@ 0x982
 8004cb0:	f7fc fa5c 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cb4:	2064      	movs	r0, #100	@ 0x64
 8004cb6:	f012 fa61 	bl	801717c <vTaskDelay>
			break;
 8004cba:	e03d      	b.n	8004d38 <buzzing_task+0x2c0>

		case bz_debug_rest:
			buzzer(0);
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7fc fa55 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004cc2:	2032      	movs	r0, #50	@ 0x32
 8004cc4:	f012 fa5a 	bl	801717c <vTaskDelay>
			break;
 8004cc8:	e036      	b.n	8004d38 <buzzing_task+0x2c0>
		case bz_high:
			buzzer(BUZZER_HIGH);
 8004cca:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8004cce:	f7fc fa4d 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cd2:	2064      	movs	r0, #100	@ 0x64
 8004cd4:	f012 fa52 	bl	801717c <vTaskDelay>
			break;
 8004cd8:	e02e      	b.n	8004d38 <buzzing_task+0x2c0>
		case bz_low:
			buzzer(BUZZER_LOW);
 8004cda:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8004cde:	f7fc fa45 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004ce2:	2064      	movs	r0, #100	@ 0x64
 8004ce4:	f012 fa4a 	bl	801717c <vTaskDelay>
			break;
 8004ce8:	e026      	b.n	8004d38 <buzzing_task+0x2c0>
		case bz_debug_hi_temp:
			buzzer(DEBUG_HI_TEMP1);
 8004cea:	f44f 7077 	mov.w	r0, #988	@ 0x3dc
 8004cee:	f7fc fa3d 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004cf2:	2032      	movs	r0, #50	@ 0x32
 8004cf4:	f012 fa42 	bl	801717c <vTaskDelay>
			buzzer(DEBUG_HI_TEMP2);
 8004cf8:	f240 4017 	movw	r0, #1047	@ 0x417
 8004cfc:	f7fc fa36 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004d00:	2032      	movs	r0, #50	@ 0x32
 8004d02:	f012 fa3b 	bl	801717c <vTaskDelay>
			buzzer(DEBUG_HI_TEMP3);
 8004d06:	f240 4055 	movw	r0, #1109	@ 0x455
 8004d0a:	f7fc fa2f 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8004d0e:	2032      	movs	r0, #50	@ 0x32
 8004d10:	f012 fa34 	bl	801717c <vTaskDelay>
			break;
 8004d14:	e010      	b.n	8004d38 <buzzing_task+0x2c0>
		case bz_temp_hi:
			buzzer(DEBUG_HI_TEMP1);
 8004d16:	f44f 7077 	mov.w	r0, #988	@ 0x3dc
 8004d1a:	f7fc fa27 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d1e:	2064      	movs	r0, #100	@ 0x64
 8004d20:	f012 fa2c 	bl	801717c <vTaskDelay>
			break;
 8004d24:	e008      	b.n	8004d38 <buzzing_task+0x2c0>
		case bz_temp_low:
			buzzer(DEBUG_HI_TEMP3);
 8004d26:	f240 4055 	movw	r0, #1109	@ 0x455
 8004d2a:	f7fc fa1f 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d2e:	2064      	movs	r0, #100	@ 0x64
 8004d30:	f012 fa24 	bl	801717c <vTaskDelay>
			break;
 8004d34:	e000      	b.n	8004d38 <buzzing_task+0x2c0>
		default:
			break;
 8004d36:	bf00      	nop
		}
		buzzer(0);
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7fc fa17 	bl	800116c <buzzer>
		vTaskDelay(GAP_TIME);
 8004d3e:	2032      	movs	r0, #50	@ 0x32
 8004d40:	f012 fa1c 	bl	801717c <vTaskDelay>
		xQueueReceive(g_buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004d44:	e69e      	b.n	8004a84 <buzzing_task+0xc>
 8004d46:	bf00      	nop
 8004d48:	66666666 	.word	0x66666666
 8004d4c:	3fee6666 	.word	0x3fee6666
 8004d50:	9999999a 	.word	0x9999999a
 8004d54:	3fa99999 	.word	0x3fa99999
 8004d58:	42fa0000 	.word	0x42fa0000
 8004d5c:	200032d0 	.word	0x200032d0
 8004d60:	08020630 	.word	0x08020630
 8004d64:	0802072c 	.word	0x0802072c

08004d68 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	@ 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1f      	ldr	r2, [pc, #124]	@ (8004df4 <can_ISR+0x8c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d118      	bne.n	8004dac <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8004d7a:	210e      	movs	r1, #14
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f005 fdce 	bl	800a91e <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL
						| CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8004d82:	f107 020c 	add.w	r2, r7, #12
 8004d86:	f107 0314 	add.w	r3, r7, #20
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	481a      	ldr	r0, [pc, #104]	@ (8004df8 <can_ISR+0x90>)
 8004d8e:	f7fc fa33 	bl	80011f8 <can1_get_msg>
		convert_raw_can_data(g_can_motors, rx_msg_header.StdId, rx_buffer);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f107 020c 	add.w	r2, r7, #12
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4817      	ldr	r0, [pc, #92]	@ (8004dfc <can_ISR+0x94>)
 8004d9e:	f000 f833 	bl	8004e08 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004da2:	210e      	movs	r1, #14
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f005 fd94 	bl	800a8d2 <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8004daa:	e01e      	b.n	8004dea <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	@ (8004e00 <can_ISR+0x98>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d119      	bne.n	8004dea <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 8004db6:	2170      	movs	r1, #112	@ 0x70
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f005 fdb0 	bl	800a91e <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8004dbe:	f107 020c 	add.w	r2, r7, #12
 8004dc2:	f107 0314 	add.w	r3, r7, #20
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	480e      	ldr	r0, [pc, #56]	@ (8004e04 <can_ISR+0x9c>)
 8004dca:	f7fc fa26 	bl	800121a <can2_get_msg>
		convert_raw_can_data(g_can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f107 020c 	add.w	r2, r7, #12
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4807      	ldr	r0, [pc, #28]	@ (8004dfc <can_ISR+0x94>)
 8004dde:	f000 f813 	bl	8004e08 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004de2:	2170      	movs	r1, #112	@ 0x70
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f005 fd74 	bl	800a8d2 <HAL_CAN_ActivateNotification>
}
 8004dea:	bf00      	nop
 8004dec:	3730      	adds	r7, #48	@ 0x30
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40006400 	.word	0x40006400
 8004df8:	200008d4 	.word	0x200008d4
 8004dfc:	20001e24 	.word	0x20001e24
 8004e00:	40006800 	.word	0x40006800
 8004e04:	200008fc 	.word	0x200008fc

08004e08 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id,
		uint8_t *rx_buffer) {
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b08c      	sub	sp, #48	@ 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	460b      	mov	r3, r1
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8004e1c:	857b      	strh	r3, [r7, #42]	@ 0x2a

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24) {
 8004e1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004e20:	2b18      	cmp	r3, #24
 8004e22:	f200 817d 	bhi.w	8005120 <convert_raw_can_data+0x318>
		return;
	}
	motor_data_t *curr_motor = &can_motor_data[idnum];
 8004e26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004e28:	22bc      	movs	r2, #188	@ 0xbc
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	789b      	ldrb	r3, [r3, #2]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8172 	beq.w	8005122 <convert_raw_can_data+0x31a>
		//convert the raw data back into the respective values
		curr_motor->id = motor_id;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	897a      	ldrh	r2, [r7, #10]
 8004e42:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[1] = curr_motor->raw_data.angle[0];
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	80da      	strh	r2, [r3, #6]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	b21a      	sxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b21b      	sxth	r3, r3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b21a      	sxth	r2, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm = (rx_buffer[2] << 8) | rx_buffer[3];
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3302      	adds	r3, #2
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b21a      	sxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3303      	adds	r3, #3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	847b      	strh	r3, [r7, #34]	@ 0x22
		curr_motor->raw_data.rpm = curr_motor->raw_data.rpm * SPEED_LPF
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004e80:	811a      	strh	r2, [r3, #8]
				+ temp_rpm * (1 - SPEED_LPF);
		curr_motor->raw_data.torque = (rx_buffer[4] << 8) | rx_buffer[5];
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3304      	adds	r3, #4
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	b21a      	sxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3305      	adds	r3, #5
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b21a      	sxth	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	815a      	strh	r2, [r3, #10]
		curr_motor->raw_data.temp = (rx_buffer[6]);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	799a      	ldrb	r2, [r3, #6]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] = curr_motor->last_time[0];
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		curr_motor->last_time[0] = get_microseconds();
 8004eb0:	f7fd f980 	bl	80021b4 <get_microseconds>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

		float rds_passed = (float) (curr_motor->raw_data.angle[0]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ec2:	461a      	mov	r2, r3
				- curr_motor->raw_data.angle[1]) / 8192;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004eca:	1ad3      	subs	r3, r2, r3
		float rds_passed = (float) (curr_motor->raw_data.angle[0]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ed4:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8005138 <convert_raw_can_data+0x330>
 8004ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004edc:	edc7 7a07 	vstr	s15, [r7, #28]
		float time_diff = (float) (curr_motor->last_time[0]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
				- curr_motor->last_time[1]) / (float) (TIMER_FREQ * 60);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004eec:	1ad3      	subs	r3, r2, r3
		float time_diff = (float) (curr_motor->last_time[0]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ef6:	eddf 6a91 	vldr	s13, [pc, #580]	@ 800513c <convert_raw_can_data+0x334>
 8004efa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004efe:	edc7 7a06 	vstr	s15, [r7, #24]
		curr_motor->angle_data.hires_rpm = curr_motor->angle_data.hires_rpm
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb fb1d 	bl	8000548 <__aeabi_f2d>
				* 0.95 + (rds_passed * time_diff * 0.05);
 8004f0e:	a386      	add	r3, pc, #536	@ (adr r3, 8005128 <convert_raw_can_data+0x320>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fb70 	bl	80005f8 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	ee17 0a90 	vmov	r0, s15
 8004f30:	f7fb fb0a 	bl	8000548 <__aeabi_f2d>
 8004f34:	a37e      	add	r3, pc, #504	@ (adr r3, 8005130 <convert_raw_can_data+0x328>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb fb5d 	bl	80005f8 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7fb f9a1 	bl	800028c <__adddf3>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7fb fe49 	bl	8000be8 <__aeabi_d2f>
 8004f56:	4602      	mov	r2, r0
		curr_motor->angle_data.hires_rpm = curr_motor->angle_data.hires_rpm
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	789b      	ldrb	r3, [r3, #2]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d83b      	bhi.n	8004fe0 <convert_raw_can_data+0x1d8>
 8004f68:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <convert_raw_can_data+0x168>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004fe1 	.word	0x08004fe1
 8004f78:	08004fe1 	.word	0x08004fe1
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	08004fe1 	.word	0x08004fe1
 8004f84:	08004fe1 	.word	0x08004fe1
 8004f88:	08004fbb 	.word	0x08004fbb
 8004f8c:	08004fbb 	.word	0x08004fbb
 8004f90:	08004fbb 	.word	0x08004fbb
		case TYPE_GM6020:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	1d18      	adds	r0, r3, #4
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
					curr_motor->last_time);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	33b4      	adds	r3, #180	@ 0xb4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 f912 	bl	80051cc <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	1d1a      	adds	r2, r3, #4
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	3370      	adds	r3, #112	@ 0x70
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 f8cc 	bl	8005150 <angle_offset>
			break;
 8004fb8:	e013      	b.n	8004fe2 <convert_raw_can_data+0x1da>
//					curr_motor->last_time);
			break;
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1d18      	adds	r0, r3, #4
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	f103 0170 	add.w	r1, r3, #112	@ 0x70
					curr_motor->last_time);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	33b4      	adds	r3, #180	@ 0xb4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f000 f8ff 	bl	80051cc <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	3370      	adds	r3, #112	@ 0x70
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 f8b9 	bl	8005150 <angle_offset>
			break;
 8004fde:	e000      	b.n	8004fe2 <convert_raw_can_data+0x1da>
		default:
			break;
 8004fe0:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 8004fe6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fe8:	3301      	adds	r3, #1
 8004fea:	3b01      	subs	r3, #1
 8004fec:	2b13      	cmp	r3, #19
 8004fee:	f200 8085 	bhi.w	80050fc <convert_raw_can_data+0x2f4>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <convert_raw_can_data+0x1f0>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005071 	.word	0x08005071
 8005000:	08005085 	.word	0x08005085
 8005004:	0800505d 	.word	0x0800505d
 8005008:	080050ad 	.word	0x080050ad
 800500c:	08005099 	.word	0x08005099
 8005010:	080050c1 	.word	0x080050c1
 8005014:	080050d5 	.word	0x080050d5
 8005018:	080050fd 	.word	0x080050fd
 800501c:	080050fd 	.word	0x080050fd
 8005020:	080050fd 	.word	0x080050fd
 8005024:	080050fd 	.word	0x080050fd
 8005028:	080050fd 	.word	0x080050fd
 800502c:	080050fd 	.word	0x080050fd
 8005030:	080050fd 	.word	0x080050fd
 8005034:	080050fd 	.word	0x080050fd
 8005038:	080050fd 	.word	0x080050fd
 800503c:	080050fd 	.word	0x080050fd
 8005040:	080050fd 	.word	0x080050fd
 8005044:	080050e9 	.word	0x080050e9
#ifndef CHASSIS_MCU
		case FR_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 8005048:	4b3d      	ldr	r3, [pc, #244]	@ (8005140 <convert_raw_can_data+0x338>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f107 0214 	add.w	r2, r7, #20
 8005050:	2108      	movs	r1, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f010 ff9a 	bl	8015f8c <xEventGroupSetBitsFromISR>
 8005058:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 800505a:	e052      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case FL_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 800505c:	4b38      	ldr	r3, [pc, #224]	@ (8005140 <convert_raw_can_data+0x338>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f107 0214 	add.w	r2, r7, #20
 8005064:	2104      	movs	r1, #4
 8005066:	4618      	mov	r0, r3
 8005068:	f010 ff90 	bl	8015f8c <xEventGroupSetBitsFromISR>
 800506c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 800506e:	e048      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case BL_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8005070:	4b33      	ldr	r3, [pc, #204]	@ (8005140 <convert_raw_can_data+0x338>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f107 0214 	add.w	r2, r7, #20
 8005078:	2102      	movs	r1, #2
 800507a:	4618      	mov	r0, r3
 800507c:	f010 ff86 	bl	8015f8c <xEventGroupSetBitsFromISR>
 8005080:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8005082:	e03e      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case BR_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 8005084:	4b2e      	ldr	r3, [pc, #184]	@ (8005140 <convert_raw_can_data+0x338>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f107 0214 	add.w	r2, r7, #20
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f010 ff7c 	bl	8015f8c <xEventGroupSetBitsFromISR>
 8005094:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8005096:	e034      	b.n	8005102 <convert_raw_can_data+0x2fa>
#endif
		case LFRICTION_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8005098:	4b2a      	ldr	r3, [pc, #168]	@ (8005144 <convert_raw_can_data+0x33c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f107 0214 	add.w	r2, r7, #20
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f010 ff72 	bl	8015f8c <xEventGroupSetBitsFromISR>
 80050a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 80050aa:	e02a      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case RFRICTION_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <convert_raw_can_data+0x33c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f107 0214 	add.w	r2, r7, #20
 80050b4:	2101      	movs	r1, #1
 80050b6:	4618      	mov	r0, r3
 80050b8:	f010 ff68 	bl	8015f8c <xEventGroupSetBitsFromISR>
 80050bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 80050be:	e020      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case FEEDER_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 80050c0:	4b20      	ldr	r3, [pc, #128]	@ (8005144 <convert_raw_can_data+0x33c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f107 0214 	add.w	r2, r7, #20
 80050c8:	2104      	movs	r1, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f010 ff5e 	bl	8015f8c <xEventGroupSetBitsFromISR>
 80050d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 80050d2:	e016      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case PITCH_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 80050d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005148 <convert_raw_can_data+0x340>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f107 0214 	add.w	r2, r7, #20
 80050dc:	2101      	movs	r1, #1
 80050de:	4618      	mov	r0, r3
 80050e0:	f010 ff54 	bl	8015f8c <xEventGroupSetBitsFromISR>
 80050e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 80050e6:	e00c      	b.n	8005102 <convert_raw_can_data+0x2fa>
		case YAW_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 80050e8:	4b17      	ldr	r3, [pc, #92]	@ (8005148 <convert_raw_can_data+0x340>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f107 0214 	add.w	r2, r7, #20
 80050f0:	2102      	movs	r1, #2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f010 ff4a 	bl	8015f8c <xEventGroupSetBitsFromISR>
 80050f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 80050fa:	e002      	b.n	8005102 <convert_raw_can_data+0x2fa>
		default:
			xResult = pdFAIL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
			idnum = idnum;
			//error handler
			break;
 8005100:	bf00      	nop
		}

		//switches tasks if a higher priority task is ready.
		//required because the function is in an ISR
		if (xResult != pdFAIL) {
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00c      	beq.n	8005122 <convert_raw_can_data+0x31a>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <convert_raw_can_data+0x31a>
 800510e:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <convert_raw_can_data+0x344>)
 8005110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	e000      	b.n	8005122 <convert_raw_can_data+0x31a>
		return;
 8005120:	bf00      	nop
		}
	} else {
		//this is a useless statement so that it is possible to set a breakpoint here lol
		//error handler
	}
}
 8005122:	3730      	adds	r7, #48	@ 0x30
 8005124:	46bd      	mov	sp, r7
 8005126:	bdb0      	pop	{r4, r5, r7, pc}
 8005128:	66666666 	.word	0x66666666
 800512c:	3fee6666 	.word	0x3fee6666
 8005130:	9999999a 	.word	0x9999999a
 8005134:	3fa99999 	.word	0x3fa99999
 8005138:	46000000 	.word	0x46000000
 800513c:	4ab71b00 	.word	0x4ab71b00
 8005140:	200032b8 	.word	0x200032b8
 8005144:	200032bc 	.word	0x200032bc
 8005148:	200032b4 	.word	0x200032b4
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
//	}
//	while (angle_data->ticks < angle_data->min_ticks) {
//		angle_data->ticks += angle_data->tick_range;
//	}

	temp_ang = angle_data->ticks - angle_data->center_ang;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	60fb      	str	r3, [r7, #12]
	if (temp_ang > angle_data->max_ticks) {
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	dd05      	ble.n	8005180 <angle_offset+0x30>
		temp_ang -= angle_data->tick_range;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e009      	b.n	8005194 <angle_offset+0x44>
	} else if (temp_ang < angle_data->min_ticks) {
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	da04      	bge.n	8005194 <angle_offset+0x44>
		temp_ang += angle_data->tick_range;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
	}
//	angle_data->ticks = temp_ang;
	angle_data->adj_ang = (float) temp_ang * angle_data->ang_range
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80051a4:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ angle_data->tick_range;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	ee07 3a90 	vmov	s15, r3
 80051b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	angle_data->adj_ang = (float) temp_ang * angle_data->ang_range
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data, angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
	int16_t abs_angle_diff;
	if (angle_data->init == 0){
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d129      	bne.n	8005236 <motor_calc_odometry+0x6a>
		angle_data->ticks = motor_data->angle[0];
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	601a      	str	r2, [r3, #0]
		if (angle_data->ticks > angle_data->max_ticks) {
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	dd06      	ble.n	8005208 <motor_calc_odometry+0x3c>
			angle_data->ticks -= angle_data->tick_range;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	601a      	str	r2, [r3, #0]
		}
		if (angle_data->ticks < angle_data->min_ticks) {
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	da06      	bge.n	8005222 <motor_calc_odometry+0x56>
			angle_data->ticks += angle_data->tick_range;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	441a      	add	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	601a      	str	r2, [r3, #0]
		}
		motor_data->angle[1] = motor_data->angle[0];
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	805a      	strh	r2, [r3, #2]
		angle_data->init = 1;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return;
 8005234:	e068      	b.n	8005308 <motor_calc_odometry+0x13c>
	}
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005244:	b29b      	uxth	r3, r3
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	b29b      	uxth	r3, r3
 800524a:	82fb      	strh	r3, [r7, #22]
	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 800524c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005254:	dd05      	ble.n	8005262 <motor_calc_odometry+0x96>
		abs_angle_diff -= 8192;
 8005256:	8afb      	ldrh	r3, [r7, #22]
 8005258:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800525c:	b29b      	uxth	r3, r3
 800525e:	82fb      	strh	r3, [r7, #22]
 8005260:	e009      	b.n	8005276 <motor_calc_odometry+0xaa>
	} else if (abs_angle_diff < -4096) {
 8005262:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005266:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 800526a:	da04      	bge.n	8005276 <motor_calc_odometry+0xaa>
		abs_angle_diff += 8192;
 800526c:	8afb      	ldrh	r3, [r7, #22]
 800526e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005272:	b29b      	uxth	r3, r3
 8005274:	82fb      	strh	r3, [r7, #22]
	}


	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800527c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8005314 <motor_calc_odometry+0x148>
 8005280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005288:	ee17 3a90 	vmov	r3, s15
 800528c:	82bb      	strh	r3, [r7, #20]
	angle_data->ticks += abs_angle_diff;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005296:	441a      	add	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks > angle_data->max_ticks) {
 800529c:	e006      	b.n	80052ac <motor_calc_odometry+0xe0>
		angle_data->ticks -= angle_data->tick_range;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	1ad2      	subs	r2, r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks > angle_data->max_ticks) {
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	dcf2      	bgt.n	800529e <motor_calc_odometry+0xd2>
	}
	while (angle_data->ticks < angle_data->min_ticks) {
 80052b8:	e006      	b.n	80052c8 <motor_calc_odometry+0xfc>
		angle_data->ticks += angle_data->tick_range;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	441a      	add	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks < angle_data->min_ticks) {
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	dbf2      	blt.n	80052ba <motor_calc_odometry+0xee>
	}

	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80052e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80052ea:	8abb      	ldrh	r3, [r7, #20]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	motor_data->angle[1] = motor_data->angle[0];
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	805a      	strh	r2, [r3, #2]
}
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	46000000 	.word	0x46000000

08005318 <control_input_task>:
uint8_t g_safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;



void control_input_task(void *argument) {
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b088      	sub	sp, #32
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 8005322:	f000 f959 	bl	80055d8 <control_reset>
	chassis_yaw_pid_init();
 8005326:	f000 fb47 	bl	80059b8 <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 800532a:	4b80      	ldr	r3, [pc, #512]	@ (800552c <control_input_task+0x214>)
 800532c:	2201      	movs	r2, #1
 800532e:	731a      	strb	r2, [r3, #12]
	aimbot_pid_init();
 8005330:	f000 fee0 	bl	80060f4 <aimbot_pid_init>
	dbus_remote_start();
 8005334:	f7fc f8d8 	bl	80014e8 <dbus_remote_start>
	gear_speed.curr_gear = GEAR_DEFAULT;
 8005338:	4b7d      	ldr	r3, [pc, #500]	@ (8005530 <control_input_task+0x218>)
 800533a:	2203      	movs	r2, #3
 800533c:	701a      	strb	r2, [r3, #0]
	set_gear();
 800533e:	f000 fabf 	bl	80058c0 <set_gear>
	g_safety_toggle = 1;
 8005342:	4b7c      	ldr	r3, [pc, #496]	@ (8005534 <control_input_task+0x21c>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 8005348:	2064      	movs	r0, #100	@ 0x64
 800534a:	f011 ff17 	bl	801717c <vTaskDelay>
	uint8_t rc_check;
	while (fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50 || fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50){
 800534e:	e01a      	b.n	8005386 <control_input_task+0x6e>
		uint8_t temp_msg;
		temp_msg = not_ok;
 8005350:	2302      	movs	r3, #2
 8005352:	74fb      	strb	r3, [r7, #19]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8005354:	4b78      	ldr	r3, [pc, #480]	@ (8005538 <control_input_task+0x220>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	f107 0113 	add.w	r1, r7, #19
 800535c:	2300      	movs	r3, #0
 800535e:	2200      	movs	r2, #0
 8005360:	f011 f822 	bl	80163a8 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8005364:	21c8      	movs	r1, #200	@ 0xc8
 8005366:	2001      	movs	r0, #1
 8005368:	f012 fd2e 	bl	8017dc8 <ulTaskNotifyTake>
 800536c:	4603      	mov	r3, r0
 800536e:	76fb      	strb	r3, [r7, #27]
		HAL_UART_DMAStop(&DBUS_UART);
 8005370:	4872      	ldr	r0, [pc, #456]	@ (800553c <control_input_task+0x224>)
 8005372:	f00b feeb 	bl	801114c <HAL_UART_DMAStop>
		dbus_remote_start();
 8005376:	f7fc f8b7 	bl	80014e8 <dbus_remote_start>
		if (rc_check){
 800537a:	7efb      	ldrb	r3, [r7, #27]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <control_input_task+0x6e>
			vTaskDelay(200);
 8005380:	20c8      	movs	r0, #200	@ 0xc8
 8005382:	f011 fefb 	bl	801717c <vTaskDelay>
	while (fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50 || fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50){
 8005386:	4b6e      	ldr	r3, [pc, #440]	@ (8005540 <control_input_task+0x228>)
 8005388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	f7fb f8c9 	bl	8000524 <__aeabi_i2d>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4690      	mov	r8, r2
 8005398:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	4b68      	ldr	r3, [pc, #416]	@ (8005544 <control_input_task+0x22c>)
 80053a2:	4640      	mov	r0, r8
 80053a4:	4649      	mov	r1, r9
 80053a6:	f7fb fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1cf      	bne.n	8005350 <control_input_task+0x38>
 80053b0:	4b63      	ldr	r3, [pc, #396]	@ (8005540 <control_input_task+0x228>)
 80053b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fb f8b4 	bl	8000524 <__aeabi_i2d>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4692      	mov	sl, r2
 80053c2:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	4b5e      	ldr	r3, [pc, #376]	@ (8005544 <control_input_task+0x22c>)
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	f7fb fba2 	bl	8000b18 <__aeabi_dcmpgt>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1ba      	bne.n	8005350 <control_input_task+0x38>
 80053da:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <control_input_task+0x228>)
 80053dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb f89f 	bl	8000524 <__aeabi_i2d>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	603a      	str	r2, [r7, #0]
 80053ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	4b53      	ldr	r3, [pc, #332]	@ (8005544 <control_input_task+0x22c>)
 80053f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053fc:	f7fb fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1a4      	bne.n	8005350 <control_input_task+0x38>
 8005406:	4b4e      	ldr	r3, [pc, #312]	@ (8005540 <control_input_task+0x228>)
 8005408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fb f889 	bl	8000524 <__aeabi_i2d>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4614      	mov	r4, r2
 8005418:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	4b48      	ldr	r3, [pc, #288]	@ (8005544 <control_input_task+0x22c>)
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fb fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d18f      	bne.n	8005350 <control_input_task+0x38>
		}
	}
	g_safety_toggle = ARM_SWITCH;
 8005430:	4b40      	ldr	r3, [pc, #256]	@ (8005534 <control_input_task+0x21c>)
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]

	uint32_t last_song = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800543a:	21c8      	movs	r1, #200	@ 0xc8
 800543c:	2001      	movs	r0, #1
 800543e:	f012 fcc3 	bl	8017dc8 <ulTaskNotifyTake>
 8005442:	4603      	mov	r3, r0
 8005444:	76fb      	strb	r3, [r7, #27]
		if (rc_check) {
 8005446:	7efb      	ldrb	r3, [r7, #27]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d04c      	beq.n	80054e6 <control_input_task+0x1ce>
			status_led(1, on_led);
 800544c:	2100      	movs	r1, #0
 800544e:	2001      	movs	r0, #1
 8005450:	f7fc fdac 	bl	8001fac <status_led>
			start_time = xTaskGetTickCount();
 8005454:	f011 ffe6 	bl	8017424 <xTaskGetTickCount>
 8005458:	4603      	mov	r3, r0
 800545a:	617b      	str	r3, [r7, #20]
			if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800545c:	4b38      	ldr	r3, [pc, #224]	@ (8005540 <control_input_task+0x228>)
 800545e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d123      	bne.n	80054ae <control_input_task+0x196>

				if ((g_remote_cmd.left_switch == ge_LSW_UNSAFE) && (HAL_GetTick() - last_song > 5000)){
 8005466:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <control_input_task+0x228>)
 8005468:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10d      	bne.n	800548c <control_input_task+0x174>
 8005470:	f004 fb90 	bl	8009b94 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d904      	bls.n	800548c <control_input_task+0x174>
					uint8_t temp_msg;
					last_song = HAL_GetTick();
 8005482:	f004 fb87 	bl	8009b94 <HAL_GetTick>
 8005486:	61f8      	str	r0, [r7, #28]
					temp_msg = song;
 8005488:	2300      	movs	r3, #0
 800548a:	76bb      	strb	r3, [r7, #26]
//					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
				}
				laser_on();
 800548c:	f7fc f8d0 	bl	8001630 <laser_on>
				control_mode_change(g_remote_cmd.side_dial);
 8005490:	4b2b      	ldr	r3, [pc, #172]	@ (8005540 <control_input_task+0x228>)
 8005492:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f8d4 	bl	8005644 <control_mode_change>
				g_safety_toggle = 0;
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <control_input_task+0x21c>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 80054a2:	4b29      	ldr	r3, [pc, #164]	@ (8005548 <control_input_task+0x230>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
				control_reset();
 80054a8:	f000 f896 	bl	80055d8 <control_reset>
 80054ac:	e037      	b.n	800551e <control_input_task+0x206>
			} else {

				switch (control_mode) {
 80054ae:	4b27      	ldr	r3, [pc, #156]	@ (800554c <control_input_task+0x234>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d002      	beq.n	80054bc <control_input_task+0x1a4>
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d008      	beq.n	80054cc <control_input_task+0x1b4>
					break;
					;
#endif

				default:
					break;
 80054ba:	e00f      	b.n	80054dc <control_input_task+0x1c4>
					keyboard_gear_shifter(&gear_speed);
 80054bc:	481c      	ldr	r0, [pc, #112]	@ (8005530 <control_input_task+0x218>)
 80054be:	f000 fa9f 	bl	8005a00 <keyboard_gear_shifter>
					set_gear();
 80054c2:	f000 f9fd 	bl	80058c0 <set_gear>
					keyboard_control_input();
 80054c6:	f000 fa91 	bl	80059ec <keyboard_control_input>
					break;
 80054ca:	e007      	b.n	80054dc <control_input_task+0x1c4>
					remote_gear_shifter(&gear_speed);
 80054cc:	4818      	ldr	r0, [pc, #96]	@ (8005530 <control_input_task+0x218>)
 80054ce:	f000 fc75 	bl	8005dbc <remote_gear_shifter>
					set_gear();
 80054d2:	f000 f9f5 	bl	80058c0 <set_gear>
					remote_control_input();
 80054d6:	f000 fc67 	bl	8005da8 <remote_control_input>
					break;
 80054da:	bf00      	nop

				}
				status_led(1, off_led);
 80054dc:	2101      	movs	r1, #1
 80054de:	2001      	movs	r0, #1
 80054e0:	f7fc fd64 	bl	8001fac <status_led>
 80054e4:	e01b      	b.n	800551e <control_input_task+0x206>
			}
		} else {
			//restart remote uart
			if (HAL_GetTick() - g_remote_cmd.last_time > 100) {
 80054e6:	f004 fb55 	bl	8009b94 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <control_input_task+0x228>)
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	@ 0x64
 80054f4:	d909      	bls.n	800550a <control_input_task+0x1f2>
				HAL_UART_DMAStop(&DBUS_UART);
 80054f6:	4811      	ldr	r0, [pc, #68]	@ (800553c <control_input_task+0x224>)
 80054f8:	f00b fe28 	bl	801114c <HAL_UART_DMAStop>
				dbus_remote_start();
 80054fc:	f7fb fff4 	bl	80014e8 <dbus_remote_start>
				g_remote_cmd.last_time = HAL_GetTick();
 8005500:	f004 fb48 	bl	8009b94 <HAL_GetTick>
 8005504:	4603      	mov	r3, r0
 8005506:	4a0e      	ldr	r2, [pc, #56]	@ (8005540 <control_input_task+0x228>)
 8005508:	6213      	str	r3, [r2, #32]
			}
			kill_can();
 800550a:	f003 fd21 	bl	8008f50 <kill_can>
			control_reset();
 800550e:	f000 f863 	bl	80055d8 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <control_input_task+0x230>)
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
			g_safety_toggle = 1;
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <control_input_task+0x21c>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	2102      	movs	r1, #2
 8005524:	4618      	mov	r0, r3
 8005526:	f011 fda9 	bl	801707c <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800552a:	e786      	b.n	800543a <control_input_task+0x122>
 800552c:	20002fe4 	.word	0x20002fe4
 8005530:	20003028 	.word	0x20003028
 8005534:	20000009 	.word	0x20000009
 8005538:	200032d0 	.word	0x200032d0
 800553c:	20001c1c 	.word	0x20001c1c
 8005540:	200007f8 	.word	0x200007f8
 8005544:	40490000 	.word	0x40490000
 8005548:	2000000a 	.word	0x2000000a
 800554c:	20000008 	.word	0x20000008

08005550 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0

}
 8005554:	bf00      	nop
 8005556:	eeb0 0a67 	vmov.f32	s0, s15
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw){
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	ed87 0a03 	vstr	s0, [r7, #12]
 800556e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005572:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 8005576:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <chassis_set_ctrl+0x40>)
 8005578:	2201      	movs	r2, #1
 800557a:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 800557c:	4a09      	ldr	r2, [pc, #36]	@ (80055a4 <chassis_set_ctrl+0x40>)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 8005582:	4a08      	ldr	r2, [pc, #32]	@ (80055a4 <chassis_set_ctrl+0x40>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = -yaw;
 8005588:	edd7 7a01 	vldr	s15, [r7, #4]
 800558c:	eef1 7a67 	vneg.f32	s15, s15
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <chassis_set_ctrl+0x40>)
 8005592:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20002fc4 	.word	0x20002fc4

080055a8 <chassis_kill_ctrl>:

void chassis_kill_ctrl(){
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <chassis_kill_ctrl+0x2c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 80055b2:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <chassis_kill_ctrl+0x2c>)
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 80055ba:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <chassis_kill_ctrl+0x2c>)
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <chassis_kill_ctrl+0x2c>)
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20002fc4 	.word	0x20002fc4

080055d8 <control_reset>:
		}
	}
	return 0;
}

void control_reset() {
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 80055dc:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <control_reset+0x58>)
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 80055e4:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <control_reset+0x58>)
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 80055ec:	4b10      	ldr	r3, [pc, #64]	@ (8005630 <control_reset+0x58>)
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 80055f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005630 <control_reset+0x58>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 80055fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <control_reset+0x5c>)
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 8005602:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <control_reset+0x60>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	4a0b      	ldr	r2, [pc, #44]	@ (8005634 <control_reset+0x5c>)
 8005608:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 800560a:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <control_reset+0x5c>)
 800560c:	2200      	movs	r2, #0
 800560e:	735a      	strb	r2, [r3, #13]
	launcher_ctrl_data.firing = 0;
 8005610:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <control_reset+0x64>)
 8005612:	2200      	movs	r2, #0
 8005614:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <control_reset+0x64>)
 8005618:	2200      	movs	r2, #0
 800561a:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <control_reset+0x64>)
 800561e:	2200      	movs	r2, #0
 8005620:	715a      	strb	r2, [r3, #5]
	g_spinspin_mode = 0;
 8005622:	4b07      	ldr	r3, [pc, #28]	@ (8005640 <control_reset+0x68>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
	laser_off();
 8005628:	f7fc f80e 	bl	8001648 <laser_off>
}
 800562c:	bf00      	nop
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20002fc4 	.word	0x20002fc4
 8005634:	20002fe4 	.word	0x20002fe4
 8005638:	200031fc 	.word	0x200031fc
 800563c:	20002fdc 	.word	0x20002fdc
 8005640:	20003038 	.word	0x20003038

08005644 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	80fb      	strh	r3, [r7, #6]
//assume already in shutdown mode here
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (g_remote_cmd.left_switch == ge_LSW_CONFIG) {
 800564e:	4b6f      	ldr	r3, [pc, #444]	@ (800580c <control_mode_change+0x1c8>)
 8005650:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d133      	bne.n	80056c0 <control_mode_change+0x7c>
		if (left_dial_input > 330 || left_dial_input < -330) {
 8005658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800565c:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8005660:	dc04      	bgt.n	800566c <control_mode_change+0x28>
 8005662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005666:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 800566a:	da23      	bge.n	80056b4 <control_mode_change+0x70>
			if (HAL_GetTick() - last_trig_time > 1000) {
 800566c:	f004 fa92 	bl	8009b94 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	4b67      	ldr	r3, [pc, #412]	@ (8005810 <control_mode_change+0x1cc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800567c:	f240 80c2 	bls.w	8005804 <control_mode_change+0x1c0>
				switch (control_mode) {
 8005680:	4b64      	ldr	r3, [pc, #400]	@ (8005814 <control_mode_change+0x1d0>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	3b01      	subs	r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d80d      	bhi.n	80056a6 <control_mode_change+0x62>
				case KEYBOARD_CTRL_MODE:
				case REMOTE_CTRL_MODE:
					control_mode = SBC_CTRL_MODE;
 800568a:	4b62      	ldr	r3, [pc, #392]	@ (8005814 <control_mode_change+0x1d0>)
 800568c:	2203      	movs	r2, #3
 800568e:	701a      	strb	r2, [r3, #0]
					temp_msg = control_sbc;
 8005690:	2305      	movs	r3, #5
 8005692:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8005694:	4b60      	ldr	r3, [pc, #384]	@ (8005818 <control_mode_change+0x1d4>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	f107 010f 	add.w	r1, r7, #15
 800569c:	2300      	movs	r3, #0
 800569e:	2200      	movs	r2, #0
 80056a0:	f010 fe82 	bl	80163a8 <xQueueGenericSend>
					break;
 80056a4:	e005      	b.n	80056b2 <control_mode_change+0x6e>
				default:
					last_trig_time = HAL_GetTick();
 80056a6:	f004 fa75 	bl	8009b94 <HAL_GetTick>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a58      	ldr	r2, [pc, #352]	@ (8005810 <control_mode_change+0x1cc>)
 80056ae:	6013      	str	r3, [r2, #0]
					break;
 80056b0:	bf00      	nop
			if (HAL_GetTick() - last_trig_time > 1000) {
 80056b2:	e0a7      	b.n	8005804 <control_mode_change+0x1c0>
				}
			}
		} else {
			last_trig_time = HAL_GetTick();
 80056b4:	f004 fa6e 	bl	8009b94 <HAL_GetTick>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4a55      	ldr	r2, [pc, #340]	@ (8005810 <control_mode_change+0x1cc>)
 80056bc:	6013      	str	r3, [r2, #0]
			break;
		default:
			break;
		}
	}
}
 80056be:	e0a1      	b.n	8005804 <control_mode_change+0x1c0>
		switch (control_mode) {
 80056c0:	4b54      	ldr	r3, [pc, #336]	@ (8005814 <control_mode_change+0x1d0>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d052      	beq.n	800576e <control_mode_change+0x12a>
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	f300 8094 	bgt.w	80057f6 <control_mode_change+0x1b2>
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d002      	beq.n	80056d8 <control_mode_change+0x94>
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d026      	beq.n	8005724 <control_mode_change+0xe0>
			break;
 80056d6:	e08e      	b.n	80057f6 <control_mode_change+0x1b2>
			if (left_dial_input < -330) {
 80056d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056dc:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 80056e0:	da1a      	bge.n	8005718 <control_mode_change+0xd4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80056e2:	f004 fa57 	bl	8009b94 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b49      	ldr	r3, [pc, #292]	@ (8005810 <control_mode_change+0x1cc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056f2:	f240 8082 	bls.w	80057fa <control_mode_change+0x1b6>
					control_mode = REMOTE_CTRL_MODE;
 80056f6:	4b47      	ldr	r3, [pc, #284]	@ (8005814 <control_mode_change+0x1d0>)
 80056f8:	2202      	movs	r2, #2
 80056fa:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 80056fc:	2304      	movs	r3, #4
 80056fe:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8005700:	4b45      	ldr	r3, [pc, #276]	@ (8005818 <control_mode_change+0x1d4>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	f107 010f 	add.w	r1, r7, #15
 8005708:	2300      	movs	r3, #0
 800570a:	2200      	movs	r2, #0
 800570c:	f010 fe4c 	bl	80163a8 <xQueueGenericSend>
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005710:	4b42      	ldr	r3, [pc, #264]	@ (800581c <control_mode_change+0x1d8>)
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
			break;
 8005716:	e070      	b.n	80057fa <control_mode_change+0x1b6>
				last_trig_time = HAL_GetTick();
 8005718:	f004 fa3c 	bl	8009b94 <HAL_GetTick>
 800571c:	4603      	mov	r3, r0
 800571e:	4a3c      	ldr	r2, [pc, #240]	@ (8005810 <control_mode_change+0x1cc>)
 8005720:	6013      	str	r3, [r2, #0]
			break;
 8005722:	e06a      	b.n	80057fa <control_mode_change+0x1b6>
			if (left_dial_input > 330) {
 8005724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005728:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 800572c:	dd19      	ble.n	8005762 <control_mode_change+0x11e>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800572e:	f004 fa31 	bl	8009b94 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	4b36      	ldr	r3, [pc, #216]	@ (8005810 <control_mode_change+0x1cc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800573e:	d95e      	bls.n	80057fe <control_mode_change+0x1ba>
					control_mode = KEYBOARD_CTRL_MODE;
 8005740:	4b34      	ldr	r3, [pc, #208]	@ (8005814 <control_mode_change+0x1d0>)
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8005746:	2303      	movs	r3, #3
 8005748:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 800574a:	4b34      	ldr	r3, [pc, #208]	@ (800581c <control_mode_change+0x1d8>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8005750:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <control_mode_change+0x1d4>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	f107 010f 	add.w	r1, r7, #15
 8005758:	2300      	movs	r3, #0
 800575a:	2200      	movs	r2, #0
 800575c:	f010 fe24 	bl	80163a8 <xQueueGenericSend>
			break;
 8005760:	e04d      	b.n	80057fe <control_mode_change+0x1ba>
				last_trig_time = HAL_GetTick();
 8005762:	f004 fa17 	bl	8009b94 <HAL_GetTick>
 8005766:	4603      	mov	r3, r0
 8005768:	4a29      	ldr	r2, [pc, #164]	@ (8005810 <control_mode_change+0x1cc>)
 800576a:	6013      	str	r3, [r2, #0]
			break;
 800576c:	e047      	b.n	80057fe <control_mode_change+0x1ba>
			if (left_dial_input < -330) {
 800576e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005772:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 8005776:	da19      	bge.n	80057ac <control_mode_change+0x168>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005778:	f004 fa0c 	bl	8009b94 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <control_mode_change+0x1cc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005788:	d93b      	bls.n	8005802 <control_mode_change+0x1be>
					control_mode = REMOTE_CTRL_MODE;
 800578a:	4b22      	ldr	r3, [pc, #136]	@ (8005814 <control_mode_change+0x1d0>)
 800578c:	2202      	movs	r2, #2
 800578e:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8005790:	2304      	movs	r3, #4
 8005792:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005794:	4b21      	ldr	r3, [pc, #132]	@ (800581c <control_mode_change+0x1d8>)
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800579a:	4b1f      	ldr	r3, [pc, #124]	@ (8005818 <control_mode_change+0x1d4>)
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f107 010f 	add.w	r1, r7, #15
 80057a2:	2300      	movs	r3, #0
 80057a4:	2200      	movs	r2, #0
 80057a6:	f010 fdff 	bl	80163a8 <xQueueGenericSend>
			break;
 80057aa:	e02a      	b.n	8005802 <control_mode_change+0x1be>
			} else if (left_dial_input > 330) {
 80057ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b0:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80057b4:	dd19      	ble.n	80057ea <control_mode_change+0x1a6>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80057b6:	f004 f9ed 	bl	8009b94 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <control_mode_change+0x1cc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057c6:	d91c      	bls.n	8005802 <control_mode_change+0x1be>
					control_mode = KEYBOARD_CTRL_MODE;
 80057c8:	4b12      	ldr	r3, [pc, #72]	@ (8005814 <control_mode_change+0x1d0>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 80057ce:	2303      	movs	r3, #3
 80057d0:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 80057d2:	4b12      	ldr	r3, [pc, #72]	@ (800581c <control_mode_change+0x1d8>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80057d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <control_mode_change+0x1d4>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	f107 010f 	add.w	r1, r7, #15
 80057e0:	2300      	movs	r3, #0
 80057e2:	2200      	movs	r2, #0
 80057e4:	f010 fde0 	bl	80163a8 <xQueueGenericSend>
			break;
 80057e8:	e00b      	b.n	8005802 <control_mode_change+0x1be>
				last_trig_time = HAL_GetTick();
 80057ea:	f004 f9d3 	bl	8009b94 <HAL_GetTick>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4a07      	ldr	r2, [pc, #28]	@ (8005810 <control_mode_change+0x1cc>)
 80057f2:	6013      	str	r3, [r2, #0]
			break;
 80057f4:	e005      	b.n	8005802 <control_mode_change+0x1be>
			break;
 80057f6:	bf00      	nop
 80057f8:	e004      	b.n	8005804 <control_mode_change+0x1c0>
			break;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <control_mode_change+0x1c0>
			break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <control_mode_change+0x1c0>
			break;
 8005802:	bf00      	nop
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	200007f8 	.word	0x200007f8
 8005810:	2000303c 	.word	0x2000303c
 8005814:	20000008 	.word	0x20000008
 8005818:	200032d0 	.word	0x200032d0
 800581c:	2000000a 	.word	0x2000000a

08005820 <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	ed87 0a01 	vstr	s0, [r7, #4]
 800582a:	edc7 0a00 	vstr	s1, [r7]
//		yaw_radians -= 2 * PI;
//	}
//	while (yaw_radians < -PI) {
//		yaw_radians += 2 * PI;
//	}
	float temp_yaw = gimbal_ctrl_data.yaw + yaw_radians;
 800582e:	4b20      	ldr	r3, [pc, #128]	@ (80058b0 <gimbal_turn_ang+0x90>)
 8005830:	edd3 7a01 	vldr	s15, [r3, #4]
 8005834:	ed97 7a00 	vldr	s14, [r7]
 8005838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800583c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp_yaw = (temp_yaw > PI) ? (temp_yaw - 2 * PI) : (temp_yaw < -PI) ? (temp_yaw + 2* PI) : temp_yaw;
 8005840:	edd7 7a03 	vldr	s15, [r7, #12]
 8005844:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80058b4 <gimbal_turn_ang+0x94>
 8005848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005850:	dd06      	ble.n	8005860 <gimbal_turn_ang+0x40>
 8005852:	edd7 7a03 	vldr	s15, [r7, #12]
 8005856:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80058b8 <gimbal_turn_ang+0x98>
 800585a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800585e:	e011      	b.n	8005884 <gimbal_turn_ang+0x64>
 8005860:	edd7 7a03 	vldr	s15, [r7, #12]
 8005864:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80058bc <gimbal_turn_ang+0x9c>
 8005868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005870:	d506      	bpl.n	8005880 <gimbal_turn_ang+0x60>
 8005872:	edd7 7a03 	vldr	s15, [r7, #12]
 8005876:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80058b8 <gimbal_turn_ang+0x98>
 800587a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800587e:	e001      	b.n	8005884 <gimbal_turn_ang+0x64>
 8005880:	edd7 7a03 	vldr	s15, [r7, #12]
 8005884:	edc7 7a03 	vstr	s15, [r7, #12]
	gimbal_ctrl_data.pitch += pit_radians;
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <gimbal_turn_ang+0x90>)
 800588a:	ed93 7a00 	vldr	s14, [r3]
 800588e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005896:	4b06      	ldr	r3, [pc, #24]	@ (80058b0 <gimbal_turn_ang+0x90>)
 8005898:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = temp_yaw;
 800589c:	4a04      	ldr	r2, [pc, #16]	@ (80058b0 <gimbal_turn_ang+0x90>)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6053      	str	r3, [r2, #4]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20002fe4 	.word	0x20002fe4
 80058b4:	40490fdb 	.word	0x40490fdb
 80058b8:	40c90fdb 	.word	0x40c90fdb
 80058bc:	c0490fdb 	.word	0xc0490fdb

080058c0 <set_gear>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void set_gear() {
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
	switch (gear_speed.curr_gear) {
 80058c4:	4b34      	ldr	r3, [pc, #208]	@ (8005998 <set_gear+0xd8>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	d852      	bhi.n	8005974 <set_gear+0xb4>
 80058ce:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <set_gear+0x14>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080058ed 	.word	0x080058ed
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005919 	.word	0x08005919
 80058e0:	08005933 	.word	0x08005933
 80058e4:	08005947 	.word	0x08005947
 80058e8:	08005961 	.word	0x08005961
	case 1:
		gear_speed.spin_mult = GEAR1_YAW_MULT;
 80058ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005998 <set_gear+0xd8>)
 80058ee:	4a2b      	ldr	r2, [pc, #172]	@ (800599c <set_gear+0xdc>)
 80058f0:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR1_SPEED_MULT;
 80058f2:	4b29      	ldr	r3, [pc, #164]	@ (8005998 <set_gear+0xd8>)
 80058f4:	4a29      	ldr	r2, [pc, #164]	@ (800599c <set_gear+0xdc>)
 80058f6:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR1_ACCEL_MULT;
 80058f8:	4b27      	ldr	r3, [pc, #156]	@ (8005998 <set_gear+0xd8>)
 80058fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80058fe:	60da      	str	r2, [r3, #12]
		break;
 8005900:	e045      	b.n	800598e <set_gear+0xce>
	case 2:
		gear_speed.spin_mult = GEAR2_YAW_MULT;
 8005902:	4b25      	ldr	r3, [pc, #148]	@ (8005998 <set_gear+0xd8>)
 8005904:	4a26      	ldr	r2, [pc, #152]	@ (80059a0 <set_gear+0xe0>)
 8005906:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR2_SPEED_MULT;
 8005908:	4b23      	ldr	r3, [pc, #140]	@ (8005998 <set_gear+0xd8>)
 800590a:	4a25      	ldr	r2, [pc, #148]	@ (80059a0 <set_gear+0xe0>)
 800590c:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR2_ACCEL_MULT;
 800590e:	4b22      	ldr	r3, [pc, #136]	@ (8005998 <set_gear+0xd8>)
 8005910:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005914:	60da      	str	r2, [r3, #12]
		break;
 8005916:	e03a      	b.n	800598e <set_gear+0xce>
	case 3:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005918:	4b1f      	ldr	r3, [pc, #124]	@ (8005998 <set_gear+0xd8>)
 800591a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800591e:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005920:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <set_gear+0xd8>)
 8005922:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005926:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005928:	4b1b      	ldr	r3, [pc, #108]	@ (8005998 <set_gear+0xd8>)
 800592a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800592e:	60da      	str	r2, [r3, #12]
		break;
 8005930:	e02d      	b.n	800598e <set_gear+0xce>
	case 4:
		gear_speed.spin_mult = GEAR4_YAW_MULT;
 8005932:	4b19      	ldr	r3, [pc, #100]	@ (8005998 <set_gear+0xd8>)
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <set_gear+0xe4>)
 8005936:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR4_SPEED_MULT;
 8005938:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <set_gear+0xd8>)
 800593a:	4a1b      	ldr	r2, [pc, #108]	@ (80059a8 <set_gear+0xe8>)
 800593c:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR4_ACCEL_MULT;
 800593e:	4b16      	ldr	r3, [pc, #88]	@ (8005998 <set_gear+0xd8>)
 8005940:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <set_gear+0xe4>)
 8005942:	60da      	str	r2, [r3, #12]
		break;
 8005944:	e023      	b.n	800598e <set_gear+0xce>
	case 5:
		gear_speed.spin_mult = GEAR5_YAW_MULT;
 8005946:	4b14      	ldr	r3, [pc, #80]	@ (8005998 <set_gear+0xd8>)
 8005948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800594c:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR5_SPEED_MULT;
 800594e:	4b12      	ldr	r3, [pc, #72]	@ (8005998 <set_gear+0xd8>)
 8005950:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005954:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR5_ACCEL_MULT;
 8005956:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <set_gear+0xd8>)
 8005958:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800595c:	60da      	str	r2, [r3, #12]
		break;
 800595e:	e016      	b.n	800598e <set_gear+0xce>
	case 6:
		gear_speed.spin_mult = GEAR6_YAW_MULT;
 8005960:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <set_gear+0xd8>)
 8005962:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <set_gear+0xec>)
 8005964:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR6_SPEED_MULT;
 8005966:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <set_gear+0xd8>)
 8005968:	4a11      	ldr	r2, [pc, #68]	@ (80059b0 <set_gear+0xf0>)
 800596a:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR6_ACCEL_MULT;
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <set_gear+0xd8>)
 800596e:	4a11      	ldr	r2, [pc, #68]	@ (80059b4 <set_gear+0xf4>)
 8005970:	60da      	str	r2, [r3, #12]
		break;
 8005972:	e00c      	b.n	800598e <set_gear+0xce>
	default:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005974:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <set_gear+0xd8>)
 8005976:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800597a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <set_gear+0xd8>)
 800597e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005982:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005984:	4b04      	ldr	r3, [pc, #16]	@ (8005998 <set_gear+0xd8>)
 8005986:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800598a:	60da      	str	r2, [r3, #12]
		break;
 800598c:	bf00      	nop
	}

}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20003028 	.word	0x20003028
 800599c:	3e99999a 	.word	0x3e99999a
 80059a0:	3f19999a 	.word	0x3f19999a
 80059a4:	3f99999a 	.word	0x3f99999a
 80059a8:	3fb33333 	.word	0x3fb33333
 80059ac:	40400000 	.word	0x40400000
 80059b0:	40a00000 	.word	0x40a00000
 80059b4:	41200000 	.word	0x41200000

080059b8 <chassis_yaw_pid_init>:

void chassis_yaw_pid_init() {
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 80059bc:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <chassis_yaw_pid_init+0x2c>)
 80059be:	4a0a      	ldr	r2, [pc, #40]	@ (80059e8 <chassis_yaw_pid_init+0x30>)
 80059c0:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 80059c2:	4b08      	ldr	r3, [pc, #32]	@ (80059e4 <chassis_yaw_pid_init+0x2c>)
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 80059ca:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <chassis_yaw_pid_init+0x2c>)
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 80059d2:	4b04      	ldr	r3, [pc, #16]	@ (80059e4 <chassis_yaw_pid_init+0x2c>)
 80059d4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80059d8:	61da      	str	r2, [r3, #28]
}
 80059da:	bf00      	nop
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20002ff8 	.word	0x20002ff8
 80059e8:	3f19999a 	.word	0x3f19999a

080059ec <keyboard_control_input>:
extern int g_spinspin_mode;
static float curr_spinspin = 0;



void keyboard_control_input() {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 80059f0:	f000 f908 	bl	8005c04 <mouse_gimbal_input>
	keyboard_chassis_input();
 80059f4:	f000 f868 	bl	8005ac8 <keyboard_chassis_input>
	mouse_launcher_control_input();
 80059f8:	f000 f97a 	bl	8005cf0 <mouse_launcher_control_input>
}
 80059fc:	bf00      	nop
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <keyboard_gear_shifter>:

void keyboard_gear_shifter(speed_shift_t *gear_speed) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	if ((g_remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8005a08:	4b2c      	ldr	r3, [pc, #176]	@ (8005abc <keyboard_gear_shifter+0xbc>)
 8005a0a:	8b5b      	ldrh	r3, [r3, #26]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <keyboard_gear_shifter+0x3c>
			&& (g_remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 8005a14:	4b29      	ldr	r3, [pc, #164]	@ (8005abc <keyboard_gear_shifter+0xbc>)
 8005a16:	8b5b      	ldrh	r3, [r3, #26]
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <keyboard_gear_shifter+0x3c>
		gear_speed->curr_gear = 3;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2203      	movs	r2, #3
 8005a24:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005a26:	f004 f8b5 	bl	8009b94 <HAL_GetTick>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4a24      	ldr	r2, [pc, #144]	@ (8005ac0 <keyboard_gear_shifter+0xc0>)
 8005a2e:	6013      	str	r3, [r2, #0]
		ctrl_press_time = HAL_GetTick();
 8005a30:	f004 f8b0 	bl	8009b94 <HAL_GetTick>
 8005a34:	4603      	mov	r3, r0
 8005a36:	4a23      	ldr	r2, [pc, #140]	@ (8005ac4 <keyboard_gear_shifter+0xc4>)
 8005a38:	6013      	str	r3, [r2, #0]
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
		}
		ctrl_press_time = HAL_GetTick();
	}

}
 8005a3a:	e03a      	b.n	8005ab2 <keyboard_gear_shifter+0xb2>
	else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT) {
 8005a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005abc <keyboard_gear_shifter+0xbc>)
 8005a3e:	8b5b      	ldrh	r3, [r3, #26]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d017      	beq.n	8005a78 <keyboard_gear_shifter+0x78>
		if (HAL_GetTick() - shift_press_time > 100) {
 8005a48:	f004 f8a4 	bl	8009b94 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac0 <keyboard_gear_shifter+0xc0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b64      	cmp	r3, #100	@ 0x64
 8005a56:	d909      	bls.n	8005a6c <keyboard_gear_shifter+0x6c>
					(gear_speed->curr_gear < 5) ? gear_speed->curr_gear + 1 : 5;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	bf28      	it	cs
 8005a60:	2304      	movcs	r3, #4
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005a6c:	f004 f892 	bl	8009b94 <HAL_GetTick>
 8005a70:	4603      	mov	r3, r0
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <keyboard_gear_shifter+0xc0>)
 8005a74:	6013      	str	r3, [r2, #0]
}
 8005a76:	e01c      	b.n	8005ab2 <keyboard_gear_shifter+0xb2>
	else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_CTRL) {
 8005a78:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <keyboard_gear_shifter+0xbc>)
 8005a7a:	8b5b      	ldrh	r3, [r3, #26]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d016      	beq.n	8005ab2 <keyboard_gear_shifter+0xb2>
		if (HAL_GetTick() - ctrl_press_time > 100) {
 8005a84:	f004 f886 	bl	8009b94 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <keyboard_gear_shifter+0xc4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b64      	cmp	r3, #100	@ 0x64
 8005a92:	d909      	bls.n	8005aa8 <keyboard_gear_shifter+0xa8>
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	bf38      	it	cc
 8005a9c:	2302      	movcc	r3, #2
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	701a      	strb	r2, [r3, #0]
		ctrl_press_time = HAL_GetTick();
 8005aa8:	f004 f874 	bl	8009b94 <HAL_GetTick>
 8005aac:	4603      	mov	r3, r0
 8005aae:	4a05      	ldr	r2, [pc, #20]	@ (8005ac4 <keyboard_gear_shifter+0xc4>)
 8005ab0:	6013      	str	r3, [r2, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	200007f8 	.word	0x200007f8
 8005ac0:	20003040 	.word	0x20003040
 8005ac4:	20003044 	.word	0x20003044

08005ac8 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005ace:	4b49      	ldr	r3, [pc, #292]	@ (8005bf4 <keyboard_chassis_input+0x12c>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <keyboard_chassis_input+0x18>
 8005ad6:	4b48      	ldr	r3, [pc, #288]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005ad8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d00f      	beq.n	8005b00 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8005ae0:	4b46      	ldr	r3, [pc, #280]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 8005ae6:	4b45      	ldr	r3, [pc, #276]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8005aee:	4b43      	ldr	r3, [pc, #268]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 8005af6:	4b41      	ldr	r3, [pc, #260]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8005afe:	e075      	b.n	8005bec <keyboard_chassis_input+0x124>
		if (g_remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8005b00:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b02:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d170      	bne.n	8005bec <keyboard_chassis_input+0x124>
			chassis_ctrl_data.enabled = 1;
 8005b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_Q) {
 8005b22:	4b35      	ldr	r3, [pc, #212]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b24:	8b5b      	ldrh	r3, [r3, #26]
 8005b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <keyboard_chassis_input+0x6e>
				g_spinspin_mode = 1;
 8005b2e:	4b34      	ldr	r3, [pc, #208]	@ (8005c00 <keyboard_chassis_input+0x138>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e008      	b.n	8005b48 <keyboard_chassis_input+0x80>
			} else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_E) {
 8005b36:	4b30      	ldr	r3, [pc, #192]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b38:	8b5b      	ldrh	r3, [r3, #26]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <keyboard_chassis_input+0x80>
				g_spinspin_mode = 0;
 8005b42:	4b2f      	ldr	r3, [pc, #188]	@ (8005c00 <keyboard_chassis_input+0x138>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 8005b48:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b4a:	8b5b      	ldrh	r3, [r3, #26]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <keyboard_chassis_input+0x9c>
				forward_input += KEYBD_MAX_SPD;
 8005b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b60:	edc7 7a02 	vstr	s15, [r7, #8]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 8005b64:	4b24      	ldr	r3, [pc, #144]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b66:	8b5b      	ldrh	r3, [r3, #26]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <keyboard_chassis_input+0xb8>
				forward_input -= KEYBD_MAX_SPD;
 8005b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b7c:	edc7 7a02 	vstr	s15, [r7, #8]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 8005b80:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b82:	8b5b      	ldrh	r3, [r3, #26]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <keyboard_chassis_input+0xd4>
				horizontal_input -= KEYBD_MAX_SPD;
 8005b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b98:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 8005b9c:	4b16      	ldr	r3, [pc, #88]	@ (8005bf8 <keyboard_chassis_input+0x130>)
 8005b9e:	8b5b      	ldrh	r3, [r3, #26]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <keyboard_chassis_input+0xf0>
				horizontal_input += KEYBD_MAX_SPD;
 8005ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bb4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_spinspin_mode) {
 8005bb8:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <keyboard_chassis_input+0x138>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <keyboard_chassis_input+0x10a>
				yaw_input = g_spinspin_mode * CHASSIS_SPINSPIN_MAX;
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <keyboard_chassis_input+0x138>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8005bd0:	e003      	b.n	8005bda <keyboard_chassis_input+0x112>
				yaw_input = chassis_center_yaw();
 8005bd2:	f7ff fcbd 	bl	8005550 <chassis_center_yaw>
 8005bd6:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8005bda:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 8005be0:	4a06      	ldr	r2, [pc, #24]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 8005be6:	4a05      	ldr	r2, [pc, #20]	@ (8005bfc <keyboard_chassis_input+0x134>)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6093      	str	r3, [r2, #8]
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000009 	.word	0x20000009
 8005bf8:	200007f8 	.word	0x200007f8
 8005bfc:	20002fc4 	.word	0x20002fc4
 8005c00:	20003038 	.word	0x20003038

08005c04 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005c0a:	4b33      	ldr	r3, [pc, #204]	@ (8005cd8 <mouse_gimbal_input+0xd4>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <mouse_gimbal_input+0x18>
 8005c12:	4b32      	ldr	r3, [pc, #200]	@ (8005cdc <mouse_gimbal_input+0xd8>)
 8005c14:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d103      	bne.n	8005c24 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005c1c:	4b30      	ldr	r3, [pc, #192]	@ (8005ce0 <mouse_gimbal_input+0xdc>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	735a      	strb	r2, [r3, #13]
 8005c22:	e055      	b.n	8005cd0 <mouse_gimbal_input+0xcc>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005c24:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce0 <mouse_gimbal_input+0xdc>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	735a      	strb	r2, [r3, #13]
//		float pitch_mouse = (float) g_remote_cmd.mouse_y * MOUSE_Y_INVERT
//				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
//		float yaw_mouse = (float) g_remote_cmd.mouse_x * MOUSE_X_INVERT
//				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;

		float pitch_mouse = (float) g_remote_cmd.mouse_vert * MOUSE_Y_INVERT
 8005c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cdc <mouse_gimbal_input+0xd8>)
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8005c36:	eef1 7a67 	vneg.f32	s15, s15
 8005c3a:	ee17 3a90 	vmov	r3, s15
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fa fc82 	bl	8000548 <__aeabi_f2d>
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	4b26      	ldr	r3, [pc, #152]	@ (8005ce4 <mouse_gimbal_input+0xe0>)
 8005c4a:	f7fa fcd5 	bl	80005f8 <__aeabi_dmul>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <mouse_gimbal_input+0xe4>)
 8005c5c:	f7fa fdf6 	bl	800084c <__aeabi_ddiv>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
		float pitch_mouse = (float) g_remote_cmd.mouse_vert * MOUSE_Y_INVERT
 8005c64:	4610      	mov	r0, r2
 8005c66:	4619      	mov	r1, r3
 8005c68:	f7fa ffbe 	bl	8000be8 <__aeabi_d2f>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) g_remote_cmd.mouse_hori * MOUSE_X_INVERT
 8005c70:	4b1a      	ldr	r3, [pc, #104]	@ (8005cdc <mouse_gimbal_input+0xd8>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 8005c7c:	eef1 7a67 	vneg.f32	s15, s15
 8005c80:	ee17 3a90 	vmov	r3, s15
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fa fc5f 	bl	8000548 <__aeabi_f2d>
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <mouse_gimbal_input+0xe8>)
 8005c90:	f7fa fcb2 	bl	80005f8 <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	4b11      	ldr	r3, [pc, #68]	@ (8005ce8 <mouse_gimbal_input+0xe4>)
 8005ca2:	f7fa fdd3 	bl	800084c <__aeabi_ddiv>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
		float yaw_mouse = (float) g_remote_cmd.mouse_hori * MOUSE_X_INVERT
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	f7fa ff9b 	bl	8000be8 <__aeabi_d2f>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	603b      	str	r3, [r7, #0]
		g_remote_cmd.mouse_vert = 0;
 8005cb6:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <mouse_gimbal_input+0xd8>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	615a      	str	r2, [r3, #20]
		g_remote_cmd.mouse_hori = 0;
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <mouse_gimbal_input+0xd8>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	611a      	str	r2, [r3, #16]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 8005cc2:	edd7 0a00 	vldr	s1, [r7]
 8005cc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8005cca:	f7ff fda9 	bl	8005820 <gimbal_turn_ang>

	}
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	20000009 	.word	0x20000009
 8005cdc:	200007f8 	.word	0x200007f8
 8005ce0:	20002fe4 	.word	0x20002fe4
 8005ce4:	c0240000 	.word	0xc0240000
 8005ce8:	40e00000 	.word	0x40e00000
 8005cec:	40240000 	.word	0x40240000

08005cf0 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
	if (g_safety_toggle || launcher_safety_toggle
 8005cf4:	4b28      	ldr	r3, [pc, #160]	@ (8005d98 <mouse_launcher_control_input+0xa8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <mouse_launcher_control_input+0x28>
 8005cfc:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <mouse_launcher_control_input+0xac>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <mouse_launcher_control_input+0x28>
			|| g_remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8005d04:	4b26      	ldr	r3, [pc, #152]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d06:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d004      	beq.n	8005d18 <mouse_launcher_control_input+0x28>
			|| g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005d0e:	4b24      	ldr	r3, [pc, #144]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d10:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d016      	beq.n	8005d46 <mouse_launcher_control_input+0x56>
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005d18:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d1a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d102      	bne.n	8005d28 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 8005d22:	4b20      	ldr	r3, [pc, #128]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.firing = 0;
 8005d28:	4b1e      	ldr	r3, [pc, #120]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005d34:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d36:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d027      	beq.n	8005d8e <mouse_launcher_control_input+0x9e>
			launcher_safety_toggle = 0;
 8005d3e:	4b17      	ldr	r3, [pc, #92]	@ (8005d9c <mouse_launcher_control_input+0xac>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005d44:	e023      	b.n	8005d8e <mouse_launcher_control_input+0x9e>
		}
	} else {
		launcher_ctrl_data.enabled = 1;
 8005d46:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8005d4c:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10b      	bne.n	8005d74 <mouse_launcher_control_input+0x84>
			if (g_remote_cmd.mouse_right) {
 8005d5c:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d5e:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <mouse_launcher_control_input+0x7e>
				launcher_ctrl_data.override = 1;
 8005d66:	4b0f      	ldr	r3, [pc, #60]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	711a      	strb	r2, [r3, #4]
 8005d6c:	e002      	b.n	8005d74 <mouse_launcher_control_input+0x84>
			} else {
				launcher_ctrl_data.override = 0;
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	711a      	strb	r2, [r3, #4]
			}
		}
		if (g_remote_cmd.mouse_left) {
 8005d74:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <mouse_launcher_control_input+0xb0>)
 8005d76:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <mouse_launcher_control_input+0x96>
			launcher_ctrl_data.firing =1;
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	805a      	strh	r2, [r3, #2]

		} else {
			launcher_ctrl_data.firing = 0;
		}
	}
}
 8005d84:	e003      	b.n	8005d8e <mouse_launcher_control_input+0x9e>
			launcher_ctrl_data.firing = 0;
 8005d86:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <mouse_launcher_control_input+0xb4>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	805a      	strh	r2, [r3, #2]
}
 8005d8c:	e7ff      	b.n	8005d8e <mouse_launcher_control_input+0x9e>
 8005d8e:	bf00      	nop
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	20000009 	.word	0x20000009
 8005d9c:	2000000a 	.word	0x2000000a
 8005da0:	200007f8 	.word	0x200007f8
 8005da4:	20002fdc 	.word	0x20002fdc

08005da8 <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t g_safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 8005dac:	f000 f8f0 	bl	8005f90 <remote_gimbal_input>
	remote_chassis_input();
 8005db0:	f000 f87e 	bl	8005eb0 <remote_chassis_input>
	remote_launcher_control_input();
 8005db4:	f000 f958 	bl	8006068 <remote_launcher_control_input>
}
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <remote_gear_shifter>:
void remote_gear_shifter(speed_shift_t* gear_speed){
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if (g_remote_cmd.left_switch == ge_LSW_CONFIG) {
 8005dc4:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <remote_gear_shifter+0xe4>)
 8005dc6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d164      	bne.n	8005e98 <remote_gear_shifter+0xdc>
		if (g_remote_cmd.side_dial > 330) {
 8005dce:	4b34      	ldr	r3, [pc, #208]	@ (8005ea0 <remote_gear_shifter+0xe4>)
 8005dd0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005dd4:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8005dd8:	dd2c      	ble.n	8005e34 <remote_gear_shifter+0x78>
			if (HAL_GetTick() - shift_press_time > 100) {
 8005dda:	f003 fedb 	bl	8009b94 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b30      	ldr	r3, [pc, #192]	@ (8005ea4 <remote_gear_shifter+0xe8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	@ 0x64
 8005de8:	d91e      	bls.n	8005e28 <remote_gear_shifter+0x6c>
				gear_speed->curr_gear =
						(gear_speed->curr_gear < 6) ?
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	bf28      	it	cs
 8005df2:	2305      	movcs	r3, #5
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	701a      	strb	r2, [r3, #0]
								gear_speed->curr_gear + 1 : 6;
				temp_msg = bz_high;
 8005dfe:	2306      	movs	r3, #6
 8005e00:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
 8005e06:	e00a      	b.n	8005e1e <remote_gear_shifter+0x62>
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8005e08:	4b27      	ldr	r3, [pc, #156]	@ (8005ea8 <remote_gear_shifter+0xec>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	f107 010d 	add.w	r1, r7, #13
 8005e10:	2300      	movs	r3, #0
 8005e12:	2200      	movs	r2, #0
 8005e14:	f010 fac8 	bl	80163a8 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d3ef      	bcc.n	8005e08 <remote_gear_shifter+0x4c>
				}
			}
			shift_press_time = HAL_GetTick();
 8005e28:	f003 feb4 	bl	8009b94 <HAL_GetTick>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <remote_gear_shifter+0xe8>)
 8005e30:	6013      	str	r3, [r2, #0]
				}
			}
			ctrl_press_time = HAL_GetTick();
		}
	}
}
 8005e32:	e031      	b.n	8005e98 <remote_gear_shifter+0xdc>
		else if (g_remote_cmd.side_dial < -330) {
 8005e34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <remote_gear_shifter+0xe4>)
 8005e36:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005e3a:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 8005e3e:	da2b      	bge.n	8005e98 <remote_gear_shifter+0xdc>
			if (HAL_GetTick() - ctrl_press_time > 100) {
 8005e40:	f003 fea8 	bl	8009b94 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <remote_gear_shifter+0xf0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b64      	cmp	r3, #100	@ 0x64
 8005e4e:	d91e      	bls.n	8005e8e <remote_gear_shifter+0xd2>
						(gear_speed->curr_gear > 1) ?
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	bf38      	it	cc
 8005e58:	2302      	movcc	r3, #2
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	701a      	strb	r2, [r3, #0]
				temp_msg = bz_low;
 8005e64:	2307      	movs	r3, #7
 8005e66:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73bb      	strb	r3, [r7, #14]
 8005e6c:	e00a      	b.n	8005e84 <remote_gear_shifter+0xc8>
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <remote_gear_shifter+0xec>)
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	f107 010d 	add.w	r1, r7, #13
 8005e76:	2300      	movs	r3, #0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f010 fa95 	bl	80163a8 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	3301      	adds	r3, #1
 8005e82:	73bb      	strb	r3, [r7, #14]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	7bba      	ldrb	r2, [r7, #14]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3ef      	bcc.n	8005e6e <remote_gear_shifter+0xb2>
			ctrl_press_time = HAL_GetTick();
 8005e8e:	f003 fe81 	bl	8009b94 <HAL_GetTick>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4a05      	ldr	r2, [pc, #20]	@ (8005eac <remote_gear_shifter+0xf0>)
 8005e96:	6013      	str	r3, [r2, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200007f8 	.word	0x200007f8
 8005ea4:	20003048 	.word	0x20003048
 8005ea8:	200032d0 	.word	0x200032d0
 8005eac:	2000304c 	.word	0x2000304c

08005eb0 <remote_chassis_input>:

void remote_chassis_input() {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005eb6:	4b32      	ldr	r3, [pc, #200]	@ (8005f80 <remote_chassis_input+0xd0>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <remote_chassis_input+0x18>
 8005ebe:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <remote_chassis_input+0xd4>)
 8005ec0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d002      	beq.n	8005ece <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8005ec8:	f7ff fb6e 	bl	80055a8 <chassis_kill_ctrl>
 8005ecc:	e053      	b.n	8005f76 <remote_chassis_input+0xc6>
	} else {
			chassis_ctrl_data.enabled = 1;
 8005ece:	4b2e      	ldr	r3, [pc, #184]	@ (8005f88 <remote_chassis_input+0xd8>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
			float forward_input = 0.0;
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	607b      	str	r3, [r7, #4]
			float yaw_input = 0.0;
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]

			forward_input = (float) g_remote_cmd.left_y / RC_LIMITS;
 8005ee6:	4b27      	ldr	r3, [pc, #156]	@ (8005f84 <remote_chassis_input+0xd4>)
 8005ee8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ef4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8005f8c <remote_chassis_input+0xdc>
 8005ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005efc:	edc7 7a01 	vstr	s15, [r7, #4]
			horizontal_input = (float) g_remote_cmd.left_x / RC_LIMITS;
 8005f00:	4b20      	ldr	r3, [pc, #128]	@ (8005f84 <remote_chassis_input+0xd4>)
 8005f02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f0e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8005f8c <remote_chassis_input+0xdc>
 8005f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f16:	edc7 7a02 	vstr	s15, [r7, #8]

//			yaw_input = (float)g_remote_cmd.right_x * CHASSIS_SPINSPIN_MAX/660;
//			yaw_input = 0;
			if (g_remote_cmd.left_switch == ge_LSW_STANDBY){
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f84 <remote_chassis_input+0xd4>)
 8005f1c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d11b      	bne.n	8005f5c <remote_chassis_input+0xac>
				if (abs(g_remote_cmd.side_dial) > 50 ){
 8005f24:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <remote_chassis_input+0xd4>)
 8005f26:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfb8      	it	lt
 8005f2e:	425b      	neglt	r3, r3
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b32      	cmp	r3, #50	@ 0x32
 8005f34:	d90d      	bls.n	8005f52 <remote_chassis_input+0xa2>
					yaw_input = (float) g_remote_cmd.side_dial / RC_LIMITS;
 8005f36:	4b13      	ldr	r3, [pc, #76]	@ (8005f84 <remote_chassis_input+0xd4>)
 8005f38:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f44:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8005f8c <remote_chassis_input+0xdc>
 8005f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f4c:	edc7 7a03 	vstr	s15, [r7, #12]
 8005f50:	e008      	b.n	8005f64 <remote_chassis_input+0xb4>
				}
				else {
				yaw_input = chassis_center_yaw();
 8005f52:	f7ff fafd 	bl	8005550 <chassis_center_yaw>
 8005f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f5a:	e003      	b.n	8005f64 <remote_chassis_input+0xb4>
				}
			}
			else {
			yaw_input = chassis_center_yaw();
 8005f5c:	f7ff faf8 	bl	8005550 <chassis_center_yaw>
 8005f60:	ed87 0a03 	vstr	s0, [r7, #12]
			}
			//min value

//yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 8005f64:	ed97 1a03 	vldr	s2, [r7, #12]
 8005f68:	edd7 0a02 	vldr	s1, [r7, #8]
 8005f6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f70:	f7ff faf8 	bl	8005564 <chassis_set_ctrl>
	}
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000009 	.word	0x20000009
 8005f84:	200007f8 	.word	0x200007f8
 8005f88:	20002fc4 	.word	0x20002fc4
 8005f8c:	44250000 	.word	0x44250000

08005f90 <remote_gimbal_input>:

void remote_gimbal_input() {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005f96:	4b30      	ldr	r3, [pc, #192]	@ (8006058 <remote_gimbal_input+0xc8>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <remote_gimbal_input+0x18>
 8005f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800605c <remote_gimbal_input+0xcc>)
 8005fa0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d103      	bne.n	8005fb0 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8006060 <remote_gimbal_input+0xd0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	735a      	strb	r2, [r3, #13]
 8005fae:	e044      	b.n	800603a <remote_gimbal_input+0xaa>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006060 <remote_gimbal_input+0xd0>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	735a      	strb	r2, [r3, #13]
		float pitch_remote = ((float) g_remote_cmd.right_y / 660) * PITCH_INVERT
 8005fb6:	4b29      	ldr	r3, [pc, #164]	@ (800605c <remote_gimbal_input+0xcc>)
 8005fb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006064 <remote_gimbal_input+0xd4>
 8005fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fcc:	ee16 0a90 	vmov	r0, s13
 8005fd0:	f7fa faba 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 8005fd4:	a31c      	add	r3, pc, #112	@ (adr r3, 8006048 <remote_gimbal_input+0xb8>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa fb0d 	bl	80005f8 <__aeabi_dmul>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
		float pitch_remote = ((float) g_remote_cmd.right_y / 660) * PITCH_INVERT
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fa fdff 	bl	8000be8 <__aeabi_d2f>
 8005fea:	4603      	mov	r3, r0
 8005fec:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) g_remote_cmd.right_x / 660) * YAW_INVERT
 8005fee:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <remote_gimbal_input+0xcc>)
 8005ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ffc:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8006064 <remote_gimbal_input+0xd4>
 8006000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006004:	eef1 7a67 	vneg.f32	s15, s15
 8006008:	ee17 3a90 	vmov	r3, s15
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fa9b 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8006012:	a30f      	add	r3, pc, #60	@ (adr r3, 8006050 <remote_gimbal_input+0xc0>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa faee 	bl	80005f8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
		float yaw_remote = ((float) g_remote_cmd.right_x / 660) * YAW_INVERT
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	f7fa fde0 	bl	8000be8 <__aeabi_d2f>
 8006028:	4603      	mov	r3, r0
 800602a:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 800602c:	edd7 0a00 	vldr	s1, [r7]
 8006030:	ed97 0a01 	vldr	s0, [r7, #4]
 8006034:	f7ff fbf4 	bl	8005820 <gimbal_turn_ang>
	}
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	f3af 8000 	nop.w
 8006048:	9999999a 	.word	0x9999999a
 800604c:	bfb99999 	.word	0xbfb99999
 8006050:	9999999a 	.word	0x9999999a
 8006054:	3fb99999 	.word	0x3fb99999
 8006058:	20000009 	.word	0x20000009
 800605c:	200007f8 	.word	0x200007f8
 8006060:	20002fe4 	.word	0x20002fe4
 8006064:	44250000 	.word	0x44250000

08006068 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800606c:	4b1d      	ldr	r3, [pc, #116]	@ (80060e4 <remote_launcher_control_input+0x7c>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <remote_launcher_control_input+0x20>
 8006074:	4b1c      	ldr	r3, [pc, #112]	@ (80060e8 <remote_launcher_control_input+0x80>)
 8006076:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d004      	beq.n	8006088 <remote_launcher_control_input+0x20>
			|| g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800607e:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <remote_launcher_control_input+0x80>)
 8006080:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d016      	beq.n	80060b6 <remote_launcher_control_input+0x4e>
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8006088:	4b17      	ldr	r3, [pc, #92]	@ (80060e8 <remote_launcher_control_input+0x80>)
 800608a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d002      	beq.n	8006098 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 8006092:	4b16      	ldr	r3, [pc, #88]	@ (80060ec <remote_launcher_control_input+0x84>)
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
		}
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8006098:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <remote_launcher_control_input+0x80>)
 800609a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d102      	bne.n	80060a8 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 80060a2:	4b13      	ldr	r3, [pc, #76]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.firing = 0;
 80060a8:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 80060ae:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.firing = 0;
		}
	}

}
 80060b4:	e011      	b.n	80060da <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 80060b6:	4b0e      	ldr	r3, [pc, #56]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 80060bc:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060be:	2201      	movs	r2, #1
 80060c0:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch == ge_LSW_UNSAFE) {
 80060c2:	4b09      	ldr	r3, [pc, #36]	@ (80060e8 <remote_launcher_control_input+0x80>)
 80060c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d103      	bne.n	80060d4 <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.firing = 1;
 80060cc:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	805a      	strh	r2, [r3, #2]
}
 80060d2:	e002      	b.n	80060da <remote_launcher_control_input+0x72>
			launcher_ctrl_data.firing = 0;
 80060d4:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <remote_launcher_control_input+0x88>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	805a      	strh	r2, [r3, #2]
}
 80060da:	bf00      	nop
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20000009 	.word	0x20000009
 80060e8:	200007f8 	.word	0x200007f8
 80060ec:	2000000a 	.word	0x2000000a
 80060f0:	20002fdc 	.word	0x20002fdc

080060f4 <aimbot_pid_init>:
		sbc_new_data = 0;
		control_reset();
	}
}

void aimbot_pid_init() {
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
	aimbot_offset.y_offset = 0;
 80060f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <aimbot_pid_init+0x70>)
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
	aimbot_offset.x_offset = 0;
 8006100:	4b18      	ldr	r3, [pc, #96]	@ (8006164 <aimbot_pid_init+0x70>)
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.kp = AIMBOT_X_KP;
 8006108:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <aimbot_pid_init+0x74>)
 800610a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800610e:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.ki = AIMBOT_X_KI;
 8006110:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <aimbot_pid_init+0x74>)
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	605a      	str	r2, [r3, #4]
	aimbot_x_pid.kd = AIMBOT_X_KD;
 8006118:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <aimbot_pid_init+0x74>)
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
	aimbot_x_pid.max_out = 1.5;
 8006120:	4b11      	ldr	r3, [pc, #68]	@ (8006168 <aimbot_pid_init+0x74>)
 8006122:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8006126:	61da      	str	r2, [r3, #28]
	aimbot_x_pid.int_max = AIMBOT_KI_MAX;
 8006128:	4b0f      	ldr	r3, [pc, #60]	@ (8006168 <aimbot_pid_init+0x74>)
 800612a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800612e:	619a      	str	r2, [r3, #24]

	aimbot_y_pid.kp = AIMBOT_Y_KP;
 8006130:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <aimbot_pid_init+0x78>)
 8006132:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006136:	601a      	str	r2, [r3, #0]
	aimbot_y_pid.ki = AIMBOT_Y_KI;
 8006138:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <aimbot_pid_init+0x78>)
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	605a      	str	r2, [r3, #4]
	aimbot_y_pid.kd = AIMBOT_Y_KD;
 8006140:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <aimbot_pid_init+0x78>)
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	609a      	str	r2, [r3, #8]
	aimbot_y_pid.max_out = 1.5;
 8006148:	4b08      	ldr	r3, [pc, #32]	@ (800616c <aimbot_pid_init+0x78>)
 800614a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800614e:	61da      	str	r2, [r3, #28]
	aimbot_y_pid.int_max = AIMBOT_KI_MAX;
 8006150:	4b06      	ldr	r3, [pc, #24]	@ (800616c <aimbot_pid_init+0x78>)
 8006152:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006156:	619a      	str	r2, [r3, #24]
}
 8006158:	bf00      	nop
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	200030b0 	.word	0x200030b0
 8006168:	20003080 	.word	0x20003080
 800616c:	20003050 	.word	0x20003050

08006170 <gimbal_control_task>:
 *
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdFALSE,
 8006178:	4b1e      	ldr	r3, [pc, #120]	@ (80061f4 <gimbal_control_task+0x84>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	2300      	movs	r3, #0
 8006184:	2201      	movs	r2, #1
 8006186:	2103      	movs	r1, #3
 8006188:	f00f fd3a 	bl	8015c00 <xEventGroupWaitBits>
		portMAX_DELAY);
		start_time = xTaskGetTickCount();
 800618c:	f011 f94a 	bl	8017424 <xTaskGetTickCount>
 8006190:	4603      	mov	r3, r0
 8006192:	60fb      	str	r3, [r7, #12]
		if (gimbal_ctrl_data.enabled) {
 8006194:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <gimbal_control_task+0x88>)
 8006196:	7b5b      	ldrb	r3, [r3, #13]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d011      	beq.n	80061c0 <gimbal_control_task+0x50>
				g_gimbal_state = 1;
			}
#endif


			if (gimbal_ctrl_data.imu_mode) {
 800619c:	4b16      	ldr	r3, [pc, #88]	@ (80061f8 <gimbal_control_task+0x88>)
 800619e:	7b1b      	ldrb	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d006      	beq.n	80061b2 <gimbal_control_task+0x42>
				gimbal_control(g_can_motors + PITCH_MOTOR_ID - 1,
 80061a4:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <gimbal_control_task+0x8c>)
 80061a6:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <gimbal_control_task+0x90>)
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f82c 	bl	8006208 <gimbal_control>
 80061b0:	e00e      	b.n	80061d0 <gimbal_control_task+0x60>
						g_can_motors + YAW_MOTOR_ID - 1);
			} else {
				gimbal_angle_control(g_can_motors + PITCH_MOTOR_ID - 1,
 80061b2:	4b12      	ldr	r3, [pc, #72]	@ (80061fc <gimbal_control_task+0x8c>)
 80061b4:	4a12      	ldr	r2, [pc, #72]	@ (8006200 <gimbal_control_task+0x90>)
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f831 	bl	8006220 <gimbal_angle_control>
 80061be:	e007      	b.n	80061d0 <gimbal_control_task+0x60>
						g_can_motors + YAW_MOTOR_ID - 1);
			}
		} else {
			g_can_motors[PITCH_MOTOR_ID - 1].output = 0;
 80061c0:	4b10      	ldr	r3, [pc, #64]	@ (8006204 <gimbal_control_task+0x94>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8a3 25d4 	strh.w	r2, [r3, #1492]	@ 0x5d4
			g_can_motors[YAW_MOTOR_ID - 1].output = 0;
 80061c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <gimbal_control_task+0x94>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 2ea4 	strh.w	r2, [r3, #3748]	@ 0xea4
		}
		status_led(2, off_led);
 80061d0:	2101      	movs	r1, #1
 80061d2:	2002      	movs	r0, #2
 80061d4:	f7fb feea 	bl	8001fac <status_led>
		xEventGroupClearBits(gimbal_event_group, 0b11);
 80061d8:	4b06      	ldr	r3, [pc, #24]	@ (80061f4 <gimbal_control_task+0x84>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2103      	movs	r1, #3
 80061de:	4618      	mov	r0, r3
 80061e0:	f00f fde0 	bl	8015da4 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, GIMBAL_DELAY);
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	2102      	movs	r1, #2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f010 ff46 	bl	801707c <vTaskDelayUntil>
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdFALSE,
 80061f0:	e7c2      	b.n	8006178 <gimbal_control_task+0x8>
 80061f2:	bf00      	nop
 80061f4:	200032b4 	.word	0x200032b4
 80061f8:	20002fe4 	.word	0x20002fe4
 80061fc:	20002348 	.word	0x20002348
 8006200:	20002c18 	.word	0x20002c18
 8006204:	20001e24 	.word	0x20001e24

08006208 <gimbal_control>:
 * 			yaw_motor		Pointer to yaw motor struct
 * @note both pitch and yaw are currently on CAN2 with ID5 and 6.
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response
 */
void gimbal_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]

}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <gimbal_angle_control>:

void gimbal_angle_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]

	if (gimbal_ctrl_data.pitch > pitch_motor->angle_data.max_ang) {
 800622a:	4b43      	ldr	r3, [pc, #268]	@ (8006338 <gimbal_angle_control+0x118>)
 800622c:	ed93 7a00 	vldr	s14, [r3]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8006236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	dd04      	ble.n	800624a <gimbal_angle_control+0x2a>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.max_ang;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006246:	4a3c      	ldr	r2, [pc, #240]	@ (8006338 <gimbal_angle_control+0x118>)
 8006248:	6013      	str	r3, [r2, #0]
	}
	if (gimbal_ctrl_data.pitch < pitch_motor->angle_data.min_ang) {
 800624a:	4b3b      	ldr	r3, [pc, #236]	@ (8006338 <gimbal_angle_control+0x118>)
 800624c:	ed93 7a00 	vldr	s14, [r3]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8006256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625e:	d504      	bpl.n	800626a <gimbal_angle_control+0x4a>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.min_ang;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006266:	4a34      	ldr	r2, [pc, #208]	@ (8006338 <gimbal_angle_control+0x118>)
 8006268:	6013      	str	r3, [r2, #0]
	}

	if (gimbal_ctrl_data.yaw > yaw_motor->angle_data.max_ang) {
 800626a:	4b33      	ldr	r3, [pc, #204]	@ (8006338 <gimbal_angle_control+0x118>)
 800626c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8006276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627e:	dd04      	ble.n	800628a <gimbal_angle_control+0x6a>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.max_ang;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006286:	4a2c      	ldr	r2, [pc, #176]	@ (8006338 <gimbal_angle_control+0x118>)
 8006288:	6053      	str	r3, [r2, #4]
	}
	if (gimbal_ctrl_data.yaw < yaw_motor->angle_data.min_ang) {
 800628a:	4b2b      	ldr	r3, [pc, #172]	@ (8006338 <gimbal_angle_control+0x118>)
 800628c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8006296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629e:	d504      	bpl.n	80062aa <gimbal_angle_control+0x8a>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.min_ang;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a6:	4a24      	ldr	r2, [pc, #144]	@ (8006338 <gimbal_angle_control+0x118>)
 80062a8:	6053      	str	r3, [r2, #4]
	}
	angle_pid(gimbal_ctrl_data.pitch, pitch_motor->angle_data.adj_ang,
 80062aa:	4b23      	ldr	r3, [pc, #140]	@ (8006338 <gimbal_angle_control+0x118>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fa f94a 	bl	8000548 <__aeabi_f2d>
 80062b4:	4604      	mov	r4, r0
 80062b6:	460d      	mov	r5, r1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa f942 	bl	8000548 <__aeabi_f2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	ec43 2b11 	vmov	d1, r2, r3
 80062ce:	ec45 4b10 	vmov	d0, r4, r5
 80062d2:	f002 fcd1 	bl	8008c78 <angle_pid>
			pitch_motor);
	angle_pid(gimbal_ctrl_data.yaw, yaw_motor->angle_data.adj_ang, yaw_motor);
 80062d6:	4b18      	ldr	r3, [pc, #96]	@ (8006338 <gimbal_angle_control+0x118>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fa f934 	bl	8000548 <__aeabi_f2d>
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f92c 	bl	8000548 <__aeabi_f2d>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	ec43 2b11 	vmov	d1, r2, r3
 80062fa:	ec45 4b10 	vmov	d0, r4, r5
 80062fe:	f002 fcbb 	bl	8008c78 <angle_pid>

	pitch_motor->output = pitch_motor->rpm_pid.output;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800630c:	ee17 3a90 	vmov	r3, s15
 8006310:	b21a      	sxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
	yaw_motor->output = yaw_motor->rpm_pid.output;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800631e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006322:	ee17 3a90 	vmov	r3, s15
 8006326:	b21a      	sxth	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bdb0      	pop	{r4, r5, r7, pc}
 8006336:	bf00      	nop
 8006338:	20002fe4 	.word	0x20002fe4

0800633c <hud_task>:
ref_inter_robot_data_t graphic_header;
graphic_data_struct_t graphic_data;
ref_frame_header_t send_header;
uint8_t char_buffer[30];

void hud_task(void *argument) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

	enum drawings {
		spinspin, gearing, robot_state, motor_fault, refresh

	};
	while (ref_robot_data.robot_id == 0) {
 8006344:	e002      	b.n	800634c <hud_task+0x10>
		vTaskDelay(10);
 8006346:	200a      	movs	r0, #10
 8006348:	f010 ff18 	bl	801717c <vTaskDelay>
	while (ref_robot_data.robot_id == 0) {
 800634c:	4b69      	ldr	r3, [pc, #420]	@ (80064f4 <hud_task+0x1b8>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f8      	beq.n	8006346 <hud_task+0xa>
	}
	uint32_t refresh_timer = HAL_GetTick();
 8006354:	f003 fc1e 	bl	8009b94 <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

	uint8_t draw_state = spinspin;
 800635a:	2300      	movs	r3, #0
 800635c:	72fb      	strb	r3, [r7, #11]
	//draw all images
	vTaskDelay(1000);
 800635e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006362:	f010 ff0b 	bl	801717c <vTaskDelay>
	clear_hud();
 8006366:	f000 fb29 	bl	80069bc <clear_hud>
	vTaskDelay(150);
 800636a:	2096      	movs	r0, #150	@ 0x96
 800636c:	f010 ff06 	bl	801717c <vTaskDelay>
	draw_spinspin(0);
 8006370:	2000      	movs	r0, #0
 8006372:	f000 f8c3 	bl	80064fc <draw_spinspin>
	vTaskDelay(150);
 8006376:	2096      	movs	r0, #150	@ 0x96
 8006378:	f010 ff00 	bl	801717c <vTaskDelay>
	draw_gearing(0);
 800637c:	2000      	movs	r0, #0
 800637e:	f000 f9f5 	bl	800676c <draw_gearing>
	vTaskDelay(150);
 8006382:	2096      	movs	r0, #150	@ 0x96
 8006384:	f010 fefa 	bl	801717c <vTaskDelay>
	while (1) {
		if (HAL_GetTick() - refresh_timer > 5000){
 8006388:	f003 fc04 	bl	8009b94 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006396:	4293      	cmp	r3, r2
 8006398:	d904      	bls.n	80063a4 <hud_task+0x68>
			draw_state = refresh;
 800639a:	2304      	movs	r3, #4
 800639c:	72fb      	strb	r3, [r7, #11]
			refresh_timer = HAL_GetTick();
 800639e:	f003 fbf9 	bl	8009b94 <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]
		}
		switch (ref_robot_data.robot_id) {
 80063a4:	4b53      	ldr	r3, [pc, #332]	@ (80064f4 <hud_task+0x1b8>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	dc27      	bgt.n	80063fc <hud_task+0xc0>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dc13      	bgt.n	80063d8 <hud_task+0x9c>
 80063b0:	e065      	b.n	800647e <hud_task+0x142>
 80063b2:	3b65      	subs	r3, #101	@ 0x65
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d862      	bhi.n	800647e <hud_task+0x142>
 80063b8:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <hud_task+0x84>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	08006443 	.word	0x08006443
 80063c4:	0800644d 	.word	0x0800644d
 80063c8:	08006457 	.word	0x08006457
 80063cc:	08006461 	.word	0x08006461
 80063d0:	0800646b 	.word	0x0800646b
 80063d4:	08006475 	.word	0x08006475
 80063d8:	3b01      	subs	r3, #1
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d84f      	bhi.n	800647e <hud_task+0x142>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <hud_task+0xa8>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006407 	.word	0x08006407
 80063e8:	08006411 	.word	0x08006411
 80063ec:	0800641b 	.word	0x0800641b
 80063f0:	08006425 	.word	0x08006425
 80063f4:	0800642f 	.word	0x0800642f
 80063f8:	08006439 	.word	0x08006439
 80063fc:	2b6a      	cmp	r3, #106	@ 0x6a
 80063fe:	dc3e      	bgt.n	800647e <hud_task+0x142>
 8006400:	2b65      	cmp	r3, #101	@ 0x65
 8006402:	dad6      	bge.n	80063b2 <hud_task+0x76>
 8006404:	e03b      	b.n	800647e <hud_task+0x142>
		case 1:
			g_client_id = 0x101;
 8006406:	4b3c      	ldr	r3, [pc, #240]	@ (80064f8 <hud_task+0x1bc>)
 8006408:	f240 1201 	movw	r2, #257	@ 0x101
 800640c:	801a      	strh	r2, [r3, #0]
			break;
 800640e:	e03a      	b.n	8006486 <hud_task+0x14a>
		case 2:
			g_client_id = 0x102;
 8006410:	4b39      	ldr	r3, [pc, #228]	@ (80064f8 <hud_task+0x1bc>)
 8006412:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006416:	801a      	strh	r2, [r3, #0]
			break;
 8006418:	e035      	b.n	8006486 <hud_task+0x14a>
		case 3:
			g_client_id = 0x103;
 800641a:	4b37      	ldr	r3, [pc, #220]	@ (80064f8 <hud_task+0x1bc>)
 800641c:	f240 1203 	movw	r2, #259	@ 0x103
 8006420:	801a      	strh	r2, [r3, #0]
			break;
 8006422:	e030      	b.n	8006486 <hud_task+0x14a>
		case 4:
			g_client_id = 0x104;
 8006424:	4b34      	ldr	r3, [pc, #208]	@ (80064f8 <hud_task+0x1bc>)
 8006426:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800642a:	801a      	strh	r2, [r3, #0]
			break;
 800642c:	e02b      	b.n	8006486 <hud_task+0x14a>
		case 5:
			g_client_id = 0x105;
 800642e:	4b32      	ldr	r3, [pc, #200]	@ (80064f8 <hud_task+0x1bc>)
 8006430:	f240 1205 	movw	r2, #261	@ 0x105
 8006434:	801a      	strh	r2, [r3, #0]
			break;
 8006436:	e026      	b.n	8006486 <hud_task+0x14a>
		case 6:
			g_client_id = 0x106;
 8006438:	4b2f      	ldr	r3, [pc, #188]	@ (80064f8 <hud_task+0x1bc>)
 800643a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800643e:	801a      	strh	r2, [r3, #0]
			break;
 8006440:	e021      	b.n	8006486 <hud_task+0x14a>

		case 101:
			g_client_id = 0x165;
 8006442:	4b2d      	ldr	r3, [pc, #180]	@ (80064f8 <hud_task+0x1bc>)
 8006444:	f240 1265 	movw	r2, #357	@ 0x165
 8006448:	801a      	strh	r2, [r3, #0]
			break;
 800644a:	e01c      	b.n	8006486 <hud_task+0x14a>
		case 102:
			g_client_id = 0x166;
 800644c:	4b2a      	ldr	r3, [pc, #168]	@ (80064f8 <hud_task+0x1bc>)
 800644e:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8006452:	801a      	strh	r2, [r3, #0]
			break;
 8006454:	e017      	b.n	8006486 <hud_task+0x14a>
		case 103:
			g_client_id = 0x167;
 8006456:	4b28      	ldr	r3, [pc, #160]	@ (80064f8 <hud_task+0x1bc>)
 8006458:	f240 1267 	movw	r2, #359	@ 0x167
 800645c:	801a      	strh	r2, [r3, #0]
			break;
 800645e:	e012      	b.n	8006486 <hud_task+0x14a>
		case 104:
			g_client_id = 0x168;
 8006460:	4b25      	ldr	r3, [pc, #148]	@ (80064f8 <hud_task+0x1bc>)
 8006462:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8006466:	801a      	strh	r2, [r3, #0]
			break;
 8006468:	e00d      	b.n	8006486 <hud_task+0x14a>
		case 105:
			g_client_id = 0x169;
 800646a:	4b23      	ldr	r3, [pc, #140]	@ (80064f8 <hud_task+0x1bc>)
 800646c:	f240 1269 	movw	r2, #361	@ 0x169
 8006470:	801a      	strh	r2, [r3, #0]
			break;
 8006472:	e008      	b.n	8006486 <hud_task+0x14a>
		case 106:
			g_client_id = 0x16A;
 8006474:	4b20      	ldr	r3, [pc, #128]	@ (80064f8 <hud_task+0x1bc>)
 8006476:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800647a:	801a      	strh	r2, [r3, #0]
			break;
 800647c:	e003      	b.n	8006486 <hud_task+0x14a>
		default:
			g_client_id = 0;
 800647e:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <hud_task+0x1bc>)
 8006480:	2200      	movs	r2, #0
 8006482:	801a      	strh	r2, [r3, #0]
			break;
 8006484:	bf00      	nop

		}



		switch (draw_state) {
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d82d      	bhi.n	80064e8 <hud_task+0x1ac>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <hud_task+0x158>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a9 	.word	0x080064a9
 8006498:	080064b5 	.word	0x080064b5
 800649c:	080064e9 	.word	0x080064e9
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	080064c1 	.word	0x080064c1
		case spinspin:
			draw_spinspin(1);
 80064a8:	2001      	movs	r0, #1
 80064aa:	f000 f827 	bl	80064fc <draw_spinspin>
			draw_state = gearing;
 80064ae:	2301      	movs	r3, #1
 80064b0:	72fb      	strb	r3, [r7, #11]
			break;
 80064b2:	e01a      	b.n	80064ea <hud_task+0x1ae>
		case gearing:
			draw_gearing(1);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f000 f959 	bl	800676c <draw_gearing>
			draw_state = spinspin;
 80064ba:	2300      	movs	r3, #0
 80064bc:	72fb      	strb	r3, [r7, #11]
			break;
 80064be:	e014      	b.n	80064ea <hud_task+0x1ae>
		case robot_state:
			break;
		case motor_fault:
			break;
		case refresh:
			clear_hud();
 80064c0:	f000 fa7c 	bl	80069bc <clear_hud>
			vTaskDelay(150);
 80064c4:	2096      	movs	r0, #150	@ 0x96
 80064c6:	f010 fe59 	bl	801717c <vTaskDelay>
			draw_spinspin(0);
 80064ca:	2000      	movs	r0, #0
 80064cc:	f000 f816 	bl	80064fc <draw_spinspin>
			vTaskDelay(150);
 80064d0:	2096      	movs	r0, #150	@ 0x96
 80064d2:	f010 fe53 	bl	801717c <vTaskDelay>
			draw_gearing(0);
 80064d6:	2000      	movs	r0, #0
 80064d8:	f000 f948 	bl	800676c <draw_gearing>
			vTaskDelay(150);
 80064dc:	2096      	movs	r0, #150	@ 0x96
 80064de:	f010 fe4d 	bl	801717c <vTaskDelay>
			draw_state = spinspin;
 80064e2:	2300      	movs	r3, #0
 80064e4:	72fb      	strb	r3, [r7, #11]
			break;
 80064e6:	e000      	b.n	80064ea <hud_task+0x1ae>
		default:
			break;
 80064e8:	bf00      	nop
		}
		vTaskDelay(150);
 80064ea:	2096      	movs	r0, #150	@ 0x96
 80064ec:	f010 fe46 	bl	801717c <vTaskDelay>
		if (HAL_GetTick() - refresh_timer > 5000){
 80064f0:	e74a      	b.n	8006388 <hud_task+0x4c>
 80064f2:	bf00      	nop
 80064f4:	200033cc 	.word	0x200033cc
 80064f8:	200030b8 	.word	0x200030b8

080064fc <draw_spinspin>:
//	else if (&buffer_size > HUD_BUFFER_SIZE){
//		return num_obj;
//	}
}

void draw_spinspin(uint8_t modify) {
 80064fc:	b590      	push	{r4, r7, lr}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]
	uint8_t char_len = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
	curr_pos = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
	if (g_spinspin_mode == 0) {
 8006512:	4b8a      	ldr	r3, [pc, #552]	@ (800673c <draw_spinspin+0x240>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <draw_spinspin+0x3a>
		graphic_data.color = 4; //orange
 800651a:	4a89      	ldr	r2, [pc, #548]	@ (8006740 <draw_spinspin+0x244>)
 800651c:	7913      	ldrb	r3, [r2, #4]
 800651e:	2104      	movs	r1, #4
 8006520:	f361 0385 	bfi	r3, r1, #2, #4
 8006524:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN OFF");
 8006526:	4a87      	ldr	r2, [pc, #540]	@ (8006744 <draw_spinspin+0x248>)
 8006528:	211e      	movs	r1, #30
 800652a:	4887      	ldr	r0, [pc, #540]	@ (8006748 <draw_spinspin+0x24c>)
 800652c:	f013 fb5c 	bl	8019be8 <snprintf>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
 8006534:	e00c      	b.n	8006550 <draw_spinspin+0x54>
	} else {
		graphic_data.color = 3; //orange
 8006536:	4a82      	ldr	r2, [pc, #520]	@ (8006740 <draw_spinspin+0x244>)
 8006538:	7913      	ldrb	r3, [r2, #4]
 800653a:	2103      	movs	r1, #3
 800653c:	f361 0385 	bfi	r3, r1, #2, #4
 8006540:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN ON");
 8006542:	4a82      	ldr	r2, [pc, #520]	@ (800674c <draw_spinspin+0x250>)
 8006544:	211e      	movs	r1, #30
 8006546:	4880      	ldr	r0, [pc, #512]	@ (8006748 <draw_spinspin+0x24c>)
 8006548:	f013 fb4e 	bl	8019be8 <snprintf>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
	}
	send_header.start_frame = 0xA5;
 8006550:	4b7f      	ldr	r3, [pc, #508]	@ (8006750 <draw_spinspin+0x254>)
 8006552:	22a5      	movs	r2, #165	@ 0xa5
 8006554:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8006556:	4b7e      	ldr	r3, [pc, #504]	@ (8006750 <draw_spinspin+0x254>)
 8006558:	2200      	movs	r2, #0
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	715a      	strb	r2, [r3, #5]
 8006560:	2200      	movs	r2, #0
 8006562:	f042 0203 	orr.w	r2, r2, #3
 8006566:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8006568:	4b7a      	ldr	r3, [pc, #488]	@ (8006754 <draw_spinspin+0x258>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	b2d1      	uxtb	r1, r2
 8006570:	4a78      	ldr	r2, [pc, #480]	@ (8006754 <draw_spinspin+0x258>)
 8006572:	7011      	strb	r1, [r2, #0]
 8006574:	4a76      	ldr	r2, [pc, #472]	@ (8006750 <draw_spinspin+0x254>)
 8006576:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	b29b      	uxth	r3, r3
 800657c:	3315      	adds	r3, #21
 800657e:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 8006580:	4b73      	ldr	r3, [pc, #460]	@ (8006750 <draw_spinspin+0x254>)
 8006582:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8006586:	4b73      	ldr	r3, [pc, #460]	@ (8006754 <draw_spinspin+0x258>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	b2d1      	uxtb	r1, r2
 800658e:	4a71      	ldr	r2, [pc, #452]	@ (8006754 <draw_spinspin+0x258>)
 8006590:	7011      	strb	r1, [r2, #0]
 8006592:	4a6f      	ldr	r2, [pc, #444]	@ (8006750 <draw_spinspin+0x254>)
 8006594:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4a6f      	ldr	r2, [pc, #444]	@ (8006758 <draw_spinspin+0x25c>)
 800659a:	4413      	add	r3, r2
 800659c:	4a6c      	ldr	r2, [pc, #432]	@ (8006750 <draw_spinspin+0x254>)
 800659e:	6810      	ldr	r0, [r2, #0]
 80065a0:	6018      	str	r0, [r3, #0]
 80065a2:	8891      	ldrh	r1, [r2, #4]
 80065a4:	7992      	ldrb	r2, [r2, #6]
 80065a6:	8099      	strh	r1, [r3, #4]
 80065a8:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3307      	adds	r3, #7
 80065ae:	60bb      	str	r3, [r7, #8]
	append_CRC8_check_sum(tx_buffer, 5);
 80065b0:	2105      	movs	r1, #5
 80065b2:	4869      	ldr	r0, [pc, #420]	@ (8006758 <draw_spinspin+0x25c>)
 80065b4:	f7fa fd29 	bl	800100a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 80065b8:	4b68      	ldr	r3, [pc, #416]	@ (800675c <draw_spinspin+0x260>)
 80065ba:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80065be:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 80065c0:	4b67      	ldr	r3, [pc, #412]	@ (8006760 <draw_spinspin+0x264>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b65      	ldr	r3, [pc, #404]	@ (800675c <draw_spinspin+0x260>)
 80065c8:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 80065ca:	4b66      	ldr	r3, [pc, #408]	@ (8006764 <draw_spinspin+0x268>)
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	4b63      	ldr	r3, [pc, #396]	@ (800675c <draw_spinspin+0x260>)
 80065d0:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4a60      	ldr	r2, [pc, #384]	@ (8006758 <draw_spinspin+0x25c>)
 80065d6:	4413      	add	r3, r2
 80065d8:	4a60      	ldr	r2, [pc, #384]	@ (800675c <draw_spinspin+0x260>)
 80065da:	6810      	ldr	r0, [r2, #0]
 80065dc:	6018      	str	r0, [r3, #0]
 80065de:	8892      	ldrh	r2, [r2, #4]
 80065e0:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3306      	adds	r3, #6
 80065e6:	60bb      	str	r3, [r7, #8]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 80065e8:	4b55      	ldr	r3, [pc, #340]	@ (8006740 <draw_spinspin+0x244>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 80065ee:	4b54      	ldr	r3, [pc, #336]	@ (8006740 <draw_spinspin+0x244>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 1;
 80065f4:	4b52      	ldr	r3, [pc, #328]	@ (8006740 <draw_spinspin+0x244>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 80065fa:	4b51      	ldr	r3, [pc, #324]	@ (8006740 <draw_spinspin+0x244>)
 80065fc:	78da      	ldrb	r2, [r3, #3]
 80065fe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006602:	70da      	strb	r2, [r3, #3]
 8006604:	791a      	ldrb	r2, [r3, #4]
 8006606:	f022 0203 	bic.w	r2, r2, #3
 800660a:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d106      	bne.n	8006620 <draw_spinspin+0x124>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006612:	4a4b      	ldr	r2, [pc, #300]	@ (8006740 <draw_spinspin+0x244>)
 8006614:	78d3      	ldrb	r3, [r2, #3]
 8006616:	2102      	movs	r1, #2
 8006618:	f361 0302 	bfi	r3, r1, #0, #3
 800661c:	70d3      	strb	r3, [r2, #3]
 800661e:	e005      	b.n	800662c <draw_spinspin+0x130>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006620:	4a47      	ldr	r2, [pc, #284]	@ (8006740 <draw_spinspin+0x244>)
 8006622:	78d3      	ldrb	r3, [r2, #3]
 8006624:	2101      	movs	r1, #1
 8006626:	f361 0302 	bfi	r3, r1, #0, #3
 800662a:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 800662c:	4a44      	ldr	r2, [pc, #272]	@ (8006740 <draw_spinspin+0x244>)
 800662e:	78d3      	ldrb	r3, [r2, #3]
 8006630:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006634:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8006636:	4b42      	ldr	r3, [pc, #264]	@ (8006740 <draw_spinspin+0x244>)
 8006638:	791a      	ldrb	r2, [r3, #4]
 800663a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800663e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006642:	711a      	strb	r2, [r3, #4]
 8006644:	795a      	ldrb	r2, [r3, #5]
 8006646:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800664a:	f042 0207 	orr.w	r2, r2, #7
 800664e:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006656:	b29a      	uxth	r2, r3
 8006658:	4b39      	ldr	r3, [pc, #228]	@ (8006740 <draw_spinspin+0x244>)
 800665a:	f002 0101 	and.w	r1, r2, #1
 800665e:	01cc      	lsls	r4, r1, #7
 8006660:	7959      	ldrb	r1, [r3, #5]
 8006662:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006666:	4608      	mov	r0, r1
 8006668:	4621      	mov	r1, r4
 800666a:	4301      	orrs	r1, r0
 800666c:	7159      	strb	r1, [r3, #5]
 800666e:	0852      	lsrs	r2, r2, #1
 8006670:	b292      	uxth	r2, r2
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	2100      	movs	r1, #0
 8006676:	430a      	orrs	r2, r1
 8006678:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 800667a:	4b31      	ldr	r3, [pc, #196]	@ (8006740 <draw_spinspin+0x244>)
 800667c:	2200      	movs	r2, #0
 800667e:	f042 0207 	orr.w	r2, r2, #7
 8006682:	71da      	strb	r2, [r3, #7]
 8006684:	7a1a      	ldrb	r2, [r3, #8]
 8006686:	f022 0203 	bic.w	r2, r2, #3
 800668a:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 800668c:	4b2c      	ldr	r3, [pc, #176]	@ (8006740 <draw_spinspin+0x244>)
 800668e:	78da      	ldrb	r2, [r3, #3]
 8006690:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006694:	70da      	strb	r2, [r3, #3]
 8006696:	791a      	ldrb	r2, [r3, #4]
 8006698:	f022 0203 	bic.w	r2, r2, #3
 800669c:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 800669e:	4b28      	ldr	r3, [pc, #160]	@ (8006740 <draw_spinspin+0x244>)
 80066a0:	7a1a      	ldrb	r2, [r3, #8]
 80066a2:	f002 0203 	and.w	r2, r2, #3
 80066a6:	f062 0237 	orn	r2, r2, #55	@ 0x37
 80066aa:	721a      	strb	r2, [r3, #8]
 80066ac:	7a5a      	ldrb	r2, [r3, #9]
 80066ae:	f022 021f 	bic.w	r2, r2, #31
 80066b2:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 600;
 80066b4:	4b22      	ldr	r3, [pc, #136]	@ (8006740 <draw_spinspin+0x244>)
 80066b6:	7a5a      	ldrb	r2, [r3, #9]
 80066b8:	f002 021f 	and.w	r2, r2, #31
 80066bc:	725a      	strb	r2, [r3, #9]
 80066be:	2200      	movs	r2, #0
 80066c0:	f042 024b 	orr.w	r2, r2, #75	@ 0x4b
 80066c4:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4a23      	ldr	r2, [pc, #140]	@ (8006758 <draw_spinspin+0x25c>)
 80066ca:	4413      	add	r3, r2
 80066cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006740 <draw_spinspin+0x244>)
 80066ce:	461c      	mov	r4, r3
 80066d0:	4613      	mov	r3, r2
 80066d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066d4:	6020      	str	r0, [r4, #0]
 80066d6:	6061      	str	r1, [r4, #4]
 80066d8:	60a2      	str	r2, [r4, #8]
 80066da:	881a      	ldrh	r2, [r3, #0]
 80066dc:	789b      	ldrb	r3, [r3, #2]
 80066de:	81a2      	strh	r2, [r4, #12]
 80066e0:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	330f      	adds	r3, #15
 80066e6:	60bb      	str	r3, [r7, #8]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <draw_spinspin+0x25c>)
 80066ec:	4413      	add	r3, r2
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	4915      	ldr	r1, [pc, #84]	@ (8006748 <draw_spinspin+0x24c>)
 80066f2:	4618      	mov	r0, r3
 80066f4:	f013 fb98 	bl	8019e28 <memcpy>
	curr_pos += char_len;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	3302      	adds	r3, #2
 8006704:	4619      	mov	r1, r3
 8006706:	4814      	ldr	r0, [pc, #80]	@ (8006758 <draw_spinspin+0x25c>)
 8006708:	f7fa fd02 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 800670c:	e002      	b.n	8006714 <draw_spinspin+0x218>
		vTaskDelay(1);
 800670e:	2001      	movs	r0, #1
 8006710:	f010 fd34 	bl	801717c <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006714:	4b14      	ldr	r3, [pc, #80]	@ (8006768 <draw_spinspin+0x26c>)
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b20      	cmp	r3, #32
 800671e:	d1f6      	bne.n	800670e <draw_spinspin+0x212>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	b29b      	uxth	r3, r3
 8006724:	3302      	adds	r3, #2
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	490b      	ldr	r1, [pc, #44]	@ (8006758 <draw_spinspin+0x25c>)
 800672c:	480e      	ldr	r0, [pc, #56]	@ (8006768 <draw_spinspin+0x26c>)
 800672e:	f00a fc8f 	bl	8011050 <HAL_UART_Transmit_DMA>
}
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bd90      	pop	{r4, r7, pc}
 800673a:	bf00      	nop
 800673c:	20003038 	.word	0x20003038
 8006740:	200031c4 	.word	0x200031c4
 8006744:	0802013c 	.word	0x0802013c
 8006748:	200031dc 	.word	0x200031dc
 800674c:	08020148 	.word	0x08020148
 8006750:	200031d4 	.word	0x200031d4
 8006754:	20003430 	.word	0x20003430
 8006758:	200030bc 	.word	0x200030bc
 800675c:	200031bc 	.word	0x200031bc
 8006760:	200033cc 	.word	0x200033cc
 8006764:	200030b8 	.word	0x200030b8
 8006768:	20001c60 	.word	0x20001c60

0800676c <draw_gearing>:

void draw_gearing(uint8_t modify) {
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
	graphic_data.color = 6; //CYAN
 8006782:	4a83      	ldr	r2, [pc, #524]	@ (8006990 <draw_gearing+0x224>)
 8006784:	7913      	ldrb	r3, [r2, #4]
 8006786:	2106      	movs	r1, #6
 8006788:	f361 0385 	bfi	r3, r1, #2, #4
 800678c:	7113      	strb	r3, [r2, #4]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 800678e:	4b81      	ldr	r3, [pc, #516]	@ (8006994 <draw_gearing+0x228>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	4a81      	ldr	r2, [pc, #516]	@ (8006998 <draw_gearing+0x22c>)
 8006794:	211e      	movs	r1, #30
 8006796:	4881      	ldr	r0, [pc, #516]	@ (800699c <draw_gearing+0x230>)
 8006798:	f013 fa26 	bl	8019be8 <snprintf>
 800679c:	4603      	mov	r3, r0
 800679e:	72fb      	strb	r3, [r7, #11]
	send_header.start_frame = 0xA5;
 80067a0:	4b7f      	ldr	r3, [pc, #508]	@ (80069a0 <draw_gearing+0x234>)
 80067a2:	22a5      	movs	r2, #165	@ 0xa5
 80067a4:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 80067a6:	4b7e      	ldr	r3, [pc, #504]	@ (80069a0 <draw_gearing+0x234>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	715a      	strb	r2, [r3, #5]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f042 0203 	orr.w	r2, r2, #3
 80067b6:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 80067b8:	4b7a      	ldr	r3, [pc, #488]	@ (80069a4 <draw_gearing+0x238>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	b2d1      	uxtb	r1, r2
 80067c0:	4a78      	ldr	r2, [pc, #480]	@ (80069a4 <draw_gearing+0x238>)
 80067c2:	7011      	strb	r1, [r2, #0]
 80067c4:	4a76      	ldr	r2, [pc, #472]	@ (80069a0 <draw_gearing+0x234>)
 80067c6:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 80067c8:	7afb      	ldrb	r3, [r7, #11]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3315      	adds	r3, #21
 80067ce:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 80067d0:	4b73      	ldr	r3, [pc, #460]	@ (80069a0 <draw_gearing+0x234>)
 80067d2:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 80067d6:	4b73      	ldr	r3, [pc, #460]	@ (80069a4 <draw_gearing+0x238>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	b2d1      	uxtb	r1, r2
 80067de:	4a71      	ldr	r2, [pc, #452]	@ (80069a4 <draw_gearing+0x238>)
 80067e0:	7011      	strb	r1, [r2, #0]
 80067e2:	4a6f      	ldr	r2, [pc, #444]	@ (80069a0 <draw_gearing+0x234>)
 80067e4:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4a6f      	ldr	r2, [pc, #444]	@ (80069a8 <draw_gearing+0x23c>)
 80067ea:	4413      	add	r3, r2
 80067ec:	4a6c      	ldr	r2, [pc, #432]	@ (80069a0 <draw_gearing+0x234>)
 80067ee:	6810      	ldr	r0, [r2, #0]
 80067f0:	6018      	str	r0, [r3, #0]
 80067f2:	8891      	ldrh	r1, [r2, #4]
 80067f4:	7992      	ldrb	r2, [r2, #6]
 80067f6:	8099      	strh	r1, [r3, #4]
 80067f8:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3307      	adds	r3, #7
 80067fe:	60fb      	str	r3, [r7, #12]
	append_CRC8_check_sum(tx_buffer, 5);
 8006800:	2105      	movs	r1, #5
 8006802:	4869      	ldr	r0, [pc, #420]	@ (80069a8 <draw_gearing+0x23c>)
 8006804:	f7fa fc01 	bl	800100a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 8006808:	4b68      	ldr	r3, [pc, #416]	@ (80069ac <draw_gearing+0x240>)
 800680a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800680e:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 8006810:	4b67      	ldr	r3, [pc, #412]	@ (80069b0 <draw_gearing+0x244>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	4b65      	ldr	r3, [pc, #404]	@ (80069ac <draw_gearing+0x240>)
 8006818:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 800681a:	4b66      	ldr	r3, [pc, #408]	@ (80069b4 <draw_gearing+0x248>)
 800681c:	881a      	ldrh	r2, [r3, #0]
 800681e:	4b63      	ldr	r3, [pc, #396]	@ (80069ac <draw_gearing+0x240>)
 8006820:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a60      	ldr	r2, [pc, #384]	@ (80069a8 <draw_gearing+0x23c>)
 8006826:	4413      	add	r3, r2
 8006828:	4a60      	ldr	r2, [pc, #384]	@ (80069ac <draw_gearing+0x240>)
 800682a:	6810      	ldr	r0, [r2, #0]
 800682c:	6018      	str	r0, [r3, #0]
 800682e:	8892      	ldrh	r2, [r2, #4]
 8006830:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3306      	adds	r3, #6
 8006836:	60fb      	str	r3, [r7, #12]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 8006838:	4b55      	ldr	r3, [pc, #340]	@ (8006990 <draw_gearing+0x224>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 800683e:	4b54      	ldr	r3, [pc, #336]	@ (8006990 <draw_gearing+0x224>)
 8006840:	2200      	movs	r2, #0
 8006842:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 2;
 8006844:	4b52      	ldr	r3, [pc, #328]	@ (8006990 <draw_gearing+0x224>)
 8006846:	2202      	movs	r2, #2
 8006848:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 800684a:	4b51      	ldr	r3, [pc, #324]	@ (8006990 <draw_gearing+0x224>)
 800684c:	78da      	ldrb	r2, [r3, #3]
 800684e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006852:	70da      	strb	r2, [r3, #3]
 8006854:	791a      	ldrb	r2, [r3, #4]
 8006856:	f022 0203 	bic.w	r2, r2, #3
 800685a:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d106      	bne.n	8006870 <draw_gearing+0x104>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006862:	4a4b      	ldr	r2, [pc, #300]	@ (8006990 <draw_gearing+0x224>)
 8006864:	78d3      	ldrb	r3, [r2, #3]
 8006866:	2102      	movs	r1, #2
 8006868:	f361 0302 	bfi	r3, r1, #0, #3
 800686c:	70d3      	strb	r3, [r2, #3]
 800686e:	e005      	b.n	800687c <draw_gearing+0x110>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006870:	4a47      	ldr	r2, [pc, #284]	@ (8006990 <draw_gearing+0x224>)
 8006872:	78d3      	ldrb	r3, [r2, #3]
 8006874:	2101      	movs	r1, #1
 8006876:	f361 0302 	bfi	r3, r1, #0, #3
 800687a:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 800687c:	4a44      	ldr	r2, [pc, #272]	@ (8006990 <draw_gearing+0x224>)
 800687e:	78d3      	ldrb	r3, [r2, #3]
 8006880:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006884:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8006886:	4b42      	ldr	r3, [pc, #264]	@ (8006990 <draw_gearing+0x224>)
 8006888:	791a      	ldrb	r2, [r3, #4]
 800688a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800688e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006892:	711a      	strb	r2, [r3, #4]
 8006894:	795a      	ldrb	r2, [r3, #5]
 8006896:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800689a:	f042 0207 	orr.w	r2, r2, #7
 800689e:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 80068a0:	7afb      	ldrb	r3, [r7, #11]
 80068a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	4b39      	ldr	r3, [pc, #228]	@ (8006990 <draw_gearing+0x224>)
 80068aa:	f002 0101 	and.w	r1, r2, #1
 80068ae:	01cc      	lsls	r4, r1, #7
 80068b0:	7959      	ldrb	r1, [r3, #5]
 80068b2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80068b6:	4608      	mov	r0, r1
 80068b8:	4621      	mov	r1, r4
 80068ba:	4301      	orrs	r1, r0
 80068bc:	7159      	strb	r1, [r3, #5]
 80068be:	0852      	lsrs	r2, r2, #1
 80068c0:	b292      	uxth	r2, r2
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	2100      	movs	r1, #0
 80068c6:	430a      	orrs	r2, r1
 80068c8:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 80068ca:	4b31      	ldr	r3, [pc, #196]	@ (8006990 <draw_gearing+0x224>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	f042 0207 	orr.w	r2, r2, #7
 80068d2:	71da      	strb	r2, [r3, #7]
 80068d4:	7a1a      	ldrb	r2, [r3, #8]
 80068d6:	f022 0203 	bic.w	r2, r2, #3
 80068da:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 80068dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006990 <draw_gearing+0x224>)
 80068de:	78da      	ldrb	r2, [r3, #3]
 80068e0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80068e4:	70da      	strb	r2, [r3, #3]
 80068e6:	791a      	ldrb	r2, [r3, #4]
 80068e8:	f022 0203 	bic.w	r2, r2, #3
 80068ec:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 80068ee:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <draw_gearing+0x224>)
 80068f0:	7a1a      	ldrb	r2, [r3, #8]
 80068f2:	f002 0203 	and.w	r2, r2, #3
 80068f6:	f062 0237 	orn	r2, r2, #55	@ 0x37
 80068fa:	721a      	strb	r2, [r3, #8]
 80068fc:	7a5a      	ldrb	r2, [r3, #9]
 80068fe:	f022 021f 	bic.w	r2, r2, #31
 8006902:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 650;
 8006904:	4b22      	ldr	r3, [pc, #136]	@ (8006990 <draw_gearing+0x224>)
 8006906:	7a5a      	ldrb	r2, [r3, #9]
 8006908:	f002 021f 	and.w	r2, r2, #31
 800690c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006910:	725a      	strb	r2, [r3, #9]
 8006912:	2200      	movs	r2, #0
 8006914:	f042 0251 	orr.w	r2, r2, #81	@ 0x51
 8006918:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a22      	ldr	r2, [pc, #136]	@ (80069a8 <draw_gearing+0x23c>)
 800691e:	4413      	add	r3, r2
 8006920:	4a1b      	ldr	r2, [pc, #108]	@ (8006990 <draw_gearing+0x224>)
 8006922:	461c      	mov	r4, r3
 8006924:	4613      	mov	r3, r2
 8006926:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006928:	6020      	str	r0, [r4, #0]
 800692a:	6061      	str	r1, [r4, #4]
 800692c:	60a2      	str	r2, [r4, #8]
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	789b      	ldrb	r3, [r3, #2]
 8006932:	81a2      	strh	r2, [r4, #12]
 8006934:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	330f      	adds	r3, #15
 800693a:	60fb      	str	r3, [r7, #12]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a1a      	ldr	r2, [pc, #104]	@ (80069a8 <draw_gearing+0x23c>)
 8006940:	4413      	add	r3, r2
 8006942:	7afa      	ldrb	r2, [r7, #11]
 8006944:	4915      	ldr	r1, [pc, #84]	@ (800699c <draw_gearing+0x230>)
 8006946:	4618      	mov	r0, r3
 8006948:	f013 fa6e 	bl	8019e28 <memcpy>
	curr_pos += char_len;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3302      	adds	r3, #2
 8006958:	4619      	mov	r1, r3
 800695a:	4813      	ldr	r0, [pc, #76]	@ (80069a8 <draw_gearing+0x23c>)
 800695c:	f7fa fbd8 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006960:	e002      	b.n	8006968 <draw_gearing+0x1fc>
		vTaskDelay(1);
 8006962:	2001      	movs	r0, #1
 8006964:	f010 fc0a 	bl	801717c <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006968:	4b13      	ldr	r3, [pc, #76]	@ (80069b8 <draw_gearing+0x24c>)
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b20      	cmp	r3, #32
 8006972:	d1f6      	bne.n	8006962 <draw_gearing+0x1f6>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	b29b      	uxth	r3, r3
 8006978:	3302      	adds	r3, #2
 800697a:	b29b      	uxth	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	490a      	ldr	r1, [pc, #40]	@ (80069a8 <draw_gearing+0x23c>)
 8006980:	480d      	ldr	r0, [pc, #52]	@ (80069b8 <draw_gearing+0x24c>)
 8006982:	f00a fb65 	bl	8011050 <HAL_UART_Transmit_DMA>
}
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	200031c4 	.word	0x200031c4
 8006994:	20003028 	.word	0x20003028
 8006998:	08020150 	.word	0x08020150
 800699c:	200031dc 	.word	0x200031dc
 80069a0:	200031d4 	.word	0x200031d4
 80069a4:	20003430 	.word	0x20003430
 80069a8:	200030bc 	.word	0x200030bc
 80069ac:	200031bc 	.word	0x200031bc
 80069b0:	200033cc 	.word	0x200033cc
 80069b4:	200030b8 	.word	0x200030b8
 80069b8:	20001c60 	.word	0x20001c60

080069bc <clear_hud>:


void clear_hud(){
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
	uint32_t curr_pos = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
//	uint8_t char_len = 0;
//	curr_pos = 0;
//	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);

	send_header.start_frame = 0xA5;
 80069c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a84 <clear_hud+0xc8>)
 80069c8:	22a5      	movs	r2, #165	@ 0xa5
 80069ca:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 80069cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <clear_hud+0xc8>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	715a      	strb	r2, [r3, #5]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f042 0203 	orr.w	r2, r2, #3
 80069dc:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 80069de:	4b2a      	ldr	r3, [pc, #168]	@ (8006a88 <clear_hud+0xcc>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	b2d1      	uxtb	r1, r2
 80069e6:	4a28      	ldr	r2, [pc, #160]	@ (8006a88 <clear_hud+0xcc>)
 80069e8:	7011      	strb	r1, [r2, #0]
 80069ea:	4a26      	ldr	r2, [pc, #152]	@ (8006a84 <clear_hud+0xc8>)
 80069ec:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_delete_graphic_t);
 80069ee:	4b25      	ldr	r3, [pc, #148]	@ (8006a84 <clear_hud+0xc8>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	705a      	strb	r2, [r3, #1]
 80069f8:	2200      	movs	r2, #0
 80069fa:	709a      	strb	r2, [r3, #2]
	send_header.seq = g_ref_tx_seq++;
 80069fc:	4b22      	ldr	r3, [pc, #136]	@ (8006a88 <clear_hud+0xcc>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	b2d1      	uxtb	r1, r2
 8006a04:	4a20      	ldr	r2, [pc, #128]	@ (8006a88 <clear_hud+0xcc>)
 8006a06:	7011      	strb	r1, [r2, #0]
 8006a08:	4a1e      	ldr	r2, [pc, #120]	@ (8006a84 <clear_hud+0xc8>)
 8006a0a:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006a8c <clear_hud+0xd0>)
 8006a10:	4413      	add	r3, r2
 8006a12:	4a1c      	ldr	r2, [pc, #112]	@ (8006a84 <clear_hud+0xc8>)
 8006a14:	6810      	ldr	r0, [r2, #0]
 8006a16:	6018      	str	r0, [r3, #0]
 8006a18:	8891      	ldrh	r1, [r2, #4]
 8006a1a:	7992      	ldrb	r2, [r2, #6]
 8006a1c:	8099      	strh	r1, [r3, #4]
 8006a1e:	719a      	strb	r2, [r3, #6]
	ref_delete_graphic_t ref_delete;
	ref_delete.cmd_ID = 0x100;
 8006a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a24:	80bb      	strh	r3, [r7, #4]
	ref_delete.graphic_layer = 9;
 8006a26:	2309      	movs	r3, #9
 8006a28:	72fb      	strb	r3, [r7, #11]
	ref_delete.graphic_operation = 2;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	72bb      	strb	r3, [r7, #10]
	ref_delete.receiver_ID = g_client_id;
 8006a2e:	4b18      	ldr	r3, [pc, #96]	@ (8006a90 <clear_hud+0xd4>)
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	813b      	strh	r3, [r7, #8]
	ref_delete.send_ID = ref_robot_data.robot_id;
 8006a34:	4b17      	ldr	r3, [pc, #92]	@ (8006a94 <clear_hud+0xd8>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	80fb      	strh	r3, [r7, #6]
	memcpy(tx_buffer + curr_pos, &ref_delete, sizeof(ref_delete_graphic_t));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a13      	ldr	r2, [pc, #76]	@ (8006a8c <clear_hud+0xd0>)
 8006a3e:	4413      	add	r3, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	cb03      	ldmia	r3!, {r0, r1}
 8006a46:	6010      	str	r0, [r2, #0]
 8006a48:	6051      	str	r1, [r2, #4]
	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	4619      	mov	r1, r3
 8006a50:	480e      	ldr	r0, [pc, #56]	@ (8006a8c <clear_hud+0xd0>)
 8006a52:	f7fa fb5d 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006a56:	e002      	b.n	8006a5e <clear_hud+0xa2>
		vTaskDelay(1);
 8006a58:	2001      	movs	r0, #1
 8006a5a:	f010 fb8f 	bl	801717c <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a98 <clear_hud+0xdc>)
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d1f6      	bne.n	8006a58 <clear_hud+0x9c>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3302      	adds	r3, #2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	4905      	ldr	r1, [pc, #20]	@ (8006a8c <clear_hud+0xd0>)
 8006a76:	4808      	ldr	r0, [pc, #32]	@ (8006a98 <clear_hud+0xdc>)
 8006a78:	f00a faea 	bl	8011050 <HAL_UART_Transmit_DMA>

}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	200031d4 	.word	0x200031d4
 8006a88:	20003430 	.word	0x20003430
 8006a8c:	200030bc 	.word	0x200030bc
 8006a90:	200030b8 	.word	0x200030b8
 8006a94:	200033cc 	.word	0x200033cc
 8006a98:	20001c60 	.word	0x20001c60
 8006a9c:	00000000 	.word	0x00000000

08006aa0 <fusion>:
extern QueueHandle_t mag_data_queue;
extern TaskHandle_t imu_processing_task_handle;
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;

int fusion() {
 8006aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa4:	b0ba      	sub	sp, #232	@ 0xe8
 8006aa6:	af14      	add	r7, sp, #80	@ 0x50
    double accel_data[3];
    double gyro_data[3];
    double dt = 0.01;  // Time step
 8006aa8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8006d40 <fusion+0x2a0>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double pitch = 0, pitch_speed = 0, pitch_accel = 0;
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double roll = 0, roll_speed = 0, roll_accel = 0;
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double yaw = 0, yaw_speed = 0, yaw_accel = 0;
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	f04f 0300 	mov.w	r3, #0
 8006b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double vertical_accel = 0;
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Simulate data (replace with actual sensor reading in a real application)
    for (int i = 0; i < 1000; i++) {
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b30:	e0f2      	b.n	8006d18 <fusion+0x278>
        // Replace these functions with actual sensor data reading
        accel_data[0] = accel_proc_data.ax;  // Simulated x-axis acceleration
 8006b32:	4b7f      	ldr	r3, [pc, #508]	@ (8006d30 <fusion+0x290>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7f9 fd06 	bl	8000548 <__aeabi_f2d>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
        accel_data[1] = accel_proc_data.ay;           // Simulated y-axis acceleration
 8006b44:	4b7a      	ldr	r3, [pc, #488]	@ (8006d30 <fusion+0x290>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7f9 fcfd 	bl	8000548 <__aeabi_f2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        accel_data[2] = accel_proc_data.az;  // Simulated z-axis acceleration
 8006b56:	4b76      	ldr	r3, [pc, #472]	@ (8006d30 <fusion+0x290>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 fcf4 	bl	8000548 <__aeabi_f2d>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

        gyro_data[0] = gyro_proc_data.gx;  // Simulated roll rate
 8006b68:	4b72      	ldr	r3, [pc, #456]	@ (8006d34 <fusion+0x294>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7f9 fceb 	bl	8000548 <__aeabi_f2d>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        gyro_data[1] = gyro_proc_data.gy;  // Simulated pitch rate
 8006b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006d34 <fusion+0x294>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7f9 fce2 	bl	8000548 <__aeabi_f2d>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        gyro_data[2] = gyro_proc_data.gz;  // Simulated yaw rate
 8006b8c:	4b69      	ldr	r3, [pc, #420]	@ (8006d34 <fusion+0x294>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7f9 fcd9 	bl	8000548 <__aeabi_f2d>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

        imu_sensor_fusion(accel_data, gyro_data, dt,
 8006b9e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8006ba2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8006ba6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8006baa:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	9307      	str	r3, [sp, #28]
 8006bb4:	f107 0310 	add.w	r3, r7, #16
 8006bb8:	9306      	str	r3, [sp, #24]
 8006bba:	f107 0318 	add.w	r3, r7, #24
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	f107 0320 	add.w	r3, r7, #32
 8006bc4:	9304      	str	r3, [sp, #16]
 8006bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006bca:	9303      	str	r3, [sp, #12]
 8006bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006bd0:	9302      	str	r3, [sp, #8]
 8006bd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4623      	mov	r3, r4
 8006be0:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8006be4:	f000 f8b0 	bl	8006d48 <imu_sensor_fusion>
                          &pitch, &pitch_speed, &pitch_accel,
                          &roll, &roll_speed, &roll_accel,
                          &yaw, &yaw_speed, &yaw_accel,
                          &vertical_accel);

        printf("Time: %f, Pitch: %f, Pitch Speed: %f, Pitch Accel: %f, Roll: %f, Roll Speed: %f, Roll Accel: %f, Yaw: %f, Yaw Speed: %f, Yaw Accel: %f, Vertical Accel: %f\n",
 8006be8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006bec:	f7f9 fc9a 	bl	8000524 <__aeabi_i2d>
 8006bf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bf4:	f7f9 fd00 	bl	80005f8 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	e9c7 2300 	strd	r2, r3, [r7]
 8006c00:	e9d7 ab14 	ldrd	sl, fp, [r7, #80]	@ 0x50
 8006c04:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8006c08:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8006c0c:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
 8006c10:	ed97 4b0c 	vldr	d4, [r7, #48]	@ 0x30
 8006c14:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8006c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c1c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8006c20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c28:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8006c2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c30:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8006c34:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8006c38:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 8006c3c:	ed8d 4b08 	vstr	d4, [sp, #32]
 8006c40:	ed8d 5b06 	vstr	d5, [sp, #24]
 8006c44:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c4c:	e9cd ab00 	strd	sl, fp, [sp]
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	4838      	ldr	r0, [pc, #224]	@ (8006d38 <fusion+0x298>)
 8006c56:	f012 ffb5 	bl	8019bc4 <printf>
               i*dt, pitch, pitch_speed, pitch_accel, roll, roll_speed, roll_accel, yaw, yaw_speed, yaw_accel, vertical_accel);
        imu_heading.pit = pitch;
 8006c5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	f7f9 ffc1 	bl	8000be8 <__aeabi_d2f>
 8006c66:	4603      	mov	r3, r0
 8006c68:	4a34      	ldr	r2, [pc, #208]	@ (8006d3c <fusion+0x29c>)
 8006c6a:	6013      	str	r3, [r2, #0]
        imu_heading.dpit = pitch_speed;
 8006c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	f7f9 ffb8 	bl	8000be8 <__aeabi_d2f>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4a30      	ldr	r2, [pc, #192]	@ (8006d3c <fusion+0x29c>)
 8006c7c:	60d3      	str	r3, [r2, #12]
        imu_heading.ddpit = pitch_accel;
 8006c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c82:	4610      	mov	r0, r2
 8006c84:	4619      	mov	r1, r3
 8006c86:	f7f9 ffaf 	bl	8000be8 <__aeabi_d2f>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d3c <fusion+0x29c>)
 8006c8e:	6193      	str	r3, [r2, #24]
        imu_heading.rol = roll;
 8006c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c94:	4610      	mov	r0, r2
 8006c96:	4619      	mov	r1, r3
 8006c98:	f7f9 ffa6 	bl	8000be8 <__aeabi_d2f>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	4a27      	ldr	r2, [pc, #156]	@ (8006d3c <fusion+0x29c>)
 8006ca0:	6053      	str	r3, [r2, #4]
        imu_heading.drol = roll_speed;
 8006ca2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f7f9 ff9d 	bl	8000be8 <__aeabi_d2f>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a22      	ldr	r2, [pc, #136]	@ (8006d3c <fusion+0x29c>)
 8006cb2:	6113      	str	r3, [r2, #16]
        imu_heading.ddrol = roll_accel;
 8006cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4619      	mov	r1, r3
 8006cbc:	f7f9 ff94 	bl	8000be8 <__aeabi_d2f>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d3c <fusion+0x29c>)
 8006cc4:	61d3      	str	r3, [r2, #28]
        imu_heading.yaw = yaw;
 8006cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f7f9 ff8b 	bl	8000be8 <__aeabi_d2f>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	4a19      	ldr	r2, [pc, #100]	@ (8006d3c <fusion+0x29c>)
 8006cd6:	6093      	str	r3, [r2, #8]
		imu_heading.dyaw = yaw_speed;
 8006cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f7f9 ff82 	bl	8000be8 <__aeabi_d2f>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <fusion+0x29c>)
 8006ce8:	6153      	str	r3, [r2, #20]
		imu_heading.ddyaw = yaw_accel;
 8006cea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f7f9 ff79 	bl	8000be8 <__aeabi_d2f>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4a10      	ldr	r2, [pc, #64]	@ (8006d3c <fusion+0x29c>)
 8006cfa:	6213      	str	r3, [r2, #32]
		imu_heading.ddz = vertical_accel;
 8006cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	f7f9 ff70 	bl	8000be8 <__aeabi_d2f>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d3c <fusion+0x29c>)
 8006d0c:	6253      	str	r3, [r2, #36]	@ 0x24
    for (int i = 0; i < 1000; i++) {
 8006d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d12:	3301      	adds	r3, #1
 8006d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d20:	f6ff af07 	blt.w	8006b32 <fusion+0x92>
    }

    return 0;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3798      	adds	r7, #152	@ 0x98
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d30:	20003224 	.word	0x20003224
 8006d34:	20003234 	.word	0x20003234
 8006d38:	08020158 	.word	0x08020158
 8006d3c:	200031fc 	.word	0x200031fc
 8006d40:	47ae147b 	.word	0x47ae147b
 8006d44:	3f847ae1 	.word	0x3f847ae1

08006d48 <imu_sensor_fusion>:

void imu_sensor_fusion(double accel_data[3], double gyro_data[3], double dt,
                       double *pitch, double *pitch_speed, double *pitch_accel,
                       double *roll, double *roll_speed, double *roll_accel,
                       double *yaw, double *yaw_speed, double *yaw_accel,
                       double *vertical_accel) {
 8006d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d4c:	b08c      	sub	sp, #48	@ 0x30
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6178      	str	r0, [r7, #20]
 8006d52:	6139      	str	r1, [r7, #16]
 8006d54:	ed87 0b02 	vstr	d0, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	603b      	str	r3, [r7, #0]
    // Calculate pitch and roll from accelerometer data
    double pitch_accel_meas = atan2(-accel_data[0], sqrt(accel_data[1] * accel_data[1] + accel_data[2] * accel_data[2])) * 180 / PI;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	4690      	mov	r8, r2
 8006d64:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	3308      	adds	r3, #8
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f7f9 fc3e 	bl	80005f8 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4614      	mov	r4, r2
 8006d82:	461d      	mov	r5, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	3310      	adds	r3, #16
 8006d88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3310      	adds	r3, #16
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fa74 	bl	800028c <__adddf3>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	ec43 2b17 	vmov	d7, r2, r3
 8006dac:	eeb0 0a47 	vmov.f32	s0, s14
 8006db0:	eef0 0a67 	vmov.f32	s1, s15
 8006db4:	f018 fe2e 	bl	801fa14 <sqrt>
 8006db8:	eeb0 7a40 	vmov.f32	s14, s0
 8006dbc:	eef0 7a60 	vmov.f32	s15, s1
 8006dc0:	eeb0 1a47 	vmov.f32	s2, s14
 8006dc4:	eef0 1a67 	vmov.f32	s3, s15
 8006dc8:	ec49 8b10 	vmov	d0, r8, r9
 8006dcc:	f018 fe20 	bl	801fa10 <atan2>
 8006dd0:	ec51 0b10 	vmov	r0, r1, d0
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	4b9d      	ldr	r3, [pc, #628]	@ (8007050 <imu_sensor_fusion+0x308>)
 8006dda:	f7f9 fc0d 	bl	80005f8 <__aeabi_dmul>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	a396      	add	r3, pc, #600	@ (adr r3, 8007040 <imu_sensor_fusion+0x2f8>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fd2e 	bl	800084c <__aeabi_ddiv>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double roll_accel_meas = atan2(accel_data[1], accel_data[2]) * 180 / PI;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	ed93 7b00 	vldr	d7, [r3]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3310      	adds	r3, #16
 8006e04:	ed93 6b00 	vldr	d6, [r3]
 8006e08:	eeb0 1a46 	vmov.f32	s2, s12
 8006e0c:	eef0 1a66 	vmov.f32	s3, s13
 8006e10:	eeb0 0a47 	vmov.f32	s0, s14
 8006e14:	eef0 0a67 	vmov.f32	s1, s15
 8006e18:	f018 fdfa 	bl	801fa10 <atan2>
 8006e1c:	ec51 0b10 	vmov	r0, r1, d0
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	4b8a      	ldr	r3, [pc, #552]	@ (8007050 <imu_sensor_fusion+0x308>)
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	a383      	add	r3, pc, #524	@ (adr r3, 8007040 <imu_sensor_fusion+0x2f8>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fd08 	bl	800084c <__aeabi_ddiv>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Integrate gyroscope data to get angles
    *pitch += gyro_data[1] * dt;  // Integrate pitch rate to get pitch angle
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e56:	f7f9 fbcf 	bl	80005f8 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 fa13 	bl	800028c <__adddf3>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	e9c1 2300 	strd	r2, r3, [r1]
    *roll += gyro_data[0] * dt;   // Integrate roll rate to get roll angle
 8006e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e80:	f7f9 fbba 	bl	80005f8 <__aeabi_dmul>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 f9fe 	bl	800028c <__adddf3>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006e96:	e9c1 2300 	strd	r2, r3, [r1]
    *yaw += gyro_data[2] * dt;    // Integrate yaw rate to get yaw angle
 8006e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	3310      	adds	r3, #16
 8006ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eac:	f7f9 fba4 	bl	80005f8 <__aeabi_dmul>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7f9 f9e8 	bl	800028c <__adddf3>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ec2:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate speed (rate of change of angles) directly from gyroscope data
    *pitch_speed = gyro_data[1];
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	e9c1 2300 	strd	r2, r3, [r1]
    *roll_speed = gyro_data[0];
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006eda:	e9c1 2300 	strd	r2, r3, [r1]
    *yaw_speed = gyro_data[2];
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ee4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8006ee6:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate acceleration (rate of change of speeds)
    static double last_pitch_speed = 0, last_roll_speed = 0, last_yaw_speed = 0;
    *pitch_accel = (*pitch_speed - last_pitch_speed) / dt;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ef0:	4b58      	ldr	r3, [pc, #352]	@ (8007054 <imu_sensor_fusion+0x30c>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 f9c7 	bl	8000288 <__aeabi_dsub>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f06:	f7f9 fca1 	bl	800084c <__aeabi_ddiv>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f10:	e9c1 2300 	strd	r2, r3, [r1]
    *roll_accel = (*roll_speed - last_roll_speed) / dt;
 8006f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007058 <imu_sensor_fusion+0x310>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f7f9 f9b2 	bl	8000288 <__aeabi_dsub>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f30:	f7f9 fc8c 	bl	800084c <__aeabi_ddiv>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f3a:	e9c1 2300 	strd	r2, r3, [r1]
    *yaw_accel = (*yaw_speed - last_yaw_speed) / dt;
 8006f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f44:	4b45      	ldr	r3, [pc, #276]	@ (800705c <imu_sensor_fusion+0x314>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f99d 	bl	8000288 <__aeabi_dsub>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4610      	mov	r0, r2
 8006f54:	4619      	mov	r1, r3
 8006f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f5a:	f7f9 fc77 	bl	800084c <__aeabi_ddiv>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006f64:	e9c1 2300 	strd	r2, r3, [r1]

    // Update last speeds
    last_pitch_speed = *pitch_speed;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	4939      	ldr	r1, [pc, #228]	@ (8007054 <imu_sensor_fusion+0x30c>)
 8006f70:	e9c1 2300 	strd	r2, r3, [r1]
    last_roll_speed = *roll_speed;
 8006f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	4937      	ldr	r1, [pc, #220]	@ (8007058 <imu_sensor_fusion+0x310>)
 8006f7c:	e9c1 2300 	strd	r2, r3, [r1]
    last_yaw_speed = *yaw_speed;
 8006f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	4935      	ldr	r1, [pc, #212]	@ (800705c <imu_sensor_fusion+0x314>)
 8006f88:	e9c1 2300 	strd	r2, r3, [r1]

    // Combine accelerometer and gyroscope data for pitch and roll angles
    // Here a simple complementary filter is used
    double alpha = 0.98;
 8006f8c:	a32e      	add	r3, pc, #184	@ (adr r3, 8007048 <imu_sensor_fusion+0x300>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    *pitch = alpha * (*pitch) + (1 - alpha) * pitch_accel_meas;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fb0:	f04f 0000 	mov.w	r0, #0
 8006fb4:	492a      	ldr	r1, [pc, #168]	@ (8007060 <imu_sensor_fusion+0x318>)
 8006fb6:	f7f9 f967 	bl	8000288 <__aeabi_dsub>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fc6:	f7f9 fb17 	bl	80005f8 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7f9 f95b 	bl	800028c <__adddf3>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	e9c1 2300 	strd	r2, r3, [r1]
    *roll = alpha * (*roll) + (1 - alpha) * roll_accel_meas;
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fea:	f7f9 fb05 	bl	80005f8 <__aeabi_dmul>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ffa:	f04f 0000 	mov.w	r0, #0
 8006ffe:	4918      	ldr	r1, [pc, #96]	@ (8007060 <imu_sensor_fusion+0x318>)
 8007000:	f7f9 f942 	bl	8000288 <__aeabi_dsub>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4610      	mov	r0, r2
 800700a:	4619      	mov	r1, r3
 800700c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007010:	f7f9 faf2 	bl	80005f8 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4620      	mov	r0, r4
 800701a:	4629      	mov	r1, r5
 800701c:	f7f9 f936 	bl	800028c <__adddf3>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007026:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate vertical acceleration (z-axis acceleration)
    *vertical_accel = accel_data[2];
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007030:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007032:	e9c1 2300 	strd	r2, r3, [r1]
}
 8007036:	bf00      	nop
 8007038:	3730      	adds	r7, #48	@ 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007040:	60000000 	.word	0x60000000
 8007044:	400921fb 	.word	0x400921fb
 8007048:	f5c28f5c 	.word	0xf5c28f5c
 800704c:	3fef5c28 	.word	0x3fef5c28
 8007050:	40668000 	.word	0x40668000
 8007054:	20003258 	.word	0x20003258
 8007058:	20003260 	.word	0x20003260
 800705c:	20003268 	.word	0x20003268
 8007060:	3ff00000 	.word	0x3ff00000

08007064 <imu_proc_task_notif>:





void imu_proc_task_notif() {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <imu_proc_task_notif+0x3c>)
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8007074:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <imu_proc_task_notif+0x40>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1d3a      	adds	r2, r7, #4
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f010 feef 	bl	8017e60 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <imu_proc_task_notif+0x34>
 8007088:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <imu_proc_task_notif+0x44>)
 800708a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	f3bf 8f6f 	isb	sy
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20003250 	.word	0x20003250
 80070a4:	200032a8 	.word	0x200032a8
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	463c      	mov	r4, r7
 80070b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	} else {

		gyro_proc_data.gx = gyro_data.gx;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	4a10      	ldr	r2, [pc, #64]	@ (80070fc <gyro_data_ready+0x50>)
 80070bc:	6013      	str	r3, [r2, #0]
		gyro_proc_data.gy = gyro_data.gy;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a0e      	ldr	r2, [pc, #56]	@ (80070fc <gyro_data_ready+0x50>)
 80070c2:	6053      	str	r3, [r2, #4]
		gyro_proc_data.gz = gyro_data.gz;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a0d      	ldr	r2, [pc, #52]	@ (80070fc <gyro_data_ready+0x50>)
 80070c8:	6093      	str	r3, [r2, #8]
	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a0b      	ldr	r2, [pc, #44]	@ (80070fc <gyro_data_ready+0x50>)
 80070ce:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <gyro_data_ready+0x54>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <gyro_data_ready+0x54>)
 80070dc:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 80070de:	4b08      	ldr	r3, [pc, #32]	@ (8007100 <gyro_data_ready+0x54>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b07      	cmp	r3, #7
 80070e4:	d003      	beq.n	80070ee <gyro_data_ready+0x42>
 80070e6:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <gyro_data_ready+0x54>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d101      	bne.n	80070f2 <gyro_data_ready+0x46>
		imu_proc_task_notif();
 80070ee:	f7ff ffb9 	bl	8007064 <imu_proc_task_notif>
	}
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20003234 	.word	0x20003234
 8007100:	20003250 	.word	0x20003250

08007104 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	463c      	mov	r4, r7
 800710c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	} else {

		accel_proc_data.ax = accel_data.ax;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	4a10      	ldr	r2, [pc, #64]	@ (8007154 <accel_data_ready+0x50>)
 8007114:	6013      	str	r3, [r2, #0]
		accel_proc_data.ay = accel_data.ay;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <accel_data_ready+0x50>)
 800711a:	6053      	str	r3, [r2, #4]
		accel_proc_data.az = accel_data.az;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a0d      	ldr	r2, [pc, #52]	@ (8007154 <accel_data_ready+0x50>)
 8007120:	6093      	str	r3, [r2, #8]
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4a0b      	ldr	r2, [pc, #44]	@ (8007154 <accel_data_ready+0x50>)
 8007126:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <accel_data_ready+0x54>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f043 0302 	orr.w	r3, r3, #2
 8007130:	b2da      	uxtb	r2, r3
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <accel_data_ready+0x54>)
 8007134:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 8007136:	4b08      	ldr	r3, [pc, #32]	@ (8007158 <accel_data_ready+0x54>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b07      	cmp	r3, #7
 800713c:	d003      	beq.n	8007146 <accel_data_ready+0x42>
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <accel_data_ready+0x54>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d101      	bne.n	800714a <accel_data_ready+0x46>
		imu_proc_task_notif();
 8007146:	f7ff ff8d 	bl	8007064 <imu_proc_task_notif>
	}
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bd90      	pop	{r4, r7, pc}
 8007152:	bf00      	nop
 8007154:	20003224 	.word	0x20003224
 8007158:	20003250 	.word	0x20003250

0800715c <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	1d3b      	adds	r3, r7, #4
 8007164:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 8007168:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800716c:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <mag_data_ready+0x44>)
 800716e:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 8007170:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007174:	4b0a      	ldr	r3, [pc, #40]	@ (80071a0 <mag_data_ready+0x44>)
 8007176:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 8007178:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800717c:	4b08      	ldr	r3, [pc, #32]	@ (80071a0 <mag_data_ready+0x44>)
 800717e:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4a07      	ldr	r2, [pc, #28]	@ (80071a0 <mag_data_ready+0x44>)
 8007184:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 8007186:	4b07      	ldr	r3, [pc, #28]	@ (80071a4 <mag_data_ready+0x48>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	f043 0304 	orr.w	r3, r3, #4
 800718e:	b2da      	uxtb	r2, r3
 8007190:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <mag_data_ready+0x48>)
 8007192:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 8007194:	bf00      	nop
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	20003244 	.word	0x20003244
 80071a4:	20003250 	.word	0x20003250

080071a8 <imu_processing_task>:

void imu_processing_task(void *argument) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 80071b0:	f7fa fd06 	bl	8001bc0 <imu_start_ints>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80071b4:	f04f 31ff 	mov.w	r1, #4294967295
 80071b8:	2001      	movs	r0, #1
 80071ba:	f010 fe05 	bl	8017dc8 <ulTaskNotifyTake>
	imu_attitude_update();
 80071be:	f000 f80b 	bl	80071d8 <imu_attitude_update>
//	quat_startup();
	while (1) {
		fusion();
 80071c2:	f7ff fc6d 	bl	8006aa0 <fusion>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80071c6:	f04f 31ff 	mov.w	r1, #4294967295
 80071ca:	2001      	movs	r0, #1
 80071cc:	f010 fdfc 	bl	8017dc8 <ulTaskNotifyTake>
		imu_attitude_update();
 80071d0:	f000 f802 	bl	80071d8 <imu_attitude_update>
		fusion();
 80071d4:	bf00      	nop
 80071d6:	e7f4      	b.n	80071c2 <imu_processing_task+0x1a>

080071d8 <imu_attitude_update>:
	}
}


void imu_attitude_update(void) {
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0

}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <launcher_control_task>:
extern uint32_t ref_power_data_txno;
extern ref_magazine_data_t ref_mag_data;
extern uint32_t ref_mag_data_txno;
static uint32_t prev_power_data_no = 0;

void launcher_control_task(void *argument) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	6078      	str	r0, [r7, #4]
	TickType_t launcher_ctrl_time;
	while (1) {
		//event flags!
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdFALSE,
 80071f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007270 <launcher_control_task+0x88>)
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	f04f 33ff 	mov.w	r3, #4294967295
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	2201      	movs	r2, #1
 80071fe:	2107      	movs	r1, #7
 8007200:	f00e fcfe 	bl	8015c00 <xEventGroupWaitBits>
		portMAX_DELAY);
		status_led(4, on_led);
 8007204:	2100      	movs	r1, #0
 8007206:	2004      	movs	r0, #4
 8007208:	f7fa fed0 	bl	8001fac <status_led>
		launcher_ctrl_time = xTaskGetTickCount();
 800720c:	f010 f90a 	bl	8017424 <xTaskGetTickCount>
 8007210:	4603      	mov	r3, r0
 8007212:	60fb      	str	r3, [r7, #12]

		if (launcher_ctrl_data.enabled) {
 8007214:	4b17      	ldr	r3, [pc, #92]	@ (8007274 <launcher_control_task+0x8c>)
 8007216:	795b      	ldrb	r3, [r3, #5]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <launcher_control_task+0x4e>
			flywheel_control(g_can_motors + LFRICTION_MOTOR_ID - 1,
 800721c:	4b16      	ldr	r3, [pc, #88]	@ (8007278 <launcher_control_task+0x90>)
 800721e:	4a17      	ldr	r2, [pc, #92]	@ (800727c <launcher_control_task+0x94>)
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f8f0 	bl	8007408 <flywheel_control>
			launcher_angle_control(g_can_motors + LFRICTION_MOTOR_ID - 1,
					g_can_motors + RFRICTION_MOTOR_ID - 1,
					g_can_motors + FEEDER_MOTOR_ID - 1);

#else
			launcher_control(g_can_motors + LFRICTION_MOTOR_ID - 1,
 8007228:	4b13      	ldr	r3, [pc, #76]	@ (8007278 <launcher_control_task+0x90>)
 800722a:	4914      	ldr	r1, [pc, #80]	@ (800727c <launcher_control_task+0x94>)
 800722c:	4a14      	ldr	r2, [pc, #80]	@ (8007280 <launcher_control_task+0x98>)
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fa06 	bl	8007640 <launcher_control>
 8007234:	e00b      	b.n	800724e <launcher_control_task+0x66>
					g_can_motors + RFRICTION_MOTOR_ID - 1,
					g_can_motors + FEEDER_MOTOR_ID - 1);
#endif

		} else {
			g_can_motors[LFRICTION_MOTOR_ID - 1].output = 0;
 8007236:	4b13      	ldr	r3, [pc, #76]	@ (8007284 <launcher_control_task+0x9c>)
 8007238:	2200      	movs	r2, #0
 800723a:	f8a3 245c 	strh.w	r2, [r3, #1116]	@ 0x45c
			g_can_motors[RFRICTION_MOTOR_ID - 1].output = 0;
 800723e:	4b11      	ldr	r3, [pc, #68]	@ (8007284 <launcher_control_task+0x9c>)
 8007240:	2200      	movs	r2, #0
 8007242:	f8a3 23a0 	strh.w	r2, [r3, #928]	@ 0x3a0
			g_can_motors[FEEDER_MOTOR_ID - 1].output = 0;
 8007246:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <launcher_control_task+0x9c>)
 8007248:	2200      	movs	r2, #0
 800724a:	f8a3 2518 	strh.w	r2, [r3, #1304]	@ 0x518
		}
		status_led(4, off_led);
 800724e:	2101      	movs	r1, #1
 8007250:	2004      	movs	r0, #4
 8007252:	f7fa feab 	bl	8001fac <status_led>
		//vTaskDelay(CHASSIS_DELAY);
		xEventGroupClearBits(launcher_event_group, 0b111);
 8007256:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <launcher_control_task+0x88>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2107      	movs	r1, #7
 800725c:	4618      	mov	r0, r3
 800725e:	f00e fda1 	bl	8015da4 <xEventGroupClearBits>
		vTaskDelayUntil(&launcher_ctrl_time, CHASSIS_DELAY);
 8007262:	f107 030c 	add.w	r3, r7, #12
 8007266:	2105      	movs	r1, #5
 8007268:	4618      	mov	r0, r3
 800726a:	f00f ff07 	bl	801707c <vTaskDelayUntil>
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdFALSE,
 800726e:	e7bf      	b.n	80071f0 <launcher_control_task+0x8>
 8007270:	200032bc 	.word	0x200032bc
 8007274:	20002fdc 	.word	0x20002fdc
 8007278:	200021d0 	.word	0x200021d0
 800727c:	20002114 	.word	0x20002114
 8007280:	2000228c 	.word	0x2000228c
 8007284:	20001e24 	.word	0x20001e24

08007288 <check_overheat>:
	}

}

uint16_t check_overheat() {
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0

#ifdef OVERHEAT_PROTECTION
	int32_t ammo_remaining;
	static uint32_t last_time;
	if (ref_robot_data.robot_id == 0) {
 800728e:	4b55      	ldr	r3, [pc, #340]	@ (80073e4 <check_overheat+0x15c>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <check_overheat+0x12>
		//refereee system not connected
		return 10;
 8007296:	230a      	movs	r3, #10
 8007298:	e09f      	b.n	80073da <check_overheat+0x152>
	}

#ifdef BULLET_17
	uint8_t active_feeder = 2;
 800729a:	2302      	movs	r3, #2
 800729c:	72fb      	strb	r3, [r7, #11]
#ifdef BULLET_42
#endif

#ifdef BULLET_17
	//if double barrel launcher, check launcher with more heat only
	if (ref_power_data.shooter_17mm_1_barrel_heat >= ref_power_data.shooter_17mm_2_barrel_heat) {
 800729e:	4b52      	ldr	r3, [pc, #328]	@ (80073e8 <check_overheat+0x160>)
 80072a0:	895b      	ldrh	r3, [r3, #10]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	4b50      	ldr	r3, [pc, #320]	@ (80073e8 <check_overheat+0x160>)
 80072a6:	899b      	ldrh	r3, [r3, #12]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <check_overheat+0x2c>
		active_feeder = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	72fb      	strb	r3, [r7, #11]
 80072b2:	e001      	b.n	80072b8 <check_overheat+0x30>
	} else {
		active_feeder = 1;
 80072b4:	2301      	movs	r3, #1
 80072b6:	72fb      	strb	r3, [r7, #11]
	}

	if (active_feeder == 0) {
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d110      	bne.n	80072e0 <check_overheat+0x58>
		ammo_remaining = (((ref_robot_data.shooter_barrel_heat_limit
 80072be:	4b49      	ldr	r3, [pc, #292]	@ (80073e4 <check_overheat+0x15c>)
 80072c0:	891b      	ldrh	r3, [r3, #8]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
				- ref_power_data.shooter_17mm_1_barrel_heat - OVERHEAT_OFFSET)) / BULLET_17_HEAT);
 80072c6:	4b48      	ldr	r3, [pc, #288]	@ (80073e8 <check_overheat+0x160>)
 80072c8:	895b      	ldrh	r3, [r3, #10]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	3b14      	subs	r3, #20
		ammo_remaining = (((ref_robot_data.shooter_barrel_heat_limit
 80072d0:	4a46      	ldr	r2, [pc, #280]	@ (80073ec <check_overheat+0x164>)
 80072d2:	fb82 1203 	smull	r1, r2, r2, r3
 80072d6:	1092      	asrs	r2, r2, #2
 80072d8:	17db      	asrs	r3, r3, #31
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e016      	b.n	800730e <check_overheat+0x86>
	} else if (active_feeder == 1) {
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d110      	bne.n	8007308 <check_overheat+0x80>
		ammo_remaining = (((ref_robot_data.shooter_barrel_heat_limit
 80072e6:	4b3f      	ldr	r3, [pc, #252]	@ (80073e4 <check_overheat+0x15c>)
 80072e8:	891b      	ldrh	r3, [r3, #8]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
				- ref_power_data.shooter_17mm_2_barrel_heat - OVERHEAT_OFFSET)) / BULLET_17_HEAT);
 80072ee:	4b3e      	ldr	r3, [pc, #248]	@ (80073e8 <check_overheat+0x160>)
 80072f0:	899b      	ldrh	r3, [r3, #12]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	3b14      	subs	r3, #20
		ammo_remaining = (((ref_robot_data.shooter_barrel_heat_limit
 80072f8:	4a3c      	ldr	r2, [pc, #240]	@ (80073ec <check_overheat+0x164>)
 80072fa:	fb82 1203 	smull	r1, r2, r2, r3
 80072fe:	1092      	asrs	r2, r2, #2
 8007300:	17db      	asrs	r3, r3, #31
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	e002      	b.n	800730e <check_overheat+0x86>
	} else {
		ammo_remaining = 1000;
 8007308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800730c:	60fb      	str	r3, [r7, #12]
	}
	if (prev_power_data_no != ref_power_data_txno) {
 800730e:	4b38      	ldr	r3, [pc, #224]	@ (80073f0 <check_overheat+0x168>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b38      	ldr	r3, [pc, #224]	@ (80073f4 <check_overheat+0x16c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d010      	beq.n	800733c <check_overheat+0xb4>
		prev_power_data_no = ref_power_data_txno;
 800731a:	4b36      	ldr	r3, [pc, #216]	@ (80073f4 <check_overheat+0x16c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a34      	ldr	r2, [pc, #208]	@ (80073f0 <check_overheat+0x168>)
 8007320:	6013      	str	r3, [r2, #0]
		last_time = get_microseconds();
 8007322:	f7fa ff47 	bl	80021b4 <get_microseconds>
 8007326:	4603      	mov	r3, r0
 8007328:	4a33      	ldr	r2, [pc, #204]	@ (80073f8 <check_overheat+0x170>)
 800732a:	6013      	str	r3, [r2, #0]
		if (ammo_remaining < OVERHEAT_MARGIN) {
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b01      	cmp	r3, #1
 8007330:	dc01      	bgt.n	8007336 <check_overheat+0xae>
			return 0;
 8007332:	2300      	movs	r3, #0
 8007334:	e051      	b.n	80073da <check_overheat+0x152>
		} else {
			return ammo_remaining;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	b29b      	uxth	r3, r3
 800733a:	e04e      	b.n	80073da <check_overheat+0x152>
		}
	} else {
		//no updated heat informatiom, guessing ammo remaining;
		uint32_t time_diff = get_microseconds() - last_time;
 800733c:	f7fa ff3a 	bl	80021b4 <get_microseconds>
 8007340:	4602      	mov	r2, r0
 8007342:	4b2d      	ldr	r3, [pc, #180]	@ (80073f8 <check_overheat+0x170>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	607b      	str	r3, [r7, #4]
		if (active_feeder == 0) {
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d11d      	bne.n	800738c <check_overheat+0x104>
			ammo_remaining += (ref_robot_data.shooter_barrel_cooling_value
 8007350:	4b24      	ldr	r3, [pc, #144]	@ (80073e4 <check_overheat+0x15c>)
 8007352:	88db      	ldrh	r3, [r3, #6]
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
					* time_diff / TIMER_FREQ);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	4a26      	ldr	r2, [pc, #152]	@ (80073fc <check_overheat+0x174>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	09da      	lsrs	r2, r3, #7
			ammo_remaining += (ref_robot_data.shooter_barrel_cooling_value
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
			ammo_remaining -= g_referee_limiters.feeding_speed * time_diff
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4b23      	ldr	r3, [pc, #140]	@ (8007400 <check_overheat+0x178>)
 8007372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007376:	4619      	mov	r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	fb01 f303 	mul.w	r3, r1, r3
					/ (TIMER_FREQ * 60);
 800737e:	4921      	ldr	r1, [pc, #132]	@ (8007404 <check_overheat+0x17c>)
 8007380:	fba1 1303 	umull	r1, r3, r1, r3
 8007384:	0cdb      	lsrs	r3, r3, #19
			ammo_remaining -= g_referee_limiters.feeding_speed * time_diff
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e01f      	b.n	80073cc <check_overheat+0x144>
		} else if (active_feeder == 1) {
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d11c      	bne.n	80073cc <check_overheat+0x144>

			ammo_remaining += (ref_robot_data.shooter_barrel_cooling_value
 8007392:	4b14      	ldr	r3, [pc, #80]	@ (80073e4 <check_overheat+0x15c>)
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
					* time_diff / TIMER_FREQ);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	fb02 f303 	mul.w	r3, r2, r3
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <check_overheat+0x174>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	09da      	lsrs	r2, r3, #7
			ammo_remaining += (ref_robot_data.shooter_barrel_cooling_value
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
			ammo_remaining -= g_referee_limiters.feeding_speed * time_diff
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4b13      	ldr	r3, [pc, #76]	@ (8007400 <check_overheat+0x178>)
 80073b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073b8:	4619      	mov	r1, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	fb01 f303 	mul.w	r3, r1, r3
					/ (TIMER_FREQ * 60);
 80073c0:	4910      	ldr	r1, [pc, #64]	@ (8007404 <check_overheat+0x17c>)
 80073c2:	fba1 1303 	umull	r1, r3, r1, r3
 80073c6:	0cdb      	lsrs	r3, r3, #19
			ammo_remaining -= g_referee_limiters.feeding_speed * time_diff
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	60fb      	str	r3, [r7, #12]
		}
		if (ammo_remaining < OVERHEAT_MARGIN) {
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	dc01      	bgt.n	80073d6 <check_overheat+0x14e>
			return 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e001      	b.n	80073da <check_overheat+0x152>
		} else {
			return ammo_remaining;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	b29b      	uxth	r3, r3

#else
	return 100;
#endif

}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200033cc 	.word	0x200033cc
 80073e8:	200033ec 	.word	0x200033ec
 80073ec:	66666667 	.word	0x66666667
 80073f0:	20003270 	.word	0x20003270
 80073f4:	200033fc 	.word	0x200033fc
 80073f8:	20003274 	.word	0x20003274
 80073fc:	0a7c5ac5 	.word	0x0a7c5ac5
 8007400:	20003348 	.word	0x20003348
 8007404:	165e9f81 	.word	0x165e9f81

08007408 <flywheel_control>:

void flywheel_control(motor_data_t *l_flywheel, motor_data_t *r_flywheel) {
 8007408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]

	enum launcher_state_e {
		WHEEL_FIRING, WHEEL_STANDBY, WHEEL_CLEARING
	};
	static enum launcher_state_e flywheel_state;
	int16_t friction_wheel_speed = g_referee_limiters.projectile_speed
 8007414:	4b84      	ldr	r3, [pc, #528]	@ (8007628 <flywheel_control+0x220>)
 8007416:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800741a:	b29b      	uxth	r3, r3
			* PROJECTILE_SPEED_RATIO;
 800741c:	461a      	mov	r2, r3
 800741e:	0052      	lsls	r2, r2, #1
 8007420:	4413      	add	r3, r2
 8007422:	461a      	mov	r2, r3
 8007424:	0112      	lsls	r2, r2, #4
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	b29b      	uxth	r3, r3
	int16_t friction_wheel_speed = g_referee_limiters.projectile_speed
 800742c:	81fb      	strh	r3, [r7, #14]
	static uint32_t clear_time = 0;

	/**
	 * Finite state machine for flywheel
	 */
	switch (flywheel_state) {
 800742e:	4b7f      	ldr	r3, [pc, #508]	@ (800762c <flywheel_control+0x224>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d024      	beq.n	8007480 <flywheel_control+0x78>
 8007436:	2b02      	cmp	r3, #2
 8007438:	dc38      	bgt.n	80074ac <flywheel_control+0xa4>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00e      	beq.n	800745c <flywheel_control+0x54>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d134      	bne.n	80074ac <flywheel_control+0xa4>
	case WHEEL_STANDBY:
		if (launcher_ctrl_data.override == 1
 8007442:	4b7b      	ldr	r3, [pc, #492]	@ (8007630 <flywheel_control+0x228>)
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d004      	beq.n	8007454 <flywheel_control+0x4c>
				|| launcher_ctrl_data.firing != 0) {
 800744a:	4b79      	ldr	r3, [pc, #484]	@ (8007630 <flywheel_control+0x228>)
 800744c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02f      	beq.n	80074b4 <flywheel_control+0xac>
			flywheel_state = WHEEL_FIRING;
 8007454:	4b75      	ldr	r3, [pc, #468]	@ (800762c <flywheel_control+0x224>)
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]
		}
		break;
 800745a:	e02b      	b.n	80074b4 <flywheel_control+0xac>

	case WHEEL_FIRING:
		if (launcher_ctrl_data.firing == 0
 800745c:	4b74      	ldr	r3, [pc, #464]	@ (8007630 <flywheel_control+0x228>)
 800745e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d128      	bne.n	80074b8 <flywheel_control+0xb0>
				&& launcher_ctrl_data.override == 0) {
 8007466:	4b72      	ldr	r3, [pc, #456]	@ (8007630 <flywheel_control+0x228>)
 8007468:	791b      	ldrb	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d124      	bne.n	80074b8 <flywheel_control+0xb0>
			flywheel_state = WHEEL_CLEARING;
 800746e:	4b6f      	ldr	r3, [pc, #444]	@ (800762c <flywheel_control+0x224>)
 8007470:	2202      	movs	r2, #2
 8007472:	701a      	strb	r2, [r3, #0]
			clear_time = HAL_GetTick();
 8007474:	f002 fb8e 	bl	8009b94 <HAL_GetTick>
 8007478:	4603      	mov	r3, r0
 800747a:	4a6e      	ldr	r2, [pc, #440]	@ (8007634 <flywheel_control+0x22c>)
 800747c:	6013      	str	r3, [r2, #0]
		}
		break;
 800747e:	e01b      	b.n	80074b8 <flywheel_control+0xb0>

	case WHEEL_CLEARING:
		if (launcher_ctrl_data.firing != 0) {
 8007480:	4b6b      	ldr	r3, [pc, #428]	@ (8007630 <flywheel_control+0x228>)
 8007482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <flywheel_control+0x8a>
			flywheel_state = WHEEL_FIRING;
 800748a:	4b68      	ldr	r3, [pc, #416]	@ (800762c <flywheel_control+0x224>)
 800748c:	2200      	movs	r2, #0
 800748e:	701a      	strb	r2, [r3, #0]
		} else if (HAL_GetTick() - clear_time > CLEAR_DELAY) {
			flywheel_state = WHEEL_STANDBY;
		}
		break;
 8007490:	e014      	b.n	80074bc <flywheel_control+0xb4>
		} else if (HAL_GetTick() - clear_time > CLEAR_DELAY) {
 8007492:	f002 fb7f 	bl	8009b94 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	4b66      	ldr	r3, [pc, #408]	@ (8007634 <flywheel_control+0x22c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074a2:	d90b      	bls.n	80074bc <flywheel_control+0xb4>
			flywheel_state = WHEEL_STANDBY;
 80074a4:	4b61      	ldr	r3, [pc, #388]	@ (800762c <flywheel_control+0x224>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
		break;
 80074aa:	e007      	b.n	80074bc <flywheel_control+0xb4>

	default:
		flywheel_state = WHEEL_STANDBY;
 80074ac:	4b5f      	ldr	r3, [pc, #380]	@ (800762c <flywheel_control+0x224>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	e004      	b.n	80074be <flywheel_control+0xb6>
		break;
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <flywheel_control+0xb6>
		break;
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <flywheel_control+0xb6>
		break;
 80074bc:	bf00      	nop
	}

	switch (flywheel_state) {
 80074be:	4b5b      	ldr	r3, [pc, #364]	@ (800762c <flywheel_control+0x224>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d050      	beq.n	8007568 <flywheel_control+0x160>
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	f300 8096 	bgt.w	80075f8 <flywheel_control+0x1f0>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d04b      	beq.n	8007568 <flywheel_control+0x160>
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f040 8091 	bne.w	80075f8 <flywheel_control+0x1f0>
	case WHEEL_STANDBY:
		if (ref_game_state.game_progress == 4) {
 80074d6:	4b58      	ldr	r3, [pc, #352]	@ (8007638 <flywheel_control+0x230>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	f023 030f 	bic.w	r3, r3, #15
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b40      	cmp	r3, #64	@ 0x40
 80074e2:	d138      	bne.n	8007556 <flywheel_control+0x14e>
			speed_pid( FRICTION_SB_SPIN * FRICTION_INVERT,
					l_flywheel->raw_data.rpm, &l_flywheel->rpm_pid);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid( FRICTION_SB_SPIN * FRICTION_INVERT,
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7f9 f81a 	bl	8000524 <__aeabi_i2d>
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3310      	adds	r3, #16
 80074f8:	4618      	mov	r0, r3
 80074fa:	ec45 4b11 	vmov	d1, r4, r5
 80074fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007618 <flywheel_control+0x210>
 8007502:	f001 fc87 	bl	8008e14 <speed_pid>
			speed_pid(-FRICTION_SB_SPIN * FRICTION_INVERT,
					r_flywheel->raw_data.rpm, &r_flywheel->rpm_pid);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(-FRICTION_SB_SPIN * FRICTION_INVERT,
 800750c:	4618      	mov	r0, r3
 800750e:	f7f9 f809 	bl	8000524 <__aeabi_i2d>
 8007512:	4604      	mov	r4, r0
 8007514:	460d      	mov	r5, r1
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	3310      	adds	r3, #16
 800751a:	4618      	mov	r0, r3
 800751c:	ec45 4b11 	vmov	d1, r4, r5
 8007520:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8007620 <flywheel_control+0x218>
 8007524:	f001 fc76 	bl	8008e14 <speed_pid>
			l_flywheel->output = l_flywheel->rpm_pid.output;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800752e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007532:	ee17 3a90 	vmov	r3, s15
 8007536:	b21a      	sxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
			r_flywheel->output = r_flywheel->rpm_pid.output;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007548:	ee17 3a90 	vmov	r3, s15
 800754c:	b21a      	sxth	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		} else {
			l_flywheel->output = 0;
			r_flywheel->output = 0;

		}
		break;
 8007554:	e059      	b.n	800760a <flywheel_control+0x202>
			l_flywheel->output = 0;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
			r_flywheel->output = 0;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2200      	movs	r2, #0
 8007562:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		break;
 8007566:	e050      	b.n	800760a <flywheel_control+0x202>

	case WHEEL_CLEARING:
	case WHEEL_FIRING:
		speed_pid(friction_wheel_speed * FRICTION_INVERT,
 8007568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800756c:	425b      	negs	r3, r3
 800756e:	4618      	mov	r0, r3
 8007570:	f7f8 ffd8 	bl	8000524 <__aeabi_i2d>
 8007574:	4604      	mov	r4, r0
 8007576:	460d      	mov	r5, r1
				l_flywheel->raw_data.rpm, &l_flywheel->rpm_pid);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(friction_wheel_speed * FRICTION_INVERT,
 800757e:	4618      	mov	r0, r3
 8007580:	f7f8 ffd0 	bl	8000524 <__aeabi_i2d>
 8007584:	4680      	mov	r8, r0
 8007586:	4689      	mov	r9, r1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3310      	adds	r3, #16
 800758c:	4618      	mov	r0, r3
 800758e:	ec49 8b11 	vmov	d1, r8, r9
 8007592:	ec45 4b10 	vmov	d0, r4, r5
 8007596:	f001 fc3d 	bl	8008e14 <speed_pid>
		speed_pid(-friction_wheel_speed * FRICTION_INVERT,
 800759a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7f8 ffc0 	bl	8000524 <__aeabi_i2d>
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
				r_flywheel->raw_data.rpm, &r_flywheel->rpm_pid);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(-friction_wheel_speed * FRICTION_INVERT,
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f8 ffb8 	bl	8000524 <__aeabi_i2d>
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	3310      	adds	r3, #16
 80075bc:	4618      	mov	r0, r3
 80075be:	ec49 8b11 	vmov	d1, r8, r9
 80075c2:	ec45 4b10 	vmov	d0, r4, r5
 80075c6:	f001 fc25 	bl	8008e14 <speed_pid>
		l_flywheel->output = l_flywheel->rpm_pid.output;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80075d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075d4:	ee17 3a90 	vmov	r3, s15
 80075d8:	b21a      	sxth	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		r_flywheel->output = r_flywheel->rpm_pid.output;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80075e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075ea:	ee17 3a90 	vmov	r3, s15
 80075ee:	b21a      	sxth	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		break;
 80075f6:	e008      	b.n	800760a <flywheel_control+0x202>

	default:
		l_flywheel->output = 0;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		r_flywheel->output = 0;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2200      	movs	r2, #0
 8007604:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		break;
 8007608:	bf00      	nop
	}

}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007614:	f3af 8000 	nop.w
 8007618:	00000000 	.word	0x00000000
 800761c:	c09f4000 	.word	0xc09f4000
 8007620:	00000000 	.word	0x00000000
 8007624:	409f4000 	.word	0x409f4000
 8007628:	20003348 	.word	0x20003348
 800762c:	20003278 	.word	0x20003278
 8007630:	20002fdc 	.word	0x20002fdc
 8007634:	2000327c 	.word	0x2000327c
 8007638:	200033a4 	.word	0x200033a4
 800763c:	00000000 	.word	0x00000000

08007640 <launcher_control>:

#ifndef ANGLE_FEEDER

void launcher_control(motor_data_t *l_flywheel, motor_data_t *r_flywheel,
		motor_data_t *feeder) {
 8007640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007644:	b086      	sub	sp, #24
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
	};

	static uint32_t jam_start_time = 0;
	static enum feeder_state_e feeder_state;

	int16_t feeder_speed = launcher_ctrl_data.firing
 800764e:	4bba      	ldr	r3, [pc, #744]	@ (8007938 <launcher_control+0x2f8>)
 8007650:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007654:	461a      	mov	r2, r3
			* g_referee_limiters.feeding_speed * FEEDER_INVERT
 8007656:	4bb9      	ldr	r3, [pc, #740]	@ (800793c <launcher_control+0x2fc>)
 8007658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
			/ FEEDER_SPEED_RATIO;
 8007660:	2b00      	cmp	r3, #0
 8007662:	da00      	bge.n	8007666 <launcher_control+0x26>
 8007664:	3307      	adds	r3, #7
 8007666:	10db      	asrs	r3, r3, #3
	int16_t feeder_speed = launcher_ctrl_data.firing
 8007668:	82fb      	strh	r3, [r7, #22]
	int16_t friction_wheel_speed = g_referee_limiters.projectile_speed
 800766a:	4bb4      	ldr	r3, [pc, #720]	@ (800793c <launcher_control+0x2fc>)
 800766c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007670:	b29b      	uxth	r3, r3
			* PROJECTILE_SPEED_RATIO;
 8007672:	461a      	mov	r2, r3
 8007674:	0052      	lsls	r2, r2, #1
 8007676:	4413      	add	r3, r2
 8007678:	461a      	mov	r2, r3
 800767a:	0112      	lsls	r2, r2, #4
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	b29b      	uxth	r3, r3
	int16_t friction_wheel_speed = g_referee_limiters.projectile_speed
 8007682:	82bb      	strh	r3, [r7, #20]

	int16_t rpm_diff = abs(l_flywheel->raw_data.rpm + r_flywheel->raw_data.rpm);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800768a:	461a      	mov	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007692:	4413      	add	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfb8      	it	lt
 8007698:	425b      	neglt	r3, r3
 800769a:	827b      	strh	r3, [r7, #18]
	int16_t avg_rpm = abs(l_flywheel->raw_data.rpm - r_flywheel->raw_data.rpm)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfb8      	it	lt
 80076b0:	425b      	neglt	r3, r3
			/ 2;
 80076b2:	0fda      	lsrs	r2, r3, #31
 80076b4:	4413      	add	r3, r2
 80076b6:	105b      	asrs	r3, r3, #1
	int16_t avg_rpm = abs(l_flywheel->raw_data.rpm - r_flywheel->raw_data.rpm)
 80076b8:	823b      	strh	r3, [r7, #16]

	/**
	 * Finite state machine for feeder
	 */
	switch (feeder_state) {
 80076ba:	4ba1      	ldr	r3, [pc, #644]	@ (8007940 <launcher_control+0x300>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b04      	cmp	r3, #4
 80076c0:	f200 8097 	bhi.w	80077f2 <launcher_control+0x1b2>
 80076c4:	a201      	add	r2, pc, #4	@ (adr r2, 80076cc <launcher_control+0x8c>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076e1 	.word	0x080076e1
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	08007723 	.word	0x08007723
 80076d8:	080077a5 	.word	0x080077a5
 80076dc:	080077cf 	.word	0x080077cf
	case FEEDER_STANDBY:
		if (launcher_ctrl_data.firing != 0) {
 80076e0:	4b95      	ldr	r3, [pc, #596]	@ (8007938 <launcher_control+0x2f8>)
 80076e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8087 	beq.w	80077fa <launcher_control+0x1ba>
			feeder_state = FEEDER_SPINUP;
 80076ec:	4b94      	ldr	r3, [pc, #592]	@ (8007940 <launcher_control+0x300>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80076f2:	e082      	b.n	80077fa <launcher_control+0x1ba>
	case FEEDER_SPINUP:
		if (abs(avg_rpm - friction_wheel_speed) < LAUNCHER_MARGIN) {
 80076f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80076f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8007702:	db7c      	blt.n	80077fe <launcher_control+0x1be>
 8007704:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007708:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b63      	cmp	r3, #99	@ 0x63
 8007710:	dc75      	bgt.n	80077fe <launcher_control+0x1be>
			if (rpm_diff < LAUNCHER_DIFF_MARGIN) {
 8007712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007716:	2b63      	cmp	r3, #99	@ 0x63
 8007718:	dc71      	bgt.n	80077fe <launcher_control+0x1be>
				feeder_state = FEEDER_FIRING;
 800771a:	4b89      	ldr	r3, [pc, #548]	@ (8007940 <launcher_control+0x300>)
 800771c:	2202      	movs	r2, #2
 800771e:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8007720:	e06d      	b.n	80077fe <launcher_control+0x1be>

	case FEEDER_FIRING:
		//check for feeder jam first, prioritise unjamming
		if ((feeder->raw_data.torque)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007728:	f242 6248 	movw	r2, #9800	@ 0x2648
 800772c:	4293      	cmp	r3, r2
 800772e:	dd15      	ble.n	800775c <launcher_control+0x11c>
				> (FEEDER_JAM_TORQUE * FEEDER_INVERT) && (abs(feeder->raw_data.rpm) < FEEDER_JAM_RPM)) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfb8      	it	lt
 800773a:	425b      	neglt	r3, r3
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b63      	cmp	r3, #99	@ 0x63
 8007740:	d80c      	bhi.n	800775c <launcher_control+0x11c>
			jam_start_time = HAL_GetTick();
 8007742:	f002 fa27 	bl	8009b94 <HAL_GetTick>
 8007746:	4603      	mov	r3, r0
 8007748:	4a7e      	ldr	r2, [pc, #504]	@ (8007944 <launcher_control+0x304>)
 800774a:	6013      	str	r3, [r2, #0]
			feeder->rpm_pid.integral = 0;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	625a      	str	r2, [r3, #36]	@ 0x24
			feeder_state = FEEDER_JAM;
 8007754:	4b7a      	ldr	r3, [pc, #488]	@ (8007940 <launcher_control+0x300>)
 8007756:	2203      	movs	r2, #3
 8007758:	701a      	strb	r2, [r3, #0]
			break;
 800775a:	e057      	b.n	800780c <launcher_control+0x1cc>
		}

		if (launcher_ctrl_data.firing == 0) {
 800775c:	4b76      	ldr	r3, [pc, #472]	@ (8007938 <launcher_control+0x2f8>)
 800775e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <launcher_control+0x12e>
			feeder_state = FEEDER_STANDBY;
 8007766:	4b76      	ldr	r3, [pc, #472]	@ (8007940 <launcher_control+0x300>)
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
			break;
 800776c:	e04e      	b.n	800780c <launcher_control+0x1cc>
		}

		if (check_overheat() == 0) {
 800776e:	f7ff fd8b 	bl	8007288 <check_overheat>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <launcher_control+0x140>
			feeder_state = FEEDER_OVERHEAT;
 8007778:	4b71      	ldr	r3, [pc, #452]	@ (8007940 <launcher_control+0x300>)
 800777a:	2204      	movs	r2, #4
 800777c:	701a      	strb	r2, [r3, #0]
			break;
 800777e:	e045      	b.n	800780c <launcher_control+0x1cc>
		}
		//one side will always be negative

		if (abs(avg_rpm - friction_wheel_speed) > LAUNCHER_MARGIN) {
 8007780:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007784:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	bfb8      	it	lt
 800778e:	425b      	neglt	r3, r3
 8007790:	2b64      	cmp	r3, #100	@ 0x64
 8007792:	dd36      	ble.n	8007802 <launcher_control+0x1c2>
			if (rpm_diff > LAUNCHER_DIFF_MARGIN) {
 8007794:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007798:	2b64      	cmp	r3, #100	@ 0x64
 800779a:	dd32      	ble.n	8007802 <launcher_control+0x1c2>
				feeder_state = FEEDER_SPINUP;
 800779c:	4b68      	ldr	r3, [pc, #416]	@ (8007940 <launcher_control+0x300>)
 800779e:	2201      	movs	r2, #1
 80077a0:	701a      	strb	r2, [r3, #0]
				break;
 80077a2:	e033      	b.n	800780c <launcher_control+0x1cc>
		//else stay firing
		break;

	case FEEDER_JAM:
		//check if either after unjam time
		if ((HAL_GetTick() - jam_start_time) > FEEDER_UNJAM_TIME) {
 80077a4:	f002 f9f6 	bl	8009b94 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	4b66      	ldr	r3, [pc, #408]	@ (8007944 <launcher_control+0x304>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b32      	cmp	r3, #50	@ 0x32
 80077b2:	d902      	bls.n	80077ba <launcher_control+0x17a>
			feeder_state = FEEDER_SPINUP;
 80077b4:	4b62      	ldr	r3, [pc, #392]	@ (8007940 <launcher_control+0x300>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	701a      	strb	r2, [r3, #0]
		}

		if ((feeder->raw_data.torque * FEEDER_INVERT)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80077c0:	4a61      	ldr	r2, [pc, #388]	@ (8007948 <launcher_control+0x308>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	da1f      	bge.n	8007806 <launcher_control+0x1c6>
				< -(FEEDER_JAM_TORQUE * FEEDER_INVERT)) {
			feeder_state = FEEDER_SPINUP;
 80077c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007940 <launcher_control+0x300>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	701a      	strb	r2, [r3, #0]
		}
		break;
 80077cc:	e01b      	b.n	8007806 <launcher_control+0x1c6>

	case FEEDER_OVERHEAT:
		if (check_overheat() > OVERHEAT_EXCESS) {
 80077ce:	f7ff fd5b 	bl	8007288 <check_overheat>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d918      	bls.n	800780a <launcher_control+0x1ca>
			if (launcher_ctrl_data.firing != 0) {
 80077d8:	4b57      	ldr	r3, [pc, #348]	@ (8007938 <launcher_control+0x2f8>)
 80077da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <launcher_control+0x1aa>
				feeder_state = FEEDER_SPINUP;
 80077e2:	4b57      	ldr	r3, [pc, #348]	@ (8007940 <launcher_control+0x300>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]
			} else {
				feeder_state = FEEDER_STANDBY;
			}
		}
		break;
 80077e8:	e00f      	b.n	800780a <launcher_control+0x1ca>
				feeder_state = FEEDER_STANDBY;
 80077ea:	4b55      	ldr	r3, [pc, #340]	@ (8007940 <launcher_control+0x300>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
		break;
 80077f0:	e00b      	b.n	800780a <launcher_control+0x1ca>

	default:
		feeder_state = FEEDER_STANDBY;
 80077f2:	4b53      	ldr	r3, [pc, #332]	@ (8007940 <launcher_control+0x300>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	e008      	b.n	800780c <launcher_control+0x1cc>
		break;
 80077fa:	bf00      	nop
 80077fc:	e006      	b.n	800780c <launcher_control+0x1cc>
		break;
 80077fe:	bf00      	nop
 8007800:	e004      	b.n	800780c <launcher_control+0x1cc>
		break;
 8007802:	bf00      	nop
 8007804:	e002      	b.n	800780c <launcher_control+0x1cc>
		break;
 8007806:	bf00      	nop
 8007808:	e000      	b.n	800780c <launcher_control+0x1cc>
		break;
 800780a:	bf00      	nop
	}

	switch (feeder_state) {
 800780c:	4b4c      	ldr	r3, [pc, #304]	@ (8007940 <launcher_control+0x300>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b04      	cmp	r3, #4
 8007812:	f200 8082 	bhi.w	800791a <launcher_control+0x2da>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <launcher_control+0x1dc>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	08007831 	.word	0x08007831
 8007820:	08007831 	.word	0x08007831
 8007824:	0800786b 	.word	0x0800786b
 8007828:	080078c7 	.word	0x080078c7
 800782c:	08007831 	.word	0x08007831
	case FEEDER_STANDBY:
	case FEEDER_SPINUP:
	case FEEDER_OVERHEAT:
		speed_pid(0, feeder->raw_data.rpm, &feeder->rpm_pid);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007836:	4618      	mov	r0, r3
 8007838:	f7f8 fe74 	bl	8000524 <__aeabi_i2d>
 800783c:	4604      	mov	r4, r0
 800783e:	460d      	mov	r5, r1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3310      	adds	r3, #16
 8007844:	4618      	mov	r0, r3
 8007846:	ec45 4b11 	vmov	d1, r4, r5
 800784a:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 8007930 <launcher_control+0x2f0>
 800784e:	f001 fae1 	bl	8008e14 <speed_pid>
		feeder->output = feeder->rpm_pid.output;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800785c:	ee17 3a90 	vmov	r3, s15
 8007860:	b21a      	sxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
//		feeder->output = 0;
		break;
 8007868:	e05c      	b.n	8007924 <launcher_control+0x2e4>

	case FEEDER_FIRING:
		speed_pid(feeder_speed * feeder->angle_data.gearbox_ratio,
 800786a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800787c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007880:	ee17 0a90 	vmov	r0, s15
 8007884:	f7f8 fe60 	bl	8000548 <__aeabi_f2d>
 8007888:	4604      	mov	r4, r0
 800788a:	460d      	mov	r5, r1
				feeder->raw_data.rpm, &feeder->rpm_pid);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(feeder_speed * feeder->angle_data.gearbox_ratio,
 8007892:	4618      	mov	r0, r3
 8007894:	f7f8 fe46 	bl	8000524 <__aeabi_i2d>
 8007898:	4680      	mov	r8, r0
 800789a:	4689      	mov	r9, r1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3310      	adds	r3, #16
 80078a0:	4618      	mov	r0, r3
 80078a2:	ec49 8b11 	vmov	d1, r8, r9
 80078a6:	ec45 4b10 	vmov	d0, r4, r5
 80078aa:	f001 fab3 	bl	8008e14 <speed_pid>
		feeder->output = feeder->rpm_pid.output;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80078b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b8:	ee17 3a90 	vmov	r3, s15
 80078bc:	b21a      	sxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		break;
 80078c4:	e02e      	b.n	8007924 <launcher_control+0x2e4>

	case FEEDER_JAM:
		speed_pid(
				FEEDER_UNJAM_SPD * feeder->angle_data.gearbox_ratio
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
						* FEEDER_INVERT, feeder->raw_data.rpm,
 80078cc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800794c <launcher_control+0x30c>
 80078d0:	ee67 7a87 	vmul.f32	s15, s15, s14
		speed_pid(
 80078d4:	ee17 0a90 	vmov	r0, s15
 80078d8:	f7f8 fe36 	bl	8000548 <__aeabi_f2d>
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
						* FEEDER_INVERT, feeder->raw_data.rpm,
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7f8 fe1c 	bl	8000524 <__aeabi_i2d>
 80078ec:	4680      	mov	r8, r0
 80078ee:	4689      	mov	r9, r1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3310      	adds	r3, #16
 80078f4:	4618      	mov	r0, r3
 80078f6:	ec49 8b11 	vmov	d1, r8, r9
 80078fa:	ec45 4b10 	vmov	d0, r4, r5
 80078fe:	f001 fa89 	bl	8008e14 <speed_pid>
				&feeder->rpm_pid);
		feeder->output = feeder->rpm_pid.output;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800790c:	ee17 3a90 	vmov	r3, s15
 8007910:	b21a      	sxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		break;
 8007918:	e004      	b.n	8007924 <launcher_control+0x2e4>

	default:
		feeder->output = 0;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
	}

}
 8007922:	bf00      	nop
 8007924:	bf00      	nop
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800792e:	bf00      	nop
	...
 8007938:	20002fdc 	.word	0x20002fdc
 800793c:	20003348 	.word	0x20003348
 8007940:	20003280 	.word	0x20003280
 8007944:	20003284 	.word	0x20003284
 8007948:	ffffd9b8 	.word	0xffffd9b8
 800794c:	c3fa0000 	.word	0xc3fa0000

08007950 <master_task>:
QueueHandle_t uart_data_queue;

extern gimbal_control_t gimbal_ctrl_data;


void master_task(void* argument){
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af02      	add	r7, sp, #8
 8007956:	6078      	str	r0, [r7, #4]
//	imu_init();
//	led_green_off();
//	start_micros_timer();
//	led_toggle();

	gimbal_event_group = xEventGroupCreate();
 8007958:	f00e f937 	bl	8015bca <xEventGroupCreate>
 800795c:	4603      	mov	r3, r0
 800795e:	4a68      	ldr	r2, [pc, #416]	@ (8007b00 <master_task+0x1b0>)
 8007960:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8007962:	f00e f932 	bl	8015bca <xEventGroupCreate>
 8007966:	4603      	mov	r3, r0
 8007968:	4a66      	ldr	r2, [pc, #408]	@ (8007b04 <master_task+0x1b4>)
 800796a:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 800796c:	f00e f92d 	bl	8015bca <xEventGroupCreate>
 8007970:	4603      	mov	r3, r0
 8007972:	4a65      	ldr	r2, [pc, #404]	@ (8007b08 <master_task+0x1b8>)
 8007974:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8007976:	2203      	movs	r2, #3
 8007978:	2100      	movs	r1, #0
 800797a:	2001      	movs	r0, #1
 800797c:	f00e fcb5 	bl	80162ea <xQueueGenericCreate>
 8007980:	4603      	mov	r3, r0
 8007982:	4a62      	ldr	r2, [pc, #392]	@ (8007b0c <master_task+0x1bc>)
 8007984:	6013      	str	r3, [r2, #0]


	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 8007986:	2200      	movs	r2, #0
 8007988:	2110      	movs	r1, #16
 800798a:	2005      	movs	r0, #5
 800798c:	f00e fcad 	bl	80162ea <xQueueGenericCreate>
 8007990:	4603      	mov	r3, r0
 8007992:	4a5f      	ldr	r2, [pc, #380]	@ (8007b10 <master_task+0x1c0>)
 8007994:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 8007996:	2200      	movs	r2, #0
 8007998:	2110      	movs	r1, #16
 800799a:	2005      	movs	r0, #5
 800799c:	f00e fca5 	bl	80162ea <xQueueGenericCreate>
 80079a0:	4603      	mov	r3, r0
 80079a2:	4a5c      	ldr	r2, [pc, #368]	@ (8007b14 <master_task+0x1c4>)
 80079a4:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 80079a6:	2200      	movs	r2, #0
 80079a8:	210c      	movs	r1, #12
 80079aa:	2005      	movs	r0, #5
 80079ac:	f00e fc9d 	bl	80162ea <xQueueGenericCreate>
 80079b0:	4603      	mov	r3, r0
 80079b2:	4a59      	ldr	r2, [pc, #356]	@ (8007b18 <master_task+0x1c8>)
 80079b4:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	g_buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 80079b6:	2200      	movs	r2, #0
 80079b8:	2101      	movs	r1, #1
 80079ba:	2030      	movs	r0, #48	@ 0x30
 80079bc:	f00e fc95 	bl	80162ea <xQueueGenericCreate>
 80079c0:	4603      	mov	r3, r0
 80079c2:	4a56      	ldr	r2, [pc, #344]	@ (8007b1c <master_task+0x1cc>)
 80079c4:	6013      	str	r3, [r2, #0]


	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(imu_processing_task, "IMU_task",
 80079c6:	4b56      	ldr	r3, [pc, #344]	@ (8007b20 <master_task+0x1d0>)
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	230f      	movs	r3, #15
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	2301      	movs	r3, #1
 80079d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079d4:	4953      	ldr	r1, [pc, #332]	@ (8007b24 <master_task+0x1d4>)
 80079d6:	4854      	ldr	r0, [pc, #336]	@ (8007b28 <master_task+0x1d8>)
 80079d8:	f00f f9c8 	bl	8016d6c <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 80079dc:	4b53      	ldr	r3, [pc, #332]	@ (8007b2c <master_task+0x1dc>)
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	2309      	movs	r3, #9
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	2301      	movs	r3, #1
 80079e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079ea:	4951      	ldr	r1, [pc, #324]	@ (8007b30 <master_task+0x1e0>)
 80079ec:	4851      	ldr	r0, [pc, #324]	@ (8007b34 <master_task+0x1e4>)
 80079ee:	f00f f9bd 	bl	8016d6c <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 9,
			&motor_calib_task_handle);

	if (gimbal_event_group == NULL) {
 80079f2:	4b43      	ldr	r3, [pc, #268]	@ (8007b00 <master_task+0x1b0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <master_task+0xc0>
		//error handler implement next time!
	} else {
		xTaskCreate(gimbal_control_task, "gimbal_task",
 80079fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007b38 <master_task+0x1e8>)
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	2307      	movs	r3, #7
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2301      	movs	r3, #1
 8007a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a08:	494c      	ldr	r1, [pc, #304]	@ (8007b3c <master_task+0x1ec>)
 8007a0a:	484d      	ldr	r0, [pc, #308]	@ (8007b40 <master_task+0x1f0>)
 8007a0c:	f00f f9ae 	bl	8016d6c <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 7,
				&gimbal_control_task_handle);

	}

	if (chassis_event_group == NULL) {
 8007a10:	4b3c      	ldr	r3, [pc, #240]	@ (8007b04 <master_task+0x1b4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <master_task+0xde>
		//error handler
	} else {
		xTaskCreate(movement_control_task, "chassis_task",
 8007a18:	4b4a      	ldr	r3, [pc, #296]	@ (8007b44 <master_task+0x1f4>)
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	2301      	movs	r3, #1
 8007a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a26:	4948      	ldr	r1, [pc, #288]	@ (8007b48 <master_task+0x1f8>)
 8007a28:	4848      	ldr	r0, [pc, #288]	@ (8007b4c <master_task+0x1fc>)
 8007a2a:	f00f f99f 	bl	8016d6c <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&movement_control_task_handle);
	}

	if (launcher_event_group == NULL) {
 8007a2e:	4b36      	ldr	r3, [pc, #216]	@ (8007b08 <master_task+0x1b8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <master_task+0xfc>
		//error handler
	} else {
		xTaskCreate(launcher_control_task, "launcher_task",
 8007a36:	4b46      	ldr	r3, [pc, #280]	@ (8007b50 <master_task+0x200>)
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a44:	4943      	ldr	r1, [pc, #268]	@ (8007b54 <master_task+0x204>)
 8007a46:	4844      	ldr	r0, [pc, #272]	@ (8007b58 <master_task+0x208>)
 8007a48:	f00f f990 	bl	8016d6c <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&launcher_control_task_handle);
	}
	gimbal_ctrl_data.yaw_semaphore = xSemaphoreCreateBinary();
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	2100      	movs	r1, #0
 8007a50:	2001      	movs	r0, #1
 8007a52:	f00e fc4a 	bl	80162ea <xQueueGenericCreate>
 8007a56:	4603      	mov	r3, r0
 8007a58:	4a40      	ldr	r2, [pc, #256]	@ (8007b5c <master_task+0x20c>)
 8007a5a:	6113      	str	r3, [r2, #16]
	xSemaphoreGive(gimbal_ctrl_data.yaw_semaphore);
 8007a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b5c <master_task+0x20c>)
 8007a5e:	6918      	ldr	r0, [r3, #16]
 8007a60:	2300      	movs	r3, #0
 8007a62:	2200      	movs	r2, #0
 8007a64:	2100      	movs	r1, #0
 8007a66:	f00e fc9f 	bl	80163a8 <xQueueGenericSend>
	xTaskCreate(control_input_task, "RC_task",
 8007a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b60 <master_task+0x210>)
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	2304      	movs	r3, #4
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	2301      	movs	r3, #1
 8007a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a78:	493a      	ldr	r1, [pc, #232]	@ (8007b64 <master_task+0x214>)
 8007a7a:	483b      	ldr	r0, [pc, #236]	@ (8007b68 <master_task+0x218>)
 8007a7c:	f00f f976 	bl	8016d6c <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 512, (void*) 1,
 8007a80:	4b3a      	ldr	r3, [pc, #232]	@ (8007b6c <master_task+0x21c>)
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	2302      	movs	r3, #2
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a8e:	4938      	ldr	r1, [pc, #224]	@ (8007b70 <master_task+0x220>)
 8007a90:	4838      	ldr	r0, [pc, #224]	@ (8007b74 <master_task+0x224>)
 8007a92:	f00f f96b 	bl	8016d6c <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(motor_control_task, "motor_control_task", 512, (void*) 3,
 8007a96:	4b38      	ldr	r3, [pc, #224]	@ (8007b78 <master_task+0x228>)
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aa4:	4935      	ldr	r1, [pc, #212]	@ (8007b7c <master_task+0x22c>)
 8007aa6:	4836      	ldr	r0, [pc, #216]	@ (8007b80 <master_task+0x230>)
 8007aa8:	f00f f960 	bl	8016d6c <xTaskCreate>
			(UBaseType_t) 8, &motor_control_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 8007aac:	4b35      	ldr	r3, [pc, #212]	@ (8007b84 <master_task+0x234>)
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aba:	4933      	ldr	r1, [pc, #204]	@ (8007b88 <master_task+0x238>)
 8007abc:	4833      	ldr	r0, [pc, #204]	@ (8007b8c <master_task+0x23c>)
 8007abe:	f00f f955 	bl	8016d6c <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);
	if (usb_continue_semaphore == NULL) {
 8007ac2:	4b12      	ldr	r3, [pc, #72]	@ (8007b0c <master_task+0x1bc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <master_task+0x190>
		//error handler
	} else {
		xTaskCreate(usb_task, "usb_task",
 8007aca:	4b31      	ldr	r3, [pc, #196]	@ (8007b90 <master_task+0x240>)
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ad8:	492e      	ldr	r1, [pc, #184]	@ (8007b94 <master_task+0x244>)
 8007ada:	482f      	ldr	r0, [pc, #188]	@ (8007b98 <master_task+0x248>)
 8007adc:	f00f f946 	bl	8016d6c <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &usb_task_handle);
	}

//	xTaskCreate(telemetry_task, "telemetry_task", 700, (void*) 1,
//			(UBaseType_t) 5, &telemetry_task_handle);
	xTaskCreate(hud_task, "hud_task", 512, (void*) 3,
 8007ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8007b9c <master_task+0x24c>)
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	2305      	movs	r3, #5
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	2303      	movs	r3, #3
 8007aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aee:	492c      	ldr	r1, [pc, #176]	@ (8007ba0 <master_task+0x250>)
 8007af0:	482c      	ldr	r0, [pc, #176]	@ (8007ba4 <master_task+0x254>)
 8007af2:	f00f f93b 	bl	8016d6c <xTaskCreate>
			(UBaseType_t) 5, &hud_task_handle);


//	vTaskDelete(master_task_handle);
	while(1){
		vTaskDelay(1000);
 8007af6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007afa:	f00f fb3f 	bl	801717c <vTaskDelay>
 8007afe:	e7fa      	b.n	8007af6 <master_task+0x1a6>
 8007b00:	200032b4 	.word	0x200032b4
 8007b04:	200032b8 	.word	0x200032b8
 8007b08:	200032bc 	.word	0x200032bc
 8007b0c:	200032c0 	.word	0x200032c0
 8007b10:	200032c4 	.word	0x200032c4
 8007b14:	200032c8 	.word	0x200032c8
 8007b18:	200032cc 	.word	0x200032cc
 8007b1c:	200032d0 	.word	0x200032d0
 8007b20:	200032a8 	.word	0x200032a8
 8007b24:	080201f4 	.word	0x080201f4
 8007b28:	080071a9 	.word	0x080071a9
 8007b2c:	200032a0 	.word	0x200032a0
 8007b30:	08020200 	.word	0x08020200
 8007b34:	08008b4d 	.word	0x08008b4d
 8007b38:	20003288 	.word	0x20003288
 8007b3c:	08020214 	.word	0x08020214
 8007b40:	08006171 	.word	0x08006171
 8007b44:	2000328c 	.word	0x2000328c
 8007b48:	08020220 	.word	0x08020220
 8007b4c:	08009509 	.word	0x08009509
 8007b50:	20003298 	.word	0x20003298
 8007b54:	08020230 	.word	0x08020230
 8007b58:	080071e9 	.word	0x080071e9
 8007b5c:	20002fe4 	.word	0x20002fe4
 8007b60:	20003294 	.word	0x20003294
 8007b64:	08020240 	.word	0x08020240
 8007b68:	08005319 	.word	0x08005319
 8007b6c:	20003290 	.word	0x20003290
 8007b70:	08020248 	.word	0x08020248
 8007b74:	08009615 	.word	0x08009615
 8007b78:	200032ac 	.word	0x200032ac
 8007b7c:	08020258 	.word	0x08020258
 8007b80:	08008fc1 	.word	0x08008fc1
 8007b84:	2000329c 	.word	0x2000329c
 8007b88:	0802026c 	.word	0x0802026c
 8007b8c:	08004a79 	.word	0x08004a79
 8007b90:	200032a4 	.word	0x200032a4
 8007b94:	08020278 	.word	0x08020278
 8007b98:	08009b19 	.word	0x08009b19
 8007b9c:	200032b0 	.word	0x200032b0
 8007ba0:	08020284 	.word	0x08020284
 8007ba4:	0800633d 	.word	0x0800633d

08007ba8 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t g_buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t *motor) {
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	//general config:
	switch (motor->motor_type) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	f200 80fc 	bhi.w	8007db4 <set_motor_config+0x20c>
 8007bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <set_motor_config+0x1c>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007ca1 	.word	0x08007ca1
 8007bc8:	08007d59 	.word	0x08007d59
 8007bcc:	08007be9 	.word	0x08007be9
 8007bd0:	08007c43 	.word	0x08007c43
 8007bd4:	08007be9 	.word	0x08007be9
 8007bd8:	08007d59 	.word	0x08007d59
 8007bdc:	08007d59 	.word	0x08007d59
 8007be0:	08007be9 	.word	0x08007be9
 8007be4:	08007cfd 	.word	0x08007cfd
	case TYPE_M3508_ANGLE:
	case TYPE_M3508_STEPS:
	case TYPE_M3508:
		motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a78      	ldr	r2, [pc, #480]	@ (8007dcc <set_motor_config+0x224>)
 8007bec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		motor->angle_pid.physical_max = M3508_MAX_RPM;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a77      	ldr	r2, [pc, #476]	@ (8007dd0 <set_motor_config+0x228>)
 8007bf4:	665a      	str	r2, [r3, #100]	@ 0x64
		motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8007bfc:	635a      	str	r2, [r3, #52]	@ 0x34
		motor->angle_data.min_ticks = -4096 * M3508_GEARBOX_RATIO;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a74      	ldr	r2, [pc, #464]	@ (8007dd4 <set_motor_config+0x22c>)
 8007c02:	679a      	str	r2, [r3, #120]	@ 0x78
		motor->angle_data.max_ticks = 4096 * M3508_GEARBOX_RATIO;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a74      	ldr	r2, [pc, #464]	@ (8007dd8 <set_motor_config+0x230>)
 8007c08:	67da      	str	r2, [r3, #124]	@ 0x7c
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
				- motor->angle_data.min_ticks;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c12:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		motor->angle_data.min_ang = -PI;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a6f      	ldr	r2, [pc, #444]	@ (8007ddc <set_motor_config+0x234>)
 8007c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		motor->angle_data.max_ang = PI;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a6e      	ldr	r2, [pc, #440]	@ (8007de0 <set_motor_config+0x238>)
 8007c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		motor->angle_data.ang_range = motor->angle_data.max_ang - motor->angle_data.min_ang;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8007c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		break;
 8007c40:	e0b9      	b.n	8007db6 <set_motor_config+0x20e>
	case TYPE_M3508_NGEARBOX:
		motor->angle_data.gearbox_ratio = 1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007c48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		motor->angle_pid.physical_max = M3508_MAX_RPM;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a60      	ldr	r2, [pc, #384]	@ (8007dd0 <set_motor_config+0x228>)
 8007c50:	665a      	str	r2, [r3, #100]	@ 0x64
		motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8007c58:	635a      	str	r2, [r3, #52]	@ 0x34
		motor->angle_data.min_ticks = -4096;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a61      	ldr	r2, [pc, #388]	@ (8007de4 <set_motor_config+0x23c>)
 8007c5e:	679a      	str	r2, [r3, #120]	@ 0x78
		motor->angle_data.max_ticks = 4096;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c66:	67da      	str	r2, [r3, #124]	@ 0x7c
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
				- motor->angle_data.min_ticks;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c70:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		motor->angle_data.min_ang = -PI;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a58      	ldr	r2, [pc, #352]	@ (8007ddc <set_motor_config+0x234>)
 8007c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		motor->angle_data.max_ang = PI;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a57      	ldr	r2, [pc, #348]	@ (8007de0 <set_motor_config+0x238>)
 8007c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
				- motor->angle_data.min_ang;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8007c94:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		break;
 8007c9e:	e08a      	b.n	8007db6 <set_motor_config+0x20e>

	case TYPE_GM6020:
		motor->angle_data.gearbox_ratio = 1;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007ca6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		motor->angle_pid.physical_max = GM6020_MAX_RPM;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a4e      	ldr	r2, [pc, #312]	@ (8007de8 <set_motor_config+0x240>)
 8007cae:	665a      	str	r2, [r3, #100]	@ 0x64
		motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8007dec <set_motor_config+0x244>)
 8007cb4:	635a      	str	r2, [r3, #52]	@ 0x34
		motor->angle_data.min_ticks = -4096;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8007de4 <set_motor_config+0x23c>)
 8007cba:	679a      	str	r2, [r3, #120]	@ 0x78
		motor->angle_data.max_ticks = 4096;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007cc2:	67da      	str	r2, [r3, #124]	@ 0x7c
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
				- motor->angle_data.min_ticks;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ccc:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		motor->angle_data.max_ang = PI;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a42      	ldr	r2, [pc, #264]	@ (8007de0 <set_motor_config+0x238>)
 8007cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		motor->angle_data.min_ang = -PI;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a3f      	ldr	r2, [pc, #252]	@ (8007ddc <set_motor_config+0x234>)
 8007ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
				- motor->angle_data.min_ang;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8007cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		break;
 8007cfa:	e05c      	b.n	8007db6 <set_motor_config+0x20e>

	case TYPE_GM6020_720:
		motor->angle_data.gearbox_ratio = 0;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		motor->angle_pid.physical_max = GM6020_MAX_RPM;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a37      	ldr	r2, [pc, #220]	@ (8007de8 <set_motor_config+0x240>)
 8007d0a:	665a      	str	r2, [r3, #100]	@ 0x64
		motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a37      	ldr	r2, [pc, #220]	@ (8007dec <set_motor_config+0x244>)
 8007d10:	635a      	str	r2, [r3, #52]	@ 0x34
		motor->angle_data.min_ticks = -8192;	//-4096*2
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a36      	ldr	r2, [pc, #216]	@ (8007df0 <set_motor_config+0x248>)
 8007d16:	679a      	str	r2, [r3, #120]	@ 0x78
		motor->angle_data.max_ticks = 8192;	//4096*2
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007d1e:	67da      	str	r2, [r3, #124]	@ 0x7c
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
				- motor->angle_data.min_ticks;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d28:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		motor->angle_data.min_ang = -2 * PI;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a30      	ldr	r2, [pc, #192]	@ (8007df4 <set_motor_config+0x24c>)
 8007d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		motor->angle_data.max_ang = 2 * PI;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007df8 <set_motor_config+0x250>)
 8007d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
				- motor->angle_data.min_ang;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8007d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		break;
 8007d56:	e02e      	b.n	8007db6 <set_motor_config+0x20e>
	case TYPE_M2006:
	case TYPE_M2006_STEPS:
	case TYPE_M2006_ANGLE:
		motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a28      	ldr	r2, [pc, #160]	@ (8007dfc <set_motor_config+0x254>)
 8007d5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		motor->angle_pid.physical_max = M2006_MAX_RPM;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a27      	ldr	r2, [pc, #156]	@ (8007e00 <set_motor_config+0x258>)
 8007d64:	665a      	str	r2, [r3, #100]	@ 0x64
		motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8007d6c:	635a      	str	r2, [r3, #52]	@ 0x34
		motor->angle_data.min_ticks = -4096 * M2006_GEARBOX_RATIO;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a24      	ldr	r2, [pc, #144]	@ (8007e04 <set_motor_config+0x25c>)
 8007d72:	679a      	str	r2, [r3, #120]	@ 0x78
		motor->angle_data.max_ticks = 4096 * M2006_GEARBOX_RATIO;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f44f 3210 	mov.w	r2, #147456	@ 0x24000
 8007d7a:	67da      	str	r2, [r3, #124]	@ 0x7c
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
				- motor->angle_data.min_ticks;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d84:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		motor->angle_data.min_ang = -PI;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a13      	ldr	r2, [pc, #76]	@ (8007ddc <set_motor_config+0x234>)
 8007d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		motor->angle_data.max_ang = PI;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a12      	ldr	r2, [pc, #72]	@ (8007de0 <set_motor_config+0x238>)
 8007d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
				- motor->angle_data.min_ang;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8007da8:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		break;
 8007db2:	e000      	b.n	8007db6 <set_motor_config+0x20e>
	default:
		break;
 8007db4:	bf00      	nop
	}

	motor->angle_data.init = 0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	4199999a 	.word	0x4199999a
 8007dd0:	460fc000 	.word	0x460fc000
 8007dd4:	fffecccd 	.word	0xfffecccd
 8007dd8:	00013333 	.word	0x00013333
 8007ddc:	c0490fdb 	.word	0xc0490fdb
 8007de0:	40490fdb 	.word	0x40490fdb
 8007de4:	fffff000 	.word	0xfffff000
 8007de8:	43c80000 	.word	0x43c80000
 8007dec:	469c4000 	.word	0x469c4000
 8007df0:	ffffe000 	.word	0xffffe000
 8007df4:	c0c90fdb 	.word	0xc0c90fdb
 8007df8:	40c90fdb 	.word	0x40c90fdb
 8007dfc:	42100000 	.word	0x42100000
 8007e00:	466a6000 	.word	0x466a6000
 8007e04:	fffdc000 	.word	0xfffdc000

08007e08 <config_motors>:

extern motor_data_t g_can_motors[24];
void config_motors() {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 24; i++) {
 8007e0e:	2300      	movs	r3, #0
 8007e10:	71fb      	strb	r3, [r7, #7]
 8007e12:	e03c      	b.n	8007e8e <config_motors+0x86>
		//reset all the values to 0
		g_can_motors[i].motor_type = 0;
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	4abc      	ldr	r2, [pc, #752]	@ (8008108 <config_motors+0x300>)
 8007e18:	21bc      	movs	r1, #188	@ 0xbc
 8007e1a:	fb01 f303 	mul.w	r3, r1, r3
 8007e1e:	4413      	add	r3, r2
 8007e20:	3302      	adds	r3, #2
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
		g_can_motors[i].rpm_pid.output = 0;
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	4ab7      	ldr	r2, [pc, #732]	@ (8008108 <config_motors+0x300>)
 8007e2a:	21bc      	movs	r1, #188	@ 0xbc
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	4413      	add	r3, r2
 8007e32:	3330      	adds	r3, #48	@ 0x30
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
		g_can_motors[i].rpm_pid.integral = 0;
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	4ab2      	ldr	r2, [pc, #712]	@ (8008108 <config_motors+0x300>)
 8007e3e:	21bc      	movs	r1, #188	@ 0xbc
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	4413      	add	r3, r2
 8007e46:	3324      	adds	r3, #36	@ 0x24
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_pid.output = 0;
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	4aad      	ldr	r2, [pc, #692]	@ (8008108 <config_motors+0x300>)
 8007e52:	21bc      	movs	r1, #188	@ 0xbc
 8007e54:	fb01 f303 	mul.w	r3, r1, r3
 8007e58:	4413      	add	r3, r2
 8007e5a:	3360      	adds	r3, #96	@ 0x60
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_pid.integral = 0;
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	4aa8      	ldr	r2, [pc, #672]	@ (8008108 <config_motors+0x300>)
 8007e66:	21bc      	movs	r1, #188	@ 0xbc
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3354      	adds	r3, #84	@ 0x54
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_data.ticks = 0;
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	4aa3      	ldr	r2, [pc, #652]	@ (8008108 <config_motors+0x300>)
 8007e7a:	21bc      	movs	r1, #188	@ 0xbc
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	3370      	adds	r3, #112	@ 0x70
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 24; i++) {
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	71fb      	strb	r3, [r7, #7]
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2b17      	cmp	r3, #23
 8007e92:	d9bf      	bls.n	8007e14 <config_motors+0xc>
	}

	//initialise motor data
#ifdef FR_MOTOR_ID
	uint8_t motor_id = FR_MOTOR_ID - 1;
 8007e94:	2300      	movs	r3, #0
 8007e96:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 8007e98:	79bb      	ldrb	r3, [r7, #6]
 8007e9a:	4a9b      	ldr	r2, [pc, #620]	@ (8008108 <config_motors+0x300>)
 8007e9c:	21bc      	movs	r1, #188	@ 0xbc
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 8007eaa:	79bb      	ldrb	r3, [r7, #6]
 8007eac:	22bc      	movs	r2, #188	@ 0xbc
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	4a95      	ldr	r2, [pc, #596]	@ (8008108 <config_motors+0x300>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fe76 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 8007ebc:	79bb      	ldrb	r3, [r7, #6]
 8007ebe:	4a92      	ldr	r2, [pc, #584]	@ (8008108 <config_motors+0x300>)
 8007ec0:	21bc      	movs	r1, #188	@ 0xbc
 8007ec2:	fb01 f303 	mul.w	r3, r1, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3374      	adds	r3, #116	@ 0x74
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007ece:	79bb      	ldrb	r3, [r7, #6]
 8007ed0:	4a8d      	ldr	r2, [pc, #564]	@ (8008108 <config_motors+0x300>)
 8007ed2:	21bc      	movs	r1, #188	@ 0xbc
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	3394      	adds	r3, #148	@ 0x94
 8007edc:	4a8b      	ldr	r2, [pc, #556]	@ (800810c <config_motors+0x304>)
 8007ede:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007ee0:	79bb      	ldrb	r3, [r7, #6]
 8007ee2:	4a89      	ldr	r2, [pc, #548]	@ (8008108 <config_motors+0x300>)
 8007ee4:	21bc      	movs	r1, #188	@ 0xbc
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	4413      	add	r3, r2
 8007eec:	3390      	adds	r3, #144	@ 0x90
 8007eee:	4a88      	ldr	r2, [pc, #544]	@ (8008110 <config_motors+0x308>)
 8007ef0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8007ef2:	79bb      	ldrb	r3, [r7, #6]
 8007ef4:	4a84      	ldr	r2, [pc, #528]	@ (8008108 <config_motors+0x300>)
 8007ef6:	21bc      	movs	r1, #188	@ 0xbc
 8007ef8:	fb01 f303 	mul.w	r3, r1, r3
 8007efc:	4413      	add	r3, r2
 8007efe:	3310      	adds	r3, #16
 8007f00:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8007f04:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8007f06:	79bb      	ldrb	r3, [r7, #6]
 8007f08:	4a7f      	ldr	r2, [pc, #508]	@ (8008108 <config_motors+0x300>)
 8007f0a:	21bc      	movs	r1, #188	@ 0xbc
 8007f0c:	fb01 f303 	mul.w	r3, r1, r3
 8007f10:	4413      	add	r3, r2
 8007f12:	3314      	adds	r3, #20
 8007f14:	4a7f      	ldr	r2, [pc, #508]	@ (8008114 <config_motors+0x30c>)
 8007f16:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8007f18:	79bb      	ldrb	r3, [r7, #6]
 8007f1a:	4a7b      	ldr	r2, [pc, #492]	@ (8008108 <config_motors+0x300>)
 8007f1c:	21bc      	movs	r1, #188	@ 0xbc
 8007f1e:	fb01 f303 	mul.w	r3, r1, r3
 8007f22:	4413      	add	r3, r2
 8007f24:	3318      	adds	r3, #24
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8007f2c:	79bb      	ldrb	r3, [r7, #6]
 8007f2e:	4a76      	ldr	r2, [pc, #472]	@ (8008108 <config_motors+0x300>)
 8007f30:	21bc      	movs	r1, #188	@ 0xbc
 8007f32:	fb01 f303 	mul.w	r3, r1, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	33a4      	adds	r3, #164	@ 0xa4
 8007f3a:	4a77      	ldr	r2, [pc, #476]	@ (8008118 <config_motors+0x310>)
 8007f3c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8007f3e:	79bb      	ldrb	r3, [r7, #6]
 8007f40:	4a71      	ldr	r2, [pc, #452]	@ (8008108 <config_motors+0x300>)
 8007f42:	21bc      	movs	r1, #188	@ 0xbc
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	4413      	add	r3, r2
 8007f4a:	3328      	adds	r3, #40	@ 0x28
 8007f4c:	4a73      	ldr	r2, [pc, #460]	@ (800811c <config_motors+0x314>)
 8007f4e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8007f50:	79bb      	ldrb	r3, [r7, #6]
 8007f52:	4a6d      	ldr	r2, [pc, #436]	@ (8008108 <config_motors+0x300>)
 8007f54:	21bc      	movs	r1, #188	@ 0xbc
 8007f56:	fb01 f303 	mul.w	r3, r1, r3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	332c      	adds	r3, #44	@ 0x2c
 8007f5e:	4a70      	ldr	r2, [pc, #448]	@ (8008120 <config_motors+0x318>)
 8007f60:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID - 1;
 8007f62:	2303      	movs	r3, #3
 8007f64:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 8007f66:	79bb      	ldrb	r3, [r7, #6]
 8007f68:	4a67      	ldr	r2, [pc, #412]	@ (8008108 <config_motors+0x300>)
 8007f6a:	21bc      	movs	r1, #188	@ 0xbc
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	4413      	add	r3, r2
 8007f72:	3302      	adds	r3, #2
 8007f74:	2203      	movs	r2, #3
 8007f76:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 8007f78:	79bb      	ldrb	r3, [r7, #6]
 8007f7a:	22bc      	movs	r2, #188	@ 0xbc
 8007f7c:	fb02 f303 	mul.w	r3, r2, r3
 8007f80:	4a61      	ldr	r2, [pc, #388]	@ (8008108 <config_motors+0x300>)
 8007f82:	4413      	add	r3, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fe0f 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 8007f8a:	79bb      	ldrb	r3, [r7, #6]
 8007f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8008108 <config_motors+0x300>)
 8007f8e:	21bc      	movs	r1, #188	@ 0xbc
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	3374      	adds	r3, #116	@ 0x74
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007f9c:	79bb      	ldrb	r3, [r7, #6]
 8007f9e:	4a5a      	ldr	r2, [pc, #360]	@ (8008108 <config_motors+0x300>)
 8007fa0:	21bc      	movs	r1, #188	@ 0xbc
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3394      	adds	r3, #148	@ 0x94
 8007faa:	4a58      	ldr	r2, [pc, #352]	@ (800810c <config_motors+0x304>)
 8007fac:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007fae:	79bb      	ldrb	r3, [r7, #6]
 8007fb0:	4a55      	ldr	r2, [pc, #340]	@ (8008108 <config_motors+0x300>)
 8007fb2:	21bc      	movs	r1, #188	@ 0xbc
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	3390      	adds	r3, #144	@ 0x90
 8007fbc:	4a54      	ldr	r2, [pc, #336]	@ (8008110 <config_motors+0x308>)
 8007fbe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8007fc0:	79bb      	ldrb	r3, [r7, #6]
 8007fc2:	4a51      	ldr	r2, [pc, #324]	@ (8008108 <config_motors+0x300>)
 8007fc4:	21bc      	movs	r1, #188	@ 0xbc
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	33a4      	adds	r3, #164	@ 0xa4
 8007fce:	4a52      	ldr	r2, [pc, #328]	@ (8008118 <config_motors+0x310>)
 8007fd0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8007fd2:	79bb      	ldrb	r3, [r7, #6]
 8007fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8008108 <config_motors+0x300>)
 8007fd6:	21bc      	movs	r1, #188	@ 0xbc
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	3310      	adds	r3, #16
 8007fe0:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8007fe4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8007fe6:	79bb      	ldrb	r3, [r7, #6]
 8007fe8:	4a47      	ldr	r2, [pc, #284]	@ (8008108 <config_motors+0x300>)
 8007fea:	21bc      	movs	r1, #188	@ 0xbc
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	4a47      	ldr	r2, [pc, #284]	@ (8008114 <config_motors+0x30c>)
 8007ff6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8007ff8:	79bb      	ldrb	r3, [r7, #6]
 8007ffa:	4a43      	ldr	r2, [pc, #268]	@ (8008108 <config_motors+0x300>)
 8007ffc:	21bc      	movs	r1, #188	@ 0xbc
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	4413      	add	r3, r2
 8008004:	3318      	adds	r3, #24
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800800c:	79bb      	ldrb	r3, [r7, #6]
 800800e:	4a3e      	ldr	r2, [pc, #248]	@ (8008108 <config_motors+0x300>)
 8008010:	21bc      	movs	r1, #188	@ 0xbc
 8008012:	fb01 f303 	mul.w	r3, r1, r3
 8008016:	4413      	add	r3, r2
 8008018:	3328      	adds	r3, #40	@ 0x28
 800801a:	4a40      	ldr	r2, [pc, #256]	@ (800811c <config_motors+0x314>)
 800801c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800801e:	79bb      	ldrb	r3, [r7, #6]
 8008020:	4a39      	ldr	r2, [pc, #228]	@ (8008108 <config_motors+0x300>)
 8008022:	21bc      	movs	r1, #188	@ 0xbc
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	4413      	add	r3, r2
 800802a:	332c      	adds	r3, #44	@ 0x2c
 800802c:	4a3c      	ldr	r2, [pc, #240]	@ (8008120 <config_motors+0x318>)
 800802e:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 8008030:	2301      	movs	r3, #1
 8008032:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 8008034:	79bb      	ldrb	r3, [r7, #6]
 8008036:	4a34      	ldr	r2, [pc, #208]	@ (8008108 <config_motors+0x300>)
 8008038:	21bc      	movs	r1, #188	@ 0xbc
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	4413      	add	r3, r2
 8008040:	3302      	adds	r3, #2
 8008042:	2203      	movs	r2, #3
 8008044:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 8008046:	79bb      	ldrb	r3, [r7, #6]
 8008048:	22bc      	movs	r2, #188	@ 0xbc
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	4a2e      	ldr	r2, [pc, #184]	@ (8008108 <config_motors+0x300>)
 8008050:	4413      	add	r3, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff fda8 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 8008058:	79bb      	ldrb	r3, [r7, #6]
 800805a:	4a2b      	ldr	r2, [pc, #172]	@ (8008108 <config_motors+0x300>)
 800805c:	21bc      	movs	r1, #188	@ 0xbc
 800805e:	fb01 f303 	mul.w	r3, r1, r3
 8008062:	4413      	add	r3, r2
 8008064:	3374      	adds	r3, #116	@ 0x74
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ang = 0;
 800806a:	79bb      	ldrb	r3, [r7, #6]
 800806c:	4a26      	ldr	r2, [pc, #152]	@ (8008108 <config_motors+0x300>)
 800806e:	21bc      	movs	r1, #188	@ 0xbc
 8008070:	fb01 f303 	mul.w	r3, r1, r3
 8008074:	4413      	add	r3, r2
 8008076:	3388      	adds	r3, #136	@ 0x88
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.min_ang = 0;
 800807e:	79bb      	ldrb	r3, [r7, #6]
 8008080:	4a21      	ldr	r2, [pc, #132]	@ (8008108 <config_motors+0x300>)
 8008082:	21bc      	movs	r1, #188	@ 0xbc
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	4413      	add	r3, r2
 800808a:	3384      	adds	r3, #132	@ 0x84
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8008092:	79bb      	ldrb	r3, [r7, #6]
 8008094:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <config_motors+0x300>)
 8008096:	21bc      	movs	r1, #188	@ 0xbc
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	4413      	add	r3, r2
 800809e:	3394      	adds	r3, #148	@ 0x94
 80080a0:	4a1a      	ldr	r2, [pc, #104]	@ (800810c <config_motors+0x304>)
 80080a2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80080a4:	79bb      	ldrb	r3, [r7, #6]
 80080a6:	4a18      	ldr	r2, [pc, #96]	@ (8008108 <config_motors+0x300>)
 80080a8:	21bc      	movs	r1, #188	@ 0xbc
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	4413      	add	r3, r2
 80080b0:	3390      	adds	r3, #144	@ 0x90
 80080b2:	4a17      	ldr	r2, [pc, #92]	@ (8008110 <config_motors+0x308>)
 80080b4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 80080b6:	79bb      	ldrb	r3, [r7, #6]
 80080b8:	4a13      	ldr	r2, [pc, #76]	@ (8008108 <config_motors+0x300>)
 80080ba:	21bc      	movs	r1, #188	@ 0xbc
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	4413      	add	r3, r2
 80080c2:	33a4      	adds	r3, #164	@ 0xa4
 80080c4:	4a14      	ldr	r2, [pc, #80]	@ (8008118 <config_motors+0x310>)
 80080c6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = 0;
 80080c8:	79bb      	ldrb	r3, [r7, #6]
 80080ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008108 <config_motors+0x300>)
 80080cc:	21bc      	movs	r1, #188	@ 0xbc
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	4413      	add	r3, r2
 80080d4:	3340      	adds	r3, #64	@ 0x40
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = 0;
 80080dc:	79bb      	ldrb	r3, [r7, #6]
 80080de:	4a0a      	ldr	r2, [pc, #40]	@ (8008108 <config_motors+0x300>)
 80080e0:	21bc      	movs	r1, #188	@ 0xbc
 80080e2:	fb01 f303 	mul.w	r3, r1, r3
 80080e6:	4413      	add	r3, r2
 80080e8:	3344      	adds	r3, #68	@ 0x44
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = 0;
 80080f0:	79bb      	ldrb	r3, [r7, #6]
 80080f2:	4a05      	ldr	r2, [pc, #20]	@ (8008108 <config_motors+0x300>)
 80080f4:	21bc      	movs	r1, #188	@ 0xbc
 80080f6:	fb01 f303 	mul.w	r3, r1, r3
 80080fa:	4413      	add	r3, r2
 80080fc:	3348      	adds	r3, #72	@ 0x48
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = 0;
 8008104:	79bb      	ldrb	r3, [r7, #6]
 8008106:	e00d      	b.n	8008124 <config_motors+0x31c>
 8008108:	20001e24 	.word	0x20001e24
 800810c:	40c90fdb 	.word	0x40c90fdb
 8008110:	c0c90fdb 	.word	0xc0c90fdb
 8008114:	3dcccccd 	.word	0x3dcccccd
 8008118:	43eec2d1 	.word	0x43eec2d1
 800811c:	459c4000 	.word	0x459c4000
 8008120:	457a0000 	.word	0x457a0000
 8008124:	4abd      	ldr	r2, [pc, #756]	@ (800841c <config_motors+0x614>)
 8008126:	21bc      	movs	r1, #188	@ 0xbc
 8008128:	fb01 f303 	mul.w	r3, r1, r3
 800812c:	4413      	add	r3, r2
 800812e:	3358      	adds	r3, #88	@ 0x58
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = 0;
 8008136:	79bb      	ldrb	r3, [r7, #6]
 8008138:	4ab8      	ldr	r2, [pc, #736]	@ (800841c <config_motors+0x614>)
 800813a:	21bc      	movs	r1, #188	@ 0xbc
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	4413      	add	r3, r2
 8008142:	335c      	adds	r3, #92	@ 0x5c
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800814a:	79bb      	ldrb	r3, [r7, #6]
 800814c:	4ab3      	ldr	r2, [pc, #716]	@ (800841c <config_motors+0x614>)
 800814e:	21bc      	movs	r1, #188	@ 0xbc
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	4413      	add	r3, r2
 8008156:	3310      	adds	r3, #16
 8008158:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800815c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800815e:	79bb      	ldrb	r3, [r7, #6]
 8008160:	4aae      	ldr	r2, [pc, #696]	@ (800841c <config_motors+0x614>)
 8008162:	21bc      	movs	r1, #188	@ 0xbc
 8008164:	fb01 f303 	mul.w	r3, r1, r3
 8008168:	4413      	add	r3, r2
 800816a:	3314      	adds	r3, #20
 800816c:	4aac      	ldr	r2, [pc, #688]	@ (8008420 <config_motors+0x618>)
 800816e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8008170:	79bb      	ldrb	r3, [r7, #6]
 8008172:	4aaa      	ldr	r2, [pc, #680]	@ (800841c <config_motors+0x614>)
 8008174:	21bc      	movs	r1, #188	@ 0xbc
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	4413      	add	r3, r2
 800817c:	3318      	adds	r3, #24
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8008184:	79bb      	ldrb	r3, [r7, #6]
 8008186:	4aa5      	ldr	r2, [pc, #660]	@ (800841c <config_motors+0x614>)
 8008188:	21bc      	movs	r1, #188	@ 0xbc
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	4413      	add	r3, r2
 8008190:	3328      	adds	r3, #40	@ 0x28
 8008192:	4aa4      	ldr	r2, [pc, #656]	@ (8008424 <config_motors+0x61c>)
 8008194:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8008196:	79bb      	ldrb	r3, [r7, #6]
 8008198:	4aa0      	ldr	r2, [pc, #640]	@ (800841c <config_motors+0x614>)
 800819a:	21bc      	movs	r1, #188	@ 0xbc
 800819c:	fb01 f303 	mul.w	r3, r1, r3
 80081a0:	4413      	add	r3, r2
 80081a2:	332c      	adds	r3, #44	@ 0x2c
 80081a4:	4aa0      	ldr	r2, [pc, #640]	@ (8008428 <config_motors+0x620>)
 80081a6:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 80081a8:	2302      	movs	r3, #2
 80081aa:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 80081ac:	79bb      	ldrb	r3, [r7, #6]
 80081ae:	4a9b      	ldr	r2, [pc, #620]	@ (800841c <config_motors+0x614>)
 80081b0:	21bc      	movs	r1, #188	@ 0xbc
 80081b2:	fb01 f303 	mul.w	r3, r1, r3
 80081b6:	4413      	add	r3, r2
 80081b8:	3302      	adds	r3, #2
 80081ba:	2203      	movs	r2, #3
 80081bc:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 80081be:	79bb      	ldrb	r3, [r7, #6]
 80081c0:	22bc      	movs	r2, #188	@ 0xbc
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	4a95      	ldr	r2, [pc, #596]	@ (800841c <config_motors+0x614>)
 80081c8:	4413      	add	r3, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff fcec 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 80081d0:	79bb      	ldrb	r3, [r7, #6]
 80081d2:	4a92      	ldr	r2, [pc, #584]	@ (800841c <config_motors+0x614>)
 80081d4:	21bc      	movs	r1, #188	@ 0xbc
 80081d6:	fb01 f303 	mul.w	r3, r1, r3
 80081da:	4413      	add	r3, r2
 80081dc:	3374      	adds	r3, #116	@ 0x74
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ang = 0;
 80081e2:	79bb      	ldrb	r3, [r7, #6]
 80081e4:	4a8d      	ldr	r2, [pc, #564]	@ (800841c <config_motors+0x614>)
 80081e6:	21bc      	movs	r1, #188	@ 0xbc
 80081e8:	fb01 f303 	mul.w	r3, r1, r3
 80081ec:	4413      	add	r3, r2
 80081ee:	3388      	adds	r3, #136	@ 0x88
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.min_ang = 0;
 80081f6:	79bb      	ldrb	r3, [r7, #6]
 80081f8:	4a88      	ldr	r2, [pc, #544]	@ (800841c <config_motors+0x614>)
 80081fa:	21bc      	movs	r1, #188	@ 0xbc
 80081fc:	fb01 f303 	mul.w	r3, r1, r3
 8008200:	4413      	add	r3, r2
 8008202:	3384      	adds	r3, #132	@ 0x84
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800820a:	79bb      	ldrb	r3, [r7, #6]
 800820c:	4a83      	ldr	r2, [pc, #524]	@ (800841c <config_motors+0x614>)
 800820e:	21bc      	movs	r1, #188	@ 0xbc
 8008210:	fb01 f303 	mul.w	r3, r1, r3
 8008214:	4413      	add	r3, r2
 8008216:	3394      	adds	r3, #148	@ 0x94
 8008218:	4a84      	ldr	r2, [pc, #528]	@ (800842c <config_motors+0x624>)
 800821a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800821c:	79bb      	ldrb	r3, [r7, #6]
 800821e:	4a7f      	ldr	r2, [pc, #508]	@ (800841c <config_motors+0x614>)
 8008220:	21bc      	movs	r1, #188	@ 0xbc
 8008222:	fb01 f303 	mul.w	r3, r1, r3
 8008226:	4413      	add	r3, r2
 8008228:	3390      	adds	r3, #144	@ 0x90
 800822a:	4a81      	ldr	r2, [pc, #516]	@ (8008430 <config_motors+0x628>)
 800822c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800822e:	79bb      	ldrb	r3, [r7, #6]
 8008230:	4a7a      	ldr	r2, [pc, #488]	@ (800841c <config_motors+0x614>)
 8008232:	21bc      	movs	r1, #188	@ 0xbc
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	4413      	add	r3, r2
 800823a:	33a4      	adds	r3, #164	@ 0xa4
 800823c:	4a7d      	ldr	r2, [pc, #500]	@ (8008434 <config_motors+0x62c>)
 800823e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = 0;
 8008240:	79bb      	ldrb	r3, [r7, #6]
 8008242:	4a76      	ldr	r2, [pc, #472]	@ (800841c <config_motors+0x614>)
 8008244:	21bc      	movs	r1, #188	@ 0xbc
 8008246:	fb01 f303 	mul.w	r3, r1, r3
 800824a:	4413      	add	r3, r2
 800824c:	3340      	adds	r3, #64	@ 0x40
 800824e:	f04f 0200 	mov.w	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = 0;
 8008254:	79bb      	ldrb	r3, [r7, #6]
 8008256:	4a71      	ldr	r2, [pc, #452]	@ (800841c <config_motors+0x614>)
 8008258:	21bc      	movs	r1, #188	@ 0xbc
 800825a:	fb01 f303 	mul.w	r3, r1, r3
 800825e:	4413      	add	r3, r2
 8008260:	3344      	adds	r3, #68	@ 0x44
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = 0;
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	4a6c      	ldr	r2, [pc, #432]	@ (800841c <config_motors+0x614>)
 800826c:	21bc      	movs	r1, #188	@ 0xbc
 800826e:	fb01 f303 	mul.w	r3, r1, r3
 8008272:	4413      	add	r3, r2
 8008274:	3348      	adds	r3, #72	@ 0x48
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = 0;
 800827c:	79bb      	ldrb	r3, [r7, #6]
 800827e:	4a67      	ldr	r2, [pc, #412]	@ (800841c <config_motors+0x614>)
 8008280:	21bc      	movs	r1, #188	@ 0xbc
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	4413      	add	r3, r2
 8008288:	3358      	adds	r3, #88	@ 0x58
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = 0;
 8008290:	79bb      	ldrb	r3, [r7, #6]
 8008292:	4a62      	ldr	r2, [pc, #392]	@ (800841c <config_motors+0x614>)
 8008294:	21bc      	movs	r1, #188	@ 0xbc
 8008296:	fb01 f303 	mul.w	r3, r1, r3
 800829a:	4413      	add	r3, r2
 800829c:	335c      	adds	r3, #92	@ 0x5c
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80082a4:	79bb      	ldrb	r3, [r7, #6]
 80082a6:	4a5d      	ldr	r2, [pc, #372]	@ (800841c <config_motors+0x614>)
 80082a8:	21bc      	movs	r1, #188	@ 0xbc
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	4413      	add	r3, r2
 80082b0:	3310      	adds	r3, #16
 80082b2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80082b6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 80082b8:	79bb      	ldrb	r3, [r7, #6]
 80082ba:	4a58      	ldr	r2, [pc, #352]	@ (800841c <config_motors+0x614>)
 80082bc:	21bc      	movs	r1, #188	@ 0xbc
 80082be:	fb01 f303 	mul.w	r3, r1, r3
 80082c2:	4413      	add	r3, r2
 80082c4:	3314      	adds	r3, #20
 80082c6:	4a56      	ldr	r2, [pc, #344]	@ (8008420 <config_motors+0x618>)
 80082c8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80082ca:	79bb      	ldrb	r3, [r7, #6]
 80082cc:	4a53      	ldr	r2, [pc, #332]	@ (800841c <config_motors+0x614>)
 80082ce:	21bc      	movs	r1, #188	@ 0xbc
 80082d0:	fb01 f303 	mul.w	r3, r1, r3
 80082d4:	4413      	add	r3, r2
 80082d6:	3318      	adds	r3, #24
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 80082de:	79bb      	ldrb	r3, [r7, #6]
 80082e0:	4a4e      	ldr	r2, [pc, #312]	@ (800841c <config_motors+0x614>)
 80082e2:	21bc      	movs	r1, #188	@ 0xbc
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	4413      	add	r3, r2
 80082ea:	3328      	adds	r3, #40	@ 0x28
 80082ec:	4a4d      	ldr	r2, [pc, #308]	@ (8008424 <config_motors+0x61c>)
 80082ee:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 80082f0:	79bb      	ldrb	r3, [r7, #6]
 80082f2:	4a4a      	ldr	r2, [pc, #296]	@ (800841c <config_motors+0x614>)
 80082f4:	21bc      	movs	r1, #188	@ 0xbc
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	4413      	add	r3, r2
 80082fc:	332c      	adds	r3, #44	@ 0x2c
 80082fe:	4a4a      	ldr	r2, [pc, #296]	@ (8008428 <config_motors+0x620>)
 8008300:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 8008302:	2305      	movs	r3, #5
 8008304:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 8008306:	79bb      	ldrb	r3, [r7, #6]
 8008308:	4a44      	ldr	r2, [pc, #272]	@ (800841c <config_motors+0x614>)
 800830a:	21bc      	movs	r1, #188	@ 0xbc
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	4413      	add	r3, r2
 8008312:	3302      	adds	r3, #2
 8008314:	2204      	movs	r2, #4
 8008316:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 8008318:	79bb      	ldrb	r3, [r7, #6]
 800831a:	22bc      	movs	r2, #188	@ 0xbc
 800831c:	fb02 f303 	mul.w	r3, r2, r3
 8008320:	4a3e      	ldr	r2, [pc, #248]	@ (800841c <config_motors+0x614>)
 8008322:	4413      	add	r3, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fc3f 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800832a:	79bb      	ldrb	r3, [r7, #6]
 800832c:	4a3b      	ldr	r2, [pc, #236]	@ (800841c <config_motors+0x614>)
 800832e:	21bc      	movs	r1, #188	@ 0xbc
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	4413      	add	r3, r2
 8008336:	3398      	adds	r3, #152	@ 0x98
 8008338:	4a3f      	ldr	r2, [pc, #252]	@ (8008438 <config_motors+0x630>)
 800833a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800833c:	79bb      	ldrb	r3, [r7, #6]
 800833e:	4a37      	ldr	r2, [pc, #220]	@ (800841c <config_motors+0x614>)
 8008340:	21bc      	movs	r1, #188	@ 0xbc
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	4413      	add	r3, r2
 8008348:	3364      	adds	r3, #100	@ 0x64
 800834a:	4a3c      	ldr	r2, [pc, #240]	@ (800843c <config_motors+0x634>)
 800834c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800834e:	79bb      	ldrb	r3, [r7, #6]
 8008350:	4a32      	ldr	r2, [pc, #200]	@ (800841c <config_motors+0x614>)
 8008352:	21bc      	movs	r1, #188	@ 0xbc
 8008354:	fb01 f303 	mul.w	r3, r1, r3
 8008358:	4413      	add	r3, r2
 800835a:	3310      	adds	r3, #16
 800835c:	4a38      	ldr	r2, [pc, #224]	@ (8008440 <config_motors+0x638>)
 800835e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8008360:	79bb      	ldrb	r3, [r7, #6]
 8008362:	4a2e      	ldr	r2, [pc, #184]	@ (800841c <config_motors+0x614>)
 8008364:	21bc      	movs	r1, #188	@ 0xbc
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	4413      	add	r3, r2
 800836c:	3314      	adds	r3, #20
 800836e:	4a35      	ldr	r2, [pc, #212]	@ (8008444 <config_motors+0x63c>)
 8008370:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8008372:	79bb      	ldrb	r3, [r7, #6]
 8008374:	4a29      	ldr	r2, [pc, #164]	@ (800841c <config_motors+0x614>)
 8008376:	21bc      	movs	r1, #188	@ 0xbc
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	4413      	add	r3, r2
 800837e:	3318      	adds	r3, #24
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 8008386:	79bb      	ldrb	r3, [r7, #6]
 8008388:	4a24      	ldr	r2, [pc, #144]	@ (800841c <config_motors+0x614>)
 800838a:	21bc      	movs	r1, #188	@ 0xbc
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	4413      	add	r3, r2
 8008392:	3328      	adds	r3, #40	@ 0x28
 8008394:	4a2c      	ldr	r2, [pc, #176]	@ (8008448 <config_motors+0x640>)
 8008396:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8008398:	79bb      	ldrb	r3, [r7, #6]
 800839a:	4a20      	ldr	r2, [pc, #128]	@ (800841c <config_motors+0x614>)
 800839c:	21bc      	movs	r1, #188	@ 0xbc
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	4413      	add	r3, r2
 80083a4:	332c      	adds	r3, #44	@ 0x2c
 80083a6:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80083aa:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 80083ac:	2304      	movs	r3, #4
 80083ae:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 80083b0:	79bb      	ldrb	r3, [r7, #6]
 80083b2:	4a1a      	ldr	r2, [pc, #104]	@ (800841c <config_motors+0x614>)
 80083b4:	21bc      	movs	r1, #188	@ 0xbc
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	3302      	adds	r3, #2
 80083be:	2204      	movs	r2, #4
 80083c0:	701a      	strb	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 80083c2:	79bb      	ldrb	r3, [r7, #6]
 80083c4:	4a15      	ldr	r2, [pc, #84]	@ (800841c <config_motors+0x614>)
 80083c6:	21bc      	movs	r1, #188	@ 0xbc
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	4413      	add	r3, r2
 80083ce:	3364      	adds	r3, #100	@ 0x64
 80083d0:	4a1a      	ldr	r2, [pc, #104]	@ (800843c <config_motors+0x634>)
 80083d2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 80083d4:	79bb      	ldrb	r3, [r7, #6]
 80083d6:	4a11      	ldr	r2, [pc, #68]	@ (800841c <config_motors+0x614>)
 80083d8:	21bc      	movs	r1, #188	@ 0xbc
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	3310      	adds	r3, #16
 80083e2:	4a17      	ldr	r2, [pc, #92]	@ (8008440 <config_motors+0x638>)
 80083e4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 80083e6:	79bb      	ldrb	r3, [r7, #6]
 80083e8:	4a0c      	ldr	r2, [pc, #48]	@ (800841c <config_motors+0x614>)
 80083ea:	21bc      	movs	r1, #188	@ 0xbc
 80083ec:	fb01 f303 	mul.w	r3, r1, r3
 80083f0:	4413      	add	r3, r2
 80083f2:	3314      	adds	r3, #20
 80083f4:	4a13      	ldr	r2, [pc, #76]	@ (8008444 <config_motors+0x63c>)
 80083f6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 80083f8:	79bb      	ldrb	r3, [r7, #6]
 80083fa:	4a08      	ldr	r2, [pc, #32]	@ (800841c <config_motors+0x614>)
 80083fc:	21bc      	movs	r1, #188	@ 0xbc
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	4413      	add	r3, r2
 8008404:	3318      	adds	r3, #24
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800840c:	79bb      	ldrb	r3, [r7, #6]
 800840e:	4a03      	ldr	r2, [pc, #12]	@ (800841c <config_motors+0x614>)
 8008410:	21bc      	movs	r1, #188	@ 0xbc
 8008412:	fb01 f303 	mul.w	r3, r1, r3
 8008416:	4413      	add	r3, r2
 8008418:	e018      	b.n	800844c <config_motors+0x644>
 800841a:	bf00      	nop
 800841c:	20001e24 	.word	0x20001e24
 8008420:	3dcccccd 	.word	0x3dcccccd
 8008424:	459c4000 	.word	0x459c4000
 8008428:	457a0000 	.word	0x457a0000
 800842c:	40c90fdb 	.word	0x40c90fdb
 8008430:	c0c90fdb 	.word	0xc0c90fdb
 8008434:	43eec2d1 	.word	0x43eec2d1
 8008438:	4199999a 	.word	0x4199999a
 800843c:	460fc000 	.word	0x460fc000
 8008440:	40a00000 	.word	0x40a00000
 8008444:	3b03126f 	.word	0x3b03126f
 8008448:	461c4000 	.word	0x461c4000
 800844c:	3328      	adds	r3, #40	@ 0x28
 800844e:	4abb      	ldr	r2, [pc, #748]	@ (800873c <config_motors+0x934>)
 8008450:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8008452:	79bb      	ldrb	r3, [r7, #6]
 8008454:	4aba      	ldr	r2, [pc, #744]	@ (8008740 <config_motors+0x938>)
 8008456:	21bc      	movs	r1, #188	@ 0xbc
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	4413      	add	r3, r2
 800845e:	332c      	adds	r3, #44	@ 0x2c
 8008460:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8008464:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8008466:	79bb      	ldrb	r3, [r7, #6]
 8008468:	4ab5      	ldr	r2, [pc, #724]	@ (8008740 <config_motors+0x938>)
 800846a:	21bc      	movs	r1, #188	@ 0xbc
 800846c:	fb01 f303 	mul.w	r3, r1, r3
 8008470:	4413      	add	r3, r2
 8008472:	3334      	adds	r3, #52	@ 0x34
 8008474:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8008478:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 800847a:	2306      	movs	r3, #6
 800847c:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	g_can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	g_can_motors[motor_id].motor_type = TYPE_M2006;
 800847e:	79bb      	ldrb	r3, [r7, #6]
 8008480:	4aaf      	ldr	r2, [pc, #700]	@ (8008740 <config_motors+0x938>)
 8008482:	21bc      	movs	r1, #188	@ 0xbc
 8008484:	fb01 f303 	mul.w	r3, r1, r3
 8008488:	4413      	add	r3, r2
 800848a:	3302      	adds	r3, #2
 800848c:	2202      	movs	r2, #2
 800848e:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&g_can_motors[motor_id]);
 8008490:	79bb      	ldrb	r3, [r7, #6]
 8008492:	22bc      	movs	r2, #188	@ 0xbc
 8008494:	fb02 f303 	mul.w	r3, r2, r3
 8008498:	4aa9      	ldr	r2, [pc, #676]	@ (8008740 <config_motors+0x938>)
 800849a:	4413      	add	r3, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fb83 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.phy_max_ang = PI;
 80084a2:	79bb      	ldrb	r3, [r7, #6]
 80084a4:	4aa6      	ldr	r2, [pc, #664]	@ (8008740 <config_motors+0x938>)
 80084a6:	21bc      	movs	r1, #188	@ 0xbc
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	4413      	add	r3, r2
 80084ae:	3394      	adds	r3, #148	@ 0x94
 80084b0:	4aa4      	ldr	r2, [pc, #656]	@ (8008744 <config_motors+0x93c>)
 80084b2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -PI;
 80084b4:	79bb      	ldrb	r3, [r7, #6]
 80084b6:	4aa2      	ldr	r2, [pc, #648]	@ (8008740 <config_motors+0x938>)
 80084b8:	21bc      	movs	r1, #188	@ 0xbc
 80084ba:	fb01 f303 	mul.w	r3, r1, r3
 80084be:	4413      	add	r3, r2
 80084c0:	3390      	adds	r3, #144	@ 0x90
 80084c2:	4aa1      	ldr	r2, [pc, #644]	@ (8008748 <config_motors+0x940>)
 80084c4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 80084c6:	79bb      	ldrb	r3, [r7, #6]
 80084c8:	4a9d      	ldr	r2, [pc, #628]	@ (8008740 <config_motors+0x938>)
 80084ca:	21bc      	movs	r1, #188	@ 0xbc
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	4413      	add	r3, r2
 80084d2:	33a4      	adds	r3, #164	@ 0xa4
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 80084da:	79bb      	ldrb	r3, [r7, #6]
 80084dc:	4a98      	ldr	r2, [pc, #608]	@ (8008740 <config_motors+0x938>)
 80084de:	21bc      	movs	r1, #188	@ 0xbc
 80084e0:	fb01 f303 	mul.w	r3, r1, r3
 80084e4:	4413      	add	r3, r2
 80084e6:	3340      	adds	r3, #64	@ 0x40
 80084e8:	4a98      	ldr	r2, [pc, #608]	@ (800874c <config_motors+0x944>)
 80084ea:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 80084ec:	79bb      	ldrb	r3, [r7, #6]
 80084ee:	4a94      	ldr	r2, [pc, #592]	@ (8008740 <config_motors+0x938>)
 80084f0:	21bc      	movs	r1, #188	@ 0xbc
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	3344      	adds	r3, #68	@ 0x44
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 8008500:	79bb      	ldrb	r3, [r7, #6]
 8008502:	4a8f      	ldr	r2, [pc, #572]	@ (8008740 <config_motors+0x938>)
 8008504:	21bc      	movs	r1, #188	@ 0xbc
 8008506:	fb01 f303 	mul.w	r3, r1, r3
 800850a:	4413      	add	r3, r2
 800850c:	3348      	adds	r3, #72	@ 0x48
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 8008514:	79bb      	ldrb	r3, [r7, #6]
 8008516:	4a8a      	ldr	r2, [pc, #552]	@ (8008740 <config_motors+0x938>)
 8008518:	21bc      	movs	r1, #188	@ 0xbc
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	4413      	add	r3, r2
 8008520:	3358      	adds	r3, #88	@ 0x58
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 8008528:	79bb      	ldrb	r3, [r7, #6]
 800852a:	4a85      	ldr	r2, [pc, #532]	@ (8008740 <config_motors+0x938>)
 800852c:	21bc      	movs	r1, #188	@ 0xbc
 800852e:	fb01 f303 	mul.w	r3, r1, r3
 8008532:	4413      	add	r3, r2
 8008534:	335c      	adds	r3, #92	@ 0x5c
 8008536:	4a86      	ldr	r2, [pc, #536]	@ (8008750 <config_motors+0x948>)
 8008538:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 800853a:	79bb      	ldrb	r3, [r7, #6]
 800853c:	4a80      	ldr	r2, [pc, #512]	@ (8008740 <config_motors+0x938>)
 800853e:	21bc      	movs	r1, #188	@ 0xbc
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	4413      	add	r3, r2
 8008546:	3310      	adds	r3, #16
 8008548:	4a82      	ldr	r2, [pc, #520]	@ (8008754 <config_motors+0x94c>)
 800854a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 800854c:	79bb      	ldrb	r3, [r7, #6]
 800854e:	4a7c      	ldr	r2, [pc, #496]	@ (8008740 <config_motors+0x938>)
 8008550:	21bc      	movs	r1, #188	@ 0xbc
 8008552:	fb01 f303 	mul.w	r3, r1, r3
 8008556:	4413      	add	r3, r2
 8008558:	3314      	adds	r3, #20
 800855a:	4a7f      	ldr	r2, [pc, #508]	@ (8008758 <config_motors+0x950>)
 800855c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 800855e:	79bb      	ldrb	r3, [r7, #6]
 8008560:	4a77      	ldr	r2, [pc, #476]	@ (8008740 <config_motors+0x938>)
 8008562:	21bc      	movs	r1, #188	@ 0xbc
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	4413      	add	r3, r2
 800856a:	3318      	adds	r3, #24
 800856c:	4a7b      	ldr	r2, [pc, #492]	@ (800875c <config_motors+0x954>)
 800856e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 8008570:	79bb      	ldrb	r3, [r7, #6]
 8008572:	4a73      	ldr	r2, [pc, #460]	@ (8008740 <config_motors+0x938>)
 8008574:	21bc      	movs	r1, #188	@ 0xbc
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	4413      	add	r3, r2
 800857c:	3328      	adds	r3, #40	@ 0x28
 800857e:	4a6f      	ldr	r2, [pc, #444]	@ (800873c <config_motors+0x934>)
 8008580:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 8008582:	79bb      	ldrb	r3, [r7, #6]
 8008584:	4a6e      	ldr	r2, [pc, #440]	@ (8008740 <config_motors+0x938>)
 8008586:	21bc      	movs	r1, #188	@ 0xbc
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	4413      	add	r3, r2
 800858e:	332c      	adds	r3, #44	@ 0x2c
 8008590:	4a6a      	ldr	r2, [pc, #424]	@ (800873c <config_motors+0x934>)
 8008592:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID - 1;
 8008594:	2307      	movs	r3, #7
 8008596:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 8008598:	79bb      	ldrb	r3, [r7, #6]
 800859a:	4a69      	ldr	r2, [pc, #420]	@ (8008740 <config_motors+0x938>)
 800859c:	21bc      	movs	r1, #188	@ 0xbc
 800859e:	fb01 f303 	mul.w	r3, r1, r3
 80085a2:	4413      	add	r3, r2
 80085a4:	3302      	adds	r3, #2
 80085a6:	2201      	movs	r2, #1
 80085a8:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 80085aa:	79bb      	ldrb	r3, [r7, #6]
 80085ac:	22bc      	movs	r2, #188	@ 0xbc
 80085ae:	fb02 f303 	mul.w	r3, r2, r3
 80085b2:	4a63      	ldr	r2, [pc, #396]	@ (8008740 <config_motors+0x938>)
 80085b4:	4413      	add	r3, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff faf6 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = PITCH_CENTER;
 80085bc:	79bb      	ldrb	r3, [r7, #6]
 80085be:	4a60      	ldr	r2, [pc, #384]	@ (8008740 <config_motors+0x938>)
 80085c0:	21bc      	movs	r1, #188	@ 0xbc
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	4413      	add	r3, r2
 80085c8:	3374      	adds	r3, #116	@ 0x74
 80085ca:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 80085ce:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = PITCH_MAX_ANG;
 80085d0:	79bb      	ldrb	r3, [r7, #6]
 80085d2:	4a5b      	ldr	r2, [pc, #364]	@ (8008740 <config_motors+0x938>)
 80085d4:	21bc      	movs	r1, #188	@ 0xbc
 80085d6:	fb01 f303 	mul.w	r3, r1, r3
 80085da:	4413      	add	r3, r2
 80085dc:	3394      	adds	r3, #148	@ 0x94
 80085de:	4a60      	ldr	r2, [pc, #384]	@ (8008760 <config_motors+0x958>)
 80085e0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = PITCH_MIN_ANG;
 80085e2:	79bb      	ldrb	r3, [r7, #6]
 80085e4:	4a56      	ldr	r2, [pc, #344]	@ (8008740 <config_motors+0x938>)
 80085e6:	21bc      	movs	r1, #188	@ 0xbc
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	4413      	add	r3, r2
 80085ee:	3390      	adds	r3, #144	@ 0x90
 80085f0:	4a5c      	ldr	r2, [pc, #368]	@ (8008764 <config_motors+0x95c>)
 80085f2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 80085f4:	79bb      	ldrb	r3, [r7, #6]
 80085f6:	4a52      	ldr	r2, [pc, #328]	@ (8008740 <config_motors+0x938>)
 80085f8:	21bc      	movs	r1, #188	@ 0xbc
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	4413      	add	r3, r2
 8008600:	33a4      	adds	r3, #164	@ 0xa4
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 8008608:	79bb      	ldrb	r3, [r7, #6]
 800860a:	4a4d      	ldr	r2, [pc, #308]	@ (8008740 <config_motors+0x938>)
 800860c:	21bc      	movs	r1, #188	@ 0xbc
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	4413      	add	r3, r2
 8008614:	3340      	adds	r3, #64	@ 0x40
 8008616:	4a54      	ldr	r2, [pc, #336]	@ (8008768 <config_motors+0x960>)
 8008618:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800861a:	79bb      	ldrb	r3, [r7, #6]
 800861c:	4a48      	ldr	r2, [pc, #288]	@ (8008740 <config_motors+0x938>)
 800861e:	21bc      	movs	r1, #188	@ 0xbc
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	4413      	add	r3, r2
 8008626:	3344      	adds	r3, #68	@ 0x44
 8008628:	4a50      	ldr	r2, [pc, #320]	@ (800876c <config_motors+0x964>)
 800862a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800862c:	79bb      	ldrb	r3, [r7, #6]
 800862e:	4a44      	ldr	r2, [pc, #272]	@ (8008740 <config_motors+0x938>)
 8008630:	21bc      	movs	r1, #188	@ 0xbc
 8008632:	fb01 f303 	mul.w	r3, r1, r3
 8008636:	4413      	add	r3, r2
 8008638:	3348      	adds	r3, #72	@ 0x48
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 8008640:	79bb      	ldrb	r3, [r7, #6]
 8008642:	4a3f      	ldr	r2, [pc, #252]	@ (8008740 <config_motors+0x938>)
 8008644:	21bc      	movs	r1, #188	@ 0xbc
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	3358      	adds	r3, #88	@ 0x58
 800864e:	4a47      	ldr	r2, [pc, #284]	@ (800876c <config_motors+0x964>)
 8008650:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 8008652:	79bb      	ldrb	r3, [r7, #6]
 8008654:	4a3a      	ldr	r2, [pc, #232]	@ (8008740 <config_motors+0x938>)
 8008656:	21bc      	movs	r1, #188	@ 0xbc
 8008658:	fb01 f303 	mul.w	r3, r1, r3
 800865c:	4413      	add	r3, r2
 800865e:	335c      	adds	r3, #92	@ 0x5c
 8008660:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8008664:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 8008666:	79bb      	ldrb	r3, [r7, #6]
 8008668:	4a35      	ldr	r2, [pc, #212]	@ (8008740 <config_motors+0x938>)
 800866a:	21bc      	movs	r1, #188	@ 0xbc
 800866c:	fb01 f303 	mul.w	r3, r1, r3
 8008670:	4413      	add	r3, r2
 8008672:	3310      	adds	r3, #16
 8008674:	4a3e      	ldr	r2, [pc, #248]	@ (8008770 <config_motors+0x968>)
 8008676:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 8008678:	79bb      	ldrb	r3, [r7, #6]
 800867a:	4a31      	ldr	r2, [pc, #196]	@ (8008740 <config_motors+0x938>)
 800867c:	21bc      	movs	r1, #188	@ 0xbc
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	3314      	adds	r3, #20
 8008686:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800868a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800868c:	79bb      	ldrb	r3, [r7, #6]
 800868e:	4a2c      	ldr	r2, [pc, #176]	@ (8008740 <config_motors+0x938>)
 8008690:	21bc      	movs	r1, #188	@ 0xbc
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	4413      	add	r3, r2
 8008698:	3318      	adds	r3, #24
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 80086a0:	79bb      	ldrb	r3, [r7, #6]
 80086a2:	4a27      	ldr	r2, [pc, #156]	@ (8008740 <config_motors+0x938>)
 80086a4:	21bc      	movs	r1, #188	@ 0xbc
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	3328      	adds	r3, #40	@ 0x28
 80086ae:	4a31      	ldr	r2, [pc, #196]	@ (8008774 <config_motors+0x96c>)
 80086b0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 80086b2:	79bb      	ldrb	r3, [r7, #6]
 80086b4:	4a22      	ldr	r2, [pc, #136]	@ (8008740 <config_motors+0x938>)
 80086b6:	21bc      	movs	r1, #188	@ 0xbc
 80086b8:	fb01 f303 	mul.w	r3, r1, r3
 80086bc:	4413      	add	r3, r2
 80086be:	332c      	adds	r3, #44	@ 0x2c
 80086c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008778 <config_motors+0x970>)
 80086c2:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
#ifndef YAW_M3508
	motor_id = YAW_MOTOR_ID - 1;
 80086c4:	2313      	movs	r3, #19
 80086c6:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 80086c8:	79bb      	ldrb	r3, [r7, #6]
 80086ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008740 <config_motors+0x938>)
 80086cc:	21bc      	movs	r1, #188	@ 0xbc
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	3302      	adds	r3, #2
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 80086da:	79bb      	ldrb	r3, [r7, #6]
 80086dc:	22bc      	movs	r2, #188	@ 0xbc
 80086de:	fb02 f303 	mul.w	r3, r2, r3
 80086e2:	4a17      	ldr	r2, [pc, #92]	@ (8008740 <config_motors+0x938>)
 80086e4:	4413      	add	r3, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff fa5e 	bl	8007ba8 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = YAW_CENTER;
 80086ec:	79bb      	ldrb	r3, [r7, #6]
 80086ee:	4a14      	ldr	r2, [pc, #80]	@ (8008740 <config_motors+0x938>)
 80086f0:	21bc      	movs	r1, #188	@ 0xbc
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	3374      	adds	r3, #116	@ 0x74
 80086fa:	f640 62d8 	movw	r2, #3800	@ 0xed8
 80086fe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = YAW_MAX_ANG;
 8008700:	79bb      	ldrb	r3, [r7, #6]
 8008702:	4a0f      	ldr	r2, [pc, #60]	@ (8008740 <config_motors+0x938>)
 8008704:	21bc      	movs	r1, #188	@ 0xbc
 8008706:	fb01 f303 	mul.w	r3, r1, r3
 800870a:	4413      	add	r3, r2
 800870c:	3394      	adds	r3, #148	@ 0x94
 800870e:	4a1b      	ldr	r2, [pc, #108]	@ (800877c <config_motors+0x974>)
 8008710:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = YAW_MIN_ANG; //angle before it overflows
 8008712:	79bb      	ldrb	r3, [r7, #6]
 8008714:	4a0a      	ldr	r2, [pc, #40]	@ (8008740 <config_motors+0x938>)
 8008716:	21bc      	movs	r1, #188	@ 0xbc
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	4413      	add	r3, r2
 800871e:	3390      	adds	r3, #144	@ 0x90
 8008720:	4a17      	ldr	r2, [pc, #92]	@ (8008780 <config_motors+0x978>)
 8008722:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 8008724:	79bb      	ldrb	r3, [r7, #6]
 8008726:	4a06      	ldr	r2, [pc, #24]	@ (8008740 <config_motors+0x938>)
 8008728:	21bc      	movs	r1, #188	@ 0xbc
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	4413      	add	r3, r2
 8008730:	33a4      	adds	r3, #164	@ 0xa4
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 8008738:	79bb      	ldrb	r3, [r7, #6]
 800873a:	e023      	b.n	8008784 <config_motors+0x97c>
 800873c:	461c4000 	.word	0x461c4000
 8008740:	20001e24 	.word	0x20001e24
 8008744:	40490fdb 	.word	0x40490fdb
 8008748:	c0490fdb 	.word	0xc0490fdb
 800874c:	447a0000 	.word	0x447a0000
 8008750:	42c80000 	.word	0x42c80000
 8008754:	40a00000 	.word	0x40a00000
 8008758:	3ca3d70a 	.word	0x3ca3d70a
 800875c:	40400000 	.word	0x40400000
 8008760:	3f19999a 	.word	0x3f19999a
 8008764:	be800000 	.word	0xbe800000
 8008768:	41a00000 	.word	0x41a00000
 800876c:	3dcccccd 	.word	0x3dcccccd
 8008770:	45bb8000 	.word	0x45bb8000
 8008774:	457a0000 	.word	0x457a0000
 8008778:	469c4000 	.word	0x469c4000
 800877c:	417b53d2 	.word	0x417b53d2
 8008780:	c17b53d2 	.word	0xc17b53d2
 8008784:	4a2e      	ldr	r2, [pc, #184]	@ (8008840 <config_motors+0xa38>)
 8008786:	21bc      	movs	r1, #188	@ 0xbc
 8008788:	fb01 f303 	mul.w	r3, r1, r3
 800878c:	4413      	add	r3, r2
 800878e:	3340      	adds	r3, #64	@ 0x40
 8008790:	4a2c      	ldr	r2, [pc, #176]	@ (8008844 <config_motors+0xa3c>)
 8008792:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 8008794:	79bb      	ldrb	r3, [r7, #6]
 8008796:	4a2a      	ldr	r2, [pc, #168]	@ (8008840 <config_motors+0xa38>)
 8008798:	21bc      	movs	r1, #188	@ 0xbc
 800879a:	fb01 f303 	mul.w	r3, r1, r3
 800879e:	4413      	add	r3, r2
 80087a0:	3344      	adds	r3, #68	@ 0x44
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 80087a8:	79bb      	ldrb	r3, [r7, #6]
 80087aa:	4a25      	ldr	r2, [pc, #148]	@ (8008840 <config_motors+0xa38>)
 80087ac:	21bc      	movs	r1, #188	@ 0xbc
 80087ae:	fb01 f303 	mul.w	r3, r1, r3
 80087b2:	4413      	add	r3, r2
 80087b4:	3348      	adds	r3, #72	@ 0x48
 80087b6:	4a24      	ldr	r2, [pc, #144]	@ (8008848 <config_motors+0xa40>)
 80087b8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 80087ba:	79bb      	ldrb	r3, [r7, #6]
 80087bc:	4a20      	ldr	r2, [pc, #128]	@ (8008840 <config_motors+0xa38>)
 80087be:	21bc      	movs	r1, #188	@ 0xbc
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	4413      	add	r3, r2
 80087c6:	3358      	adds	r3, #88	@ 0x58
 80087c8:	4a20      	ldr	r2, [pc, #128]	@ (800884c <config_motors+0xa44>)
 80087ca:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 80087cc:	79bb      	ldrb	r3, [r7, #6]
 80087ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008840 <config_motors+0xa38>)
 80087d0:	21bc      	movs	r1, #188	@ 0xbc
 80087d2:	fb01 f303 	mul.w	r3, r1, r3
 80087d6:	4413      	add	r3, r2
 80087d8:	335c      	adds	r3, #92	@ 0x5c
 80087da:	4a1b      	ldr	r2, [pc, #108]	@ (8008848 <config_motors+0xa40>)
 80087dc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 80087de:	79bb      	ldrb	r3, [r7, #6]
 80087e0:	4a17      	ldr	r2, [pc, #92]	@ (8008840 <config_motors+0xa38>)
 80087e2:	21bc      	movs	r1, #188	@ 0xbc
 80087e4:	fb01 f303 	mul.w	r3, r1, r3
 80087e8:	4413      	add	r3, r2
 80087ea:	3310      	adds	r3, #16
 80087ec:	4a18      	ldr	r2, [pc, #96]	@ (8008850 <config_motors+0xa48>)
 80087ee:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 80087f0:	79bb      	ldrb	r3, [r7, #6]
 80087f2:	4a13      	ldr	r2, [pc, #76]	@ (8008840 <config_motors+0xa38>)
 80087f4:	21bc      	movs	r1, #188	@ 0xbc
 80087f6:	fb01 f303 	mul.w	r3, r1, r3
 80087fa:	4413      	add	r3, r2
 80087fc:	3314      	adds	r3, #20
 80087fe:	4a12      	ldr	r2, [pc, #72]	@ (8008848 <config_motors+0xa40>)
 8008800:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 8008802:	79bb      	ldrb	r3, [r7, #6]
 8008804:	4a0e      	ldr	r2, [pc, #56]	@ (8008840 <config_motors+0xa38>)
 8008806:	21bc      	movs	r1, #188	@ 0xbc
 8008808:	fb01 f303 	mul.w	r3, r1, r3
 800880c:	4413      	add	r3, r2
 800880e:	3318      	adds	r3, #24
 8008810:	4a10      	ldr	r2, [pc, #64]	@ (8008854 <config_motors+0xa4c>)
 8008812:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 8008814:	79bb      	ldrb	r3, [r7, #6]
 8008816:	4a0a      	ldr	r2, [pc, #40]	@ (8008840 <config_motors+0xa38>)
 8008818:	21bc      	movs	r1, #188	@ 0xbc
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	3328      	adds	r3, #40	@ 0x28
 8008822:	4a0d      	ldr	r2, [pc, #52]	@ (8008858 <config_motors+0xa50>)
 8008824:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 8008826:	79bb      	ldrb	r3, [r7, #6]
 8008828:	4a05      	ldr	r2, [pc, #20]	@ (8008840 <config_motors+0xa38>)
 800882a:	21bc      	movs	r1, #188	@ 0xbc
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	332c      	adds	r3, #44	@ 0x2c
 8008834:	4a09      	ldr	r2, [pc, #36]	@ (800885c <config_motors+0xa54>)
 8008836:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ticks = 4096 * g_can_motors[motor_id].angle_data.gearbox_ratio;
	g_can_motors[motor_id].angle_data.tick_range = g_can_motors[motor_id].angle_data.max_ticks
			- g_can_motors[motor_id].angle_data.min_ticks;
#endif
#endif
}
 8008838:	bf00      	nop
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20001e24 	.word	0x20001e24
 8008844:	41700000 	.word	0x41700000
 8008848:	41200000 	.word	0x41200000
 800884c:	3d4ccccd 	.word	0x3d4ccccd
 8008850:	466a6000 	.word	0x466a6000
 8008854:	447a0000 	.word	0x447a0000
 8008858:	459c4000 	.word	0x459c4000
 800885c:	469c4000 	.word	0x469c4000

08008860 <bz_buzzer>:

void bz_buzzer(uint8_t high, uint8_t low) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	460a      	mov	r2, r1
 800886a:	71fb      	strb	r3, [r7, #7]
 800886c:	4613      	mov	r3, r2
 800886e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_msg = bz_debug_high;
 8008870:	2309      	movs	r3, #9
 8008872:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < high; i++) {
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
 8008878:	e00a      	b.n	8008890 <bz_buzzer+0x30>
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800887a:	4b1a      	ldr	r3, [pc, #104]	@ (80088e4 <bz_buzzer+0x84>)
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f107 010d 	add.w	r1, r7, #13
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	f00d fd8f 	bl	80163a8 <xQueueGenericSend>
	for (uint8_t i = 0; i < high; i++) {
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	3301      	adds	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
 8008890:	7bfa      	ldrb	r2, [r7, #15]
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	429a      	cmp	r2, r3
 8008896:	d3f0      	bcc.n	800887a <bz_buzzer+0x1a>
	}
	temp_msg = bz_debug_low;
 8008898:	2308      	movs	r3, #8
 800889a:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < low; i++) {
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]
 80088a0:	e00d      	b.n	80088be <bz_buzzer+0x5e>
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80088a2:	4b10      	ldr	r3, [pc, #64]	@ (80088e4 <bz_buzzer+0x84>)
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f107 010d 	add.w	r1, r7, #13
 80088aa:	2300      	movs	r3, #0
 80088ac:	2200      	movs	r2, #0
 80088ae:	f00d fd7b 	bl	80163a8 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 80088b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	3301      	adds	r3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	73bb      	strb	r3, [r7, #14]
 80088be:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80088c2:	79bb      	ldrb	r3, [r7, #6]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	dbec      	blt.n	80088a2 <bz_buzzer+0x42>
	}
	temp_msg = bz_debug_rest;
 80088c8:	230a      	movs	r3, #10
 80088ca:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80088cc:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <bz_buzzer+0x84>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	f107 010d 	add.w	r1, r7, #13
 80088d4:	2300      	movs	r3, #0
 80088d6:	2200      	movs	r2, #0
 80088d8:	f00d fd66 	bl	80163a8 <xQueueGenericSend>
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	200032d0 	.word	0x200032d0

080088e8 <motor_temp_bz>:

void motor_temp_bz(uint8_t hi, uint8_t low) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	460a      	mov	r2, r1
 80088f2:	71fb      	strb	r3, [r7, #7]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_msg = bz_debug_hi_temp;
 80088f8:	230b      	movs	r3, #11
 80088fa:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80088fc:	4b27      	ldr	r3, [pc, #156]	@ (800899c <motor_temp_bz+0xb4>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	f107 010d 	add.w	r1, r7, #13
 8008904:	2300      	movs	r3, #0
 8008906:	2200      	movs	r2, #0
 8008908:	f00d fd4e 	bl	80163a8 <xQueueGenericSend>
	temp_msg = bz_debug_rest;
 800890c:	230a      	movs	r3, #10
 800890e:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8008910:	4b22      	ldr	r3, [pc, #136]	@ (800899c <motor_temp_bz+0xb4>)
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	f107 010d 	add.w	r1, r7, #13
 8008918:	2300      	movs	r3, #0
 800891a:	2200      	movs	r2, #0
 800891c:	f00d fd44 	bl	80163a8 <xQueueGenericSend>
	for (int8_t i = 0; i < hi; i++) {
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
 8008924:	e00f      	b.n	8008946 <motor_temp_bz+0x5e>
		temp_msg = bz_temp_hi;
 8008926:	230c      	movs	r3, #12
 8008928:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800892a:	4b1c      	ldr	r3, [pc, #112]	@ (800899c <motor_temp_bz+0xb4>)
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	f107 010d 	add.w	r1, r7, #13
 8008932:	2300      	movs	r3, #0
 8008934:	2200      	movs	r2, #0
 8008936:	f00d fd37 	bl	80163a8 <xQueueGenericSend>
	for (int8_t i = 0; i < hi; i++) {
 800893a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	3301      	adds	r3, #1
 8008942:	b2db      	uxtb	r3, r3
 8008944:	73fb      	strb	r3, [r7, #15]
 8008946:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	429a      	cmp	r2, r3
 800894e:	dbea      	blt.n	8008926 <motor_temp_bz+0x3e>
	}
	for (int8_t i = 0; i < low; i++) {
 8008950:	2300      	movs	r3, #0
 8008952:	73bb      	strb	r3, [r7, #14]
 8008954:	e00f      	b.n	8008976 <motor_temp_bz+0x8e>
		temp_msg = bz_temp_low;
 8008956:	230d      	movs	r3, #13
 8008958:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800895a:	4b10      	ldr	r3, [pc, #64]	@ (800899c <motor_temp_bz+0xb4>)
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f107 010d 	add.w	r1, r7, #13
 8008962:	2300      	movs	r3, #0
 8008964:	2200      	movs	r2, #0
 8008966:	f00d fd1f 	bl	80163a8 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800896a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	3301      	adds	r3, #1
 8008972:	b2db      	uxtb	r3, r3
 8008974:	73bb      	strb	r3, [r7, #14]
 8008976:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800897a:	79bb      	ldrb	r3, [r7, #6]
 800897c:	429a      	cmp	r2, r3
 800897e:	dbea      	blt.n	8008956 <motor_temp_bz+0x6e>
	}
	temp_msg = bz_debug_rest;
 8008980:	230a      	movs	r3, #10
 8008982:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8008984:	4b05      	ldr	r3, [pc, #20]	@ (800899c <motor_temp_bz+0xb4>)
 8008986:	6818      	ldr	r0, [r3, #0]
 8008988:	f107 010d 	add.w	r1, r7, #13
 800898c:	2300      	movs	r3, #0
 800898e:	2200      	movs	r2, #0
 8008990:	f00d fd0a 	bl	80163a8 <xQueueGenericSend>

}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	200032d0 	.word	0x200032d0

080089a0 <check_motors>:

uint16_t check_motors() {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 80089aa:	f7f9 fc03 	bl	80021b4 <get_microseconds>
 80089ae:	6038      	str	r0, [r7, #0]
	if (curr_time
			- g_can_motors[FR_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 80089b0:	4b64      	ldr	r3, [pc, #400]	@ (8008b44 <check_motors+0x1a4>)
 80089b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	1ad3      	subs	r3, r2, r3
	if (curr_time
 80089ba:	4a63      	ldr	r2, [pc, #396]	@ (8008b48 <check_motors+0x1a8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d904      	bls.n	80089ca <check_motors+0x2a>
		error |= 1 << (0);
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	80fb      	strh	r3, [r7, #6]
 80089c8:	e007      	b.n	80089da <check_motors+0x3a>

	} else {
		if (g_can_motors[FR_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 80089ca:	4b5e      	ldr	r3, [pc, #376]	@ (8008b44 <check_motors+0x1a4>)
 80089cc:	7b1b      	ldrb	r3, [r3, #12]
 80089ce:	2b46      	cmp	r3, #70	@ 0x46
 80089d0:	d903      	bls.n	80089da <check_motors+0x3a>
			motor_temp_bz(1, 1);
 80089d2:	2101      	movs	r1, #1
 80089d4:	2001      	movs	r0, #1
 80089d6:	f7ff ff87 	bl	80088e8 <motor_temp_bz>

		}
	}

	if (curr_time
			- g_can_motors[FL_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 80089da:	4b5a      	ldr	r3, [pc, #360]	@ (8008b44 <check_motors+0x1a4>)
 80089dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	1ad3      	subs	r3, r2, r3
	if (curr_time
 80089e4:	4a58      	ldr	r2, [pc, #352]	@ (8008b48 <check_motors+0x1a8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d904      	bls.n	80089f4 <check_motors+0x54>
		error |= 1 << (1);
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	80fb      	strh	r3, [r7, #6]
 80089f2:	e008      	b.n	8008a06 <check_motors+0x66>

	} else {
		if (g_can_motors[FL_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 80089f4:	4b53      	ldr	r3, [pc, #332]	@ (8008b44 <check_motors+0x1a4>)
 80089f6:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 80089fa:	2b46      	cmp	r3, #70	@ 0x46
 80089fc:	d903      	bls.n	8008a06 <check_motors+0x66>
			motor_temp_bz(1, 2);
 80089fe:	2102      	movs	r1, #2
 8008a00:	2001      	movs	r0, #1
 8008a02:	f7ff ff71 	bl	80088e8 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[BL_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008a06:	4b4f      	ldr	r3, [pc, #316]	@ (8008b44 <check_motors+0x1a4>)
 8008a08:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008a10:	4a4d      	ldr	r2, [pc, #308]	@ (8008b48 <check_motors+0x1a8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d904      	bls.n	8008a20 <check_motors+0x80>
		error |= 1 << (2);
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	f043 0304 	orr.w	r3, r3, #4
 8008a1c:	80fb      	strh	r3, [r7, #6]
 8008a1e:	e008      	b.n	8008a32 <check_motors+0x92>
	} else {
		if (g_can_motors[BL_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008a20:	4b48      	ldr	r3, [pc, #288]	@ (8008b44 <check_motors+0x1a4>)
 8008a22:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8008a26:	2b46      	cmp	r3, #70	@ 0x46
 8008a28:	d903      	bls.n	8008a32 <check_motors+0x92>
			motor_temp_bz(1, 3);
 8008a2a:	2103      	movs	r1, #3
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	f7ff ff5b 	bl	80088e8 <motor_temp_bz>
		}
	}
	if (curr_time
			- g_can_motors[BR_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008a32:	4b44      	ldr	r3, [pc, #272]	@ (8008b44 <check_motors+0x1a4>)
 8008a34:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008a3c:	4a42      	ldr	r2, [pc, #264]	@ (8008b48 <check_motors+0x1a8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d904      	bls.n	8008a4c <check_motors+0xac>
		error |= 1 << (3);
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	f043 0308 	orr.w	r3, r3, #8
 8008a48:	80fb      	strh	r3, [r7, #6]
 8008a4a:	e008      	b.n	8008a5e <check_motors+0xbe>
	} else {
		if (g_can_motors[BR_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b44 <check_motors+0x1a4>)
 8008a4e:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8008a52:	2b46      	cmp	r3, #70	@ 0x46
 8008a54:	d903      	bls.n	8008a5e <check_motors+0xbe>
			motor_temp_bz(1, 4);
 8008a56:	2104      	movs	r1, #4
 8008a58:	2001      	movs	r0, #1
 8008a5a:	f7ff ff45 	bl	80088e8 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[LFRICTION_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008a5e:	4b39      	ldr	r3, [pc, #228]	@ (8008b44 <check_motors+0x1a4>)
 8008a60:	f8d3 3460 	ldr.w	r3, [r3, #1120]	@ 0x460
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008a68:	4a37      	ldr	r2, [pc, #220]	@ (8008b48 <check_motors+0x1a8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d904      	bls.n	8008a78 <check_motors+0xd8>
		error |= 1 << (4);
 8008a6e:	88fb      	ldrh	r3, [r7, #6]
 8008a70:	f043 0310 	orr.w	r3, r3, #16
 8008a74:	80fb      	strh	r3, [r7, #6]
 8008a76:	e008      	b.n	8008a8a <check_motors+0xea>

	} else {
		if (g_can_motors[LFRICTION_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008a78:	4b32      	ldr	r3, [pc, #200]	@ (8008b44 <check_motors+0x1a4>)
 8008a7a:	f893 33b8 	ldrb.w	r3, [r3, #952]	@ 0x3b8
 8008a7e:	2b46      	cmp	r3, #70	@ 0x46
 8008a80:	d903      	bls.n	8008a8a <check_motors+0xea>
			motor_temp_bz(2, 1);
 8008a82:	2101      	movs	r1, #1
 8008a84:	2002      	movs	r0, #2
 8008a86:	f7ff ff2f 	bl	80088e8 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[RFRICTION_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8008b44 <check_motors+0x1a4>)
 8008a8c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008a94:	4a2c      	ldr	r2, [pc, #176]	@ (8008b48 <check_motors+0x1a8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d904      	bls.n	8008aa4 <check_motors+0x104>
		error |= 1 << (5);
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	80fb      	strh	r3, [r7, #6]
 8008aa2:	e008      	b.n	8008ab6 <check_motors+0x116>

	} else {
		if (g_can_motors[RFRICTION_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008aa4:	4b27      	ldr	r3, [pc, #156]	@ (8008b44 <check_motors+0x1a4>)
 8008aa6:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8008aaa:	2b46      	cmp	r3, #70	@ 0x46
 8008aac:	d903      	bls.n	8008ab6 <check_motors+0x116>
			motor_temp_bz(2, 2);
 8008aae:	2102      	movs	r1, #2
 8008ab0:	2002      	movs	r0, #2
 8008ab2:	f7ff ff19 	bl	80088e8 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[FEEDER_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008ab6:	4b23      	ldr	r3, [pc, #140]	@ (8008b44 <check_motors+0x1a4>)
 8008ab8:	f8d3 351c 	ldr.w	r3, [r3, #1308]	@ 0x51c
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008ac0:	4a21      	ldr	r2, [pc, #132]	@ (8008b48 <check_motors+0x1a8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d904      	bls.n	8008ad0 <check_motors+0x130>
		error |= 1 << 6;
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008acc:	80fb      	strh	r3, [r7, #6]
 8008ace:	e008      	b.n	8008ae2 <check_motors+0x142>

	} else {
		if (g_can_motors[FEEDER_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b44 <check_motors+0x1a4>)
 8008ad2:	f893 3474 	ldrb.w	r3, [r3, #1140]	@ 0x474
 8008ad6:	2b46      	cmp	r3, #70	@ 0x46
 8008ad8:	d903      	bls.n	8008ae2 <check_motors+0x142>
			motor_temp_bz(2, 3);
 8008ada:	2103      	movs	r1, #3
 8008adc:	2002      	movs	r0, #2
 8008ade:	f7ff ff03 	bl	80088e8 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[PITCH_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008ae2:	4b18      	ldr	r3, [pc, #96]	@ (8008b44 <check_motors+0x1a4>)
 8008ae4:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	@ 0x5d8
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008aec:	4a16      	ldr	r2, [pc, #88]	@ (8008b48 <check_motors+0x1a8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d904      	bls.n	8008afc <check_motors+0x15c>
		error |= 1 << 7;
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af8:	80fb      	strh	r3, [r7, #6]
 8008afa:	e008      	b.n	8008b0e <check_motors+0x16e>

	} else {
		if (g_can_motors[PITCH_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008afc:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <check_motors+0x1a4>)
 8008afe:	f893 3530 	ldrb.w	r3, [r3, #1328]	@ 0x530
 8008b02:	2b46      	cmp	r3, #70	@ 0x46
 8008b04:	d903      	bls.n	8008b0e <check_motors+0x16e>
			motor_temp_bz(3, 1);
 8008b06:	2101      	movs	r1, #1
 8008b08:	2003      	movs	r0, #3
 8008b0a:	f7ff feed 	bl	80088e8 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[YAW_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <check_motors+0x1a4>)
 8008b10:	f8d3 3ea8 	ldr.w	r3, [r3, #3752]	@ 0xea8
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	1ad3      	subs	r3, r2, r3
	if (curr_time
 8008b18:	4a0b      	ldr	r2, [pc, #44]	@ (8008b48 <check_motors+0x1a8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d904      	bls.n	8008b28 <check_motors+0x188>
		error |= 1 << 8;
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b24:	80fb      	strh	r3, [r7, #6]
 8008b26:	e008      	b.n	8008b3a <check_motors+0x19a>

	} else {
		if (g_can_motors[YAW_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 8008b28:	4b06      	ldr	r3, [pc, #24]	@ (8008b44 <check_motors+0x1a4>)
 8008b2a:	f893 3e00 	ldrb.w	r3, [r3, #3584]	@ 0xe00
 8008b2e:	2b46      	cmp	r3, #70	@ 0x46
 8008b30:	d903      	bls.n	8008b3a <check_motors+0x19a>
			motor_temp_bz(3, 2);
 8008b32:	2102      	movs	r1, #2
 8008b34:	2003      	movs	r0, #3
 8008b36:	f7ff fed7 	bl	80088e8 <motor_temp_bz>
		}
	}
	return error;
 8008b3a:	88fb      	ldrh	r3, [r7, #6]

}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20001e24 	.word	0x20001e24
 8008b48:	000f4240 	.word	0x000f4240

08008b4c <motor_calib_task>:

void motor_calib_task(void *argument) {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	4842      	ldr	r0, [pc, #264]	@ (8008c64 <motor_calib_task+0x118>)
 8008b5a:	f7f8 fb6f 	bl	800123c <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	4841      	ldr	r0, [pc, #260]	@ (8008c68 <motor_calib_task+0x11c>)
 8008b64:	f7f8 fb6a 	bl	800123c <can_start>
	config_motors();
 8008b68:	f7ff f94e 	bl	8007e08 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 8008b6c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8008b70:	82fb      	strh	r3, [r7, #22]
	vTaskDelay(50);
 8008b72:	2032      	movs	r0, #50	@ 0x32
 8008b74:	f00e fb02 	bl	801717c <vTaskDelay>
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0) {
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <motor_calib_task+0x38>
		temp_msg = ok;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	e001      	b.n	8008b88 <motor_calib_task+0x3c>
	} else {
		temp_msg = not_ok;
 8008b84:	2302      	movs	r3, #2
 8008b86:	73fb      	strb	r3, [r7, #15]
	}
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8008b88:	4b38      	ldr	r3, [pc, #224]	@ (8008c6c <motor_calib_task+0x120>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	f107 010f 	add.w	r1, r7, #15
 8008b90:	2300      	movs	r3, #0
 8008b92:	2200      	movs	r2, #0
 8008b94:	f00d fc08 	bl	80163a8 <xQueueGenericSend>
	uint32_t last_check = HAL_GetTick();
 8008b98:	f000 fffc 	bl	8009b94 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]
	while (1) {
		error = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	82fb      	strh	r3, [r7, #22]

		error = check_motors();
 8008ba2:	f7ff fefd 	bl	80089a0 <check_motors>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	82fb      	strh	r3, [r7, #22]
		g_motor_fault = error;
 8008baa:	4a31      	ldr	r2, [pc, #196]	@ (8008c70 <motor_calib_task+0x124>)
 8008bac:	8afb      	ldrh	r3, [r7, #22]
 8008bae:	8013      	strh	r3, [r2, #0]
		uint32_t delay = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61bb      	str	r3, [r7, #24]
		if (HAL_GetTick() - last_check > 30000) {
 8008bb4:	f000 ffee 	bl	8009b94 <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	f247 5230 	movw	r2, #30000	@ 0x7530
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d949      	bls.n	8008c5a <motor_calib_task+0x10e>
					bz_buzzer(0, 2);
					vTaskDelay(5000);
					continue;
				}
			} else {
				error = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	82fb      	strh	r3, [r7, #22]
			}
			for (uint8_t i = 0; i < 4; i++) {
 8008bca:	2300      	movs	r3, #0
 8008bcc:	777b      	strb	r3, [r7, #29]
 8008bce:	e011      	b.n	8008bf4 <motor_calib_task+0xa8>
				if (error & (1 << (i))) {
 8008bd0:	8afa      	ldrh	r2, [r7, #22]
 8008bd2:	7f7b      	ldrb	r3, [r7, #29]
 8008bd4:	fa42 f303 	asr.w	r3, r2, r3
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d006      	beq.n	8008bee <motor_calib_task+0xa2>
					bz_buzzer(1, i + 1);
 8008be0:	7f7b      	ldrb	r3, [r7, #29]
 8008be2:	3301      	adds	r3, #1
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	4619      	mov	r1, r3
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7ff fe39 	bl	8008860 <bz_buzzer>
			for (uint8_t i = 0; i < 4; i++) {
 8008bee:	7f7b      	ldrb	r3, [r7, #29]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	777b      	strb	r3, [r7, #29]
 8008bf4:	7f7b      	ldrb	r3, [r7, #29]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d9ea      	bls.n	8008bd0 <motor_calib_task+0x84>
				} else {

				}
			}
			for (uint8_t i = 4; i < 7; i++) {
 8008bfa:	2304      	movs	r3, #4
 8008bfc:	77bb      	strb	r3, [r7, #30]
 8008bfe:	e011      	b.n	8008c24 <motor_calib_task+0xd8>
				if (error & (1 << (i))) {
 8008c00:	8afa      	ldrh	r2, [r7, #22]
 8008c02:	7fbb      	ldrb	r3, [r7, #30]
 8008c04:	fa42 f303 	asr.w	r3, r2, r3
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <motor_calib_task+0xd2>
					bz_buzzer(2, (i - 3));
 8008c10:	7fbb      	ldrb	r3, [r7, #30]
 8008c12:	3b03      	subs	r3, #3
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	2002      	movs	r0, #2
 8008c1a:	f7ff fe21 	bl	8008860 <bz_buzzer>
			for (uint8_t i = 4; i < 7; i++) {
 8008c1e:	7fbb      	ldrb	r3, [r7, #30]
 8008c20:	3301      	adds	r3, #1
 8008c22:	77bb      	strb	r3, [r7, #30]
 8008c24:	7fbb      	ldrb	r3, [r7, #30]
 8008c26:	2b06      	cmp	r3, #6
 8008c28:	d9ea      	bls.n	8008c00 <motor_calib_task+0xb4>
				}
			}
			for (uint8_t i = 7; i < 9; i++) {
 8008c2a:	2307      	movs	r3, #7
 8008c2c:	77fb      	strb	r3, [r7, #31]
 8008c2e:	e011      	b.n	8008c54 <motor_calib_task+0x108>
				if (error & (1 << (i))) {
 8008c30:	8afa      	ldrh	r2, [r7, #22]
 8008c32:	7ffb      	ldrb	r3, [r7, #31]
 8008c34:	fa42 f303 	asr.w	r3, r2, r3
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <motor_calib_task+0x102>
					bz_buzzer(3, (i - 6));
 8008c40:	7ffb      	ldrb	r3, [r7, #31]
 8008c42:	3b06      	subs	r3, #6
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	4619      	mov	r1, r3
 8008c48:	2003      	movs	r0, #3
 8008c4a:	f7ff fe09 	bl	8008860 <bz_buzzer>
			for (uint8_t i = 7; i < 9; i++) {
 8008c4e:	7ffb      	ldrb	r3, [r7, #31]
 8008c50:	3301      	adds	r3, #1
 8008c52:	77fb      	strb	r3, [r7, #31]
 8008c54:	7ffb      	ldrb	r3, [r7, #31]
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	d9ea      	bls.n	8008c30 <motor_calib_task+0xe4>
				}
			}
		}

		vTaskDelay(1000);
 8008c5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c5e:	f00e fa8d 	bl	801717c <vTaskDelay>
	while (1) {
 8008c62:	e79c      	b.n	8008b9e <motor_calib_task+0x52>
 8008c64:	200008d4 	.word	0x200008d4
 8008c68:	200008fc 	.word	0x200008fc
 8008c6c:	200032d0 	.word	0x200032d0
 8008c70:	200032d4 	.word	0x200032d4
 8008c74:	00000000 	.word	0x00000000

08008c78 <angle_pid>:
 * @param curr_pt current angle
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */
void angle_pid(double setpoint, double curr_pt, motor_data_t *motor) {
 8008c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c7c:	b08c      	sub	sp, #48	@ 0x30
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	ed87 0b04 	vstr	d0, [r7, #16]
 8008c84:	ed87 1b02 	vstr	d1, [r7, #8]
 8008c88:	6078      	str	r0, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 8008c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c92:	f7f7 faf9 	bl	8000288 <__aeabi_dsub>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	if (ang_diff > PI) {
 8008c9e:	a357      	add	r3, pc, #348	@ (adr r3, 8008dfc <angle_pid+0x184>)
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ca8:	f7f7 ff36 	bl	8000b18 <__aeabi_dcmpgt>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <angle_pid+0x52>
		ang_diff -= 2 * PI;
 8008cb2:	a354      	add	r3, pc, #336	@ (adr r3, 8008e04 <angle_pid+0x18c>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008cbc:	f7f7 fae4 	bl	8000288 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8008cc8:	e014      	b.n	8008cf4 <angle_pid+0x7c>
	} else if (ang_diff < -PI) {
 8008cca:	a350      	add	r3, pc, #320	@ (adr r3, 8008e0c <angle_pid+0x194>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008cd4:	f7f7 ff02 	bl	8000adc <__aeabi_dcmplt>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <angle_pid+0x7c>
		ang_diff += 2 * PI;
 8008cde:	a349      	add	r3, pc, #292	@ (adr r3, 8008e04 <angle_pid+0x18c>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ce8:	f7f7 fad0 	bl	800028c <__adddf3>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	651a      	str	r2, [r3, #80]	@ 0x50
	motor->angle_pid.error[0] = ang_diff;
 8008cfc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d00:	f7f7 ff72 	bl	8000be8 <__aeabi_d2f>
 8008d04:	4602      	mov	r2, r0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	64da      	str	r2, [r3, #76]	@ 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7f7 fc1a 	bl	8000548 <__aeabi_f2d>
 8008d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d18:	f7f7 fc6e 	bl	80005f8 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4610      	mov	r0, r2
 8008d22:	4619      	mov	r1, r3
 8008d24:	f7f7 ff60 	bl	8000be8 <__aeabi_d2f>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008d3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d46:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.integral += motor->angle_pid.error[0] * motor->angle_pid.ki;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	float_minmax(&motor->angle_pid.integral, motor->angle_pid.int_max, 0);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8008d76:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8008df8 <angle_pid+0x180>
 8008d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f000 f8ed 	bl	8008f5e <float_minmax>
	float rpm_iOut = motor->angle_pid.integral;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d88:	61fb      	str	r3, [r7, #28]
	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 8008d8a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d96:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
	float_minmax(&motor->angle_pid.output, motor->angle_pid.max_out,0);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8008db0:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8008df8 <angle_pid+0x180>
 8008db4:	eeb0 0a67 	vmov.f32	s0, s15
 8008db8:	4610      	mov	r0, r2
 8008dba:	f000 f8d0 	bl	8008f5e <float_minmax>
	speed_pid(motor->angle_pid.output, motor->raw_data.rpm, &motor->rpm_pid);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f7 fbc0 	bl	8000548 <__aeabi_f2d>
 8008dc8:	4604      	mov	r4, r0
 8008dca:	460d      	mov	r5, r1
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f7 fba6 	bl	8000524 <__aeabi_i2d>
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4689      	mov	r9, r1
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3310      	adds	r3, #16
 8008de0:	4618      	mov	r0, r3
 8008de2:	ec49 8b11 	vmov	d1, r8, r9
 8008de6:	ec45 4b10 	vmov	d0, r4, r5
 8008dea:	f000 f813 	bl	8008e14 <speed_pid>
}
 8008dee:	bf00      	nop
 8008df0:	3730      	adds	r7, #48	@ 0x30
 8008df2:	46bd      	mov	sp, r7
 8008df4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	60000000 	.word	0x60000000
 8008e00:	400921fb 	.word	0x400921fb
 8008e04:	60000000 	.word	0x60000000
 8008e08:	401921fb 	.word	0x401921fb
 8008e0c:	60000000 	.word	0x60000000
 8008e10:	c00921fb 	.word	0xc00921fb

08008e14 <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	@ 0x28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	ed87 0b04 	vstr	d0, [r7, #16]
 8008e1e:	ed87 1b02 	vstr	d1, [r7, #8]
 8008e22:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->last_time[0] = get_microseconds();
 8008e2c:	f7f9 f9c2 	bl	80021b4 <get_microseconds>
 8008e30:	4602      	mov	r2, r0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	629a      	str	r2, [r3, #40]	@ 0x28
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 8008e36:	2301      	movs	r3, #1
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
	float Pout = 0;
 8008e3a:	f04f 0300 	mov.w	r3, #0
 8008e3e:	623b      	str	r3, [r7, #32]
	float Iout = 0;
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
	float Dout = 0;
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]

	pid->error[1] = pid->error[0];
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 8008e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e5c:	f7f7 fa14 	bl	8000288 <__aeabi_dsub>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4610      	mov	r0, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	f7f7 febe 	bl	8000be8 <__aeabi_d2f>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	ed93 7a03 	vldr	s14, [r3, #12]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	edd3 7a00 	vldr	s15, [r3]
 8008e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e90:	edc7 7a08 	vstr	s15, [r7, #32]
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	ed93 7a03 	vldr	s14, [r3, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	edd3 7a02 	vldr	s15, [r3, #8]
 8008eaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	ee07 3a90 	vmov	s15, r3
 8008eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebc:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	ed93 7a05 	vldr	s14, [r3, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	edd3 6a03 	vldr	s13, [r3, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f103 0214 	add.w	r2, r3, #20
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	edd3 7a06 	vldr	s15, [r3, #24]
 8008efa:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8008f4c <speed_pid+0x138>
 8008efe:	eeb0 0a67 	vmov.f32	s0, s15
 8008f02:	4610      	mov	r0, r2
 8008f04:	f000 f82b 	bl	8008f5e <float_minmax>
	Iout = pid->integral;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	61fb      	str	r3, [r7, #28]
	pid->output = Pout + Iout + Dout;
 8008f0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	edc3 7a08 	vstr	s15, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f103 0220 	add.w	r2, r3, #32
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f34:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8008f4c <speed_pid+0x138>
 8008f38:	eeb0 0a67 	vmov.f32	s0, s15
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f000 f80e 	bl	8008f5e <float_minmax>
}
 8008f42:	bf00      	nop
 8008f44:	3728      	adds	r7, #40	@ 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	00000000 	.word	0x00000000

08008f50 <kill_can>:
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
	}
#endif
}

void kill_can() {
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0

}
 8008f54:	bf00      	nop
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	ed87 0a02 	vstr	s0, [r7, #8]
 8008f6a:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	edd3 7a00 	vldr	s15, [r3]
 8008f74:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f80:	d503      	bpl.n	8008f8a <float_minmax+0x2c>
		*motor_in = motor_max;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	601a      	str	r2, [r3, #0]

//	if (fabs(*motor_in) < motor_min) {
//		*motor_in = 0;
//	}

}
 8008f88:	e013      	b.n	8008fb2 <float_minmax+0x54>
	} else if (*motor_in < -motor_max) {
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	ed93 7a00 	vldr	s14, [r3]
 8008f90:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f94:	eef1 7a67 	vneg.f32	s15, s15
 8008f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa0:	d400      	bmi.n	8008fa4 <float_minmax+0x46>
}
 8008fa2:	e006      	b.n	8008fb2 <float_minmax+0x54>
		*motor_in = -motor_max;
 8008fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fa8:	eef1 7a67 	vneg.f32	s15, s15
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	edc3 7a00 	vstr	s15, [r3]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <motor_control_task>:
extern QueueHandle_t g_buzzing_task_msg;
extern remote_cmd_t g_remote_cmd;

extern uint8_t g_safety_toggle;
volatile uint32_t g_motor_control_time;
void motor_control_task(void *argument) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b090      	sub	sp, #64	@ 0x40
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	62bb      	str	r3, [r7, #40]	@ 0x28
	CAN_tx_message.DLC = 0x08;
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t enabled_motors = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	//initialise motor data
#ifdef FR_MOTOR_ID
	if (FR_MOTOR_ID < 25 && FR_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FR_MOTOR_ID - 1);
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef FL_MOTOR_ID
	if (FL_MOTOR_ID < 25 && FL_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FL_MOTOR_ID - 1);
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe2:	f043 0308 	orr.w	r3, r3, #8
 8008fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef BL_MOTOR_ID
	if (BL_MOTOR_ID < 25 && BL_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (BL_MOTOR_ID - 1);
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fea:	f043 0302 	orr.w	r3, r3, #2
 8008fee:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef BR_MOTOR_ID
	if (BR_MOTOR_ID < 25 && BR_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (BR_MOTOR_ID - 1);
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	f043 0304 	orr.w	r3, r3, #4
 8008ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef LFRICTION_MOTOR_ID
	if (LFRICTION_MOTOR_ID < 25 && LFRICTION_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (LFRICTION_MOTOR_ID - 1);
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	f043 0320 	orr.w	r3, r3, #32
 8008ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef RFRICTION_MOTOR_ID
	if (RFRICTION_MOTOR_ID < 25 && RFRICTION_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (RFRICTION_MOTOR_ID - 1);
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	f043 0310 	orr.w	r3, r3, #16
 8009006:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef FEEDER_MOTOR_ID
	if (FEEDER_MOTOR_ID < 25 && FEEDER_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FEEDER_MOTOR_ID - 1);
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef PITCH_MOTOR_ID
	if (PITCH_MOTOR_ID < 25 && PITCH_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (PITCH_MOTOR_ID - 1);
 8009010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009016:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef YAW_MOTOR_ID
	if (YAW_MOTOR_ID < 25 && YAW_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (YAW_MOTOR_ID - 1);
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800901e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif
	TickType_t start_time;
//	uint32_t last_time;
	while (1) {
		start_time = xTaskGetTickCount();
 8009020:	f00e fa00 	bl	8017424 <xTaskGetTickCount>
 8009024:	4603      	mov	r3, r0
 8009026:	60fb      	str	r3, [r7, #12]
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8009028:	4b30      	ldr	r3, [pc, #192]	@ (80090ec <motor_control_task+0x12c>)
 800902a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d162      	bne.n	80090f8 <motor_control_task+0x138>
			CAN_send_data[0] = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	76fb      	strb	r3, [r7, #27]
			CAN_tx_message.StdId = 0x200;
 8009052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009056:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	f107 0214 	add.w	r2, r7, #20
 8009060:	f107 011c 	add.w	r1, r7, #28
 8009064:	4822      	ldr	r0, [pc, #136]	@ (80090f0 <motor_control_task+0x130>)
 8009066:	f001 fa47 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800906a:	f107 0310 	add.w	r3, r7, #16
 800906e:	f107 0214 	add.w	r2, r7, #20
 8009072:	f107 011c 	add.w	r1, r7, #28
 8009076:	481f      	ldr	r0, [pc, #124]	@ (80090f4 <motor_control_task+0x134>)
 8009078:	f001 fa3e 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelay(1);
 800907c:	2001      	movs	r0, #1
 800907e:	f00e f87d 	bl	801717c <vTaskDelay>
			CAN_tx_message.StdId = 0x1FF;
 8009082:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8009086:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	f107 0214 	add.w	r2, r7, #20
 8009090:	f107 011c 	add.w	r1, r7, #28
 8009094:	4816      	ldr	r0, [pc, #88]	@ (80090f0 <motor_control_task+0x130>)
 8009096:	f001 fa2f 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800909a:	f107 0310 	add.w	r3, r7, #16
 800909e:	f107 0214 	add.w	r2, r7, #20
 80090a2:	f107 011c 	add.w	r1, r7, #28
 80090a6:	4813      	ldr	r0, [pc, #76]	@ (80090f4 <motor_control_task+0x134>)
 80090a8:	f001 fa26 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelay(1);;
 80090ac:	2001      	movs	r0, #1
 80090ae:	f00e f865 	bl	801717c <vTaskDelay>
			CAN_tx_message.StdId = 0x2FF;
 80090b2:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80090b6:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	f107 0214 	add.w	r2, r7, #20
 80090c0:	f107 011c 	add.w	r1, r7, #28
 80090c4:	480a      	ldr	r0, [pc, #40]	@ (80090f0 <motor_control_task+0x130>)
 80090c6:	f001 fa17 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 80090ca:	f107 0310 	add.w	r3, r7, #16
 80090ce:	f107 0214 	add.w	r2, r7, #20
 80090d2:	f107 011c 	add.w	r1, r7, #28
 80090d6:	4807      	ldr	r0, [pc, #28]	@ (80090f4 <motor_control_task+0x134>)
 80090d8:	f001 fa0e 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelayUntil(&start_time, 5);
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	2105      	movs	r1, #5
 80090e2:	4618      	mov	r0, r3
 80090e4:	f00d ffca 	bl	801707c <vTaskDelayUntil>
			continue;
 80090e8:	e1cd      	b.n	8009486 <motor_control_task+0x4c6>
 80090ea:	bf00      	nop
 80090ec:	200007f8 	.word	0x200007f8
 80090f0:	200008d4 	.word	0x200008d4
 80090f4:	200008fc 	.word	0x200008fc
		}
		TickType_t delay = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (enabled_motors & 0x00000F) {
 80090fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	2b00      	cmp	r3, #0
 8009104:	d042      	beq.n	800918c <motor_control_task+0x1cc>
			CAN_tx_message.StdId = 0x200;
 8009106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800910a:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x0].output;
 800910c:	4bb3      	ldr	r3, [pc, #716]	@ (80093dc <motor_control_task+0x41c>)
 800910e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8009112:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 8009114:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009118:	121b      	asrs	r3, r3, #8
 800911a:	b21b      	sxth	r3, r3
 800911c:	b2db      	uxtb	r3, r3
 800911e:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 8009120:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009122:	b2db      	uxtb	r3, r3
 8009124:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x1].output;
 8009126:	4bad      	ldr	r3, [pc, #692]	@ (80093dc <motor_control_task+0x41c>)
 8009128:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800912c:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800912e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009132:	121b      	asrs	r3, r3, #8
 8009134:	b21b      	sxth	r3, r3
 8009136:	b2db      	uxtb	r3, r3
 8009138:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800913a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800913c:	b2db      	uxtb	r3, r3
 800913e:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0x2].output;
 8009140:	4ba6      	ldr	r3, [pc, #664]	@ (80093dc <motor_control_task+0x41c>)
 8009142:	f8b3 3228 	ldrh.w	r3, [r3, #552]	@ 0x228
 8009146:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 8009148:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800914c:	121b      	asrs	r3, r3, #8
 800914e:	b21b      	sxth	r3, r3
 8009150:	b2db      	uxtb	r3, r3
 8009152:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 8009154:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009156:	b2db      	uxtb	r3, r3
 8009158:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0x3].output;
 800915a:	4ba0      	ldr	r3, [pc, #640]	@ (80093dc <motor_control_task+0x41c>)
 800915c:	f8b3 32e4 	ldrh.w	r3, [r3, #740]	@ 0x2e4
 8009160:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 8009162:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009166:	121b      	asrs	r3, r3, #8
 8009168:	b21b      	sxth	r3, r3
 800916a:	b2db      	uxtb	r3, r3
 800916c:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800916e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009170:	b2db      	uxtb	r3, r3
 8009172:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 8009174:	f107 0310 	add.w	r3, r7, #16
 8009178:	f107 0214 	add.w	r2, r7, #20
 800917c:	f107 011c 	add.w	r1, r7, #28
 8009180:	4897      	ldr	r0, [pc, #604]	@ (80093e0 <motor_control_task+0x420>)
 8009182:	f001 f9b9 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 8009186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009188:	3301      	adds	r3, #1
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		if (enabled_motors & 0x00F000) {
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d03e      	beq.n	8009214 <motor_control_task+0x254>
			CAN_tx_message.StdId = 0x200;
 8009196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800919a:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x0 + 12].output >> 8;
 800919c:	4b8f      	ldr	r3, [pc, #572]	@ (80093dc <motor_control_task+0x41c>)
 800919e:	f9b3 3980 	ldrsh.w	r3, [r3, #2432]	@ 0x980
 80091a2:	121b      	asrs	r3, r3, #8
 80091a4:	b21b      	sxth	r3, r3
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x0 + 12].output;
 80091aa:	4b8c      	ldr	r3, [pc, #560]	@ (80093dc <motor_control_task+0x41c>)
 80091ac:	f9b3 3980 	ldrsh.w	r3, [r3, #2432]	@ 0x980
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = g_can_motors[0x1 + 12].output >> 8;
 80091b4:	4b89      	ldr	r3, [pc, #548]	@ (80093dc <motor_control_task+0x41c>)
 80091b6:	f9b3 3a3c 	ldrsh.w	r3, [r3, #2620]	@ 0xa3c
 80091ba:	121b      	asrs	r3, r3, #8
 80091bc:	b21b      	sxth	r3, r3
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = g_can_motors[0x1 + 12].output;
 80091c2:	4b86      	ldr	r3, [pc, #536]	@ (80093dc <motor_control_task+0x41c>)
 80091c4:	f9b3 3a3c 	ldrsh.w	r3, [r3, #2620]	@ 0xa3c
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0x2 + 12].output >> 8;
 80091cc:	4b83      	ldr	r3, [pc, #524]	@ (80093dc <motor_control_task+0x41c>)
 80091ce:	f9b3 3af8 	ldrsh.w	r3, [r3, #2808]	@ 0xaf8
 80091d2:	121b      	asrs	r3, r3, #8
 80091d4:	b21b      	sxth	r3, r3
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0x2 + 12].output;
 80091da:	4b80      	ldr	r3, [pc, #512]	@ (80093dc <motor_control_task+0x41c>)
 80091dc:	f9b3 3af8 	ldrsh.w	r3, [r3, #2808]	@ 0xaf8
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0x3 + 12].output >> 8;
 80091e4:	4b7d      	ldr	r3, [pc, #500]	@ (80093dc <motor_control_task+0x41c>)
 80091e6:	f9b3 3bb4 	ldrsh.w	r3, [r3, #2996]	@ 0xbb4
 80091ea:	121b      	asrs	r3, r3, #8
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0x3 + 12].output;
 80091f2:	4b7a      	ldr	r3, [pc, #488]	@ (80093dc <motor_control_task+0x41c>)
 80091f4:	f9b3 3bb4 	ldrsh.w	r3, [r3, #2996]	@ 0xbb4
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 80091fc:	f107 0310 	add.w	r3, r7, #16
 8009200:	f107 0214 	add.w	r2, r7, #20
 8009204:	f107 011c 	add.w	r1, r7, #28
 8009208:	4876      	ldr	r0, [pc, #472]	@ (80093e4 <motor_control_task+0x424>)
 800920a:	f001 f975 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800920e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009210:	3301      	adds	r3, #1
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		vTaskDelay(1);
 8009214:	2001      	movs	r0, #1
 8009216:	f00d ffb1 	bl	801717c <vTaskDelay>

		if (enabled_motors & 0x0000F0) {
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d042      	beq.n	80092aa <motor_control_task+0x2ea>
			CAN_tx_message.StdId = 0x1FF;
 8009224:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8009228:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x4].output;
 800922a:	4b6c      	ldr	r3, [pc, #432]	@ (80093dc <motor_control_task+0x41c>)
 800922c:	f8b3 33a0 	ldrh.w	r3, [r3, #928]	@ 0x3a0
 8009230:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 8009232:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009236:	121b      	asrs	r3, r3, #8
 8009238:	b21b      	sxth	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800923e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009240:	b2db      	uxtb	r3, r3
 8009242:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x5].output;
 8009244:	4b65      	ldr	r3, [pc, #404]	@ (80093dc <motor_control_task+0x41c>)
 8009246:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	@ 0x45c
 800924a:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800924c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009250:	121b      	asrs	r3, r3, #8
 8009252:	b21b      	sxth	r3, r3
 8009254:	b2db      	uxtb	r3, r3
 8009256:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 8009258:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800925a:	b2db      	uxtb	r3, r3
 800925c:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0x6].output;
 800925e:	4b5f      	ldr	r3, [pc, #380]	@ (80093dc <motor_control_task+0x41c>)
 8009260:	f8b3 3518 	ldrh.w	r3, [r3, #1304]	@ 0x518
 8009264:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 8009266:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800926a:	121b      	asrs	r3, r3, #8
 800926c:	b21b      	sxth	r3, r3
 800926e:	b2db      	uxtb	r3, r3
 8009270:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 8009272:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009274:	b2db      	uxtb	r3, r3
 8009276:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0x7].output;
 8009278:	4b58      	ldr	r3, [pc, #352]	@ (80093dc <motor_control_task+0x41c>)
 800927a:	f8b3 35d4 	ldrh.w	r3, [r3, #1492]	@ 0x5d4
 800927e:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 8009280:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009284:	121b      	asrs	r3, r3, #8
 8009286:	b21b      	sxth	r3, r3
 8009288:	b2db      	uxtb	r3, r3
 800928a:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800928c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800928e:	b2db      	uxtb	r3, r3
 8009290:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 8009292:	f107 0310 	add.w	r3, r7, #16
 8009296:	f107 0214 	add.w	r2, r7, #20
 800929a:	f107 011c 	add.w	r1, r7, #28
 800929e:	4850      	ldr	r0, [pc, #320]	@ (80093e0 <motor_control_task+0x420>)
 80092a0:	f001 f92a 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 80092a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a6:	3301      	adds	r3, #1
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}


		if (enabled_motors & 0x0F0000) {
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d03e      	beq.n	8009332 <motor_control_task+0x372>
			CAN_tx_message.StdId = 0x1FF;
 80092b4:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80092b8:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x4 + 12].output >> 8;
 80092ba:	4b48      	ldr	r3, [pc, #288]	@ (80093dc <motor_control_task+0x41c>)
 80092bc:	f9b3 3c70 	ldrsh.w	r3, [r3, #3184]	@ 0xc70
 80092c0:	121b      	asrs	r3, r3, #8
 80092c2:	b21b      	sxth	r3, r3
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x4 + 12].output;
 80092c8:	4b44      	ldr	r3, [pc, #272]	@ (80093dc <motor_control_task+0x41c>)
 80092ca:	f9b3 3c70 	ldrsh.w	r3, [r3, #3184]	@ 0xc70
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = g_can_motors[0x5 + 12].output >> 8;
 80092d2:	4b42      	ldr	r3, [pc, #264]	@ (80093dc <motor_control_task+0x41c>)
 80092d4:	f9b3 3d2c 	ldrsh.w	r3, [r3, #3372]	@ 0xd2c
 80092d8:	121b      	asrs	r3, r3, #8
 80092da:	b21b      	sxth	r3, r3
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = g_can_motors[0x5 + 12].output;
 80092e0:	4b3e      	ldr	r3, [pc, #248]	@ (80093dc <motor_control_task+0x41c>)
 80092e2:	f9b3 3d2c 	ldrsh.w	r3, [r3, #3372]	@ 0xd2c
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0x6 + 12].output >> 8;
 80092ea:	4b3c      	ldr	r3, [pc, #240]	@ (80093dc <motor_control_task+0x41c>)
 80092ec:	f9b3 3de8 	ldrsh.w	r3, [r3, #3560]	@ 0xde8
 80092f0:	121b      	asrs	r3, r3, #8
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0x6 + 12].output;
 80092f8:	4b38      	ldr	r3, [pc, #224]	@ (80093dc <motor_control_task+0x41c>)
 80092fa:	f9b3 3de8 	ldrsh.w	r3, [r3, #3560]	@ 0xde8
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0x7 + 12].output >> 8;
 8009302:	4b36      	ldr	r3, [pc, #216]	@ (80093dc <motor_control_task+0x41c>)
 8009304:	f9b3 3ea4 	ldrsh.w	r3, [r3, #3748]	@ 0xea4
 8009308:	121b      	asrs	r3, r3, #8
 800930a:	b21b      	sxth	r3, r3
 800930c:	b2db      	uxtb	r3, r3
 800930e:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0x7 + 12].output;
 8009310:	4b32      	ldr	r3, [pc, #200]	@ (80093dc <motor_control_task+0x41c>)
 8009312:	f9b3 3ea4 	ldrsh.w	r3, [r3, #3748]	@ 0xea4
 8009316:	b2db      	uxtb	r3, r3
 8009318:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800931a:	f107 0310 	add.w	r3, r7, #16
 800931e:	f107 0214 	add.w	r2, r7, #20
 8009322:	f107 011c 	add.w	r1, r7, #28
 8009326:	482f      	ldr	r0, [pc, #188]	@ (80093e4 <motor_control_task+0x424>)
 8009328:	f001 f8e6 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800932c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932e:	3301      	adds	r3, #1
 8009330:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}


		if (enabled_motors & 0x000F00) {
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009338:	2b00      	cmp	r3, #0
 800933a:	d042      	beq.n	80093c2 <motor_control_task+0x402>
			CAN_tx_message.StdId = 0x2FF;
 800933c:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8009340:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x8].output;
 8009342:	4b26      	ldr	r3, [pc, #152]	@ (80093dc <motor_control_task+0x41c>)
 8009344:	f8b3 3690 	ldrh.w	r3, [r3, #1680]	@ 0x690
 8009348:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800934a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800934e:	121b      	asrs	r3, r3, #8
 8009350:	b21b      	sxth	r3, r3
 8009352:	b2db      	uxtb	r3, r3
 8009354:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 8009356:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009358:	b2db      	uxtb	r3, r3
 800935a:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x9].output;
 800935c:	4b1f      	ldr	r3, [pc, #124]	@ (80093dc <motor_control_task+0x41c>)
 800935e:	f8b3 374c 	ldrh.w	r3, [r3, #1868]	@ 0x74c
 8009362:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 8009364:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009368:	121b      	asrs	r3, r3, #8
 800936a:	b21b      	sxth	r3, r3
 800936c:	b2db      	uxtb	r3, r3
 800936e:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 8009370:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009372:	b2db      	uxtb	r3, r3
 8009374:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0xA].output;
 8009376:	4b19      	ldr	r3, [pc, #100]	@ (80093dc <motor_control_task+0x41c>)
 8009378:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800937c:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800937e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009382:	121b      	asrs	r3, r3, #8
 8009384:	b21b      	sxth	r3, r3
 8009386:	b2db      	uxtb	r3, r3
 8009388:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800938a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800938c:	b2db      	uxtb	r3, r3
 800938e:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0xB].output;
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <motor_control_task+0x41c>)
 8009392:	f8b3 38c4 	ldrh.w	r3, [r3, #2244]	@ 0x8c4
 8009396:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 8009398:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800939c:	121b      	asrs	r3, r3, #8
 800939e:	b21b      	sxth	r3, r3
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 80093a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 80093aa:	f107 0310 	add.w	r3, r7, #16
 80093ae:	f107 0214 	add.w	r2, r7, #20
 80093b2:	f107 011c 	add.w	r1, r7, #28
 80093b6:	480a      	ldr	r0, [pc, #40]	@ (80093e0 <motor_control_task+0x420>)
 80093b8:	f001 f89e 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 80093bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093be:	3301      	adds	r3, #1
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		if (enabled_motors & 0xF00000) {
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d051      	beq.n	8009470 <motor_control_task+0x4b0>
			CAN_tx_message.StdId = 0x2FF;
 80093cc:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80093d0:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x8 + 12].output >> 8;
 80093d2:	4b02      	ldr	r3, [pc, #8]	@ (80093dc <motor_control_task+0x41c>)
 80093d4:	f9b3 3f60 	ldrsh.w	r3, [r3, #3936]	@ 0xf60
 80093d8:	121b      	asrs	r3, r3, #8
 80093da:	e005      	b.n	80093e8 <motor_control_task+0x428>
 80093dc:	20001e24 	.word	0x20001e24
 80093e0:	200008d4 	.word	0x200008d4
 80093e4:	200008fc 	.word	0x200008fc
 80093e8:	b21b      	sxth	r3, r3
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x8 + 12].output;
 80093ee:	4b26      	ldr	r3, [pc, #152]	@ (8009488 <motor_control_task+0x4c8>)
 80093f0:	f9b3 3f60 	ldrsh.w	r3, [r3, #3936]	@ 0xf60
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] =  g_can_motors[0x9 + 12].output >> 8;
 80093f8:	4b23      	ldr	r3, [pc, #140]	@ (8009488 <motor_control_task+0x4c8>)
 80093fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093fe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009402:	121b      	asrs	r3, r3, #8
 8009404:	b21b      	sxth	r3, r3
 8009406:	b2db      	uxtb	r3, r3
 8009408:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] =  g_can_motors[0x9 + 12].output;
 800940a:	4b1f      	ldr	r3, [pc, #124]	@ (8009488 <motor_control_task+0x4c8>)
 800940c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009410:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0xA + 12].output >> 8;
 8009418:	4b1b      	ldr	r3, [pc, #108]	@ (8009488 <motor_control_task+0x4c8>)
 800941a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800941e:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 8009422:	121b      	asrs	r3, r3, #8
 8009424:	b21b      	sxth	r3, r3
 8009426:	b2db      	uxtb	r3, r3
 8009428:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0xA + 12].output;
 800942a:	4b17      	ldr	r3, [pc, #92]	@ (8009488 <motor_control_task+0x4c8>)
 800942c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009430:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 8009434:	b2db      	uxtb	r3, r3
 8009436:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0xB + 12].output >> 8;
 8009438:	4b13      	ldr	r3, [pc, #76]	@ (8009488 <motor_control_task+0x4c8>)
 800943a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800943e:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 8009442:	121b      	asrs	r3, r3, #8
 8009444:	b21b      	sxth	r3, r3
 8009446:	b2db      	uxtb	r3, r3
 8009448:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0xB + 12].output;
 800944a:	4b0f      	ldr	r3, [pc, #60]	@ (8009488 <motor_control_task+0x4c8>)
 800944c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009450:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 8009454:	b2db      	uxtb	r3, r3
 8009456:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 8009458:	f107 0310 	add.w	r3, r7, #16
 800945c:	f107 0214 	add.w	r2, r7, #20
 8009460:	f107 011c 	add.w	r1, r7, #28
 8009464:	4809      	ldr	r0, [pc, #36]	@ (800948c <motor_control_task+0x4cc>)
 8009466:	f001 f847 	bl	800a4f8 <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800946a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800946c:	3301      	adds	r3, #1
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		delay = (delay > 5) ? delay : 5;
 8009470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009472:	2b05      	cmp	r3, #5
 8009474:	bf38      	it	cc
 8009476:	2305      	movcc	r3, #5
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
//		last_time = get_microseconds();
		vTaskDelayUntil(&start_time, 2);
 800947a:	f107 030c 	add.w	r3, r7, #12
 800947e:	2102      	movs	r1, #2
 8009480:	4618      	mov	r0, r3
 8009482:	f00d fdfb 	bl	801707c <vTaskDelayUntil>
	while (1) {
 8009486:	e5cb      	b.n	8009020 <motor_control_task+0x60>
 8009488:	20001e24 	.word	0x20001e24
 800948c:	200008fc 	.word	0x200008fc

08009490 <b_pid_init>:
pid_data_t b_speed_pid;
pid_data_t b_angle_pid;
pid_data_t b_accel_pid;


void b_pid_init(){
 8009490:	b480      	push	{r7}
 8009492:	af00      	add	r7, sp, #0
	b_speed_pid.kp = B_SPEED_KP;
 8009494:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <b_pid_init+0x50>)
 8009496:	4a13      	ldr	r2, [pc, #76]	@ (80094e4 <b_pid_init+0x54>)
 8009498:	601a      	str	r2, [r3, #0]
	b_speed_pid.ki = B_SPEED_KI;
 800949a:	4b11      	ldr	r3, [pc, #68]	@ (80094e0 <b_pid_init+0x50>)
 800949c:	4a12      	ldr	r2, [pc, #72]	@ (80094e8 <b_pid_init+0x58>)
 800949e:	605a      	str	r2, [r3, #4]
	b_speed_pid.kd = B_SPEED_KD;
 80094a0:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <b_pid_init+0x50>)
 80094a2:	4a12      	ldr	r2, [pc, #72]	@ (80094ec <b_pid_init+0x5c>)
 80094a4:	609a      	str	r2, [r3, #8]
	b_speed_pid.int_max = B_SPEED_INT_MAX;
 80094a6:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <b_pid_init+0x50>)
 80094a8:	4a11      	ldr	r2, [pc, #68]	@ (80094f0 <b_pid_init+0x60>)
 80094aa:	619a      	str	r2, [r3, #24]
	b_speed_pid.max_out = B_MAX_ANG;
 80094ac:	4b0c      	ldr	r3, [pc, #48]	@ (80094e0 <b_pid_init+0x50>)
 80094ae:	4a11      	ldr	r2, [pc, #68]	@ (80094f4 <b_pid_init+0x64>)
 80094b0:	61da      	str	r2, [r3, #28]

	b_angle_pid.kp = B_ANGLE_KP;
 80094b2:	4b11      	ldr	r3, [pc, #68]	@ (80094f8 <b_pid_init+0x68>)
 80094b4:	4a11      	ldr	r2, [pc, #68]	@ (80094fc <b_pid_init+0x6c>)
 80094b6:	601a      	str	r2, [r3, #0]
	b_angle_pid.ki = B_ANGLE_KI;
 80094b8:	4b0f      	ldr	r3, [pc, #60]	@ (80094f8 <b_pid_init+0x68>)
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	605a      	str	r2, [r3, #4]
	b_angle_pid.kd = B_ANGLE_KD;
 80094c0:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <b_pid_init+0x68>)
 80094c2:	4a0f      	ldr	r2, [pc, #60]	@ (8009500 <b_pid_init+0x70>)
 80094c4:	609a      	str	r2, [r3, #8]
	b_angle_pid.int_max = B_ANGLE_INT_MAX;
 80094c6:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <b_pid_init+0x68>)
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	619a      	str	r2, [r3, #24]
	b_angle_pid.max_out = B_MAX_CURRENT;
 80094ce:	4b0a      	ldr	r3, [pc, #40]	@ (80094f8 <b_pid_init+0x68>)
 80094d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009504 <b_pid_init+0x74>)
 80094d2:	61da      	str	r2, [r3, #28]
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200032e8 	.word	0x200032e8
 80094e4:	3951b717 	.word	0x3951b717
 80094e8:	3456bf95 	.word	0x3456bf95
 80094ec:	38d1b717 	.word	0x38d1b717
 80094f0:	3e19999a 	.word	0x3e19999a
 80094f4:	3eb33333 	.word	0x3eb33333
 80094f8:	20003318 	.word	0x20003318
 80094fc:	461c4000 	.word	0x461c4000
 8009500:	48435000 	.word	0x48435000
 8009504:	459c4000 	.word	0x459c4000

08009508 <movement_control_task>:


void movement_control_task(void *argument) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af02      	add	r7, sp, #8
 800950e:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	//initialise in an array so it's possible to for-loop it later
	motor_yaw_mult[0] = FR_YAW_MULT;
 8009510:	4b30      	ldr	r3, [pc, #192]	@ (80095d4 <movement_control_task+0xcc>)
 8009512:	4a31      	ldr	r2, [pc, #196]	@ (80095d8 <movement_control_task+0xd0>)
 8009514:	601a      	str	r2, [r3, #0]
	motor_yaw_mult[1] = FL_YAW_MULT;
 8009516:	4b2f      	ldr	r3, [pc, #188]	@ (80095d4 <movement_control_task+0xcc>)
 8009518:	4a2f      	ldr	r2, [pc, #188]	@ (80095d8 <movement_control_task+0xd0>)
 800951a:	605a      	str	r2, [r3, #4]
	motor_yaw_mult[2] = BL_YAW_MULT;
 800951c:	4b2d      	ldr	r3, [pc, #180]	@ (80095d4 <movement_control_task+0xcc>)
 800951e:	4a2f      	ldr	r2, [pc, #188]	@ (80095dc <movement_control_task+0xd4>)
 8009520:	609a      	str	r2, [r3, #8]
	motor_yaw_mult[3] = BR_YAW_MULT;
 8009522:	4b2c      	ldr	r3, [pc, #176]	@ (80095d4 <movement_control_task+0xcc>)
 8009524:	4a2d      	ldr	r2, [pc, #180]	@ (80095dc <movement_control_task+0xd4>)
 8009526:	60da      	str	r2, [r3, #12]
	b_pid_init();
 8009528:	f7ff ffb2 	bl	8009490 <b_pid_init>

#ifndef CHASSIS_MCU

		EventBits_t motor_bits;
		//wait for all motors to have updated data before PID is allowed to run
		motor_bits = xEventGroupWaitBits(chassis_event_group, 0b1111, pdTRUE,
 800952c:	4b2c      	ldr	r3, [pc, #176]	@ (80095e0 <movement_control_task+0xd8>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	f04f 33ff 	mov.w	r3, #4294967295
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	2301      	movs	r3, #1
 8009538:	2201      	movs	r2, #1
 800953a:	210f      	movs	r1, #15
 800953c:	f00c fb60 	bl	8015c00 <xEventGroupWaitBits>
 8009540:	60f8      	str	r0, [r7, #12]
		pdTRUE,
		portMAX_DELAY);
		if (motor_bits == 0b1111) {
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b0f      	cmp	r3, #15
 8009546:	d127      	bne.n	8009598 <movement_control_task+0x90>
			status_led(3, on_led);
 8009548:	2100      	movs	r1, #0
 800954a:	2003      	movs	r0, #3
 800954c:	f7f8 fd2e 	bl	8001fac <status_led>
			start_time = xTaskGetTickCount();
 8009550:	f00d ff68 	bl	8017424 <xTaskGetTickCount>
 8009554:	4603      	mov	r3, r0
 8009556:	60bb      	str	r3, [r7, #8]
			if (chassis_ctrl_data.enabled) {
 8009558:	4b22      	ldr	r3, [pc, #136]	@ (80095e4 <movement_control_task+0xdc>)
 800955a:	7d1b      	ldrb	r3, [r3, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d006      	beq.n	800956e <movement_control_task+0x66>
						g_can_motors + FL_MOTOR_ID - 1,
						g_can_motors + BL_MOTOR_ID - 1,
						g_can_motors + BR_MOTOR_ID - 1);
			}
#endif
				chassis_motion_control(g_can_motors + FR_MOTOR_ID - 1,
 8009560:	4921      	ldr	r1, [pc, #132]	@ (80095e8 <movement_control_task+0xe0>)
 8009562:	4a22      	ldr	r2, [pc, #136]	@ (80095ec <movement_control_task+0xe4>)
 8009564:	4b22      	ldr	r3, [pc, #136]	@ (80095f0 <movement_control_task+0xe8>)
 8009566:	4823      	ldr	r0, [pc, #140]	@ (80095f4 <movement_control_task+0xec>)
 8009568:	f000 f846 	bl	80095f8 <chassis_motion_control>
 800956c:	e00f      	b.n	800958e <movement_control_task+0x86>
						g_can_motors + FL_MOTOR_ID - 1,
						g_can_motors + BL_MOTOR_ID - 1,
						g_can_motors + BR_MOTOR_ID - 1);
			} else {
				g_can_motors[FR_MOTOR_ID - 1].output = 0;
 800956e:	4b21      	ldr	r3, [pc, #132]	@ (80095f4 <movement_control_task+0xec>)
 8009570:	2200      	movs	r2, #0
 8009572:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
				g_can_motors[FL_MOTOR_ID - 1].output = 0;
 8009576:	4b1f      	ldr	r3, [pc, #124]	@ (80095f4 <movement_control_task+0xec>)
 8009578:	2200      	movs	r2, #0
 800957a:	f8a3 22e4 	strh.w	r2, [r3, #740]	@ 0x2e4
				g_can_motors[BL_MOTOR_ID - 1].output = 0;
 800957e:	4b1d      	ldr	r3, [pc, #116]	@ (80095f4 <movement_control_task+0xec>)
 8009580:	2200      	movs	r2, #0
 8009582:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
				g_can_motors[BR_MOTOR_ID - 1].output = 0;
 8009586:	4b1b      	ldr	r3, [pc, #108]	@ (80095f4 <movement_control_task+0xec>)
 8009588:	2200      	movs	r2, #0
 800958a:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228

			}
#else
		chassis_MCU_send_CAN();
#endif
			status_led(3, off_led);
 800958e:	2101      	movs	r1, #1
 8009590:	2003      	movs	r0, #3
 8009592:	f7f8 fd0b 	bl	8001fac <status_led>
 8009596:	e00f      	b.n	80095b8 <movement_control_task+0xb0>
		} else {
			//motor timed out
			g_can_motors[FR_MOTOR_ID - 1].output = 0;
 8009598:	4b16      	ldr	r3, [pc, #88]	@ (80095f4 <movement_control_task+0xec>)
 800959a:	2200      	movs	r2, #0
 800959c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
			g_can_motors[FL_MOTOR_ID - 1].output = 0;
 80095a0:	4b14      	ldr	r3, [pc, #80]	@ (80095f4 <movement_control_task+0xec>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8a3 22e4 	strh.w	r2, [r3, #740]	@ 0x2e4
			g_can_motors[BL_MOTOR_ID - 1].output = 0;
 80095a8:	4b12      	ldr	r3, [pc, #72]	@ (80095f4 <movement_control_task+0xec>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
			g_can_motors[BR_MOTOR_ID - 1].output = 0;
 80095b0:	4b10      	ldr	r3, [pc, #64]	@ (80095f4 <movement_control_task+0xec>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228
		}
		//clear bits if it's not already cleared
		xEventGroupClearBits(chassis_event_group, 0b1111);
 80095b8:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <movement_control_task+0xd8>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	210f      	movs	r1, #15
 80095be:	4618      	mov	r0, r3
 80095c0:	f00c fbf0 	bl	8015da4 <xEventGroupClearBits>
		//delays task for other tasks to run
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	2105      	movs	r1, #5
 80095ca:	4618      	mov	r0, r3
 80095cc:	f00d fd56 	bl	801707c <vTaskDelayUntil>
	while (1) {
 80095d0:	e7ac      	b.n	800952c <movement_control_task+0x24>
 80095d2:	bf00      	nop
 80095d4:	200032d8 	.word	0x200032d8
 80095d8:	bf800000 	.word	0xbf800000
 80095dc:	3f2cd9e8 	.word	0x3f2cd9e8
 80095e0:	200032b8 	.word	0x200032b8
 80095e4:	20002fc4 	.word	0x20002fc4
 80095e8:	20002058 	.word	0x20002058
 80095ec:	20001ee0 	.word	0x20001ee0
 80095f0:	20001f9c 	.word	0x20001f9c
 80095f4:	20001e24 	.word	0x20001e24

080095f8 <chassis_motion_control>:


float vforward;
float pit_turned_spd;
void chassis_motion_control(motor_data_t *motorfr, motor_data_t *motorfl,
		motor_data_t *motorbl, motor_data_t *motorbr) {
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	603b      	str	r3, [r7, #0]

}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
	...

08009614 <referee_processing_task>:
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;

queue_t referee_uart_q;

void referee_processing_task(void *argument) {
 8009614:	b5b0      	push	{r4, r5, r7, lr}
 8009616:	b088      	sub	sp, #32
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	g_referee_limiters.robot_level = 0;
 800961c:	4ba3      	ldr	r3, [pc, #652]	@ (80098ac <referee_processing_task+0x298>)
 800961e:	2200      	movs	r2, #0
 8009620:	731a      	strb	r2, [r3, #12]
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	g_referee_limiters.feeding_speed = LV1_FEEDER;
 8009622:	4ba2      	ldr	r3, [pc, #648]	@ (80098ac <referee_processing_task+0x298>)
 8009624:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8009628:	801a      	strh	r2, [r3, #0]
	g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800962a:	4ba0      	ldr	r3, [pc, #640]	@ (80098ac <referee_processing_task+0x298>)
 800962c:	2213      	movs	r2, #19
 800962e:	805a      	strh	r2, [r3, #2]
//	g_referee_limiters.wheel_power_limit = LV1_POWER;
	g_referee_limiters.robot_level = 1;
 8009630:	4b9e      	ldr	r3, [pc, #632]	@ (80098ac <referee_processing_task+0x298>)
 8009632:	2201      	movs	r2, #1
 8009634:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 8009636:	2100      	movs	r1, #0
 8009638:	2007      	movs	r0, #7
 800963a:	f7f8 fcb7 	bl	8001fac <status_led>
	status_led(8, off_led);
 800963e:	2101      	movs	r1, #1
 8009640:	2008      	movs	r0, #8
 8009642:	f7f8 fcb3 	bl	8001fac <status_led>
	ref_robot_data.robot_id = 0;
 8009646:	4b9a      	ldr	r3, [pc, #616]	@ (80098b0 <referee_processing_task+0x29c>)
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800964c:	f107 0108 	add.w	r1, r7, #8
 8009650:	4b98      	ldr	r3, [pc, #608]	@ (80098b4 <referee_processing_task+0x2a0>)
 8009652:	2202      	movs	r2, #2
 8009654:	4898      	ldr	r0, [pc, #608]	@ (80098b8 <referee_processing_task+0x2a4>)
 8009656:	f7f9 fa67 	bl	8002b28 <ref_usart_start>
	while (1) {

		uint8_t has_data = ulTaskNotifyTake(pdTRUE, 1000);
 800965a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800965e:	2001      	movs	r0, #1
 8009660:	f00e fbb2 	bl	8017dc8 <ulTaskNotifyTake>
 8009664:	4603      	mov	r3, r0
 8009666:	75fb      	strb	r3, [r7, #23]
		status_led(5, on_led);
 8009668:	2100      	movs	r1, #0
 800966a:	2005      	movs	r0, #5
 800966c:	f7f8 fc9e 	bl	8001fac <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 8009670:	4890      	ldr	r0, [pc, #576]	@ (80098b4 <referee_processing_task+0x2a0>)
 8009672:	f7f8 fdfc 	bl	800226e <queue_get_size>
 8009676:	4603      	mov	r3, r0
 8009678:	2b07      	cmp	r3, #7
 800967a:	f240 80b8 	bls.w	80097ee <referee_processing_task+0x1da>
			while (queue_get_size(&referee_uart_q) > 7) {
 800967e:	e0ad      	b.n	80097dc <referee_processing_task+0x1c8>
				proc_status = ref_process_data(&referee_uart_q, &g_ref_msg_buffer);
 8009680:	498e      	ldr	r1, [pc, #568]	@ (80098bc <referee_processing_task+0x2a8>)
 8009682:	488c      	ldr	r0, [pc, #560]	@ (80098b4 <referee_processing_task+0x2a0>)
 8009684:	f7f8 ff60 	bl	8002548 <ref_process_data>
 8009688:	4603      	mov	r3, r0
 800968a:	75bb      	strb	r3, [r7, #22]
				if (proc_status == PROCESS_SUCCESS) {
 800968c:	7dbb      	ldrb	r3, [r7, #22]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f040 809f 	bne.w	80097d2 <referee_processing_task+0x1be>
					switch (g_ref_msg_buffer.cmd_id) {
 8009694:	4b89      	ldr	r3, [pc, #548]	@ (80098bc <referee_processing_task+0x2a8>)
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800969c:	f300 809d 	bgt.w	80097da <referee_processing_task+0x1c6>
 80096a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096a4:	dc04      	bgt.n	80096b0 <referee_processing_task+0x9c>
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d029      	beq.n	80096fe <referee_processing_task+0xea>
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d071      	beq.n	8009792 <referee_processing_task+0x17e>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 80096ae:	e094      	b.n	80097da <referee_processing_task+0x1c6>
					switch (g_ref_msg_buffer.cmd_id) {
 80096b0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80096b4:	2b07      	cmp	r3, #7
 80096b6:	f200 8090 	bhi.w	80097da <referee_processing_task+0x1c6>
 80096ba:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <referee_processing_task+0xac>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	08009719 	.word	0x08009719
 80096c4:	08009761 	.word	0x08009761
 80096c8:	08009747 	.word	0x08009747
 80096cc:	080097db 	.word	0x080097db
 80096d0:	080097db 	.word	0x080097db
 80096d4:	0800977f 	.word	0x0800977f
 80096d8:	080096e1 	.word	0x080096e1
 80096dc:	080097b9 	.word	0x080097b9
						memcpy(&ref_shoot_data, &g_ref_msg_buffer.data,
 80096e0:	4a77      	ldr	r2, [pc, #476]	@ (80098c0 <referee_processing_task+0x2ac>)
 80096e2:	4b76      	ldr	r3, [pc, #472]	@ (80098bc <referee_processing_task+0x2a8>)
 80096e4:	3302      	adds	r3, #2
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	6010      	str	r0, [r2, #0]
 80096ea:	8899      	ldrh	r1, [r3, #4]
 80096ec:	799b      	ldrb	r3, [r3, #6]
 80096ee:	8091      	strh	r1, [r2, #4]
 80096f0:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 80096f2:	4b74      	ldr	r3, [pc, #464]	@ (80098c4 <referee_processing_task+0x2b0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3301      	adds	r3, #1
 80096f8:	4a72      	ldr	r2, [pc, #456]	@ (80098c4 <referee_processing_task+0x2b0>)
 80096fa:	6013      	str	r3, [r2, #0]
						break;
 80096fc:	e06e      	b.n	80097dc <referee_processing_task+0x1c8>
							memcpy(&ref_game_state, &g_ref_msg_buffer.data,
 80096fe:	4a72      	ldr	r2, [pc, #456]	@ (80098c8 <referee_processing_task+0x2b4>)
 8009700:	4b6e      	ldr	r3, [pc, #440]	@ (80098bc <referee_processing_task+0x2a8>)
 8009702:	3302      	adds	r3, #2
 8009704:	8819      	ldrh	r1, [r3, #0]
 8009706:	789b      	ldrb	r3, [r3, #2]
 8009708:	8011      	strh	r1, [r2, #0]
 800970a:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800970c:	4b6f      	ldr	r3, [pc, #444]	@ (80098cc <referee_processing_task+0x2b8>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	4a6e      	ldr	r2, [pc, #440]	@ (80098cc <referee_processing_task+0x2b8>)
 8009714:	6013      	str	r3, [r2, #0]
							break;
 8009716:	e061      	b.n	80097dc <referee_processing_task+0x1c8>
						memcpy(&ref_robot_data, &g_ref_msg_buffer.data,
 8009718:	4a65      	ldr	r2, [pc, #404]	@ (80098b0 <referee_processing_task+0x29c>)
 800971a:	4b68      	ldr	r3, [pc, #416]	@ (80098bc <referee_processing_task+0x2a8>)
 800971c:	4614      	mov	r4, r2
 800971e:	1c9d      	adds	r5, r3, #2
 8009720:	6828      	ldr	r0, [r5, #0]
 8009722:	6869      	ldr	r1, [r5, #4]
 8009724:	68aa      	ldr	r2, [r5, #8]
 8009726:	68eb      	ldr	r3, [r5, #12]
 8009728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800972a:	6928      	ldr	r0, [r5, #16]
 800972c:	6969      	ldr	r1, [r5, #20]
 800972e:	c403      	stmia	r4!, {r0, r1}
 8009730:	8b2b      	ldrh	r3, [r5, #24]
 8009732:	7eaa      	ldrb	r2, [r5, #26]
 8009734:	8023      	strh	r3, [r4, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800973a:	4b65      	ldr	r3, [pc, #404]	@ (80098d0 <referee_processing_task+0x2bc>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3301      	adds	r3, #1
 8009740:	4a63      	ldr	r2, [pc, #396]	@ (80098d0 <referee_processing_task+0x2bc>)
 8009742:	6013      	str	r3, [r2, #0]
						break;
 8009744:	e04a      	b.n	80097dc <referee_processing_task+0x1c8>
						memcpy(&ref_robot_pos, &g_ref_msg_buffer.data,
 8009746:	4b63      	ldr	r3, [pc, #396]	@ (80098d4 <referee_processing_task+0x2c0>)
 8009748:	4a5c      	ldr	r2, [pc, #368]	@ (80098bc <referee_processing_task+0x2a8>)
 800974a:	3202      	adds	r2, #2
 800974c:	6810      	ldr	r0, [r2, #0]
 800974e:	6851      	ldr	r1, [r2, #4]
 8009750:	6892      	ldr	r2, [r2, #8]
 8009752:	c307      	stmia	r3!, {r0, r1, r2}
						ref_robot_pos_txno++;
 8009754:	4b60      	ldr	r3, [pc, #384]	@ (80098d8 <referee_processing_task+0x2c4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	4a5f      	ldr	r2, [pc, #380]	@ (80098d8 <referee_processing_task+0x2c4>)
 800975c:	6013      	str	r3, [r2, #0]
						break;
 800975e:	e03d      	b.n	80097dc <referee_processing_task+0x1c8>
						memcpy(&ref_power_data, &g_ref_msg_buffer.data,
 8009760:	4a5e      	ldr	r2, [pc, #376]	@ (80098dc <referee_processing_task+0x2c8>)
 8009762:	4b56      	ldr	r3, [pc, #344]	@ (80098bc <referee_processing_task+0x2a8>)
 8009764:	4614      	mov	r4, r2
 8009766:	3302      	adds	r3, #2
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	6859      	ldr	r1, [r3, #4]
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_power_data_txno++;
 8009772:	4b5b      	ldr	r3, [pc, #364]	@ (80098e0 <referee_processing_task+0x2cc>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3301      	adds	r3, #1
 8009778:	4a59      	ldr	r2, [pc, #356]	@ (80098e0 <referee_processing_task+0x2cc>)
 800977a:	6013      	str	r3, [r2, #0]
						break;
 800977c:	e02e      	b.n	80097dc <referee_processing_task+0x1c8>
						memcpy(&ref_dmg_data, &g_ref_msg_buffer.data,
 800977e:	4b4f      	ldr	r3, [pc, #316]	@ (80098bc <referee_processing_task+0x2a8>)
 8009780:	789a      	ldrb	r2, [r3, #2]
 8009782:	4b58      	ldr	r3, [pc, #352]	@ (80098e4 <referee_processing_task+0x2d0>)
 8009784:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 8009786:	4b58      	ldr	r3, [pc, #352]	@ (80098e8 <referee_processing_task+0x2d4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	4a56      	ldr	r2, [pc, #344]	@ (80098e8 <referee_processing_task+0x2d4>)
 800978e:	6013      	str	r3, [r2, #0]
						break;
 8009790:	e024      	b.n	80097dc <referee_processing_task+0x1c8>
						memcpy(&ref_robot_hp, &g_ref_msg_buffer.data,
 8009792:	4a56      	ldr	r2, [pc, #344]	@ (80098ec <referee_processing_task+0x2d8>)
 8009794:	4b49      	ldr	r3, [pc, #292]	@ (80098bc <referee_processing_task+0x2a8>)
 8009796:	4614      	mov	r4, r2
 8009798:	1c9d      	adds	r5, r3, #2
 800979a:	6828      	ldr	r0, [r5, #0]
 800979c:	6869      	ldr	r1, [r5, #4]
 800979e:	68aa      	ldr	r2, [r5, #8]
 80097a0:	68eb      	ldr	r3, [r5, #12]
 80097a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097a4:	6928      	ldr	r0, [r5, #16]
 80097a6:	6969      	ldr	r1, [r5, #20]
 80097a8:	69aa      	ldr	r2, [r5, #24]
 80097aa:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 80097ac:	4b50      	ldr	r3, [pc, #320]	@ (80098f0 <referee_processing_task+0x2dc>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	4a4f      	ldr	r2, [pc, #316]	@ (80098f0 <referee_processing_task+0x2dc>)
 80097b4:	6013      	str	r3, [r2, #0]
						break;
 80097b6:	e011      	b.n	80097dc <referee_processing_task+0x1c8>
						memcpy(&ref_mag_data, &g_ref_msg_buffer.data,
 80097b8:	4a4e      	ldr	r2, [pc, #312]	@ (80098f4 <referee_processing_task+0x2e0>)
 80097ba:	4b40      	ldr	r3, [pc, #256]	@ (80098bc <referee_processing_task+0x2a8>)
 80097bc:	3302      	adds	r3, #2
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	6010      	str	r0, [r2, #0]
 80097c2:	889b      	ldrh	r3, [r3, #4]
 80097c4:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 80097c6:	4b4c      	ldr	r3, [pc, #304]	@ (80098f8 <referee_processing_task+0x2e4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	4a4a      	ldr	r2, [pc, #296]	@ (80098f8 <referee_processing_task+0x2e4>)
 80097ce:	6013      	str	r3, [r2, #0]
						break;
 80097d0:	e004      	b.n	80097dc <referee_processing_task+0x1c8>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 80097d2:	7dbb      	ldrb	r3, [r7, #22]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d009      	beq.n	80097ec <referee_processing_task+0x1d8>
 80097d8:	e000      	b.n	80097dc <referee_processing_task+0x1c8>
						break;
 80097da:	bf00      	nop
			while (queue_get_size(&referee_uart_q) > 7) {
 80097dc:	4835      	ldr	r0, [pc, #212]	@ (80098b4 <referee_processing_task+0x2a0>)
 80097de:	f7f8 fd46 	bl	800226e <queue_get_size>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b07      	cmp	r3, #7
 80097e6:	f63f af4b 	bhi.w	8009680 <referee_processing_task+0x6c>
 80097ea:	e000      	b.n	80097ee <referee_processing_task+0x1da>
					break;
 80097ec:	bf00      	nop
				}
			}
		}
		if (!has_data){
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10e      	bne.n	8009812 <referee_processing_task+0x1fe>
		    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 80097f4:	4b41      	ldr	r3, [pc, #260]	@ (80098fc <referee_processing_task+0x2e8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b40      	ldr	r3, [pc, #256]	@ (80098fc <referee_processing_task+0x2e8>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0201 	orr.w	r2, r2, #1
 8009802:	601a      	str	r2, [r3, #0]
			ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4b2a      	ldr	r3, [pc, #168]	@ (80098b4 <referee_processing_task+0x2a0>)
 800980a:	2202      	movs	r2, #2
 800980c:	482a      	ldr	r0, [pc, #168]	@ (80098b8 <referee_processing_task+0x2a4>)
 800980e:	f7f9 f98b 	bl	8002b28 <ref_usart_start>

		}

		status_led(5, off_led);
 8009812:	2101      	movs	r1, #1
 8009814:	2005      	movs	r0, #5
 8009816:	f7f8 fbc9 	bl	8001fac <status_led>


		status_led(5, on_led);
 800981a:	2100      	movs	r1, #0
 800981c:	2005      	movs	r0, #5
 800981e:	f7f8 fbc5 	bl	8001fac <status_led>
		if (ref_robot_data.robot_level == 1) {
 8009822:	4b23      	ldr	r3, [pc, #140]	@ (80098b0 <referee_processing_task+0x29c>)
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d112      	bne.n	8009850 <referee_processing_task+0x23c>
			g_referee_limiters.feeding_speed = LV1_FEEDER;
 800982a:	4b20      	ldr	r3, [pc, #128]	@ (80098ac <referee_processing_task+0x298>)
 800982c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8009830:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 8009832:	4b1e      	ldr	r3, [pc, #120]	@ (80098ac <referee_processing_task+0x298>)
 8009834:	2213      	movs	r2, #19
 8009836:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 1;
 8009838:	4b1c      	ldr	r3, [pc, #112]	@ (80098ac <referee_processing_task+0x298>)
 800983a:	2201      	movs	r2, #1
 800983c:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800983e:	2100      	movs	r1, #0
 8009840:	2007      	movs	r0, #7
 8009842:	f7f8 fbb3 	bl	8001fac <status_led>
			status_led(8, off_led);
 8009846:	2101      	movs	r1, #1
 8009848:	2008      	movs	r0, #8
 800984a:	f7f8 fbaf 	bl	8001fac <status_led>
 800984e:	e05e      	b.n	800990e <referee_processing_task+0x2fa>
		} else if (ref_robot_data.robot_level == 2) {
 8009850:	4b17      	ldr	r3, [pc, #92]	@ (80098b0 <referee_processing_task+0x29c>)
 8009852:	785b      	ldrb	r3, [r3, #1]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d112      	bne.n	800987e <referee_processing_task+0x26a>
			g_referee_limiters.feeding_speed = LV2_FEEDER;
 8009858:	4b14      	ldr	r3, [pc, #80]	@ (80098ac <referee_processing_task+0x298>)
 800985a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800985e:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV2_PROJECTILE;
 8009860:	4b12      	ldr	r3, [pc, #72]	@ (80098ac <referee_processing_task+0x298>)
 8009862:	2213      	movs	r2, #19
 8009864:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 2;
 8009866:	4b11      	ldr	r3, [pc, #68]	@ (80098ac <referee_processing_task+0x298>)
 8009868:	2202      	movs	r2, #2
 800986a:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 800986c:	2101      	movs	r1, #1
 800986e:	2007      	movs	r0, #7
 8009870:	f7f8 fb9c 	bl	8001fac <status_led>
			status_led(8, on_led);
 8009874:	2100      	movs	r1, #0
 8009876:	2008      	movs	r0, #8
 8009878:	f7f8 fb98 	bl	8001fac <status_led>
 800987c:	e047      	b.n	800990e <referee_processing_task+0x2fa>
		} else if (ref_robot_data.robot_level == 3) {
 800987e:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <referee_processing_task+0x29c>)
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b03      	cmp	r3, #3
 8009884:	d13c      	bne.n	8009900 <referee_processing_task+0x2ec>
			g_referee_limiters.feeding_speed = LV3_FEEDER;
 8009886:	4b09      	ldr	r3, [pc, #36]	@ (80098ac <referee_processing_task+0x298>)
 8009888:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800988c:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV3_PROJECTILE;
 800988e:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <referee_processing_task+0x298>)
 8009890:	2213      	movs	r2, #19
 8009892:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 3;
 8009894:	4b05      	ldr	r3, [pc, #20]	@ (80098ac <referee_processing_task+0x298>)
 8009896:	2203      	movs	r2, #3
 8009898:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800989a:	2100      	movs	r1, #0
 800989c:	2007      	movs	r0, #7
 800989e:	f7f8 fb85 	bl	8001fac <status_led>
			status_led(8, on_led);
 80098a2:	2100      	movs	r1, #0
 80098a4:	2008      	movs	r0, #8
 80098a6:	f7f8 fb81 	bl	8001fac <status_led>
 80098aa:	e030      	b.n	800990e <referee_processing_task+0x2fa>
 80098ac:	20003348 	.word	0x20003348
 80098b0:	200033cc 	.word	0x200033cc
 80098b4:	20003434 	.word	0x20003434
 80098b8:	20001c60 	.word	0x20001c60
 80098bc:	20003360 	.word	0x20003360
 80098c0:	20003418 	.word	0x20003418
 80098c4:	20003420 	.word	0x20003420
 80098c8:	200033a4 	.word	0x200033a4
 80098cc:	200033a8 	.word	0x200033a8
 80098d0:	200033e8 	.word	0x200033e8
 80098d4:	20003400 	.word	0x20003400
 80098d8:	2000340c 	.word	0x2000340c
 80098dc:	200033ec 	.word	0x200033ec
 80098e0:	200033fc 	.word	0x200033fc
 80098e4:	20003410 	.word	0x20003410
 80098e8:	20003414 	.word	0x20003414
 80098ec:	200033ac 	.word	0x200033ac
 80098f0:	200033c8 	.word	0x200033c8
 80098f4:	20003424 	.word	0x20003424
 80098f8:	2000342c 	.word	0x2000342c
 80098fc:	20001d64 	.word	0x20001d64
		} else {
			g_referee_limiters.feeding_speed = LV1_FEEDER;
 8009900:	4b43      	ldr	r3, [pc, #268]	@ (8009a10 <referee_processing_task+0x3fc>)
 8009902:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8009906:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 8009908:	4b41      	ldr	r3, [pc, #260]	@ (8009a10 <referee_processing_task+0x3fc>)
 800990a:	2213      	movs	r2, #19
 800990c:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 800990e:	4b41      	ldr	r3, [pc, #260]	@ (8009a14 <referee_processing_task+0x400>)
 8009910:	785b      	ldrb	r3, [r3, #1]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d070      	beq.n	80099f8 <referee_processing_task+0x3e4>
			float temp_buffer = 1;
 8009916:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800991a:	61fb      	str	r3, [r7, #28]
			if (ref_power_data.buffer_energy < 50){
 800991c:	4b3e      	ldr	r3, [pc, #248]	@ (8009a18 <referee_processing_task+0x404>)
 800991e:	891b      	ldrh	r3, [r3, #8]
 8009920:	2b31      	cmp	r3, #49	@ 0x31
 8009922:	d819      	bhi.n	8009958 <referee_processing_task+0x344>
			temp_buffer = (float)ref_power_data.buffer_energy/50;
 8009924:	4b3c      	ldr	r3, [pc, #240]	@ (8009a18 <referee_processing_task+0x404>)
 8009926:	891b      	ldrh	r3, [r3, #8]
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009930:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8009a1c <referee_processing_task+0x408>
 8009934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009938:	edc7 7a07 	vstr	s15, [r7, #28]
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 800993c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	dd02      	ble.n	8009954 <referee_processing_task+0x340>
 800994e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009952:	e000      	b.n	8009956 <referee_processing_task+0x342>
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	61fb      	str	r3, [r7, #28]
			}
#ifdef CHASSIS_POWER_BUFFER_LIMITER
			g_referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 8009958:	edd7 7a07 	vldr	s15, [r7, #28]
 800995c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009960:	4b2b      	ldr	r3, [pc, #172]	@ (8009a10 <referee_processing_task+0x3fc>)
 8009962:	edc3 7a02 	vstr	s15, [r3, #8]
#else
			g_referee_limiters.wheel_buffer_limit = 1;
#endif

			static float prev_chassis_power;
			float max_power = CHASSIS_MAX_POWER;
 8009966:	4b2e      	ldr	r3, [pc, #184]	@ (8009a20 <referee_processing_task+0x40c>)
 8009968:	61bb      	str	r3, [r7, #24]
			float curr_chassis_power = prev_chassis_power * 0.5 + ref_power_data.chassis_power * 0.5;
 800996a:	4b2e      	ldr	r3, [pc, #184]	@ (8009a24 <referee_processing_task+0x410>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f7f6 fdea 	bl	8000548 <__aeabi_f2d>
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	4b2b      	ldr	r3, [pc, #172]	@ (8009a28 <referee_processing_task+0x414>)
 800997a:	f7f6 fe3d 	bl	80005f8 <__aeabi_dmul>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4614      	mov	r4, r2
 8009984:	461d      	mov	r5, r3
 8009986:	4b24      	ldr	r3, [pc, #144]	@ (8009a18 <referee_processing_task+0x404>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	f7f6 fddc 	bl	8000548 <__aeabi_f2d>
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	4b24      	ldr	r3, [pc, #144]	@ (8009a28 <referee_processing_task+0x414>)
 8009996:	f7f6 fe2f 	bl	80005f8 <__aeabi_dmul>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fc73 	bl	800028c <__adddf3>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4610      	mov	r0, r2
 80099ac:	4619      	mov	r1, r3
 80099ae:	f7f7 f91b 	bl	8000be8 <__aeabi_d2f>
 80099b2:	4603      	mov	r3, r0
 80099b4:	613b      	str	r3, [r7, #16]
			prev_chassis_power = ref_power_data.chassis_power;
 80099b6:	4b18      	ldr	r3, [pc, #96]	@ (8009a18 <referee_processing_task+0x404>)
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009a24 <referee_processing_task+0x410>)
 80099bc:	6013      	str	r3, [r2, #0]
			if (ref_robot_data.chassis_power_limit < CHASSIS_MAX_POWER){
 80099be:	4b15      	ldr	r3, [pc, #84]	@ (8009a14 <referee_processing_task+0x400>)
 80099c0:	8b1b      	ldrh	r3, [r3, #24]
 80099c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80099c6:	d207      	bcs.n	80099d8 <referee_processing_task+0x3c4>
				max_power = ref_robot_data.chassis_power_limit;
 80099c8:	4b12      	ldr	r3, [pc, #72]	@ (8009a14 <referee_processing_task+0x400>)
 80099ca:	8b1b      	ldrh	r3, [r3, #24]
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d4:	edc7 7a06 	vstr	s15, [r7, #24]
			}
			float temp_power = (float) ((curr_chassis_power)/(max_power - CHASSIS_POWER_MARGIN));
 80099d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80099dc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80099e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80099e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80099e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ec:	edc7 7a03 	vstr	s15, [r7, #12]
//			temp_power = (temp_power > 1) ? 1 : temp_power;
			g_referee_limiters.wheel_power_limit = temp_power;
 80099f0:	4a07      	ldr	r2, [pc, #28]	@ (8009a10 <referee_processing_task+0x3fc>)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6053      	str	r3, [r2, #4]
 80099f6:	e007      	b.n	8009a08 <referee_processing_task+0x3f4>
//			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
		} else {
			g_referee_limiters.wheel_buffer_limit = 1;
 80099f8:	4b05      	ldr	r3, [pc, #20]	@ (8009a10 <referee_processing_task+0x3fc>)
 80099fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80099fe:	609a      	str	r2, [r3, #8]
			g_referee_limiters.wheel_power_limit = 1;
 8009a00:	4b03      	ldr	r3, [pc, #12]	@ (8009a10 <referee_processing_task+0x3fc>)
 8009a02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a06:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(2);
 8009a08:	2002      	movs	r0, #2
 8009a0a:	f00d fbb7 	bl	801717c <vTaskDelay>
	while (1) {
 8009a0e:	e624      	b.n	800965a <referee_processing_task+0x46>
 8009a10:	20003348 	.word	0x20003348
 8009a14:	200033cc 	.word	0x200033cc
 8009a18:	200033ec 	.word	0x200033ec
 8009a1c:	42480000 	.word	0x42480000
 8009a20:	43c80000 	.word	0x43c80000
 8009a24:	2000353c 	.word	0x2000353c
 8009a28:	3fe00000 	.word	0x3fe00000

08009a2c <startup_task>:
#include "startup_task.h"
#include "gimbal_control_task.h"
#include "buzzing_task.h"
#include <can_msg_processor.h>

void startup_task() {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 8009a30:	f7f8 fa96 	bl	8001f60 <led_on>
	buzzer_init();
 8009a34:	f7f7 fbbc 	bl	80011b0 <buzzer_init>
	imu_init();
 8009a38:	f7f8 f89c 	bl	8001b74 <imu_init>
	led_green_off();
 8009a3c:	f7f8 fa82 	bl	8001f44 <led_green_off>
	start_micros_timer();
 8009a40:	f7f8 fb94 	bl	800216c <start_micros_timer>
	led_toggle();
 8009a44:	f7f8 faaa 	bl	8001f9c <led_toggle>

}
 8009a48:	bf00      	nop
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <usb_vcp_processing>:
uint8_t usb_waiting = 0;

//#define DATA_OUTPUT_MODE
#define USB_CONFIG_MODE

void usb_vcp_processing(uint8_t *buffer, uint32_t *len) {
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b0c4      	sub	sp, #272	@ 0x110
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a5a:	6018      	str	r0, [r3, #0]
 8009a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a64:	6019      	str	r1, [r3, #0]
	uint8_t blank_buffer[MAX_CHAR_SIZE] = { 0 };
 8009a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a6a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	3304      	adds	r3, #4
 8009a74:	22fc      	movs	r2, #252	@ 0xfc
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f010 f92c 	bl	8019cd6 <memset>
	memcpy(blank_buffer, buffer, *len);
 8009a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a92:	f107 0010 	add.w	r0, r7, #16
 8009a96:	6819      	ldr	r1, [r3, #0]
 8009a98:	f010 f9c6 	bl	8019e28 <memcpy>
	memcpy(usb_input_buffer, blank_buffer, MAX_CHAR_SIZE);
 8009a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009b08 <usb_vcp_processing+0xbc>)
 8009a9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aa2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f010 f9ba 	bl	8019e28 <memcpy>
	usb_input_len = *len;
 8009ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ab8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a12      	ldr	r2, [pc, #72]	@ (8009b0c <usb_vcp_processing+0xc0>)
 8009ac2:	6013      	str	r3, [r2, #0]

	//Check if the currently running task needs to yield
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009ac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(usb_continue_semaphore, &xHigherPriorityTaskWoken);
 8009ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8009b10 <usb_vcp_processing+0xc4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f107 020c 	add.w	r2, r7, #12
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f00c fe04 	bl	80166e8 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <usb_vcp_processing+0xb2>
 8009aee:	4b09      	ldr	r3, [pc, #36]	@ (8009b14 <usb_vcp_processing+0xc8>)
 8009af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	f3bf 8f6f 	isb	sy
}
 8009afe:	bf00      	nop
 8009b00:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20003540 	.word	0x20003540
 8009b0c:	20003640 	.word	0x20003640
 8009b10:	200032c0 	.word	0x200032c0
 8009b14:	e000ed04 	.word	0xe000ed04

08009b18 <usb_task>:
	return 0;

}


void usb_task(void *argument) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
//						CDC_Transmit_FS(usb_input_buffer, len);
//					}
//				}
//			}
//		}
		vTaskDelay(100);
 8009b20:	2064      	movs	r0, #100	@ 0x64
 8009b22:	f00d fb2b 	bl	801717c <vTaskDelay>
 8009b26:	e7fb      	b.n	8009b20 <usb_task+0x8>

08009b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b68 <HAL_Init+0x40>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a0d      	ldr	r2, [pc, #52]	@ (8009b68 <HAL_Init+0x40>)
 8009b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009b38:	4b0b      	ldr	r3, [pc, #44]	@ (8009b68 <HAL_Init+0x40>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8009b68 <HAL_Init+0x40>)
 8009b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b44:	4b08      	ldr	r3, [pc, #32]	@ (8009b68 <HAL_Init+0x40>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a07      	ldr	r2, [pc, #28]	@ (8009b68 <HAL_Init+0x40>)
 8009b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b50:	2003      	movs	r0, #3
 8009b52:	f001 fa02 	bl	800af5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b56:	200f      	movs	r0, #15
 8009b58:	f7f9 ffb2 	bl	8003ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b5c:	f7f9 ff84 	bl	8003a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	40023c00 	.word	0x40023c00

08009b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b70:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <HAL_IncTick+0x20>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	461a      	mov	r2, r3
 8009b76:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <HAL_IncTick+0x24>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	4a04      	ldr	r2, [pc, #16]	@ (8009b90 <HAL_IncTick+0x24>)
 8009b7e:	6013      	str	r3, [r2, #0]
}
 8009b80:	bf00      	nop
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20000010 	.word	0x20000010
 8009b90:	20003644 	.word	0x20003644

08009b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0
  return uwTick;
 8009b98:	4b03      	ldr	r3, [pc, #12]	@ (8009ba8 <HAL_GetTick+0x14>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20003644 	.word	0x20003644

08009bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009bb4:	f7ff ffee 	bl	8009b94 <HAL_GetTick>
 8009bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc4:	d005      	beq.n	8009bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf0 <HAL_Delay+0x44>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009bd2:	bf00      	nop
 8009bd4:	f7ff ffde 	bl	8009b94 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d8f7      	bhi.n	8009bd4 <HAL_Delay+0x28>
  {
  }
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000010 	.word	0x20000010

08009bf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e033      	b.n	8009c72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d109      	bne.n	8009c26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7f9 f8ba 	bl	8002d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2a:	f003 0310 	and.w	r3, r3, #16
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d118      	bne.n	8009c64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009c3a:	f023 0302 	bic.w	r3, r3, #2
 8009c3e:	f043 0202 	orr.w	r2, r3, #2
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f93a 	bl	8009ec0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	f043 0201 	orr.w	r2, r3, #1
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	641a      	str	r2, [r3, #64]	@ 0x40
 8009c62:	e001      	b.n	8009c68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_ADC_ConfigChannel+0x1c>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e105      	b.n	8009ea4 <HAL_ADC_ConfigChannel+0x228>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d925      	bls.n	8009cf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68d9      	ldr	r1, [r3, #12]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4413      	add	r3, r2
 8009cbc:	3b1e      	subs	r3, #30
 8009cbe:	2207      	movs	r2, #7
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	43da      	mvns	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	400a      	ands	r2, r1
 8009ccc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68d9      	ldr	r1, [r3, #12]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4618      	mov	r0, r3
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	4403      	add	r3, r0
 8009ce6:	3b1e      	subs	r3, #30
 8009ce8:	409a      	lsls	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e022      	b.n	8009d3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6919      	ldr	r1, [r3, #16]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	2207      	movs	r2, #7
 8009d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0e:	43da      	mvns	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	400a      	ands	r2, r1
 8009d16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6919      	ldr	r1, [r3, #16]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	689a      	ldr	r2, [r3, #8]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4618      	mov	r0, r3
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4403      	add	r3, r0
 8009d30:	409a      	lsls	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b06      	cmp	r3, #6
 8009d40:	d824      	bhi.n	8009d8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	3b05      	subs	r3, #5
 8009d54:	221f      	movs	r2, #31
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	43da      	mvns	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	400a      	ands	r2, r1
 8009d62:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4618      	mov	r0, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3b05      	subs	r3, #5
 8009d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8009d8a:	e04c      	b.n	8009e26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	2b0c      	cmp	r3, #12
 8009d92:	d824      	bhi.n	8009dde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	3b23      	subs	r3, #35	@ 0x23
 8009da6:	221f      	movs	r2, #31
 8009da8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dac:	43da      	mvns	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	400a      	ands	r2, r1
 8009db4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	3b23      	subs	r3, #35	@ 0x23
 8009dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ddc:	e023      	b.n	8009e26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	3b41      	subs	r3, #65	@ 0x41
 8009df0:	221f      	movs	r2, #31
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	43da      	mvns	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	400a      	ands	r2, r1
 8009dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	3b41      	subs	r3, #65	@ 0x41
 8009e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e26:	4b22      	ldr	r3, [pc, #136]	@ (8009eb0 <HAL_ADC_ConfigChannel+0x234>)
 8009e28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a21      	ldr	r2, [pc, #132]	@ (8009eb4 <HAL_ADC_ConfigChannel+0x238>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d109      	bne.n	8009e48 <HAL_ADC_ConfigChannel+0x1cc>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b12      	cmp	r3, #18
 8009e3a:	d105      	bne.n	8009e48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a19      	ldr	r2, [pc, #100]	@ (8009eb4 <HAL_ADC_ConfigChannel+0x238>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d123      	bne.n	8009e9a <HAL_ADC_ConfigChannel+0x21e>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b10      	cmp	r3, #16
 8009e58:	d003      	beq.n	8009e62 <HAL_ADC_ConfigChannel+0x1e6>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b11      	cmp	r3, #17
 8009e60:	d11b      	bne.n	8009e9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b10      	cmp	r3, #16
 8009e74:	d111      	bne.n	8009e9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e76:	4b10      	ldr	r3, [pc, #64]	@ (8009eb8 <HAL_ADC_ConfigChannel+0x23c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a10      	ldr	r2, [pc, #64]	@ (8009ebc <HAL_ADC_ConfigChannel+0x240>)
 8009e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e80:	0c9a      	lsrs	r2, r3, #18
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e8c:	e002      	b.n	8009e94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1f9      	bne.n	8009e8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	40012300 	.word	0x40012300
 8009eb4:	40012000 	.word	0x40012000
 8009eb8:	20000004 	.word	0x20000004
 8009ebc:	431bde83 	.word	0x431bde83

08009ec0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ec8:	4b79      	ldr	r3, [pc, #484]	@ (800a0b0 <ADC_Init+0x1f0>)
 8009eca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6859      	ldr	r1, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	021a      	lsls	r2, r3, #8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8009f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6859      	ldr	r1, [r3, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6899      	ldr	r1, [r3, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f52:	4a58      	ldr	r2, [pc, #352]	@ (800a0b4 <ADC_Init+0x1f4>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d022      	beq.n	8009f9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009f66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6899      	ldr	r1, [r3, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6899      	ldr	r1, [r3, #8]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	e00f      	b.n	8009fbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009fbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0202 	bic.w	r2, r2, #2
 8009fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6899      	ldr	r1, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7e1b      	ldrb	r3, [r3, #24]
 8009fd8:	005a      	lsls	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01b      	beq.n	800a024 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ffa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800a00a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a016:	3b01      	subs	r3, #1
 800a018:	035a      	lsls	r2, r3, #13
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	e007      	b.n	800a034 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a032:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800a042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	3b01      	subs	r3, #1
 800a050:	051a      	lsls	r2, r3, #20
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6899      	ldr	r1, [r3, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a076:	025a      	lsls	r2, r3, #9
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a08e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6899      	ldr	r1, [r3, #8]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	029a      	lsls	r2, r3, #10
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	609a      	str	r2, [r3, #8]
}
 800a0a4:	bf00      	nop
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40012300 	.word	0x40012300
 800a0b4:	0f000001 	.word	0x0f000001

0800a0b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e0ed      	b.n	800a2a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7f8 ff08 	bl	8002eec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0201 	orr.w	r2, r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a0ec:	f7ff fd52 	bl	8009b94 <HAL_GetTick>
 800a0f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a0f2:	e012      	b.n	800a11a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a0f4:	f7ff fd4e 	bl	8009b94 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b0a      	cmp	r3, #10
 800a100:	d90b      	bls.n	800a11a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a106:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2205      	movs	r2, #5
 800a112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e0c5      	b.n	800a2a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0e5      	beq.n	800a0f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0202 	bic.w	r2, r2, #2
 800a136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a138:	f7ff fd2c 	bl	8009b94 <HAL_GetTick>
 800a13c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a13e:	e012      	b.n	800a166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a140:	f7ff fd28 	bl	8009b94 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b0a      	cmp	r3, #10
 800a14c:	d90b      	bls.n	800a166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2205      	movs	r2, #5
 800a15e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e09f      	b.n	800a2a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 0302 	and.w	r3, r3, #2
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e5      	bne.n	800a140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7e1b      	ldrb	r3, [r3, #24]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d108      	bne.n	800a18e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	e007      	b.n	800a19e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a19c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7e5b      	ldrb	r3, [r3, #25]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d108      	bne.n	800a1b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	e007      	b.n	800a1c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7e9b      	ldrb	r3, [r3, #26]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d108      	bne.n	800a1e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f042 0220 	orr.w	r2, r2, #32
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	e007      	b.n	800a1f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 0220 	bic.w	r2, r2, #32
 800a1f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7edb      	ldrb	r3, [r3, #27]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d108      	bne.n	800a20c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0210 	bic.w	r2, r2, #16
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	e007      	b.n	800a21c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0210 	orr.w	r2, r2, #16
 800a21a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	7f1b      	ldrb	r3, [r3, #28]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d108      	bne.n	800a236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0208 	orr.w	r2, r2, #8
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	e007      	b.n	800a246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0208 	bic.w	r2, r2, #8
 800a244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	7f5b      	ldrb	r3, [r3, #29]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d108      	bne.n	800a260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f042 0204 	orr.w	r2, r2, #4
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	e007      	b.n	800a270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0204 	bic.w	r2, r2, #4
 800a26e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	431a      	orrs	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	431a      	orrs	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	ea42 0103 	orr.w	r1, r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	1e5a      	subs	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a2c8:	7cfb      	ldrb	r3, [r7, #19]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d003      	beq.n	800a2d6 <HAL_CAN_ConfigFilter+0x26>
 800a2ce:	7cfb      	ldrb	r3, [r7, #19]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	f040 80be 	bne.w	800a452 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800a2d6:	4b65      	ldr	r3, [pc, #404]	@ (800a46c <HAL_CAN_ConfigFilter+0x1bc>)
 800a2d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a2e0:	f043 0201 	orr.w	r2, r3, #1
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a2f0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	431a      	orrs	r2, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	2201      	movs	r2, #1
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	43db      	mvns	r3, r3
 800a328:	401a      	ands	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d123      	bne.n	800a380 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	43db      	mvns	r3, r3
 800a342:	401a      	ands	r2, r3
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a35a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	3248      	adds	r2, #72	@ 0x48
 800a360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	3348      	adds	r3, #72	@ 0x48
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	440b      	add	r3, r1
 800a37e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d122      	bne.n	800a3ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	431a      	orrs	r2, r3
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a3a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	3248      	adds	r2, #72	@ 0x48
 800a3ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a3c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a3c4:	6979      	ldr	r1, [r7, #20]
 800a3c6:	3348      	adds	r3, #72	@ 0x48
 800a3c8:	00db      	lsls	r3, r3, #3
 800a3ca:	440b      	add	r3, r1
 800a3cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	401a      	ands	r2, r3
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800a3e8:	e007      	b.n	800a3fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	43db      	mvns	r3, r3
 800a40c:	401a      	ands	r2, r3
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800a414:	e007      	b.n	800a426 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	431a      	orrs	r2, r3
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d107      	bne.n	800a43e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	431a      	orrs	r2, r3
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a444:	f023 0201 	bic.w	r2, r3, #1
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	e006      	b.n	800a460 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a456:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
  }
}
 800a460:	4618      	mov	r0, r3
 800a462:	371c      	adds	r7, #28
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	40006400 	.word	0x40006400

0800a470 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b01      	cmp	r3, #1
 800a482:	d12e      	bne.n	800a4e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0201 	bic.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a49c:	f7ff fb7a 	bl	8009b94 <HAL_GetTick>
 800a4a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a4a2:	e012      	b.n	800a4ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a4a4:	f7ff fb76 	bl	8009b94 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b0a      	cmp	r3, #10
 800a4b0:	d90b      	bls.n	800a4ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2205      	movs	r2, #5
 800a4c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e012      	b.n	800a4f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e5      	bne.n	800a4a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e006      	b.n	800a4f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
  }
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b089      	sub	sp, #36	@ 0x24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a50c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800a516:	7ffb      	ldrb	r3, [r7, #31]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d003      	beq.n	800a524 <HAL_CAN_AddTxMessage+0x2c>
 800a51c:	7ffb      	ldrb	r3, [r7, #31]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	f040 80b8 	bne.w	800a694 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10a      	bne.n	800a544 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a534:	2b00      	cmp	r3, #0
 800a536:	d105      	bne.n	800a544 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 80a0 	beq.w	800a684 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	0e1b      	lsrs	r3, r3, #24
 800a548:	f003 0303 	and.w	r3, r3, #3
 800a54c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b02      	cmp	r3, #2
 800a552:	d907      	bls.n	800a564 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a558:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e09e      	b.n	800a6a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800a564:	2201      	movs	r2, #1
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	409a      	lsls	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10d      	bne.n	800a592 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a580:	68f9      	ldr	r1, [r7, #12]
 800a582:	6809      	ldr	r1, [r1, #0]
 800a584:	431a      	orrs	r2, r3
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	3318      	adds	r3, #24
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	440b      	add	r3, r1
 800a58e:	601a      	str	r2, [r3, #0]
 800a590:	e00f      	b.n	800a5b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a59c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a5a2:	68f9      	ldr	r1, [r7, #12]
 800a5a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800a5a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3318      	adds	r3, #24
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	440b      	add	r3, r1
 800a5b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6819      	ldr	r1, [r3, #0]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	691a      	ldr	r2, [r3, #16]
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	3318      	adds	r3, #24
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	440b      	add	r3, r1
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d111      	bne.n	800a5f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	3318      	adds	r3, #24
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	4413      	add	r3, r2
 800a5da:	3304      	adds	r3, #4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	6811      	ldr	r1, [r2, #0]
 800a5e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	3318      	adds	r3, #24
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	440b      	add	r3, r1
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3307      	adds	r3, #7
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	061a      	lsls	r2, r3, #24
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	3306      	adds	r3, #6
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	041b      	lsls	r3, r3, #16
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3305      	adds	r3, #5
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	021b      	lsls	r3, r3, #8
 800a60c:	4313      	orrs	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	3204      	adds	r2, #4
 800a612:	7812      	ldrb	r2, [r2, #0]
 800a614:	4610      	mov	r0, r2
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	6811      	ldr	r1, [r2, #0]
 800a61a:	ea43 0200 	orr.w	r2, r3, r0
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	011b      	lsls	r3, r3, #4
 800a622:	440b      	add	r3, r1
 800a624:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800a628:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3303      	adds	r3, #3
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	061a      	lsls	r2, r3, #24
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	3302      	adds	r3, #2
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3301      	adds	r3, #1
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	021b      	lsls	r3, r3, #8
 800a644:	4313      	orrs	r3, r2
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	7812      	ldrb	r2, [r2, #0]
 800a64a:	4610      	mov	r0, r2
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	6811      	ldr	r1, [r2, #0]
 800a650:	ea43 0200 	orr.w	r2, r3, r0
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	011b      	lsls	r3, r3, #4
 800a658:	440b      	add	r3, r1
 800a65a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800a65e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	3318      	adds	r3, #24
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	4413      	add	r3, r2
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	6811      	ldr	r1, [r2, #0]
 800a672:	f043 0201 	orr.w	r2, r3, #1
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	3318      	adds	r3, #24
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	440b      	add	r3, r1
 800a67e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	e00e      	b.n	800a6a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a688:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e006      	b.n	800a6a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a698:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
  }
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3724      	adds	r7, #36	@ 0x24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b087      	sub	sp, #28
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
 800a6ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d003      	beq.n	800a6d2 <HAL_CAN_GetRxMessage+0x24>
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	f040 80f3 	bne.w	800a8b8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10e      	bne.n	800a6f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d116      	bne.n	800a714 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e0e7      	b.n	800a8c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d107      	bne.n	800a714 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a708:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e0d8      	b.n	800a8c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	331b      	adds	r3, #27
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	4413      	add	r3, r2
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0204 	and.w	r2, r3, #4
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10c      	bne.n	800a74c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	331b      	adds	r3, #27
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	4413      	add	r3, r2
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	0d5b      	lsrs	r3, r3, #21
 800a742:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	e00b      	b.n	800a764 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	331b      	adds	r3, #27
 800a754:	011b      	lsls	r3, r3, #4
 800a756:	4413      	add	r3, r2
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	08db      	lsrs	r3, r3, #3
 800a75c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	331b      	adds	r3, #27
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	4413      	add	r3, r2
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0202 	and.w	r2, r3, #2
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	331b      	adds	r3, #27
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	4413      	add	r3, r2
 800a786:	3304      	adds	r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 020f 	and.w	r2, r3, #15
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	331b      	adds	r3, #27
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	4413      	add	r3, r2
 800a79e:	3304      	adds	r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	0a1b      	lsrs	r3, r3, #8
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	331b      	adds	r3, #27
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	0c1b      	lsrs	r3, r3, #16
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	011b      	lsls	r3, r3, #4
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	0a1a      	lsrs	r2, r3, #8
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	0c1a      	lsrs	r2, r3, #16
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	3302      	adds	r3, #2
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	4413      	add	r3, r2
 800a816:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	0e1a      	lsrs	r2, r3, #24
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	3303      	adds	r3, #3
 800a822:	b2d2      	uxtb	r2, r2
 800a824:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	011b      	lsls	r3, r3, #4
 800a82e:	4413      	add	r3, r2
 800a830:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	3304      	adds	r3, #4
 800a83a:	b2d2      	uxtb	r2, r2
 800a83c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	4413      	add	r3, r2
 800a848:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	0a1a      	lsrs	r2, r3, #8
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	3305      	adds	r3, #5
 800a854:	b2d2      	uxtb	r2, r2
 800a856:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	4413      	add	r3, r2
 800a862:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	0c1a      	lsrs	r2, r3, #16
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	3306      	adds	r3, #6
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	0e1a      	lsrs	r2, r3, #24
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	3307      	adds	r3, #7
 800a888:	b2d2      	uxtb	r2, r2
 800a88a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d108      	bne.n	800a8a4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f042 0220 	orr.w	r2, r2, #32
 800a8a0:	60da      	str	r2, [r3, #12]
 800a8a2:	e007      	b.n	800a8b4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0220 	orr.w	r2, r2, #32
 800a8b2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	e006      	b.n	800a8c6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
  }
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d002      	beq.n	800a8f0 <HAL_CAN_ActivateNotification+0x1e>
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d109      	bne.n	800a904 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6959      	ldr	r1, [r3, #20]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	e006      	b.n	800a912 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a908:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
  }
}
 800a912:	4618      	mov	r0, r3
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800a91e:	b480      	push	{r7}
 800a920:	b085      	sub	sp, #20
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a92e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d002      	beq.n	800a93c <HAL_CAN_DeactivateNotification+0x1e>
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d10a      	bne.n	800a952 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6959      	ldr	r1, [r3, #20]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	43da      	mvns	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	400a      	ands	r2, r1
 800a94c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	e006      	b.n	800a960 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a956:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
  }
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a974:	2300      	movs	r3, #0
 800a976:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d07c      	beq.n	800aaac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d023      	beq.n	800aa04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	f003 0302 	and.w	r3, r3, #2
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f983 	bl	800acda <HAL_CAN_TxMailbox0CompleteCallback>
 800a9d4:	e016      	b.n	800aa04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e8:	e00c      	b.n	800aa04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	f003 0308 	and.w	r3, r3, #8
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d004      	beq.n	800a9fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a9fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9fc:	e002      	b.n	800aa04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f989 	bl	800ad16 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d024      	beq.n	800aa58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f963 	bl	800acee <HAL_CAN_TxMailbox1CompleteCallback>
 800aa28:	e016      	b.n	800aa58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aa3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa3c:	e00c      	b.n	800aa58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa50:	e002      	b.n	800aa58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f969 	bl	800ad2a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d024      	beq.n	800aaac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800aa6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f943 	bl	800ad02 <HAL_CAN_TxMailbox2CompleteCallback>
 800aa7c:	e016      	b.n	800aaac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa90:	e00c      	b.n	800aaac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d004      	beq.n	800aaa6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaa4:	e002      	b.n	800aaac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f949 	bl	800ad3e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00c      	beq.n	800aad0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800aac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aac6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2210      	movs	r2, #16
 800aace:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f003 0308 	and.w	r3, r3, #8
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2208      	movs	r2, #8
 800aaea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f930 	bl	800ad52 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7f6 fb5e 	bl	80011cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00c      	beq.n	800ab34 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2210      	movs	r2, #16
 800ab32:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f003 0308 	and.w	r3, r3, #8
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d006      	beq.n	800ab56 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f908 	bl	800ad66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 0303 	and.w	r3, r3, #3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7f6 fb37 	bl	80011e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00b      	beq.n	800ab96 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d006      	beq.n	800ab96 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2210      	movs	r2, #16
 800ab8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f8f2 	bl	800ad7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	f003 0308 	and.w	r3, r3, #8
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d006      	beq.n	800abb8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2208      	movs	r2, #8
 800abb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f8eb 	bl	800ad8e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d07b      	beq.n	800acba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d072      	beq.n	800acb2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d003      	beq.n	800abe8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	f043 0301 	orr.w	r3, r3, #1
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d008      	beq.n	800ac04 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	f043 0302 	orr.w	r3, r3, #2
 800ac02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d008      	beq.n	800ac20 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	f043 0304 	orr.w	r3, r3, #4
 800ac1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ac20:	6a3b      	ldr	r3, [r7, #32]
 800ac22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d043      	beq.n	800acb2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d03e      	beq.n	800acb2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac3a:	2b60      	cmp	r3, #96	@ 0x60
 800ac3c:	d02b      	beq.n	800ac96 <HAL_CAN_IRQHandler+0x32a>
 800ac3e:	2b60      	cmp	r3, #96	@ 0x60
 800ac40:	d82e      	bhi.n	800aca0 <HAL_CAN_IRQHandler+0x334>
 800ac42:	2b50      	cmp	r3, #80	@ 0x50
 800ac44:	d022      	beq.n	800ac8c <HAL_CAN_IRQHandler+0x320>
 800ac46:	2b50      	cmp	r3, #80	@ 0x50
 800ac48:	d82a      	bhi.n	800aca0 <HAL_CAN_IRQHandler+0x334>
 800ac4a:	2b40      	cmp	r3, #64	@ 0x40
 800ac4c:	d019      	beq.n	800ac82 <HAL_CAN_IRQHandler+0x316>
 800ac4e:	2b40      	cmp	r3, #64	@ 0x40
 800ac50:	d826      	bhi.n	800aca0 <HAL_CAN_IRQHandler+0x334>
 800ac52:	2b30      	cmp	r3, #48	@ 0x30
 800ac54:	d010      	beq.n	800ac78 <HAL_CAN_IRQHandler+0x30c>
 800ac56:	2b30      	cmp	r3, #48	@ 0x30
 800ac58:	d822      	bhi.n	800aca0 <HAL_CAN_IRQHandler+0x334>
 800ac5a:	2b10      	cmp	r3, #16
 800ac5c:	d002      	beq.n	800ac64 <HAL_CAN_IRQHandler+0x2f8>
 800ac5e:	2b20      	cmp	r3, #32
 800ac60:	d005      	beq.n	800ac6e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800ac62:	e01d      	b.n	800aca0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	f043 0308 	orr.w	r3, r3, #8
 800ac6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ac6c:	e019      	b.n	800aca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac70:	f043 0310 	orr.w	r3, r3, #16
 800ac74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ac76:	e014      	b.n	800aca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7a:	f043 0320 	orr.w	r3, r3, #32
 800ac7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ac80:	e00f      	b.n	800aca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ac8a:	e00a      	b.n	800aca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ac94:	e005      	b.n	800aca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ac9e:	e000      	b.n	800aca2 <HAL_CAN_IRQHandler+0x336>
            break;
 800aca0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	699a      	ldr	r2, [r3, #24]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800acb0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2204      	movs	r2, #4
 800acb8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d008      	beq.n	800acd2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc6:	431a      	orrs	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f868 	bl	800ada2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800acd2:	bf00      	nop
 800acd4:	3728      	adds	r7, #40	@ 0x28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800ad0a:	bf00      	nop
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b083      	sub	sp, #12
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800ad1e:	bf00      	nop
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ad32:	bf00      	nop
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b083      	sub	sp, #12
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800ad46:	bf00      	nop
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <__NVIC_SetPriorityGrouping>:
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800adc8:	4b0c      	ldr	r3, [pc, #48]	@ (800adfc <__NVIC_SetPriorityGrouping+0x44>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800add4:	4013      	ands	r3, r2
 800add6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ade0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ade4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ade8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800adea:	4a04      	ldr	r2, [pc, #16]	@ (800adfc <__NVIC_SetPriorityGrouping+0x44>)
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	60d3      	str	r3, [r2, #12]
}
 800adf0:	bf00      	nop
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	e000ed00 	.word	0xe000ed00

0800ae00 <__NVIC_GetPriorityGrouping>:
{
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae04:	4b04      	ldr	r3, [pc, #16]	@ (800ae18 <__NVIC_GetPriorityGrouping+0x18>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	f003 0307 	and.w	r3, r3, #7
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	e000ed00 	.word	0xe000ed00

0800ae1c <__NVIC_EnableIRQ>:
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	db0b      	blt.n	800ae46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	f003 021f 	and.w	r2, r3, #31
 800ae34:	4907      	ldr	r1, [pc, #28]	@ (800ae54 <__NVIC_EnableIRQ+0x38>)
 800ae36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3a:	095b      	lsrs	r3, r3, #5
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	fa00 f202 	lsl.w	r2, r0, r2
 800ae42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	e000e100 	.word	0xe000e100

0800ae58 <__NVIC_DisableIRQ>:
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	db12      	blt.n	800ae90 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	f003 021f 	and.w	r2, r3, #31
 800ae70:	490a      	ldr	r1, [pc, #40]	@ (800ae9c <__NVIC_DisableIRQ+0x44>)
 800ae72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	2001      	movs	r0, #1
 800ae7a:	fa00 f202 	lsl.w	r2, r0, r2
 800ae7e:	3320      	adds	r3, #32
 800ae80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ae84:	f3bf 8f4f 	dsb	sy
}
 800ae88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ae8a:	f3bf 8f6f 	isb	sy
}
 800ae8e:	bf00      	nop
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	e000e100 	.word	0xe000e100

0800aea0 <__NVIC_SetPriority>:
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	4603      	mov	r3, r0
 800aea8:	6039      	str	r1, [r7, #0]
 800aeaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aeac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	db0a      	blt.n	800aeca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	490c      	ldr	r1, [pc, #48]	@ (800aeec <__NVIC_SetPriority+0x4c>)
 800aeba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aebe:	0112      	lsls	r2, r2, #4
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	440b      	add	r3, r1
 800aec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aec8:	e00a      	b.n	800aee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	4908      	ldr	r1, [pc, #32]	@ (800aef0 <__NVIC_SetPriority+0x50>)
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	3b04      	subs	r3, #4
 800aed8:	0112      	lsls	r2, r2, #4
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	440b      	add	r3, r1
 800aede:	761a      	strb	r2, [r3, #24]
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	e000e100 	.word	0xe000e100
 800aef0:	e000ed00 	.word	0xe000ed00

0800aef4 <NVIC_EncodePriority>:
{
 800aef4:	b480      	push	{r7}
 800aef6:	b089      	sub	sp, #36	@ 0x24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	f1c3 0307 	rsb	r3, r3, #7
 800af0e:	2b04      	cmp	r3, #4
 800af10:	bf28      	it	cs
 800af12:	2304      	movcs	r3, #4
 800af14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	3304      	adds	r3, #4
 800af1a:	2b06      	cmp	r3, #6
 800af1c:	d902      	bls.n	800af24 <NVIC_EncodePriority+0x30>
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3b03      	subs	r3, #3
 800af22:	e000      	b.n	800af26 <NVIC_EncodePriority+0x32>
 800af24:	2300      	movs	r3, #0
 800af26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af28:	f04f 32ff 	mov.w	r2, #4294967295
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	fa02 f303 	lsl.w	r3, r2, r3
 800af32:	43da      	mvns	r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	401a      	ands	r2, r3
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af3c:	f04f 31ff 	mov.w	r1, #4294967295
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	fa01 f303 	lsl.w	r3, r1, r3
 800af46:	43d9      	mvns	r1, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af4c:	4313      	orrs	r3, r2
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3724      	adds	r7, #36	@ 0x24
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff ff28 	bl	800adb8 <__NVIC_SetPriorityGrouping>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800af82:	f7ff ff3d 	bl	800ae00 <__NVIC_GetPriorityGrouping>
 800af86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	68b9      	ldr	r1, [r7, #8]
 800af8c:	6978      	ldr	r0, [r7, #20]
 800af8e:	f7ff ffb1 	bl	800aef4 <NVIC_EncodePriority>
 800af92:	4602      	mov	r2, r0
 800af94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af98:	4611      	mov	r1, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff ff80 	bl	800aea0 <__NVIC_SetPriority>
}
 800afa0:	bf00      	nop
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800afb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7ff ff30 	bl	800ae1c <__NVIC_EnableIRQ>
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800afce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff ff40 	bl	800ae58 <__NVIC_DisableIRQ>
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800afec:	f7fe fdd2 	bl	8009b94 <HAL_GetTick>
 800aff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e099      	b.n	800b130 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0201 	bic.w	r2, r2, #1
 800b01a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b01c:	e00f      	b.n	800b03e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b01e:	f7fe fdb9 	bl	8009b94 <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	2b05      	cmp	r3, #5
 800b02a:	d908      	bls.n	800b03e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2203      	movs	r2, #3
 800b036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e078      	b.n	800b130 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e8      	bne.n	800b01e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	4b38      	ldr	r3, [pc, #224]	@ (800b138 <HAL_DMA_Init+0x158>)
 800b058:	4013      	ands	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b06a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b094:	2b04      	cmp	r3, #4
 800b096:	d107      	bne.n	800b0a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c4:	697a      	ldr	r2, [r7, #20]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d117      	bne.n	800b102 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00e      	beq.n	800b102 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fb0d 	bl	800b704 <DMA_CheckFifoParam>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d008      	beq.n	800b102 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2240      	movs	r2, #64	@ 0x40
 800b0f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b0fe:	2301      	movs	r3, #1
 800b100:	e016      	b.n	800b130 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fac4 	bl	800b698 <DMA_CalcBaseAndBitshift>
 800b110:	4603      	mov	r3, r0
 800b112:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b118:	223f      	movs	r2, #63	@ 0x3f
 800b11a:	409a      	lsls	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	f010803f 	.word	0xf010803f

0800b13c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d101      	bne.n	800b162 <HAL_DMA_Start_IT+0x26>
 800b15e:	2302      	movs	r3, #2
 800b160:	e040      	b.n	800b1e4 <HAL_DMA_Start_IT+0xa8>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b01      	cmp	r3, #1
 800b174:	d12f      	bne.n	800b1d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f000 fa56 	bl	800b63c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b194:	223f      	movs	r2, #63	@ 0x3f
 800b196:	409a      	lsls	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0216 	orr.w	r2, r2, #22
 800b1aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d007      	beq.n	800b1c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0208 	orr.w	r2, r2, #8
 800b1c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f042 0201 	orr.w	r2, r2, #1
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	e005      	b.n	800b1e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b1de:	2302      	movs	r3, #2
 800b1e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b1fa:	f7fe fccb 	bl	8009b94 <HAL_GetTick>
 800b1fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d008      	beq.n	800b21e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2280      	movs	r2, #128	@ 0x80
 800b210:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e052      	b.n	800b2c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0216 	bic.w	r2, r2, #22
 800b22c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	695a      	ldr	r2, [r3, #20]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b23c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b242:	2b00      	cmp	r3, #0
 800b244:	d103      	bne.n	800b24e <HAL_DMA_Abort+0x62>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d007      	beq.n	800b25e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0208 	bic.w	r2, r2, #8
 800b25c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f022 0201 	bic.w	r2, r2, #1
 800b26c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b26e:	e013      	b.n	800b298 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b270:	f7fe fc90 	bl	8009b94 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b05      	cmp	r3, #5
 800b27c:	d90c      	bls.n	800b298 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2220      	movs	r2, #32
 800b282:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2203      	movs	r2, #3
 800b288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	e015      	b.n	800b2c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e4      	bne.n	800b270 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2aa:	223f      	movs	r2, #63	@ 0x3f
 800b2ac:	409a      	lsls	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d004      	beq.n	800b2ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2280      	movs	r2, #128	@ 0x80
 800b2e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e00c      	b.n	800b304 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2205      	movs	r2, #5
 800b2ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 0201 	bic.w	r2, r2, #1
 800b300:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b31c:	4b8e      	ldr	r3, [pc, #568]	@ (800b558 <HAL_DMA_IRQHandler+0x248>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a8e      	ldr	r2, [pc, #568]	@ (800b55c <HAL_DMA_IRQHandler+0x24c>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	0a9b      	lsrs	r3, r3, #10
 800b328:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b32e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b33a:	2208      	movs	r2, #8
 800b33c:	409a      	lsls	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4013      	ands	r3, r2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d01a      	beq.n	800b37c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d013      	beq.n	800b37c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f022 0204 	bic.w	r2, r2, #4
 800b362:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b368:	2208      	movs	r2, #8
 800b36a:	409a      	lsls	r2, r3
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b374:	f043 0201 	orr.w	r2, r3, #1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b380:	2201      	movs	r2, #1
 800b382:	409a      	lsls	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4013      	ands	r3, r2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d012      	beq.n	800b3b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00b      	beq.n	800b3b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b39e:	2201      	movs	r2, #1
 800b3a0:	409a      	lsls	r2, r3
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3aa:	f043 0202 	orr.w	r2, r3, #2
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	409a      	lsls	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4013      	ands	r3, r2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d012      	beq.n	800b3e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3d4:	2204      	movs	r2, #4
 800b3d6:	409a      	lsls	r2, r3
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3e0:	f043 0204 	orr.w	r2, r3, #4
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3ec:	2210      	movs	r2, #16
 800b3ee:	409a      	lsls	r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d043      	beq.n	800b480 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0308 	and.w	r3, r3, #8
 800b402:	2b00      	cmp	r3, #0
 800b404:	d03c      	beq.n	800b480 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b40a:	2210      	movs	r2, #16
 800b40c:	409a      	lsls	r2, r3
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d018      	beq.n	800b452 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d108      	bne.n	800b440 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d024      	beq.n	800b480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
 800b43e:	e01f      	b.n	800b480 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01b      	beq.n	800b480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	4798      	blx	r3
 800b450:	e016      	b.n	800b480 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d107      	bne.n	800b470 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f022 0208 	bic.w	r2, r2, #8
 800b46e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b474:	2b00      	cmp	r3, #0
 800b476:	d003      	beq.n	800b480 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b484:	2220      	movs	r2, #32
 800b486:	409a      	lsls	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4013      	ands	r3, r2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 808f 	beq.w	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0310 	and.w	r3, r3, #16
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8087 	beq.w	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	409a      	lsls	r2, r3
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d136      	bne.n	800b528 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f022 0216 	bic.w	r2, r2, #22
 800b4c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	695a      	ldr	r2, [r3, #20]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b4d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <HAL_DMA_IRQHandler+0x1da>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f022 0208 	bic.w	r2, r2, #8
 800b4f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4fe:	223f      	movs	r2, #63	@ 0x3f
 800b500:	409a      	lsls	r2, r3
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d07e      	beq.n	800b61c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4798      	blx	r3
        }
        return;
 800b526:	e079      	b.n	800b61c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d01d      	beq.n	800b572 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10d      	bne.n	800b560 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d031      	beq.n	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	4798      	blx	r3
 800b554:	e02c      	b.n	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
 800b556:	bf00      	nop
 800b558:	20000004 	.word	0x20000004
 800b55c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b564:	2b00      	cmp	r3, #0
 800b566:	d023      	beq.n	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	4798      	blx	r3
 800b570:	e01e      	b.n	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10f      	bne.n	800b5a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0210 	bic.w	r2, r2, #16
 800b58e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d032      	beq.n	800b61e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d022      	beq.n	800b60a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2205      	movs	r2, #5
 800b5c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f022 0201 	bic.w	r2, r2, #1
 800b5da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	60bb      	str	r3, [r7, #8]
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d307      	bcc.n	800b5f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1f2      	bne.n	800b5dc <HAL_DMA_IRQHandler+0x2cc>
 800b5f6:	e000      	b.n	800b5fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b5f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	4798      	blx	r3
 800b61a:	e000      	b.n	800b61e <HAL_DMA_IRQHandler+0x30e>
        return;
 800b61c:	bf00      	nop
    }
  }
}
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	2b40      	cmp	r3, #64	@ 0x40
 800b668:	d108      	bne.n	800b67c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b67a:	e007      	b.n	800b68c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	60da      	str	r2, [r3, #12]
}
 800b68c:	bf00      	nop
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	3b10      	subs	r3, #16
 800b6a8:	4a14      	ldr	r2, [pc, #80]	@ (800b6fc <DMA_CalcBaseAndBitshift+0x64>)
 800b6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ae:	091b      	lsrs	r3, r3, #4
 800b6b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b6b2:	4a13      	ldr	r2, [pc, #76]	@ (800b700 <DMA_CalcBaseAndBitshift+0x68>)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d909      	bls.n	800b6da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b6ce:	f023 0303 	bic.w	r3, r3, #3
 800b6d2:	1d1a      	adds	r2, r3, #4
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	659a      	str	r2, [r3, #88]	@ 0x58
 800b6d8:	e007      	b.n	800b6ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b6e2:	f023 0303 	bic.w	r3, r3, #3
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	aaaaaaab 	.word	0xaaaaaaab
 800b700:	08020920 	.word	0x08020920

0800b704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d11f      	bne.n	800b75e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2b03      	cmp	r3, #3
 800b722:	d856      	bhi.n	800b7d2 <DMA_CheckFifoParam+0xce>
 800b724:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <DMA_CheckFifoParam+0x28>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b73d 	.word	0x0800b73d
 800b730:	0800b74f 	.word	0x0800b74f
 800b734:	0800b73d 	.word	0x0800b73d
 800b738:	0800b7d3 	.word	0x0800b7d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d046      	beq.n	800b7d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b74c:	e043      	b.n	800b7d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b752:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b756:	d140      	bne.n	800b7da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b75c:	e03d      	b.n	800b7da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b766:	d121      	bne.n	800b7ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d837      	bhi.n	800b7de <DMA_CheckFifoParam+0xda>
 800b76e:	a201      	add	r2, pc, #4	@ (adr r2, 800b774 <DMA_CheckFifoParam+0x70>)
 800b770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b774:	0800b785 	.word	0x0800b785
 800b778:	0800b78b 	.word	0x0800b78b
 800b77c:	0800b785 	.word	0x0800b785
 800b780:	0800b79d 	.word	0x0800b79d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	73fb      	strb	r3, [r7, #15]
      break;
 800b788:	e030      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d025      	beq.n	800b7e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b79a:	e022      	b.n	800b7e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b7a4:	d11f      	bne.n	800b7e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b7aa:	e01c      	b.n	800b7e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d903      	bls.n	800b7ba <DMA_CheckFifoParam+0xb6>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d003      	beq.n	800b7c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b7b8:	e018      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7be:	e015      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00e      	beq.n	800b7ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b7d0:	e00b      	b.n	800b7ea <DMA_CheckFifoParam+0xe6>
      break;
 800b7d2:	bf00      	nop
 800b7d4:	e00a      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      break;
 800b7d6:	bf00      	nop
 800b7d8:	e008      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      break;
 800b7da:	bf00      	nop
 800b7dc:	e006      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      break;
 800b7de:	bf00      	nop
 800b7e0:	e004      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      break;
 800b7e2:	bf00      	nop
 800b7e4:	e002      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      break;   
 800b7e6:	bf00      	nop
 800b7e8:	e000      	b.n	800b7ec <DMA_CheckFifoParam+0xe8>
      break;
 800b7ea:	bf00      	nop
    }
  } 
  
  return status; 
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop

0800b7fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b089      	sub	sp, #36	@ 0x24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b806:	2300      	movs	r3, #0
 800b808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b80e:	2300      	movs	r3, #0
 800b810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b812:	2300      	movs	r3, #0
 800b814:	61fb      	str	r3, [r7, #28]
 800b816:	e16b      	b.n	800baf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b818:	2201      	movs	r2, #1
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	fa02 f303 	lsl.w	r3, r2, r3
 800b820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4013      	ands	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	429a      	cmp	r2, r3
 800b832:	f040 815a 	bne.w	800baea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f003 0303 	and.w	r3, r3, #3
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d005      	beq.n	800b84e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d130      	bne.n	800b8b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	2203      	movs	r2, #3
 800b85a:	fa02 f303 	lsl.w	r3, r2, r3
 800b85e:	43db      	mvns	r3, r3
 800b860:	69ba      	ldr	r2, [r7, #24]
 800b862:	4013      	ands	r3, r2
 800b864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	4313      	orrs	r3, r2
 800b876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	69ba      	ldr	r2, [r7, #24]
 800b87c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b884:	2201      	movs	r2, #1
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	43db      	mvns	r3, r3
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	4013      	ands	r3, r2
 800b892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	091b      	lsrs	r3, r3, #4
 800b89a:	f003 0201 	and.w	r2, r3, #1
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a4:	69ba      	ldr	r2, [r7, #24]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f003 0303 	and.w	r3, r3, #3
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d017      	beq.n	800b8ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8cc:	43db      	mvns	r3, r3
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f003 0303 	and.w	r3, r3, #3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d123      	bne.n	800b940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	08da      	lsrs	r2, r3, #3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3208      	adds	r2, #8
 800b900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	f003 0307 	and.w	r3, r3, #7
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	220f      	movs	r2, #15
 800b910:	fa02 f303 	lsl.w	r3, r2, r3
 800b914:	43db      	mvns	r3, r3
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	4013      	ands	r3, r2
 800b91a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	691a      	ldr	r2, [r3, #16]
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f003 0307 	and.w	r3, r3, #7
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	69ba      	ldr	r2, [r7, #24]
 800b92e:	4313      	orrs	r3, r2
 800b930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	08da      	lsrs	r2, r3, #3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3208      	adds	r2, #8
 800b93a:	69b9      	ldr	r1, [r7, #24]
 800b93c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	2203      	movs	r2, #3
 800b94c:	fa02 f303 	lsl.w	r3, r2, r3
 800b950:	43db      	mvns	r3, r3
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	4013      	ands	r3, r2
 800b956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f003 0203 	and.w	r2, r3, #3
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	fa02 f303 	lsl.w	r3, r2, r3
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	69ba      	ldr	r2, [r7, #24]
 800b972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 80b4 	beq.w	800baea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b982:	2300      	movs	r3, #0
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	4b60      	ldr	r3, [pc, #384]	@ (800bb08 <HAL_GPIO_Init+0x30c>)
 800b988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b98a:	4a5f      	ldr	r2, [pc, #380]	@ (800bb08 <HAL_GPIO_Init+0x30c>)
 800b98c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b990:	6453      	str	r3, [r2, #68]	@ 0x44
 800b992:	4b5d      	ldr	r3, [pc, #372]	@ (800bb08 <HAL_GPIO_Init+0x30c>)
 800b994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b99e:	4a5b      	ldr	r2, [pc, #364]	@ (800bb0c <HAL_GPIO_Init+0x310>)
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	089b      	lsrs	r3, r3, #2
 800b9a4:	3302      	adds	r3, #2
 800b9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	f003 0303 	and.w	r3, r3, #3
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	220f      	movs	r2, #15
 800b9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ba:	43db      	mvns	r3, r3
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a52      	ldr	r2, [pc, #328]	@ (800bb10 <HAL_GPIO_Init+0x314>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d02b      	beq.n	800ba22 <HAL_GPIO_Init+0x226>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a51      	ldr	r2, [pc, #324]	@ (800bb14 <HAL_GPIO_Init+0x318>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d025      	beq.n	800ba1e <HAL_GPIO_Init+0x222>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a50      	ldr	r2, [pc, #320]	@ (800bb18 <HAL_GPIO_Init+0x31c>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d01f      	beq.n	800ba1a <HAL_GPIO_Init+0x21e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a4f      	ldr	r2, [pc, #316]	@ (800bb1c <HAL_GPIO_Init+0x320>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d019      	beq.n	800ba16 <HAL_GPIO_Init+0x21a>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a4e      	ldr	r2, [pc, #312]	@ (800bb20 <HAL_GPIO_Init+0x324>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d013      	beq.n	800ba12 <HAL_GPIO_Init+0x216>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a4d      	ldr	r2, [pc, #308]	@ (800bb24 <HAL_GPIO_Init+0x328>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00d      	beq.n	800ba0e <HAL_GPIO_Init+0x212>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a4c      	ldr	r2, [pc, #304]	@ (800bb28 <HAL_GPIO_Init+0x32c>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <HAL_GPIO_Init+0x20e>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a4b      	ldr	r2, [pc, #300]	@ (800bb2c <HAL_GPIO_Init+0x330>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d101      	bne.n	800ba06 <HAL_GPIO_Init+0x20a>
 800ba02:	2307      	movs	r3, #7
 800ba04:	e00e      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba06:	2308      	movs	r3, #8
 800ba08:	e00c      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba0a:	2306      	movs	r3, #6
 800ba0c:	e00a      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba0e:	2305      	movs	r3, #5
 800ba10:	e008      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba12:	2304      	movs	r3, #4
 800ba14:	e006      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba16:	2303      	movs	r3, #3
 800ba18:	e004      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e002      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e000      	b.n	800ba24 <HAL_GPIO_Init+0x228>
 800ba22:	2300      	movs	r3, #0
 800ba24:	69fa      	ldr	r2, [r7, #28]
 800ba26:	f002 0203 	and.w	r2, r2, #3
 800ba2a:	0092      	lsls	r2, r2, #2
 800ba2c:	4093      	lsls	r3, r2
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ba34:	4935      	ldr	r1, [pc, #212]	@ (800bb0c <HAL_GPIO_Init+0x310>)
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	089b      	lsrs	r3, r3, #2
 800ba3a:	3302      	adds	r3, #2
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ba42:	4b3b      	ldr	r3, [pc, #236]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	43db      	mvns	r3, r3
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	4013      	ands	r3, r2
 800ba50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ba5e:	69ba      	ldr	r2, [r7, #24]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ba66:	4a32      	ldr	r2, [pc, #200]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ba6c:	4b30      	ldr	r3, [pc, #192]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	43db      	mvns	r3, r3
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	4013      	ands	r3, r2
 800ba7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ba88:	69ba      	ldr	r2, [r7, #24]
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ba90:	4a27      	ldr	r2, [pc, #156]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ba96:	4b26      	ldr	r3, [pc, #152]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	43db      	mvns	r3, r3
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	4013      	ands	r3, r2
 800baa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800baba:	4a1d      	ldr	r2, [pc, #116]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bac0:	4b1b      	ldr	r3, [pc, #108]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	43db      	mvns	r3, r3
 800baca:	69ba      	ldr	r2, [r7, #24]
 800bacc:	4013      	ands	r3, r2
 800bace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800badc:	69ba      	ldr	r2, [r7, #24]
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bae4:	4a12      	ldr	r2, [pc, #72]	@ (800bb30 <HAL_GPIO_Init+0x334>)
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	3301      	adds	r3, #1
 800baee:	61fb      	str	r3, [r7, #28]
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	2b0f      	cmp	r3, #15
 800baf4:	f67f ae90 	bls.w	800b818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800baf8:	bf00      	nop
 800bafa:	bf00      	nop
 800bafc:	3724      	adds	r7, #36	@ 0x24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	40023800 	.word	0x40023800
 800bb0c:	40013800 	.word	0x40013800
 800bb10:	40020000 	.word	0x40020000
 800bb14:	40020400 	.word	0x40020400
 800bb18:	40020800 	.word	0x40020800
 800bb1c:	40020c00 	.word	0x40020c00
 800bb20:	40021000 	.word	0x40021000
 800bb24:	40021400 	.word	0x40021400
 800bb28:	40021800 	.word	0x40021800
 800bb2c:	40021c00 	.word	0x40021c00
 800bb30:	40013c00 	.word	0x40013c00

0800bb34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
 800bb40:	4613      	mov	r3, r2
 800bb42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bb44:	787b      	ldrb	r3, [r7, #1]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bb4a:	887a      	ldrh	r2, [r7, #2]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bb50:	e003      	b.n	800bb5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bb52:	887b      	ldrh	r3, [r7, #2]
 800bb54:	041a      	lsls	r2, r3, #16
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	619a      	str	r2, [r3, #24]
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
	...

0800bb68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bb72:	4b08      	ldr	r3, [pc, #32]	@ (800bb94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb74:	695a      	ldr	r2, [r3, #20]
 800bb76:	88fb      	ldrh	r3, [r7, #6]
 800bb78:	4013      	ands	r3, r2
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d006      	beq.n	800bb8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bb7e:	4a05      	ldr	r2, [pc, #20]	@ (800bb94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bb84:	88fb      	ldrh	r3, [r7, #6]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f6 f96e 	bl	8001e68 <HAL_GPIO_EXTI_Callback>
  }
}
 800bb8c:	bf00      	nop
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40013c00 	.word	0x40013c00

0800bb98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e12b      	b.n	800be02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7f7 fc92 	bl	80034e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2224      	movs	r2, #36	@ 0x24
 800bbc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f022 0201 	bic.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bbea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bbfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bbfc:	f003 fc04 	bl	800f408 <HAL_RCC_GetPCLK1Freq>
 800bc00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	4a81      	ldr	r2, [pc, #516]	@ (800be0c <HAL_I2C_Init+0x274>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d807      	bhi.n	800bc1c <HAL_I2C_Init+0x84>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4a80      	ldr	r2, [pc, #512]	@ (800be10 <HAL_I2C_Init+0x278>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	bf94      	ite	ls
 800bc14:	2301      	movls	r3, #1
 800bc16:	2300      	movhi	r3, #0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	e006      	b.n	800bc2a <HAL_I2C_Init+0x92>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4a7d      	ldr	r2, [pc, #500]	@ (800be14 <HAL_I2C_Init+0x27c>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	bf94      	ite	ls
 800bc24:	2301      	movls	r3, #1
 800bc26:	2300      	movhi	r3, #0
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e0e7      	b.n	800be02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4a78      	ldr	r2, [pc, #480]	@ (800be18 <HAL_I2C_Init+0x280>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	0c9b      	lsrs	r3, r3, #18
 800bc3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6a1b      	ldr	r3, [r3, #32]
 800bc58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4a6a      	ldr	r2, [pc, #424]	@ (800be0c <HAL_I2C_Init+0x274>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d802      	bhi.n	800bc6c <HAL_I2C_Init+0xd4>
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	e009      	b.n	800bc80 <HAL_I2C_Init+0xe8>
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	4a69      	ldr	r2, [pc, #420]	@ (800be1c <HAL_I2C_Init+0x284>)
 800bc78:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7c:	099b      	lsrs	r3, r3, #6
 800bc7e:	3301      	adds	r3, #1
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6812      	ldr	r2, [r2, #0]
 800bc84:	430b      	orrs	r3, r1
 800bc86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800bc92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	495c      	ldr	r1, [pc, #368]	@ (800be0c <HAL_I2C_Init+0x274>)
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	d819      	bhi.n	800bcd4 <HAL_I2C_Init+0x13c>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	1e59      	subs	r1, r3, #1
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	fbb1 f3f3 	udiv	r3, r1, r3
 800bcae:	1c59      	adds	r1, r3, #1
 800bcb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bcb4:	400b      	ands	r3, r1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <HAL_I2C_Init+0x138>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	1e59      	subs	r1, r3, #1
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	fbb1 f3f3 	udiv	r3, r1, r3
 800bcc8:	3301      	adds	r3, #1
 800bcca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcce:	e051      	b.n	800bd74 <HAL_I2C_Init+0x1dc>
 800bcd0:	2304      	movs	r3, #4
 800bcd2:	e04f      	b.n	800bd74 <HAL_I2C_Init+0x1dc>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d111      	bne.n	800bd00 <HAL_I2C_Init+0x168>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	1e58      	subs	r0, r3, #1
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6859      	ldr	r1, [r3, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	440b      	add	r3, r1
 800bcea:	fbb0 f3f3 	udiv	r3, r0, r3
 800bcee:	3301      	adds	r3, #1
 800bcf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bf0c      	ite	eq
 800bcf8:	2301      	moveq	r3, #1
 800bcfa:	2300      	movne	r3, #0
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	e012      	b.n	800bd26 <HAL_I2C_Init+0x18e>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	1e58      	subs	r0, r3, #1
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6859      	ldr	r1, [r3, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	0099      	lsls	r1, r3, #2
 800bd10:	440b      	add	r3, r1
 800bd12:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd16:	3301      	adds	r3, #1
 800bd18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bf0c      	ite	eq
 800bd20:	2301      	moveq	r3, #1
 800bd22:	2300      	movne	r3, #0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <HAL_I2C_Init+0x196>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e022      	b.n	800bd74 <HAL_I2C_Init+0x1dc>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10e      	bne.n	800bd54 <HAL_I2C_Init+0x1bc>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	1e58      	subs	r0, r3, #1
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6859      	ldr	r1, [r3, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	440b      	add	r3, r1
 800bd44:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd48:	3301      	adds	r3, #1
 800bd4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd52:	e00f      	b.n	800bd74 <HAL_I2C_Init+0x1dc>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	1e58      	subs	r0, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6859      	ldr	r1, [r3, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	0099      	lsls	r1, r3, #2
 800bd64:	440b      	add	r3, r1
 800bd66:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd74:	6879      	ldr	r1, [r7, #4]
 800bd76:	6809      	ldr	r1, [r1, #0]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	69da      	ldr	r2, [r3, #28]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800bda2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	6911      	ldr	r1, [r2, #16]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	68d2      	ldr	r2, [r2, #12]
 800bdae:	4311      	orrs	r1, r2
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	695a      	ldr	r2, [r3, #20]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f042 0201 	orr.w	r2, r2, #1
 800bde2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	000186a0 	.word	0x000186a0
 800be10:	001e847f 	.word	0x001e847f
 800be14:	003d08ff 	.word	0x003d08ff
 800be18:	431bde83 	.word	0x431bde83
 800be1c:	10624dd3 	.word	0x10624dd3

0800be20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	4608      	mov	r0, r1
 800be2a:	4611      	mov	r1, r2
 800be2c:	461a      	mov	r2, r3
 800be2e:	4603      	mov	r3, r0
 800be30:	817b      	strh	r3, [r7, #10]
 800be32:	460b      	mov	r3, r1
 800be34:	813b      	strh	r3, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800be3a:	f7fd feab 	bl	8009b94 <HAL_GetTick>
 800be3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b20      	cmp	r3, #32
 800be4a:	f040 80d9 	bne.w	800c000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	2319      	movs	r3, #25
 800be54:	2201      	movs	r2, #1
 800be56:	496d      	ldr	r1, [pc, #436]	@ (800c00c <HAL_I2C_Mem_Write+0x1ec>)
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f001 fa4b 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800be64:	2302      	movs	r3, #2
 800be66:	e0cc      	b.n	800c002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d101      	bne.n	800be76 <HAL_I2C_Mem_Write+0x56>
 800be72:	2302      	movs	r3, #2
 800be74:	e0c5      	b.n	800c002 <HAL_I2C_Mem_Write+0x1e2>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d007      	beq.n	800be9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f042 0201 	orr.w	r2, r2, #1
 800be9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800beaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2221      	movs	r2, #33	@ 0x21
 800beb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2240      	movs	r2, #64	@ 0x40
 800beb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6a3a      	ldr	r2, [r7, #32]
 800bec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800becc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4a4d      	ldr	r2, [pc, #308]	@ (800c010 <HAL_I2C_Mem_Write+0x1f0>)
 800bedc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bede:	88f8      	ldrh	r0, [r7, #6]
 800bee0:	893a      	ldrh	r2, [r7, #8]
 800bee2:	8979      	ldrh	r1, [r7, #10]
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	4603      	mov	r3, r0
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 fec8 	bl	800cc84 <I2C_RequestMemoryWrite>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d052      	beq.n	800bfa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e081      	b.n	800c002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f001 facc 	bl	800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00d      	beq.n	800bf2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf12:	2b04      	cmp	r3, #4
 800bf14:	d107      	bne.n	800bf26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e06b      	b.n	800c002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf2e:	781a      	ldrb	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf44:	3b01      	subs	r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	3b01      	subs	r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d11b      	bne.n	800bfa0 <HAL_I2C_Mem_Write+0x180>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d017      	beq.n	800bfa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf74:	781a      	ldrb	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1aa      	bne.n	800befe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f001 fab8 	bl	800d522 <I2C_WaitOnBTFFlagUntilTimeout>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00d      	beq.n	800bfd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbc:	2b04      	cmp	r3, #4
 800bfbe:	d107      	bne.n	800bfd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e016      	b.n	800c002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	e000      	b.n	800c002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c000:	2302      	movs	r3, #2
  }
}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	00100002 	.word	0x00100002
 800c010:	ffff0000 	.word	0xffff0000

0800c014 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08c      	sub	sp, #48	@ 0x30
 800c018:	af02      	add	r7, sp, #8
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	461a      	mov	r2, r3
 800c022:	4603      	mov	r3, r0
 800c024:	817b      	strh	r3, [r7, #10]
 800c026:	460b      	mov	r3, r1
 800c028:	813b      	strh	r3, [r7, #8]
 800c02a:	4613      	mov	r3, r2
 800c02c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c02e:	f7fd fdb1 	bl	8009b94 <HAL_GetTick>
 800c032:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b20      	cmp	r3, #32
 800c03e:	f040 8208 	bne.w	800c452 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	2319      	movs	r3, #25
 800c048:	2201      	movs	r2, #1
 800c04a:	497b      	ldr	r1, [pc, #492]	@ (800c238 <HAL_I2C_Mem_Read+0x224>)
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f001 f951 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c058:	2302      	movs	r3, #2
 800c05a:	e1fb      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c062:	2b01      	cmp	r3, #1
 800c064:	d101      	bne.n	800c06a <HAL_I2C_Mem_Read+0x56>
 800c066:	2302      	movs	r3, #2
 800c068:	e1f4      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d007      	beq.n	800c090 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0201 	orr.w	r2, r2, #1
 800c08e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c09e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2222      	movs	r2, #34	@ 0x22
 800c0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2240      	movs	r2, #64	@ 0x40
 800c0ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800c0c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	4a5b      	ldr	r2, [pc, #364]	@ (800c23c <HAL_I2C_Mem_Read+0x228>)
 800c0d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0d2:	88f8      	ldrh	r0, [r7, #6]
 800c0d4:	893a      	ldrh	r2, [r7, #8]
 800c0d6:	8979      	ldrh	r1, [r7, #10]
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f000 fe64 	bl	800cdb0 <I2C_RequestMemoryRead>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e1b0      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d113      	bne.n	800c122 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	623b      	str	r3, [r7, #32]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	623b      	str	r3, [r7, #32]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	623b      	str	r3, [r7, #32]
 800c10e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	e184      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c126:	2b01      	cmp	r3, #1
 800c128:	d11b      	bne.n	800c162 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c13a:	2300      	movs	r3, #0
 800c13c:	61fb      	str	r3, [r7, #28]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	695b      	ldr	r3, [r3, #20]
 800c144:	61fb      	str	r3, [r7, #28]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	61fb      	str	r3, [r7, #28]
 800c14e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	e164      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c166:	2b02      	cmp	r3, #2
 800c168:	d11b      	bne.n	800c1a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c178:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c18a:	2300      	movs	r3, #0
 800c18c:	61bb      	str	r3, [r7, #24]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	61bb      	str	r3, [r7, #24]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	e144      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	617b      	str	r3, [r7, #20]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c1b8:	e138      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	f200 80f1 	bhi.w	800c3a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d123      	bne.n	800c214 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f001 f9e7 	bl	800d5a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e139      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	691a      	ldr	r2, [r3, #16]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c208:	b29b      	uxth	r3, r3
 800c20a:	3b01      	subs	r3, #1
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c212:	e10b      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d14e      	bne.n	800c2ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c222:	2200      	movs	r2, #0
 800c224:	4906      	ldr	r1, [pc, #24]	@ (800c240 <HAL_I2C_Mem_Read+0x22c>)
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f001 f864 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d008      	beq.n	800c244 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e10e      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
 800c236:	bf00      	nop
 800c238:	00100002 	.word	0x00100002
 800c23c:	ffff0000 	.word	0xffff0000
 800c240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691a      	ldr	r2, [r3, #16]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c270:	3b01      	subs	r3, #1
 800c272:	b29a      	uxth	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	3b01      	subs	r3, #1
 800c280:	b29a      	uxth	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	691a      	ldr	r2, [r3, #16]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	b2d2      	uxtb	r2, r2
 800c292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c2b8:	e0b8      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	4966      	ldr	r1, [pc, #408]	@ (800c45c <HAL_I2C_Mem_Read+0x448>)
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f001 f815 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e0bf      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	691a      	ldr	r2, [r3, #16]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ee:	b2d2      	uxtb	r2, r2
 800c2f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c300:	3b01      	subs	r3, #1
 800c302:	b29a      	uxth	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	3b01      	subs	r3, #1
 800c310:	b29a      	uxth	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31c:	2200      	movs	r2, #0
 800c31e:	494f      	ldr	r1, [pc, #316]	@ (800c45c <HAL_I2C_Mem_Read+0x448>)
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 ffe7 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e091      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c33e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	691a      	ldr	r2, [r3, #16]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c35c:	3b01      	subs	r3, #1
 800c35e:	b29a      	uxth	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c368:	b29b      	uxth	r3, r3
 800c36a:	3b01      	subs	r3, #1
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	691a      	ldr	r2, [r3, #16]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37c:	b2d2      	uxtb	r2, r2
 800c37e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c384:	1c5a      	adds	r2, r3, #1
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c38e:	3b01      	subs	r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	3b01      	subs	r3, #1
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c3a4:	e042      	b.n	800c42c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f001 f8fa 	bl	800d5a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e04c      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c4:	b2d2      	uxtb	r2, r2
 800c3c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	695b      	ldr	r3, [r3, #20]
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	d118      	bne.n	800c42c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	691a      	ldr	r2, [r3, #16]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c404:	b2d2      	uxtb	r2, r2
 800c406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40c:	1c5a      	adds	r2, r3, #1
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c416:	3b01      	subs	r3, #1
 800c418:	b29a      	uxth	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c422:	b29b      	uxth	r3, r3
 800c424:	3b01      	subs	r3, #1
 800c426:	b29a      	uxth	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c430:	2b00      	cmp	r3, #0
 800c432:	f47f aec2 	bne.w	800c1ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2220      	movs	r2, #32
 800c43a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	e000      	b.n	800c454 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c452:	2302      	movs	r3, #2
  }
}
 800c454:	4618      	mov	r0, r3
 800c456:	3728      	adds	r7, #40	@ 0x28
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	00010004 	.word	0x00010004

0800c460 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b08c      	sub	sp, #48	@ 0x30
 800c464:	af02      	add	r7, sp, #8
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	4608      	mov	r0, r1
 800c46a:	4611      	mov	r1, r2
 800c46c:	461a      	mov	r2, r3
 800c46e:	4603      	mov	r3, r0
 800c470:	817b      	strh	r3, [r7, #10]
 800c472:	460b      	mov	r3, r1
 800c474:	813b      	strh	r3, [r7, #8]
 800c476:	4613      	mov	r3, r2
 800c478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c47a:	f7fd fb8b 	bl	8009b94 <HAL_GetTick>
 800c47e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b20      	cmp	r3, #32
 800c48e:	f040 8176 	bne.w	800c77e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c492:	4b95      	ldr	r3, [pc, #596]	@ (800c6e8 <HAL_I2C_Mem_Read_DMA+0x288>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	08db      	lsrs	r3, r3, #3
 800c498:	4a94      	ldr	r2, [pc, #592]	@ (800c6ec <HAL_I2C_Mem_Read_DMA+0x28c>)
 800c49a:	fba2 2303 	umull	r2, r3, r2, r3
 800c49e:	0a1a      	lsrs	r2, r3, #8
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009a      	lsls	r2, r3, #2
 800c4a8:	4413      	add	r3, r2
 800c4aa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d116      	bne.n	800c4e6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2220      	movs	r2, #32
 800c4c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d2:	f043 0220 	orr.w	r2, r3, #32
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e14c      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	f003 0302 	and.w	r3, r3, #2
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d0db      	beq.n	800c4ac <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d101      	bne.n	800c502 <HAL_I2C_Mem_Read_DMA+0xa2>
 800c4fe:	2302      	movs	r3, #2
 800c500:	e13e      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b01      	cmp	r3, #1
 800c516:	d007      	beq.n	800c528 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f042 0201 	orr.w	r2, r2, #1
 800c526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2222      	movs	r2, #34	@ 0x22
 800c53c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2240      	movs	r2, #64	@ 0x40
 800c544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800c558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c55e:	b29a      	uxth	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	4a62      	ldr	r2, [pc, #392]	@ (800c6f0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800c568:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800c56a:	897a      	ldrh	r2, [r7, #10]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800c570:	893a      	ldrh	r2, [r7, #8]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800c576:	88fa      	ldrh	r2, [r7, #6]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 80cc 	beq.w	800c724 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02d      	beq.n	800c5f0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c598:	4a56      	ldr	r2, [pc, #344]	@ (800c6f4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800c59a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a0:	4a55      	ldr	r2, [pc, #340]	@ (800c6f8 <HAL_I2C_Mem_Read_DMA+0x298>)
 800c5a2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3310      	adds	r3, #16
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5da:	f7fe fdaf 	bl	800b13c <HAL_DMA_Start_IT>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c5e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f040 8087 	bne.w	800c6fc <HAL_I2C_Mem_Read_DMA+0x29c>
 800c5ee:	e013      	b.n	800c618 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2220      	movs	r2, #32
 800c5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c604:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e0b3      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800c618:	88f8      	ldrh	r0, [r7, #6]
 800c61a:	893a      	ldrh	r2, [r7, #8]
 800c61c:	8979      	ldrh	r1, [r7, #10]
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	2323      	movs	r3, #35	@ 0x23
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	4603      	mov	r3, r0
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f000 fbc1 	bl	800cdb0 <I2C_RequestMemoryRead>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d023      	beq.n	800c67c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe fe47 	bl	800b2cc <HAL_DMA_Abort_IT>
 800c63e:	4603      	mov	r3, r0
 800c640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c648:	2200      	movs	r2, #0
 800c64a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c65a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f022 0201 	bic.w	r2, r2, #1
 800c676:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e081      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c680:	2b01      	cmp	r3, #1
 800c682:	d108      	bne.n	800c696 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	e007      	b.n	800c6a6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c6a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	61bb      	str	r3, [r7, #24]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	61bb      	str	r3, [r7, #24]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	61bb      	str	r3, [r7, #24]
 800c6ba:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6d2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6e2:	605a      	str	r2, [r3, #4]
 800c6e4:	e049      	b.n	800c77a <HAL_I2C_Mem_Read_DMA+0x31a>
 800c6e6:	bf00      	nop
 800c6e8:	20000004 	.word	0x20000004
 800c6ec:	14f8b589 	.word	0x14f8b589
 800c6f0:	ffff0000 	.word	0xffff0000
 800c6f4:	0800cf81 	.word	0x0800cf81
 800c6f8:	0800d12b 	.word	0x0800d12b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2220      	movs	r2, #32
 800c700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c710:	f043 0210 	orr.w	r2, r3, #16
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	e02d      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800c724:	88f8      	ldrh	r0, [r7, #6]
 800c726:	893a      	ldrh	r2, [r7, #8]
 800c728:	8979      	ldrh	r1, [r7, #10]
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	2323      	movs	r3, #35	@ 0x23
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	4603      	mov	r3, r0
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f000 fb3b 	bl	800cdb0 <I2C_RequestMemoryRead>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e01d      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c744:	2300      	movs	r3, #0
 800c746:	617b      	str	r3, [r7, #20]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	617b      	str	r3, [r7, #20]
 800c758:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c768:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2220      	movs	r2, #32
 800c76e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	e000      	b.n	800c780 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800c77e:	2302      	movs	r3, #2
  }
}
 800c780:	4618      	mov	r0, r3
 800c782:	3728      	adds	r7, #40	@ 0x28
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08a      	sub	sp, #40	@ 0x28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c7aa:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00d      	beq.n	800c7d2 <HAL_I2C_ER_IRQHandler+0x4a>
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d008      	beq.n	800c7d2 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	f043 0301 	orr.w	r3, r3, #1
 800c7c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c7d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00d      	beq.n	800c7f8 <HAL_I2C_ER_IRQHandler+0x70>
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d008      	beq.n	800c7f8 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	f043 0302 	orr.w	r3, r3, #2
 800c7ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800c7f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d03e      	beq.n	800c880 <HAL_I2C_ER_IRQHandler+0xf8>
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d039      	beq.n	800c880 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800c80c:	7efb      	ldrb	r3, [r7, #27]
 800c80e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c814:	b29b      	uxth	r3, r3
 800c816:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c81e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c824:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c826:	7ebb      	ldrb	r3, [r7, #26]
 800c828:	2b20      	cmp	r3, #32
 800c82a:	d112      	bne.n	800c852 <HAL_I2C_ER_IRQHandler+0xca>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10f      	bne.n	800c852 <HAL_I2C_ER_IRQHandler+0xca>
 800c832:	7cfb      	ldrb	r3, [r7, #19]
 800c834:	2b21      	cmp	r3, #33	@ 0x21
 800c836:	d008      	beq.n	800c84a <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c838:	7cfb      	ldrb	r3, [r7, #19]
 800c83a:	2b29      	cmp	r3, #41	@ 0x29
 800c83c:	d005      	beq.n	800c84a <HAL_I2C_ER_IRQHandler+0xc2>
 800c83e:	7cfb      	ldrb	r3, [r7, #19]
 800c840:	2b28      	cmp	r3, #40	@ 0x28
 800c842:	d106      	bne.n	800c852 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b21      	cmp	r3, #33	@ 0x21
 800c848:	d103      	bne.n	800c852 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f878 	bl	800c940 <I2C_Slave_AF>
 800c850:	e016      	b.n	800c880 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c85a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85e:	f043 0304 	orr.w	r3, r3, #4
 800c862:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c864:	7efb      	ldrb	r3, [r7, #27]
 800c866:	2b10      	cmp	r3, #16
 800c868:	d002      	beq.n	800c870 <HAL_I2C_ER_IRQHandler+0xe8>
 800c86a:	7efb      	ldrb	r3, [r7, #27]
 800c86c:	2b40      	cmp	r3, #64	@ 0x40
 800c86e:	d107      	bne.n	800c880 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c87e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00d      	beq.n	800c8a6 <HAL_I2C_ER_IRQHandler+0x11e>
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c890:	2b00      	cmp	r3, #0
 800c892:	d008      	beq.n	800c8a6 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	f043 0308 	orr.w	r3, r3, #8
 800c89a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800c8a4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d008      	beq.n	800c8be <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f8b1 	bl	800ca20 <I2C_ITError>
  }
}
 800c8be:	bf00      	nop
 800c8c0:	3728      	adds	r7, #40	@ 0x28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c8c6:	b480      	push	{r7}
 800c8c8:	b083      	sub	sp, #12
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c8ce:	bf00      	nop
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b083      	sub	sp, #12
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c8e2:	bf00      	nop
 800c8e4:	370c      	adds	r7, #12
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c8f6:	bf00      	nop
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c902:	b480      	push	{r7}
 800c904:	b083      	sub	sp, #12
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c916:	b480      	push	{r7}
 800c918:	b083      	sub	sp, #12
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c932:	bf00      	nop
 800c934:	370c      	adds	r7, #12
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c94e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c954:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b08      	cmp	r3, #8
 800c95a:	d002      	beq.n	800c962 <I2C_Slave_AF+0x22>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b20      	cmp	r3, #32
 800c960:	d129      	bne.n	800c9b6 <I2C_Slave_AF+0x76>
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	2b28      	cmp	r3, #40	@ 0x28
 800c966:	d126      	bne.n	800c9b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a2c      	ldr	r2, [pc, #176]	@ (800ca1c <I2C_Slave_AF+0xdc>)
 800c96c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c97c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c986:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c996:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2220      	movs	r2, #32
 800c9a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff ffa7 	bl	800c902 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c9b4:	e02e      	b.n	800ca14 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	2b21      	cmp	r3, #33	@ 0x21
 800c9ba:	d126      	bne.n	800ca0a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a17      	ldr	r2, [pc, #92]	@ (800ca1c <I2C_Slave_AF+0xdc>)
 800c9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2221      	movs	r2, #33	@ 0x21
 800c9c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c9e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c9f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca00:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff ff69 	bl	800c8da <HAL_I2C_SlaveTxCpltCallback>
}
 800ca08:	e004      	b.n	800ca14 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ca12:	615a      	str	r2, [r3, #20]
}
 800ca14:	bf00      	nop
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	ffff0000 	.word	0xffff0000

0800ca20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ca36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ca38:	7bbb      	ldrb	r3, [r7, #14]
 800ca3a:	2b10      	cmp	r3, #16
 800ca3c:	d002      	beq.n	800ca44 <I2C_ITError+0x24>
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b40      	cmp	r3, #64	@ 0x40
 800ca42:	d10a      	bne.n	800ca5a <I2C_ITError+0x3a>
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	2b22      	cmp	r3, #34	@ 0x22
 800ca48:	d107      	bne.n	800ca5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ca58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ca60:	2b28      	cmp	r3, #40	@ 0x28
 800ca62:	d107      	bne.n	800ca74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2228      	movs	r2, #40	@ 0x28
 800ca6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ca72:	e015      	b.n	800caa0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca82:	d00a      	beq.n	800ca9a <I2C_ITError+0x7a>
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	2b60      	cmp	r3, #96	@ 0x60
 800ca88:	d007      	beq.n	800ca9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2220      	movs	r2, #32
 800ca8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800caaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800caae:	d162      	bne.n	800cb76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cabe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cac4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d020      	beq.n	800cb10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cad2:	4a6a      	ldr	r2, [pc, #424]	@ (800cc7c <I2C_ITError+0x25c>)
 800cad4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fbf6 	bl	800b2cc <HAL_DMA_Abort_IT>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 8089 	beq.w	800cbfa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0201 	bic.w	r2, r2, #1
 800caf6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2220      	movs	r2, #32
 800cafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	4798      	blx	r3
 800cb0e:	e074      	b.n	800cbfa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb14:	4a59      	ldr	r2, [pc, #356]	@ (800cc7c <I2C_ITError+0x25c>)
 800cb16:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fe fbd5 	bl	800b2cc <HAL_DMA_Abort_IT>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d068      	beq.n	800cbfa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb32:	2b40      	cmp	r3, #64	@ 0x40
 800cb34:	d10b      	bne.n	800cb4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	691a      	ldr	r2, [r3, #16]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb40:	b2d2      	uxtb	r2, r2
 800cb42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f022 0201 	bic.w	r2, r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2220      	movs	r2, #32
 800cb62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cb70:	4610      	mov	r0, r2
 800cb72:	4798      	blx	r3
 800cb74:	e041      	b.n	800cbfa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b60      	cmp	r3, #96	@ 0x60
 800cb80:	d125      	bne.n	800cbce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2220      	movs	r2, #32
 800cb86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb9a:	2b40      	cmp	r3, #64	@ 0x40
 800cb9c:	d10b      	bne.n	800cbb6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	691a      	ldr	r2, [r3, #16]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba8:	b2d2      	uxtb	r2, r2
 800cbaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0201 	bic.w	r2, r2, #1
 800cbc4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff feaf 	bl	800c92a <HAL_I2C_AbortCpltCallback>
 800cbcc:	e015      	b.n	800cbfa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	695b      	ldr	r3, [r3, #20]
 800cbd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd8:	2b40      	cmp	r3, #64	@ 0x40
 800cbda:	d10b      	bne.n	800cbf4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	691a      	ldr	r2, [r3, #16]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe6:	b2d2      	uxtb	r2, r2
 800cbe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fe8e 	bl	800c916 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbfe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10e      	bne.n	800cc28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d109      	bne.n	800cc28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d104      	bne.n	800cc28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cc36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d113      	bne.n	800cc74 <I2C_ITError+0x254>
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	2b28      	cmp	r3, #40	@ 0x28
 800cc50:	d110      	bne.n	800cc74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a0a      	ldr	r2, [pc, #40]	@ (800cc80 <I2C_ITError+0x260>)
 800cc56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff fe47 	bl	800c902 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc74:	bf00      	nop
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	0800d1a5 	.word	0x0800d1a5
 800cc80:	ffff0000 	.word	0xffff0000

0800cc84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af02      	add	r7, sp, #8
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	4611      	mov	r1, r2
 800cc90:	461a      	mov	r2, r3
 800cc92:	4603      	mov	r3, r0
 800cc94:	817b      	strh	r3, [r7, #10]
 800cc96:	460b      	mov	r3, r1
 800cc98:	813b      	strh	r3, [r7, #8]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ccac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ccae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 fb1a 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00d      	beq.n	800cce2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccd4:	d103      	bne.n	800ccde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ccde:	2303      	movs	r3, #3
 800cce0:	e05f      	b.n	800cda2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cce2:	897b      	ldrh	r3, [r7, #10]
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	461a      	mov	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ccf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf4:	6a3a      	ldr	r2, [r7, #32]
 800ccf6:	492d      	ldr	r1, [pc, #180]	@ (800cdac <I2C_RequestMemoryWrite+0x128>)
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 fb52 	bl	800d3a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e04c      	b.n	800cda2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd08:	2300      	movs	r3, #0
 800cd0a:	617b      	str	r3, [r7, #20]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	617b      	str	r3, [r7, #20]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	617b      	str	r3, [r7, #20]
 800cd1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd20:	6a39      	ldr	r1, [r7, #32]
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f000 fbbc 	bl	800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00d      	beq.n	800cd4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd32:	2b04      	cmp	r3, #4
 800cd34:	d107      	bne.n	800cd46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e02b      	b.n	800cda2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cd4a:	88fb      	ldrh	r3, [r7, #6]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d105      	bne.n	800cd5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cd50:	893b      	ldrh	r3, [r7, #8]
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	611a      	str	r2, [r3, #16]
 800cd5a:	e021      	b.n	800cda0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cd5c:	893b      	ldrh	r3, [r7, #8]
 800cd5e:	0a1b      	lsrs	r3, r3, #8
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	b2da      	uxtb	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd6c:	6a39      	ldr	r1, [r7, #32]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 fb96 	bl	800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00d      	beq.n	800cd96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	d107      	bne.n	800cd92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e005      	b.n	800cda2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cd96:	893b      	ldrh	r3, [r7, #8]
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	00010002 	.word	0x00010002

0800cdb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	4608      	mov	r0, r1
 800cdba:	4611      	mov	r1, r2
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	817b      	strh	r3, [r7, #10]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	813b      	strh	r3, [r7, #8]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cdd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cde8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 fa7c 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00d      	beq.n	800ce1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce10:	d103      	bne.n	800ce1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e0aa      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ce1e:	897b      	ldrh	r3, [r7, #10]
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	461a      	mov	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ce2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	6a3a      	ldr	r2, [r7, #32]
 800ce32:	4952      	ldr	r1, [pc, #328]	@ (800cf7c <I2C_RequestMemoryRead+0x1cc>)
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f000 fab4 	bl	800d3a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e097      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	695b      	ldr	r3, [r3, #20]
 800ce4e:	617b      	str	r3, [r7, #20]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	617b      	str	r3, [r7, #20]
 800ce58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ce5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce5c:	6a39      	ldr	r1, [r7, #32]
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f000 fb1e 	bl	800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00d      	beq.n	800ce86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6e:	2b04      	cmp	r3, #4
 800ce70:	d107      	bne.n	800ce82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e076      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ce86:	88fb      	ldrh	r3, [r7, #6]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d105      	bne.n	800ce98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ce8c:	893b      	ldrh	r3, [r7, #8]
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	611a      	str	r2, [r3, #16]
 800ce96:	e021      	b.n	800cedc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ce98:	893b      	ldrh	r3, [r7, #8]
 800ce9a:	0a1b      	lsrs	r3, r3, #8
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cea8:	6a39      	ldr	r1, [r7, #32]
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f000 faf8 	bl	800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00d      	beq.n	800ced2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	d107      	bne.n	800cece <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cecc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e050      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ced2:	893b      	ldrh	r3, [r7, #8]
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cede:	6a39      	ldr	r1, [r7, #32]
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f000 fadd 	bl	800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00d      	beq.n	800cf08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef0:	2b04      	cmp	r3, #4
 800cef2:	d107      	bne.n	800cf04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e035      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f000 f9e5 	bl	800d2f4 <I2C_WaitOnFlagUntilTimeout>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00d      	beq.n	800cf4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf3e:	d103      	bne.n	800cf48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e013      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cf4c:	897b      	ldrh	r3, [r7, #10]
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	f043 0301 	orr.w	r3, r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5e:	6a3a      	ldr	r2, [r7, #32]
 800cf60:	4906      	ldr	r1, [pc, #24]	@ (800cf7c <I2C_RequestMemoryRead+0x1cc>)
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f000 fa1d 	bl	800d3a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	00010002 	.word	0x00010002

0800cf80 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf94:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cf9c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685a      	ldr	r2, [r3, #4]
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800cfb2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d003      	beq.n	800cfd4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800cfd4:	7cfb      	ldrb	r3, [r7, #19]
 800cfd6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800cfda:	2b21      	cmp	r3, #33	@ 0x21
 800cfdc:	d007      	beq.n	800cfee <I2C_DMAXferCplt+0x6e>
 800cfde:	7cfb      	ldrb	r3, [r7, #19]
 800cfe0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800cfe4:	2b22      	cmp	r3, #34	@ 0x22
 800cfe6:	d131      	bne.n	800d04c <I2C_DMAXferCplt+0xcc>
 800cfe8:	7cbb      	ldrb	r3, [r7, #18]
 800cfea:	2b20      	cmp	r3, #32
 800cfec:	d12e      	bne.n	800d04c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cffc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2200      	movs	r2, #0
 800d002:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d004:	7cfb      	ldrb	r3, [r7, #19]
 800d006:	2b29      	cmp	r3, #41	@ 0x29
 800d008:	d10a      	bne.n	800d020 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	2221      	movs	r2, #33	@ 0x21
 800d00e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2228      	movs	r2, #40	@ 0x28
 800d014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d018:	6978      	ldr	r0, [r7, #20]
 800d01a:	f7ff fc5e 	bl	800c8da <HAL_I2C_SlaveTxCpltCallback>
 800d01e:	e00c      	b.n	800d03a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d020:	7cfb      	ldrb	r3, [r7, #19]
 800d022:	2b2a      	cmp	r3, #42	@ 0x2a
 800d024:	d109      	bne.n	800d03a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2222      	movs	r2, #34	@ 0x22
 800d02a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2228      	movs	r2, #40	@ 0x28
 800d030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d034:	6978      	ldr	r0, [r7, #20]
 800d036:	f7ff fc5a 	bl	800c8ee <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800d048:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d04a:	e06a      	b.n	800d122 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d064      	beq.n	800d122 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d107      	bne.n	800d072 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d070:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d080:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d088:	d009      	beq.n	800d09e <I2C_DMAXferCplt+0x11e>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b08      	cmp	r3, #8
 800d08e:	d006      	beq.n	800d09e <I2C_DMAXferCplt+0x11e>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800d096:	d002      	beq.n	800d09e <I2C_DMAXferCplt+0x11e>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b20      	cmp	r3, #32
 800d09c:	d107      	bne.n	800d0ae <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d0bc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d0cc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d003      	beq.n	800d0e4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800d0dc:	6978      	ldr	r0, [r7, #20]
 800d0de:	f7ff fc1a 	bl	800c916 <HAL_I2C_ErrorCallback>
}
 800d0e2:	e01e      	b.n	800d122 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	2220      	movs	r2, #32
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b40      	cmp	r3, #64	@ 0x40
 800d0f6:	d10a      	bne.n	800d10e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2200      	movs	r2, #0
 800d104:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800d106:	6978      	ldr	r0, [r7, #20]
 800d108:	f7f4 fee0 	bl	8001ecc <HAL_I2C_MemRxCpltCallback>
}
 800d10c:	e009      	b.n	800d122 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2212      	movs	r2, #18
 800d11a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800d11c:	6978      	ldr	r0, [r7, #20]
 800d11e:	f7ff fbd2 	bl	800c8c6 <HAL_I2C_MasterRxCpltCallback>
}
 800d122:	bf00      	nop
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d136:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d144:	2200      	movs	r2, #0
 800d146:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d154:	2200      	movs	r2, #0
 800d156:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7fe fa63 	bl	800b624 <HAL_DMA_GetError>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b02      	cmp	r3, #2
 800d162:	d01b      	beq.n	800d19c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d172:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2220      	movs	r2, #32
 800d17e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d18e:	f043 0210 	orr.w	r2, r3, #16
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7ff fbbd 	bl	800c916 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d19c:	bf00      	nop
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d1be:	4b4b      	ldr	r3, [pc, #300]	@ (800d2ec <I2C_DMAAbort+0x148>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	08db      	lsrs	r3, r3, #3
 800d1c4:	4a4a      	ldr	r2, [pc, #296]	@ (800d2f0 <I2C_DMAAbort+0x14c>)
 800d1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ca:	0a1a      	lsrs	r2, r3, #8
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	00da      	lsls	r2, r3, #3
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d106      	bne.n	800d1ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1e2:	f043 0220 	orr.w	r2, r3, #32
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800d1ea:	e00a      	b.n	800d202 <I2C_DMAAbort+0x5e>
    }
    count--;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d1fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d200:	d0ea      	beq.n	800d1d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d20e:	2200      	movs	r2, #0
 800d210:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d216:	2b00      	cmp	r3, #0
 800d218:	d003      	beq.n	800d222 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d21e:	2200      	movs	r2, #0
 800d220:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d230:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2200      	movs	r2, #0
 800d236:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d244:	2200      	movs	r2, #0
 800d246:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d003      	beq.n	800d258 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d254:	2200      	movs	r2, #0
 800d256:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 0201 	bic.w	r2, r2, #1
 800d266:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b60      	cmp	r3, #96	@ 0x60
 800d272:	d10e      	bne.n	800d292 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2220      	movs	r2, #32
 800d278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	2200      	movs	r2, #0
 800d288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d28a:	6978      	ldr	r0, [r7, #20]
 800d28c:	f7ff fb4d 	bl	800c92a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d290:	e027      	b.n	800d2e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d292:	7cfb      	ldrb	r3, [r7, #19]
 800d294:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d298:	2b28      	cmp	r3, #40	@ 0x28
 800d29a:	d117      	bne.n	800d2cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f042 0201 	orr.w	r2, r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d2ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2228      	movs	r2, #40	@ 0x28
 800d2c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d2ca:	e007      	b.n	800d2dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d2dc:	6978      	ldr	r0, [r7, #20]
 800d2de:	f7ff fb1a 	bl	800c916 <HAL_I2C_ErrorCallback>
}
 800d2e2:	bf00      	nop
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000004 	.word	0x20000004
 800d2f0:	14f8b589 	.word	0x14f8b589

0800d2f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	603b      	str	r3, [r7, #0]
 800d300:	4613      	mov	r3, r2
 800d302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d304:	e025      	b.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d021      	beq.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d30e:	f7fc fc41 	bl	8009b94 <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d302      	bcc.n	800d324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d116      	bne.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2220      	movs	r2, #32
 800d32e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d33e:	f043 0220 	orr.w	r2, r3, #32
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	e023      	b.n	800d39a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	0c1b      	lsrs	r3, r3, #16
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d10d      	bne.n	800d378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	43da      	mvns	r2, r3
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	4013      	ands	r3, r2
 800d368:	b29b      	uxth	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bf0c      	ite	eq
 800d36e:	2301      	moveq	r3, #1
 800d370:	2300      	movne	r3, #0
 800d372:	b2db      	uxtb	r3, r3
 800d374:	461a      	mov	r2, r3
 800d376:	e00c      	b.n	800d392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	43da      	mvns	r2, r3
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	4013      	ands	r3, r2
 800d384:	b29b      	uxth	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	bf0c      	ite	eq
 800d38a:	2301      	moveq	r3, #1
 800d38c:	2300      	movne	r3, #0
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	461a      	mov	r2, r3
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	429a      	cmp	r2, r3
 800d396:	d0b6      	beq.n	800d306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	60b9      	str	r1, [r7, #8]
 800d3ac:	607a      	str	r2, [r7, #4]
 800d3ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d3b0:	e051      	b.n	800d456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3c0:	d123      	bne.n	800d40a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d3da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2220      	movs	r2, #32
 800d3e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f6:	f043 0204 	orr.w	r2, r3, #4
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e046      	b.n	800d498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d410:	d021      	beq.n	800d456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d412:	f7fc fbbf 	bl	8009b94 <HAL_GetTick>
 800d416:	4602      	mov	r2, r0
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d302      	bcc.n	800d428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d116      	bne.n	800d456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2220      	movs	r2, #32
 800d432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d442:	f043 0220 	orr.w	r2, r3, #32
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e020      	b.n	800d498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	0c1b      	lsrs	r3, r3, #16
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d10c      	bne.n	800d47a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	695b      	ldr	r3, [r3, #20]
 800d466:	43da      	mvns	r2, r3
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	4013      	ands	r3, r2
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bf14      	ite	ne
 800d472:	2301      	movne	r3, #1
 800d474:	2300      	moveq	r3, #0
 800d476:	b2db      	uxtb	r3, r3
 800d478:	e00b      	b.n	800d492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	699b      	ldr	r3, [r3, #24]
 800d480:	43da      	mvns	r2, r3
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	4013      	ands	r3, r2
 800d486:	b29b      	uxth	r3, r3
 800d488:	2b00      	cmp	r3, #0
 800d48a:	bf14      	ite	ne
 800d48c:	2301      	movne	r3, #1
 800d48e:	2300      	moveq	r3, #0
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d18d      	bne.n	800d3b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d4ac:	e02d      	b.n	800d50a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f000 f8ce 	bl	800d650 <I2C_IsAcknowledgeFailed>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e02d      	b.n	800d51a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c4:	d021      	beq.n	800d50a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4c6:	f7fc fb65 	bl	8009b94 <HAL_GetTick>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d302      	bcc.n	800d4dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d116      	bne.n	800d50a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f6:	f043 0220 	orr.w	r2, r3, #32
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e007      	b.n	800d51a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d514:	2b80      	cmp	r3, #128	@ 0x80
 800d516:	d1ca      	bne.n	800d4ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d52e:	e02d      	b.n	800d58c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f000 f88d 	bl	800d650 <I2C_IsAcknowledgeFailed>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	e02d      	b.n	800d59c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d546:	d021      	beq.n	800d58c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d548:	f7fc fb24 	bl	8009b94 <HAL_GetTick>
 800d54c:	4602      	mov	r2, r0
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	429a      	cmp	r2, r3
 800d556:	d302      	bcc.n	800d55e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d116      	bne.n	800d58c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2220      	movs	r2, #32
 800d568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d578:	f043 0220 	orr.w	r2, r3, #32
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e007      	b.n	800d59c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	f003 0304 	and.w	r3, r3, #4
 800d596:	2b04      	cmp	r3, #4
 800d598:	d1ca      	bne.n	800d530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d5b0:	e042      	b.n	800d638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	f003 0310 	and.w	r3, r3, #16
 800d5bc:	2b10      	cmp	r3, #16
 800d5be:	d119      	bne.n	800d5f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f06f 0210 	mvn.w	r2, #16
 800d5c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2220      	movs	r2, #32
 800d5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e029      	b.n	800d648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5f4:	f7fc face 	bl	8009b94 <HAL_GetTick>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	429a      	cmp	r2, r3
 800d602:	d302      	bcc.n	800d60a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d116      	bne.n	800d638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2220      	movs	r2, #32
 800d614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d624:	f043 0220 	orr.w	r2, r3, #32
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e007      	b.n	800d648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d642:	2b40      	cmp	r3, #64	@ 0x40
 800d644:	d1b5      	bne.n	800d5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d666:	d11b      	bne.n	800d6a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2220      	movs	r2, #32
 800d67c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d68c:	f043 0204 	orr.w	r2, r3, #4
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e000      	b.n	800d6a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	370c      	adds	r7, #12
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d6ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6b0:	b08f      	sub	sp, #60	@ 0x3c
 800d6b2:	af0a      	add	r7, sp, #40	@ 0x28
 800d6b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d101      	bne.n	800d6c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e10f      	b.n	800d8e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d106      	bne.n	800d6e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f00b fe9c 	bl	8019418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d102      	bne.n	800d6fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f004 ff2b 	bl	801255a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	603b      	str	r3, [r7, #0]
 800d70a:	687e      	ldr	r6, [r7, #4]
 800d70c:	466d      	mov	r5, sp
 800d70e:	f106 0410 	add.w	r4, r6, #16
 800d712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d71a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d71e:	e885 0003 	stmia.w	r5, {r0, r1}
 800d722:	1d33      	adds	r3, r6, #4
 800d724:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d726:	6838      	ldr	r0, [r7, #0]
 800d728:	f004 fe02 	bl	8012330 <USB_CoreInit>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d005      	beq.n	800d73e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2202      	movs	r2, #2
 800d736:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e0d0      	b.n	800d8e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2100      	movs	r1, #0
 800d744:	4618      	mov	r0, r3
 800d746:	f004 ff19 	bl	801257c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d74a:	2300      	movs	r3, #0
 800d74c:	73fb      	strb	r3, [r7, #15]
 800d74e:	e04a      	b.n	800d7e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d750:	7bfa      	ldrb	r2, [r7, #15]
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4613      	mov	r3, r2
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	440b      	add	r3, r1
 800d75e:	333d      	adds	r3, #61	@ 0x3d
 800d760:	2201      	movs	r2, #1
 800d762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d764:	7bfa      	ldrb	r2, [r7, #15]
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	4613      	mov	r3, r2
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	4413      	add	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	440b      	add	r3, r1
 800d772:	333c      	adds	r3, #60	@ 0x3c
 800d774:	7bfa      	ldrb	r2, [r7, #15]
 800d776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d778:	7bfa      	ldrb	r2, [r7, #15]
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	b298      	uxth	r0, r3
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	4413      	add	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	440b      	add	r3, r1
 800d78a:	3344      	adds	r3, #68	@ 0x44
 800d78c:	4602      	mov	r2, r0
 800d78e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d790:	7bfa      	ldrb	r2, [r7, #15]
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	4413      	add	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	440b      	add	r3, r1
 800d79e:	3340      	adds	r3, #64	@ 0x40
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d7a4:	7bfa      	ldrb	r2, [r7, #15]
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	4413      	add	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3348      	adds	r3, #72	@ 0x48
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d7b8:	7bfa      	ldrb	r2, [r7, #15]
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	440b      	add	r3, r1
 800d7c6:	334c      	adds	r3, #76	@ 0x4c
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d7cc:	7bfa      	ldrb	r2, [r7, #15]
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	4413      	add	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	440b      	add	r3, r1
 800d7da:	3354      	adds	r3, #84	@ 0x54
 800d7dc:	2200      	movs	r2, #0
 800d7de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	73fb      	strb	r3, [r7, #15]
 800d7e6:	7bfa      	ldrb	r2, [r7, #15]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d3af      	bcc.n	800d750 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	73fb      	strb	r3, [r7, #15]
 800d7f4:	e044      	b.n	800d880 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d7f6:	7bfa      	ldrb	r2, [r7, #15]
 800d7f8:	6879      	ldr	r1, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	00db      	lsls	r3, r3, #3
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	440b      	add	r3, r1
 800d804:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800d808:	2200      	movs	r2, #0
 800d80a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d80c:	7bfa      	ldrb	r2, [r7, #15]
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	4613      	mov	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	440b      	add	r3, r1
 800d81a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800d81e:	7bfa      	ldrb	r2, [r7, #15]
 800d820:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d822:	7bfa      	ldrb	r2, [r7, #15]
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	440b      	add	r3, r1
 800d830:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800d834:	2200      	movs	r2, #0
 800d836:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d838:	7bfa      	ldrb	r2, [r7, #15]
 800d83a:	6879      	ldr	r1, [r7, #4]
 800d83c:	4613      	mov	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	4413      	add	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	440b      	add	r3, r1
 800d846:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d84e:	7bfa      	ldrb	r2, [r7, #15]
 800d850:	6879      	ldr	r1, [r7, #4]
 800d852:	4613      	mov	r3, r2
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	4413      	add	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	440b      	add	r3, r1
 800d85c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d864:	7bfa      	ldrb	r2, [r7, #15]
 800d866:	6879      	ldr	r1, [r7, #4]
 800d868:	4613      	mov	r3, r2
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	4413      	add	r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	440b      	add	r3, r1
 800d872:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	3301      	adds	r3, #1
 800d87e:	73fb      	strb	r3, [r7, #15]
 800d880:	7bfa      	ldrb	r2, [r7, #15]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	429a      	cmp	r2, r3
 800d888:	d3b5      	bcc.n	800d7f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	603b      	str	r3, [r7, #0]
 800d890:	687e      	ldr	r6, [r7, #4]
 800d892:	466d      	mov	r5, sp
 800d894:	f106 0410 	add.w	r4, r6, #16
 800d898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d89a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d89c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d89e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d8a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d8a4:	e885 0003 	stmia.w	r5, {r0, r1}
 800d8a8:	1d33      	adds	r3, r6, #4
 800d8aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8ac:	6838      	ldr	r0, [r7, #0]
 800d8ae:	f004 feb1 	bl	8012614 <USB_DevInit>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d005      	beq.n	800d8c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e00d      	b.n	800d8e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f006 f800 	bl	80138de <USB_DevDisconnect>

  return HAL_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d101      	bne.n	800d904 <HAL_PCD_Start+0x1c>
 800d900:	2302      	movs	r3, #2
 800d902:	e020      	b.n	800d946 <HAL_PCD_Start+0x5e>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d910:	2b01      	cmp	r3, #1
 800d912:	d109      	bne.n	800d928 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d005      	beq.n	800d928 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d920:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f004 fe03 	bl	8012538 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4618      	mov	r0, r3
 800d938:	f005 ffb0 	bl	801389c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d94e:	b590      	push	{r4, r7, lr}
 800d950:	b08d      	sub	sp, #52	@ 0x34
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4618      	mov	r0, r3
 800d966:	f006 f86e 	bl	8013a46 <USB_GetMode>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 848a 	bne.w	800e286 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f005 ffd2 	bl	8013920 <USB_ReadInterrupts>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f000 8480 	beq.w	800e284 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	0a1b      	lsrs	r3, r3, #8
 800d98e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f005 ffbf 	bl	8013920 <USB_ReadInterrupts>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	f003 0302 	and.w	r3, r3, #2
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d107      	bne.n	800d9bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	695a      	ldr	r2, [r3, #20]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f002 0202 	and.w	r2, r2, #2
 800d9ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f005 ffad 	bl	8013920 <USB_ReadInterrupts>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	f003 0310 	and.w	r3, r3, #16
 800d9cc:	2b10      	cmp	r3, #16
 800d9ce:	d161      	bne.n	800da94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f022 0210 	bic.w	r2, r2, #16
 800d9de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
 800d9e2:	6a1b      	ldr	r3, [r3, #32]
 800d9e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	f003 020f 	and.w	r2, r3, #15
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	4413      	add	r3, r2
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	3304      	adds	r3, #4
 800d9fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	0c5b      	lsrs	r3, r3, #17
 800da04:	f003 030f 	and.w	r3, r3, #15
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d124      	bne.n	800da56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800da12:	4013      	ands	r3, r2
 800da14:	2b00      	cmp	r3, #0
 800da16:	d035      	beq.n	800da84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	091b      	lsrs	r3, r3, #4
 800da20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800da22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da26:	b29b      	uxth	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	6a38      	ldr	r0, [r7, #32]
 800da2c:	f005 fde4 	bl	80135f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	691a      	ldr	r2, [r3, #16]
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	091b      	lsrs	r3, r3, #4
 800da38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da3c:	441a      	add	r2, r3
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	6a1a      	ldr	r2, [r3, #32]
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	091b      	lsrs	r3, r3, #4
 800da4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da4e:	441a      	add	r2, r3
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	621a      	str	r2, [r3, #32]
 800da54:	e016      	b.n	800da84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	0c5b      	lsrs	r3, r3, #17
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	2b06      	cmp	r3, #6
 800da60:	d110      	bne.n	800da84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800da68:	2208      	movs	r2, #8
 800da6a:	4619      	mov	r1, r3
 800da6c:	6a38      	ldr	r0, [r7, #32]
 800da6e:	f005 fdc3 	bl	80135f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	6a1a      	ldr	r2, [r3, #32]
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	091b      	lsrs	r3, r3, #4
 800da7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da7e:	441a      	add	r2, r3
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	699a      	ldr	r2, [r3, #24]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f042 0210 	orr.w	r2, r2, #16
 800da92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f005 ff41 	bl	8013920 <USB_ReadInterrupts>
 800da9e:	4603      	mov	r3, r0
 800daa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800daa4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800daa8:	f040 80a7 	bne.w	800dbfa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800daac:	2300      	movs	r3, #0
 800daae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f005 ff46 	bl	8013946 <USB_ReadDevAllOutEpInterrupt>
 800daba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800dabc:	e099      	b.n	800dbf2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800dabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f000 808e 	beq.w	800dbe6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad0:	b2d2      	uxtb	r2, r2
 800dad2:	4611      	mov	r1, r2
 800dad4:	4618      	mov	r0, r3
 800dad6:	f005 ff6a 	bl	80139ae <USB_ReadDevOutEPInterrupt>
 800dada:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00c      	beq.n	800db00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800dae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae8:	015a      	lsls	r2, r3, #5
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	4413      	add	r3, r2
 800daee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daf2:	461a      	mov	r2, r3
 800daf4:	2301      	movs	r3, #1
 800daf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800daf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fec2 	bl	800e884 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	f003 0308 	and.w	r3, r3, #8
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00c      	beq.n	800db24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800db0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0c:	015a      	lsls	r2, r3, #5
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	4413      	add	r3, r2
 800db12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db16:	461a      	mov	r2, r3
 800db18:	2308      	movs	r3, #8
 800db1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800db1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 ff98 	bl	800ea54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	f003 0310 	and.w	r3, r3, #16
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d008      	beq.n	800db40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800db2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db30:	015a      	lsls	r2, r3, #5
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	4413      	add	r3, r2
 800db36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db3a:	461a      	mov	r2, r3
 800db3c:	2310      	movs	r3, #16
 800db3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	f003 0302 	and.w	r3, r3, #2
 800db46:	2b00      	cmp	r3, #0
 800db48:	d030      	beq.n	800dbac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db52:	2b80      	cmp	r3, #128	@ 0x80
 800db54:	d109      	bne.n	800db6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	69fa      	ldr	r2, [r7, #28]
 800db60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800db68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800db6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db6c:	4613      	mov	r3, r2
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	4413      	add	r3, r2
 800db7c:	3304      	adds	r3, #4
 800db7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	78db      	ldrb	r3, [r3, #3]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d108      	bne.n	800db9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2200      	movs	r2, #0
 800db8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800db8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db90:	b2db      	uxtb	r3, r3
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f00b fd45 	bl	8019624 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800db9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dba6:	461a      	mov	r2, r3
 800dba8:	2302      	movs	r3, #2
 800dbaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	f003 0320 	and.w	r3, r3, #32
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d008      	beq.n	800dbc8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	2320      	movs	r3, #32
 800dbc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d009      	beq.n	800dbe6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd4:	015a      	lsls	r2, r3, #5
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	4413      	add	r3, r2
 800dbda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dbe4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe8:	3301      	adds	r3, #1
 800dbea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	085b      	lsrs	r3, r3, #1
 800dbf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800dbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f47f af62 	bne.w	800dabe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f005 fe8e 	bl	8013920 <USB_ReadInterrupts>
 800dc04:	4603      	mov	r3, r0
 800dc06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc0e:	f040 80db 	bne.w	800ddc8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f005 feaf 	bl	801397a <USB_ReadDevAllInEpInterrupt>
 800dc1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800dc22:	e0cd      	b.n	800ddc0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800dc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc26:	f003 0301 	and.w	r3, r3, #1
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f000 80c2 	beq.w	800ddb4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc36:	b2d2      	uxtb	r2, r2
 800dc38:	4611      	mov	r1, r2
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f005 fed5 	bl	80139ea <USB_ReadDevInEPInterrupt>
 800dc40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d057      	beq.n	800dcfc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4e:	f003 030f 	and.w	r3, r3, #15
 800dc52:	2201      	movs	r2, #1
 800dc54:	fa02 f303 	lsl.w	r3, r2, r3
 800dc58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	43db      	mvns	r3, r3
 800dc66:	69f9      	ldr	r1, [r7, #28]
 800dc68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc72:	015a      	lsls	r2, r3, #5
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	4413      	add	r3, r2
 800dc78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	2301      	movs	r3, #1
 800dc80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d132      	bne.n	800dcf0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800dc8a:	6879      	ldr	r1, [r7, #4]
 800dc8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc8e:	4613      	mov	r3, r2
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	4413      	add	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	440b      	add	r3, r1
 800dc98:	334c      	adds	r3, #76	@ 0x4c
 800dc9a:	6819      	ldr	r1, [r3, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dca0:	4613      	mov	r3, r2
 800dca2:	00db      	lsls	r3, r3, #3
 800dca4:	4413      	add	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4403      	add	r3, r0
 800dcaa:	3348      	adds	r3, #72	@ 0x48
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4419      	add	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	4413      	add	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4403      	add	r3, r0
 800dcbe:	334c      	adds	r3, #76	@ 0x4c
 800dcc0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d113      	bne.n	800dcf0 <HAL_PCD_IRQHandler+0x3a2>
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dccc:	4613      	mov	r3, r2
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	440b      	add	r3, r1
 800dcd6:	3354      	adds	r3, #84	@ 0x54
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d108      	bne.n	800dcf0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6818      	ldr	r0, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800dce8:	461a      	mov	r2, r3
 800dcea:	2101      	movs	r1, #1
 800dcec:	f005 fedc 	bl	8013aa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f00b fc0f 	bl	801951a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	f003 0308 	and.w	r3, r3, #8
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d008      	beq.n	800dd18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800dd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd08:	015a      	lsls	r2, r3, #5
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd12:	461a      	mov	r2, r3
 800dd14:	2308      	movs	r3, #8
 800dd16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f003 0310 	and.w	r3, r3, #16
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d008      	beq.n	800dd34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800dd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd24:	015a      	lsls	r2, r3, #5
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	4413      	add	r3, r2
 800dd2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd2e:	461a      	mov	r2, r3
 800dd30:	2310      	movs	r3, #16
 800dd32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d008      	beq.n	800dd50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	2340      	movs	r3, #64	@ 0x40
 800dd4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	f003 0302 	and.w	r3, r3, #2
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d023      	beq.n	800dda2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800dd5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd5c:	6a38      	ldr	r0, [r7, #32]
 800dd5e:	f004 fdbd 	bl	80128dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800dd62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd64:	4613      	mov	r3, r2
 800dd66:	00db      	lsls	r3, r3, #3
 800dd68:	4413      	add	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	3338      	adds	r3, #56	@ 0x38
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4413      	add	r3, r2
 800dd72:	3304      	adds	r3, #4
 800dd74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	78db      	ldrb	r3, [r3, #3]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d108      	bne.n	800dd90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2200      	movs	r2, #0
 800dd82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800dd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f00b fc5c 	bl	8019648 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800dd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd92:	015a      	lsls	r2, r3, #5
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	4413      	add	r3, r2
 800dd98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	2302      	movs	r3, #2
 800dda0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d003      	beq.n	800ddb4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ddac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fcdb 	bl	800e76a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ddba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddbc:	085b      	lsrs	r3, r3, #1
 800ddbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ddc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f47f af2e 	bne.w	800dc24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f005 fda7 	bl	8013920 <USB_ReadInterrupts>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ddd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dddc:	d122      	bne.n	800de24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	69fa      	ldr	r2, [r7, #28]
 800dde8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ddec:	f023 0301 	bic.w	r3, r3, #1
 800ddf0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d108      	bne.n	800de0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800de04:	2100      	movs	r1, #0
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fec2 	bl	800eb90 <HAL_PCDEx_LPM_Callback>
 800de0c:	e002      	b.n	800de14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f00b fbfa 	bl	8019608 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	695a      	ldr	r2, [r3, #20]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800de22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4618      	mov	r0, r3
 800de2a:	f005 fd79 	bl	8013920 <USB_ReadInterrupts>
 800de2e:	4603      	mov	r3, r0
 800de30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de38:	d112      	bne.n	800de60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b01      	cmp	r3, #1
 800de48:	d102      	bne.n	800de50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f00b fbb6 	bl	80195bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	695a      	ldr	r2, [r3, #20]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800de5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4618      	mov	r0, r3
 800de66:	f005 fd5b 	bl	8013920 <USB_ReadInterrupts>
 800de6a:	4603      	mov	r3, r0
 800de6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800de70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de74:	f040 80b7 	bne.w	800dfe6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	69fa      	ldr	r2, [r7, #28]
 800de82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de86:	f023 0301 	bic.w	r3, r3, #1
 800de8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2110      	movs	r1, #16
 800de92:	4618      	mov	r0, r3
 800de94:	f004 fd22 	bl	80128dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de98:	2300      	movs	r3, #0
 800de9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de9c:	e046      	b.n	800df2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800de9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea0:	015a      	lsls	r2, r3, #5
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	4413      	add	r3, r2
 800dea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deaa:	461a      	mov	r2, r3
 800deac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800deb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800deb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb4:	015a      	lsls	r2, r3, #5
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	4413      	add	r3, r2
 800deba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dec2:	0151      	lsls	r1, r2, #5
 800dec4:	69fa      	ldr	r2, [r7, #28]
 800dec6:	440a      	add	r2, r1
 800dec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800decc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ded0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ded2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded4:	015a      	lsls	r2, r3, #5
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	4413      	add	r3, r2
 800deda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dede:	461a      	mov	r2, r3
 800dee0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dee4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	4413      	add	r3, r2
 800deee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800def6:	0151      	lsls	r1, r2, #5
 800def8:	69fa      	ldr	r2, [r7, #28]
 800defa:	440a      	add	r2, r1
 800defc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800df04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800df06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df08:	015a      	lsls	r2, r3, #5
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	4413      	add	r3, r2
 800df0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df16:	0151      	lsls	r1, r2, #5
 800df18:	69fa      	ldr	r2, [r7, #28]
 800df1a:	440a      	add	r2, r1
 800df1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800df24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df28:	3301      	adds	r3, #1
 800df2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df32:	429a      	cmp	r2, r3
 800df34:	d3b3      	bcc.n	800de9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df3c:	69db      	ldr	r3, [r3, #28]
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df44:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800df48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d016      	beq.n	800df80 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df5c:	69fa      	ldr	r2, [r7, #28]
 800df5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df62:	f043 030b 	orr.w	r3, r3, #11
 800df66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df78:	f043 030b 	orr.w	r3, r3, #11
 800df7c:	6453      	str	r3, [r2, #68]	@ 0x44
 800df7e:	e015      	b.n	800dfac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	69fa      	ldr	r2, [r7, #28]
 800df8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800df92:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800df96:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfa6:	f043 030b 	orr.w	r3, r3, #11
 800dfaa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	69fa      	ldr	r2, [r7, #28]
 800dfb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dfbe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6818      	ldr	r0, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f005 fd69 	bl	8013aa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	695a      	ldr	r2, [r3, #20]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800dfe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f005 fc98 	bl	8013920 <USB_ReadInterrupts>
 800dff0:	4603      	mov	r3, r0
 800dff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dffa:	d124      	bne.n	800e046 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4618      	mov	r0, r3
 800e002:	f005 fd2e 	bl	8013a62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f004 fce3 	bl	80129d6 <USB_GetDevSpeed>
 800e010:	4603      	mov	r3, r0
 800e012:	461a      	mov	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681c      	ldr	r4, [r3, #0]
 800e01c:	f001 f9e8 	bl	800f3f0 <HAL_RCC_GetHCLKFreq>
 800e020:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e026:	b2db      	uxtb	r3, r3
 800e028:	461a      	mov	r2, r3
 800e02a:	4620      	mov	r0, r4
 800e02c:	f004 f9e2 	bl	80123f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f00b fa9a 	bl	801956a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	695a      	ldr	r2, [r3, #20]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800e044:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f005 fc68 	bl	8013920 <USB_ReadInterrupts>
 800e050:	4603      	mov	r3, r0
 800e052:	f003 0308 	and.w	r3, r3, #8
 800e056:	2b08      	cmp	r3, #8
 800e058:	d10a      	bne.n	800e070 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f00b fa77 	bl	801954e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	695a      	ldr	r2, [r3, #20]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f002 0208 	and.w	r2, r2, #8
 800e06e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4618      	mov	r0, r3
 800e076:	f005 fc53 	bl	8013920 <USB_ReadInterrupts>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e080:	2b80      	cmp	r3, #128	@ 0x80
 800e082:	d122      	bne.n	800e0ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e090:	2301      	movs	r3, #1
 800e092:	627b      	str	r3, [r7, #36]	@ 0x24
 800e094:	e014      	b.n	800e0c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e096:	6879      	ldr	r1, [r7, #4]
 800e098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e09a:	4613      	mov	r3, r2
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	4413      	add	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	440b      	add	r3, r1
 800e0a4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d105      	bne.n	800e0ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fb27 	bl	800e708 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0bc:	3301      	adds	r3, #1
 800e0be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d3e5      	bcc.n	800e096 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f005 fc26 	bl	8013920 <USB_ReadInterrupts>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0de:	d13b      	bne.n	800e158 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0e4:	e02b      	b.n	800e13e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e8:	015a      	lsls	r2, r3, #5
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e0f6:	6879      	ldr	r1, [r7, #4]
 800e0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	00db      	lsls	r3, r3, #3
 800e0fe:	4413      	add	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	440b      	add	r3, r1
 800e104:	3340      	adds	r3, #64	@ 0x40
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d115      	bne.n	800e138 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e10c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e10e:	2b00      	cmp	r3, #0
 800e110:	da12      	bge.n	800e138 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e116:	4613      	mov	r3, r2
 800e118:	00db      	lsls	r3, r3, #3
 800e11a:	4413      	add	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	440b      	add	r3, r1
 800e120:	333f      	adds	r3, #63	@ 0x3f
 800e122:	2201      	movs	r2, #1
 800e124:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fae8 	bl	800e708 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	3301      	adds	r3, #1
 800e13c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e144:	429a      	cmp	r2, r3
 800e146:	d3ce      	bcc.n	800e0e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	695a      	ldr	r2, [r3, #20]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800e156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f005 fbdf 	bl	8013920 <USB_ReadInterrupts>
 800e162:	4603      	mov	r3, r0
 800e164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e16c:	d155      	bne.n	800e21a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e16e:	2301      	movs	r3, #1
 800e170:	627b      	str	r3, [r7, #36]	@ 0x24
 800e172:	e045      	b.n	800e200 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e176:	015a      	lsls	r2, r3, #5
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	4413      	add	r3, r2
 800e17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e188:	4613      	mov	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	4413      	add	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	440b      	add	r3, r1
 800e192:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d12e      	bne.n	800e1fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e19c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	da2b      	bge.n	800e1fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800e1ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d121      	bne.n	800e1fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e1b6:	6879      	ldr	r1, [r7, #4]
 800e1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	4413      	add	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	440b      	add	r3, r1
 800e1c4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10a      	bne.n	800e1fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e1f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e1f6:	6053      	str	r3, [r2, #4]
            break;
 800e1f8:	e007      	b.n	800e20a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e206:	429a      	cmp	r2, r3
 800e208:	d3b4      	bcc.n	800e174 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	695a      	ldr	r2, [r3, #20]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800e218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4618      	mov	r0, r3
 800e220:	f005 fb7e 	bl	8013920 <USB_ReadInterrupts>
 800e224:	4603      	mov	r3, r0
 800e226:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e22a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e22e:	d10a      	bne.n	800e246 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f00b fa1b 	bl	801966c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	695a      	ldr	r2, [r3, #20]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800e244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f005 fb68 	bl	8013920 <USB_ReadInterrupts>
 800e250:	4603      	mov	r3, r0
 800e252:	f003 0304 	and.w	r3, r3, #4
 800e256:	2b04      	cmp	r3, #4
 800e258:	d115      	bne.n	800e286 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f00b fa0b 	bl	8019688 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	6859      	ldr	r1, [r3, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	69ba      	ldr	r2, [r7, #24]
 800e27e:	430a      	orrs	r2, r1
 800e280:	605a      	str	r2, [r3, #4]
 800e282:	e000      	b.n	800e286 <HAL_PCD_IRQHandler+0x938>
      return;
 800e284:	bf00      	nop
    }
  }
}
 800e286:	3734      	adds	r7, #52	@ 0x34
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd90      	pop	{r4, r7, pc}

0800e28c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	460b      	mov	r3, r1
 800e296:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d101      	bne.n	800e2a6 <HAL_PCD_SetAddress+0x1a>
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	e013      	b.n	800e2ce <HAL_PCD_SetAddress+0x42>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	78fa      	ldrb	r2, [r7, #3]
 800e2b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	78fa      	ldrb	r2, [r7, #3]
 800e2bc:	4611      	mov	r1, r2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f005 fac6 	bl	8013850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	4608      	mov	r0, r1
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	70fb      	strb	r3, [r7, #3]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	803b      	strh	r3, [r7, #0]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e2f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	da0f      	bge.n	800e31c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2fc:	78fb      	ldrb	r3, [r7, #3]
 800e2fe:	f003 020f 	and.w	r2, r3, #15
 800e302:	4613      	mov	r3, r2
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	3338      	adds	r3, #56	@ 0x38
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	4413      	add	r3, r2
 800e310:	3304      	adds	r3, #4
 800e312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2201      	movs	r2, #1
 800e318:	705a      	strb	r2, [r3, #1]
 800e31a:	e00f      	b.n	800e33c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e31c:	78fb      	ldrb	r3, [r7, #3]
 800e31e:	f003 020f 	and.w	r2, r3, #15
 800e322:	4613      	mov	r3, r2
 800e324:	00db      	lsls	r3, r3, #3
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	4413      	add	r3, r2
 800e332:	3304      	adds	r3, #4
 800e334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	f003 030f 	and.w	r3, r3, #15
 800e342:	b2da      	uxtb	r2, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e348:	883a      	ldrh	r2, [r7, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	78ba      	ldrb	r2, [r7, #2]
 800e352:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	785b      	ldrb	r3, [r3, #1]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d004      	beq.n	800e366 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	461a      	mov	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e366:	78bb      	ldrb	r3, [r7, #2]
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d102      	bne.n	800e372 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2200      	movs	r2, #0
 800e370:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d101      	bne.n	800e380 <HAL_PCD_EP_Open+0xaa>
 800e37c:	2302      	movs	r3, #2
 800e37e:	e00e      	b.n	800e39e <HAL_PCD_EP_Open+0xc8>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68f9      	ldr	r1, [r7, #12]
 800e38e:	4618      	mov	r0, r3
 800e390:	f004 fb46 	bl	8012a20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800e39c:	7afb      	ldrb	r3, [r7, #11]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e3b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	da0f      	bge.n	800e3da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3ba:	78fb      	ldrb	r3, [r7, #3]
 800e3bc:	f003 020f 	and.w	r2, r3, #15
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	00db      	lsls	r3, r3, #3
 800e3c4:	4413      	add	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	3338      	adds	r3, #56	@ 0x38
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	705a      	strb	r2, [r3, #1]
 800e3d8:	e00f      	b.n	800e3fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	f003 020f 	and.w	r2, r3, #15
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	4413      	add	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e3fa:	78fb      	ldrb	r3, [r7, #3]
 800e3fc:	f003 030f 	and.w	r3, r3, #15
 800e400:	b2da      	uxtb	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d101      	bne.n	800e414 <HAL_PCD_EP_Close+0x6e>
 800e410:	2302      	movs	r3, #2
 800e412:	e00e      	b.n	800e432 <HAL_PCD_EP_Close+0x8c>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	68f9      	ldr	r1, [r7, #12]
 800e422:	4618      	mov	r0, r3
 800e424:	f004 fb84 	bl	8012b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b086      	sub	sp, #24
 800e43e:	af00      	add	r7, sp, #0
 800e440:	60f8      	str	r0, [r7, #12]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
 800e446:	460b      	mov	r3, r1
 800e448:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	f003 020f 	and.w	r2, r3, #15
 800e450:	4613      	mov	r3, r2
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	4413      	add	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	4413      	add	r3, r2
 800e460:	3304      	adds	r3, #4
 800e462:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	683a      	ldr	r2, [r7, #0]
 800e46e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	2200      	movs	r2, #0
 800e474:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	2200      	movs	r2, #0
 800e47a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e47c:	7afb      	ldrb	r3, [r7, #11]
 800e47e:	f003 030f 	and.w	r3, r3, #15
 800e482:	b2da      	uxtb	r2, r3
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d102      	bne.n	800e496 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e496:	7afb      	ldrb	r3, [r7, #11]
 800e498:	f003 030f 	and.w	r3, r3, #15
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d109      	bne.n	800e4b4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6818      	ldr	r0, [r3, #0]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	6979      	ldr	r1, [r7, #20]
 800e4ae:	f004 fe63 	bl	8013178 <USB_EP0StartXfer>
 800e4b2:	e008      	b.n	800e4c6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	461a      	mov	r2, r3
 800e4c0:	6979      	ldr	r1, [r7, #20]
 800e4c2:	f004 fc11 	bl	8012ce8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e4dc:	78fb      	ldrb	r3, [r7, #3]
 800e4de:	f003 020f 	and.w	r2, r3, #15
 800e4e2:	6879      	ldr	r1, [r7, #4]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	4413      	add	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	440b      	add	r3, r1
 800e4ee:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e4f2:	681b      	ldr	r3, [r3, #0]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	607a      	str	r2, [r7, #4]
 800e50a:	603b      	str	r3, [r7, #0]
 800e50c:	460b      	mov	r3, r1
 800e50e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e510:	7afb      	ldrb	r3, [r7, #11]
 800e512:	f003 020f 	and.w	r2, r3, #15
 800e516:	4613      	mov	r3, r2
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	4413      	add	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	3338      	adds	r3, #56	@ 0x38
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	4413      	add	r3, r2
 800e524:	3304      	adds	r3, #4
 800e526:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	2200      	movs	r2, #0
 800e538:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2201      	movs	r2, #1
 800e53e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e540:	7afb      	ldrb	r3, [r7, #11]
 800e542:	f003 030f 	and.w	r3, r3, #15
 800e546:	b2da      	uxtb	r2, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d102      	bne.n	800e55a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e55a:	7afb      	ldrb	r3, [r7, #11]
 800e55c:	f003 030f 	and.w	r3, r3, #15
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6818      	ldr	r0, [r3, #0]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	461a      	mov	r2, r3
 800e570:	6979      	ldr	r1, [r7, #20]
 800e572:	f004 fe01 	bl	8013178 <USB_EP0StartXfer>
 800e576:	e008      	b.n	800e58a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6818      	ldr	r0, [r3, #0]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	461a      	mov	r2, r3
 800e584:	6979      	ldr	r1, [r7, #20]
 800e586:	f004 fbaf 	bl	8012ce8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	460b      	mov	r3, r1
 800e59e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e5a0:	78fb      	ldrb	r3, [r7, #3]
 800e5a2:	f003 020f 	and.w	r2, r3, #15
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d901      	bls.n	800e5b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e050      	b.n	800e654 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e5b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	da0f      	bge.n	800e5da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5ba:	78fb      	ldrb	r3, [r7, #3]
 800e5bc:	f003 020f 	and.w	r2, r3, #15
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	00db      	lsls	r3, r3, #3
 800e5c4:	4413      	add	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	3338      	adds	r3, #56	@ 0x38
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	705a      	strb	r2, [r3, #1]
 800e5d8:	e00d      	b.n	800e5f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e5da:	78fa      	ldrb	r2, [r7, #3]
 800e5dc:	4613      	mov	r3, r2
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	4413      	add	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5fc:	78fb      	ldrb	r3, [r7, #3]
 800e5fe:	f003 030f 	and.w	r3, r3, #15
 800e602:	b2da      	uxtb	r2, r3
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d101      	bne.n	800e616 <HAL_PCD_EP_SetStall+0x82>
 800e612:	2302      	movs	r3, #2
 800e614:	e01e      	b.n	800e654 <HAL_PCD_EP_SetStall+0xc0>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68f9      	ldr	r1, [r7, #12]
 800e624:	4618      	mov	r0, r3
 800e626:	f005 f83f 	bl	80136a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e62a:	78fb      	ldrb	r3, [r7, #3]
 800e62c:	f003 030f 	and.w	r3, r3, #15
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10a      	bne.n	800e64a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6818      	ldr	r0, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	b2d9      	uxtb	r1, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800e644:	461a      	mov	r2, r3
 800e646:	f005 fa2f 	bl	8013aa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e668:	78fb      	ldrb	r3, [r7, #3]
 800e66a:	f003 020f 	and.w	r2, r3, #15
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	429a      	cmp	r2, r3
 800e674:	d901      	bls.n	800e67a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	e042      	b.n	800e700 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e67a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	da0f      	bge.n	800e6a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e682:	78fb      	ldrb	r3, [r7, #3]
 800e684:	f003 020f 	and.w	r2, r3, #15
 800e688:	4613      	mov	r3, r2
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	4413      	add	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	3338      	adds	r3, #56	@ 0x38
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	4413      	add	r3, r2
 800e696:	3304      	adds	r3, #4
 800e698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	705a      	strb	r2, [r3, #1]
 800e6a0:	e00f      	b.n	800e6c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e6a2:	78fb      	ldrb	r3, [r7, #3]
 800e6a4:	f003 020f 	and.w	r2, r3, #15
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e6c8:	78fb      	ldrb	r3, [r7, #3]
 800e6ca:	f003 030f 	and.w	r3, r3, #15
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d101      	bne.n	800e6e2 <HAL_PCD_EP_ClrStall+0x86>
 800e6de:	2302      	movs	r3, #2
 800e6e0:	e00e      	b.n	800e700 <HAL_PCD_EP_ClrStall+0xa4>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	68f9      	ldr	r1, [r7, #12]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f005 f847 	bl	8013784 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	da0c      	bge.n	800e736 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	f003 020f 	and.w	r2, r3, #15
 800e722:	4613      	mov	r3, r2
 800e724:	00db      	lsls	r3, r3, #3
 800e726:	4413      	add	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	3338      	adds	r3, #56	@ 0x38
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4413      	add	r3, r2
 800e730:	3304      	adds	r3, #4
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e00c      	b.n	800e750 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e736:	78fb      	ldrb	r3, [r7, #3]
 800e738:	f003 020f 	and.w	r2, r3, #15
 800e73c:	4613      	mov	r3, r2
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	4413      	add	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	4413      	add	r3, r2
 800e74c:	3304      	adds	r3, #4
 800e74e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68f9      	ldr	r1, [r7, #12]
 800e756:	4618      	mov	r0, r3
 800e758:	f004 fe66 	bl	8013428 <USB_EPStopXfer>
 800e75c:	4603      	mov	r3, r0
 800e75e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e760:	7afb      	ldrb	r3, [r7, #11]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b08a      	sub	sp, #40	@ 0x28
 800e76e:	af02      	add	r7, sp, #8
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e77e:	683a      	ldr	r2, [r7, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	3338      	adds	r3, #56	@ 0x38
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	4413      	add	r3, r2
 800e78e:	3304      	adds	r3, #4
 800e790:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6a1a      	ldr	r2, [r3, #32]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d901      	bls.n	800e7a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e06c      	b.n	800e87c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	699a      	ldr	r2, [r3, #24]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	69fa      	ldr	r2, [r7, #28]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d902      	bls.n	800e7be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	3303      	adds	r3, #3
 800e7c2:	089b      	lsrs	r3, r3, #2
 800e7c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e7c6:	e02b      	b.n	800e820 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	699a      	ldr	r2, [r3, #24]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6a1b      	ldr	r3, [r3, #32]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	69fa      	ldr	r2, [r7, #28]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d902      	bls.n	800e7e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	3303      	adds	r3, #3
 800e7e8:	089b      	lsrs	r3, r3, #2
 800e7ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6919      	ldr	r1, [r3, #16]
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	4603      	mov	r3, r0
 800e802:	6978      	ldr	r0, [r7, #20]
 800e804:	f004 feba 	bl	801357c <USB_WritePacket>

    ep->xfer_buff  += len;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	691a      	ldr	r2, [r3, #16]
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	441a      	add	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6a1a      	ldr	r2, [r3, #32]
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	441a      	add	r2, r3
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	015a      	lsls	r2, r3, #5
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	4413      	add	r3, r2
 800e828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e82c:	699b      	ldr	r3, [r3, #24]
 800e82e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e830:	69ba      	ldr	r2, [r7, #24]
 800e832:	429a      	cmp	r2, r3
 800e834:	d809      	bhi.n	800e84a <PCD_WriteEmptyTxFifo+0xe0>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6a1a      	ldr	r2, [r3, #32]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e83e:	429a      	cmp	r2, r3
 800e840:	d203      	bcs.n	800e84a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1be      	bne.n	800e7c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	699a      	ldr	r2, [r3, #24]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	429a      	cmp	r2, r3
 800e854:	d811      	bhi.n	800e87a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	f003 030f 	and.w	r3, r3, #15
 800e85c:	2201      	movs	r2, #1
 800e85e:	fa02 f303 	lsl.w	r3, r2, r3
 800e862:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e86a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	43db      	mvns	r3, r3
 800e870:	6939      	ldr	r1, [r7, #16]
 800e872:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e876:	4013      	ands	r3, r2
 800e878:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3720      	adds	r7, #32
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b088      	sub	sp, #32
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	333c      	adds	r3, #60	@ 0x3c
 800e89c:	3304      	adds	r3, #4
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	015a      	lsls	r2, r3, #5
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d17b      	bne.n	800e9b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f003 0308 	and.w	r3, r3, #8
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d015      	beq.n	800e8f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	4a61      	ldr	r2, [pc, #388]	@ (800ea4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	f240 80b9 	bls.w	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f000 80b3 	beq.w	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	015a      	lsls	r2, r3, #5
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e8ec:	6093      	str	r3, [r2, #8]
 800e8ee:	e0a7      	b.n	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d009      	beq.n	800e90e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	015a      	lsls	r2, r3, #5
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	4413      	add	r3, r2
 800e902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e906:	461a      	mov	r2, r3
 800e908:	2320      	movs	r3, #32
 800e90a:	6093      	str	r3, [r2, #8]
 800e90c:	e098      	b.n	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e914:	2b00      	cmp	r3, #0
 800e916:	f040 8093 	bne.w	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	4a4b      	ldr	r2, [pc, #300]	@ (800ea4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d90f      	bls.n	800e942 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00a      	beq.n	800e942 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	015a      	lsls	r2, r3, #5
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	4413      	add	r3, r2
 800e934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e938:	461a      	mov	r2, r3
 800e93a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e93e:	6093      	str	r3, [r2, #8]
 800e940:	e07e      	b.n	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	4613      	mov	r3, r2
 800e946:	00db      	lsls	r3, r3, #3
 800e948:	4413      	add	r3, r2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	4413      	add	r3, r2
 800e954:	3304      	adds	r3, #4
 800e956:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	69da      	ldr	r2, [r3, #28]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	0159      	lsls	r1, r3, #5
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	440b      	add	r3, r1
 800e964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d114      	bne.n	800e9a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	699b      	ldr	r3, [r3, #24]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d109      	bne.n	800e996 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6818      	ldr	r0, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800e98c:	461a      	mov	r2, r3
 800e98e:	2101      	movs	r1, #1
 800e990:	f005 f88a 	bl	8013aa8 <USB_EP0_OutStart>
 800e994:	e006      	b.n	800e9a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	691a      	ldr	r2, [r3, #16]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6a1b      	ldr	r3, [r3, #32]
 800e99e:	441a      	add	r2, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f00a fd9a 	bl	80194e4 <HAL_PCD_DataOutStageCallback>
 800e9b0:	e046      	b.n	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	4a26      	ldr	r2, [pc, #152]	@ (800ea50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d124      	bne.n	800ea04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00a      	beq.n	800e9da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e9d6:	6093      	str	r3, [r2, #8]
 800e9d8:	e032      	b.n	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f003 0320 	and.w	r3, r3, #32
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d008      	beq.n	800e9f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	015a      	lsls	r2, r3, #5
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	2320      	movs	r3, #32
 800e9f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f00a fd71 	bl	80194e4 <HAL_PCD_DataOutStageCallback>
 800ea02:	e01d      	b.n	800ea40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d114      	bne.n	800ea34 <PCD_EP_OutXfrComplete_int+0x1b0>
 800ea0a:	6879      	ldr	r1, [r7, #4]
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	00db      	lsls	r3, r3, #3
 800ea12:	4413      	add	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	440b      	add	r3, r1
 800ea18:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d108      	bne.n	800ea34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6818      	ldr	r0, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	2100      	movs	r1, #0
 800ea30:	f005 f83a 	bl	8013aa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f00a fd52 	bl	80194e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3720      	adds	r7, #32
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	4f54300a 	.word	0x4f54300a
 800ea50:	4f54310a 	.word	0x4f54310a

0800ea54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	333c      	adds	r3, #60	@ 0x3c
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	4a15      	ldr	r2, [pc, #84]	@ (800eadc <PCD_EP_OutSetupPacket_int+0x88>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d90e      	bls.n	800eaa8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d009      	beq.n	800eaa8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eaa6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f00a fd09 	bl	80194c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	4a0a      	ldr	r2, [pc, #40]	@ (800eadc <PCD_EP_OutSetupPacket_int+0x88>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d90c      	bls.n	800ead0 <PCD_EP_OutSetupPacket_int+0x7c>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d108      	bne.n	800ead0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6818      	ldr	r0, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eac8:	461a      	mov	r2, r3
 800eaca:	2101      	movs	r1, #1
 800eacc:	f004 ffec 	bl	8013aa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	4f54300a 	.word	0x4f54300a

0800eae0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
 800eaec:	4613      	mov	r3, r2
 800eaee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800eaf8:	78fb      	ldrb	r3, [r7, #3]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d107      	bne.n	800eb0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800eafe:	883b      	ldrh	r3, [r7, #0]
 800eb00:	0419      	lsls	r1, r3, #16
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	430a      	orrs	r2, r1
 800eb0a:	629a      	str	r2, [r3, #40]	@ 0x28
 800eb0c:	e028      	b.n	800eb60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb14:	0c1b      	lsrs	r3, r3, #16
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	4413      	add	r3, r2
 800eb1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	73fb      	strb	r3, [r7, #15]
 800eb20:	e00d      	b.n	800eb3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	3340      	adds	r3, #64	@ 0x40
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	0c1b      	lsrs	r3, r3, #16
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	4413      	add	r3, r2
 800eb36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800eb38:	7bfb      	ldrb	r3, [r7, #15]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	73fb      	strb	r3, [r7, #15]
 800eb3e:	7bfa      	ldrb	r2, [r7, #15]
 800eb40:	78fb      	ldrb	r3, [r7, #3]
 800eb42:	3b01      	subs	r3, #1
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d3ec      	bcc.n	800eb22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800eb48:	883b      	ldrh	r3, [r7, #0]
 800eb4a:	0418      	lsls	r0, r3, #16
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6819      	ldr	r1, [r3, #0]
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	4302      	orrs	r2, r0
 800eb58:	3340      	adds	r3, #64	@ 0x40
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	440b      	add	r3, r1
 800eb5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3714      	adds	r7, #20
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	460b      	mov	r3, r1
 800eb78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	887a      	ldrh	r2, [r7, #2]
 800eb80:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e267      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d075      	beq.n	800ecb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ebc6:	4b88      	ldr	r3, [pc, #544]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	f003 030c 	and.w	r3, r3, #12
 800ebce:	2b04      	cmp	r3, #4
 800ebd0:	d00c      	beq.n	800ebec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ebd2:	4b85      	ldr	r3, [pc, #532]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ebda:	2b08      	cmp	r3, #8
 800ebdc:	d112      	bne.n	800ec04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ebde:	4b82      	ldr	r3, [pc, #520]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ebe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ebea:	d10b      	bne.n	800ec04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebec:	4b7e      	ldr	r3, [pc, #504]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d05b      	beq.n	800ecb0 <HAL_RCC_OscConfig+0x108>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d157      	bne.n	800ecb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ec00:	2301      	movs	r3, #1
 800ec02:	e242      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec0c:	d106      	bne.n	800ec1c <HAL_RCC_OscConfig+0x74>
 800ec0e:	4b76      	ldr	r3, [pc, #472]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a75      	ldr	r2, [pc, #468]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	e01d      	b.n	800ec58 <HAL_RCC_OscConfig+0xb0>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ec24:	d10c      	bne.n	800ec40 <HAL_RCC_OscConfig+0x98>
 800ec26:	4b70      	ldr	r3, [pc, #448]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a6f      	ldr	r2, [pc, #444]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ec30:	6013      	str	r3, [r2, #0]
 800ec32:	4b6d      	ldr	r3, [pc, #436]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a6c      	ldr	r2, [pc, #432]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ec3c:	6013      	str	r3, [r2, #0]
 800ec3e:	e00b      	b.n	800ec58 <HAL_RCC_OscConfig+0xb0>
 800ec40:	4b69      	ldr	r3, [pc, #420]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a68      	ldr	r2, [pc, #416]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec4a:	6013      	str	r3, [r2, #0]
 800ec4c:	4b66      	ldr	r3, [pc, #408]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a65      	ldr	r2, [pc, #404]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ec56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d013      	beq.n	800ec88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec60:	f7fa ff98 	bl	8009b94 <HAL_GetTick>
 800ec64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec66:	e008      	b.n	800ec7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ec68:	f7fa ff94 	bl	8009b94 <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	2b64      	cmp	r3, #100	@ 0x64
 800ec74:	d901      	bls.n	800ec7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ec76:	2303      	movs	r3, #3
 800ec78:	e207      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec7a:	4b5b      	ldr	r3, [pc, #364]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0f0      	beq.n	800ec68 <HAL_RCC_OscConfig+0xc0>
 800ec86:	e014      	b.n	800ecb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec88:	f7fa ff84 	bl	8009b94 <HAL_GetTick>
 800ec8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ec8e:	e008      	b.n	800eca2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ec90:	f7fa ff80 	bl	8009b94 <HAL_GetTick>
 800ec94:	4602      	mov	r2, r0
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	2b64      	cmp	r3, #100	@ 0x64
 800ec9c:	d901      	bls.n	800eca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ec9e:	2303      	movs	r3, #3
 800eca0:	e1f3      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eca2:	4b51      	ldr	r3, [pc, #324]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1f0      	bne.n	800ec90 <HAL_RCC_OscConfig+0xe8>
 800ecae:	e000      	b.n	800ecb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ecb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f003 0302 	and.w	r3, r3, #2
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d063      	beq.n	800ed86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ecbe:	4b4a      	ldr	r3, [pc, #296]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	f003 030c 	and.w	r3, r3, #12
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00b      	beq.n	800ece2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ecca:	4b47      	ldr	r3, [pc, #284]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ecd2:	2b08      	cmp	r3, #8
 800ecd4:	d11c      	bne.n	800ed10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ecd6:	4b44      	ldr	r3, [pc, #272]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d116      	bne.n	800ed10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ece2:	4b41      	ldr	r3, [pc, #260]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f003 0302 	and.w	r3, r3, #2
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d005      	beq.n	800ecfa <HAL_RCC_OscConfig+0x152>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d001      	beq.n	800ecfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e1c7      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ecfa:	4b3b      	ldr	r3, [pc, #236]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	00db      	lsls	r3, r3, #3
 800ed08:	4937      	ldr	r1, [pc, #220]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed0e:	e03a      	b.n	800ed86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d020      	beq.n	800ed5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ed18:	4b34      	ldr	r3, [pc, #208]	@ (800edec <HAL_RCC_OscConfig+0x244>)
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed1e:	f7fa ff39 	bl	8009b94 <HAL_GetTick>
 800ed22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed24:	e008      	b.n	800ed38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ed26:	f7fa ff35 	bl	8009b94 <HAL_GetTick>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d901      	bls.n	800ed38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e1a8      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed38:	4b2b      	ldr	r3, [pc, #172]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f003 0302 	and.w	r3, r3, #2
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d0f0      	beq.n	800ed26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed44:	4b28      	ldr	r3, [pc, #160]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	00db      	lsls	r3, r3, #3
 800ed52:	4925      	ldr	r1, [pc, #148]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ed54:	4313      	orrs	r3, r2
 800ed56:	600b      	str	r3, [r1, #0]
 800ed58:	e015      	b.n	800ed86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ed5a:	4b24      	ldr	r3, [pc, #144]	@ (800edec <HAL_RCC_OscConfig+0x244>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed60:	f7fa ff18 	bl	8009b94 <HAL_GetTick>
 800ed64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ed66:	e008      	b.n	800ed7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ed68:	f7fa ff14 	bl	8009b94 <HAL_GetTick>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d901      	bls.n	800ed7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ed76:	2303      	movs	r3, #3
 800ed78:	e187      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ed7a:	4b1b      	ldr	r3, [pc, #108]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f003 0302 	and.w	r3, r3, #2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1f0      	bne.n	800ed68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 0308 	and.w	r3, r3, #8
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d036      	beq.n	800ee00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d016      	beq.n	800edc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ed9a:	4b15      	ldr	r3, [pc, #84]	@ (800edf0 <HAL_RCC_OscConfig+0x248>)
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eda0:	f7fa fef8 	bl	8009b94 <HAL_GetTick>
 800eda4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eda6:	e008      	b.n	800edba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eda8:	f7fa fef4 	bl	8009b94 <HAL_GetTick>
 800edac:	4602      	mov	r2, r0
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d901      	bls.n	800edba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e167      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800edba:	4b0b      	ldr	r3, [pc, #44]	@ (800ede8 <HAL_RCC_OscConfig+0x240>)
 800edbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edbe:	f003 0302 	and.w	r3, r3, #2
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d0f0      	beq.n	800eda8 <HAL_RCC_OscConfig+0x200>
 800edc6:	e01b      	b.n	800ee00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800edc8:	4b09      	ldr	r3, [pc, #36]	@ (800edf0 <HAL_RCC_OscConfig+0x248>)
 800edca:	2200      	movs	r2, #0
 800edcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edce:	f7fa fee1 	bl	8009b94 <HAL_GetTick>
 800edd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800edd4:	e00e      	b.n	800edf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800edd6:	f7fa fedd 	bl	8009b94 <HAL_GetTick>
 800edda:	4602      	mov	r2, r0
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d907      	bls.n	800edf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ede4:	2303      	movs	r3, #3
 800ede6:	e150      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
 800ede8:	40023800 	.word	0x40023800
 800edec:	42470000 	.word	0x42470000
 800edf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800edf4:	4b88      	ldr	r3, [pc, #544]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800edf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edf8:	f003 0302 	and.w	r3, r3, #2
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1ea      	bne.n	800edd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f003 0304 	and.w	r3, r3, #4
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f000 8097 	beq.w	800ef3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee12:	4b81      	ldr	r3, [pc, #516]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10f      	bne.n	800ee3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]
 800ee22:	4b7d      	ldr	r3, [pc, #500]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee26:	4a7c      	ldr	r2, [pc, #496]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee2c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ee2e:	4b7a      	ldr	r3, [pc, #488]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ee36:	60bb      	str	r3, [r7, #8]
 800ee38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee3e:	4b77      	ldr	r3, [pc, #476]	@ (800f01c <HAL_RCC_OscConfig+0x474>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d118      	bne.n	800ee7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee4a:	4b74      	ldr	r3, [pc, #464]	@ (800f01c <HAL_RCC_OscConfig+0x474>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4a73      	ldr	r2, [pc, #460]	@ (800f01c <HAL_RCC_OscConfig+0x474>)
 800ee50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee56:	f7fa fe9d 	bl	8009b94 <HAL_GetTick>
 800ee5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee5c:	e008      	b.n	800ee70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee5e:	f7fa fe99 	bl	8009b94 <HAL_GetTick>
 800ee62:	4602      	mov	r2, r0
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d901      	bls.n	800ee70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	e10c      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee70:	4b6a      	ldr	r3, [pc, #424]	@ (800f01c <HAL_RCC_OscConfig+0x474>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d0f0      	beq.n	800ee5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d106      	bne.n	800ee92 <HAL_RCC_OscConfig+0x2ea>
 800ee84:	4b64      	ldr	r3, [pc, #400]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee88:	4a63      	ldr	r2, [pc, #396]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee8a:	f043 0301 	orr.w	r3, r3, #1
 800ee8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ee90:	e01c      	b.n	800eecc <HAL_RCC_OscConfig+0x324>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	d10c      	bne.n	800eeb4 <HAL_RCC_OscConfig+0x30c>
 800ee9a:	4b5f      	ldr	r3, [pc, #380]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ee9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee9e:	4a5e      	ldr	r2, [pc, #376]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eea0:	f043 0304 	orr.w	r3, r3, #4
 800eea4:	6713      	str	r3, [r2, #112]	@ 0x70
 800eea6:	4b5c      	ldr	r3, [pc, #368]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eeaa:	4a5b      	ldr	r2, [pc, #364]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eeac:	f043 0301 	orr.w	r3, r3, #1
 800eeb0:	6713      	str	r3, [r2, #112]	@ 0x70
 800eeb2:	e00b      	b.n	800eecc <HAL_RCC_OscConfig+0x324>
 800eeb4:	4b58      	ldr	r3, [pc, #352]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eeb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eeb8:	4a57      	ldr	r2, [pc, #348]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eeba:	f023 0301 	bic.w	r3, r3, #1
 800eebe:	6713      	str	r3, [r2, #112]	@ 0x70
 800eec0:	4b55      	ldr	r3, [pc, #340]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eec4:	4a54      	ldr	r2, [pc, #336]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eec6:	f023 0304 	bic.w	r3, r3, #4
 800eeca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d015      	beq.n	800ef00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eed4:	f7fa fe5e 	bl	8009b94 <HAL_GetTick>
 800eed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eeda:	e00a      	b.n	800eef2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eedc:	f7fa fe5a 	bl	8009b94 <HAL_GetTick>
 800eee0:	4602      	mov	r2, r0
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	1ad3      	subs	r3, r2, r3
 800eee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d901      	bls.n	800eef2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800eeee:	2303      	movs	r3, #3
 800eef0:	e0cb      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eef2:	4b49      	ldr	r3, [pc, #292]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800eef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eef6:	f003 0302 	and.w	r3, r3, #2
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d0ee      	beq.n	800eedc <HAL_RCC_OscConfig+0x334>
 800eefe:	e014      	b.n	800ef2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef00:	f7fa fe48 	bl	8009b94 <HAL_GetTick>
 800ef04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef06:	e00a      	b.n	800ef1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef08:	f7fa fe44 	bl	8009b94 <HAL_GetTick>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d901      	bls.n	800ef1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ef1a:	2303      	movs	r3, #3
 800ef1c:	e0b5      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef1e:	4b3e      	ldr	r3, [pc, #248]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ef20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef22:	f003 0302 	and.w	r3, r3, #2
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1ee      	bne.n	800ef08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ef2a:	7dfb      	ldrb	r3, [r7, #23]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d105      	bne.n	800ef3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef30:	4b39      	ldr	r3, [pc, #228]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ef32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef34:	4a38      	ldr	r2, [pc, #224]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ef36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ef3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	699b      	ldr	r3, [r3, #24]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f000 80a1 	beq.w	800f088 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ef46:	4b34      	ldr	r3, [pc, #208]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	f003 030c 	and.w	r3, r3, #12
 800ef4e:	2b08      	cmp	r3, #8
 800ef50:	d05c      	beq.n	800f00c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d141      	bne.n	800efde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef5a:	4b31      	ldr	r3, [pc, #196]	@ (800f020 <HAL_RCC_OscConfig+0x478>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef60:	f7fa fe18 	bl	8009b94 <HAL_GetTick>
 800ef64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef66:	e008      	b.n	800ef7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef68:	f7fa fe14 	bl	8009b94 <HAL_GetTick>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d901      	bls.n	800ef7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ef76:	2303      	movs	r3, #3
 800ef78:	e087      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef7a:	4b27      	ldr	r3, [pc, #156]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1f0      	bne.n	800ef68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	69da      	ldr	r2, [r3, #28]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef94:	019b      	lsls	r3, r3, #6
 800ef96:	431a      	orrs	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef9c:	085b      	lsrs	r3, r3, #1
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	041b      	lsls	r3, r3, #16
 800efa2:	431a      	orrs	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa8:	061b      	lsls	r3, r3, #24
 800efaa:	491b      	ldr	r1, [pc, #108]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800efac:	4313      	orrs	r3, r2
 800efae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800efb0:	4b1b      	ldr	r3, [pc, #108]	@ (800f020 <HAL_RCC_OscConfig+0x478>)
 800efb2:	2201      	movs	r2, #1
 800efb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efb6:	f7fa fded 	bl	8009b94 <HAL_GetTick>
 800efba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800efbc:	e008      	b.n	800efd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800efbe:	f7fa fde9 	bl	8009b94 <HAL_GetTick>
 800efc2:	4602      	mov	r2, r0
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d901      	bls.n	800efd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800efcc:	2303      	movs	r3, #3
 800efce:	e05c      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800efd0:	4b11      	ldr	r3, [pc, #68]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d0f0      	beq.n	800efbe <HAL_RCC_OscConfig+0x416>
 800efdc:	e054      	b.n	800f088 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efde:	4b10      	ldr	r3, [pc, #64]	@ (800f020 <HAL_RCC_OscConfig+0x478>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efe4:	f7fa fdd6 	bl	8009b94 <HAL_GetTick>
 800efe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800efea:	e008      	b.n	800effe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800efec:	f7fa fdd2 	bl	8009b94 <HAL_GetTick>
 800eff0:	4602      	mov	r2, r0
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d901      	bls.n	800effe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800effa:	2303      	movs	r3, #3
 800effc:	e045      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800effe:	4b06      	ldr	r3, [pc, #24]	@ (800f018 <HAL_RCC_OscConfig+0x470>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f006:	2b00      	cmp	r3, #0
 800f008:	d1f0      	bne.n	800efec <HAL_RCC_OscConfig+0x444>
 800f00a:	e03d      	b.n	800f088 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	699b      	ldr	r3, [r3, #24]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d107      	bne.n	800f024 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f014:	2301      	movs	r3, #1
 800f016:	e038      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
 800f018:	40023800 	.word	0x40023800
 800f01c:	40007000 	.word	0x40007000
 800f020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f024:	4b1b      	ldr	r3, [pc, #108]	@ (800f094 <HAL_RCC_OscConfig+0x4ec>)
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d028      	beq.n	800f084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d121      	bne.n	800f084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d11a      	bne.n	800f084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f054:	4013      	ands	r3, r2
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f05a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d111      	bne.n	800f084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f06a:	085b      	lsrs	r3, r3, #1
 800f06c:	3b01      	subs	r3, #1
 800f06e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f070:	429a      	cmp	r2, r3
 800f072:	d107      	bne.n	800f084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f07e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f080:	429a      	cmp	r2, r3
 800f082:	d001      	beq.n	800f088 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	e000      	b.n	800f08a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	40023800 	.word	0x40023800

0800f098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e0cc      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f0ac:	4b68      	ldr	r3, [pc, #416]	@ (800f250 <HAL_RCC_ClockConfig+0x1b8>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f003 0307 	and.w	r3, r3, #7
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d90c      	bls.n	800f0d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0ba:	4b65      	ldr	r3, [pc, #404]	@ (800f250 <HAL_RCC_ClockConfig+0x1b8>)
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	b2d2      	uxtb	r2, r2
 800f0c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0c2:	4b63      	ldr	r3, [pc, #396]	@ (800f250 <HAL_RCC_ClockConfig+0x1b8>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 0307 	and.w	r3, r3, #7
 800f0ca:	683a      	ldr	r2, [r7, #0]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d001      	beq.n	800f0d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e0b8      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f003 0302 	and.w	r3, r3, #2
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d020      	beq.n	800f122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f003 0304 	and.w	r3, r3, #4
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d005      	beq.n	800f0f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f0ec:	4b59      	ldr	r3, [pc, #356]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	4a58      	ldr	r2, [pc, #352]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f0f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f0f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f003 0308 	and.w	r3, r3, #8
 800f100:	2b00      	cmp	r3, #0
 800f102:	d005      	beq.n	800f110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f104:	4b53      	ldr	r3, [pc, #332]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	4a52      	ldr	r2, [pc, #328]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f10a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f10e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f110:	4b50      	ldr	r3, [pc, #320]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	494d      	ldr	r1, [pc, #308]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f11e:	4313      	orrs	r3, r2
 800f120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f003 0301 	and.w	r3, r3, #1
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d044      	beq.n	800f1b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	2b01      	cmp	r3, #1
 800f134:	d107      	bne.n	800f146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f136:	4b47      	ldr	r3, [pc, #284]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d119      	bne.n	800f176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	e07f      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d003      	beq.n	800f156 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f152:	2b03      	cmp	r3, #3
 800f154:	d107      	bne.n	800f166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f156:	4b3f      	ldr	r3, [pc, #252]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d109      	bne.n	800f176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	e06f      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f166:	4b3b      	ldr	r3, [pc, #236]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f003 0302 	and.w	r3, r3, #2
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f172:	2301      	movs	r3, #1
 800f174:	e067      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f176:	4b37      	ldr	r3, [pc, #220]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	f023 0203 	bic.w	r2, r3, #3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	4934      	ldr	r1, [pc, #208]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f184:	4313      	orrs	r3, r2
 800f186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f188:	f7fa fd04 	bl	8009b94 <HAL_GetTick>
 800f18c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f18e:	e00a      	b.n	800f1a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f190:	f7fa fd00 	bl	8009b94 <HAL_GetTick>
 800f194:	4602      	mov	r2, r0
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d901      	bls.n	800f1a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f1a2:	2303      	movs	r3, #3
 800f1a4:	e04f      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	f003 020c 	and.w	r2, r3, #12
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d1eb      	bne.n	800f190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f1b8:	4b25      	ldr	r3, [pc, #148]	@ (800f250 <HAL_RCC_ClockConfig+0x1b8>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f003 0307 	and.w	r3, r3, #7
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d20c      	bcs.n	800f1e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1c6:	4b22      	ldr	r3, [pc, #136]	@ (800f250 <HAL_RCC_ClockConfig+0x1b8>)
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	b2d2      	uxtb	r2, r2
 800f1cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1ce:	4b20      	ldr	r3, [pc, #128]	@ (800f250 <HAL_RCC_ClockConfig+0x1b8>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f003 0307 	and.w	r3, r3, #7
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d001      	beq.n	800f1e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e032      	b.n	800f246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f003 0304 	and.w	r3, r3, #4
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d008      	beq.n	800f1fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f1ec:	4b19      	ldr	r3, [pc, #100]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	4916      	ldr	r1, [pc, #88]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f003 0308 	and.w	r3, r3, #8
 800f206:	2b00      	cmp	r3, #0
 800f208:	d009      	beq.n	800f21e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f20a:	4b12      	ldr	r3, [pc, #72]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	691b      	ldr	r3, [r3, #16]
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	490e      	ldr	r1, [pc, #56]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f21a:	4313      	orrs	r3, r2
 800f21c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f21e:	f000 f821 	bl	800f264 <HAL_RCC_GetSysClockFreq>
 800f222:	4602      	mov	r2, r0
 800f224:	4b0b      	ldr	r3, [pc, #44]	@ (800f254 <HAL_RCC_ClockConfig+0x1bc>)
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	091b      	lsrs	r3, r3, #4
 800f22a:	f003 030f 	and.w	r3, r3, #15
 800f22e:	490a      	ldr	r1, [pc, #40]	@ (800f258 <HAL_RCC_ClockConfig+0x1c0>)
 800f230:	5ccb      	ldrb	r3, [r1, r3]
 800f232:	fa22 f303 	lsr.w	r3, r2, r3
 800f236:	4a09      	ldr	r2, [pc, #36]	@ (800f25c <HAL_RCC_ClockConfig+0x1c4>)
 800f238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f23a:	4b09      	ldr	r3, [pc, #36]	@ (800f260 <HAL_RCC_ClockConfig+0x1c8>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7f4 fc3e 	bl	8003ac0 <HAL_InitTick>

  return HAL_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	40023c00 	.word	0x40023c00
 800f254:	40023800 	.word	0x40023800
 800f258:	08020618 	.word	0x08020618
 800f25c:	20000004 	.word	0x20000004
 800f260:	2000000c 	.word	0x2000000c

0800f264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f268:	b090      	sub	sp, #64	@ 0x40
 800f26a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f26c:	2300      	movs	r3, #0
 800f26e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f270:	2300      	movs	r3, #0
 800f272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f274:	2300      	movs	r3, #0
 800f276:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800f278:	2300      	movs	r3, #0
 800f27a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f27c:	4b59      	ldr	r3, [pc, #356]	@ (800f3e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f003 030c 	and.w	r3, r3, #12
 800f284:	2b08      	cmp	r3, #8
 800f286:	d00d      	beq.n	800f2a4 <HAL_RCC_GetSysClockFreq+0x40>
 800f288:	2b08      	cmp	r3, #8
 800f28a:	f200 80a1 	bhi.w	800f3d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <HAL_RCC_GetSysClockFreq+0x34>
 800f292:	2b04      	cmp	r3, #4
 800f294:	d003      	beq.n	800f29e <HAL_RCC_GetSysClockFreq+0x3a>
 800f296:	e09b      	b.n	800f3d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f298:	4b53      	ldr	r3, [pc, #332]	@ (800f3e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800f29a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800f29c:	e09b      	b.n	800f3d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f29e:	4b53      	ldr	r3, [pc, #332]	@ (800f3ec <HAL_RCC_GetSysClockFreq+0x188>)
 800f2a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f2a2:	e098      	b.n	800f3d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f2a4:	4b4f      	ldr	r3, [pc, #316]	@ (800f3e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f2ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f2ae:	4b4d      	ldr	r3, [pc, #308]	@ (800f3e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d028      	beq.n	800f30c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f2ba:	4b4a      	ldr	r3, [pc, #296]	@ (800f3e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	099b      	lsrs	r3, r3, #6
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	623b      	str	r3, [r7, #32]
 800f2c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4b47      	ldr	r3, [pc, #284]	@ (800f3ec <HAL_RCC_GetSysClockFreq+0x188>)
 800f2d0:	fb03 f201 	mul.w	r2, r3, r1
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	fb00 f303 	mul.w	r3, r0, r3
 800f2da:	4413      	add	r3, r2
 800f2dc:	4a43      	ldr	r2, [pc, #268]	@ (800f3ec <HAL_RCC_GetSysClockFreq+0x188>)
 800f2de:	fba0 1202 	umull	r1, r2, r0, r2
 800f2e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f2e4:	460a      	mov	r2, r1
 800f2e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f2e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2ea:	4413      	add	r3, r2
 800f2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	61bb      	str	r3, [r7, #24]
 800f2f4:	61fa      	str	r2, [r7, #28]
 800f2f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f2fe:	f7f1 fcc3 	bl	8000c88 <__aeabi_uldivmod>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4613      	mov	r3, r2
 800f308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f30a:	e053      	b.n	800f3b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f30c:	4b35      	ldr	r3, [pc, #212]	@ (800f3e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	099b      	lsrs	r3, r3, #6
 800f312:	2200      	movs	r2, #0
 800f314:	613b      	str	r3, [r7, #16]
 800f316:	617a      	str	r2, [r7, #20]
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800f31e:	f04f 0b00 	mov.w	fp, #0
 800f322:	4652      	mov	r2, sl
 800f324:	465b      	mov	r3, fp
 800f326:	f04f 0000 	mov.w	r0, #0
 800f32a:	f04f 0100 	mov.w	r1, #0
 800f32e:	0159      	lsls	r1, r3, #5
 800f330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f334:	0150      	lsls	r0, r2, #5
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	ebb2 080a 	subs.w	r8, r2, sl
 800f33e:	eb63 090b 	sbc.w	r9, r3, fp
 800f342:	f04f 0200 	mov.w	r2, #0
 800f346:	f04f 0300 	mov.w	r3, #0
 800f34a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800f34e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800f352:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800f356:	ebb2 0408 	subs.w	r4, r2, r8
 800f35a:	eb63 0509 	sbc.w	r5, r3, r9
 800f35e:	f04f 0200 	mov.w	r2, #0
 800f362:	f04f 0300 	mov.w	r3, #0
 800f366:	00eb      	lsls	r3, r5, #3
 800f368:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f36c:	00e2      	lsls	r2, r4, #3
 800f36e:	4614      	mov	r4, r2
 800f370:	461d      	mov	r5, r3
 800f372:	eb14 030a 	adds.w	r3, r4, sl
 800f376:	603b      	str	r3, [r7, #0]
 800f378:	eb45 030b 	adc.w	r3, r5, fp
 800f37c:	607b      	str	r3, [r7, #4]
 800f37e:	f04f 0200 	mov.w	r2, #0
 800f382:	f04f 0300 	mov.w	r3, #0
 800f386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f38a:	4629      	mov	r1, r5
 800f38c:	028b      	lsls	r3, r1, #10
 800f38e:	4621      	mov	r1, r4
 800f390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f394:	4621      	mov	r1, r4
 800f396:	028a      	lsls	r2, r1, #10
 800f398:	4610      	mov	r0, r2
 800f39a:	4619      	mov	r1, r3
 800f39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f39e:	2200      	movs	r2, #0
 800f3a0:	60bb      	str	r3, [r7, #8]
 800f3a2:	60fa      	str	r2, [r7, #12]
 800f3a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f3a8:	f7f1 fc6e 	bl	8000c88 <__aeabi_uldivmod>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f3b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	0c1b      	lsrs	r3, r3, #16
 800f3ba:	f003 0303 	and.w	r3, r3, #3
 800f3be:	3301      	adds	r3, #1
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800f3c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f3ce:	e002      	b.n	800f3d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f3d0:	4b05      	ldr	r3, [pc, #20]	@ (800f3e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800f3d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f3d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3740      	adds	r7, #64	@ 0x40
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3e2:	bf00      	nop
 800f3e4:	40023800 	.word	0x40023800
 800f3e8:	00f42400 	.word	0x00f42400
 800f3ec:	00b71b00 	.word	0x00b71b00

0800f3f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f3f4:	4b03      	ldr	r3, [pc, #12]	@ (800f404 <HAL_RCC_GetHCLKFreq+0x14>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	20000004 	.word	0x20000004

0800f408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f40c:	f7ff fff0 	bl	800f3f0 <HAL_RCC_GetHCLKFreq>
 800f410:	4602      	mov	r2, r0
 800f412:	4b05      	ldr	r3, [pc, #20]	@ (800f428 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	0a9b      	lsrs	r3, r3, #10
 800f418:	f003 0307 	and.w	r3, r3, #7
 800f41c:	4903      	ldr	r1, [pc, #12]	@ (800f42c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f41e:	5ccb      	ldrb	r3, [r1, r3]
 800f420:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f424:	4618      	mov	r0, r3
 800f426:	bd80      	pop	{r7, pc}
 800f428:	40023800 	.word	0x40023800
 800f42c:	08020628 	.word	0x08020628

0800f430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f434:	f7ff ffdc 	bl	800f3f0 <HAL_RCC_GetHCLKFreq>
 800f438:	4602      	mov	r2, r0
 800f43a:	4b05      	ldr	r3, [pc, #20]	@ (800f450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	0b5b      	lsrs	r3, r3, #13
 800f440:	f003 0307 	and.w	r3, r3, #7
 800f444:	4903      	ldr	r1, [pc, #12]	@ (800f454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f446:	5ccb      	ldrb	r3, [r1, r3]
 800f448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	40023800 	.word	0x40023800
 800f454:	08020628 	.word	0x08020628

0800f458 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	220f      	movs	r2, #15
 800f466:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f468:	4b12      	ldr	r3, [pc, #72]	@ (800f4b4 <HAL_RCC_GetClockConfig+0x5c>)
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	f003 0203 	and.w	r2, r3, #3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f474:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b4 <HAL_RCC_GetClockConfig+0x5c>)
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f480:	4b0c      	ldr	r3, [pc, #48]	@ (800f4b4 <HAL_RCC_GetClockConfig+0x5c>)
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f48c:	4b09      	ldr	r3, [pc, #36]	@ (800f4b4 <HAL_RCC_GetClockConfig+0x5c>)
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	08db      	lsrs	r3, r3, #3
 800f492:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f49a:	4b07      	ldr	r3, [pc, #28]	@ (800f4b8 <HAL_RCC_GetClockConfig+0x60>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f003 0207 	and.w	r2, r3, #7
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	601a      	str	r2, [r3, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	370c      	adds	r7, #12
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	40023800 	.word	0x40023800
 800f4b8:	40023c00 	.word	0x40023c00

0800f4bc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d101      	bne.n	800f4ce <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e01c      	b.n	800f508 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	795b      	ldrb	r3, [r3, #5]
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d105      	bne.n	800f4e4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7f4 f99e 	bl	8003820 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f042 0204 	orr.w	r2, r2, #4
 800f4f8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d101      	bne.n	800f522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	e07b      	b.n	800f61a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f526:	2b00      	cmp	r3, #0
 800f528:	d108      	bne.n	800f53c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f532:	d009      	beq.n	800f548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	61da      	str	r2, [r3, #28]
 800f53a:	e005      	b.n	800f548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f554:	b2db      	uxtb	r3, r3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d106      	bne.n	800f568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7f4 f9b4 	bl	80038d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2202      	movs	r2, #2
 800f56c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f57e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f590:	431a      	orrs	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f59a:	431a      	orrs	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	691b      	ldr	r3, [r3, #16]
 800f5a0:	f003 0302 	and.w	r3, r3, #2
 800f5a4:	431a      	orrs	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	f003 0301 	and.w	r3, r3, #1
 800f5ae:	431a      	orrs	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	69db      	ldr	r3, [r3, #28]
 800f5be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f5c2:	431a      	orrs	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5cc:	ea42 0103 	orr.w	r1, r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	430a      	orrs	r2, r1
 800f5de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	0c1b      	lsrs	r3, r3, #16
 800f5e6:	f003 0104 	and.w	r1, r3, #4
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ee:	f003 0210 	and.w	r2, r3, #16
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	430a      	orrs	r2, r1
 800f5f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	69da      	ldr	r2, [r3, #28]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2201      	movs	r2, #1
 800f614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b088      	sub	sp, #32
 800f626:	af02      	add	r7, sp, #8
 800f628:	60f8      	str	r0, [r7, #12]
 800f62a:	60b9      	str	r1, [r7, #8]
 800f62c:	603b      	str	r3, [r7, #0]
 800f62e:	4613      	mov	r3, r2
 800f630:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f632:	2300      	movs	r3, #0
 800f634:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f63e:	d112      	bne.n	800f666 <HAL_SPI_Receive+0x44>
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10e      	bne.n	800f666 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2204      	movs	r2, #4
 800f64c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f650:	88fa      	ldrh	r2, [r7, #6]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	9300      	str	r3, [sp, #0]
 800f656:	4613      	mov	r3, r2
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	68b9      	ldr	r1, [r7, #8]
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f000 f8f1 	bl	800f844 <HAL_SPI_TransmitReceive>
 800f662:	4603      	mov	r3, r0
 800f664:	e0ea      	b.n	800f83c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d101      	bne.n	800f674 <HAL_SPI_Receive+0x52>
 800f670:	2302      	movs	r3, #2
 800f672:	e0e3      	b.n	800f83c <HAL_SPI_Receive+0x21a>
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2201      	movs	r2, #1
 800f678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f67c:	f7fa fa8a 	bl	8009b94 <HAL_GetTick>
 800f680:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d002      	beq.n	800f694 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f68e:	2302      	movs	r3, #2
 800f690:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f692:	e0ca      	b.n	800f82a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d002      	beq.n	800f6a0 <HAL_SPI_Receive+0x7e>
 800f69a:	88fb      	ldrh	r3, [r7, #6]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d102      	bne.n	800f6a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f6a4:	e0c1      	b.n	800f82a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2204      	movs	r2, #4
 800f6aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	88fa      	ldrh	r2, [r7, #6]
 800f6be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	88fa      	ldrh	r2, [r7, #6]
 800f6c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6ec:	d10f      	bne.n	800f70e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f6fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f70c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f718:	2b40      	cmp	r3, #64	@ 0x40
 800f71a:	d007      	beq.n	800f72c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f72a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d162      	bne.n	800f7fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f734:	e02e      	b.n	800f794 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	f003 0301 	and.w	r3, r3, #1
 800f740:	2b01      	cmp	r3, #1
 800f742:	d115      	bne.n	800f770 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f103 020c 	add.w	r2, r3, #12
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f750:	7812      	ldrb	r2, [r2, #0]
 800f752:	b2d2      	uxtb	r2, r2
 800f754:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f75a:	1c5a      	adds	r2, r3, #1
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f764:	b29b      	uxth	r3, r3
 800f766:	3b01      	subs	r3, #1
 800f768:	b29a      	uxth	r2, r3
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f76e:	e011      	b.n	800f794 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f770:	f7fa fa10 	bl	8009b94 <HAL_GetTick>
 800f774:	4602      	mov	r2, r0
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	1ad3      	subs	r3, r2, r3
 800f77a:	683a      	ldr	r2, [r7, #0]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d803      	bhi.n	800f788 <HAL_SPI_Receive+0x166>
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f786:	d102      	bne.n	800f78e <HAL_SPI_Receive+0x16c>
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d102      	bne.n	800f794 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800f78e:	2303      	movs	r3, #3
 800f790:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f792:	e04a      	b.n	800f82a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f798:	b29b      	uxth	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1cb      	bne.n	800f736 <HAL_SPI_Receive+0x114>
 800f79e:	e031      	b.n	800f804 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d113      	bne.n	800f7d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68da      	ldr	r2, [r3, #12]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b8:	b292      	uxth	r2, r2
 800f7ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c0:	1c9a      	adds	r2, r3, #2
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f7d4:	e011      	b.n	800f7fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7d6:	f7fa f9dd 	bl	8009b94 <HAL_GetTick>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	683a      	ldr	r2, [r7, #0]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d803      	bhi.n	800f7ee <HAL_SPI_Receive+0x1cc>
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ec:	d102      	bne.n	800f7f4 <HAL_SPI_Receive+0x1d2>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f7f8:	e017      	b.n	800f82a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1cd      	bne.n	800f7a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f804:	693a      	ldr	r2, [r7, #16]
 800f806:	6839      	ldr	r1, [r7, #0]
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 fa45 	bl	800fc98 <SPI_EndRxTransaction>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2220      	movs	r2, #32
 800f818:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f822:	2301      	movs	r3, #1
 800f824:	75fb      	strb	r3, [r7, #23]
 800f826:	e000      	b.n	800f82a <HAL_SPI_Receive+0x208>
  }

error :
 800f828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2201      	movs	r2, #1
 800f82e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08c      	sub	sp, #48	@ 0x30
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f852:	2301      	movs	r3, #1
 800f854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f856:	2300      	movs	r3, #0
 800f858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f862:	2b01      	cmp	r3, #1
 800f864:	d101      	bne.n	800f86a <HAL_SPI_TransmitReceive+0x26>
 800f866:	2302      	movs	r3, #2
 800f868:	e18a      	b.n	800fb80 <HAL_SPI_TransmitReceive+0x33c>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2201      	movs	r2, #1
 800f86e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f872:	f7fa f98f 	bl	8009b94 <HAL_GetTick>
 800f876:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f87e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f888:	887b      	ldrh	r3, [r7, #2]
 800f88a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f88c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f890:	2b01      	cmp	r3, #1
 800f892:	d00f      	beq.n	800f8b4 <HAL_SPI_TransmitReceive+0x70>
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f89a:	d107      	bne.n	800f8ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <HAL_SPI_TransmitReceive+0x68>
 800f8a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f8a8:	2b04      	cmp	r3, #4
 800f8aa:	d003      	beq.n	800f8b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f8b2:	e15b      	b.n	800fb6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d005      	beq.n	800f8c6 <HAL_SPI_TransmitReceive+0x82>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d002      	beq.n	800f8c6 <HAL_SPI_TransmitReceive+0x82>
 800f8c0:	887b      	ldrh	r3, [r7, #2]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d103      	bne.n	800f8ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f8cc:	e14e      	b.n	800fb6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b04      	cmp	r3, #4
 800f8d8:	d003      	beq.n	800f8e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2205      	movs	r2, #5
 800f8de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	887a      	ldrh	r2, [r7, #2]
 800f8f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	887a      	ldrh	r2, [r7, #2]
 800f8f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	887a      	ldrh	r2, [r7, #2]
 800f904:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	887a      	ldrh	r2, [r7, #2]
 800f90a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2200      	movs	r2, #0
 800f910:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f922:	2b40      	cmp	r3, #64	@ 0x40
 800f924:	d007      	beq.n	800f936 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f93e:	d178      	bne.n	800fa32 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <HAL_SPI_TransmitReceive+0x10a>
 800f948:	8b7b      	ldrh	r3, [r7, #26]
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d166      	bne.n	800fa1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f952:	881a      	ldrh	r2, [r3, #0]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95e:	1c9a      	adds	r2, r3, #2
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f968:	b29b      	uxth	r3, r3
 800f96a:	3b01      	subs	r3, #1
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f972:	e053      	b.n	800fa1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f003 0302 	and.w	r3, r3, #2
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d11b      	bne.n	800f9ba <HAL_SPI_TransmitReceive+0x176>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f986:	b29b      	uxth	r3, r3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d016      	beq.n	800f9ba <HAL_SPI_TransmitReceive+0x176>
 800f98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d113      	bne.n	800f9ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f996:	881a      	ldrh	r2, [r3, #0]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9a2:	1c9a      	adds	r2, r3, #2
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d119      	bne.n	800f9fc <HAL_SPI_TransmitReceive+0x1b8>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d014      	beq.n	800f9fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68da      	ldr	r2, [r3, #12]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9dc:	b292      	uxth	r2, r2
 800f9de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9e4:	1c9a      	adds	r2, r3, #2
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f9fc:	f7fa f8ca 	bl	8009b94 <HAL_GetTick>
 800fa00:	4602      	mov	r2, r0
 800fa02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d807      	bhi.n	800fa1c <HAL_SPI_TransmitReceive+0x1d8>
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa12:	d003      	beq.n	800fa1c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800fa14:	2303      	movs	r3, #3
 800fa16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800fa1a:	e0a7      	b.n	800fb6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d1a6      	bne.n	800f974 <HAL_SPI_TransmitReceive+0x130>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1a1      	bne.n	800f974 <HAL_SPI_TransmitReceive+0x130>
 800fa30:	e07c      	b.n	800fb2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d002      	beq.n	800fa40 <HAL_SPI_TransmitReceive+0x1fc>
 800fa3a:	8b7b      	ldrh	r3, [r7, #26]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d16b      	bne.n	800fb18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	330c      	adds	r3, #12
 800fa4a:	7812      	ldrb	r2, [r2, #0]
 800fa4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa52:	1c5a      	adds	r2, r3, #1
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa66:	e057      	b.n	800fb18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	f003 0302 	and.w	r3, r3, #2
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d11c      	bne.n	800fab0 <HAL_SPI_TransmitReceive+0x26c>
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d017      	beq.n	800fab0 <HAL_SPI_TransmitReceive+0x26c>
 800fa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d114      	bne.n	800fab0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	330c      	adds	r3, #12
 800fa90:	7812      	ldrb	r2, [r2, #0]
 800fa92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	3b01      	subs	r3, #1
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800faac:	2300      	movs	r3, #0
 800faae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	f003 0301 	and.w	r3, r3, #1
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d119      	bne.n	800faf2 <HAL_SPI_TransmitReceive+0x2ae>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d014      	beq.n	800faf2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68da      	ldr	r2, [r3, #12]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad2:	b2d2      	uxtb	r2, r2
 800fad4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fada:	1c5a      	adds	r2, r3, #1
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	3b01      	subs	r3, #1
 800fae8:	b29a      	uxth	r2, r3
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800faee:	2301      	movs	r3, #1
 800faf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800faf2:	f7fa f84f 	bl	8009b94 <HAL_GetTick>
 800faf6:	4602      	mov	r2, r0
 800faf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fafa:	1ad3      	subs	r3, r2, r3
 800fafc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d803      	bhi.n	800fb0a <HAL_SPI_TransmitReceive+0x2c6>
 800fb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb08:	d102      	bne.n	800fb10 <HAL_SPI_TransmitReceive+0x2cc>
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d103      	bne.n	800fb18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fb10:	2303      	movs	r3, #3
 800fb12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800fb16:	e029      	b.n	800fb6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1a2      	bne.n	800fa68 <HAL_SPI_TransmitReceive+0x224>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d19d      	bne.n	800fa68 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fb2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f000 f917 	bl	800fd64 <SPI_EndRxTxTransaction>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d006      	beq.n	800fb4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2220      	movs	r2, #32
 800fb46:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800fb48:	e010      	b.n	800fb6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d10b      	bne.n	800fb6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb52:	2300      	movs	r3, #0
 800fb54:	617b      	str	r3, [r7, #20]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	617b      	str	r3, [r7, #20]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	617b      	str	r3, [r7, #20]
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	e000      	b.n	800fb6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fb6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fb7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3730      	adds	r7, #48	@ 0x30
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	4613      	mov	r3, r2
 800fb96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fb98:	f7f9 fffc 	bl	8009b94 <HAL_GetTick>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba0:	1a9b      	subs	r3, r3, r2
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	4413      	add	r3, r2
 800fba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fba8:	f7f9 fff4 	bl	8009b94 <HAL_GetTick>
 800fbac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fbae:	4b39      	ldr	r3, [pc, #228]	@ (800fc94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	015b      	lsls	r3, r3, #5
 800fbb4:	0d1b      	lsrs	r3, r3, #20
 800fbb6:	69fa      	ldr	r2, [r7, #28]
 800fbb8:	fb02 f303 	mul.w	r3, r2, r3
 800fbbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fbbe:	e054      	b.n	800fc6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc6:	d050      	beq.n	800fc6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fbc8:	f7f9 ffe4 	bl	8009b94 <HAL_GetTick>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	69fa      	ldr	r2, [r7, #28]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d902      	bls.n	800fbde <SPI_WaitFlagStateUntilTimeout+0x56>
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d13d      	bne.n	800fc5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	685a      	ldr	r2, [r3, #4]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fbec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fbf6:	d111      	bne.n	800fc1c <SPI_WaitFlagStateUntilTimeout+0x94>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc00:	d004      	beq.n	800fc0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc0a:	d107      	bne.n	800fc1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fc1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc24:	d10f      	bne.n	800fc46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fc44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2201      	movs	r2, #1
 800fc4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2200      	movs	r2, #0
 800fc52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800fc56:	2303      	movs	r3, #3
 800fc58:	e017      	b.n	800fc8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d101      	bne.n	800fc64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fc60:	2300      	movs	r3, #0
 800fc62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	689a      	ldr	r2, [r3, #8]
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	4013      	ands	r3, r2
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	bf0c      	ite	eq
 800fc7a:	2301      	moveq	r3, #1
 800fc7c:	2300      	movne	r3, #0
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	461a      	mov	r2, r3
 800fc82:	79fb      	ldrb	r3, [r7, #7]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d19b      	bne.n	800fbc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fc88:	2300      	movs	r3, #0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3720      	adds	r7, #32
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	20000004 	.word	0x20000004

0800fc98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af02      	add	r7, sp, #8
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fcac:	d111      	bne.n	800fcd2 <SPI_EndRxTransaction+0x3a>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fcb6:	d004      	beq.n	800fcc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fcc0:	d107      	bne.n	800fcd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fcd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fcda:	d12a      	bne.n	800fd32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	689b      	ldr	r3, [r3, #8]
 800fce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fce4:	d012      	beq.n	800fd0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	2200      	movs	r2, #0
 800fcee:	2180      	movs	r1, #128	@ 0x80
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff ff49 	bl	800fb88 <SPI_WaitFlagStateUntilTimeout>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d02d      	beq.n	800fd58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd00:	f043 0220 	orr.w	r2, r3, #32
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e026      	b.n	800fd5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	2200      	movs	r2, #0
 800fd14:	2101      	movs	r1, #1
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7ff ff36 	bl	800fb88 <SPI_WaitFlagStateUntilTimeout>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d01a      	beq.n	800fd58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd26:	f043 0220 	orr.w	r2, r3, #32
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fd2e:	2303      	movs	r3, #3
 800fd30:	e013      	b.n	800fd5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff ff23 	bl	800fb88 <SPI_WaitFlagStateUntilTimeout>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d007      	beq.n	800fd58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd4c:	f043 0220 	orr.w	r2, r3, #32
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fd54:	2303      	movs	r3, #3
 800fd56:	e000      	b.n	800fd5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b088      	sub	sp, #32
 800fd68:	af02      	add	r7, sp, #8
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fd70:	4b1b      	ldr	r3, [pc, #108]	@ (800fde0 <SPI_EndRxTxTransaction+0x7c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a1b      	ldr	r2, [pc, #108]	@ (800fde4 <SPI_EndRxTxTransaction+0x80>)
 800fd76:	fba2 2303 	umull	r2, r3, r2, r3
 800fd7a:	0d5b      	lsrs	r3, r3, #21
 800fd7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fd80:	fb02 f303 	mul.w	r3, r2, r3
 800fd84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd8e:	d112      	bne.n	800fdb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2200      	movs	r2, #0
 800fd98:	2180      	movs	r1, #128	@ 0x80
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f7ff fef4 	bl	800fb88 <SPI_WaitFlagStateUntilTimeout>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d016      	beq.n	800fdd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdaa:	f043 0220 	orr.w	r2, r3, #32
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fdb2:	2303      	movs	r3, #3
 800fdb4:	e00f      	b.n	800fdd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	689b      	ldr	r3, [r3, #8]
 800fdc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdcc:	2b80      	cmp	r3, #128	@ 0x80
 800fdce:	d0f2      	beq.n	800fdb6 <SPI_EndRxTxTransaction+0x52>
 800fdd0:	e000      	b.n	800fdd4 <SPI_EndRxTxTransaction+0x70>
        break;
 800fdd2:	bf00      	nop
  }

  return HAL_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3718      	adds	r7, #24
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	20000004 	.word	0x20000004
 800fde4:	165e9f81 	.word	0x165e9f81

0800fde8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d101      	bne.n	800fdfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e041      	b.n	800fe7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7f4 fac6 	bl	80043a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2202      	movs	r2, #2
 800fe18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3304      	adds	r3, #4
 800fe24:	4619      	mov	r1, r3
 800fe26:	4610      	mov	r0, r2
 800fe28:	f000 fd24 	bl	8010874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d001      	beq.n	800fea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e04e      	b.n	800ff3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2202      	movs	r2, #2
 800fea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68da      	ldr	r2, [r3, #12]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f042 0201 	orr.w	r2, r2, #1
 800feb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a23      	ldr	r2, [pc, #140]	@ (800ff4c <HAL_TIM_Base_Start_IT+0xc4>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d022      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800feca:	d01d      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a1f      	ldr	r2, [pc, #124]	@ (800ff50 <HAL_TIM_Base_Start_IT+0xc8>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d018      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a1e      	ldr	r2, [pc, #120]	@ (800ff54 <HAL_TIM_Base_Start_IT+0xcc>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d013      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a1c      	ldr	r2, [pc, #112]	@ (800ff58 <HAL_TIM_Base_Start_IT+0xd0>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d00e      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a1b      	ldr	r2, [pc, #108]	@ (800ff5c <HAL_TIM_Base_Start_IT+0xd4>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d009      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a19      	ldr	r2, [pc, #100]	@ (800ff60 <HAL_TIM_Base_Start_IT+0xd8>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d004      	beq.n	800ff08 <HAL_TIM_Base_Start_IT+0x80>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4a18      	ldr	r2, [pc, #96]	@ (800ff64 <HAL_TIM_Base_Start_IT+0xdc>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d111      	bne.n	800ff2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	f003 0307 	and.w	r3, r3, #7
 800ff12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2b06      	cmp	r3, #6
 800ff18:	d010      	beq.n	800ff3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f042 0201 	orr.w	r2, r2, #1
 800ff28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff2a:	e007      	b.n	800ff3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f042 0201 	orr.w	r2, r2, #1
 800ff3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ff3c:	2300      	movs	r3, #0
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	40010000 	.word	0x40010000
 800ff50:	40000400 	.word	0x40000400
 800ff54:	40000800 	.word	0x40000800
 800ff58:	40000c00 	.word	0x40000c00
 800ff5c:	40010400 	.word	0x40010400
 800ff60:	40014000 	.word	0x40014000
 800ff64:	40001800 	.word	0x40001800

0800ff68 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d101      	bne.n	800ff7a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	e041      	b.n	800fffe <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f839 	bl	8010006 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2202      	movs	r2, #2
 800ff98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	f000 fc64 	bl	8010874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2201      	movs	r2, #1
 800fff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fffc:	2300      	movs	r3, #0
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801000e:	bf00      	nop
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e041      	b.n	80100b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010032:	b2db      	uxtb	r3, r3
 8010034:	2b00      	cmp	r3, #0
 8010036:	d106      	bne.n	8010046 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7f4 f9eb 	bl	800441c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2202      	movs	r2, #2
 801004a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	3304      	adds	r3, #4
 8010056:	4619      	mov	r1, r3
 8010058:	4610      	mov	r0, r2
 801005a:	f000 fc0b 	bl	8010874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2201      	movs	r2, #1
 8010062:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2201      	movs	r2, #1
 801006a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2201      	movs	r2, #1
 8010072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2201      	movs	r2, #1
 8010082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2201      	movs	r2, #1
 801008a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2201      	movs	r2, #1
 801009a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2201      	movs	r2, #1
 80100a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2201      	movs	r2, #1
 80100aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d109      	bne.n	80100dc <HAL_TIM_PWM_Start+0x24>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	bf14      	ite	ne
 80100d4:	2301      	movne	r3, #1
 80100d6:	2300      	moveq	r3, #0
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	e022      	b.n	8010122 <HAL_TIM_PWM_Start+0x6a>
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	2b04      	cmp	r3, #4
 80100e0:	d109      	bne.n	80100f6 <HAL_TIM_PWM_Start+0x3e>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	bf14      	ite	ne
 80100ee:	2301      	movne	r3, #1
 80100f0:	2300      	moveq	r3, #0
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	e015      	b.n	8010122 <HAL_TIM_PWM_Start+0x6a>
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d109      	bne.n	8010110 <HAL_TIM_PWM_Start+0x58>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010102:	b2db      	uxtb	r3, r3
 8010104:	2b01      	cmp	r3, #1
 8010106:	bf14      	ite	ne
 8010108:	2301      	movne	r3, #1
 801010a:	2300      	moveq	r3, #0
 801010c:	b2db      	uxtb	r3, r3
 801010e:	e008      	b.n	8010122 <HAL_TIM_PWM_Start+0x6a>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010116:	b2db      	uxtb	r3, r3
 8010118:	2b01      	cmp	r3, #1
 801011a:	bf14      	ite	ne
 801011c:	2301      	movne	r3, #1
 801011e:	2300      	moveq	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010126:	2301      	movs	r3, #1
 8010128:	e07c      	b.n	8010224 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d104      	bne.n	801013a <HAL_TIM_PWM_Start+0x82>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2202      	movs	r2, #2
 8010134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010138:	e013      	b.n	8010162 <HAL_TIM_PWM_Start+0xaa>
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	2b04      	cmp	r3, #4
 801013e:	d104      	bne.n	801014a <HAL_TIM_PWM_Start+0x92>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2202      	movs	r2, #2
 8010144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010148:	e00b      	b.n	8010162 <HAL_TIM_PWM_Start+0xaa>
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	2b08      	cmp	r3, #8
 801014e:	d104      	bne.n	801015a <HAL_TIM_PWM_Start+0xa2>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2202      	movs	r2, #2
 8010154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010158:	e003      	b.n	8010162 <HAL_TIM_PWM_Start+0xaa>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2202      	movs	r2, #2
 801015e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2201      	movs	r2, #1
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	4618      	mov	r0, r3
 801016c:	f000 fe6c 	bl	8010e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a2d      	ldr	r2, [pc, #180]	@ (801022c <HAL_TIM_PWM_Start+0x174>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d004      	beq.n	8010184 <HAL_TIM_PWM_Start+0xcc>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a2c      	ldr	r2, [pc, #176]	@ (8010230 <HAL_TIM_PWM_Start+0x178>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d101      	bne.n	8010188 <HAL_TIM_PWM_Start+0xd0>
 8010184:	2301      	movs	r3, #1
 8010186:	e000      	b.n	801018a <HAL_TIM_PWM_Start+0xd2>
 8010188:	2300      	movs	r3, #0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d007      	beq.n	801019e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801019c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4a22      	ldr	r2, [pc, #136]	@ (801022c <HAL_TIM_PWM_Start+0x174>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d022      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101b0:	d01d      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	4a1f      	ldr	r2, [pc, #124]	@ (8010234 <HAL_TIM_PWM_Start+0x17c>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d018      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010238 <HAL_TIM_PWM_Start+0x180>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d013      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a1c      	ldr	r2, [pc, #112]	@ (801023c <HAL_TIM_PWM_Start+0x184>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d00e      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a16      	ldr	r2, [pc, #88]	@ (8010230 <HAL_TIM_PWM_Start+0x178>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d009      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a18      	ldr	r2, [pc, #96]	@ (8010240 <HAL_TIM_PWM_Start+0x188>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d004      	beq.n	80101ee <HAL_TIM_PWM_Start+0x136>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4a16      	ldr	r2, [pc, #88]	@ (8010244 <HAL_TIM_PWM_Start+0x18c>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d111      	bne.n	8010212 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	f003 0307 	and.w	r3, r3, #7
 80101f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2b06      	cmp	r3, #6
 80101fe:	d010      	beq.n	8010222 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f042 0201 	orr.w	r2, r2, #1
 801020e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010210:	e007      	b.n	8010222 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f042 0201 	orr.w	r2, r2, #1
 8010220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010222:	2300      	movs	r3, #0
}
 8010224:	4618      	mov	r0, r3
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	40010000 	.word	0x40010000
 8010230:	40010400 	.word	0x40010400
 8010234:	40000400 	.word	0x40000400
 8010238:	40000800 	.word	0x40000800
 801023c:	40000c00 	.word	0x40000c00
 8010240:	40014000 	.word	0x40014000
 8010244:	40001800 	.word	0x40001800

08010248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	f003 0302 	and.w	r3, r3, #2
 801025a:	2b02      	cmp	r3, #2
 801025c:	d122      	bne.n	80102a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	f003 0302 	and.w	r3, r3, #2
 8010268:	2b02      	cmp	r3, #2
 801026a:	d11b      	bne.n	80102a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f06f 0202 	mvn.w	r2, #2
 8010274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2201      	movs	r2, #1
 801027a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	699b      	ldr	r3, [r3, #24]
 8010282:	f003 0303 	and.w	r3, r3, #3
 8010286:	2b00      	cmp	r3, #0
 8010288:	d003      	beq.n	8010292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fad3 	bl	8010836 <HAL_TIM_IC_CaptureCallback>
 8010290:	e005      	b.n	801029e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 fac5 	bl	8010822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fad6 	bl	801084a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	f003 0304 	and.w	r3, r3, #4
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d122      	bne.n	80102f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	f003 0304 	and.w	r3, r3, #4
 80102bc:	2b04      	cmp	r3, #4
 80102be:	d11b      	bne.n	80102f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f06f 0204 	mvn.w	r2, #4
 80102c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2202      	movs	r2, #2
 80102ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	699b      	ldr	r3, [r3, #24]
 80102d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d003      	beq.n	80102e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 faa9 	bl	8010836 <HAL_TIM_IC_CaptureCallback>
 80102e4:	e005      	b.n	80102f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fa9b 	bl	8010822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 faac 	bl	801084a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	f003 0308 	and.w	r3, r3, #8
 8010302:	2b08      	cmp	r3, #8
 8010304:	d122      	bne.n	801034c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	f003 0308 	and.w	r3, r3, #8
 8010310:	2b08      	cmp	r3, #8
 8010312:	d11b      	bne.n	801034c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f06f 0208 	mvn.w	r2, #8
 801031c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2204      	movs	r2, #4
 8010322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	69db      	ldr	r3, [r3, #28]
 801032a:	f003 0303 	and.w	r3, r3, #3
 801032e:	2b00      	cmp	r3, #0
 8010330:	d003      	beq.n	801033a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f000 fa7f 	bl	8010836 <HAL_TIM_IC_CaptureCallback>
 8010338:	e005      	b.n	8010346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 fa71 	bl	8010822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f000 fa82 	bl	801084a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	691b      	ldr	r3, [r3, #16]
 8010352:	f003 0310 	and.w	r3, r3, #16
 8010356:	2b10      	cmp	r3, #16
 8010358:	d122      	bne.n	80103a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	f003 0310 	and.w	r3, r3, #16
 8010364:	2b10      	cmp	r3, #16
 8010366:	d11b      	bne.n	80103a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f06f 0210 	mvn.w	r2, #16
 8010370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2208      	movs	r2, #8
 8010376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	69db      	ldr	r3, [r3, #28]
 801037e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010382:	2b00      	cmp	r3, #0
 8010384:	d003      	beq.n	801038e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 fa55 	bl	8010836 <HAL_TIM_IC_CaptureCallback>
 801038c:	e005      	b.n	801039a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 fa47 	bl	8010822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 fa58 	bl	801084a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	691b      	ldr	r3, [r3, #16]
 80103a6:	f003 0301 	and.w	r3, r3, #1
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d10e      	bne.n	80103cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	f003 0301 	and.w	r3, r3, #1
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d107      	bne.n	80103cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f06f 0201 	mvn.w	r2, #1
 80103c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7f3 f9fe 	bl	80037c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103d6:	2b80      	cmp	r3, #128	@ 0x80
 80103d8:	d10e      	bne.n	80103f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103e4:	2b80      	cmp	r3, #128	@ 0x80
 80103e6:	d107      	bne.n	80103f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80103f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fdd4 	bl	8010fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010402:	2b40      	cmp	r3, #64	@ 0x40
 8010404:	d10e      	bne.n	8010424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010410:	2b40      	cmp	r3, #64	@ 0x40
 8010412:	d107      	bne.n	8010424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801041c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 fa1d 	bl	801085e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	f003 0320 	and.w	r3, r3, #32
 801042e:	2b20      	cmp	r3, #32
 8010430:	d10e      	bne.n	8010450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	f003 0320 	and.w	r3, r3, #32
 801043c:	2b20      	cmp	r3, #32
 801043e:	d107      	bne.n	8010450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f06f 0220 	mvn.w	r2, #32
 8010448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 fd9e 	bl	8010f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010450:	bf00      	nop
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b086      	sub	sp, #24
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010464:	2300      	movs	r3, #0
 8010466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801046e:	2b01      	cmp	r3, #1
 8010470:	d101      	bne.n	8010476 <HAL_TIM_OC_ConfigChannel+0x1e>
 8010472:	2302      	movs	r3, #2
 8010474:	e048      	b.n	8010508 <HAL_TIM_OC_ConfigChannel+0xb0>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2201      	movs	r2, #1
 801047a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b0c      	cmp	r3, #12
 8010482:	d839      	bhi.n	80104f8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8010484:	a201      	add	r2, pc, #4	@ (adr r2, 801048c <HAL_TIM_OC_ConfigChannel+0x34>)
 8010486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048a:	bf00      	nop
 801048c:	080104c1 	.word	0x080104c1
 8010490:	080104f9 	.word	0x080104f9
 8010494:	080104f9 	.word	0x080104f9
 8010498:	080104f9 	.word	0x080104f9
 801049c:	080104cf 	.word	0x080104cf
 80104a0:	080104f9 	.word	0x080104f9
 80104a4:	080104f9 	.word	0x080104f9
 80104a8:	080104f9 	.word	0x080104f9
 80104ac:	080104dd 	.word	0x080104dd
 80104b0:	080104f9 	.word	0x080104f9
 80104b4:	080104f9 	.word	0x080104f9
 80104b8:	080104f9 	.word	0x080104f9
 80104bc:	080104eb 	.word	0x080104eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 fa74 	bl	80109b4 <TIM_OC1_SetConfig>
      break;
 80104cc:	e017      	b.n	80104fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	68b9      	ldr	r1, [r7, #8]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 fadd 	bl	8010a94 <TIM_OC2_SetConfig>
      break;
 80104da:	e010      	b.n	80104fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68b9      	ldr	r1, [r7, #8]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 fb4c 	bl	8010b80 <TIM_OC3_SetConfig>
      break;
 80104e8:	e009      	b.n	80104fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	68b9      	ldr	r1, [r7, #8]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f000 fbb9 	bl	8010c68 <TIM_OC4_SetConfig>
      break;
 80104f6:	e002      	b.n	80104fe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80104f8:	2301      	movs	r3, #1
 80104fa:	75fb      	strb	r3, [r7, #23]
      break;
 80104fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010506:	7dfb      	ldrb	r3, [r7, #23]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010526:	2b01      	cmp	r3, #1
 8010528:	d101      	bne.n	801052e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801052a:	2302      	movs	r3, #2
 801052c:	e0ae      	b.n	801068c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2201      	movs	r2, #1
 8010532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b0c      	cmp	r3, #12
 801053a:	f200 809f 	bhi.w	801067c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801053e:	a201      	add	r2, pc, #4	@ (adr r2, 8010544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010544:	08010579 	.word	0x08010579
 8010548:	0801067d 	.word	0x0801067d
 801054c:	0801067d 	.word	0x0801067d
 8010550:	0801067d 	.word	0x0801067d
 8010554:	080105b9 	.word	0x080105b9
 8010558:	0801067d 	.word	0x0801067d
 801055c:	0801067d 	.word	0x0801067d
 8010560:	0801067d 	.word	0x0801067d
 8010564:	080105fb 	.word	0x080105fb
 8010568:	0801067d 	.word	0x0801067d
 801056c:	0801067d 	.word	0x0801067d
 8010570:	0801067d 	.word	0x0801067d
 8010574:	0801063b 	.word	0x0801063b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	4618      	mov	r0, r3
 8010580:	f000 fa18 	bl	80109b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	699a      	ldr	r2, [r3, #24]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f042 0208 	orr.w	r2, r2, #8
 8010592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	699a      	ldr	r2, [r3, #24]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f022 0204 	bic.w	r2, r2, #4
 80105a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	6999      	ldr	r1, [r3, #24]
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	691a      	ldr	r2, [r3, #16]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	430a      	orrs	r2, r1
 80105b4:	619a      	str	r2, [r3, #24]
      break;
 80105b6:	e064      	b.n	8010682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	68b9      	ldr	r1, [r7, #8]
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fa68 	bl	8010a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	699a      	ldr	r2, [r3, #24]
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80105d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	699a      	ldr	r2, [r3, #24]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80105e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	6999      	ldr	r1, [r3, #24]
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	691b      	ldr	r3, [r3, #16]
 80105ee:	021a      	lsls	r2, r3, #8
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	430a      	orrs	r2, r1
 80105f6:	619a      	str	r2, [r3, #24]
      break;
 80105f8:	e043      	b.n	8010682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	68b9      	ldr	r1, [r7, #8]
 8010600:	4618      	mov	r0, r3
 8010602:	f000 fabd 	bl	8010b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	69da      	ldr	r2, [r3, #28]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f042 0208 	orr.w	r2, r2, #8
 8010614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	69da      	ldr	r2, [r3, #28]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f022 0204 	bic.w	r2, r2, #4
 8010624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	69d9      	ldr	r1, [r3, #28]
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	691a      	ldr	r2, [r3, #16]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	430a      	orrs	r2, r1
 8010636:	61da      	str	r2, [r3, #28]
      break;
 8010638:	e023      	b.n	8010682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	68b9      	ldr	r1, [r7, #8]
 8010640:	4618      	mov	r0, r3
 8010642:	f000 fb11 	bl	8010c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	69da      	ldr	r2, [r3, #28]
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	69da      	ldr	r2, [r3, #28]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	69d9      	ldr	r1, [r3, #28]
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	691b      	ldr	r3, [r3, #16]
 8010670:	021a      	lsls	r2, r3, #8
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	430a      	orrs	r2, r1
 8010678:	61da      	str	r2, [r3, #28]
      break;
 801067a:	e002      	b.n	8010682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801067c:	2301      	movs	r3, #1
 801067e:	75fb      	strb	r3, [r7, #23]
      break;
 8010680:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2200      	movs	r2, #0
 8010686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801068a:	7dfb      	ldrb	r3, [r7, #23]
}
 801068c:	4618      	mov	r0, r3
 801068e:	3718      	adds	r7, #24
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d101      	bne.n	80106b0 <HAL_TIM_ConfigClockSource+0x1c>
 80106ac:	2302      	movs	r3, #2
 80106ae:	e0b4      	b.n	801081a <HAL_TIM_ConfigClockSource+0x186>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2201      	movs	r2, #1
 80106b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2202      	movs	r2, #2
 80106bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80106ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80106d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	68ba      	ldr	r2, [r7, #8]
 80106de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80106e8:	d03e      	beq.n	8010768 <HAL_TIM_ConfigClockSource+0xd4>
 80106ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80106ee:	f200 8087 	bhi.w	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 80106f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80106f6:	f000 8086 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0x172>
 80106fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80106fe:	d87f      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010700:	2b70      	cmp	r3, #112	@ 0x70
 8010702:	d01a      	beq.n	801073a <HAL_TIM_ConfigClockSource+0xa6>
 8010704:	2b70      	cmp	r3, #112	@ 0x70
 8010706:	d87b      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010708:	2b60      	cmp	r3, #96	@ 0x60
 801070a:	d050      	beq.n	80107ae <HAL_TIM_ConfigClockSource+0x11a>
 801070c:	2b60      	cmp	r3, #96	@ 0x60
 801070e:	d877      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010710:	2b50      	cmp	r3, #80	@ 0x50
 8010712:	d03c      	beq.n	801078e <HAL_TIM_ConfigClockSource+0xfa>
 8010714:	2b50      	cmp	r3, #80	@ 0x50
 8010716:	d873      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010718:	2b40      	cmp	r3, #64	@ 0x40
 801071a:	d058      	beq.n	80107ce <HAL_TIM_ConfigClockSource+0x13a>
 801071c:	2b40      	cmp	r3, #64	@ 0x40
 801071e:	d86f      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010720:	2b30      	cmp	r3, #48	@ 0x30
 8010722:	d064      	beq.n	80107ee <HAL_TIM_ConfigClockSource+0x15a>
 8010724:	2b30      	cmp	r3, #48	@ 0x30
 8010726:	d86b      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010728:	2b20      	cmp	r3, #32
 801072a:	d060      	beq.n	80107ee <HAL_TIM_ConfigClockSource+0x15a>
 801072c:	2b20      	cmp	r3, #32
 801072e:	d867      	bhi.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
 8010730:	2b00      	cmp	r3, #0
 8010732:	d05c      	beq.n	80107ee <HAL_TIM_ConfigClockSource+0x15a>
 8010734:	2b10      	cmp	r3, #16
 8010736:	d05a      	beq.n	80107ee <HAL_TIM_ConfigClockSource+0x15a>
 8010738:	e062      	b.n	8010800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6818      	ldr	r0, [r3, #0]
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	6899      	ldr	r1, [r3, #8]
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	f000 fb5d 	bl	8010e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801075c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	68ba      	ldr	r2, [r7, #8]
 8010764:	609a      	str	r2, [r3, #8]
      break;
 8010766:	e04f      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6818      	ldr	r0, [r3, #0]
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	6899      	ldr	r1, [r3, #8]
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	685a      	ldr	r2, [r3, #4]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	f000 fb46 	bl	8010e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	689a      	ldr	r2, [r3, #8]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801078a:	609a      	str	r2, [r3, #8]
      break;
 801078c:	e03c      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6818      	ldr	r0, [r3, #0]
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	6859      	ldr	r1, [r3, #4]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	461a      	mov	r2, r3
 801079c:	f000 faba 	bl	8010d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2150      	movs	r1, #80	@ 0x50
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 fb13 	bl	8010dd2 <TIM_ITRx_SetConfig>
      break;
 80107ac:	e02c      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6818      	ldr	r0, [r3, #0]
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	6859      	ldr	r1, [r3, #4]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	461a      	mov	r2, r3
 80107bc:	f000 fad9 	bl	8010d72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2160      	movs	r1, #96	@ 0x60
 80107c6:	4618      	mov	r0, r3
 80107c8:	f000 fb03 	bl	8010dd2 <TIM_ITRx_SetConfig>
      break;
 80107cc:	e01c      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	6859      	ldr	r1, [r3, #4]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	461a      	mov	r2, r3
 80107dc:	f000 fa9a 	bl	8010d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2140      	movs	r1, #64	@ 0x40
 80107e6:	4618      	mov	r0, r3
 80107e8:	f000 faf3 	bl	8010dd2 <TIM_ITRx_SetConfig>
      break;
 80107ec:	e00c      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4619      	mov	r1, r3
 80107f8:	4610      	mov	r0, r2
 80107fa:	f000 faea 	bl	8010dd2 <TIM_ITRx_SetConfig>
      break;
 80107fe:	e003      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010800:	2301      	movs	r3, #1
 8010802:	73fb      	strb	r3, [r7, #15]
      break;
 8010804:	e000      	b.n	8010808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2201      	movs	r2, #1
 801080c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010818:	7bfb      	ldrb	r3, [r7, #15]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010822:	b480      	push	{r7}
 8010824:	b083      	sub	sp, #12
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801082a:	bf00      	nop
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010836:	b480      	push	{r7}
 8010838:	b083      	sub	sp, #12
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801083e:	bf00      	nop
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801084a:	b480      	push	{r7}
 801084c:	b083      	sub	sp, #12
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010852:	bf00      	nop
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr

0801085e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801085e:	b480      	push	{r7}
 8010860:	b083      	sub	sp, #12
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010866:	bf00      	nop
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
	...

08010874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	4a40      	ldr	r2, [pc, #256]	@ (8010988 <TIM_Base_SetConfig+0x114>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d013      	beq.n	80108b4 <TIM_Base_SetConfig+0x40>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010892:	d00f      	beq.n	80108b4 <TIM_Base_SetConfig+0x40>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4a3d      	ldr	r2, [pc, #244]	@ (801098c <TIM_Base_SetConfig+0x118>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d00b      	beq.n	80108b4 <TIM_Base_SetConfig+0x40>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	4a3c      	ldr	r2, [pc, #240]	@ (8010990 <TIM_Base_SetConfig+0x11c>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d007      	beq.n	80108b4 <TIM_Base_SetConfig+0x40>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4a3b      	ldr	r2, [pc, #236]	@ (8010994 <TIM_Base_SetConfig+0x120>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d003      	beq.n	80108b4 <TIM_Base_SetConfig+0x40>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4a3a      	ldr	r2, [pc, #232]	@ (8010998 <TIM_Base_SetConfig+0x124>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d108      	bne.n	80108c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	4313      	orrs	r3, r2
 80108c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	4a2f      	ldr	r2, [pc, #188]	@ (8010988 <TIM_Base_SetConfig+0x114>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d02b      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108d4:	d027      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	4a2c      	ldr	r2, [pc, #176]	@ (801098c <TIM_Base_SetConfig+0x118>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d023      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4a2b      	ldr	r2, [pc, #172]	@ (8010990 <TIM_Base_SetConfig+0x11c>)
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d01f      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4a2a      	ldr	r2, [pc, #168]	@ (8010994 <TIM_Base_SetConfig+0x120>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d01b      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4a29      	ldr	r2, [pc, #164]	@ (8010998 <TIM_Base_SetConfig+0x124>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d017      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4a28      	ldr	r2, [pc, #160]	@ (801099c <TIM_Base_SetConfig+0x128>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d013      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a27      	ldr	r2, [pc, #156]	@ (80109a0 <TIM_Base_SetConfig+0x12c>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d00f      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4a26      	ldr	r2, [pc, #152]	@ (80109a4 <TIM_Base_SetConfig+0x130>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d00b      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4a25      	ldr	r2, [pc, #148]	@ (80109a8 <TIM_Base_SetConfig+0x134>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d007      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4a24      	ldr	r2, [pc, #144]	@ (80109ac <TIM_Base_SetConfig+0x138>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d003      	beq.n	8010926 <TIM_Base_SetConfig+0xb2>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4a23      	ldr	r2, [pc, #140]	@ (80109b0 <TIM_Base_SetConfig+0x13c>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d108      	bne.n	8010938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801092c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	4313      	orrs	r3, r2
 8010936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	695b      	ldr	r3, [r3, #20]
 8010942:	4313      	orrs	r3, r2
 8010944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	689a      	ldr	r2, [r3, #8]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a0a      	ldr	r2, [pc, #40]	@ (8010988 <TIM_Base_SetConfig+0x114>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d003      	beq.n	801096c <TIM_Base_SetConfig+0xf8>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4a0c      	ldr	r2, [pc, #48]	@ (8010998 <TIM_Base_SetConfig+0x124>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d103      	bne.n	8010974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	691a      	ldr	r2, [r3, #16]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2201      	movs	r2, #1
 8010978:	615a      	str	r2, [r3, #20]
}
 801097a:	bf00      	nop
 801097c:	3714      	adds	r7, #20
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	40010000 	.word	0x40010000
 801098c:	40000400 	.word	0x40000400
 8010990:	40000800 	.word	0x40000800
 8010994:	40000c00 	.word	0x40000c00
 8010998:	40010400 	.word	0x40010400
 801099c:	40014000 	.word	0x40014000
 80109a0:	40014400 	.word	0x40014400
 80109a4:	40014800 	.word	0x40014800
 80109a8:	40001800 	.word	0x40001800
 80109ac:	40001c00 	.word	0x40001c00
 80109b0:	40002000 	.word	0x40002000

080109b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b087      	sub	sp, #28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	f023 0201 	bic.w	r2, r3, #1
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a1b      	ldr	r3, [r3, #32]
 80109ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	699b      	ldr	r3, [r3, #24]
 80109da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f023 0303 	bic.w	r3, r3, #3
 80109ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	68fa      	ldr	r2, [r7, #12]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f023 0302 	bic.w	r3, r3, #2
 80109fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	697a      	ldr	r2, [r7, #20]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4a20      	ldr	r2, [pc, #128]	@ (8010a8c <TIM_OC1_SetConfig+0xd8>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d003      	beq.n	8010a18 <TIM_OC1_SetConfig+0x64>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4a1f      	ldr	r2, [pc, #124]	@ (8010a90 <TIM_OC1_SetConfig+0xdc>)
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d10c      	bne.n	8010a32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	f023 0308 	bic.w	r3, r3, #8
 8010a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	697a      	ldr	r2, [r7, #20]
 8010a26:	4313      	orrs	r3, r2
 8010a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	f023 0304 	bic.w	r3, r3, #4
 8010a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4a15      	ldr	r2, [pc, #84]	@ (8010a8c <TIM_OC1_SetConfig+0xd8>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d003      	beq.n	8010a42 <TIM_OC1_SetConfig+0x8e>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4a14      	ldr	r2, [pc, #80]	@ (8010a90 <TIM_OC1_SetConfig+0xdc>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d111      	bne.n	8010a66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	695b      	ldr	r3, [r3, #20]
 8010a56:	693a      	ldr	r2, [r7, #16]
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	699b      	ldr	r3, [r3, #24]
 8010a60:	693a      	ldr	r2, [r7, #16]
 8010a62:	4313      	orrs	r3, r2
 8010a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	693a      	ldr	r2, [r7, #16]
 8010a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	68fa      	ldr	r2, [r7, #12]
 8010a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	685a      	ldr	r2, [r3, #4]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	697a      	ldr	r2, [r7, #20]
 8010a7e:	621a      	str	r2, [r3, #32]
}
 8010a80:	bf00      	nop
 8010a82:	371c      	adds	r7, #28
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr
 8010a8c:	40010000 	.word	0x40010000
 8010a90:	40010400 	.word	0x40010400

08010a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b087      	sub	sp, #28
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
 8010aa2:	f023 0210 	bic.w	r2, r3, #16
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6a1b      	ldr	r3, [r3, #32]
 8010aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	699b      	ldr	r3, [r3, #24]
 8010aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	021b      	lsls	r3, r3, #8
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	f023 0320 	bic.w	r3, r3, #32
 8010ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	011b      	lsls	r3, r3, #4
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4a22      	ldr	r2, [pc, #136]	@ (8010b78 <TIM_OC2_SetConfig+0xe4>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d003      	beq.n	8010afc <TIM_OC2_SetConfig+0x68>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4a21      	ldr	r2, [pc, #132]	@ (8010b7c <TIM_OC2_SetConfig+0xe8>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d10d      	bne.n	8010b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	011b      	lsls	r3, r3, #4
 8010b0a:	697a      	ldr	r2, [r7, #20]
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4a17      	ldr	r2, [pc, #92]	@ (8010b78 <TIM_OC2_SetConfig+0xe4>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d003      	beq.n	8010b28 <TIM_OC2_SetConfig+0x94>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4a16      	ldr	r2, [pc, #88]	@ (8010b7c <TIM_OC2_SetConfig+0xe8>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d113      	bne.n	8010b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	695b      	ldr	r3, [r3, #20]
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	4313      	orrs	r3, r2
 8010b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	699b      	ldr	r3, [r3, #24]
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	693a      	ldr	r2, [r7, #16]
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	693a      	ldr	r2, [r7, #16]
 8010b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	697a      	ldr	r2, [r7, #20]
 8010b68:	621a      	str	r2, [r3, #32]
}
 8010b6a:	bf00      	nop
 8010b6c:	371c      	adds	r7, #28
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop
 8010b78:	40010000 	.word	0x40010000
 8010b7c:	40010400 	.word	0x40010400

08010b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b087      	sub	sp, #28
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6a1b      	ldr	r3, [r3, #32]
 8010b8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6a1b      	ldr	r3, [r3, #32]
 8010b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	69db      	ldr	r3, [r3, #28]
 8010ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f023 0303 	bic.w	r3, r3, #3
 8010bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	689b      	ldr	r3, [r3, #8]
 8010bce:	021b      	lsls	r3, r3, #8
 8010bd0:	697a      	ldr	r2, [r7, #20]
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4a21      	ldr	r2, [pc, #132]	@ (8010c60 <TIM_OC3_SetConfig+0xe0>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d003      	beq.n	8010be6 <TIM_OC3_SetConfig+0x66>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4a20      	ldr	r2, [pc, #128]	@ (8010c64 <TIM_OC3_SetConfig+0xe4>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d10d      	bne.n	8010c02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	021b      	lsls	r3, r3, #8
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4a16      	ldr	r2, [pc, #88]	@ (8010c60 <TIM_OC3_SetConfig+0xe0>)
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d003      	beq.n	8010c12 <TIM_OC3_SetConfig+0x92>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4a15      	ldr	r2, [pc, #84]	@ (8010c64 <TIM_OC3_SetConfig+0xe4>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d113      	bne.n	8010c3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	011b      	lsls	r3, r3, #4
 8010c28:	693a      	ldr	r2, [r7, #16]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	699b      	ldr	r3, [r3, #24]
 8010c32:	011b      	lsls	r3, r3, #4
 8010c34:	693a      	ldr	r2, [r7, #16]
 8010c36:	4313      	orrs	r3, r2
 8010c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	693a      	ldr	r2, [r7, #16]
 8010c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	68fa      	ldr	r2, [r7, #12]
 8010c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	685a      	ldr	r2, [r3, #4]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	697a      	ldr	r2, [r7, #20]
 8010c52:	621a      	str	r2, [r3, #32]
}
 8010c54:	bf00      	nop
 8010c56:	371c      	adds	r7, #28
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr
 8010c60:	40010000 	.word	0x40010000
 8010c64:	40010400 	.word	0x40010400

08010c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6a1b      	ldr	r3, [r3, #32]
 8010c76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	69db      	ldr	r3, [r3, #28]
 8010c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	021b      	lsls	r3, r3, #8
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	031b      	lsls	r3, r3, #12
 8010cba:	693a      	ldr	r2, [r7, #16]
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4a12      	ldr	r2, [pc, #72]	@ (8010d0c <TIM_OC4_SetConfig+0xa4>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d003      	beq.n	8010cd0 <TIM_OC4_SetConfig+0x68>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	4a11      	ldr	r2, [pc, #68]	@ (8010d10 <TIM_OC4_SetConfig+0xa8>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d109      	bne.n	8010ce4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	695b      	ldr	r3, [r3, #20]
 8010cdc:	019b      	lsls	r3, r3, #6
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	68fa      	ldr	r2, [r7, #12]
 8010cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	685a      	ldr	r2, [r3, #4]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	693a      	ldr	r2, [r7, #16]
 8010cfc:	621a      	str	r2, [r3, #32]
}
 8010cfe:	bf00      	nop
 8010d00:	371c      	adds	r7, #28
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	40010000 	.word	0x40010000
 8010d10:	40010400 	.word	0x40010400

08010d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b087      	sub	sp, #28
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6a1b      	ldr	r3, [r3, #32]
 8010d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6a1b      	ldr	r3, [r3, #32]
 8010d2a:	f023 0201 	bic.w	r2, r3, #1
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	699b      	ldr	r3, [r3, #24]
 8010d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	011b      	lsls	r3, r3, #4
 8010d44:	693a      	ldr	r2, [r7, #16]
 8010d46:	4313      	orrs	r3, r2
 8010d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	f023 030a 	bic.w	r3, r3, #10
 8010d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010d52:	697a      	ldr	r2, [r7, #20]
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	693a      	ldr	r2, [r7, #16]
 8010d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	621a      	str	r2, [r3, #32]
}
 8010d66:	bf00      	nop
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010d72:	b480      	push	{r7}
 8010d74:	b087      	sub	sp, #28
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	60f8      	str	r0, [r7, #12]
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6a1b      	ldr	r3, [r3, #32]
 8010d82:	f023 0210 	bic.w	r2, r3, #16
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	699b      	ldr	r3, [r3, #24]
 8010d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6a1b      	ldr	r3, [r3, #32]
 8010d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	031b      	lsls	r3, r3, #12
 8010da2:	697a      	ldr	r2, [r7, #20]
 8010da4:	4313      	orrs	r3, r2
 8010da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010dae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	011b      	lsls	r3, r3, #4
 8010db4:	693a      	ldr	r2, [r7, #16]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	697a      	ldr	r2, [r7, #20]
 8010dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	693a      	ldr	r2, [r7, #16]
 8010dc4:	621a      	str	r2, [r3, #32]
}
 8010dc6:	bf00      	nop
 8010dc8:	371c      	adds	r7, #28
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010dd2:	b480      	push	{r7}
 8010dd4:	b085      	sub	sp, #20
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010dea:	683a      	ldr	r2, [r7, #0]
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	4313      	orrs	r3, r2
 8010df0:	f043 0307 	orr.w	r3, r3, #7
 8010df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	68fa      	ldr	r2, [r7, #12]
 8010dfa:	609a      	str	r2, [r3, #8]
}
 8010dfc:	bf00      	nop
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	021a      	lsls	r2, r3, #8
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	431a      	orrs	r2, r3
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	697a      	ldr	r2, [r7, #20]
 8010e32:	4313      	orrs	r3, r2
 8010e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	697a      	ldr	r2, [r7, #20]
 8010e3a:	609a      	str	r2, [r3, #8]
}
 8010e3c:	bf00      	nop
 8010e3e:	371c      	adds	r7, #28
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b087      	sub	sp, #28
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	f003 031f 	and.w	r3, r3, #31
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	6a1a      	ldr	r2, [r3, #32]
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	43db      	mvns	r3, r3
 8010e6a:	401a      	ands	r2, r3
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6a1a      	ldr	r2, [r3, #32]
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	f003 031f 	and.w	r3, r3, #31
 8010e7a:	6879      	ldr	r1, [r7, #4]
 8010e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8010e80:	431a      	orrs	r2, r3
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	621a      	str	r2, [r3, #32]
}
 8010e86:	bf00      	nop
 8010e88:	371c      	adds	r7, #28
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr
	...

08010e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d101      	bne.n	8010eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	e05a      	b.n	8010f62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2202      	movs	r2, #2
 8010eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	4313      	orrs	r3, r2
 8010edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a21      	ldr	r2, [pc, #132]	@ (8010f70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d022      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ef8:	d01d      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4a1d      	ldr	r2, [pc, #116]	@ (8010f74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d018      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a1b      	ldr	r2, [pc, #108]	@ (8010f78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d013      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a1a      	ldr	r2, [pc, #104]	@ (8010f7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d00e      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4a18      	ldr	r2, [pc, #96]	@ (8010f80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d009      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4a17      	ldr	r2, [pc, #92]	@ (8010f84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d004      	beq.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a15      	ldr	r2, [pc, #84]	@ (8010f88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d10c      	bne.n	8010f50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	4313      	orrs	r3, r2
 8010f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2201      	movs	r2, #1
 8010f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3714      	adds	r7, #20
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr
 8010f6e:	bf00      	nop
 8010f70:	40010000 	.word	0x40010000
 8010f74:	40000400 	.word	0x40000400
 8010f78:	40000800 	.word	0x40000800
 8010f7c:	40000c00 	.word	0x40000c00
 8010f80:	40010400 	.word	0x40010400
 8010f84:	40014000 	.word	0x40014000
 8010f88:	40001800 	.word	0x40001800

08010f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d101      	bne.n	8010fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e03f      	b.n	8011046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f7f3 fb62 	bl	80046a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2224      	movs	r2, #36	@ 0x24
 8010fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	68da      	ldr	r2, [r3, #12]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 fe51 	bl	8011ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	691a      	ldr	r2, [r3, #16]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801100c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	695a      	ldr	r2, [r3, #20]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801101c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	68da      	ldr	r2, [r3, #12]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801102c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2220      	movs	r2, #32
 8011038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2220      	movs	r2, #32
 8011040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
	...

08011050 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b08c      	sub	sp, #48	@ 0x30
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	4613      	mov	r3, r2
 801105c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011064:	b2db      	uxtb	r3, r3
 8011066:	2b20      	cmp	r3, #32
 8011068:	d165      	bne.n	8011136 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <HAL_UART_Transmit_DMA+0x26>
 8011070:	88fb      	ldrh	r3, [r7, #6]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011076:	2301      	movs	r3, #1
 8011078:	e05e      	b.n	8011138 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011080:	2b01      	cmp	r3, #1
 8011082:	d101      	bne.n	8011088 <HAL_UART_Transmit_DMA+0x38>
 8011084:	2302      	movs	r3, #2
 8011086:	e057      	b.n	8011138 <HAL_UART_Transmit_DMA+0xe8>
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2201      	movs	r2, #1
 801108c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	88fa      	ldrh	r2, [r7, #6]
 801109a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	88fa      	ldrh	r2, [r7, #6]
 80110a0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2200      	movs	r2, #0
 80110a6:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2221      	movs	r2, #33	@ 0x21
 80110ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110b4:	4a22      	ldr	r2, [pc, #136]	@ (8011140 <HAL_UART_Transmit_DMA+0xf0>)
 80110b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110bc:	4a21      	ldr	r2, [pc, #132]	@ (8011144 <HAL_UART_Transmit_DMA+0xf4>)
 80110be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110c4:	4a20      	ldr	r2, [pc, #128]	@ (8011148 <HAL_UART_Transmit_DMA+0xf8>)
 80110c6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110cc:	2200      	movs	r2, #0
 80110ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80110d0:	f107 0308 	add.w	r3, r7, #8
 80110d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80110da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110dc:	6819      	ldr	r1, [r3, #0]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	3304      	adds	r3, #4
 80110e4:	461a      	mov	r2, r3
 80110e6:	88fb      	ldrh	r3, [r7, #6]
 80110e8:	f7fa f828 	bl	800b13c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80110f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	3314      	adds	r3, #20
 8011104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	e853 3f00 	ldrex	r3, [r3]
 801110c:	617b      	str	r3, [r7, #20]
   return(result);
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	3314      	adds	r3, #20
 801111c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801111e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011122:	6a39      	ldr	r1, [r7, #32]
 8011124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011126:	e841 2300 	strex	r3, r2, [r1]
 801112a:	61fb      	str	r3, [r7, #28]
   return(result);
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1e5      	bne.n	80110fe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	e000      	b.n	8011138 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8011136:	2302      	movs	r3, #2
  }
}
 8011138:	4618      	mov	r0, r3
 801113a:	3730      	adds	r7, #48	@ 0x30
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	080117d1 	.word	0x080117d1
 8011144:	0801186b 	.word	0x0801186b
 8011148:	08011887 	.word	0x08011887

0801114c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b090      	sub	sp, #64	@ 0x40
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011154:	2300      	movs	r3, #0
 8011156:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	695b      	ldr	r3, [r3, #20]
 801115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011162:	2b80      	cmp	r3, #128	@ 0x80
 8011164:	bf0c      	ite	eq
 8011166:	2301      	moveq	r3, #1
 8011168:	2300      	movne	r3, #0
 801116a:	b2db      	uxtb	r3, r3
 801116c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011174:	b2db      	uxtb	r3, r3
 8011176:	2b21      	cmp	r3, #33	@ 0x21
 8011178:	d128      	bne.n	80111cc <HAL_UART_DMAStop+0x80>
 801117a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d025      	beq.n	80111cc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	3314      	adds	r3, #20
 8011186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118a:	e853 3f00 	ldrex	r3, [r3]
 801118e:	623b      	str	r3, [r7, #32]
   return(result);
 8011190:	6a3b      	ldr	r3, [r7, #32]
 8011192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011196:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	3314      	adds	r3, #20
 801119e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80111a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80111a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80111a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111a8:	e841 2300 	strex	r3, r2, [r1]
 80111ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80111ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1e5      	bne.n	8011180 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d004      	beq.n	80111c6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fa f813 	bl	800b1ec <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f000 fba7 	bl	801191a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	695b      	ldr	r3, [r3, #20]
 80111d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111d6:	2b40      	cmp	r3, #64	@ 0x40
 80111d8:	bf0c      	ite	eq
 80111da:	2301      	moveq	r3, #1
 80111dc:	2300      	movne	r3, #0
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	2b22      	cmp	r3, #34	@ 0x22
 80111ec:	d128      	bne.n	8011240 <HAL_UART_DMAStop+0xf4>
 80111ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d025      	beq.n	8011240 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	3314      	adds	r3, #20
 80111fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	e853 3f00 	ldrex	r3, [r3]
 8011202:	60fb      	str	r3, [r7, #12]
   return(result);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801120a:	637b      	str	r3, [r7, #52]	@ 0x34
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	3314      	adds	r3, #20
 8011212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011214:	61fa      	str	r2, [r7, #28]
 8011216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011218:	69b9      	ldr	r1, [r7, #24]
 801121a:	69fa      	ldr	r2, [r7, #28]
 801121c:	e841 2300 	strex	r3, r2, [r1]
 8011220:	617b      	str	r3, [r7, #20]
   return(result);
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1e5      	bne.n	80111f4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801122c:	2b00      	cmp	r3, #0
 801122e:	d004      	beq.n	801123a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011234:	4618      	mov	r0, r3
 8011236:	f7f9 ffd9 	bl	800b1ec <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 fb95 	bl	801196a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3740      	adds	r7, #64	@ 0x40
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b0ba      	sub	sp, #232	@ 0xe8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	695b      	ldr	r3, [r3, #20]
 801126e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8011272:	2300      	movs	r3, #0
 8011274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8011278:	2300      	movs	r3, #0
 801127a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801127e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011282:	f003 030f 	and.w	r3, r3, #15
 8011286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 801128a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10f      	bne.n	80112b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011296:	f003 0320 	and.w	r3, r3, #32
 801129a:	2b00      	cmp	r3, #0
 801129c:	d009      	beq.n	80112b2 <HAL_UART_IRQHandler+0x66>
 801129e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112a2:	f003 0320 	and.w	r3, r3, #32
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 fc3c 	bl	8011b28 <UART_Receive_IT>
      return;
 80112b0:	e256      	b.n	8011760 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80112b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f000 80de 	beq.w	8011478 <HAL_UART_IRQHandler+0x22c>
 80112bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80112c0:	f003 0301 	and.w	r3, r3, #1
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d106      	bne.n	80112d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80112c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f000 80d1 	beq.w	8011478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80112d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112da:	f003 0301 	and.w	r3, r3, #1
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00b      	beq.n	80112fa <HAL_UART_IRQHandler+0xae>
 80112e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d005      	beq.n	80112fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112f2:	f043 0201 	orr.w	r2, r3, #1
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80112fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112fe:	f003 0304 	and.w	r3, r3, #4
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00b      	beq.n	801131e <HAL_UART_IRQHandler+0xd2>
 8011306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801130a:	f003 0301 	and.w	r3, r3, #1
 801130e:	2b00      	cmp	r3, #0
 8011310:	d005      	beq.n	801131e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011316:	f043 0202 	orr.w	r2, r3, #2
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801131e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011322:	f003 0302 	and.w	r3, r3, #2
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00b      	beq.n	8011342 <HAL_UART_IRQHandler+0xf6>
 801132a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d005      	beq.n	8011342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801133a:	f043 0204 	orr.w	r2, r3, #4
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011346:	f003 0308 	and.w	r3, r3, #8
 801134a:	2b00      	cmp	r3, #0
 801134c:	d011      	beq.n	8011372 <HAL_UART_IRQHandler+0x126>
 801134e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011352:	f003 0320 	and.w	r3, r3, #32
 8011356:	2b00      	cmp	r3, #0
 8011358:	d105      	bne.n	8011366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801135a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801135e:	f003 0301 	and.w	r3, r3, #1
 8011362:	2b00      	cmp	r3, #0
 8011364:	d005      	beq.n	8011372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801136a:	f043 0208 	orr.w	r2, r3, #8
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011376:	2b00      	cmp	r3, #0
 8011378:	f000 81ed 	beq.w	8011756 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801137c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011380:	f003 0320 	and.w	r3, r3, #32
 8011384:	2b00      	cmp	r3, #0
 8011386:	d008      	beq.n	801139a <HAL_UART_IRQHandler+0x14e>
 8011388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801138c:	f003 0320 	and.w	r3, r3, #32
 8011390:	2b00      	cmp	r3, #0
 8011392:	d002      	beq.n	801139a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f000 fbc7 	bl	8011b28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	695b      	ldr	r3, [r3, #20]
 80113a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113a4:	2b40      	cmp	r3, #64	@ 0x40
 80113a6:	bf0c      	ite	eq
 80113a8:	2301      	moveq	r3, #1
 80113aa:	2300      	movne	r3, #0
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113b6:	f003 0308 	and.w	r3, r3, #8
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d103      	bne.n	80113c6 <HAL_UART_IRQHandler+0x17a>
 80113be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d04f      	beq.n	8011466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f000 facf 	bl	801196a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	695b      	ldr	r3, [r3, #20]
 80113d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113d6:	2b40      	cmp	r3, #64	@ 0x40
 80113d8:	d141      	bne.n	801145e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	3314      	adds	r3, #20
 80113e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80113e8:	e853 3f00 	ldrex	r3, [r3]
 80113ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80113f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80113f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3314      	adds	r3, #20
 8011402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801140a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011416:	e841 2300 	strex	r3, r2, [r1]
 801141a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801141e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d1d9      	bne.n	80113da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801142a:	2b00      	cmp	r3, #0
 801142c:	d013      	beq.n	8011456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011432:	4a7d      	ldr	r2, [pc, #500]	@ (8011628 <HAL_UART_IRQHandler+0x3dc>)
 8011434:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801143a:	4618      	mov	r0, r3
 801143c:	f7f9 ff46 	bl	800b2cc <HAL_DMA_Abort_IT>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d016      	beq.n	8011474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801144a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011450:	4610      	mov	r0, r2
 8011452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011454:	e00e      	b.n	8011474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f9a4 	bl	80117a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801145c:	e00a      	b.n	8011474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 f9a0 	bl	80117a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011464:	e006      	b.n	8011474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f99c 	bl	80117a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8011472:	e170      	b.n	8011756 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011474:	bf00      	nop
    return;
 8011476:	e16e      	b.n	8011756 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801147c:	2b01      	cmp	r3, #1
 801147e:	f040 814a 	bne.w	8011716 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011486:	f003 0310 	and.w	r3, r3, #16
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 8143 	beq.w	8011716 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011494:	f003 0310 	and.w	r3, r3, #16
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 813c 	beq.w	8011716 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801149e:	2300      	movs	r3, #0
 80114a0:	60bb      	str	r3, [r7, #8]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	60bb      	str	r3, [r7, #8]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	60bb      	str	r3, [r7, #8]
 80114b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	695b      	ldr	r3, [r3, #20]
 80114ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114be:	2b40      	cmp	r3, #64	@ 0x40
 80114c0:	f040 80b4 	bne.w	801162c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80114d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f000 8140 	beq.w	801175a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80114de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80114e2:	429a      	cmp	r2, r3
 80114e4:	f080 8139 	bcs.w	801175a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80114ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114f4:	69db      	ldr	r3, [r3, #28]
 80114f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80114fa:	f000 8088 	beq.w	801160e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	330c      	adds	r3, #12
 8011504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801150c:	e853 3f00 	ldrex	r3, [r3]
 8011510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801151c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	330c      	adds	r3, #12
 8011526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801152a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801152e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801153a:	e841 2300 	strex	r3, r2, [r1]
 801153e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011546:	2b00      	cmp	r3, #0
 8011548:	d1d9      	bne.n	80114fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	3314      	adds	r3, #20
 8011550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011554:	e853 3f00 	ldrex	r3, [r3]
 8011558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801155a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801155c:	f023 0301 	bic.w	r3, r3, #1
 8011560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	3314      	adds	r3, #20
 801156a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801156e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801157a:	e841 2300 	strex	r3, r2, [r1]
 801157e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011582:	2b00      	cmp	r3, #0
 8011584:	d1e1      	bne.n	801154a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3314      	adds	r3, #20
 801158c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801158e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011590:	e853 3f00 	ldrex	r3, [r3]
 8011594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801159c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	3314      	adds	r3, #20
 80115a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80115aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80115ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80115b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80115b2:	e841 2300 	strex	r3, r2, [r1]
 80115b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80115b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1e3      	bne.n	8011586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2220      	movs	r2, #32
 80115c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	330c      	adds	r3, #12
 80115d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115d6:	e853 3f00 	ldrex	r3, [r3]
 80115da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80115dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115de:	f023 0310 	bic.w	r3, r3, #16
 80115e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	330c      	adds	r3, #12
 80115ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80115f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80115f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80115f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115f8:	e841 2300 	strex	r3, r2, [r1]
 80115fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80115fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1e3      	bne.n	80115cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011608:	4618      	mov	r0, r3
 801160a:	f7f9 fdef 	bl	800b1ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011616:	b29b      	uxth	r3, r3
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	b29b      	uxth	r3, r3
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 f8ca 	bl	80117b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011624:	e099      	b.n	801175a <HAL_UART_IRQHandler+0x50e>
 8011626:	bf00      	nop
 8011628:	08011a31 	.word	0x08011a31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011634:	b29b      	uxth	r3, r3
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011640:	b29b      	uxth	r3, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 808b 	beq.w	801175e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801164c:	2b00      	cmp	r3, #0
 801164e:	f000 8086 	beq.w	801175e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	330c      	adds	r3, #12
 8011658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801165a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165c:	e853 3f00 	ldrex	r3, [r3]
 8011660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	330c      	adds	r3, #12
 8011672:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011676:	647a      	str	r2, [r7, #68]	@ 0x44
 8011678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801167a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801167c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801167e:	e841 2300 	strex	r3, r2, [r1]
 8011682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1e3      	bne.n	8011652 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	3314      	adds	r3, #20
 8011690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011694:	e853 3f00 	ldrex	r3, [r3]
 8011698:	623b      	str	r3, [r7, #32]
   return(result);
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	f023 0301 	bic.w	r3, r3, #1
 80116a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	3314      	adds	r3, #20
 80116aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80116ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80116b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116b6:	e841 2300 	strex	r3, r2, [r1]
 80116ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1e3      	bne.n	801168a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2220      	movs	r2, #32
 80116c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	330c      	adds	r3, #12
 80116d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	e853 3f00 	ldrex	r3, [r3]
 80116de:	60fb      	str	r3, [r7, #12]
   return(result);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f023 0310 	bic.w	r3, r3, #16
 80116e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	330c      	adds	r3, #12
 80116f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80116f4:	61fa      	str	r2, [r7, #28]
 80116f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116f8:	69b9      	ldr	r1, [r7, #24]
 80116fa:	69fa      	ldr	r2, [r7, #28]
 80116fc:	e841 2300 	strex	r3, r2, [r1]
 8011700:	617b      	str	r3, [r7, #20]
   return(result);
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1e3      	bne.n	80116d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801170c:	4619      	mov	r1, r3
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 f852 	bl	80117b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011714:	e023      	b.n	801175e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801171a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801171e:	2b00      	cmp	r3, #0
 8011720:	d009      	beq.n	8011736 <HAL_UART_IRQHandler+0x4ea>
 8011722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801172a:	2b00      	cmp	r3, #0
 801172c:	d003      	beq.n	8011736 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f992 	bl	8011a58 <UART_Transmit_IT>
    return;
 8011734:	e014      	b.n	8011760 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801173a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00e      	beq.n	8011760 <HAL_UART_IRQHandler+0x514>
 8011742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801174a:	2b00      	cmp	r3, #0
 801174c:	d008      	beq.n	8011760 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 f9d2 	bl	8011af8 <UART_EndTransmit_IT>
    return;
 8011754:	e004      	b.n	8011760 <HAL_UART_IRQHandler+0x514>
    return;
 8011756:	bf00      	nop
 8011758:	e002      	b.n	8011760 <HAL_UART_IRQHandler+0x514>
      return;
 801175a:	bf00      	nop
 801175c:	e000      	b.n	8011760 <HAL_UART_IRQHandler+0x514>
      return;
 801175e:	bf00      	nop
  }
}
 8011760:	37e8      	adds	r7, #232	@ 0xe8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop

08011768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011770:	bf00      	nop
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8011784:	bf00      	nop
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80117ac:	bf00      	nop
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	460b      	mov	r3, r1
 80117c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80117c4:	bf00      	nop
 80117c6:	370c      	adds	r7, #12
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr

080117d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b090      	sub	sp, #64	@ 0x40
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d137      	bne.n	801185c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80117ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117ee:	2200      	movs	r2, #0
 80117f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80117f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	3314      	adds	r3, #20
 80117f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fc:	e853 3f00 	ldrex	r3, [r3]
 8011800:	623b      	str	r3, [r7, #32]
   return(result);
 8011802:	6a3b      	ldr	r3, [r7, #32]
 8011804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011808:	63bb      	str	r3, [r7, #56]	@ 0x38
 801180a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	3314      	adds	r3, #20
 8011810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011812:	633a      	str	r2, [r7, #48]	@ 0x30
 8011814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801181a:	e841 2300 	strex	r3, r2, [r1]
 801181e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1e5      	bne.n	80117f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	330c      	adds	r3, #12
 801182c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	e853 3f00 	ldrex	r3, [r3]
 8011834:	60fb      	str	r3, [r7, #12]
   return(result);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801183c:	637b      	str	r3, [r7, #52]	@ 0x34
 801183e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	330c      	adds	r3, #12
 8011844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011846:	61fa      	str	r2, [r7, #28]
 8011848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184a:	69b9      	ldr	r1, [r7, #24]
 801184c:	69fa      	ldr	r2, [r7, #28]
 801184e:	e841 2300 	strex	r3, r2, [r1]
 8011852:	617b      	str	r3, [r7, #20]
   return(result);
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1e5      	bne.n	8011826 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801185a:	e002      	b.n	8011862 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801185c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801185e:	f7ff ff83 	bl	8011768 <HAL_UART_TxCpltCallback>
}
 8011862:	bf00      	nop
 8011864:	3740      	adds	r7, #64	@ 0x40
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b084      	sub	sp, #16
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011876:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f7ff ff7f 	bl	801177c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801187e:	bf00      	nop
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}

08011886 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b084      	sub	sp, #16
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801188e:	2300      	movs	r3, #0
 8011890:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011896:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	695b      	ldr	r3, [r3, #20]
 801189e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118a2:	2b80      	cmp	r3, #128	@ 0x80
 80118a4:	bf0c      	ite	eq
 80118a6:	2301      	moveq	r3, #1
 80118a8:	2300      	movne	r3, #0
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	2b21      	cmp	r3, #33	@ 0x21
 80118b8:	d108      	bne.n	80118cc <UART_DMAError+0x46>
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d005      	beq.n	80118cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	2200      	movs	r2, #0
 80118c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80118c6:	68b8      	ldr	r0, [r7, #8]
 80118c8:	f000 f827 	bl	801191a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118d6:	2b40      	cmp	r3, #64	@ 0x40
 80118d8:	bf0c      	ite	eq
 80118da:	2301      	moveq	r3, #1
 80118dc:	2300      	movne	r3, #0
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	2b22      	cmp	r3, #34	@ 0x22
 80118ec:	d108      	bne.n	8011900 <UART_DMAError+0x7a>
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d005      	beq.n	8011900 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	2200      	movs	r2, #0
 80118f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80118fa:	68b8      	ldr	r0, [r7, #8]
 80118fc:	f000 f835 	bl	801196a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011904:	f043 0210 	orr.w	r2, r3, #16
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801190c:	68b8      	ldr	r0, [r7, #8]
 801190e:	f7ff ff49 	bl	80117a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011912:	bf00      	nop
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801191a:	b480      	push	{r7}
 801191c:	b089      	sub	sp, #36	@ 0x24
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	330c      	adds	r3, #12
 8011928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	e853 3f00 	ldrex	r3, [r3]
 8011930:	60bb      	str	r3, [r7, #8]
   return(result);
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011938:	61fb      	str	r3, [r7, #28]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	330c      	adds	r3, #12
 8011940:	69fa      	ldr	r2, [r7, #28]
 8011942:	61ba      	str	r2, [r7, #24]
 8011944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011946:	6979      	ldr	r1, [r7, #20]
 8011948:	69ba      	ldr	r2, [r7, #24]
 801194a:	e841 2300 	strex	r3, r2, [r1]
 801194e:	613b      	str	r3, [r7, #16]
   return(result);
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1e5      	bne.n	8011922 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2220      	movs	r2, #32
 801195a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 801195e:	bf00      	nop
 8011960:	3724      	adds	r7, #36	@ 0x24
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801196a:	b480      	push	{r7}
 801196c:	b095      	sub	sp, #84	@ 0x54
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	330c      	adds	r3, #12
 8011978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801197c:	e853 3f00 	ldrex	r3, [r3]
 8011980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	330c      	adds	r3, #12
 8011990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011992:	643a      	str	r2, [r7, #64]	@ 0x40
 8011994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801199a:	e841 2300 	strex	r3, r2, [r1]
 801199e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1e5      	bne.n	8011972 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	3314      	adds	r3, #20
 80119ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ae:	6a3b      	ldr	r3, [r7, #32]
 80119b0:	e853 3f00 	ldrex	r3, [r3]
 80119b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	f023 0301 	bic.w	r3, r3, #1
 80119bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	3314      	adds	r3, #20
 80119c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80119c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80119cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119ce:	e841 2300 	strex	r3, r2, [r1]
 80119d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1e5      	bne.n	80119a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d119      	bne.n	8011a16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	330c      	adds	r3, #12
 80119e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	e853 3f00 	ldrex	r3, [r3]
 80119f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	f023 0310 	bic.w	r3, r3, #16
 80119f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	330c      	adds	r3, #12
 8011a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a02:	61ba      	str	r2, [r7, #24]
 8011a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a06:	6979      	ldr	r1, [r7, #20]
 8011a08:	69ba      	ldr	r2, [r7, #24]
 8011a0a:	e841 2300 	strex	r3, r2, [r1]
 8011a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d1e5      	bne.n	80119e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2220      	movs	r2, #32
 8011a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2200      	movs	r2, #0
 8011a22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011a24:	bf00      	nop
 8011a26:	3754      	adds	r7, #84	@ 0x54
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2200      	movs	r2, #0
 8011a42:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2200      	movs	r2, #0
 8011a48:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a4a:	68f8      	ldr	r0, [r7, #12]
 8011a4c:	f7ff feaa 	bl	80117a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a50:	bf00      	nop
 8011a52:	3710      	adds	r7, #16
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	2b21      	cmp	r3, #33	@ 0x21
 8011a6a:	d13e      	bne.n	8011aea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011a74:	d114      	bne.n	8011aa0 <UART_Transmit_IT+0x48>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d110      	bne.n	8011aa0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6a1b      	ldr	r3, [r3, #32]
 8011a82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6a1b      	ldr	r3, [r3, #32]
 8011a98:	1c9a      	adds	r2, r3, #2
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	621a      	str	r2, [r3, #32]
 8011a9e:	e008      	b.n	8011ab2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6a1b      	ldr	r3, [r3, #32]
 8011aa4:	1c59      	adds	r1, r3, #1
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	6211      	str	r1, [r2, #32]
 8011aaa:	781a      	ldrb	r2, [r3, #0]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10f      	bne.n	8011ae6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	68da      	ldr	r2, [r3, #12]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011ad4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	68da      	ldr	r2, [r3, #12]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011ae4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e000      	b.n	8011aec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011aea:	2302      	movs	r3, #2
  }
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3714      	adds	r7, #20
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr

08011af8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	68da      	ldr	r2, [r3, #12]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011b0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2220      	movs	r2, #32
 8011b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7ff fe25 	bl	8011768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011b1e:	2300      	movs	r3, #0
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b08c      	sub	sp, #48	@ 0x30
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	2b22      	cmp	r3, #34	@ 0x22
 8011b3a:	f040 80ab 	bne.w	8011c94 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	689b      	ldr	r3, [r3, #8]
 8011b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011b46:	d117      	bne.n	8011b78 <UART_Receive_IT+0x50>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	691b      	ldr	r3, [r3, #16]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d113      	bne.n	8011b78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011b50:	2300      	movs	r3, #0
 8011b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b58:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b70:	1c9a      	adds	r2, r3, #2
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	629a      	str	r2, [r3, #40]	@ 0x28
 8011b76:	e026      	b.n	8011bc6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011b8a:	d007      	beq.n	8011b9c <UART_Receive_IT+0x74>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10a      	bne.n	8011baa <UART_Receive_IT+0x82>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	691b      	ldr	r3, [r3, #16]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d106      	bne.n	8011baa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba6:	701a      	strb	r2, [r3, #0]
 8011ba8:	e008      	b.n	8011bbc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011bb6:	b2da      	uxtb	r2, r3
 8011bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bc0:	1c5a      	adds	r2, r3, #1
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d15a      	bne.n	8011c90 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	68da      	ldr	r2, [r3, #12]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f022 0220 	bic.w	r2, r2, #32
 8011be8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	68da      	ldr	r2, [r3, #12]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011bf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	695a      	ldr	r2, [r3, #20]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f022 0201 	bic.w	r2, r2, #1
 8011c08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2220      	movs	r2, #32
 8011c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d135      	bne.n	8011c86 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	330c      	adds	r3, #12
 8011c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	e853 3f00 	ldrex	r3, [r3]
 8011c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	f023 0310 	bic.w	r3, r3, #16
 8011c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	330c      	adds	r3, #12
 8011c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c40:	623a      	str	r2, [r7, #32]
 8011c42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c44:	69f9      	ldr	r1, [r7, #28]
 8011c46:	6a3a      	ldr	r2, [r7, #32]
 8011c48:	e841 2300 	strex	r3, r2, [r1]
 8011c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d1e5      	bne.n	8011c20 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f003 0310 	and.w	r3, r3, #16
 8011c5e:	2b10      	cmp	r3, #16
 8011c60:	d10a      	bne.n	8011c78 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011c62:	2300      	movs	r3, #0
 8011c64:	60fb      	str	r3, [r7, #12]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	60fb      	str	r3, [r7, #12]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	60fb      	str	r3, [r7, #12]
 8011c76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ff fd9a 	bl	80117b8 <HAL_UARTEx_RxEventCallback>
 8011c84:	e002      	b.n	8011c8c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f7ff fd82 	bl	8011790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	e002      	b.n	8011c96 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	e000      	b.n	8011c96 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011c94:	2302      	movs	r3, #2
  }
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3730      	adds	r7, #48	@ 0x30
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
	...

08011ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011ca4:	b0c0      	sub	sp, #256	@ 0x100
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	691b      	ldr	r3, [r3, #16]
 8011cb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cbc:	68d9      	ldr	r1, [r3, #12]
 8011cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	ea40 0301 	orr.w	r3, r0, r1
 8011cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cce:	689a      	ldr	r2, [r3, #8]
 8011cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cd4:	691b      	ldr	r3, [r3, #16]
 8011cd6:	431a      	orrs	r2, r3
 8011cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cdc:	695b      	ldr	r3, [r3, #20]
 8011cde:	431a      	orrs	r2, r3
 8011ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ce4:	69db      	ldr	r3, [r3, #28]
 8011ce6:	4313      	orrs	r3, r2
 8011ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011cf8:	f021 010c 	bic.w	r1, r1, #12
 8011cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011d06:	430b      	orrs	r3, r1
 8011d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	695b      	ldr	r3, [r3, #20]
 8011d12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d1a:	6999      	ldr	r1, [r3, #24]
 8011d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	ea40 0301 	orr.w	r3, r0, r1
 8011d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8011f6c <UART_SetConfig+0x2cc>)
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d005      	beq.n	8011d40 <UART_SetConfig+0xa0>
 8011d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8011f70 <UART_SetConfig+0x2d0>)
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d104      	bne.n	8011d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011d40:	f7fd fb76 	bl	800f430 <HAL_RCC_GetPCLK2Freq>
 8011d44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011d48:	e003      	b.n	8011d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011d4a:	f7fd fb5d 	bl	800f408 <HAL_RCC_GetPCLK1Freq>
 8011d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d56:	69db      	ldr	r3, [r3, #28]
 8011d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011d5c:	f040 810c 	bne.w	8011f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011d64:	2200      	movs	r2, #0
 8011d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011d72:	4622      	mov	r2, r4
 8011d74:	462b      	mov	r3, r5
 8011d76:	1891      	adds	r1, r2, r2
 8011d78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011d7a:	415b      	adcs	r3, r3
 8011d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011d82:	4621      	mov	r1, r4
 8011d84:	eb12 0801 	adds.w	r8, r2, r1
 8011d88:	4629      	mov	r1, r5
 8011d8a:	eb43 0901 	adc.w	r9, r3, r1
 8011d8e:	f04f 0200 	mov.w	r2, #0
 8011d92:	f04f 0300 	mov.w	r3, #0
 8011d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011da2:	4690      	mov	r8, r2
 8011da4:	4699      	mov	r9, r3
 8011da6:	4623      	mov	r3, r4
 8011da8:	eb18 0303 	adds.w	r3, r8, r3
 8011dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011db0:	462b      	mov	r3, r5
 8011db2:	eb49 0303 	adc.w	r3, r9, r3
 8011db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011dce:	460b      	mov	r3, r1
 8011dd0:	18db      	adds	r3, r3, r3
 8011dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	eb42 0303 	adc.w	r3, r2, r3
 8011dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8011ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011de4:	f7ee ff50 	bl	8000c88 <__aeabi_uldivmod>
 8011de8:	4602      	mov	r2, r0
 8011dea:	460b      	mov	r3, r1
 8011dec:	4b61      	ldr	r3, [pc, #388]	@ (8011f74 <UART_SetConfig+0x2d4>)
 8011dee:	fba3 2302 	umull	r2, r3, r3, r2
 8011df2:	095b      	lsrs	r3, r3, #5
 8011df4:	011c      	lsls	r4, r3, #4
 8011df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011e00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011e08:	4642      	mov	r2, r8
 8011e0a:	464b      	mov	r3, r9
 8011e0c:	1891      	adds	r1, r2, r2
 8011e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011e10:	415b      	adcs	r3, r3
 8011e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011e18:	4641      	mov	r1, r8
 8011e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8011e1e:	4649      	mov	r1, r9
 8011e20:	eb43 0b01 	adc.w	fp, r3, r1
 8011e24:	f04f 0200 	mov.w	r2, #0
 8011e28:	f04f 0300 	mov.w	r3, #0
 8011e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011e38:	4692      	mov	sl, r2
 8011e3a:	469b      	mov	fp, r3
 8011e3c:	4643      	mov	r3, r8
 8011e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8011e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011e46:	464b      	mov	r3, r9
 8011e48:	eb4b 0303 	adc.w	r3, fp, r3
 8011e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011e64:	460b      	mov	r3, r1
 8011e66:	18db      	adds	r3, r3, r3
 8011e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	eb42 0303 	adc.w	r3, r2, r3
 8011e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011e7a:	f7ee ff05 	bl	8000c88 <__aeabi_uldivmod>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	460b      	mov	r3, r1
 8011e82:	4611      	mov	r1, r2
 8011e84:	4b3b      	ldr	r3, [pc, #236]	@ (8011f74 <UART_SetConfig+0x2d4>)
 8011e86:	fba3 2301 	umull	r2, r3, r3, r1
 8011e8a:	095b      	lsrs	r3, r3, #5
 8011e8c:	2264      	movs	r2, #100	@ 0x64
 8011e8e:	fb02 f303 	mul.w	r3, r2, r3
 8011e92:	1acb      	subs	r3, r1, r3
 8011e94:	00db      	lsls	r3, r3, #3
 8011e96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011e9a:	4b36      	ldr	r3, [pc, #216]	@ (8011f74 <UART_SetConfig+0x2d4>)
 8011e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8011ea0:	095b      	lsrs	r3, r3, #5
 8011ea2:	005b      	lsls	r3, r3, #1
 8011ea4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011ea8:	441c      	add	r4, r3
 8011eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011eae:	2200      	movs	r2, #0
 8011eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011ebc:	4642      	mov	r2, r8
 8011ebe:	464b      	mov	r3, r9
 8011ec0:	1891      	adds	r1, r2, r2
 8011ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011ec4:	415b      	adcs	r3, r3
 8011ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011ecc:	4641      	mov	r1, r8
 8011ece:	1851      	adds	r1, r2, r1
 8011ed0:	6339      	str	r1, [r7, #48]	@ 0x30
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	414b      	adcs	r3, r1
 8011ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ed8:	f04f 0200 	mov.w	r2, #0
 8011edc:	f04f 0300 	mov.w	r3, #0
 8011ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011ee4:	4659      	mov	r1, fp
 8011ee6:	00cb      	lsls	r3, r1, #3
 8011ee8:	4651      	mov	r1, sl
 8011eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011eee:	4651      	mov	r1, sl
 8011ef0:	00ca      	lsls	r2, r1, #3
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	4642      	mov	r2, r8
 8011efa:	189b      	adds	r3, r3, r2
 8011efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011f00:	464b      	mov	r3, r9
 8011f02:	460a      	mov	r2, r1
 8011f04:	eb42 0303 	adc.w	r3, r2, r3
 8011f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011f18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011f20:	460b      	mov	r3, r1
 8011f22:	18db      	adds	r3, r3, r3
 8011f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f26:	4613      	mov	r3, r2
 8011f28:	eb42 0303 	adc.w	r3, r2, r3
 8011f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011f36:	f7ee fea7 	bl	8000c88 <__aeabi_uldivmod>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011f74 <UART_SetConfig+0x2d4>)
 8011f40:	fba3 1302 	umull	r1, r3, r3, r2
 8011f44:	095b      	lsrs	r3, r3, #5
 8011f46:	2164      	movs	r1, #100	@ 0x64
 8011f48:	fb01 f303 	mul.w	r3, r1, r3
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	00db      	lsls	r3, r3, #3
 8011f50:	3332      	adds	r3, #50	@ 0x32
 8011f52:	4a08      	ldr	r2, [pc, #32]	@ (8011f74 <UART_SetConfig+0x2d4>)
 8011f54:	fba2 2303 	umull	r2, r3, r2, r3
 8011f58:	095b      	lsrs	r3, r3, #5
 8011f5a:	f003 0207 	and.w	r2, r3, #7
 8011f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	4422      	add	r2, r4
 8011f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011f68:	e106      	b.n	8012178 <UART_SetConfig+0x4d8>
 8011f6a:	bf00      	nop
 8011f6c:	40011000 	.word	0x40011000
 8011f70:	40011400 	.word	0x40011400
 8011f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011f82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8011f8a:	4642      	mov	r2, r8
 8011f8c:	464b      	mov	r3, r9
 8011f8e:	1891      	adds	r1, r2, r2
 8011f90:	6239      	str	r1, [r7, #32]
 8011f92:	415b      	adcs	r3, r3
 8011f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011f9a:	4641      	mov	r1, r8
 8011f9c:	1854      	adds	r4, r2, r1
 8011f9e:	4649      	mov	r1, r9
 8011fa0:	eb43 0501 	adc.w	r5, r3, r1
 8011fa4:	f04f 0200 	mov.w	r2, #0
 8011fa8:	f04f 0300 	mov.w	r3, #0
 8011fac:	00eb      	lsls	r3, r5, #3
 8011fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011fb2:	00e2      	lsls	r2, r4, #3
 8011fb4:	4614      	mov	r4, r2
 8011fb6:	461d      	mov	r5, r3
 8011fb8:	4643      	mov	r3, r8
 8011fba:	18e3      	adds	r3, r4, r3
 8011fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011fc0:	464b      	mov	r3, r9
 8011fc2:	eb45 0303 	adc.w	r3, r5, r3
 8011fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011fda:	f04f 0200 	mov.w	r2, #0
 8011fde:	f04f 0300 	mov.w	r3, #0
 8011fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	008b      	lsls	r3, r1, #2
 8011fea:	4621      	mov	r1, r4
 8011fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	008a      	lsls	r2, r1, #2
 8011ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011ff8:	f7ee fe46 	bl	8000c88 <__aeabi_uldivmod>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4b60      	ldr	r3, [pc, #384]	@ (8012184 <UART_SetConfig+0x4e4>)
 8012002:	fba3 2302 	umull	r2, r3, r3, r2
 8012006:	095b      	lsrs	r3, r3, #5
 8012008:	011c      	lsls	r4, r3, #4
 801200a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801200e:	2200      	movs	r2, #0
 8012010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801201c:	4642      	mov	r2, r8
 801201e:	464b      	mov	r3, r9
 8012020:	1891      	adds	r1, r2, r2
 8012022:	61b9      	str	r1, [r7, #24]
 8012024:	415b      	adcs	r3, r3
 8012026:	61fb      	str	r3, [r7, #28]
 8012028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801202c:	4641      	mov	r1, r8
 801202e:	1851      	adds	r1, r2, r1
 8012030:	6139      	str	r1, [r7, #16]
 8012032:	4649      	mov	r1, r9
 8012034:	414b      	adcs	r3, r1
 8012036:	617b      	str	r3, [r7, #20]
 8012038:	f04f 0200 	mov.w	r2, #0
 801203c:	f04f 0300 	mov.w	r3, #0
 8012040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012044:	4659      	mov	r1, fp
 8012046:	00cb      	lsls	r3, r1, #3
 8012048:	4651      	mov	r1, sl
 801204a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801204e:	4651      	mov	r1, sl
 8012050:	00ca      	lsls	r2, r1, #3
 8012052:	4610      	mov	r0, r2
 8012054:	4619      	mov	r1, r3
 8012056:	4603      	mov	r3, r0
 8012058:	4642      	mov	r2, r8
 801205a:	189b      	adds	r3, r3, r2
 801205c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012060:	464b      	mov	r3, r9
 8012062:	460a      	mov	r2, r1
 8012064:	eb42 0303 	adc.w	r3, r2, r3
 8012068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012076:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012078:	f04f 0200 	mov.w	r2, #0
 801207c:	f04f 0300 	mov.w	r3, #0
 8012080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8012084:	4649      	mov	r1, r9
 8012086:	008b      	lsls	r3, r1, #2
 8012088:	4641      	mov	r1, r8
 801208a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801208e:	4641      	mov	r1, r8
 8012090:	008a      	lsls	r2, r1, #2
 8012092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8012096:	f7ee fdf7 	bl	8000c88 <__aeabi_uldivmod>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	4611      	mov	r1, r2
 80120a0:	4b38      	ldr	r3, [pc, #224]	@ (8012184 <UART_SetConfig+0x4e4>)
 80120a2:	fba3 2301 	umull	r2, r3, r3, r1
 80120a6:	095b      	lsrs	r3, r3, #5
 80120a8:	2264      	movs	r2, #100	@ 0x64
 80120aa:	fb02 f303 	mul.w	r3, r2, r3
 80120ae:	1acb      	subs	r3, r1, r3
 80120b0:	011b      	lsls	r3, r3, #4
 80120b2:	3332      	adds	r3, #50	@ 0x32
 80120b4:	4a33      	ldr	r2, [pc, #204]	@ (8012184 <UART_SetConfig+0x4e4>)
 80120b6:	fba2 2303 	umull	r2, r3, r2, r3
 80120ba:	095b      	lsrs	r3, r3, #5
 80120bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120c0:	441c      	add	r4, r3
 80120c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80120c6:	2200      	movs	r2, #0
 80120c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80120ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80120cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80120d0:	4642      	mov	r2, r8
 80120d2:	464b      	mov	r3, r9
 80120d4:	1891      	adds	r1, r2, r2
 80120d6:	60b9      	str	r1, [r7, #8]
 80120d8:	415b      	adcs	r3, r3
 80120da:	60fb      	str	r3, [r7, #12]
 80120dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80120e0:	4641      	mov	r1, r8
 80120e2:	1851      	adds	r1, r2, r1
 80120e4:	6039      	str	r1, [r7, #0]
 80120e6:	4649      	mov	r1, r9
 80120e8:	414b      	adcs	r3, r1
 80120ea:	607b      	str	r3, [r7, #4]
 80120ec:	f04f 0200 	mov.w	r2, #0
 80120f0:	f04f 0300 	mov.w	r3, #0
 80120f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80120f8:	4659      	mov	r1, fp
 80120fa:	00cb      	lsls	r3, r1, #3
 80120fc:	4651      	mov	r1, sl
 80120fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012102:	4651      	mov	r1, sl
 8012104:	00ca      	lsls	r2, r1, #3
 8012106:	4610      	mov	r0, r2
 8012108:	4619      	mov	r1, r3
 801210a:	4603      	mov	r3, r0
 801210c:	4642      	mov	r2, r8
 801210e:	189b      	adds	r3, r3, r2
 8012110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012112:	464b      	mov	r3, r9
 8012114:	460a      	mov	r2, r1
 8012116:	eb42 0303 	adc.w	r3, r2, r3
 801211a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	663b      	str	r3, [r7, #96]	@ 0x60
 8012126:	667a      	str	r2, [r7, #100]	@ 0x64
 8012128:	f04f 0200 	mov.w	r2, #0
 801212c:	f04f 0300 	mov.w	r3, #0
 8012130:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8012134:	4649      	mov	r1, r9
 8012136:	008b      	lsls	r3, r1, #2
 8012138:	4641      	mov	r1, r8
 801213a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801213e:	4641      	mov	r1, r8
 8012140:	008a      	lsls	r2, r1, #2
 8012142:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8012146:	f7ee fd9f 	bl	8000c88 <__aeabi_uldivmod>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	4b0d      	ldr	r3, [pc, #52]	@ (8012184 <UART_SetConfig+0x4e4>)
 8012150:	fba3 1302 	umull	r1, r3, r3, r2
 8012154:	095b      	lsrs	r3, r3, #5
 8012156:	2164      	movs	r1, #100	@ 0x64
 8012158:	fb01 f303 	mul.w	r3, r1, r3
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	011b      	lsls	r3, r3, #4
 8012160:	3332      	adds	r3, #50	@ 0x32
 8012162:	4a08      	ldr	r2, [pc, #32]	@ (8012184 <UART_SetConfig+0x4e4>)
 8012164:	fba2 2303 	umull	r2, r3, r2, r3
 8012168:	095b      	lsrs	r3, r3, #5
 801216a:	f003 020f 	and.w	r2, r3, #15
 801216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4422      	add	r2, r4
 8012176:	609a      	str	r2, [r3, #8]
}
 8012178:	bf00      	nop
 801217a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801217e:	46bd      	mov	sp, r7
 8012180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012184:	51eb851f 	.word	0x51eb851f

08012188 <LL_TIM_SetPrescaler>:
{
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	683a      	ldr	r2, [r7, #0]
 8012196:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012198:	bf00      	nop
 801219a:	370c      	adds	r7, #12
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <LL_TIM_SetAutoReload>:
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80121b4:	bf00      	nop
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <LL_TIM_SetRepetitionCounter>:
{
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80121d0:	bf00      	nop
 80121d2:	370c      	adds	r7, #12
 80121d4:	46bd      	mov	sp, r7
 80121d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121da:	4770      	bx	lr

080121dc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	695b      	ldr	r3, [r3, #20]
 80121e8:	f043 0201 	orr.w	r2, r3, #1
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	615a      	str	r2, [r3, #20]
}
 80121f0:	bf00      	nop
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	4a3d      	ldr	r2, [pc, #244]	@ (8012304 <LL_TIM_Init+0x108>)
 8012210:	4293      	cmp	r3, r2
 8012212:	d013      	beq.n	801223c <LL_TIM_Init+0x40>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801221a:	d00f      	beq.n	801223c <LL_TIM_Init+0x40>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	4a3a      	ldr	r2, [pc, #232]	@ (8012308 <LL_TIM_Init+0x10c>)
 8012220:	4293      	cmp	r3, r2
 8012222:	d00b      	beq.n	801223c <LL_TIM_Init+0x40>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	4a39      	ldr	r2, [pc, #228]	@ (801230c <LL_TIM_Init+0x110>)
 8012228:	4293      	cmp	r3, r2
 801222a:	d007      	beq.n	801223c <LL_TIM_Init+0x40>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	4a38      	ldr	r2, [pc, #224]	@ (8012310 <LL_TIM_Init+0x114>)
 8012230:	4293      	cmp	r3, r2
 8012232:	d003      	beq.n	801223c <LL_TIM_Init+0x40>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	4a37      	ldr	r2, [pc, #220]	@ (8012314 <LL_TIM_Init+0x118>)
 8012238:	4293      	cmp	r3, r2
 801223a:	d106      	bne.n	801224a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	4313      	orrs	r3, r2
 8012248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4a2d      	ldr	r2, [pc, #180]	@ (8012304 <LL_TIM_Init+0x108>)
 801224e:	4293      	cmp	r3, r2
 8012250:	d02b      	beq.n	80122aa <LL_TIM_Init+0xae>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012258:	d027      	beq.n	80122aa <LL_TIM_Init+0xae>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	4a2a      	ldr	r2, [pc, #168]	@ (8012308 <LL_TIM_Init+0x10c>)
 801225e:	4293      	cmp	r3, r2
 8012260:	d023      	beq.n	80122aa <LL_TIM_Init+0xae>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4a29      	ldr	r2, [pc, #164]	@ (801230c <LL_TIM_Init+0x110>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d01f      	beq.n	80122aa <LL_TIM_Init+0xae>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4a28      	ldr	r2, [pc, #160]	@ (8012310 <LL_TIM_Init+0x114>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d01b      	beq.n	80122aa <LL_TIM_Init+0xae>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4a27      	ldr	r2, [pc, #156]	@ (8012314 <LL_TIM_Init+0x118>)
 8012276:	4293      	cmp	r3, r2
 8012278:	d017      	beq.n	80122aa <LL_TIM_Init+0xae>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4a26      	ldr	r2, [pc, #152]	@ (8012318 <LL_TIM_Init+0x11c>)
 801227e:	4293      	cmp	r3, r2
 8012280:	d013      	beq.n	80122aa <LL_TIM_Init+0xae>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4a25      	ldr	r2, [pc, #148]	@ (801231c <LL_TIM_Init+0x120>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d00f      	beq.n	80122aa <LL_TIM_Init+0xae>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4a24      	ldr	r2, [pc, #144]	@ (8012320 <LL_TIM_Init+0x124>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d00b      	beq.n	80122aa <LL_TIM_Init+0xae>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	4a23      	ldr	r2, [pc, #140]	@ (8012324 <LL_TIM_Init+0x128>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d007      	beq.n	80122aa <LL_TIM_Init+0xae>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4a22      	ldr	r2, [pc, #136]	@ (8012328 <LL_TIM_Init+0x12c>)
 801229e:	4293      	cmp	r3, r2
 80122a0:	d003      	beq.n	80122aa <LL_TIM_Init+0xae>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4a21      	ldr	r2, [pc, #132]	@ (801232c <LL_TIM_Init+0x130>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d106      	bne.n	80122b8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	4313      	orrs	r3, r2
 80122b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	68fa      	ldr	r2, [r7, #12]
 80122bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	4619      	mov	r1, r3
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f7ff ff6d 	bl	80121a4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	881b      	ldrh	r3, [r3, #0]
 80122ce:	4619      	mov	r1, r3
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff ff59 	bl	8012188 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4a0a      	ldr	r2, [pc, #40]	@ (8012304 <LL_TIM_Init+0x108>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d003      	beq.n	80122e6 <LL_TIM_Init+0xea>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4a0c      	ldr	r2, [pc, #48]	@ (8012314 <LL_TIM_Init+0x118>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d105      	bne.n	80122f2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	691b      	ldr	r3, [r3, #16]
 80122ea:	4619      	mov	r1, r3
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f7ff ff67 	bl	80121c0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7ff ff72 	bl	80121dc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80122f8:	2300      	movs	r3, #0
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3710      	adds	r7, #16
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	40010000 	.word	0x40010000
 8012308:	40000400 	.word	0x40000400
 801230c:	40000800 	.word	0x40000800
 8012310:	40000c00 	.word	0x40000c00
 8012314:	40010400 	.word	0x40010400
 8012318:	40014000 	.word	0x40014000
 801231c:	40014400 	.word	0x40014400
 8012320:	40014800 	.word	0x40014800
 8012324:	40001800 	.word	0x40001800
 8012328:	40001c00 	.word	0x40001c00
 801232c:	40002000 	.word	0x40002000

08012330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012330:	b084      	sub	sp, #16
 8012332:	b580      	push	{r7, lr}
 8012334:	b084      	sub	sp, #16
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	f107 001c 	add.w	r0, r7, #28
 801233e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012344:	2b01      	cmp	r3, #1
 8012346:	d122      	bne.n	801238e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801234c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 801235c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012360:	687a      	ldr	r2, [r7, #4]
 8012362:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012372:	2b01      	cmp	r3, #1
 8012374:	d105      	bne.n	8012382 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f001 fbee 	bl	8013b64 <USB_CoreReset>
 8012388:	4603      	mov	r3, r0
 801238a:	73fb      	strb	r3, [r7, #15]
 801238c:	e01a      	b.n	80123c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f001 fbe2 	bl	8013b64 <USB_CoreReset>
 80123a0:	4603      	mov	r3, r0
 80123a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80123a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d106      	bne.n	80123b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80123b6:	e005      	b.n	80123c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80123c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c6:	2b01      	cmp	r3, #1
 80123c8:	d10b      	bne.n	80123e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	689b      	ldr	r3, [r3, #8]
 80123ce:	f043 0206 	orr.w	r2, r3, #6
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	f043 0220 	orr.w	r2, r3, #32
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80123e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3710      	adds	r7, #16
 80123e8:	46bd      	mov	sp, r7
 80123ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80123ee:	b004      	add	sp, #16
 80123f0:	4770      	bx	lr
	...

080123f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	4613      	mov	r3, r2
 8012400:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012402:	79fb      	ldrb	r3, [r7, #7]
 8012404:	2b02      	cmp	r3, #2
 8012406:	d165      	bne.n	80124d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	4a41      	ldr	r2, [pc, #260]	@ (8012510 <USB_SetTurnaroundTime+0x11c>)
 801240c:	4293      	cmp	r3, r2
 801240e:	d906      	bls.n	801241e <USB_SetTurnaroundTime+0x2a>
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	4a40      	ldr	r2, [pc, #256]	@ (8012514 <USB_SetTurnaroundTime+0x120>)
 8012414:	4293      	cmp	r3, r2
 8012416:	d202      	bcs.n	801241e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012418:	230f      	movs	r3, #15
 801241a:	617b      	str	r3, [r7, #20]
 801241c:	e062      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	4a3c      	ldr	r2, [pc, #240]	@ (8012514 <USB_SetTurnaroundTime+0x120>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d306      	bcc.n	8012434 <USB_SetTurnaroundTime+0x40>
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	4a3b      	ldr	r2, [pc, #236]	@ (8012518 <USB_SetTurnaroundTime+0x124>)
 801242a:	4293      	cmp	r3, r2
 801242c:	d202      	bcs.n	8012434 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801242e:	230e      	movs	r3, #14
 8012430:	617b      	str	r3, [r7, #20]
 8012432:	e057      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	4a38      	ldr	r2, [pc, #224]	@ (8012518 <USB_SetTurnaroundTime+0x124>)
 8012438:	4293      	cmp	r3, r2
 801243a:	d306      	bcc.n	801244a <USB_SetTurnaroundTime+0x56>
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	4a37      	ldr	r2, [pc, #220]	@ (801251c <USB_SetTurnaroundTime+0x128>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d202      	bcs.n	801244a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012444:	230d      	movs	r3, #13
 8012446:	617b      	str	r3, [r7, #20]
 8012448:	e04c      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	4a33      	ldr	r2, [pc, #204]	@ (801251c <USB_SetTurnaroundTime+0x128>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d306      	bcc.n	8012460 <USB_SetTurnaroundTime+0x6c>
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	4a32      	ldr	r2, [pc, #200]	@ (8012520 <USB_SetTurnaroundTime+0x12c>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d802      	bhi.n	8012460 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801245a:	230c      	movs	r3, #12
 801245c:	617b      	str	r3, [r7, #20]
 801245e:	e041      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	4a2f      	ldr	r2, [pc, #188]	@ (8012520 <USB_SetTurnaroundTime+0x12c>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d906      	bls.n	8012476 <USB_SetTurnaroundTime+0x82>
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	4a2e      	ldr	r2, [pc, #184]	@ (8012524 <USB_SetTurnaroundTime+0x130>)
 801246c:	4293      	cmp	r3, r2
 801246e:	d802      	bhi.n	8012476 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012470:	230b      	movs	r3, #11
 8012472:	617b      	str	r3, [r7, #20]
 8012474:	e036      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	4a2a      	ldr	r2, [pc, #168]	@ (8012524 <USB_SetTurnaroundTime+0x130>)
 801247a:	4293      	cmp	r3, r2
 801247c:	d906      	bls.n	801248c <USB_SetTurnaroundTime+0x98>
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	4a29      	ldr	r2, [pc, #164]	@ (8012528 <USB_SetTurnaroundTime+0x134>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d802      	bhi.n	801248c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012486:	230a      	movs	r3, #10
 8012488:	617b      	str	r3, [r7, #20]
 801248a:	e02b      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	4a26      	ldr	r2, [pc, #152]	@ (8012528 <USB_SetTurnaroundTime+0x134>)
 8012490:	4293      	cmp	r3, r2
 8012492:	d906      	bls.n	80124a2 <USB_SetTurnaroundTime+0xae>
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	4a25      	ldr	r2, [pc, #148]	@ (801252c <USB_SetTurnaroundTime+0x138>)
 8012498:	4293      	cmp	r3, r2
 801249a:	d202      	bcs.n	80124a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801249c:	2309      	movs	r3, #9
 801249e:	617b      	str	r3, [r7, #20]
 80124a0:	e020      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	4a21      	ldr	r2, [pc, #132]	@ (801252c <USB_SetTurnaroundTime+0x138>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d306      	bcc.n	80124b8 <USB_SetTurnaroundTime+0xc4>
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	4a20      	ldr	r2, [pc, #128]	@ (8012530 <USB_SetTurnaroundTime+0x13c>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d802      	bhi.n	80124b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80124b2:	2308      	movs	r3, #8
 80124b4:	617b      	str	r3, [r7, #20]
 80124b6:	e015      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	4a1d      	ldr	r2, [pc, #116]	@ (8012530 <USB_SetTurnaroundTime+0x13c>)
 80124bc:	4293      	cmp	r3, r2
 80124be:	d906      	bls.n	80124ce <USB_SetTurnaroundTime+0xda>
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	4a1c      	ldr	r2, [pc, #112]	@ (8012534 <USB_SetTurnaroundTime+0x140>)
 80124c4:	4293      	cmp	r3, r2
 80124c6:	d202      	bcs.n	80124ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80124c8:	2307      	movs	r3, #7
 80124ca:	617b      	str	r3, [r7, #20]
 80124cc:	e00a      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80124ce:	2306      	movs	r3, #6
 80124d0:	617b      	str	r3, [r7, #20]
 80124d2:	e007      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80124d4:	79fb      	ldrb	r3, [r7, #7]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d102      	bne.n	80124e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80124da:	2309      	movs	r3, #9
 80124dc:	617b      	str	r3, [r7, #20]
 80124de:	e001      	b.n	80124e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80124e0:	2309      	movs	r3, #9
 80124e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	68da      	ldr	r2, [r3, #12]
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	029b      	lsls	r3, r3, #10
 80124f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80124fc:	431a      	orrs	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012502:	2300      	movs	r3, #0
}
 8012504:	4618      	mov	r0, r3
 8012506:	371c      	adds	r7, #28
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr
 8012510:	00d8acbf 	.word	0x00d8acbf
 8012514:	00e4e1c0 	.word	0x00e4e1c0
 8012518:	00f42400 	.word	0x00f42400
 801251c:	01067380 	.word	0x01067380
 8012520:	011a499f 	.word	0x011a499f
 8012524:	01312cff 	.word	0x01312cff
 8012528:	014ca43f 	.word	0x014ca43f
 801252c:	016e3600 	.word	0x016e3600
 8012530:	01a6ab1f 	.word	0x01a6ab1f
 8012534:	01e84800 	.word	0x01e84800

08012538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	689b      	ldr	r3, [r3, #8]
 8012544:	f043 0201 	orr.w	r2, r3, #1
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801254c:	2300      	movs	r3, #0
}
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr

0801255a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801255a:	b480      	push	{r7}
 801255c:	b083      	sub	sp, #12
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	689b      	ldr	r3, [r3, #8]
 8012566:	f023 0201 	bic.w	r2, r3, #1
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	370c      	adds	r7, #12
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	460b      	mov	r3, r1
 8012586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012588:	2300      	movs	r3, #0
 801258a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	68db      	ldr	r3, [r3, #12]
 8012590:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012598:	78fb      	ldrb	r3, [r7, #3]
 801259a:	2b01      	cmp	r3, #1
 801259c:	d115      	bne.n	80125ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80125aa:	2001      	movs	r0, #1
 80125ac:	f7f7 fafe 	bl	8009bac <HAL_Delay>
      ms++;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	3301      	adds	r3, #1
 80125b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f001 fa45 	bl	8013a46 <USB_GetMode>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d01e      	beq.n	8012600 <USB_SetCurrentMode+0x84>
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	2b31      	cmp	r3, #49	@ 0x31
 80125c6:	d9f0      	bls.n	80125aa <USB_SetCurrentMode+0x2e>
 80125c8:	e01a      	b.n	8012600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80125ca:	78fb      	ldrb	r3, [r7, #3]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d115      	bne.n	80125fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80125dc:	2001      	movs	r0, #1
 80125de:	f7f7 fae5 	bl	8009bac <HAL_Delay>
      ms++;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	3301      	adds	r3, #1
 80125e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f001 fa2c 	bl	8013a46 <USB_GetMode>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d005      	beq.n	8012600 <USB_SetCurrentMode+0x84>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b31      	cmp	r3, #49	@ 0x31
 80125f8:	d9f0      	bls.n	80125dc <USB_SetCurrentMode+0x60>
 80125fa:	e001      	b.n	8012600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80125fc:	2301      	movs	r3, #1
 80125fe:	e005      	b.n	801260c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2b32      	cmp	r3, #50	@ 0x32
 8012604:	d101      	bne.n	801260a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012606:	2301      	movs	r3, #1
 8012608:	e000      	b.n	801260c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801260a:	2300      	movs	r3, #0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012614:	b084      	sub	sp, #16
 8012616:	b580      	push	{r7, lr}
 8012618:	b086      	sub	sp, #24
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012626:	2300      	movs	r3, #0
 8012628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801262e:	2300      	movs	r3, #0
 8012630:	613b      	str	r3, [r7, #16]
 8012632:	e009      	b.n	8012648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	3340      	adds	r3, #64	@ 0x40
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	4413      	add	r3, r2
 801263e:	2200      	movs	r2, #0
 8012640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	3301      	adds	r3, #1
 8012646:	613b      	str	r3, [r7, #16]
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	2b0e      	cmp	r3, #14
 801264c:	d9f2      	bls.n	8012634 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801264e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012650:	2b00      	cmp	r3, #0
 8012652:	d11c      	bne.n	801268e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012662:	f043 0302 	orr.w	r3, r3, #2
 8012666:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801266c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012678:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012684:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	639a      	str	r2, [r3, #56]	@ 0x38
 801268c:	e00b      	b.n	80126a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012692:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801269e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80126ac:	461a      	mov	r2, r3
 80126ae:	2300      	movs	r3, #0
 80126b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126b8:	4619      	mov	r1, r3
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126c0:	461a      	mov	r2, r3
 80126c2:	680b      	ldr	r3, [r1, #0]
 80126c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80126c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126c8:	2b01      	cmp	r3, #1
 80126ca:	d10c      	bne.n	80126e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80126cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d104      	bne.n	80126dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80126d2:	2100      	movs	r1, #0
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f965 	bl	80129a4 <USB_SetDevSpeed>
 80126da:	e008      	b.n	80126ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80126dc:	2101      	movs	r1, #1
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 f960 	bl	80129a4 <USB_SetDevSpeed>
 80126e4:	e003      	b.n	80126ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80126e6:	2103      	movs	r1, #3
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f95b 	bl	80129a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80126ee:	2110      	movs	r1, #16
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 f8f3 	bl	80128dc <USB_FlushTxFifo>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d001      	beq.n	8012700 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 f91f 	bl	8012944 <USB_FlushRxFifo>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d001      	beq.n	8012710 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801270c:	2301      	movs	r3, #1
 801270e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012716:	461a      	mov	r2, r3
 8012718:	2300      	movs	r3, #0
 801271a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012722:	461a      	mov	r2, r3
 8012724:	2300      	movs	r3, #0
 8012726:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801272e:	461a      	mov	r2, r3
 8012730:	2300      	movs	r3, #0
 8012732:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012734:	2300      	movs	r3, #0
 8012736:	613b      	str	r3, [r7, #16]
 8012738:	e043      	b.n	80127c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	015a      	lsls	r2, r3, #5
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	4413      	add	r3, r2
 8012742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801274c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012750:	d118      	bne.n	8012784 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d10a      	bne.n	801276e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	015a      	lsls	r2, r3, #5
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	4413      	add	r3, r2
 8012760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012764:	461a      	mov	r2, r3
 8012766:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801276a:	6013      	str	r3, [r2, #0]
 801276c:	e013      	b.n	8012796 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	015a      	lsls	r2, r3, #5
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	4413      	add	r3, r2
 8012776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801277a:	461a      	mov	r2, r3
 801277c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012780:	6013      	str	r3, [r2, #0]
 8012782:	e008      	b.n	8012796 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	015a      	lsls	r2, r3, #5
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	4413      	add	r3, r2
 801278c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012790:	461a      	mov	r2, r3
 8012792:	2300      	movs	r3, #0
 8012794:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	015a      	lsls	r2, r3, #5
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	4413      	add	r3, r2
 801279e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127a2:	461a      	mov	r2, r3
 80127a4:	2300      	movs	r3, #0
 80127a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	015a      	lsls	r2, r3, #5
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	4413      	add	r3, r2
 80127b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127b4:	461a      	mov	r2, r3
 80127b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80127ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	3301      	adds	r3, #1
 80127c0:	613b      	str	r3, [r7, #16]
 80127c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d3b7      	bcc.n	801273a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127ca:	2300      	movs	r3, #0
 80127cc:	613b      	str	r3, [r7, #16]
 80127ce:	e043      	b.n	8012858 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	015a      	lsls	r2, r3, #5
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	4413      	add	r3, r2
 80127d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80127e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80127e6:	d118      	bne.n	801281a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d10a      	bne.n	8012804 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	015a      	lsls	r2, r3, #5
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	4413      	add	r3, r2
 80127f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127fa:	461a      	mov	r2, r3
 80127fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012800:	6013      	str	r3, [r2, #0]
 8012802:	e013      	b.n	801282c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	015a      	lsls	r2, r3, #5
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	4413      	add	r3, r2
 801280c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012810:	461a      	mov	r2, r3
 8012812:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012816:	6013      	str	r3, [r2, #0]
 8012818:	e008      	b.n	801282c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	015a      	lsls	r2, r3, #5
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	4413      	add	r3, r2
 8012822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012826:	461a      	mov	r2, r3
 8012828:	2300      	movs	r3, #0
 801282a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	015a      	lsls	r2, r3, #5
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	4413      	add	r3, r2
 8012834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012838:	461a      	mov	r2, r3
 801283a:	2300      	movs	r3, #0
 801283c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	015a      	lsls	r2, r3, #5
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	4413      	add	r3, r2
 8012846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801284a:	461a      	mov	r2, r3
 801284c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	3301      	adds	r3, #1
 8012856:	613b      	str	r3, [r7, #16]
 8012858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285a:	693a      	ldr	r2, [r7, #16]
 801285c:	429a      	cmp	r2, r3
 801285e:	d3b7      	bcc.n	80127d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012866:	691b      	ldr	r3, [r3, #16]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801286e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012872:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8012880:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012884:	2b00      	cmp	r3, #0
 8012886:	d105      	bne.n	8012894 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	699b      	ldr	r3, [r3, #24]
 801288c:	f043 0210 	orr.w	r2, r3, #16
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	699a      	ldr	r2, [r3, #24]
 8012898:	4b0f      	ldr	r3, [pc, #60]	@ (80128d8 <USB_DevInit+0x2c4>)
 801289a:	4313      	orrs	r3, r2
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80128a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d005      	beq.n	80128b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	699b      	ldr	r3, [r3, #24]
 80128aa:	f043 0208 	orr.w	r2, r3, #8
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80128b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d107      	bne.n	80128c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	699b      	ldr	r3, [r3, #24]
 80128bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80128c0:	f043 0304 	orr.w	r3, r3, #4
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3718      	adds	r7, #24
 80128ce:	46bd      	mov	sp, r7
 80128d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80128d4:	b004      	add	sp, #16
 80128d6:	4770      	bx	lr
 80128d8:	803c3800 	.word	0x803c3800

080128dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80128dc:	b480      	push	{r7}
 80128de:	b085      	sub	sp, #20
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80128e6:	2300      	movs	r3, #0
 80128e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	3301      	adds	r3, #1
 80128ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	4a13      	ldr	r2, [pc, #76]	@ (8012940 <USB_FlushTxFifo+0x64>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d901      	bls.n	80128fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80128f8:	2303      	movs	r3, #3
 80128fa:	e01b      	b.n	8012934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	691b      	ldr	r3, [r3, #16]
 8012900:	2b00      	cmp	r3, #0
 8012902:	daf2      	bge.n	80128ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012904:	2300      	movs	r3, #0
 8012906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	019b      	lsls	r3, r3, #6
 801290c:	f043 0220 	orr.w	r2, r3, #32
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	3301      	adds	r3, #1
 8012918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	4a08      	ldr	r2, [pc, #32]	@ (8012940 <USB_FlushTxFifo+0x64>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d901      	bls.n	8012926 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012922:	2303      	movs	r3, #3
 8012924:	e006      	b.n	8012934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	691b      	ldr	r3, [r3, #16]
 801292a:	f003 0320 	and.w	r3, r3, #32
 801292e:	2b20      	cmp	r3, #32
 8012930:	d0f0      	beq.n	8012914 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	3714      	adds	r7, #20
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr
 8012940:	00030d40 	.word	0x00030d40

08012944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012944:	b480      	push	{r7}
 8012946:	b085      	sub	sp, #20
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801294c:	2300      	movs	r3, #0
 801294e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	3301      	adds	r3, #1
 8012954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	4a11      	ldr	r2, [pc, #68]	@ (80129a0 <USB_FlushRxFifo+0x5c>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d901      	bls.n	8012962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801295e:	2303      	movs	r3, #3
 8012960:	e018      	b.n	8012994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	691b      	ldr	r3, [r3, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	daf2      	bge.n	8012950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801296a:	2300      	movs	r3, #0
 801296c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2210      	movs	r2, #16
 8012972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	3301      	adds	r3, #1
 8012978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	4a08      	ldr	r2, [pc, #32]	@ (80129a0 <USB_FlushRxFifo+0x5c>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d901      	bls.n	8012986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012982:	2303      	movs	r3, #3
 8012984:	e006      	b.n	8012994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	691b      	ldr	r3, [r3, #16]
 801298a:	f003 0310 	and.w	r3, r3, #16
 801298e:	2b10      	cmp	r3, #16
 8012990:	d0f0      	beq.n	8012974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3714      	adds	r7, #20
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr
 80129a0:	00030d40 	.word	0x00030d40

080129a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b085      	sub	sp, #20
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	460b      	mov	r3, r1
 80129ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	78fb      	ldrb	r3, [r7, #3]
 80129be:	68f9      	ldr	r1, [r7, #12]
 80129c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80129c4:	4313      	orrs	r3, r2
 80129c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3714      	adds	r7, #20
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr

080129d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80129d6:	b480      	push	{r7}
 80129d8:	b087      	sub	sp, #28
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80129e8:	689b      	ldr	r3, [r3, #8]
 80129ea:	f003 0306 	and.w	r3, r3, #6
 80129ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d102      	bne.n	80129fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80129f6:	2300      	movs	r3, #0
 80129f8:	75fb      	strb	r3, [r7, #23]
 80129fa:	e00a      	b.n	8012a12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2b02      	cmp	r3, #2
 8012a00:	d002      	beq.n	8012a08 <USB_GetDevSpeed+0x32>
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2b06      	cmp	r3, #6
 8012a06:	d102      	bne.n	8012a0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012a08:	2302      	movs	r3, #2
 8012a0a:	75fb      	strb	r3, [r7, #23]
 8012a0c:	e001      	b.n	8012a12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012a0e:	230f      	movs	r3, #15
 8012a10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	371c      	adds	r7, #28
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	785b      	ldrb	r3, [r3, #1]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d13a      	bne.n	8012ab2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012a42:	69da      	ldr	r2, [r3, #28]
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	f003 030f 	and.w	r3, r3, #15
 8012a4c:	2101      	movs	r1, #1
 8012a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	68f9      	ldr	r1, [r7, #12]
 8012a56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	015a      	lsls	r2, r3, #5
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	4413      	add	r3, r2
 8012a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d155      	bne.n	8012b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	015a      	lsls	r2, r3, #5
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	4413      	add	r3, r2
 8012a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	791b      	ldrb	r3, [r3, #4]
 8012a8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	059b      	lsls	r3, r3, #22
 8012a96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	0151      	lsls	r1, r2, #5
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	440a      	add	r2, r1
 8012aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012aae:	6013      	str	r3, [r2, #0]
 8012ab0:	e036      	b.n	8012b20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ab8:	69da      	ldr	r2, [r3, #28]
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	f003 030f 	and.w	r3, r3, #15
 8012ac2:	2101      	movs	r1, #1
 8012ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8012ac8:	041b      	lsls	r3, r3, #16
 8012aca:	68f9      	ldr	r1, [r7, #12]
 8012acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ad0:	4313      	orrs	r3, r2
 8012ad2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	015a      	lsls	r2, r3, #5
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	4413      	add	r3, r2
 8012adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d11a      	bne.n	8012b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	015a      	lsls	r2, r3, #5
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	4413      	add	r3, r2
 8012af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	791b      	ldrb	r3, [r3, #4]
 8012b04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012b06:	430b      	orrs	r3, r1
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	68ba      	ldr	r2, [r7, #8]
 8012b0c:	0151      	lsls	r1, r2, #5
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	440a      	add	r2, r1
 8012b12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
	...

08012b30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	785b      	ldrb	r3, [r3, #1]
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d161      	bne.n	8012c10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	015a      	lsls	r2, r3, #5
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	4413      	add	r3, r2
 8012b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012b62:	d11f      	bne.n	8012ba4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	015a      	lsls	r2, r3, #5
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	0151      	lsls	r1, r2, #5
 8012b76:	68fa      	ldr	r2, [r7, #12]
 8012b78:	440a      	add	r2, r1
 8012b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012b82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	015a      	lsls	r2, r3, #5
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	68ba      	ldr	r2, [r7, #8]
 8012b94:	0151      	lsls	r1, r2, #5
 8012b96:	68fa      	ldr	r2, [r7, #12]
 8012b98:	440a      	add	r2, r1
 8012b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	f003 030f 	and.w	r3, r3, #15
 8012bb4:	2101      	movs	r1, #1
 8012bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	43db      	mvns	r3, r3
 8012bbe:	68f9      	ldr	r1, [r7, #12]
 8012bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012bc4:	4013      	ands	r3, r2
 8012bc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bce:	69da      	ldr	r2, [r3, #28]
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	f003 030f 	and.w	r3, r3, #15
 8012bd8:	2101      	movs	r1, #1
 8012bda:	fa01 f303 	lsl.w	r3, r1, r3
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	43db      	mvns	r3, r3
 8012be2:	68f9      	ldr	r1, [r7, #12]
 8012be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012be8:	4013      	ands	r3, r2
 8012bea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	015a      	lsls	r2, r3, #5
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	0159      	lsls	r1, r3, #5
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	440b      	add	r3, r1
 8012c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c06:	4619      	mov	r1, r3
 8012c08:	4b35      	ldr	r3, [pc, #212]	@ (8012ce0 <USB_DeactivateEndpoint+0x1b0>)
 8012c0a:	4013      	ands	r3, r2
 8012c0c:	600b      	str	r3, [r1, #0]
 8012c0e:	e060      	b.n	8012cd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	015a      	lsls	r2, r3, #5
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	4413      	add	r3, r2
 8012c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012c22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012c26:	d11f      	bne.n	8012c68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	015a      	lsls	r2, r3, #5
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	4413      	add	r3, r2
 8012c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	68ba      	ldr	r2, [r7, #8]
 8012c38:	0151      	lsls	r1, r2, #5
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	440a      	add	r2, r1
 8012c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012c42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012c46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	015a      	lsls	r2, r3, #5
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	4413      	add	r3, r2
 8012c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	0151      	lsls	r1, r2, #5
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	440a      	add	r2, r1
 8012c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012c62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012c66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	f003 030f 	and.w	r3, r3, #15
 8012c78:	2101      	movs	r1, #1
 8012c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8012c7e:	041b      	lsls	r3, r3, #16
 8012c80:	43db      	mvns	r3, r3
 8012c82:	68f9      	ldr	r1, [r7, #12]
 8012c84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012c88:	4013      	ands	r3, r2
 8012c8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c92:	69da      	ldr	r2, [r3, #28]
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	f003 030f 	and.w	r3, r3, #15
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8012ca2:	041b      	lsls	r3, r3, #16
 8012ca4:	43db      	mvns	r3, r3
 8012ca6:	68f9      	ldr	r1, [r7, #12]
 8012ca8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012cac:	4013      	ands	r3, r2
 8012cae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	015a      	lsls	r2, r3, #5
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	0159      	lsls	r1, r3, #5
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	440b      	add	r3, r1
 8012cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cca:	4619      	mov	r1, r3
 8012ccc:	4b05      	ldr	r3, [pc, #20]	@ (8012ce4 <USB_DeactivateEndpoint+0x1b4>)
 8012cce:	4013      	ands	r3, r2
 8012cd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3714      	adds	r7, #20
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr
 8012ce0:	ec337800 	.word	0xec337800
 8012ce4:	eff37800 	.word	0xeff37800

08012ce8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b08a      	sub	sp, #40	@ 0x28
 8012cec:	af02      	add	r7, sp, #8
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	4613      	mov	r3, r2
 8012cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	785b      	ldrb	r3, [r3, #1]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	f040 815c 	bne.w	8012fc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	699b      	ldr	r3, [r3, #24]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d132      	bne.n	8012d78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	015a      	lsls	r2, r3, #5
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	4413      	add	r3, r2
 8012d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d1e:	691b      	ldr	r3, [r3, #16]
 8012d20:	69ba      	ldr	r2, [r7, #24]
 8012d22:	0151      	lsls	r1, r2, #5
 8012d24:	69fa      	ldr	r2, [r7, #28]
 8012d26:	440a      	add	r2, r1
 8012d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d2c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8012d30:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8012d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	015a      	lsls	r2, r3, #5
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d42:	691b      	ldr	r3, [r3, #16]
 8012d44:	69ba      	ldr	r2, [r7, #24]
 8012d46:	0151      	lsls	r1, r2, #5
 8012d48:	69fa      	ldr	r2, [r7, #28]
 8012d4a:	440a      	add	r2, r1
 8012d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012d54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d56:	69bb      	ldr	r3, [r7, #24]
 8012d58:	015a      	lsls	r2, r3, #5
 8012d5a:	69fb      	ldr	r3, [r7, #28]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d62:	691b      	ldr	r3, [r3, #16]
 8012d64:	69ba      	ldr	r2, [r7, #24]
 8012d66:	0151      	lsls	r1, r2, #5
 8012d68:	69fa      	ldr	r2, [r7, #28]
 8012d6a:	440a      	add	r2, r1
 8012d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d70:	0cdb      	lsrs	r3, r3, #19
 8012d72:	04db      	lsls	r3, r3, #19
 8012d74:	6113      	str	r3, [r2, #16]
 8012d76:	e074      	b.n	8012e62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	015a      	lsls	r2, r3, #5
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	4413      	add	r3, r2
 8012d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	69ba      	ldr	r2, [r7, #24]
 8012d88:	0151      	lsls	r1, r2, #5
 8012d8a:	69fa      	ldr	r2, [r7, #28]
 8012d8c:	440a      	add	r2, r1
 8012d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d92:	0cdb      	lsrs	r3, r3, #19
 8012d94:	04db      	lsls	r3, r3, #19
 8012d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	015a      	lsls	r2, r3, #5
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	4413      	add	r3, r2
 8012da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012da4:	691b      	ldr	r3, [r3, #16]
 8012da6:	69ba      	ldr	r2, [r7, #24]
 8012da8:	0151      	lsls	r1, r2, #5
 8012daa:	69fa      	ldr	r2, [r7, #28]
 8012dac:	440a      	add	r2, r1
 8012dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012db2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8012db6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8012dba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	015a      	lsls	r2, r3, #5
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012dc8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	6999      	ldr	r1, [r3, #24]
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	440b      	add	r3, r1
 8012dd4:	1e59      	subs	r1, r3, #1
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8012dde:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012de0:	4b9d      	ldr	r3, [pc, #628]	@ (8013058 <USB_EPStartXfer+0x370>)
 8012de2:	400b      	ands	r3, r1
 8012de4:	69b9      	ldr	r1, [r7, #24]
 8012de6:	0148      	lsls	r0, r1, #5
 8012de8:	69f9      	ldr	r1, [r7, #28]
 8012dea:	4401      	add	r1, r0
 8012dec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012df0:	4313      	orrs	r3, r2
 8012df2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	015a      	lsls	r2, r3, #5
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e00:	691a      	ldr	r2, [r3, #16]
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	699b      	ldr	r3, [r3, #24]
 8012e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012e0a:	69b9      	ldr	r1, [r7, #24]
 8012e0c:	0148      	lsls	r0, r1, #5
 8012e0e:	69f9      	ldr	r1, [r7, #28]
 8012e10:	4401      	add	r1, r0
 8012e12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012e16:	4313      	orrs	r3, r2
 8012e18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	791b      	ldrb	r3, [r3, #4]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d11f      	bne.n	8012e62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	015a      	lsls	r2, r3, #5
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	4413      	add	r3, r2
 8012e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	69ba      	ldr	r2, [r7, #24]
 8012e32:	0151      	lsls	r1, r2, #5
 8012e34:	69fa      	ldr	r2, [r7, #28]
 8012e36:	440a      	add	r2, r1
 8012e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012e3c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8012e40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	015a      	lsls	r2, r3, #5
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	4413      	add	r3, r2
 8012e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	69ba      	ldr	r2, [r7, #24]
 8012e52:	0151      	lsls	r1, r2, #5
 8012e54:	69fa      	ldr	r2, [r7, #28]
 8012e56:	440a      	add	r2, r1
 8012e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012e5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012e60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012e62:	79fb      	ldrb	r3, [r7, #7]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d14b      	bne.n	8012f00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	695b      	ldr	r3, [r3, #20]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d009      	beq.n	8012e84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	015a      	lsls	r2, r3, #5
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	4413      	add	r3, r2
 8012e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	695b      	ldr	r3, [r3, #20]
 8012e82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	791b      	ldrb	r3, [r3, #4]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d128      	bne.n	8012ede <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012e8c:	69fb      	ldr	r3, [r7, #28]
 8012e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d110      	bne.n	8012ebe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	015a      	lsls	r2, r3, #5
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	69ba      	ldr	r2, [r7, #24]
 8012eac:	0151      	lsls	r1, r2, #5
 8012eae:	69fa      	ldr	r2, [r7, #28]
 8012eb0:	440a      	add	r2, r1
 8012eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012eb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012eba:	6013      	str	r3, [r2, #0]
 8012ebc:	e00f      	b.n	8012ede <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	015a      	lsls	r2, r3, #5
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	69ba      	ldr	r2, [r7, #24]
 8012ece:	0151      	lsls	r1, r2, #5
 8012ed0:	69fa      	ldr	r2, [r7, #28]
 8012ed2:	440a      	add	r2, r1
 8012ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012edc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	69ba      	ldr	r2, [r7, #24]
 8012eee:	0151      	lsls	r1, r2, #5
 8012ef0:	69fa      	ldr	r2, [r7, #28]
 8012ef2:	440a      	add	r2, r1
 8012ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ef8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012efc:	6013      	str	r3, [r2, #0]
 8012efe:	e133      	b.n	8013168 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012f00:	69bb      	ldr	r3, [r7, #24]
 8012f02:	015a      	lsls	r2, r3, #5
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	4413      	add	r3, r2
 8012f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	69ba      	ldr	r2, [r7, #24]
 8012f10:	0151      	lsls	r1, r2, #5
 8012f12:	69fa      	ldr	r2, [r7, #28]
 8012f14:	440a      	add	r2, r1
 8012f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012f1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012f1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	791b      	ldrb	r3, [r3, #4]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d015      	beq.n	8012f54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	699b      	ldr	r3, [r3, #24]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	f000 811b 	beq.w	8013168 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	f003 030f 	and.w	r3, r3, #15
 8012f42:	2101      	movs	r1, #1
 8012f44:	fa01 f303 	lsl.w	r3, r1, r3
 8012f48:	69f9      	ldr	r1, [r7, #28]
 8012f4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012f4e:	4313      	orrs	r3, r2
 8012f50:	634b      	str	r3, [r1, #52]	@ 0x34
 8012f52:	e109      	b.n	8013168 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d110      	bne.n	8012f86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	015a      	lsls	r2, r3, #5
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	69ba      	ldr	r2, [r7, #24]
 8012f74:	0151      	lsls	r1, r2, #5
 8012f76:	69fa      	ldr	r2, [r7, #28]
 8012f78:	440a      	add	r2, r1
 8012f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012f7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012f82:	6013      	str	r3, [r2, #0]
 8012f84:	e00f      	b.n	8012fa6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012f86:	69bb      	ldr	r3, [r7, #24]
 8012f88:	015a      	lsls	r2, r3, #5
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	69ba      	ldr	r2, [r7, #24]
 8012f96:	0151      	lsls	r1, r2, #5
 8012f98:	69fa      	ldr	r2, [r7, #28]
 8012f9a:	440a      	add	r2, r1
 8012f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012fa4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	6919      	ldr	r1, [r3, #16]
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	781a      	ldrb	r2, [r3, #0]
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	699b      	ldr	r3, [r3, #24]
 8012fb2:	b298      	uxth	r0, r3
 8012fb4:	79fb      	ldrb	r3, [r7, #7]
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	4603      	mov	r3, r0
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	f000 fade 	bl	801357c <USB_WritePacket>
 8012fc0:	e0d2      	b.n	8013168 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	015a      	lsls	r2, r3, #5
 8012fc6:	69fb      	ldr	r3, [r7, #28]
 8012fc8:	4413      	add	r3, r2
 8012fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012fce:	691b      	ldr	r3, [r3, #16]
 8012fd0:	69ba      	ldr	r2, [r7, #24]
 8012fd2:	0151      	lsls	r1, r2, #5
 8012fd4:	69fa      	ldr	r2, [r7, #28]
 8012fd6:	440a      	add	r2, r1
 8012fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012fdc:	0cdb      	lsrs	r3, r3, #19
 8012fde:	04db      	lsls	r3, r3, #19
 8012fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	015a      	lsls	r2, r3, #5
 8012fe6:	69fb      	ldr	r3, [r7, #28]
 8012fe8:	4413      	add	r3, r2
 8012fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	69ba      	ldr	r2, [r7, #24]
 8012ff2:	0151      	lsls	r1, r2, #5
 8012ff4:	69fa      	ldr	r2, [r7, #28]
 8012ff6:	440a      	add	r2, r1
 8012ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ffc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013000:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013004:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	699b      	ldr	r3, [r3, #24]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d126      	bne.n	801305c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	015a      	lsls	r2, r3, #5
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	4413      	add	r3, r2
 8013016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801301a:	691a      	ldr	r2, [r3, #16]
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013024:	69b9      	ldr	r1, [r7, #24]
 8013026:	0148      	lsls	r0, r1, #5
 8013028:	69f9      	ldr	r1, [r7, #28]
 801302a:	4401      	add	r1, r0
 801302c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013030:	4313      	orrs	r3, r2
 8013032:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013034:	69bb      	ldr	r3, [r7, #24]
 8013036:	015a      	lsls	r2, r3, #5
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	4413      	add	r3, r2
 801303c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013040:	691b      	ldr	r3, [r3, #16]
 8013042:	69ba      	ldr	r2, [r7, #24]
 8013044:	0151      	lsls	r1, r2, #5
 8013046:	69fa      	ldr	r2, [r7, #28]
 8013048:	440a      	add	r2, r1
 801304a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801304e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013052:	6113      	str	r3, [r2, #16]
 8013054:	e03a      	b.n	80130cc <USB_EPStartXfer+0x3e4>
 8013056:	bf00      	nop
 8013058:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	699a      	ldr	r2, [r3, #24]
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	4413      	add	r3, r2
 8013066:	1e5a      	subs	r2, r3, #1
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013070:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	68db      	ldr	r3, [r3, #12]
 8013076:	8afa      	ldrh	r2, [r7, #22]
 8013078:	fb03 f202 	mul.w	r2, r3, r2
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	015a      	lsls	r2, r3, #5
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	4413      	add	r3, r2
 8013088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801308c:	691a      	ldr	r2, [r3, #16]
 801308e:	8afb      	ldrh	r3, [r7, #22]
 8013090:	04d9      	lsls	r1, r3, #19
 8013092:	4b38      	ldr	r3, [pc, #224]	@ (8013174 <USB_EPStartXfer+0x48c>)
 8013094:	400b      	ands	r3, r1
 8013096:	69b9      	ldr	r1, [r7, #24]
 8013098:	0148      	lsls	r0, r1, #5
 801309a:	69f9      	ldr	r1, [r7, #28]
 801309c:	4401      	add	r1, r0
 801309e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80130a2:	4313      	orrs	r3, r2
 80130a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	015a      	lsls	r2, r3, #5
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	4413      	add	r3, r2
 80130ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130b2:	691a      	ldr	r2, [r3, #16]
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	69db      	ldr	r3, [r3, #28]
 80130b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80130bc:	69b9      	ldr	r1, [r7, #24]
 80130be:	0148      	lsls	r0, r1, #5
 80130c0:	69f9      	ldr	r1, [r7, #28]
 80130c2:	4401      	add	r1, r0
 80130c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80130c8:	4313      	orrs	r3, r2
 80130ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80130cc:	79fb      	ldrb	r3, [r7, #7]
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d10d      	bne.n	80130ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	691b      	ldr	r3, [r3, #16]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d009      	beq.n	80130ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	6919      	ldr	r1, [r3, #16]
 80130de:	69bb      	ldr	r3, [r7, #24]
 80130e0:	015a      	lsls	r2, r3, #5
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	4413      	add	r3, r2
 80130e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130ea:	460a      	mov	r2, r1
 80130ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	791b      	ldrb	r3, [r3, #4]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d128      	bne.n	8013148 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130fc:	689b      	ldr	r3, [r3, #8]
 80130fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013102:	2b00      	cmp	r3, #0
 8013104:	d110      	bne.n	8013128 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	015a      	lsls	r2, r3, #5
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	4413      	add	r3, r2
 801310e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	69ba      	ldr	r2, [r7, #24]
 8013116:	0151      	lsls	r1, r2, #5
 8013118:	69fa      	ldr	r2, [r7, #28]
 801311a:	440a      	add	r2, r1
 801311c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013120:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013124:	6013      	str	r3, [r2, #0]
 8013126:	e00f      	b.n	8013148 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	015a      	lsls	r2, r3, #5
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	4413      	add	r3, r2
 8013130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	69ba      	ldr	r2, [r7, #24]
 8013138:	0151      	lsls	r1, r2, #5
 801313a:	69fa      	ldr	r2, [r7, #28]
 801313c:	440a      	add	r2, r1
 801313e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013146:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013148:	69bb      	ldr	r3, [r7, #24]
 801314a:	015a      	lsls	r2, r3, #5
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	4413      	add	r3, r2
 8013150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	69ba      	ldr	r2, [r7, #24]
 8013158:	0151      	lsls	r1, r2, #5
 801315a:	69fa      	ldr	r2, [r7, #28]
 801315c:	440a      	add	r2, r1
 801315e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013162:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3720      	adds	r7, #32
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	bf00      	nop
 8013174:	1ff80000 	.word	0x1ff80000

08013178 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013178:	b480      	push	{r7}
 801317a:	b087      	sub	sp, #28
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	4613      	mov	r3, r2
 8013184:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	785b      	ldrb	r3, [r3, #1]
 8013194:	2b01      	cmp	r3, #1
 8013196:	f040 80ce 	bne.w	8013336 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	699b      	ldr	r3, [r3, #24]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d132      	bne.n	8013208 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	015a      	lsls	r2, r3, #5
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	4413      	add	r3, r2
 80131aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	693a      	ldr	r2, [r7, #16]
 80131b2:	0151      	lsls	r1, r2, #5
 80131b4:	697a      	ldr	r2, [r7, #20]
 80131b6:	440a      	add	r2, r1
 80131b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80131bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80131c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80131c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	015a      	lsls	r2, r3, #5
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	4413      	add	r3, r2
 80131ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	693a      	ldr	r2, [r7, #16]
 80131d6:	0151      	lsls	r1, r2, #5
 80131d8:	697a      	ldr	r2, [r7, #20]
 80131da:	440a      	add	r2, r1
 80131dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80131e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80131e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	015a      	lsls	r2, r3, #5
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	4413      	add	r3, r2
 80131ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131f2:	691b      	ldr	r3, [r3, #16]
 80131f4:	693a      	ldr	r2, [r7, #16]
 80131f6:	0151      	lsls	r1, r2, #5
 80131f8:	697a      	ldr	r2, [r7, #20]
 80131fa:	440a      	add	r2, r1
 80131fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013200:	0cdb      	lsrs	r3, r3, #19
 8013202:	04db      	lsls	r3, r3, #19
 8013204:	6113      	str	r3, [r2, #16]
 8013206:	e04e      	b.n	80132a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	015a      	lsls	r2, r3, #5
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	4413      	add	r3, r2
 8013210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013214:	691b      	ldr	r3, [r3, #16]
 8013216:	693a      	ldr	r2, [r7, #16]
 8013218:	0151      	lsls	r1, r2, #5
 801321a:	697a      	ldr	r2, [r7, #20]
 801321c:	440a      	add	r2, r1
 801321e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013222:	0cdb      	lsrs	r3, r3, #19
 8013224:	04db      	lsls	r3, r3, #19
 8013226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	015a      	lsls	r2, r3, #5
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	4413      	add	r3, r2
 8013230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	0151      	lsls	r1, r2, #5
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	440a      	add	r2, r1
 801323e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013242:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013246:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801324a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	699a      	ldr	r2, [r3, #24]
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	429a      	cmp	r2, r3
 8013256:	d903      	bls.n	8013260 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	68da      	ldr	r2, [r3, #12]
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	015a      	lsls	r2, r3, #5
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	4413      	add	r3, r2
 8013268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801326c:	691b      	ldr	r3, [r3, #16]
 801326e:	693a      	ldr	r2, [r7, #16]
 8013270:	0151      	lsls	r1, r2, #5
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	440a      	add	r2, r1
 8013276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801327a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801327e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	015a      	lsls	r2, r3, #5
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	4413      	add	r3, r2
 8013288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801328c:	691a      	ldr	r2, [r3, #16]
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	699b      	ldr	r3, [r3, #24]
 8013292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013296:	6939      	ldr	r1, [r7, #16]
 8013298:	0148      	lsls	r0, r1, #5
 801329a:	6979      	ldr	r1, [r7, #20]
 801329c:	4401      	add	r1, r0
 801329e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80132a2:	4313      	orrs	r3, r2
 80132a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80132a6:	79fb      	ldrb	r3, [r7, #7]
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d11e      	bne.n	80132ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	695b      	ldr	r3, [r3, #20]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d009      	beq.n	80132c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132c0:	461a      	mov	r2, r3
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	015a      	lsls	r2, r3, #5
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	4413      	add	r3, r2
 80132d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	693a      	ldr	r2, [r7, #16]
 80132d8:	0151      	lsls	r1, r2, #5
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	440a      	add	r2, r1
 80132de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80132e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80132e6:	6013      	str	r3, [r2, #0]
 80132e8:	e097      	b.n	801341a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	015a      	lsls	r2, r3, #5
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	4413      	add	r3, r2
 80132f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	693a      	ldr	r2, [r7, #16]
 80132fa:	0151      	lsls	r1, r2, #5
 80132fc:	697a      	ldr	r2, [r7, #20]
 80132fe:	440a      	add	r2, r1
 8013300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013304:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013308:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	699b      	ldr	r3, [r3, #24]
 801330e:	2b00      	cmp	r3, #0
 8013310:	f000 8083 	beq.w	801341a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801331a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 030f 	and.w	r3, r3, #15
 8013324:	2101      	movs	r1, #1
 8013326:	fa01 f303 	lsl.w	r3, r1, r3
 801332a:	6979      	ldr	r1, [r7, #20]
 801332c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013330:	4313      	orrs	r3, r2
 8013332:	634b      	str	r3, [r1, #52]	@ 0x34
 8013334:	e071      	b.n	801341a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	015a      	lsls	r2, r3, #5
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	4413      	add	r3, r2
 801333e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013342:	691b      	ldr	r3, [r3, #16]
 8013344:	693a      	ldr	r2, [r7, #16]
 8013346:	0151      	lsls	r1, r2, #5
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	440a      	add	r2, r1
 801334c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013350:	0cdb      	lsrs	r3, r3, #19
 8013352:	04db      	lsls	r3, r3, #19
 8013354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	015a      	lsls	r2, r3, #5
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	4413      	add	r3, r2
 801335e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013362:	691b      	ldr	r3, [r3, #16]
 8013364:	693a      	ldr	r2, [r7, #16]
 8013366:	0151      	lsls	r1, r2, #5
 8013368:	697a      	ldr	r2, [r7, #20]
 801336a:	440a      	add	r2, r1
 801336c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013370:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013374:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013378:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	699b      	ldr	r3, [r3, #24]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d003      	beq.n	801338a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	68da      	ldr	r2, [r3, #12]
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	68da      	ldr	r2, [r3, #12]
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	015a      	lsls	r2, r3, #5
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	4413      	add	r3, r2
 801339a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	693a      	ldr	r2, [r7, #16]
 80133a2:	0151      	lsls	r1, r2, #5
 80133a4:	697a      	ldr	r2, [r7, #20]
 80133a6:	440a      	add	r2, r1
 80133a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80133ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80133b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	015a      	lsls	r2, r3, #5
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	4413      	add	r3, r2
 80133ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133be:	691a      	ldr	r2, [r3, #16]
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	69db      	ldr	r3, [r3, #28]
 80133c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133c8:	6939      	ldr	r1, [r7, #16]
 80133ca:	0148      	lsls	r0, r1, #5
 80133cc:	6979      	ldr	r1, [r7, #20]
 80133ce:	4401      	add	r1, r0
 80133d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80133d4:	4313      	orrs	r3, r2
 80133d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80133d8:	79fb      	ldrb	r3, [r7, #7]
 80133da:	2b01      	cmp	r3, #1
 80133dc:	d10d      	bne.n	80133fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	691b      	ldr	r3, [r3, #16]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d009      	beq.n	80133fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	6919      	ldr	r1, [r3, #16]
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	015a      	lsls	r2, r3, #5
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	4413      	add	r3, r2
 80133f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133f6:	460a      	mov	r2, r1
 80133f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	015a      	lsls	r2, r3, #5
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	4413      	add	r3, r2
 8013402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	0151      	lsls	r1, r2, #5
 801340c:	697a      	ldr	r2, [r7, #20]
 801340e:	440a      	add	r2, r1
 8013410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013414:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013418:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801341a:	2300      	movs	r3, #0
}
 801341c:	4618      	mov	r0, r3
 801341e:	371c      	adds	r7, #28
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr

08013428 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013428:	b480      	push	{r7}
 801342a:	b087      	sub	sp, #28
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013432:	2300      	movs	r3, #0
 8013434:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013436:	2300      	movs	r3, #0
 8013438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	785b      	ldrb	r3, [r3, #1]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d14a      	bne.n	80134dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	015a      	lsls	r2, r3, #5
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	4413      	add	r3, r2
 8013450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801345a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801345e:	f040 8086 	bne.w	801356e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	015a      	lsls	r2, r3, #5
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	4413      	add	r3, r2
 801346c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	683a      	ldr	r2, [r7, #0]
 8013474:	7812      	ldrb	r2, [r2, #0]
 8013476:	0151      	lsls	r1, r2, #5
 8013478:	693a      	ldr	r2, [r7, #16]
 801347a:	440a      	add	r2, r1
 801347c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013480:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013484:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	015a      	lsls	r2, r3, #5
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	4413      	add	r3, r2
 8013490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	683a      	ldr	r2, [r7, #0]
 8013498:	7812      	ldrb	r2, [r2, #0]
 801349a:	0151      	lsls	r1, r2, #5
 801349c:	693a      	ldr	r2, [r7, #16]
 801349e:	440a      	add	r2, r1
 80134a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80134a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80134a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	3301      	adds	r3, #1
 80134ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d902      	bls.n	80134c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80134ba:	2301      	movs	r3, #1
 80134bc:	75fb      	strb	r3, [r7, #23]
          break;
 80134be:	e056      	b.n	801356e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	015a      	lsls	r2, r3, #5
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	4413      	add	r3, r2
 80134ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80134d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80134d8:	d0e7      	beq.n	80134aa <USB_EPStopXfer+0x82>
 80134da:	e048      	b.n	801356e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	015a      	lsls	r2, r3, #5
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	4413      	add	r3, r2
 80134e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80134f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80134f4:	d13b      	bne.n	801356e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	015a      	lsls	r2, r3, #5
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	4413      	add	r3, r2
 8013500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	683a      	ldr	r2, [r7, #0]
 8013508:	7812      	ldrb	r2, [r2, #0]
 801350a:	0151      	lsls	r1, r2, #5
 801350c:	693a      	ldr	r2, [r7, #16]
 801350e:	440a      	add	r2, r1
 8013510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013514:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013518:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	015a      	lsls	r2, r3, #5
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	4413      	add	r3, r2
 8013524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	683a      	ldr	r2, [r7, #0]
 801352c:	7812      	ldrb	r2, [r2, #0]
 801352e:	0151      	lsls	r1, r2, #5
 8013530:	693a      	ldr	r2, [r7, #16]
 8013532:	440a      	add	r2, r1
 8013534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801353c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	3301      	adds	r3, #1
 8013542:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f242 7210 	movw	r2, #10000	@ 0x2710
 801354a:	4293      	cmp	r3, r2
 801354c:	d902      	bls.n	8013554 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801354e:	2301      	movs	r3, #1
 8013550:	75fb      	strb	r3, [r7, #23]
          break;
 8013552:	e00c      	b.n	801356e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	015a      	lsls	r2, r3, #5
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	4413      	add	r3, r2
 801355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801356c:	d0e7      	beq.n	801353e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013570:	4618      	mov	r0, r3
 8013572:	371c      	adds	r7, #28
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801357c:	b480      	push	{r7}
 801357e:	b089      	sub	sp, #36	@ 0x24
 8013580:	af00      	add	r7, sp, #0
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	4611      	mov	r1, r2
 8013588:	461a      	mov	r2, r3
 801358a:	460b      	mov	r3, r1
 801358c:	71fb      	strb	r3, [r7, #7]
 801358e:	4613      	mov	r3, r2
 8013590:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801359a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d123      	bne.n	80135ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80135a2:	88bb      	ldrh	r3, [r7, #4]
 80135a4:	3303      	adds	r3, #3
 80135a6:	089b      	lsrs	r3, r3, #2
 80135a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80135aa:	2300      	movs	r3, #0
 80135ac:	61bb      	str	r3, [r7, #24]
 80135ae:	e018      	b.n	80135e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80135b0:	79fb      	ldrb	r3, [r7, #7]
 80135b2:	031a      	lsls	r2, r3, #12
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	4413      	add	r3, r2
 80135b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80135bc:	461a      	mov	r2, r3
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	3301      	adds	r3, #1
 80135c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	3301      	adds	r3, #1
 80135ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	3301      	adds	r3, #1
 80135d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	3301      	adds	r3, #1
 80135da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	3301      	adds	r3, #1
 80135e0:	61bb      	str	r3, [r7, #24]
 80135e2:	69ba      	ldr	r2, [r7, #24]
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d3e2      	bcc.n	80135b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80135ea:	2300      	movs	r3, #0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3724      	adds	r7, #36	@ 0x24
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr

080135f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b08b      	sub	sp, #44	@ 0x2c
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	4613      	mov	r3, r2
 8013604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801360e:	88fb      	ldrh	r3, [r7, #6]
 8013610:	089b      	lsrs	r3, r3, #2
 8013612:	b29b      	uxth	r3, r3
 8013614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013616:	88fb      	ldrh	r3, [r7, #6]
 8013618:	f003 0303 	and.w	r3, r3, #3
 801361c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801361e:	2300      	movs	r3, #0
 8013620:	623b      	str	r3, [r7, #32]
 8013622:	e014      	b.n	801364e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013632:	3301      	adds	r3, #1
 8013634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013638:	3301      	adds	r3, #1
 801363a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363e:	3301      	adds	r3, #1
 8013640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013644:	3301      	adds	r3, #1
 8013646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013648:	6a3b      	ldr	r3, [r7, #32]
 801364a:	3301      	adds	r3, #1
 801364c:	623b      	str	r3, [r7, #32]
 801364e:	6a3a      	ldr	r2, [r7, #32]
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	429a      	cmp	r2, r3
 8013654:	d3e6      	bcc.n	8013624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013656:	8bfb      	ldrh	r3, [r7, #30]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d01e      	beq.n	801369a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801365c:	2300      	movs	r3, #0
 801365e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013666:	461a      	mov	r2, r3
 8013668:	f107 0310 	add.w	r3, r7, #16
 801366c:	6812      	ldr	r2, [r2, #0]
 801366e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013670:	693a      	ldr	r2, [r7, #16]
 8013672:	6a3b      	ldr	r3, [r7, #32]
 8013674:	b2db      	uxtb	r3, r3
 8013676:	00db      	lsls	r3, r3, #3
 8013678:	fa22 f303 	lsr.w	r3, r2, r3
 801367c:	b2da      	uxtb	r2, r3
 801367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013680:	701a      	strb	r2, [r3, #0]
      i++;
 8013682:	6a3b      	ldr	r3, [r7, #32]
 8013684:	3301      	adds	r3, #1
 8013686:	623b      	str	r3, [r7, #32]
      pDest++;
 8013688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801368a:	3301      	adds	r3, #1
 801368c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801368e:	8bfb      	ldrh	r3, [r7, #30]
 8013690:	3b01      	subs	r3, #1
 8013692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013694:	8bfb      	ldrh	r3, [r7, #30]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d1ea      	bne.n	8013670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801369c:	4618      	mov	r0, r3
 801369e:	372c      	adds	r7, #44	@ 0x2c
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr

080136a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b085      	sub	sp, #20
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	785b      	ldrb	r3, [r3, #1]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d12c      	bne.n	801371e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	015a      	lsls	r2, r3, #5
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4413      	add	r3, r2
 80136cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	db12      	blt.n	80136fc <USB_EPSetStall+0x54>
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00f      	beq.n	80136fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	015a      	lsls	r2, r3, #5
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	4413      	add	r3, r2
 80136e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	0151      	lsls	r1, r2, #5
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	440a      	add	r2, r1
 80136f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80136f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80136fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	015a      	lsls	r2, r3, #5
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	4413      	add	r3, r2
 8013704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	0151      	lsls	r1, r2, #5
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	440a      	add	r2, r1
 8013712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013716:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801371a:	6013      	str	r3, [r2, #0]
 801371c:	e02b      	b.n	8013776 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	015a      	lsls	r2, r3, #5
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	4413      	add	r3, r2
 8013726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	db12      	blt.n	8013756 <USB_EPSetStall+0xae>
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d00f      	beq.n	8013756 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	015a      	lsls	r2, r3, #5
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	4413      	add	r3, r2
 801373e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	68ba      	ldr	r2, [r7, #8]
 8013746:	0151      	lsls	r1, r2, #5
 8013748:	68fa      	ldr	r2, [r7, #12]
 801374a:	440a      	add	r2, r1
 801374c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013754:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	015a      	lsls	r2, r3, #5
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	4413      	add	r3, r2
 801375e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68ba      	ldr	r2, [r7, #8]
 8013766:	0151      	lsls	r1, r2, #5
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	440a      	add	r2, r1
 801376c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013776:	2300      	movs	r3, #0
}
 8013778:	4618      	mov	r0, r3
 801377a:	3714      	adds	r7, #20
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013784:	b480      	push	{r7}
 8013786:	b085      	sub	sp, #20
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	785b      	ldrb	r3, [r3, #1]
 801379c:	2b01      	cmp	r3, #1
 801379e:	d128      	bne.n	80137f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	015a      	lsls	r2, r3, #5
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	4413      	add	r3, r2
 80137a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	68ba      	ldr	r2, [r7, #8]
 80137b0:	0151      	lsls	r1, r2, #5
 80137b2:	68fa      	ldr	r2, [r7, #12]
 80137b4:	440a      	add	r2, r1
 80137b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80137be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	791b      	ldrb	r3, [r3, #4]
 80137c4:	2b03      	cmp	r3, #3
 80137c6:	d003      	beq.n	80137d0 <USB_EPClearStall+0x4c>
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	791b      	ldrb	r3, [r3, #4]
 80137cc:	2b02      	cmp	r3, #2
 80137ce:	d138      	bne.n	8013842 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	015a      	lsls	r2, r3, #5
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	4413      	add	r3, r2
 80137d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	68ba      	ldr	r2, [r7, #8]
 80137e0:	0151      	lsls	r1, r2, #5
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	440a      	add	r2, r1
 80137e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80137ee:	6013      	str	r3, [r2, #0]
 80137f0:	e027      	b.n	8013842 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	015a      	lsls	r2, r3, #5
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	4413      	add	r3, r2
 80137fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	68ba      	ldr	r2, [r7, #8]
 8013802:	0151      	lsls	r1, r2, #5
 8013804:	68fa      	ldr	r2, [r7, #12]
 8013806:	440a      	add	r2, r1
 8013808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801380c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013810:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	791b      	ldrb	r3, [r3, #4]
 8013816:	2b03      	cmp	r3, #3
 8013818:	d003      	beq.n	8013822 <USB_EPClearStall+0x9e>
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	791b      	ldrb	r3, [r3, #4]
 801381e:	2b02      	cmp	r3, #2
 8013820:	d10f      	bne.n	8013842 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	015a      	lsls	r2, r3, #5
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	4413      	add	r3, r2
 801382a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68ba      	ldr	r2, [r7, #8]
 8013832:	0151      	lsls	r1, r2, #5
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	440a      	add	r2, r1
 8013838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801383c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013840:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	3714      	adds	r7, #20
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013850:	b480      	push	{r7}
 8013852:	b085      	sub	sp, #20
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	68fa      	ldr	r2, [r7, #12]
 801386a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801386e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8013872:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	78fb      	ldrb	r3, [r7, #3]
 801387e:	011b      	lsls	r3, r3, #4
 8013880:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8013884:	68f9      	ldr	r1, [r7, #12]
 8013886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801388a:	4313      	orrs	r3, r2
 801388c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801388e:	2300      	movs	r3, #0
}
 8013890:	4618      	mov	r0, r3
 8013892:	3714      	adds	r7, #20
 8013894:	46bd      	mov	sp, r7
 8013896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389a:	4770      	bx	lr

0801389c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80138b6:	f023 0303 	bic.w	r3, r3, #3
 80138ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80138ca:	f023 0302 	bic.w	r3, r3, #2
 80138ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr

080138de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80138de:	b480      	push	{r7}
 80138e0:	b085      	sub	sp, #20
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80138f8:	f023 0303 	bic.w	r3, r3, #3
 80138fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	68fa      	ldr	r2, [r7, #12]
 8013908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801390c:	f043 0302 	orr.w	r3, r3, #2
 8013910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013912:	2300      	movs	r3, #0
}
 8013914:	4618      	mov	r0, r3
 8013916:	3714      	adds	r7, #20
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr

08013920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013920:	b480      	push	{r7}
 8013922:	b085      	sub	sp, #20
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	695b      	ldr	r3, [r3, #20]
 801392c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	699b      	ldr	r3, [r3, #24]
 8013932:	68fa      	ldr	r2, [r7, #12]
 8013934:	4013      	ands	r3, r2
 8013936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013938:	68fb      	ldr	r3, [r7, #12]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3714      	adds	r7, #20
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013946:	b480      	push	{r7}
 8013948:	b085      	sub	sp, #20
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	4013      	ands	r3, r2
 8013968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	0c1b      	lsrs	r3, r3, #16
}
 801396e:	4618      	mov	r0, r3
 8013970:	3714      	adds	r7, #20
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr

0801397a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801397a:	b480      	push	{r7}
 801397c:	b085      	sub	sp, #20
 801397e:	af00      	add	r7, sp, #0
 8013980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801398c:	699b      	ldr	r3, [r3, #24]
 801398e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013996:	69db      	ldr	r3, [r3, #28]
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	4013      	ands	r3, r2
 801399c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	b29b      	uxth	r3, r3
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3714      	adds	r7, #20
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr

080139ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139ae:	b480      	push	{r7}
 80139b0:	b085      	sub	sp, #20
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
 80139b6:	460b      	mov	r3, r1
 80139b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80139be:	78fb      	ldrb	r3, [r7, #3]
 80139c0:	015a      	lsls	r2, r3, #5
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	4413      	add	r3, r2
 80139c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139ca:	689b      	ldr	r3, [r3, #8]
 80139cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139d4:	695b      	ldr	r3, [r3, #20]
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	4013      	ands	r3, r2
 80139da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80139dc:	68bb      	ldr	r3, [r7, #8]
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3714      	adds	r7, #20
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr

080139ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139ea:	b480      	push	{r7}
 80139ec:	b087      	sub	sp, #28
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
 80139f2:	460b      	mov	r3, r1
 80139f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a00:	691b      	ldr	r3, [r3, #16]
 8013a02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013a0e:	78fb      	ldrb	r3, [r7, #3]
 8013a10:	f003 030f 	and.w	r3, r3, #15
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	fa22 f303 	lsr.w	r3, r2, r3
 8013a1a:	01db      	lsls	r3, r3, #7
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	693a      	ldr	r2, [r7, #16]
 8013a20:	4313      	orrs	r3, r2
 8013a22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013a24:	78fb      	ldrb	r3, [r7, #3]
 8013a26:	015a      	lsls	r2, r3, #5
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a30:	689b      	ldr	r3, [r3, #8]
 8013a32:	693a      	ldr	r2, [r7, #16]
 8013a34:	4013      	ands	r3, r2
 8013a36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013a38:	68bb      	ldr	r3, [r7, #8]
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	371c      	adds	r7, #28
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013a46:	b480      	push	{r7}
 8013a48:	b083      	sub	sp, #12
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	695b      	ldr	r3, [r3, #20]
 8013a52:	f003 0301 	and.w	r3, r3, #1
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	370c      	adds	r7, #12
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr

08013a62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013a62:	b480      	push	{r7}
 8013a64:	b085      	sub	sp, #20
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	68fa      	ldr	r2, [r7, #12]
 8013a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013a80:	f023 0307 	bic.w	r3, r3, #7
 8013a84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	68fa      	ldr	r2, [r7, #12]
 8013a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013a98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a9a:	2300      	movs	r3, #0
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3714      	adds	r7, #20
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr

08013aa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b087      	sub	sp, #28
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	607a      	str	r2, [r7, #4]
 8013ab4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	333c      	adds	r3, #60	@ 0x3c
 8013abe:	3304      	adds	r3, #4
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	4a26      	ldr	r2, [pc, #152]	@ (8013b60 <USB_EP0_OutStart+0xb8>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d90a      	bls.n	8013ae2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013adc:	d101      	bne.n	8013ae2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e037      	b.n	8013b52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ae8:	461a      	mov	r2, r3
 8013aea:	2300      	movs	r3, #0
 8013aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013af4:	691b      	ldr	r3, [r3, #16]
 8013af6:	697a      	ldr	r2, [r7, #20]
 8013af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013afc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b08:	691b      	ldr	r3, [r3, #16]
 8013b0a:	697a      	ldr	r2, [r7, #20]
 8013b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b10:	f043 0318 	orr.w	r3, r3, #24
 8013b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b1c:	691b      	ldr	r3, [r3, #16]
 8013b1e:	697a      	ldr	r2, [r7, #20]
 8013b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013b28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013b2a:	7afb      	ldrb	r3, [r7, #11]
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d10f      	bne.n	8013b50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b36:	461a      	mov	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	697a      	ldr	r2, [r7, #20]
 8013b46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8013b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	371c      	adds	r7, #28
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	4f54300a 	.word	0x4f54300a

08013b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b085      	sub	sp, #20
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	3301      	adds	r3, #1
 8013b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	4a13      	ldr	r2, [pc, #76]	@ (8013bc8 <USB_CoreReset+0x64>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d901      	bls.n	8013b82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013b7e:	2303      	movs	r3, #3
 8013b80:	e01b      	b.n	8013bba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	691b      	ldr	r3, [r3, #16]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	daf2      	bge.n	8013b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	f043 0201 	orr.w	r2, r3, #1
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	4a09      	ldr	r2, [pc, #36]	@ (8013bc8 <USB_CoreReset+0x64>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d901      	bls.n	8013bac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013ba8:	2303      	movs	r3, #3
 8013baa:	e006      	b.n	8013bba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	691b      	ldr	r3, [r3, #16]
 8013bb0:	f003 0301 	and.w	r3, r3, #1
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d0f0      	beq.n	8013b9a <USB_CoreReset+0x36>

  return HAL_OK;
 8013bb8:	2300      	movs	r3, #0
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop
 8013bc8:	00030d40 	.word	0x00030d40

08013bcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013bd8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013bdc:	f005 feec 	bl	80199b8 <USBD_static_malloc>
 8013be0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d109      	bne.n	8013bfc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	32b0      	adds	r2, #176	@ 0xb0
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013bf8:	2302      	movs	r3, #2
 8013bfa:	e0d4      	b.n	8013da6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013bfc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8013c00:	2100      	movs	r1, #0
 8013c02:	68f8      	ldr	r0, [r7, #12]
 8013c04:	f006 f867 	bl	8019cd6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	32b0      	adds	r2, #176	@ 0xb0
 8013c12:	68f9      	ldr	r1, [r7, #12]
 8013c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	32b0      	adds	r2, #176	@ 0xb0
 8013c22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7c1b      	ldrb	r3, [r3, #16]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d138      	bne.n	8013ca6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013c34:	4b5e      	ldr	r3, [pc, #376]	@ (8013db0 <USBD_CDC_Init+0x1e4>)
 8013c36:	7819      	ldrb	r1, [r3, #0]
 8013c38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c3c:	2202      	movs	r2, #2
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f005 fd97 	bl	8019772 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013c44:	4b5a      	ldr	r3, [pc, #360]	@ (8013db0 <USBD_CDC_Init+0x1e4>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	f003 020f 	and.w	r2, r3, #15
 8013c4c:	6879      	ldr	r1, [r7, #4]
 8013c4e:	4613      	mov	r3, r2
 8013c50:	009b      	lsls	r3, r3, #2
 8013c52:	4413      	add	r3, r2
 8013c54:	009b      	lsls	r3, r3, #2
 8013c56:	440b      	add	r3, r1
 8013c58:	3324      	adds	r3, #36	@ 0x24
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013c5e:	4b55      	ldr	r3, [pc, #340]	@ (8013db4 <USBD_CDC_Init+0x1e8>)
 8013c60:	7819      	ldrb	r1, [r3, #0]
 8013c62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c66:	2202      	movs	r2, #2
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f005 fd82 	bl	8019772 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013c6e:	4b51      	ldr	r3, [pc, #324]	@ (8013db4 <USBD_CDC_Init+0x1e8>)
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	f003 020f 	and.w	r2, r3, #15
 8013c76:	6879      	ldr	r1, [r7, #4]
 8013c78:	4613      	mov	r3, r2
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	4413      	add	r3, r2
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	440b      	add	r3, r1
 8013c82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013c86:	2201      	movs	r2, #1
 8013c88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8013db8 <USBD_CDC_Init+0x1ec>)
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	f003 020f 	and.w	r2, r3, #15
 8013c92:	6879      	ldr	r1, [r7, #4]
 8013c94:	4613      	mov	r3, r2
 8013c96:	009b      	lsls	r3, r3, #2
 8013c98:	4413      	add	r3, r2
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	440b      	add	r3, r1
 8013c9e:	3326      	adds	r3, #38	@ 0x26
 8013ca0:	2210      	movs	r2, #16
 8013ca2:	801a      	strh	r2, [r3, #0]
 8013ca4:	e035      	b.n	8013d12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013ca6:	4b42      	ldr	r3, [pc, #264]	@ (8013db0 <USBD_CDC_Init+0x1e4>)
 8013ca8:	7819      	ldrb	r1, [r3, #0]
 8013caa:	2340      	movs	r3, #64	@ 0x40
 8013cac:	2202      	movs	r2, #2
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f005 fd5f 	bl	8019772 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8013db0 <USBD_CDC_Init+0x1e4>)
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	f003 020f 	and.w	r2, r3, #15
 8013cbc:	6879      	ldr	r1, [r7, #4]
 8013cbe:	4613      	mov	r3, r2
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	4413      	add	r3, r2
 8013cc4:	009b      	lsls	r3, r3, #2
 8013cc6:	440b      	add	r3, r1
 8013cc8:	3324      	adds	r3, #36	@ 0x24
 8013cca:	2201      	movs	r2, #1
 8013ccc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013cce:	4b39      	ldr	r3, [pc, #228]	@ (8013db4 <USBD_CDC_Init+0x1e8>)
 8013cd0:	7819      	ldrb	r1, [r3, #0]
 8013cd2:	2340      	movs	r3, #64	@ 0x40
 8013cd4:	2202      	movs	r2, #2
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f005 fd4b 	bl	8019772 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013cdc:	4b35      	ldr	r3, [pc, #212]	@ (8013db4 <USBD_CDC_Init+0x1e8>)
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	f003 020f 	and.w	r2, r3, #15
 8013ce4:	6879      	ldr	r1, [r7, #4]
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	4413      	add	r3, r2
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	440b      	add	r3, r1
 8013cf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8013db8 <USBD_CDC_Init+0x1ec>)
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	f003 020f 	and.w	r2, r3, #15
 8013d00:	6879      	ldr	r1, [r7, #4]
 8013d02:	4613      	mov	r3, r2
 8013d04:	009b      	lsls	r3, r3, #2
 8013d06:	4413      	add	r3, r2
 8013d08:	009b      	lsls	r3, r3, #2
 8013d0a:	440b      	add	r3, r1
 8013d0c:	3326      	adds	r3, #38	@ 0x26
 8013d0e:	2210      	movs	r2, #16
 8013d10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013d12:	4b29      	ldr	r3, [pc, #164]	@ (8013db8 <USBD_CDC_Init+0x1ec>)
 8013d14:	7819      	ldrb	r1, [r3, #0]
 8013d16:	2308      	movs	r3, #8
 8013d18:	2203      	movs	r2, #3
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f005 fd29 	bl	8019772 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013d20:	4b25      	ldr	r3, [pc, #148]	@ (8013db8 <USBD_CDC_Init+0x1ec>)
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	f003 020f 	and.w	r2, r3, #15
 8013d28:	6879      	ldr	r1, [r7, #4]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	009b      	lsls	r3, r3, #2
 8013d2e:	4413      	add	r3, r2
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	440b      	add	r3, r1
 8013d34:	3324      	adds	r3, #36	@ 0x24
 8013d36:	2201      	movs	r2, #1
 8013d38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	33b0      	adds	r3, #176	@ 0xb0
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	4413      	add	r3, r2
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2200      	movs	r2, #0
 8013d62:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d101      	bne.n	8013d74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013d70:	2302      	movs	r3, #2
 8013d72:	e018      	b.n	8013da6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	7c1b      	ldrb	r3, [r3, #16]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10a      	bne.n	8013d92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8013db4 <USBD_CDC_Init+0x1e8>)
 8013d7e:	7819      	ldrb	r1, [r3, #0]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013d86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f005 fde0 	bl	8019950 <USBD_LL_PrepareReceive>
 8013d90:	e008      	b.n	8013da4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013d92:	4b08      	ldr	r3, [pc, #32]	@ (8013db4 <USBD_CDC_Init+0x1e8>)
 8013d94:	7819      	ldrb	r1, [r3, #0]
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013d9c:	2340      	movs	r3, #64	@ 0x40
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f005 fdd6 	bl	8019950 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	2000009b 	.word	0x2000009b
 8013db4:	2000009c 	.word	0x2000009c
 8013db8:	2000009d 	.word	0x2000009d

08013dbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8013eb4 <USBD_CDC_DeInit+0xf8>)
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f005 fcf5 	bl	80197be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013dd4:	4b37      	ldr	r3, [pc, #220]	@ (8013eb4 <USBD_CDC_DeInit+0xf8>)
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	f003 020f 	and.w	r2, r3, #15
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	4613      	mov	r3, r2
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	4413      	add	r3, r2
 8013de4:	009b      	lsls	r3, r3, #2
 8013de6:	440b      	add	r3, r1
 8013de8:	3324      	adds	r3, #36	@ 0x24
 8013dea:	2200      	movs	r2, #0
 8013dec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013dee:	4b32      	ldr	r3, [pc, #200]	@ (8013eb8 <USBD_CDC_DeInit+0xfc>)
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	4619      	mov	r1, r3
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f005 fce2 	bl	80197be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8013eb8 <USBD_CDC_DeInit+0xfc>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	f003 020f 	and.w	r2, r3, #15
 8013e02:	6879      	ldr	r1, [r7, #4]
 8013e04:	4613      	mov	r3, r2
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	4413      	add	r3, r2
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	440b      	add	r3, r1
 8013e0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013e12:	2200      	movs	r2, #0
 8013e14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013e16:	4b29      	ldr	r3, [pc, #164]	@ (8013ebc <USBD_CDC_DeInit+0x100>)
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f005 fcce 	bl	80197be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013e22:	4b26      	ldr	r3, [pc, #152]	@ (8013ebc <USBD_CDC_DeInit+0x100>)
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	f003 020f 	and.w	r2, r3, #15
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	4613      	mov	r3, r2
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	4413      	add	r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	440b      	add	r3, r1
 8013e36:	3324      	adds	r3, #36	@ 0x24
 8013e38:	2200      	movs	r2, #0
 8013e3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8013ebc <USBD_CDC_DeInit+0x100>)
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	f003 020f 	and.w	r2, r3, #15
 8013e44:	6879      	ldr	r1, [r7, #4]
 8013e46:	4613      	mov	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	4413      	add	r3, r2
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	440b      	add	r3, r1
 8013e50:	3326      	adds	r3, #38	@ 0x26
 8013e52:	2200      	movs	r2, #0
 8013e54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	32b0      	adds	r2, #176	@ 0xb0
 8013e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d01f      	beq.n	8013ea8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	33b0      	adds	r3, #176	@ 0xb0
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	4413      	add	r3, r2
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	32b0      	adds	r2, #176	@ 0xb0
 8013e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f005 fda2 	bl	80199d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	32b0      	adds	r2, #176	@ 0xb0
 8013e9a:	2100      	movs	r1, #0
 8013e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	2000009b 	.word	0x2000009b
 8013eb8:	2000009c 	.word	0x2000009c
 8013ebc:	2000009d 	.word	0x2000009d

08013ec0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	32b0      	adds	r2, #176	@ 0xb0
 8013ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013eda:	2300      	movs	r3, #0
 8013edc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d101      	bne.n	8013ef0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013eec:	2303      	movs	r3, #3
 8013eee:	e0bf      	b.n	8014070 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d050      	beq.n	8013f9e <USBD_CDC_Setup+0xde>
 8013efc:	2b20      	cmp	r3, #32
 8013efe:	f040 80af 	bne.w	8014060 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	88db      	ldrh	r3, [r3, #6]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d03a      	beq.n	8013f80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	b25b      	sxtb	r3, r3
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	da1b      	bge.n	8013f4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	33b0      	adds	r3, #176	@ 0xb0
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	4413      	add	r3, r2
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	683a      	ldr	r2, [r7, #0]
 8013f28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013f2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	88d2      	ldrh	r2, [r2, #6]
 8013f30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	88db      	ldrh	r3, [r3, #6]
 8013f36:	2b07      	cmp	r3, #7
 8013f38:	bf28      	it	cs
 8013f3a:	2307      	movcs	r3, #7
 8013f3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	89fa      	ldrh	r2, [r7, #14]
 8013f42:	4619      	mov	r1, r3
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f001 fd41 	bl	80159cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013f4a:	e090      	b.n	801406e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	785a      	ldrb	r2, [r3, #1]
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	88db      	ldrh	r3, [r3, #6]
 8013f5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8013f5c:	d803      	bhi.n	8013f66 <USBD_CDC_Setup+0xa6>
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	88db      	ldrh	r3, [r3, #6]
 8013f62:	b2da      	uxtb	r2, r3
 8013f64:	e000      	b.n	8013f68 <USBD_CDC_Setup+0xa8>
 8013f66:	2240      	movs	r2, #64	@ 0x40
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013f6e:	6939      	ldr	r1, [r7, #16]
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013f76:	461a      	mov	r2, r3
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f001 fd53 	bl	8015a24 <USBD_CtlPrepareRx>
      break;
 8013f7e:	e076      	b.n	801406e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	33b0      	adds	r3, #176	@ 0xb0
 8013f8a:	009b      	lsls	r3, r3, #2
 8013f8c:	4413      	add	r3, r2
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	689b      	ldr	r3, [r3, #8]
 8013f92:	683a      	ldr	r2, [r7, #0]
 8013f94:	7850      	ldrb	r0, [r2, #1]
 8013f96:	2200      	movs	r2, #0
 8013f98:	6839      	ldr	r1, [r7, #0]
 8013f9a:	4798      	blx	r3
      break;
 8013f9c:	e067      	b.n	801406e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	785b      	ldrb	r3, [r3, #1]
 8013fa2:	2b0b      	cmp	r3, #11
 8013fa4:	d851      	bhi.n	801404a <USBD_CDC_Setup+0x18a>
 8013fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8013fac <USBD_CDC_Setup+0xec>)
 8013fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fac:	08013fdd 	.word	0x08013fdd
 8013fb0:	08014059 	.word	0x08014059
 8013fb4:	0801404b 	.word	0x0801404b
 8013fb8:	0801404b 	.word	0x0801404b
 8013fbc:	0801404b 	.word	0x0801404b
 8013fc0:	0801404b 	.word	0x0801404b
 8013fc4:	0801404b 	.word	0x0801404b
 8013fc8:	0801404b 	.word	0x0801404b
 8013fcc:	0801404b 	.word	0x0801404b
 8013fd0:	0801404b 	.word	0x0801404b
 8013fd4:	08014007 	.word	0x08014007
 8013fd8:	08014031 	.word	0x08014031
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	2b03      	cmp	r3, #3
 8013fe6:	d107      	bne.n	8013ff8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013fe8:	f107 030a 	add.w	r3, r7, #10
 8013fec:	2202      	movs	r2, #2
 8013fee:	4619      	mov	r1, r3
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f001 fceb 	bl	80159cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013ff6:	e032      	b.n	801405e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013ff8:	6839      	ldr	r1, [r7, #0]
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f001 fc75 	bl	80158ea <USBD_CtlError>
            ret = USBD_FAIL;
 8014000:	2303      	movs	r3, #3
 8014002:	75fb      	strb	r3, [r7, #23]
          break;
 8014004:	e02b      	b.n	801405e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801400c:	b2db      	uxtb	r3, r3
 801400e:	2b03      	cmp	r3, #3
 8014010:	d107      	bne.n	8014022 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014012:	f107 030d 	add.w	r3, r7, #13
 8014016:	2201      	movs	r2, #1
 8014018:	4619      	mov	r1, r3
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f001 fcd6 	bl	80159cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014020:	e01d      	b.n	801405e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f001 fc60 	bl	80158ea <USBD_CtlError>
            ret = USBD_FAIL;
 801402a:	2303      	movs	r3, #3
 801402c:	75fb      	strb	r3, [r7, #23]
          break;
 801402e:	e016      	b.n	801405e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b03      	cmp	r3, #3
 801403a:	d00f      	beq.n	801405c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801403c:	6839      	ldr	r1, [r7, #0]
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f001 fc53 	bl	80158ea <USBD_CtlError>
            ret = USBD_FAIL;
 8014044:	2303      	movs	r3, #3
 8014046:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014048:	e008      	b.n	801405c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801404a:	6839      	ldr	r1, [r7, #0]
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f001 fc4c 	bl	80158ea <USBD_CtlError>
          ret = USBD_FAIL;
 8014052:	2303      	movs	r3, #3
 8014054:	75fb      	strb	r3, [r7, #23]
          break;
 8014056:	e002      	b.n	801405e <USBD_CDC_Setup+0x19e>
          break;
 8014058:	bf00      	nop
 801405a:	e008      	b.n	801406e <USBD_CDC_Setup+0x1ae>
          break;
 801405c:	bf00      	nop
      }
      break;
 801405e:	e006      	b.n	801406e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014060:	6839      	ldr	r1, [r7, #0]
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f001 fc41 	bl	80158ea <USBD_CtlError>
      ret = USBD_FAIL;
 8014068:	2303      	movs	r3, #3
 801406a:	75fb      	strb	r3, [r7, #23]
      break;
 801406c:	bf00      	nop
  }

  return (uint8_t)ret;
 801406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3718      	adds	r7, #24
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	460b      	mov	r3, r1
 8014082:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801408a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	32b0      	adds	r2, #176	@ 0xb0
 8014096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d101      	bne.n	80140a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801409e:	2303      	movs	r3, #3
 80140a0:	e065      	b.n	801416e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	32b0      	adds	r2, #176	@ 0xb0
 80140ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80140b2:	78fb      	ldrb	r3, [r7, #3]
 80140b4:	f003 020f 	and.w	r2, r3, #15
 80140b8:	6879      	ldr	r1, [r7, #4]
 80140ba:	4613      	mov	r3, r2
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	4413      	add	r3, r2
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	440b      	add	r3, r1
 80140c4:	3318      	adds	r3, #24
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d02f      	beq.n	801412c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80140cc:	78fb      	ldrb	r3, [r7, #3]
 80140ce:	f003 020f 	and.w	r2, r3, #15
 80140d2:	6879      	ldr	r1, [r7, #4]
 80140d4:	4613      	mov	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4413      	add	r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	440b      	add	r3, r1
 80140de:	3318      	adds	r3, #24
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	78fb      	ldrb	r3, [r7, #3]
 80140e4:	f003 010f 	and.w	r1, r3, #15
 80140e8:	68f8      	ldr	r0, [r7, #12]
 80140ea:	460b      	mov	r3, r1
 80140ec:	00db      	lsls	r3, r3, #3
 80140ee:	440b      	add	r3, r1
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	4403      	add	r3, r0
 80140f4:	3348      	adds	r3, #72	@ 0x48
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80140fc:	fb01 f303 	mul.w	r3, r1, r3
 8014100:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014102:	2b00      	cmp	r3, #0
 8014104:	d112      	bne.n	801412c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014106:	78fb      	ldrb	r3, [r7, #3]
 8014108:	f003 020f 	and.w	r2, r3, #15
 801410c:	6879      	ldr	r1, [r7, #4]
 801410e:	4613      	mov	r3, r2
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	4413      	add	r3, r2
 8014114:	009b      	lsls	r3, r3, #2
 8014116:	440b      	add	r3, r1
 8014118:	3318      	adds	r3, #24
 801411a:	2200      	movs	r2, #0
 801411c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801411e:	78f9      	ldrb	r1, [r7, #3]
 8014120:	2300      	movs	r3, #0
 8014122:	2200      	movs	r2, #0
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f005 fbf2 	bl	801990e <USBD_LL_Transmit>
 801412a:	e01f      	b.n	801416c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	2200      	movs	r2, #0
 8014130:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	33b0      	adds	r3, #176	@ 0xb0
 801413e:	009b      	lsls	r3, r3, #2
 8014140:	4413      	add	r3, r2
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	691b      	ldr	r3, [r3, #16]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d010      	beq.n	801416c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	33b0      	adds	r3, #176	@ 0xb0
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	4413      	add	r3, r2
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	691b      	ldr	r3, [r3, #16]
 801415c:	68ba      	ldr	r2, [r7, #8]
 801415e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8014162:	68ba      	ldr	r2, [r7, #8]
 8014164:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8014168:	78fa      	ldrb	r2, [r7, #3]
 801416a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801416c:	2300      	movs	r3, #0
}
 801416e:	4618      	mov	r0, r3
 8014170:	3710      	adds	r7, #16
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}

08014176 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014176:	b580      	push	{r7, lr}
 8014178:	b084      	sub	sp, #16
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	460b      	mov	r3, r1
 8014180:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	32b0      	adds	r2, #176	@ 0xb0
 801418c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014190:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	32b0      	adds	r2, #176	@ 0xb0
 801419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d101      	bne.n	80141a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80141a4:	2303      	movs	r3, #3
 80141a6:	e01a      	b.n	80141de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80141a8:	78fb      	ldrb	r3, [r7, #3]
 80141aa:	4619      	mov	r1, r3
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f005 fbf0 	bl	8019992 <USBD_LL_GetRxDataSize>
 80141b2:	4602      	mov	r2, r0
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	33b0      	adds	r3, #176	@ 0xb0
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	4413      	add	r3, r2
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	68fa      	ldr	r2, [r7, #12]
 80141ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80141d2:	68fa      	ldr	r2, [r7, #12]
 80141d4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80141d8:	4611      	mov	r1, r2
 80141da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80141dc:	2300      	movs	r3, #0
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3710      	adds	r7, #16
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b084      	sub	sp, #16
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	32b0      	adds	r2, #176	@ 0xb0
 80141f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014204:	2303      	movs	r3, #3
 8014206:	e024      	b.n	8014252 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801420e:	687a      	ldr	r2, [r7, #4]
 8014210:	33b0      	adds	r3, #176	@ 0xb0
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	4413      	add	r3, r2
 8014216:	685b      	ldr	r3, [r3, #4]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d019      	beq.n	8014250 <USBD_CDC_EP0_RxReady+0x6a>
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014222:	2bff      	cmp	r3, #255	@ 0xff
 8014224:	d014      	beq.n	8014250 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	33b0      	adds	r3, #176	@ 0xb0
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	4413      	add	r3, r2
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	689b      	ldr	r3, [r3, #8]
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801423e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014240:	68fa      	ldr	r2, [r7, #12]
 8014242:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014246:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	22ff      	movs	r2, #255	@ 0xff
 801424c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8014250:	2300      	movs	r3, #0
}
 8014252:	4618      	mov	r0, r3
 8014254:	3710      	adds	r7, #16
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}
	...

0801425c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b086      	sub	sp, #24
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014264:	2182      	movs	r1, #130	@ 0x82
 8014266:	4818      	ldr	r0, [pc, #96]	@ (80142c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014268:	f000 fd09 	bl	8014c7e <USBD_GetEpDesc>
 801426c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801426e:	2101      	movs	r1, #1
 8014270:	4815      	ldr	r0, [pc, #84]	@ (80142c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014272:	f000 fd04 	bl	8014c7e <USBD_GetEpDesc>
 8014276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014278:	2181      	movs	r1, #129	@ 0x81
 801427a:	4813      	ldr	r0, [pc, #76]	@ (80142c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801427c:	f000 fcff 	bl	8014c7e <USBD_GetEpDesc>
 8014280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d002      	beq.n	801428e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	2210      	movs	r2, #16
 801428c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d006      	beq.n	80142a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	2200      	movs	r2, #0
 8014298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801429c:	711a      	strb	r2, [r3, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d006      	beq.n	80142b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	2200      	movs	r2, #0
 80142ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80142b0:	711a      	strb	r2, [r3, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2243      	movs	r2, #67	@ 0x43
 80142ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80142bc:	4b02      	ldr	r3, [pc, #8]	@ (80142c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3718      	adds	r7, #24
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	20000058 	.word	0x20000058

080142cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b086      	sub	sp, #24
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80142d4:	2182      	movs	r1, #130	@ 0x82
 80142d6:	4818      	ldr	r0, [pc, #96]	@ (8014338 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80142d8:	f000 fcd1 	bl	8014c7e <USBD_GetEpDesc>
 80142dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80142de:	2101      	movs	r1, #1
 80142e0:	4815      	ldr	r0, [pc, #84]	@ (8014338 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80142e2:	f000 fccc 	bl	8014c7e <USBD_GetEpDesc>
 80142e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80142e8:	2181      	movs	r1, #129	@ 0x81
 80142ea:	4813      	ldr	r0, [pc, #76]	@ (8014338 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80142ec:	f000 fcc7 	bl	8014c7e <USBD_GetEpDesc>
 80142f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d002      	beq.n	80142fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	2210      	movs	r2, #16
 80142fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d006      	beq.n	8014312 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	2200      	movs	r2, #0
 8014308:	711a      	strb	r2, [r3, #4]
 801430a:	2200      	movs	r2, #0
 801430c:	f042 0202 	orr.w	r2, r2, #2
 8014310:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d006      	beq.n	8014326 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2200      	movs	r2, #0
 801431c:	711a      	strb	r2, [r3, #4]
 801431e:	2200      	movs	r2, #0
 8014320:	f042 0202 	orr.w	r2, r2, #2
 8014324:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2243      	movs	r2, #67	@ 0x43
 801432a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801432c:	4b02      	ldr	r3, [pc, #8]	@ (8014338 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801432e:	4618      	mov	r0, r3
 8014330:	3718      	adds	r7, #24
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	20000058 	.word	0x20000058

0801433c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b086      	sub	sp, #24
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014344:	2182      	movs	r1, #130	@ 0x82
 8014346:	4818      	ldr	r0, [pc, #96]	@ (80143a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014348:	f000 fc99 	bl	8014c7e <USBD_GetEpDesc>
 801434c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801434e:	2101      	movs	r1, #1
 8014350:	4815      	ldr	r0, [pc, #84]	@ (80143a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014352:	f000 fc94 	bl	8014c7e <USBD_GetEpDesc>
 8014356:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014358:	2181      	movs	r1, #129	@ 0x81
 801435a:	4813      	ldr	r0, [pc, #76]	@ (80143a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801435c:	f000 fc8f 	bl	8014c7e <USBD_GetEpDesc>
 8014360:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d002      	beq.n	801436e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	2210      	movs	r2, #16
 801436c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d006      	beq.n	8014382 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	2200      	movs	r2, #0
 8014378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801437c:	711a      	strb	r2, [r3, #4]
 801437e:	2200      	movs	r2, #0
 8014380:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d006      	beq.n	8014396 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	2200      	movs	r2, #0
 801438c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014390:	711a      	strb	r2, [r3, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2243      	movs	r2, #67	@ 0x43
 801439a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801439c:	4b02      	ldr	r3, [pc, #8]	@ (80143a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3718      	adds	r7, #24
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	20000058 	.word	0x20000058

080143ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	220a      	movs	r2, #10
 80143b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80143ba:	4b03      	ldr	r3, [pc, #12]	@ (80143c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80143bc:	4618      	mov	r0, r3
 80143be:	370c      	adds	r7, #12
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr
 80143c8:	20000014 	.word	0x20000014

080143cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b083      	sub	sp, #12
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d101      	bne.n	80143e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80143dc:	2303      	movs	r3, #3
 80143de:	e009      	b.n	80143f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	33b0      	adds	r3, #176	@ 0xb0
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4413      	add	r3, r2
 80143ee:	683a      	ldr	r2, [r7, #0]
 80143f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80143f2:	2300      	movs	r3, #0
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	370c      	adds	r7, #12
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr

08014400 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014400:	b480      	push	{r7}
 8014402:	b087      	sub	sp, #28
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	32b0      	adds	r2, #176	@ 0xb0
 8014416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d101      	bne.n	8014426 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014422:	2303      	movs	r3, #3
 8014424:	e008      	b.n	8014438 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	68ba      	ldr	r2, [r7, #8]
 801442a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8014436:	2300      	movs	r3, #0
}
 8014438:	4618      	mov	r0, r3
 801443a:	371c      	adds	r7, #28
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr

08014444 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	32b0      	adds	r2, #176	@ 0xb0
 8014458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801445c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d101      	bne.n	8014468 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014464:	2303      	movs	r3, #3
 8014466:	e004      	b.n	8014472 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	683a      	ldr	r2, [r7, #0]
 801446c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014470:	2300      	movs	r3, #0
}
 8014472:	4618      	mov	r0, r3
 8014474:	3714      	adds	r7, #20
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr
	...

08014480 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	32b0      	adds	r2, #176	@ 0xb0
 8014492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014496:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	32b0      	adds	r2, #176	@ 0xb0
 80144a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d101      	bne.n	80144ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80144aa:	2303      	movs	r3, #3
 80144ac:	e018      	b.n	80144e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	7c1b      	ldrb	r3, [r3, #16]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d10a      	bne.n	80144cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80144b6:	4b0c      	ldr	r3, [pc, #48]	@ (80144e8 <USBD_CDC_ReceivePacket+0x68>)
 80144b8:	7819      	ldrb	r1, [r3, #0]
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80144c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f005 fa43 	bl	8019950 <USBD_LL_PrepareReceive>
 80144ca:	e008      	b.n	80144de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80144cc:	4b06      	ldr	r3, [pc, #24]	@ (80144e8 <USBD_CDC_ReceivePacket+0x68>)
 80144ce:	7819      	ldrb	r1, [r3, #0]
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80144d6:	2340      	movs	r3, #64	@ 0x40
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f005 fa39 	bl	8019950 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80144de:	2300      	movs	r3, #0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	2000009c 	.word	0x2000009c

080144ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b086      	sub	sp, #24
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	4613      	mov	r3, r2
 80144f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d101      	bne.n	8014504 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014500:	2303      	movs	r3, #3
 8014502:	e01f      	b.n	8014544 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2200      	movs	r2, #0
 8014508:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2200      	movs	r2, #0
 8014510:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2200      	movs	r2, #0
 8014518:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d003      	beq.n	801452a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	68ba      	ldr	r2, [r7, #8]
 8014526:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2201      	movs	r2, #1
 801452e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	79fa      	ldrb	r2, [r7, #7]
 8014536:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014538:	68f8      	ldr	r0, [r7, #12]
 801453a:	f005 f8b3 	bl	80196a4 <USBD_LL_Init>
 801453e:	4603      	mov	r3, r0
 8014540:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014542:	7dfb      	ldrb	r3, [r7, #23]
}
 8014544:	4618      	mov	r0, r3
 8014546:	3718      	adds	r7, #24
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014556:	2300      	movs	r3, #0
 8014558:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d101      	bne.n	8014564 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014560:	2303      	movs	r3, #3
 8014562:	e025      	b.n	80145b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	32ae      	adds	r2, #174	@ 0xae
 8014576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801457c:	2b00      	cmp	r3, #0
 801457e:	d00f      	beq.n	80145a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	32ae      	adds	r2, #174	@ 0xae
 801458a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014590:	f107 020e 	add.w	r2, r7, #14
 8014594:	4610      	mov	r0, r2
 8014596:	4798      	blx	r3
 8014598:	4602      	mov	r2, r0
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80145a6:	1c5a      	adds	r2, r3, #1
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3710      	adds	r7, #16
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f005 f8bb 	bl	801973c <USBD_LL_Start>
 80145c6:	4603      	mov	r3, r0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b083      	sub	sp, #12
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80145d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80145da:	4618      	mov	r0, r3
 80145dc:	370c      	adds	r7, #12
 80145de:	46bd      	mov	sp, r7
 80145e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e4:	4770      	bx	lr

080145e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b084      	sub	sp, #16
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
 80145ee:	460b      	mov	r3, r1
 80145f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80145f2:	2300      	movs	r3, #0
 80145f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d009      	beq.n	8014614 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	78fa      	ldrb	r2, [r7, #3]
 801460a:	4611      	mov	r1, r2
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	4798      	blx	r3
 8014610:	4603      	mov	r3, r0
 8014612:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014614:	7bfb      	ldrb	r3, [r7, #15]
}
 8014616:	4618      	mov	r0, r3
 8014618:	3710      	adds	r7, #16
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801461e:	b580      	push	{r7, lr}
 8014620:	b084      	sub	sp, #16
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
 8014626:	460b      	mov	r3, r1
 8014628:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801462a:	2300      	movs	r3, #0
 801462c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	78fa      	ldrb	r2, [r7, #3]
 8014638:	4611      	mov	r1, r2
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	4798      	blx	r3
 801463e:	4603      	mov	r3, r0
 8014640:	2b00      	cmp	r3, #0
 8014642:	d001      	beq.n	8014648 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014644:	2303      	movs	r3, #3
 8014646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014648:	7bfb      	ldrb	r3, [r7, #15]
}
 801464a:	4618      	mov	r0, r3
 801464c:	3710      	adds	r7, #16
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}

08014652 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014652:	b580      	push	{r7, lr}
 8014654:	b084      	sub	sp, #16
 8014656:	af00      	add	r7, sp, #0
 8014658:	6078      	str	r0, [r7, #4]
 801465a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014662:	6839      	ldr	r1, [r7, #0]
 8014664:	4618      	mov	r0, r3
 8014666:	f001 f906 	bl	8015876 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2201      	movs	r2, #1
 801466e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014678:	461a      	mov	r2, r3
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014686:	f003 031f 	and.w	r3, r3, #31
 801468a:	2b02      	cmp	r3, #2
 801468c:	d01a      	beq.n	80146c4 <USBD_LL_SetupStage+0x72>
 801468e:	2b02      	cmp	r3, #2
 8014690:	d822      	bhi.n	80146d8 <USBD_LL_SetupStage+0x86>
 8014692:	2b00      	cmp	r3, #0
 8014694:	d002      	beq.n	801469c <USBD_LL_SetupStage+0x4a>
 8014696:	2b01      	cmp	r3, #1
 8014698:	d00a      	beq.n	80146b0 <USBD_LL_SetupStage+0x5e>
 801469a:	e01d      	b.n	80146d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80146a2:	4619      	mov	r1, r3
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f000 fb5d 	bl	8014d64 <USBD_StdDevReq>
 80146aa:	4603      	mov	r3, r0
 80146ac:	73fb      	strb	r3, [r7, #15]
      break;
 80146ae:	e020      	b.n	80146f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80146b6:	4619      	mov	r1, r3
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 fbc5 	bl	8014e48 <USBD_StdItfReq>
 80146be:	4603      	mov	r3, r0
 80146c0:	73fb      	strb	r3, [r7, #15]
      break;
 80146c2:	e016      	b.n	80146f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80146ca:	4619      	mov	r1, r3
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f000 fc27 	bl	8014f20 <USBD_StdEPReq>
 80146d2:	4603      	mov	r3, r0
 80146d4:	73fb      	strb	r3, [r7, #15]
      break;
 80146d6:	e00c      	b.n	80146f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80146de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	4619      	mov	r1, r3
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f005 f888 	bl	80197fc <USBD_LL_StallEP>
 80146ec:	4603      	mov	r3, r0
 80146ee:	73fb      	strb	r3, [r7, #15]
      break;
 80146f0:	bf00      	nop
  }

  return ret;
 80146f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3710      	adds	r7, #16
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b086      	sub	sp, #24
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	460b      	mov	r3, r1
 8014706:	607a      	str	r2, [r7, #4]
 8014708:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801470a:	2300      	movs	r3, #0
 801470c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801470e:	7afb      	ldrb	r3, [r7, #11]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d16e      	bne.n	80147f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801471a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014722:	2b03      	cmp	r3, #3
 8014724:	f040 8098 	bne.w	8014858 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	689a      	ldr	r2, [r3, #8]
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	429a      	cmp	r2, r3
 8014732:	d913      	bls.n	801475c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	689a      	ldr	r2, [r3, #8]
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	1ad2      	subs	r2, r2, r3
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	68da      	ldr	r2, [r3, #12]
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	4293      	cmp	r3, r2
 801474c:	bf28      	it	cs
 801474e:	4613      	movcs	r3, r2
 8014750:	461a      	mov	r2, r3
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f001 f982 	bl	8015a5e <USBD_CtlContinueRx>
 801475a:	e07d      	b.n	8014858 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014762:	f003 031f 	and.w	r3, r3, #31
 8014766:	2b02      	cmp	r3, #2
 8014768:	d014      	beq.n	8014794 <USBD_LL_DataOutStage+0x98>
 801476a:	2b02      	cmp	r3, #2
 801476c:	d81d      	bhi.n	80147aa <USBD_LL_DataOutStage+0xae>
 801476e:	2b00      	cmp	r3, #0
 8014770:	d002      	beq.n	8014778 <USBD_LL_DataOutStage+0x7c>
 8014772:	2b01      	cmp	r3, #1
 8014774:	d003      	beq.n	801477e <USBD_LL_DataOutStage+0x82>
 8014776:	e018      	b.n	80147aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014778:	2300      	movs	r3, #0
 801477a:	75bb      	strb	r3, [r7, #22]
            break;
 801477c:	e018      	b.n	80147b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014784:	b2db      	uxtb	r3, r3
 8014786:	4619      	mov	r1, r3
 8014788:	68f8      	ldr	r0, [r7, #12]
 801478a:	f000 fa5e 	bl	8014c4a <USBD_CoreFindIF>
 801478e:	4603      	mov	r3, r0
 8014790:	75bb      	strb	r3, [r7, #22]
            break;
 8014792:	e00d      	b.n	80147b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801479a:	b2db      	uxtb	r3, r3
 801479c:	4619      	mov	r1, r3
 801479e:	68f8      	ldr	r0, [r7, #12]
 80147a0:	f000 fa60 	bl	8014c64 <USBD_CoreFindEP>
 80147a4:	4603      	mov	r3, r0
 80147a6:	75bb      	strb	r3, [r7, #22]
            break;
 80147a8:	e002      	b.n	80147b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80147aa:	2300      	movs	r3, #0
 80147ac:	75bb      	strb	r3, [r7, #22]
            break;
 80147ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80147b0:	7dbb      	ldrb	r3, [r7, #22]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d119      	bne.n	80147ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	2b03      	cmp	r3, #3
 80147c0:	d113      	bne.n	80147ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80147c2:	7dba      	ldrb	r2, [r7, #22]
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	32ae      	adds	r2, #174	@ 0xae
 80147c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147cc:	691b      	ldr	r3, [r3, #16]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d00b      	beq.n	80147ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80147d2:	7dba      	ldrb	r2, [r7, #22]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80147da:	7dba      	ldrb	r2, [r7, #22]
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	32ae      	adds	r2, #174	@ 0xae
 80147e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147e4:	691b      	ldr	r3, [r3, #16]
 80147e6:	68f8      	ldr	r0, [r7, #12]
 80147e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80147ea:	68f8      	ldr	r0, [r7, #12]
 80147ec:	f001 f948 	bl	8015a80 <USBD_CtlSendStatus>
 80147f0:	e032      	b.n	8014858 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80147f2:	7afb      	ldrb	r3, [r7, #11]
 80147f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147f8:	b2db      	uxtb	r3, r3
 80147fa:	4619      	mov	r1, r3
 80147fc:	68f8      	ldr	r0, [r7, #12]
 80147fe:	f000 fa31 	bl	8014c64 <USBD_CoreFindEP>
 8014802:	4603      	mov	r3, r0
 8014804:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014806:	7dbb      	ldrb	r3, [r7, #22]
 8014808:	2bff      	cmp	r3, #255	@ 0xff
 801480a:	d025      	beq.n	8014858 <USBD_LL_DataOutStage+0x15c>
 801480c:	7dbb      	ldrb	r3, [r7, #22]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d122      	bne.n	8014858 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014818:	b2db      	uxtb	r3, r3
 801481a:	2b03      	cmp	r3, #3
 801481c:	d117      	bne.n	801484e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801481e:	7dba      	ldrb	r2, [r7, #22]
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	32ae      	adds	r2, #174	@ 0xae
 8014824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014828:	699b      	ldr	r3, [r3, #24]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d00f      	beq.n	801484e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801482e:	7dba      	ldrb	r2, [r7, #22]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014836:	7dba      	ldrb	r2, [r7, #22]
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	32ae      	adds	r2, #174	@ 0xae
 801483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014840:	699b      	ldr	r3, [r3, #24]
 8014842:	7afa      	ldrb	r2, [r7, #11]
 8014844:	4611      	mov	r1, r2
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	4798      	blx	r3
 801484a:	4603      	mov	r3, r0
 801484c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801484e:	7dfb      	ldrb	r3, [r7, #23]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d001      	beq.n	8014858 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014854:	7dfb      	ldrb	r3, [r7, #23]
 8014856:	e000      	b.n	801485a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014858:	2300      	movs	r3, #0
}
 801485a:	4618      	mov	r0, r3
 801485c:	3718      	adds	r7, #24
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}

08014862 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014862:	b580      	push	{r7, lr}
 8014864:	b086      	sub	sp, #24
 8014866:	af00      	add	r7, sp, #0
 8014868:	60f8      	str	r0, [r7, #12]
 801486a:	460b      	mov	r3, r1
 801486c:	607a      	str	r2, [r7, #4]
 801486e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014870:	7afb      	ldrb	r3, [r7, #11]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d16f      	bne.n	8014956 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	3314      	adds	r3, #20
 801487a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014882:	2b02      	cmp	r3, #2
 8014884:	d15a      	bne.n	801493c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	689a      	ldr	r2, [r3, #8]
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	429a      	cmp	r2, r3
 8014890:	d914      	bls.n	80148bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	689a      	ldr	r2, [r3, #8]
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	68db      	ldr	r3, [r3, #12]
 801489a:	1ad2      	subs	r2, r2, r3
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	461a      	mov	r2, r3
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f001 f8aa 	bl	8015a02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80148ae:	2300      	movs	r3, #0
 80148b0:	2200      	movs	r2, #0
 80148b2:	2100      	movs	r1, #0
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f005 f84b 	bl	8019950 <USBD_LL_PrepareReceive>
 80148ba:	e03f      	b.n	801493c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	68da      	ldr	r2, [r3, #12]
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d11c      	bne.n	8014902 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	685a      	ldr	r2, [r3, #4]
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d316      	bcc.n	8014902 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	685a      	ldr	r2, [r3, #4]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80148de:	429a      	cmp	r2, r3
 80148e0:	d20f      	bcs.n	8014902 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80148e2:	2200      	movs	r2, #0
 80148e4:	2100      	movs	r1, #0
 80148e6:	68f8      	ldr	r0, [r7, #12]
 80148e8:	f001 f88b 	bl	8015a02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2200      	movs	r2, #0
 80148f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80148f4:	2300      	movs	r3, #0
 80148f6:	2200      	movs	r2, #0
 80148f8:	2100      	movs	r1, #0
 80148fa:	68f8      	ldr	r0, [r7, #12]
 80148fc:	f005 f828 	bl	8019950 <USBD_LL_PrepareReceive>
 8014900:	e01c      	b.n	801493c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014908:	b2db      	uxtb	r3, r3
 801490a:	2b03      	cmp	r3, #3
 801490c:	d10f      	bne.n	801492e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d009      	beq.n	801492e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2200      	movs	r2, #0
 801491e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801492e:	2180      	movs	r1, #128	@ 0x80
 8014930:	68f8      	ldr	r0, [r7, #12]
 8014932:	f004 ff63 	bl	80197fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014936:	68f8      	ldr	r0, [r7, #12]
 8014938:	f001 f8b5 	bl	8015aa6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014942:	2b00      	cmp	r3, #0
 8014944:	d03a      	beq.n	80149bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014946:	68f8      	ldr	r0, [r7, #12]
 8014948:	f7ff fe42 	bl	80145d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2200      	movs	r2, #0
 8014950:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014954:	e032      	b.n	80149bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014956:	7afb      	ldrb	r3, [r7, #11]
 8014958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801495c:	b2db      	uxtb	r3, r3
 801495e:	4619      	mov	r1, r3
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f000 f97f 	bl	8014c64 <USBD_CoreFindEP>
 8014966:	4603      	mov	r3, r0
 8014968:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801496a:	7dfb      	ldrb	r3, [r7, #23]
 801496c:	2bff      	cmp	r3, #255	@ 0xff
 801496e:	d025      	beq.n	80149bc <USBD_LL_DataInStage+0x15a>
 8014970:	7dfb      	ldrb	r3, [r7, #23]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d122      	bne.n	80149bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801497c:	b2db      	uxtb	r3, r3
 801497e:	2b03      	cmp	r3, #3
 8014980:	d11c      	bne.n	80149bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014982:	7dfa      	ldrb	r2, [r7, #23]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	32ae      	adds	r2, #174	@ 0xae
 8014988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801498c:	695b      	ldr	r3, [r3, #20]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d014      	beq.n	80149bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014992:	7dfa      	ldrb	r2, [r7, #23]
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801499a:	7dfa      	ldrb	r2, [r7, #23]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	32ae      	adds	r2, #174	@ 0xae
 80149a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149a4:	695b      	ldr	r3, [r3, #20]
 80149a6:	7afa      	ldrb	r2, [r7, #11]
 80149a8:	4611      	mov	r1, r2
 80149aa:	68f8      	ldr	r0, [r7, #12]
 80149ac:	4798      	blx	r3
 80149ae:	4603      	mov	r3, r0
 80149b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80149b2:	7dbb      	ldrb	r3, [r7, #22]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d001      	beq.n	80149bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80149b8:	7dbb      	ldrb	r3, [r7, #22]
 80149ba:	e000      	b.n	80149be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80149bc:	2300      	movs	r3, #0
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3718      	adds	r7, #24
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}

080149c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80149c6:	b580      	push	{r7, lr}
 80149c8:	b084      	sub	sp, #16
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80149ce:	2300      	movs	r3, #0
 80149d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2201      	movs	r2, #1
 80149d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2200      	movs	r2, #0
 80149de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2200      	movs	r2, #0
 80149e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2200      	movs	r2, #0
 80149f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d014      	beq.n	8014a2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d00e      	beq.n	8014a2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a14:	685b      	ldr	r3, [r3, #4]
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	6852      	ldr	r2, [r2, #4]
 8014a1a:	b2d2      	uxtb	r2, r2
 8014a1c:	4611      	mov	r1, r2
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	4798      	blx	r3
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014a28:	2303      	movs	r3, #3
 8014a2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a2c:	2340      	movs	r3, #64	@ 0x40
 8014a2e:	2200      	movs	r2, #0
 8014a30:	2100      	movs	r1, #0
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f004 fe9d 	bl	8019772 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2240      	movs	r2, #64	@ 0x40
 8014a44:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a48:	2340      	movs	r3, #64	@ 0x40
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	2180      	movs	r1, #128	@ 0x80
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f004 fe8f 	bl	8019772 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2201      	movs	r2, #1
 8014a58:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2240      	movs	r2, #64	@ 0x40
 8014a5e:	621a      	str	r2, [r3, #32]

  return ret;
 8014a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014a6a:	b480      	push	{r7}
 8014a6c:	b083      	sub	sp, #12
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	460b      	mov	r3, r1
 8014a74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	78fa      	ldrb	r2, [r7, #3]
 8014a7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	370c      	adds	r7, #12
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr

08014a8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014a8a:	b480      	push	{r7}
 8014a8c:	b083      	sub	sp, #12
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2204      	movs	r2, #4
 8014aa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014aa8:	2300      	movs	r3, #0
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	370c      	adds	r7, #12
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr

08014ab6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014ab6:	b480      	push	{r7}
 8014ab8:	b083      	sub	sp, #12
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	2b04      	cmp	r3, #4
 8014ac8:	d106      	bne.n	8014ad8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8014ad0:	b2da      	uxtb	r2, r3
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8014ad8:	2300      	movs	r3, #0
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	370c      	adds	r7, #12
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae4:	4770      	bx	lr

08014ae6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014ae6:	b580      	push	{r7, lr}
 8014ae8:	b082      	sub	sp, #8
 8014aea:	af00      	add	r7, sp, #0
 8014aec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	2b03      	cmp	r3, #3
 8014af8:	d110      	bne.n	8014b1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00b      	beq.n	8014b1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b0a:	69db      	ldr	r3, [r3, #28]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d005      	beq.n	8014b1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b16:	69db      	ldr	r3, [r3, #28]
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014b1c:	2300      	movs	r3, #0
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}

08014b26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014b26:	b580      	push	{r7, lr}
 8014b28:	b082      	sub	sp, #8
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	6078      	str	r0, [r7, #4]
 8014b2e:	460b      	mov	r3, r1
 8014b30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	32ae      	adds	r2, #174	@ 0xae
 8014b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d101      	bne.n	8014b48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014b44:	2303      	movs	r3, #3
 8014b46:	e01c      	b.n	8014b82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b4e:	b2db      	uxtb	r3, r3
 8014b50:	2b03      	cmp	r3, #3
 8014b52:	d115      	bne.n	8014b80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	32ae      	adds	r2, #174	@ 0xae
 8014b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b62:	6a1b      	ldr	r3, [r3, #32]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00b      	beq.n	8014b80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	32ae      	adds	r2, #174	@ 0xae
 8014b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b76:	6a1b      	ldr	r3, [r3, #32]
 8014b78:	78fa      	ldrb	r2, [r7, #3]
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014b80:	2300      	movs	r3, #0
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b082      	sub	sp, #8
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	460b      	mov	r3, r1
 8014b94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	32ae      	adds	r2, #174	@ 0xae
 8014ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d101      	bne.n	8014bac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014ba8:	2303      	movs	r3, #3
 8014baa:	e01c      	b.n	8014be6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	2b03      	cmp	r3, #3
 8014bb6:	d115      	bne.n	8014be4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	32ae      	adds	r2, #174	@ 0xae
 8014bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d00b      	beq.n	8014be4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	32ae      	adds	r2, #174	@ 0xae
 8014bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bdc:	78fa      	ldrb	r2, [r7, #3]
 8014bde:	4611      	mov	r1, r2
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014be4:	2300      	movs	r3, #0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3708      	adds	r7, #8
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}

08014bee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014bee:	b480      	push	{r7}
 8014bf0:	b083      	sub	sp, #12
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014bf6:	2300      	movs	r3, #0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	370c      	adds	r7, #12
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2201      	movs	r2, #1
 8014c14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d00e      	beq.n	8014c40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	6852      	ldr	r2, [r2, #4]
 8014c2e:	b2d2      	uxtb	r2, r2
 8014c30:	4611      	mov	r1, r2
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	4798      	blx	r3
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d001      	beq.n	8014c40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3710      	adds	r7, #16
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}

08014c4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014c4a:	b480      	push	{r7}
 8014c4c:	b083      	sub	sp, #12
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
 8014c52:	460b      	mov	r3, r1
 8014c54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014c56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	370c      	adds	r7, #12
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr

08014c64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b083      	sub	sp, #12
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014c70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	370c      	adds	r7, #12
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b086      	sub	sp, #24
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
 8014c86:	460b      	mov	r3, r1
 8014c88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014c92:	2300      	movs	r3, #0
 8014c94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	885b      	ldrh	r3, [r3, #2]
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	68fa      	ldr	r2, [r7, #12]
 8014c9e:	7812      	ldrb	r2, [r2, #0]
 8014ca0:	4293      	cmp	r3, r2
 8014ca2:	d91f      	bls.n	8014ce4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014caa:	e013      	b.n	8014cd4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014cac:	f107 030a 	add.w	r3, r7, #10
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	6978      	ldr	r0, [r7, #20]
 8014cb4:	f000 f81b 	bl	8014cee <USBD_GetNextDesc>
 8014cb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	785b      	ldrb	r3, [r3, #1]
 8014cbe:	2b05      	cmp	r3, #5
 8014cc0:	d108      	bne.n	8014cd4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	789b      	ldrb	r3, [r3, #2]
 8014cca:	78fa      	ldrb	r2, [r7, #3]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d008      	beq.n	8014ce2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	885b      	ldrh	r3, [r3, #2]
 8014cd8:	b29a      	uxth	r2, r3
 8014cda:	897b      	ldrh	r3, [r7, #10]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d8e5      	bhi.n	8014cac <USBD_GetEpDesc+0x2e>
 8014ce0:	e000      	b.n	8014ce4 <USBD_GetEpDesc+0x66>
          break;
 8014ce2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014ce4:	693b      	ldr	r3, [r7, #16]
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}

08014cee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b085      	sub	sp, #20
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
 8014cf6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	881b      	ldrh	r3, [r3, #0]
 8014d00:	68fa      	ldr	r2, [r7, #12]
 8014d02:	7812      	ldrb	r2, [r2, #0]
 8014d04:	4413      	add	r3, r2
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	461a      	mov	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	4413      	add	r3, r2
 8014d16:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014d18:	68fb      	ldr	r3, [r7, #12]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3714      	adds	r7, #20
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014d26:	b480      	push	{r7}
 8014d28:	b087      	sub	sp, #28
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	781b      	ldrb	r3, [r3, #0]
 8014d42:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014d44:	8a3b      	ldrh	r3, [r7, #16]
 8014d46:	021b      	lsls	r3, r3, #8
 8014d48:	b21a      	sxth	r2, r3
 8014d4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014d4e:	4313      	orrs	r3, r2
 8014d50:	b21b      	sxth	r3, r3
 8014d52:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014d54:	89fb      	ldrh	r3, [r7, #14]
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	371c      	adds	r7, #28
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr
	...

08014d64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014d7a:	2b40      	cmp	r3, #64	@ 0x40
 8014d7c:	d005      	beq.n	8014d8a <USBD_StdDevReq+0x26>
 8014d7e:	2b40      	cmp	r3, #64	@ 0x40
 8014d80:	d857      	bhi.n	8014e32 <USBD_StdDevReq+0xce>
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d00f      	beq.n	8014da6 <USBD_StdDevReq+0x42>
 8014d86:	2b20      	cmp	r3, #32
 8014d88:	d153      	bne.n	8014e32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	32ae      	adds	r2, #174	@ 0xae
 8014d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	4798      	blx	r3
 8014da0:	4603      	mov	r3, r0
 8014da2:	73fb      	strb	r3, [r7, #15]
      break;
 8014da4:	e04a      	b.n	8014e3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	785b      	ldrb	r3, [r3, #1]
 8014daa:	2b09      	cmp	r3, #9
 8014dac:	d83b      	bhi.n	8014e26 <USBD_StdDevReq+0xc2>
 8014dae:	a201      	add	r2, pc, #4	@ (adr r2, 8014db4 <USBD_StdDevReq+0x50>)
 8014db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014db4:	08014e09 	.word	0x08014e09
 8014db8:	08014e1d 	.word	0x08014e1d
 8014dbc:	08014e27 	.word	0x08014e27
 8014dc0:	08014e13 	.word	0x08014e13
 8014dc4:	08014e27 	.word	0x08014e27
 8014dc8:	08014de7 	.word	0x08014de7
 8014dcc:	08014ddd 	.word	0x08014ddd
 8014dd0:	08014e27 	.word	0x08014e27
 8014dd4:	08014dff 	.word	0x08014dff
 8014dd8:	08014df1 	.word	0x08014df1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014ddc:	6839      	ldr	r1, [r7, #0]
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f000 fa3c 	bl	801525c <USBD_GetDescriptor>
          break;
 8014de4:	e024      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014de6:	6839      	ldr	r1, [r7, #0]
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f000 fba1 	bl	8015530 <USBD_SetAddress>
          break;
 8014dee:	e01f      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014df0:	6839      	ldr	r1, [r7, #0]
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f000 fbe0 	bl	80155b8 <USBD_SetConfig>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	73fb      	strb	r3, [r7, #15]
          break;
 8014dfc:	e018      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014dfe:	6839      	ldr	r1, [r7, #0]
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f000 fc83 	bl	801570c <USBD_GetConfig>
          break;
 8014e06:	e013      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014e08:	6839      	ldr	r1, [r7, #0]
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f000 fcb4 	bl	8015778 <USBD_GetStatus>
          break;
 8014e10:	e00e      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014e12:	6839      	ldr	r1, [r7, #0]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 fce3 	bl	80157e0 <USBD_SetFeature>
          break;
 8014e1a:	e009      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014e1c:	6839      	ldr	r1, [r7, #0]
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 fd07 	bl	8015832 <USBD_ClrFeature>
          break;
 8014e24:	e004      	b.n	8014e30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014e26:	6839      	ldr	r1, [r7, #0]
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f000 fd5e 	bl	80158ea <USBD_CtlError>
          break;
 8014e2e:	bf00      	nop
      }
      break;
 8014e30:	e004      	b.n	8014e3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014e32:	6839      	ldr	r1, [r7, #0]
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 fd58 	bl	80158ea <USBD_CtlError>
      break;
 8014e3a:	bf00      	nop
  }

  return ret;
 8014e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
 8014e46:	bf00      	nop

08014e48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e52:	2300      	movs	r3, #0
 8014e54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014e5e:	2b40      	cmp	r3, #64	@ 0x40
 8014e60:	d005      	beq.n	8014e6e <USBD_StdItfReq+0x26>
 8014e62:	2b40      	cmp	r3, #64	@ 0x40
 8014e64:	d852      	bhi.n	8014f0c <USBD_StdItfReq+0xc4>
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d001      	beq.n	8014e6e <USBD_StdItfReq+0x26>
 8014e6a:	2b20      	cmp	r3, #32
 8014e6c:	d14e      	bne.n	8014f0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e74:	b2db      	uxtb	r3, r3
 8014e76:	3b01      	subs	r3, #1
 8014e78:	2b02      	cmp	r3, #2
 8014e7a:	d840      	bhi.n	8014efe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	889b      	ldrh	r3, [r3, #4]
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	2b01      	cmp	r3, #1
 8014e84:	d836      	bhi.n	8014ef4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	889b      	ldrh	r3, [r3, #4]
 8014e8a:	b2db      	uxtb	r3, r3
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7ff fedb 	bl	8014c4a <USBD_CoreFindIF>
 8014e94:	4603      	mov	r3, r0
 8014e96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014e98:	7bbb      	ldrb	r3, [r7, #14]
 8014e9a:	2bff      	cmp	r3, #255	@ 0xff
 8014e9c:	d01d      	beq.n	8014eda <USBD_StdItfReq+0x92>
 8014e9e:	7bbb      	ldrb	r3, [r7, #14]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d11a      	bne.n	8014eda <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014ea4:	7bba      	ldrb	r2, [r7, #14]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	32ae      	adds	r2, #174	@ 0xae
 8014eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eae:	689b      	ldr	r3, [r3, #8]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d00f      	beq.n	8014ed4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014eb4:	7bba      	ldrb	r2, [r7, #14]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014ebc:	7bba      	ldrb	r2, [r7, #14]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	32ae      	adds	r2, #174	@ 0xae
 8014ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ec6:	689b      	ldr	r3, [r3, #8]
 8014ec8:	6839      	ldr	r1, [r7, #0]
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	4798      	blx	r3
 8014ece:	4603      	mov	r3, r0
 8014ed0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014ed2:	e004      	b.n	8014ede <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014ed4:	2303      	movs	r3, #3
 8014ed6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014ed8:	e001      	b.n	8014ede <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014eda:	2303      	movs	r3, #3
 8014edc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	88db      	ldrh	r3, [r3, #6]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d110      	bne.n	8014f08 <USBD_StdItfReq+0xc0>
 8014ee6:	7bfb      	ldrb	r3, [r7, #15]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10d      	bne.n	8014f08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f000 fdc7 	bl	8015a80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014ef2:	e009      	b.n	8014f08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014ef4:	6839      	ldr	r1, [r7, #0]
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f000 fcf7 	bl	80158ea <USBD_CtlError>
          break;
 8014efc:	e004      	b.n	8014f08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014efe:	6839      	ldr	r1, [r7, #0]
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f000 fcf2 	bl	80158ea <USBD_CtlError>
          break;
 8014f06:	e000      	b.n	8014f0a <USBD_StdItfReq+0xc2>
          break;
 8014f08:	bf00      	nop
      }
      break;
 8014f0a:	e004      	b.n	8014f16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014f0c:	6839      	ldr	r1, [r7, #0]
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 fceb 	bl	80158ea <USBD_CtlError>
      break;
 8014f14:	bf00      	nop
  }

  return ret;
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3710      	adds	r7, #16
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b084      	sub	sp, #16
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	889b      	ldrh	r3, [r3, #4]
 8014f32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014f3c:	2b40      	cmp	r3, #64	@ 0x40
 8014f3e:	d007      	beq.n	8014f50 <USBD_StdEPReq+0x30>
 8014f40:	2b40      	cmp	r3, #64	@ 0x40
 8014f42:	f200 817f 	bhi.w	8015244 <USBD_StdEPReq+0x324>
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d02a      	beq.n	8014fa0 <USBD_StdEPReq+0x80>
 8014f4a:	2b20      	cmp	r3, #32
 8014f4c:	f040 817a 	bne.w	8015244 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014f50:	7bbb      	ldrb	r3, [r7, #14]
 8014f52:	4619      	mov	r1, r3
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7ff fe85 	bl	8014c64 <USBD_CoreFindEP>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f5e:	7b7b      	ldrb	r3, [r7, #13]
 8014f60:	2bff      	cmp	r3, #255	@ 0xff
 8014f62:	f000 8174 	beq.w	801524e <USBD_StdEPReq+0x32e>
 8014f66:	7b7b      	ldrb	r3, [r7, #13]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f040 8170 	bne.w	801524e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014f6e:	7b7a      	ldrb	r2, [r7, #13]
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014f76:	7b7a      	ldrb	r2, [r7, #13]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	32ae      	adds	r2, #174	@ 0xae
 8014f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f80:	689b      	ldr	r3, [r3, #8]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	f000 8163 	beq.w	801524e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014f88:	7b7a      	ldrb	r2, [r7, #13]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	32ae      	adds	r2, #174	@ 0xae
 8014f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f92:	689b      	ldr	r3, [r3, #8]
 8014f94:	6839      	ldr	r1, [r7, #0]
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	4798      	blx	r3
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014f9e:	e156      	b.n	801524e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	785b      	ldrb	r3, [r3, #1]
 8014fa4:	2b03      	cmp	r3, #3
 8014fa6:	d008      	beq.n	8014fba <USBD_StdEPReq+0x9a>
 8014fa8:	2b03      	cmp	r3, #3
 8014faa:	f300 8145 	bgt.w	8015238 <USBD_StdEPReq+0x318>
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f000 809b 	beq.w	80150ea <USBD_StdEPReq+0x1ca>
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d03c      	beq.n	8015032 <USBD_StdEPReq+0x112>
 8014fb8:	e13e      	b.n	8015238 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	2b02      	cmp	r3, #2
 8014fc4:	d002      	beq.n	8014fcc <USBD_StdEPReq+0xac>
 8014fc6:	2b03      	cmp	r3, #3
 8014fc8:	d016      	beq.n	8014ff8 <USBD_StdEPReq+0xd8>
 8014fca:	e02c      	b.n	8015026 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014fcc:	7bbb      	ldrb	r3, [r7, #14]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d00d      	beq.n	8014fee <USBD_StdEPReq+0xce>
 8014fd2:	7bbb      	ldrb	r3, [r7, #14]
 8014fd4:	2b80      	cmp	r3, #128	@ 0x80
 8014fd6:	d00a      	beq.n	8014fee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014fd8:	7bbb      	ldrb	r3, [r7, #14]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f004 fc0d 	bl	80197fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014fe2:	2180      	movs	r1, #128	@ 0x80
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f004 fc09 	bl	80197fc <USBD_LL_StallEP>
 8014fea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014fec:	e020      	b.n	8015030 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014fee:	6839      	ldr	r1, [r7, #0]
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f000 fc7a 	bl	80158ea <USBD_CtlError>
              break;
 8014ff6:	e01b      	b.n	8015030 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	885b      	ldrh	r3, [r3, #2]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d10e      	bne.n	801501e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015000:	7bbb      	ldrb	r3, [r7, #14]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d00b      	beq.n	801501e <USBD_StdEPReq+0xfe>
 8015006:	7bbb      	ldrb	r3, [r7, #14]
 8015008:	2b80      	cmp	r3, #128	@ 0x80
 801500a:	d008      	beq.n	801501e <USBD_StdEPReq+0xfe>
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	88db      	ldrh	r3, [r3, #6]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d104      	bne.n	801501e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015014:	7bbb      	ldrb	r3, [r7, #14]
 8015016:	4619      	mov	r1, r3
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f004 fbef 	bl	80197fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 fd2e 	bl	8015a80 <USBD_CtlSendStatus>

              break;
 8015024:	e004      	b.n	8015030 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015026:	6839      	ldr	r1, [r7, #0]
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f000 fc5e 	bl	80158ea <USBD_CtlError>
              break;
 801502e:	bf00      	nop
          }
          break;
 8015030:	e107      	b.n	8015242 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015038:	b2db      	uxtb	r3, r3
 801503a:	2b02      	cmp	r3, #2
 801503c:	d002      	beq.n	8015044 <USBD_StdEPReq+0x124>
 801503e:	2b03      	cmp	r3, #3
 8015040:	d016      	beq.n	8015070 <USBD_StdEPReq+0x150>
 8015042:	e04b      	b.n	80150dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015044:	7bbb      	ldrb	r3, [r7, #14]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d00d      	beq.n	8015066 <USBD_StdEPReq+0x146>
 801504a:	7bbb      	ldrb	r3, [r7, #14]
 801504c:	2b80      	cmp	r3, #128	@ 0x80
 801504e:	d00a      	beq.n	8015066 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015050:	7bbb      	ldrb	r3, [r7, #14]
 8015052:	4619      	mov	r1, r3
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f004 fbd1 	bl	80197fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801505a:	2180      	movs	r1, #128	@ 0x80
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f004 fbcd 	bl	80197fc <USBD_LL_StallEP>
 8015062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015064:	e040      	b.n	80150e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015066:	6839      	ldr	r1, [r7, #0]
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f000 fc3e 	bl	80158ea <USBD_CtlError>
              break;
 801506e:	e03b      	b.n	80150e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	885b      	ldrh	r3, [r3, #2]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d136      	bne.n	80150e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015078:	7bbb      	ldrb	r3, [r7, #14]
 801507a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801507e:	2b00      	cmp	r3, #0
 8015080:	d004      	beq.n	801508c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015082:	7bbb      	ldrb	r3, [r7, #14]
 8015084:	4619      	mov	r1, r3
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f004 fbd7 	bl	801983a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f000 fcf7 	bl	8015a80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015092:	7bbb      	ldrb	r3, [r7, #14]
 8015094:	4619      	mov	r1, r3
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f7ff fde4 	bl	8014c64 <USBD_CoreFindEP>
 801509c:	4603      	mov	r3, r0
 801509e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150a0:	7b7b      	ldrb	r3, [r7, #13]
 80150a2:	2bff      	cmp	r3, #255	@ 0xff
 80150a4:	d01f      	beq.n	80150e6 <USBD_StdEPReq+0x1c6>
 80150a6:	7b7b      	ldrb	r3, [r7, #13]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d11c      	bne.n	80150e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80150ac:	7b7a      	ldrb	r2, [r7, #13]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80150b4:	7b7a      	ldrb	r2, [r7, #13]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	32ae      	adds	r2, #174	@ 0xae
 80150ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150be:	689b      	ldr	r3, [r3, #8]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d010      	beq.n	80150e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80150c4:	7b7a      	ldrb	r2, [r7, #13]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	32ae      	adds	r2, #174	@ 0xae
 80150ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ce:	689b      	ldr	r3, [r3, #8]
 80150d0:	6839      	ldr	r1, [r7, #0]
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	4798      	blx	r3
 80150d6:	4603      	mov	r3, r0
 80150d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80150da:	e004      	b.n	80150e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80150dc:	6839      	ldr	r1, [r7, #0]
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f000 fc03 	bl	80158ea <USBD_CtlError>
              break;
 80150e4:	e000      	b.n	80150e8 <USBD_StdEPReq+0x1c8>
              break;
 80150e6:	bf00      	nop
          }
          break;
 80150e8:	e0ab      	b.n	8015242 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	2b02      	cmp	r3, #2
 80150f4:	d002      	beq.n	80150fc <USBD_StdEPReq+0x1dc>
 80150f6:	2b03      	cmp	r3, #3
 80150f8:	d032      	beq.n	8015160 <USBD_StdEPReq+0x240>
 80150fa:	e097      	b.n	801522c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80150fc:	7bbb      	ldrb	r3, [r7, #14]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d007      	beq.n	8015112 <USBD_StdEPReq+0x1f2>
 8015102:	7bbb      	ldrb	r3, [r7, #14]
 8015104:	2b80      	cmp	r3, #128	@ 0x80
 8015106:	d004      	beq.n	8015112 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015108:	6839      	ldr	r1, [r7, #0]
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f000 fbed 	bl	80158ea <USBD_CtlError>
                break;
 8015110:	e091      	b.n	8015236 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015116:	2b00      	cmp	r3, #0
 8015118:	da0b      	bge.n	8015132 <USBD_StdEPReq+0x212>
 801511a:	7bbb      	ldrb	r3, [r7, #14]
 801511c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015120:	4613      	mov	r3, r2
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	4413      	add	r3, r2
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	3310      	adds	r3, #16
 801512a:	687a      	ldr	r2, [r7, #4]
 801512c:	4413      	add	r3, r2
 801512e:	3304      	adds	r3, #4
 8015130:	e00b      	b.n	801514a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015132:	7bbb      	ldrb	r3, [r7, #14]
 8015134:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015138:	4613      	mov	r3, r2
 801513a:	009b      	lsls	r3, r3, #2
 801513c:	4413      	add	r3, r2
 801513e:	009b      	lsls	r3, r3, #2
 8015140:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	4413      	add	r3, r2
 8015148:	3304      	adds	r3, #4
 801514a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	2200      	movs	r2, #0
 8015150:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	2202      	movs	r2, #2
 8015156:	4619      	mov	r1, r3
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f000 fc37 	bl	80159cc <USBD_CtlSendData>
              break;
 801515e:	e06a      	b.n	8015236 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015164:	2b00      	cmp	r3, #0
 8015166:	da11      	bge.n	801518c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015168:	7bbb      	ldrb	r3, [r7, #14]
 801516a:	f003 020f 	and.w	r2, r3, #15
 801516e:	6879      	ldr	r1, [r7, #4]
 8015170:	4613      	mov	r3, r2
 8015172:	009b      	lsls	r3, r3, #2
 8015174:	4413      	add	r3, r2
 8015176:	009b      	lsls	r3, r3, #2
 8015178:	440b      	add	r3, r1
 801517a:	3324      	adds	r3, #36	@ 0x24
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d117      	bne.n	80151b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015182:	6839      	ldr	r1, [r7, #0]
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 fbb0 	bl	80158ea <USBD_CtlError>
                  break;
 801518a:	e054      	b.n	8015236 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801518c:	7bbb      	ldrb	r3, [r7, #14]
 801518e:	f003 020f 	and.w	r2, r3, #15
 8015192:	6879      	ldr	r1, [r7, #4]
 8015194:	4613      	mov	r3, r2
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	4413      	add	r3, r2
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	440b      	add	r3, r1
 801519e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80151a2:	881b      	ldrh	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d104      	bne.n	80151b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80151a8:	6839      	ldr	r1, [r7, #0]
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f000 fb9d 	bl	80158ea <USBD_CtlError>
                  break;
 80151b0:	e041      	b.n	8015236 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80151b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	da0b      	bge.n	80151d2 <USBD_StdEPReq+0x2b2>
 80151ba:	7bbb      	ldrb	r3, [r7, #14]
 80151bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80151c0:	4613      	mov	r3, r2
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	4413      	add	r3, r2
 80151c6:	009b      	lsls	r3, r3, #2
 80151c8:	3310      	adds	r3, #16
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	4413      	add	r3, r2
 80151ce:	3304      	adds	r3, #4
 80151d0:	e00b      	b.n	80151ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80151d2:	7bbb      	ldrb	r3, [r7, #14]
 80151d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80151d8:	4613      	mov	r3, r2
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	4413      	add	r3, r2
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80151e4:	687a      	ldr	r2, [r7, #4]
 80151e6:	4413      	add	r3, r2
 80151e8:	3304      	adds	r3, #4
 80151ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80151ec:	7bbb      	ldrb	r3, [r7, #14]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d002      	beq.n	80151f8 <USBD_StdEPReq+0x2d8>
 80151f2:	7bbb      	ldrb	r3, [r7, #14]
 80151f4:	2b80      	cmp	r3, #128	@ 0x80
 80151f6:	d103      	bne.n	8015200 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	2200      	movs	r2, #0
 80151fc:	601a      	str	r2, [r3, #0]
 80151fe:	e00e      	b.n	801521e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015200:	7bbb      	ldrb	r3, [r7, #14]
 8015202:	4619      	mov	r1, r3
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f004 fb37 	bl	8019878 <USBD_LL_IsStallEP>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	d003      	beq.n	8015218 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	2201      	movs	r2, #1
 8015214:	601a      	str	r2, [r3, #0]
 8015216:	e002      	b.n	801521e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	2200      	movs	r2, #0
 801521c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	2202      	movs	r2, #2
 8015222:	4619      	mov	r1, r3
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f000 fbd1 	bl	80159cc <USBD_CtlSendData>
              break;
 801522a:	e004      	b.n	8015236 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801522c:	6839      	ldr	r1, [r7, #0]
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 fb5b 	bl	80158ea <USBD_CtlError>
              break;
 8015234:	bf00      	nop
          }
          break;
 8015236:	e004      	b.n	8015242 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015238:	6839      	ldr	r1, [r7, #0]
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f000 fb55 	bl	80158ea <USBD_CtlError>
          break;
 8015240:	bf00      	nop
      }
      break;
 8015242:	e005      	b.n	8015250 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015244:	6839      	ldr	r1, [r7, #0]
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f000 fb4f 	bl	80158ea <USBD_CtlError>
      break;
 801524c:	e000      	b.n	8015250 <USBD_StdEPReq+0x330>
      break;
 801524e:	bf00      	nop
  }

  return ret;
 8015250:	7bfb      	ldrb	r3, [r7, #15]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3710      	adds	r7, #16
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
	...

0801525c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015266:	2300      	movs	r3, #0
 8015268:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801526a:	2300      	movs	r3, #0
 801526c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801526e:	2300      	movs	r3, #0
 8015270:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	885b      	ldrh	r3, [r3, #2]
 8015276:	0a1b      	lsrs	r3, r3, #8
 8015278:	b29b      	uxth	r3, r3
 801527a:	3b01      	subs	r3, #1
 801527c:	2b06      	cmp	r3, #6
 801527e:	f200 8128 	bhi.w	80154d2 <USBD_GetDescriptor+0x276>
 8015282:	a201      	add	r2, pc, #4	@ (adr r2, 8015288 <USBD_GetDescriptor+0x2c>)
 8015284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015288:	080152a5 	.word	0x080152a5
 801528c:	080152bd 	.word	0x080152bd
 8015290:	080152fd 	.word	0x080152fd
 8015294:	080154d3 	.word	0x080154d3
 8015298:	080154d3 	.word	0x080154d3
 801529c:	08015473 	.word	0x08015473
 80152a0:	0801549f 	.word	0x0801549f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	687a      	ldr	r2, [r7, #4]
 80152ae:	7c12      	ldrb	r2, [r2, #16]
 80152b0:	f107 0108 	add.w	r1, r7, #8
 80152b4:	4610      	mov	r0, r2
 80152b6:	4798      	blx	r3
 80152b8:	60f8      	str	r0, [r7, #12]
      break;
 80152ba:	e112      	b.n	80154e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	7c1b      	ldrb	r3, [r3, #16]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d10d      	bne.n	80152e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152cc:	f107 0208 	add.w	r2, r7, #8
 80152d0:	4610      	mov	r0, r2
 80152d2:	4798      	blx	r3
 80152d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	3301      	adds	r3, #1
 80152da:	2202      	movs	r2, #2
 80152dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80152de:	e100      	b.n	80154e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152e8:	f107 0208 	add.w	r2, r7, #8
 80152ec:	4610      	mov	r0, r2
 80152ee:	4798      	blx	r3
 80152f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	3301      	adds	r3, #1
 80152f6:	2202      	movs	r2, #2
 80152f8:	701a      	strb	r2, [r3, #0]
      break;
 80152fa:	e0f2      	b.n	80154e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	885b      	ldrh	r3, [r3, #2]
 8015300:	b2db      	uxtb	r3, r3
 8015302:	2b05      	cmp	r3, #5
 8015304:	f200 80ac 	bhi.w	8015460 <USBD_GetDescriptor+0x204>
 8015308:	a201      	add	r2, pc, #4	@ (adr r2, 8015310 <USBD_GetDescriptor+0xb4>)
 801530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801530e:	bf00      	nop
 8015310:	08015329 	.word	0x08015329
 8015314:	0801535d 	.word	0x0801535d
 8015318:	08015391 	.word	0x08015391
 801531c:	080153c5 	.word	0x080153c5
 8015320:	080153f9 	.word	0x080153f9
 8015324:	0801542d 	.word	0x0801542d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00b      	beq.n	801534c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	7c12      	ldrb	r2, [r2, #16]
 8015340:	f107 0108 	add.w	r1, r7, #8
 8015344:	4610      	mov	r0, r2
 8015346:	4798      	blx	r3
 8015348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801534a:	e091      	b.n	8015470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801534c:	6839      	ldr	r1, [r7, #0]
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f000 facb 	bl	80158ea <USBD_CtlError>
            err++;
 8015354:	7afb      	ldrb	r3, [r7, #11]
 8015356:	3301      	adds	r3, #1
 8015358:	72fb      	strb	r3, [r7, #11]
          break;
 801535a:	e089      	b.n	8015470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015362:	689b      	ldr	r3, [r3, #8]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d00b      	beq.n	8015380 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801536e:	689b      	ldr	r3, [r3, #8]
 8015370:	687a      	ldr	r2, [r7, #4]
 8015372:	7c12      	ldrb	r2, [r2, #16]
 8015374:	f107 0108 	add.w	r1, r7, #8
 8015378:	4610      	mov	r0, r2
 801537a:	4798      	blx	r3
 801537c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801537e:	e077      	b.n	8015470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015380:	6839      	ldr	r1, [r7, #0]
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f000 fab1 	bl	80158ea <USBD_CtlError>
            err++;
 8015388:	7afb      	ldrb	r3, [r7, #11]
 801538a:	3301      	adds	r3, #1
 801538c:	72fb      	strb	r3, [r7, #11]
          break;
 801538e:	e06f      	b.n	8015470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d00b      	beq.n	80153b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	687a      	ldr	r2, [r7, #4]
 80153a6:	7c12      	ldrb	r2, [r2, #16]
 80153a8:	f107 0108 	add.w	r1, r7, #8
 80153ac:	4610      	mov	r0, r2
 80153ae:	4798      	blx	r3
 80153b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80153b2:	e05d      	b.n	8015470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80153b4:	6839      	ldr	r1, [r7, #0]
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 fa97 	bl	80158ea <USBD_CtlError>
            err++;
 80153bc:	7afb      	ldrb	r3, [r7, #11]
 80153be:	3301      	adds	r3, #1
 80153c0:	72fb      	strb	r3, [r7, #11]
          break;
 80153c2:	e055      	b.n	8015470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153ca:	691b      	ldr	r3, [r3, #16]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d00b      	beq.n	80153e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153d6:	691b      	ldr	r3, [r3, #16]
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	7c12      	ldrb	r2, [r2, #16]
 80153dc:	f107 0108 	add.w	r1, r7, #8
 80153e0:	4610      	mov	r0, r2
 80153e2:	4798      	blx	r3
 80153e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80153e6:	e043      	b.n	8015470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80153e8:	6839      	ldr	r1, [r7, #0]
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f000 fa7d 	bl	80158ea <USBD_CtlError>
            err++;
 80153f0:	7afb      	ldrb	r3, [r7, #11]
 80153f2:	3301      	adds	r3, #1
 80153f4:	72fb      	strb	r3, [r7, #11]
          break;
 80153f6:	e03b      	b.n	8015470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153fe:	695b      	ldr	r3, [r3, #20]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d00b      	beq.n	801541c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801540a:	695b      	ldr	r3, [r3, #20]
 801540c:	687a      	ldr	r2, [r7, #4]
 801540e:	7c12      	ldrb	r2, [r2, #16]
 8015410:	f107 0108 	add.w	r1, r7, #8
 8015414:	4610      	mov	r0, r2
 8015416:	4798      	blx	r3
 8015418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801541a:	e029      	b.n	8015470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801541c:	6839      	ldr	r1, [r7, #0]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 fa63 	bl	80158ea <USBD_CtlError>
            err++;
 8015424:	7afb      	ldrb	r3, [r7, #11]
 8015426:	3301      	adds	r3, #1
 8015428:	72fb      	strb	r3, [r7, #11]
          break;
 801542a:	e021      	b.n	8015470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015432:	699b      	ldr	r3, [r3, #24]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d00b      	beq.n	8015450 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801543e:	699b      	ldr	r3, [r3, #24]
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	7c12      	ldrb	r2, [r2, #16]
 8015444:	f107 0108 	add.w	r1, r7, #8
 8015448:	4610      	mov	r0, r2
 801544a:	4798      	blx	r3
 801544c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801544e:	e00f      	b.n	8015470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015450:	6839      	ldr	r1, [r7, #0]
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f000 fa49 	bl	80158ea <USBD_CtlError>
            err++;
 8015458:	7afb      	ldrb	r3, [r7, #11]
 801545a:	3301      	adds	r3, #1
 801545c:	72fb      	strb	r3, [r7, #11]
          break;
 801545e:	e007      	b.n	8015470 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015460:	6839      	ldr	r1, [r7, #0]
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f000 fa41 	bl	80158ea <USBD_CtlError>
          err++;
 8015468:	7afb      	ldrb	r3, [r7, #11]
 801546a:	3301      	adds	r3, #1
 801546c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801546e:	bf00      	nop
      }
      break;
 8015470:	e037      	b.n	80154e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	7c1b      	ldrb	r3, [r3, #16]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d109      	bne.n	801548e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015482:	f107 0208 	add.w	r2, r7, #8
 8015486:	4610      	mov	r0, r2
 8015488:	4798      	blx	r3
 801548a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801548c:	e029      	b.n	80154e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801548e:	6839      	ldr	r1, [r7, #0]
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f000 fa2a 	bl	80158ea <USBD_CtlError>
        err++;
 8015496:	7afb      	ldrb	r3, [r7, #11]
 8015498:	3301      	adds	r3, #1
 801549a:	72fb      	strb	r3, [r7, #11]
      break;
 801549c:	e021      	b.n	80154e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	7c1b      	ldrb	r3, [r3, #16]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d10d      	bne.n	80154c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154ae:	f107 0208 	add.w	r2, r7, #8
 80154b2:	4610      	mov	r0, r2
 80154b4:	4798      	blx	r3
 80154b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	3301      	adds	r3, #1
 80154bc:	2207      	movs	r2, #7
 80154be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80154c0:	e00f      	b.n	80154e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fa10 	bl	80158ea <USBD_CtlError>
        err++;
 80154ca:	7afb      	ldrb	r3, [r7, #11]
 80154cc:	3301      	adds	r3, #1
 80154ce:	72fb      	strb	r3, [r7, #11]
      break;
 80154d0:	e007      	b.n	80154e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80154d2:	6839      	ldr	r1, [r7, #0]
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f000 fa08 	bl	80158ea <USBD_CtlError>
      err++;
 80154da:	7afb      	ldrb	r3, [r7, #11]
 80154dc:	3301      	adds	r3, #1
 80154de:	72fb      	strb	r3, [r7, #11]
      break;
 80154e0:	bf00      	nop
  }

  if (err != 0U)
 80154e2:	7afb      	ldrb	r3, [r7, #11]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d11e      	bne.n	8015526 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	88db      	ldrh	r3, [r3, #6]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d016      	beq.n	801551e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80154f0:	893b      	ldrh	r3, [r7, #8]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00e      	beq.n	8015514 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	88da      	ldrh	r2, [r3, #6]
 80154fa:	893b      	ldrh	r3, [r7, #8]
 80154fc:	4293      	cmp	r3, r2
 80154fe:	bf28      	it	cs
 8015500:	4613      	movcs	r3, r2
 8015502:	b29b      	uxth	r3, r3
 8015504:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015506:	893b      	ldrh	r3, [r7, #8]
 8015508:	461a      	mov	r2, r3
 801550a:	68f9      	ldr	r1, [r7, #12]
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 fa5d 	bl	80159cc <USBD_CtlSendData>
 8015512:	e009      	b.n	8015528 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015514:	6839      	ldr	r1, [r7, #0]
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f000 f9e7 	bl	80158ea <USBD_CtlError>
 801551c:	e004      	b.n	8015528 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f000 faae 	bl	8015a80 <USBD_CtlSendStatus>
 8015524:	e000      	b.n	8015528 <USBD_GetDescriptor+0x2cc>
    return;
 8015526:	bf00      	nop
  }
}
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop

08015530 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801553a:	683b      	ldr	r3, [r7, #0]
 801553c:	889b      	ldrh	r3, [r3, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d131      	bne.n	80155a6 <USBD_SetAddress+0x76>
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	88db      	ldrh	r3, [r3, #6]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d12d      	bne.n	80155a6 <USBD_SetAddress+0x76>
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	885b      	ldrh	r3, [r3, #2]
 801554e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015550:	d829      	bhi.n	80155a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	885b      	ldrh	r3, [r3, #2]
 8015556:	b2db      	uxtb	r3, r3
 8015558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801555c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b03      	cmp	r3, #3
 8015568:	d104      	bne.n	8015574 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801556a:	6839      	ldr	r1, [r7, #0]
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f000 f9bc 	bl	80158ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015572:	e01d      	b.n	80155b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	7bfa      	ldrb	r2, [r7, #15]
 8015578:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801557c:	7bfb      	ldrb	r3, [r7, #15]
 801557e:	4619      	mov	r1, r3
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f004 f9a5 	bl	80198d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f000 fa7a 	bl	8015a80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801558c:	7bfb      	ldrb	r3, [r7, #15]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d004      	beq.n	801559c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2202      	movs	r2, #2
 8015596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801559a:	e009      	b.n	80155b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2201      	movs	r2, #1
 80155a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155a4:	e004      	b.n	80155b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80155a6:	6839      	ldr	r1, [r7, #0]
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f000 f99e 	bl	80158ea <USBD_CtlError>
  }
}
 80155ae:	bf00      	nop
 80155b0:	bf00      	nop
 80155b2:	3710      	adds	r7, #16
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155c2:	2300      	movs	r3, #0
 80155c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	885b      	ldrh	r3, [r3, #2]
 80155ca:	b2da      	uxtb	r2, r3
 80155cc:	4b4e      	ldr	r3, [pc, #312]	@ (8015708 <USBD_SetConfig+0x150>)
 80155ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80155d0:	4b4d      	ldr	r3, [pc, #308]	@ (8015708 <USBD_SetConfig+0x150>)
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d905      	bls.n	80155e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80155d8:	6839      	ldr	r1, [r7, #0]
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f000 f985 	bl	80158ea <USBD_CtlError>
    return USBD_FAIL;
 80155e0:	2303      	movs	r3, #3
 80155e2:	e08c      	b.n	80156fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80155ea:	b2db      	uxtb	r3, r3
 80155ec:	2b02      	cmp	r3, #2
 80155ee:	d002      	beq.n	80155f6 <USBD_SetConfig+0x3e>
 80155f0:	2b03      	cmp	r3, #3
 80155f2:	d029      	beq.n	8015648 <USBD_SetConfig+0x90>
 80155f4:	e075      	b.n	80156e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80155f6:	4b44      	ldr	r3, [pc, #272]	@ (8015708 <USBD_SetConfig+0x150>)
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d020      	beq.n	8015640 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80155fe:	4b42      	ldr	r3, [pc, #264]	@ (8015708 <USBD_SetConfig+0x150>)
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	461a      	mov	r2, r3
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015608:	4b3f      	ldr	r3, [pc, #252]	@ (8015708 <USBD_SetConfig+0x150>)
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	4619      	mov	r1, r3
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f7fe ffe9 	bl	80145e6 <USBD_SetClassConfig>
 8015614:	4603      	mov	r3, r0
 8015616:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015618:	7bfb      	ldrb	r3, [r7, #15]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d008      	beq.n	8015630 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801561e:	6839      	ldr	r1, [r7, #0]
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f000 f962 	bl	80158ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2202      	movs	r2, #2
 801562a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801562e:	e065      	b.n	80156fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f000 fa25 	bl	8015a80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2203      	movs	r2, #3
 801563a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801563e:	e05d      	b.n	80156fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 fa1d 	bl	8015a80 <USBD_CtlSendStatus>
      break;
 8015646:	e059      	b.n	80156fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015648:	4b2f      	ldr	r3, [pc, #188]	@ (8015708 <USBD_SetConfig+0x150>)
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d112      	bne.n	8015676 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2202      	movs	r2, #2
 8015654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015658:	4b2b      	ldr	r3, [pc, #172]	@ (8015708 <USBD_SetConfig+0x150>)
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	461a      	mov	r2, r3
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015662:	4b29      	ldr	r3, [pc, #164]	@ (8015708 <USBD_SetConfig+0x150>)
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	4619      	mov	r1, r3
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f7fe ffd8 	bl	801461e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f000 fa06 	bl	8015a80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015674:	e042      	b.n	80156fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015676:	4b24      	ldr	r3, [pc, #144]	@ (8015708 <USBD_SetConfig+0x150>)
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	461a      	mov	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	429a      	cmp	r2, r3
 8015682:	d02a      	beq.n	80156da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	b2db      	uxtb	r3, r3
 801568a:	4619      	mov	r1, r3
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f7fe ffc6 	bl	801461e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015692:	4b1d      	ldr	r3, [pc, #116]	@ (8015708 <USBD_SetConfig+0x150>)
 8015694:	781b      	ldrb	r3, [r3, #0]
 8015696:	461a      	mov	r2, r3
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801569c:	4b1a      	ldr	r3, [pc, #104]	@ (8015708 <USBD_SetConfig+0x150>)
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	4619      	mov	r1, r3
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7fe ff9f 	bl	80145e6 <USBD_SetClassConfig>
 80156a8:	4603      	mov	r3, r0
 80156aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80156ac:	7bfb      	ldrb	r3, [r7, #15]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d00f      	beq.n	80156d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80156b2:	6839      	ldr	r1, [r7, #0]
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f000 f918 	bl	80158ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	4619      	mov	r1, r3
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f7fe ffab 	bl	801461e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2202      	movs	r2, #2
 80156cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80156d0:	e014      	b.n	80156fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f000 f9d4 	bl	8015a80 <USBD_CtlSendStatus>
      break;
 80156d8:	e010      	b.n	80156fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f000 f9d0 	bl	8015a80 <USBD_CtlSendStatus>
      break;
 80156e0:	e00c      	b.n	80156fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80156e2:	6839      	ldr	r1, [r7, #0]
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	f000 f900 	bl	80158ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80156ea:	4b07      	ldr	r3, [pc, #28]	@ (8015708 <USBD_SetConfig+0x150>)
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	4619      	mov	r1, r3
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7fe ff94 	bl	801461e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80156f6:	2303      	movs	r3, #3
 80156f8:	73fb      	strb	r3, [r7, #15]
      break;
 80156fa:	bf00      	nop
  }

  return ret;
 80156fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3710      	adds	r7, #16
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}
 8015706:	bf00      	nop
 8015708:	20003648 	.word	0x20003648

0801570c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	88db      	ldrh	r3, [r3, #6]
 801571a:	2b01      	cmp	r3, #1
 801571c:	d004      	beq.n	8015728 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801571e:	6839      	ldr	r1, [r7, #0]
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f000 f8e2 	bl	80158ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015726:	e023      	b.n	8015770 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b02      	cmp	r3, #2
 8015732:	dc02      	bgt.n	801573a <USBD_GetConfig+0x2e>
 8015734:	2b00      	cmp	r3, #0
 8015736:	dc03      	bgt.n	8015740 <USBD_GetConfig+0x34>
 8015738:	e015      	b.n	8015766 <USBD_GetConfig+0x5a>
 801573a:	2b03      	cmp	r3, #3
 801573c:	d00b      	beq.n	8015756 <USBD_GetConfig+0x4a>
 801573e:	e012      	b.n	8015766 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2200      	movs	r2, #0
 8015744:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	3308      	adds	r3, #8
 801574a:	2201      	movs	r2, #1
 801574c:	4619      	mov	r1, r3
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f000 f93c 	bl	80159cc <USBD_CtlSendData>
        break;
 8015754:	e00c      	b.n	8015770 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	3304      	adds	r3, #4
 801575a:	2201      	movs	r2, #1
 801575c:	4619      	mov	r1, r3
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f000 f934 	bl	80159cc <USBD_CtlSendData>
        break;
 8015764:	e004      	b.n	8015770 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015766:	6839      	ldr	r1, [r7, #0]
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f000 f8be 	bl	80158ea <USBD_CtlError>
        break;
 801576e:	bf00      	nop
}
 8015770:	bf00      	nop
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015788:	b2db      	uxtb	r3, r3
 801578a:	3b01      	subs	r3, #1
 801578c:	2b02      	cmp	r3, #2
 801578e:	d81e      	bhi.n	80157ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	88db      	ldrh	r3, [r3, #6]
 8015794:	2b02      	cmp	r3, #2
 8015796:	d004      	beq.n	80157a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015798:	6839      	ldr	r1, [r7, #0]
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f000 f8a5 	bl	80158ea <USBD_CtlError>
        break;
 80157a0:	e01a      	b.n	80157d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	2201      	movs	r2, #1
 80157a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d005      	beq.n	80157be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	f043 0202 	orr.w	r2, r3, #2
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	330c      	adds	r3, #12
 80157c2:	2202      	movs	r2, #2
 80157c4:	4619      	mov	r1, r3
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 f900 	bl	80159cc <USBD_CtlSendData>
      break;
 80157cc:	e004      	b.n	80157d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80157ce:	6839      	ldr	r1, [r7, #0]
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f000 f88a 	bl	80158ea <USBD_CtlError>
      break;
 80157d6:	bf00      	nop
  }
}
 80157d8:	bf00      	nop
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	885b      	ldrh	r3, [r3, #2]
 80157ee:	2b01      	cmp	r3, #1
 80157f0:	d107      	bne.n	8015802 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2201      	movs	r2, #1
 80157f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 f940 	bl	8015a80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015800:	e013      	b.n	801582a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	885b      	ldrh	r3, [r3, #2]
 8015806:	2b02      	cmp	r3, #2
 8015808:	d10b      	bne.n	8015822 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	889b      	ldrh	r3, [r3, #4]
 801580e:	0a1b      	lsrs	r3, r3, #8
 8015810:	b29b      	uxth	r3, r3
 8015812:	b2da      	uxtb	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f000 f930 	bl	8015a80 <USBD_CtlSendStatus>
}
 8015820:	e003      	b.n	801582a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015822:	6839      	ldr	r1, [r7, #0]
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f000 f860 	bl	80158ea <USBD_CtlError>
}
 801582a:	bf00      	nop
 801582c:	3708      	adds	r7, #8
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}

08015832 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015832:	b580      	push	{r7, lr}
 8015834:	b082      	sub	sp, #8
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
 801583a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015842:	b2db      	uxtb	r3, r3
 8015844:	3b01      	subs	r3, #1
 8015846:	2b02      	cmp	r3, #2
 8015848:	d80b      	bhi.n	8015862 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	885b      	ldrh	r3, [r3, #2]
 801584e:	2b01      	cmp	r3, #1
 8015850:	d10c      	bne.n	801586c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2200      	movs	r2, #0
 8015856:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f000 f910 	bl	8015a80 <USBD_CtlSendStatus>
      }
      break;
 8015860:	e004      	b.n	801586c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015862:	6839      	ldr	r1, [r7, #0]
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f000 f840 	bl	80158ea <USBD_CtlError>
      break;
 801586a:	e000      	b.n	801586e <USBD_ClrFeature+0x3c>
      break;
 801586c:	bf00      	nop
  }
}
 801586e:	bf00      	nop
 8015870:	3708      	adds	r7, #8
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}

08015876 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015876:	b580      	push	{r7, lr}
 8015878:	b084      	sub	sp, #16
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
 801587e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	781a      	ldrb	r2, [r3, #0]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	3301      	adds	r3, #1
 8015890:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	781a      	ldrb	r2, [r3, #0]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	3301      	adds	r3, #1
 801589e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f7ff fa40 	bl	8014d26 <SWAPBYTE>
 80158a6:	4603      	mov	r3, r0
 80158a8:	461a      	mov	r2, r3
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	3301      	adds	r3, #1
 80158b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	3301      	adds	r3, #1
 80158b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f7ff fa33 	bl	8014d26 <SWAPBYTE>
 80158c0:	4603      	mov	r3, r0
 80158c2:	461a      	mov	r2, r3
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	3301      	adds	r3, #1
 80158cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	3301      	adds	r3, #1
 80158d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f7ff fa26 	bl	8014d26 <SWAPBYTE>
 80158da:	4603      	mov	r3, r0
 80158dc:	461a      	mov	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	80da      	strh	r2, [r3, #6]
}
 80158e2:	bf00      	nop
 80158e4:	3710      	adds	r7, #16
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}

080158ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158ea:	b580      	push	{r7, lr}
 80158ec:	b082      	sub	sp, #8
 80158ee:	af00      	add	r7, sp, #0
 80158f0:	6078      	str	r0, [r7, #4]
 80158f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80158f4:	2180      	movs	r1, #128	@ 0x80
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	f003 ff80 	bl	80197fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80158fc:	2100      	movs	r1, #0
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f003 ff7c 	bl	80197fc <USBD_LL_StallEP>
}
 8015904:	bf00      	nop
 8015906:	3708      	adds	r7, #8
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b086      	sub	sp, #24
 8015910:	af00      	add	r7, sp, #0
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015918:	2300      	movs	r3, #0
 801591a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d036      	beq.n	8015990 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015926:	6938      	ldr	r0, [r7, #16]
 8015928:	f000 f836 	bl	8015998 <USBD_GetLen>
 801592c:	4603      	mov	r3, r0
 801592e:	3301      	adds	r3, #1
 8015930:	b29b      	uxth	r3, r3
 8015932:	005b      	lsls	r3, r3, #1
 8015934:	b29a      	uxth	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801593a:	7dfb      	ldrb	r3, [r7, #23]
 801593c:	68ba      	ldr	r2, [r7, #8]
 801593e:	4413      	add	r3, r2
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	7812      	ldrb	r2, [r2, #0]
 8015944:	701a      	strb	r2, [r3, #0]
  idx++;
 8015946:	7dfb      	ldrb	r3, [r7, #23]
 8015948:	3301      	adds	r3, #1
 801594a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801594c:	7dfb      	ldrb	r3, [r7, #23]
 801594e:	68ba      	ldr	r2, [r7, #8]
 8015950:	4413      	add	r3, r2
 8015952:	2203      	movs	r2, #3
 8015954:	701a      	strb	r2, [r3, #0]
  idx++;
 8015956:	7dfb      	ldrb	r3, [r7, #23]
 8015958:	3301      	adds	r3, #1
 801595a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801595c:	e013      	b.n	8015986 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801595e:	7dfb      	ldrb	r3, [r7, #23]
 8015960:	68ba      	ldr	r2, [r7, #8]
 8015962:	4413      	add	r3, r2
 8015964:	693a      	ldr	r2, [r7, #16]
 8015966:	7812      	ldrb	r2, [r2, #0]
 8015968:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	3301      	adds	r3, #1
 801596e:	613b      	str	r3, [r7, #16]
    idx++;
 8015970:	7dfb      	ldrb	r3, [r7, #23]
 8015972:	3301      	adds	r3, #1
 8015974:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015976:	7dfb      	ldrb	r3, [r7, #23]
 8015978:	68ba      	ldr	r2, [r7, #8]
 801597a:	4413      	add	r3, r2
 801597c:	2200      	movs	r2, #0
 801597e:	701a      	strb	r2, [r3, #0]
    idx++;
 8015980:	7dfb      	ldrb	r3, [r7, #23]
 8015982:	3301      	adds	r3, #1
 8015984:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d1e7      	bne.n	801595e <USBD_GetString+0x52>
 801598e:	e000      	b.n	8015992 <USBD_GetString+0x86>
    return;
 8015990:	bf00      	nop
  }
}
 8015992:	3718      	adds	r7, #24
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015998:	b480      	push	{r7}
 801599a:	b085      	sub	sp, #20
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80159a0:	2300      	movs	r3, #0
 80159a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80159a8:	e005      	b.n	80159b6 <USBD_GetLen+0x1e>
  {
    len++;
 80159aa:	7bfb      	ldrb	r3, [r7, #15]
 80159ac:	3301      	adds	r3, #1
 80159ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	3301      	adds	r3, #1
 80159b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d1f5      	bne.n	80159aa <USBD_GetLen+0x12>
  }

  return len;
 80159be:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3714      	adds	r7, #20
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr

080159cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b084      	sub	sp, #16
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2202      	movs	r2, #2
 80159dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	687a      	ldr	r2, [r7, #4]
 80159e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	2100      	movs	r1, #0
 80159f2:	68f8      	ldr	r0, [r7, #12]
 80159f4:	f003 ff8b 	bl	801990e <USBD_LL_Transmit>

  return USBD_OK;
 80159f8:	2300      	movs	r3, #0
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3710      	adds	r7, #16
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}

08015a02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b084      	sub	sp, #16
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	60f8      	str	r0, [r7, #12]
 8015a0a:	60b9      	str	r1, [r7, #8]
 8015a0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	68ba      	ldr	r2, [r7, #8]
 8015a12:	2100      	movs	r1, #0
 8015a14:	68f8      	ldr	r0, [r7, #12]
 8015a16:	f003 ff7a 	bl	801990e <USBD_LL_Transmit>

  return USBD_OK;
 8015a1a:	2300      	movs	r3, #0
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	3710      	adds	r7, #16
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}

08015a24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2203      	movs	r2, #3
 8015a34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	687a      	ldr	r2, [r7, #4]
 8015a3c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	687a      	ldr	r2, [r7, #4]
 8015a44:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	68f8      	ldr	r0, [r7, #12]
 8015a50:	f003 ff7e 	bl	8019950 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3710      	adds	r7, #16
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015a5e:	b580      	push	{r7, lr}
 8015a60:	b084      	sub	sp, #16
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	60f8      	str	r0, [r7, #12]
 8015a66:	60b9      	str	r1, [r7, #8]
 8015a68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	68ba      	ldr	r2, [r7, #8]
 8015a6e:	2100      	movs	r1, #0
 8015a70:	68f8      	ldr	r0, [r7, #12]
 8015a72:	f003 ff6d 	bl	8019950 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015a76:	2300      	movs	r3, #0
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3710      	adds	r7, #16
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2204      	movs	r2, #4
 8015a8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015a90:	2300      	movs	r3, #0
 8015a92:	2200      	movs	r2, #0
 8015a94:	2100      	movs	r1, #0
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f003 ff39 	bl	801990e <USBD_LL_Transmit>

  return USBD_OK;
 8015a9c:	2300      	movs	r3, #0
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3708      	adds	r7, #8
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}

08015aa6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b082      	sub	sp, #8
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2205      	movs	r2, #5
 8015ab2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	2200      	movs	r2, #0
 8015aba:	2100      	movs	r1, #0
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f003 ff47 	bl	8019950 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ac2:	2300      	movs	r3, #0
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3708      	adds	r7, #8
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015acc:	b480      	push	{r7}
 8015ace:	b085      	sub	sp, #20
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ade:	2b84      	cmp	r3, #132	@ 0x84
 8015ae0:	d005      	beq.n	8015aee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015ae2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	4413      	add	r3, r2
 8015aea:	3303      	adds	r3, #3
 8015aec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015aee:	68fb      	ldr	r3, [r7, #12]
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3714      	adds	r7, #20
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr

08015afc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015b00:	f001 fb72 	bl	80171e8 <vTaskStartScheduler>
  
  return osOK;
 8015b04:	2300      	movs	r3, #0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b0c:	b089      	sub	sp, #36	@ 0x24
 8015b0e:	af04      	add	r7, sp, #16
 8015b10:	6078      	str	r0, [r7, #4]
 8015b12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	695b      	ldr	r3, [r3, #20]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d020      	beq.n	8015b5e <osThreadCreate+0x54>
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	699b      	ldr	r3, [r3, #24]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d01c      	beq.n	8015b5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	685c      	ldr	r4, [r3, #4]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	691e      	ldr	r6, [r3, #16]
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ff ffc8 	bl	8015acc <makeFreeRtosPriority>
 8015b3c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	695b      	ldr	r3, [r3, #20]
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015b46:	9202      	str	r2, [sp, #8]
 8015b48:	9301      	str	r3, [sp, #4]
 8015b4a:	9100      	str	r1, [sp, #0]
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	4632      	mov	r2, r6
 8015b50:	4629      	mov	r1, r5
 8015b52:	4620      	mov	r0, r4
 8015b54:	f001 f8a8 	bl	8016ca8 <xTaskCreateStatic>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	60fb      	str	r3, [r7, #12]
 8015b5c:	e01c      	b.n	8015b98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	685c      	ldr	r4, [r3, #4]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015b6a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7ff ffaa 	bl	8015acc <makeFreeRtosPriority>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	f107 030c 	add.w	r3, r7, #12
 8015b7e:	9301      	str	r3, [sp, #4]
 8015b80:	9200      	str	r2, [sp, #0]
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	4632      	mov	r2, r6
 8015b86:	4629      	mov	r1, r5
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f001 f8ef 	bl	8016d6c <xTaskCreate>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d001      	beq.n	8015b98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015b94:	2300      	movs	r3, #0
 8015b96:	e000      	b.n	8015b9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015b98:	68fb      	ldr	r3, [r7, #12]
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3714      	adds	r7, #20
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ba2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015ba2:	b580      	push	{r7, lr}
 8015ba4:	b084      	sub	sp, #16
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d001      	beq.n	8015bb8 <osDelay+0x16>
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	e000      	b.n	8015bba <osDelay+0x18>
 8015bb8:	2301      	movs	r3, #1
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f001 fade 	bl	801717c <vTaskDelay>
  
  return osOK;
 8015bc0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3710      	adds	r7, #16
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}

08015bca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8015bca:	b580      	push	{r7, lr}
 8015bcc:	b082      	sub	sp, #8
 8015bce:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8015bd0:	2020      	movs	r0, #32
 8015bd2:	f003 f80b 	bl	8018bec <pvPortMalloc>
 8015bd6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d00a      	beq.n	8015bf4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2200      	movs	r2, #0
 8015be2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	3304      	adds	r3, #4
 8015be8:	4618      	mov	r0, r3
 8015bea:	f000 f9e3 	bl	8015fb4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8015bf4:	687b      	ldr	r3, [r7, #4]
	}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3708      	adds	r7, #8
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
	...

08015c00 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b090      	sub	sp, #64	@ 0x40
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	60f8      	str	r0, [r7, #12]
 8015c08:	60b9      	str	r1, [r7, #8]
 8015c0a:	607a      	str	r2, [r7, #4]
 8015c0c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8015c12:	2300      	movs	r3, #0
 8015c14:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8015c16:	2300      	movs	r3, #0
 8015c18:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d10b      	bne.n	8015c38 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015c32:	bf00      	nop
 8015c34:	bf00      	nop
 8015c36:	e7fd      	b.n	8015c34 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015c3e:	d30b      	bcc.n	8015c58 <xEventGroupWaitBits+0x58>
	__asm volatile
 8015c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c44:	f383 8811 	msr	BASEPRI, r3
 8015c48:	f3bf 8f6f 	isb	sy
 8015c4c:	f3bf 8f4f 	dsb	sy
 8015c50:	61fb      	str	r3, [r7, #28]
}
 8015c52:	bf00      	nop
 8015c54:	bf00      	nop
 8015c56:	e7fd      	b.n	8015c54 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8015c58:	68bb      	ldr	r3, [r7, #8]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d10b      	bne.n	8015c76 <xEventGroupWaitBits+0x76>
	__asm volatile
 8015c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c62:	f383 8811 	msr	BASEPRI, r3
 8015c66:	f3bf 8f6f 	isb	sy
 8015c6a:	f3bf 8f4f 	dsb	sy
 8015c6e:	61bb      	str	r3, [r7, #24]
}
 8015c70:	bf00      	nop
 8015c72:	bf00      	nop
 8015c74:	e7fd      	b.n	8015c72 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c76:	f001 ffe9 	bl	8017c4c <xTaskGetSchedulerState>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d102      	bne.n	8015c86 <xEventGroupWaitBits+0x86>
 8015c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d101      	bne.n	8015c8a <xEventGroupWaitBits+0x8a>
 8015c86:	2301      	movs	r3, #1
 8015c88:	e000      	b.n	8015c8c <xEventGroupWaitBits+0x8c>
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d10b      	bne.n	8015ca8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8015c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c94:	f383 8811 	msr	BASEPRI, r3
 8015c98:	f3bf 8f6f 	isb	sy
 8015c9c:	f3bf 8f4f 	dsb	sy
 8015ca0:	617b      	str	r3, [r7, #20]
}
 8015ca2:	bf00      	nop
 8015ca4:	bf00      	nop
 8015ca6:	e7fd      	b.n	8015ca4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8015ca8:	f001 fb10 	bl	80172cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8015cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8015cb2:	683a      	ldr	r2, [r7, #0]
 8015cb4:	68b9      	ldr	r1, [r7, #8]
 8015cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015cb8:	f000 f946 	bl	8015f48 <prvTestWaitCondition>
 8015cbc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8015cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d00e      	beq.n	8015ce2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8015cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d028      	beq.n	8015d24 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8015cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	43db      	mvns	r3, r3
 8015cda:	401a      	ands	r2, r3
 8015cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cde:	601a      	str	r2, [r3, #0]
 8015ce0:	e020      	b.n	8015d24 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8015ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d104      	bne.n	8015cf2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8015ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8015cec:	2301      	movs	r3, #1
 8015cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8015cf0:	e018      	b.n	8015d24 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d003      	beq.n	8015d00 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8015cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d003      	beq.n	8015d0e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8015d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8015d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8015d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d10:	1d18      	adds	r0, r3, #4
 8015d12:	68ba      	ldr	r2, [r7, #8]
 8015d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d16:	4313      	orrs	r3, r2
 8015d18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	f001 fd02 	bl	8017724 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8015d20:	2300      	movs	r3, #0
 8015d22:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8015d24:	f001 fae0 	bl	80172e8 <xTaskResumeAll>
 8015d28:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8015d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d031      	beq.n	8015d94 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8015d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d107      	bne.n	8015d46 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8015d36:	4b1a      	ldr	r3, [pc, #104]	@ (8015da0 <xEventGroupWaitBits+0x1a0>)
 8015d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d3c:	601a      	str	r2, [r3, #0]
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8015d46:	f002 f827 	bl	8017d98 <uxTaskResetEventItemValue>
 8015d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8015d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d11a      	bne.n	8015d8c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8015d56:	f002 fe27 	bl	80189a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8015d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8015d60:	683a      	ldr	r2, [r7, #0]
 8015d62:	68b9      	ldr	r1, [r7, #8]
 8015d64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015d66:	f000 f8ef 	bl	8015f48 <prvTestWaitCondition>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d009      	beq.n	8015d84 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d006      	beq.n	8015d84 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8015d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	43db      	mvns	r3, r3
 8015d7e:	401a      	ands	r2, r3
 8015d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d82:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8015d84:	2301      	movs	r3, #1
 8015d86:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8015d88:	f002 fe40 	bl	8018a0c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8015d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8015d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3740      	adds	r7, #64	@ 0x40
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	e000ed04 	.word	0xe000ed04

08015da4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b086      	sub	sp, #24
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d10b      	bne.n	8015dd0 <xEventGroupClearBits+0x2c>
	__asm volatile
 8015db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dbc:	f383 8811 	msr	BASEPRI, r3
 8015dc0:	f3bf 8f6f 	isb	sy
 8015dc4:	f3bf 8f4f 	dsb	sy
 8015dc8:	60fb      	str	r3, [r7, #12]
}
 8015dca:	bf00      	nop
 8015dcc:	bf00      	nop
 8015dce:	e7fd      	b.n	8015dcc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015dd6:	d30b      	bcc.n	8015df0 <xEventGroupClearBits+0x4c>
	__asm volatile
 8015dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ddc:	f383 8811 	msr	BASEPRI, r3
 8015de0:	f3bf 8f6f 	isb	sy
 8015de4:	f3bf 8f4f 	dsb	sy
 8015de8:	60bb      	str	r3, [r7, #8]
}
 8015dea:	bf00      	nop
 8015dec:	bf00      	nop
 8015dee:	e7fd      	b.n	8015dec <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8015df0:	f002 fdda 	bl	80189a8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	681a      	ldr	r2, [r3, #0]
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	43db      	mvns	r3, r3
 8015e02:	401a      	ands	r2, r3
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8015e08:	f002 fe00 	bl	8018a0c <vPortExitCritical>

	return uxReturn;
 8015e0c:	693b      	ldr	r3, [r7, #16]
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3718      	adds	r7, #24
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}

08015e16 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8015e16:	b580      	push	{r7, lr}
 8015e18:	b08e      	sub	sp, #56	@ 0x38
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	6078      	str	r0, [r7, #4]
 8015e1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8015e20:	2300      	movs	r3, #0
 8015e22:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d10b      	bne.n	8015e4a <xEventGroupSetBits+0x34>
	__asm volatile
 8015e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e36:	f383 8811 	msr	BASEPRI, r3
 8015e3a:	f3bf 8f6f 	isb	sy
 8015e3e:	f3bf 8f4f 	dsb	sy
 8015e42:	613b      	str	r3, [r7, #16]
}
 8015e44:	bf00      	nop
 8015e46:	bf00      	nop
 8015e48:	e7fd      	b.n	8015e46 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015e50:	d30b      	bcc.n	8015e6a <xEventGroupSetBits+0x54>
	__asm volatile
 8015e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e56:	f383 8811 	msr	BASEPRI, r3
 8015e5a:	f3bf 8f6f 	isb	sy
 8015e5e:	f3bf 8f4f 	dsb	sy
 8015e62:	60fb      	str	r3, [r7, #12]
}
 8015e64:	bf00      	nop
 8015e66:	bf00      	nop
 8015e68:	e7fd      	b.n	8015e66 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8015e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e6c:	3304      	adds	r3, #4
 8015e6e:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e72:	3308      	adds	r3, #8
 8015e74:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8015e76:	f001 fa29 	bl	80172cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8015e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e7c:	68db      	ldr	r3, [r3, #12]
 8015e7e:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8015e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	431a      	orrs	r2, r3
 8015e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e8a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8015e8c:	e03c      	b.n	8015f08 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8015e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8015e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8015e9e:	69bb      	ldr	r3, [r7, #24]
 8015ea0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8015ea4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8015ea6:	69bb      	ldr	r3, [r7, #24]
 8015ea8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015eac:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d108      	bne.n	8015eca <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8015eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	69bb      	ldr	r3, [r7, #24]
 8015ebe:	4013      	ands	r3, r2
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d00b      	beq.n	8015edc <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015ec8:	e008      	b.n	8015edc <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8015eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	69bb      	ldr	r3, [r7, #24]
 8015ed0:	4013      	ands	r3, r2
 8015ed2:	69ba      	ldr	r2, [r7, #24]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d101      	bne.n	8015edc <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8015ed8:	2301      	movs	r3, #1
 8015eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8015edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d010      	beq.n	8015f04 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d003      	beq.n	8015ef4 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8015eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015eee:	69bb      	ldr	r3, [r7, #24]
 8015ef0:	4313      	orrs	r3, r2
 8015ef2:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8015ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8015efc:	4619      	mov	r1, r3
 8015efe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015f00:	f001 fcde 	bl	80178c0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8015f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015f0a:	6a3b      	ldr	r3, [r7, #32]
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d1be      	bne.n	8015e8e <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8015f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f16:	43db      	mvns	r3, r3
 8015f18:	401a      	ands	r2, r3
 8015f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f1c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8015f1e:	f001 f9e3 	bl	80172e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8015f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f24:	681b      	ldr	r3, [r3, #0]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3738      	adds	r7, #56	@ 0x38
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	b082      	sub	sp, #8
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	6078      	str	r0, [r7, #4]
 8015f36:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8015f38:	6839      	ldr	r1, [r7, #0]
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f7ff ff6b 	bl	8015e16 <xEventGroupSetBits>
}
 8015f40:	bf00      	nop
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}

08015f48 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b087      	sub	sp, #28
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8015f54:	2300      	movs	r3, #0
 8015f56:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d107      	bne.n	8015f6e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	4013      	ands	r3, r2
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00a      	beq.n	8015f7e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015f68:	2301      	movs	r3, #1
 8015f6a:	617b      	str	r3, [r7, #20]
 8015f6c:	e007      	b.n	8015f7e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8015f6e:	68fa      	ldr	r2, [r7, #12]
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	4013      	ands	r3, r2
 8015f74:	68ba      	ldr	r2, [r7, #8]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d101      	bne.n	8015f7e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8015f7e:	697b      	ldr	r3, [r7, #20]
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	371c      	adds	r7, #28
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr

08015f8c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	68ba      	ldr	r2, [r7, #8]
 8015f9c:	68f9      	ldr	r1, [r7, #12]
 8015f9e:	4804      	ldr	r0, [pc, #16]	@ (8015fb0 <xEventGroupSetBitsFromISR+0x24>)
 8015fa0:	f002 fbb4 	bl	801870c <xTimerPendFunctionCallFromISR>
 8015fa4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8015fa6:	697b      	ldr	r3, [r7, #20]
	}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3718      	adds	r7, #24
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}
 8015fb0:	08015f2f 	.word	0x08015f2f

08015fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b083      	sub	sp, #12
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f103 0208 	add.w	r2, r3, #8
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8015fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f103 0208 	add.w	r2, r3, #8
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f103 0208 	add.w	r2, r3, #8
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015fe8:	bf00      	nop
 8015fea:	370c      	adds	r7, #12
 8015fec:	46bd      	mov	sp, r7
 8015fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff2:	4770      	bx	lr

08015ff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	2200      	movs	r2, #0
 8016000:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016002:	bf00      	nop
 8016004:	370c      	adds	r7, #12
 8016006:	46bd      	mov	sp, r7
 8016008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600c:	4770      	bx	lr

0801600e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801600e:	b480      	push	{r7}
 8016010:	b085      	sub	sp, #20
 8016012:	af00      	add	r7, sp, #0
 8016014:	6078      	str	r0, [r7, #4]
 8016016:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	68fa      	ldr	r2, [r7, #12]
 8016022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	689a      	ldr	r2, [r3, #8]
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	689b      	ldr	r3, [r3, #8]
 8016030:	683a      	ldr	r2, [r7, #0]
 8016032:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	683a      	ldr	r2, [r7, #0]
 8016038:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	1c5a      	adds	r2, r3, #1
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	601a      	str	r2, [r3, #0]
}
 801604a:	bf00      	nop
 801604c:	3714      	adds	r7, #20
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr

08016056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016056:	b480      	push	{r7}
 8016058:	b085      	sub	sp, #20
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]
 801605e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801606c:	d103      	bne.n	8016076 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	691b      	ldr	r3, [r3, #16]
 8016072:	60fb      	str	r3, [r7, #12]
 8016074:	e00c      	b.n	8016090 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	3308      	adds	r3, #8
 801607a:	60fb      	str	r3, [r7, #12]
 801607c:	e002      	b.n	8016084 <vListInsert+0x2e>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	685b      	ldr	r3, [r3, #4]
 8016082:	60fb      	str	r3, [r7, #12]
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	68ba      	ldr	r2, [r7, #8]
 801608c:	429a      	cmp	r2, r3
 801608e:	d2f6      	bcs.n	801607e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	685a      	ldr	r2, [r3, #4]
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	683a      	ldr	r2, [r7, #0]
 801609e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	68fa      	ldr	r2, [r7, #12]
 80160a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	683a      	ldr	r2, [r7, #0]
 80160aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	1c5a      	adds	r2, r3, #1
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	601a      	str	r2, [r3, #0]
}
 80160bc:	bf00      	nop
 80160be:	3714      	adds	r7, #20
 80160c0:	46bd      	mov	sp, r7
 80160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c6:	4770      	bx	lr

080160c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80160c8:	b480      	push	{r7}
 80160ca:	b085      	sub	sp, #20
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	691b      	ldr	r3, [r3, #16]
 80160d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	6892      	ldr	r2, [r2, #8]
 80160de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	689b      	ldr	r3, [r3, #8]
 80160e4:	687a      	ldr	r2, [r7, #4]
 80160e6:	6852      	ldr	r2, [r2, #4]
 80160e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	687a      	ldr	r2, [r7, #4]
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d103      	bne.n	80160fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	689a      	ldr	r2, [r3, #8]
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2200      	movs	r2, #0
 8016100:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	1e5a      	subs	r2, r3, #1
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
}
 8016110:	4618      	mov	r0, r3
 8016112:	3714      	adds	r7, #20
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr

0801611c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b084      	sub	sp, #16
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d10b      	bne.n	8016148 <xQueueGenericReset+0x2c>
	__asm volatile
 8016130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016134:	f383 8811 	msr	BASEPRI, r3
 8016138:	f3bf 8f6f 	isb	sy
 801613c:	f3bf 8f4f 	dsb	sy
 8016140:	60bb      	str	r3, [r7, #8]
}
 8016142:	bf00      	nop
 8016144:	bf00      	nop
 8016146:	e7fd      	b.n	8016144 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016148:	f002 fc2e 	bl	80189a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016154:	68f9      	ldr	r1, [r7, #12]
 8016156:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016158:	fb01 f303 	mul.w	r3, r1, r3
 801615c:	441a      	add	r2, r3
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	2200      	movs	r2, #0
 8016166:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	681a      	ldr	r2, [r3, #0]
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681a      	ldr	r2, [r3, #0]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016178:	3b01      	subs	r3, #1
 801617a:	68f9      	ldr	r1, [r7, #12]
 801617c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801617e:	fb01 f303 	mul.w	r3, r1, r3
 8016182:	441a      	add	r2, r3
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	22ff      	movs	r2, #255	@ 0xff
 801618c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	22ff      	movs	r2, #255	@ 0xff
 8016194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d114      	bne.n	80161c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	691b      	ldr	r3, [r3, #16]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d01a      	beq.n	80161dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	3310      	adds	r3, #16
 80161aa:	4618      	mov	r0, r3
 80161ac:	f001 fb24 	bl	80177f8 <xTaskRemoveFromEventList>
 80161b0:	4603      	mov	r3, r0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d012      	beq.n	80161dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80161b6:	4b0d      	ldr	r3, [pc, #52]	@ (80161ec <xQueueGenericReset+0xd0>)
 80161b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161bc:	601a      	str	r2, [r3, #0]
 80161be:	f3bf 8f4f 	dsb	sy
 80161c2:	f3bf 8f6f 	isb	sy
 80161c6:	e009      	b.n	80161dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	3310      	adds	r3, #16
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7ff fef1 	bl	8015fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	3324      	adds	r3, #36	@ 0x24
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ff feec 	bl	8015fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80161dc:	f002 fc16 	bl	8018a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80161e0:	2301      	movs	r3, #1
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3710      	adds	r7, #16
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	e000ed04 	.word	0xe000ed04

080161f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b08e      	sub	sp, #56	@ 0x38
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
 80161fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d10b      	bne.n	801621c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8016204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016208:	f383 8811 	msr	BASEPRI, r3
 801620c:	f3bf 8f6f 	isb	sy
 8016210:	f3bf 8f4f 	dsb	sy
 8016214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016216:	bf00      	nop
 8016218:	bf00      	nop
 801621a:	e7fd      	b.n	8016218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d10b      	bne.n	801623a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8016222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016226:	f383 8811 	msr	BASEPRI, r3
 801622a:	f3bf 8f6f 	isb	sy
 801622e:	f3bf 8f4f 	dsb	sy
 8016232:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016234:	bf00      	nop
 8016236:	bf00      	nop
 8016238:	e7fd      	b.n	8016236 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d002      	beq.n	8016246 <xQueueGenericCreateStatic+0x56>
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d001      	beq.n	801624a <xQueueGenericCreateStatic+0x5a>
 8016246:	2301      	movs	r3, #1
 8016248:	e000      	b.n	801624c <xQueueGenericCreateStatic+0x5c>
 801624a:	2300      	movs	r3, #0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d10b      	bne.n	8016268 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8016250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016254:	f383 8811 	msr	BASEPRI, r3
 8016258:	f3bf 8f6f 	isb	sy
 801625c:	f3bf 8f4f 	dsb	sy
 8016260:	623b      	str	r3, [r7, #32]
}
 8016262:	bf00      	nop
 8016264:	bf00      	nop
 8016266:	e7fd      	b.n	8016264 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d102      	bne.n	8016274 <xQueueGenericCreateStatic+0x84>
 801626e:	68bb      	ldr	r3, [r7, #8]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d101      	bne.n	8016278 <xQueueGenericCreateStatic+0x88>
 8016274:	2301      	movs	r3, #1
 8016276:	e000      	b.n	801627a <xQueueGenericCreateStatic+0x8a>
 8016278:	2300      	movs	r3, #0
 801627a:	2b00      	cmp	r3, #0
 801627c:	d10b      	bne.n	8016296 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801627e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016282:	f383 8811 	msr	BASEPRI, r3
 8016286:	f3bf 8f6f 	isb	sy
 801628a:	f3bf 8f4f 	dsb	sy
 801628e:	61fb      	str	r3, [r7, #28]
}
 8016290:	bf00      	nop
 8016292:	bf00      	nop
 8016294:	e7fd      	b.n	8016292 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016296:	2350      	movs	r3, #80	@ 0x50
 8016298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	2b50      	cmp	r3, #80	@ 0x50
 801629e:	d00b      	beq.n	80162b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80162a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162a4:	f383 8811 	msr	BASEPRI, r3
 80162a8:	f3bf 8f6f 	isb	sy
 80162ac:	f3bf 8f4f 	dsb	sy
 80162b0:	61bb      	str	r3, [r7, #24]
}
 80162b2:	bf00      	nop
 80162b4:	bf00      	nop
 80162b6:	e7fd      	b.n	80162b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80162b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80162be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d00d      	beq.n	80162e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80162c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162c6:	2201      	movs	r2, #1
 80162c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80162cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80162d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d2:	9300      	str	r3, [sp, #0]
 80162d4:	4613      	mov	r3, r2
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	68b9      	ldr	r1, [r7, #8]
 80162da:	68f8      	ldr	r0, [r7, #12]
 80162dc:	f000 f840 	bl	8016360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80162e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3730      	adds	r7, #48	@ 0x30
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}

080162ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80162ea:	b580      	push	{r7, lr}
 80162ec:	b08a      	sub	sp, #40	@ 0x28
 80162ee:	af02      	add	r7, sp, #8
 80162f0:	60f8      	str	r0, [r7, #12]
 80162f2:	60b9      	str	r1, [r7, #8]
 80162f4:	4613      	mov	r3, r2
 80162f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d10b      	bne.n	8016316 <xQueueGenericCreate+0x2c>
	__asm volatile
 80162fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016302:	f383 8811 	msr	BASEPRI, r3
 8016306:	f3bf 8f6f 	isb	sy
 801630a:	f3bf 8f4f 	dsb	sy
 801630e:	613b      	str	r3, [r7, #16]
}
 8016310:	bf00      	nop
 8016312:	bf00      	nop
 8016314:	e7fd      	b.n	8016312 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	68ba      	ldr	r2, [r7, #8]
 801631a:	fb02 f303 	mul.w	r3, r2, r3
 801631e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	3350      	adds	r3, #80	@ 0x50
 8016324:	4618      	mov	r0, r3
 8016326:	f002 fc61 	bl	8018bec <pvPortMalloc>
 801632a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801632c:	69bb      	ldr	r3, [r7, #24]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d011      	beq.n	8016356 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016332:	69bb      	ldr	r3, [r7, #24]
 8016334:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	3350      	adds	r3, #80	@ 0x50
 801633a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	2200      	movs	r2, #0
 8016340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016344:	79fa      	ldrb	r2, [r7, #7]
 8016346:	69bb      	ldr	r3, [r7, #24]
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	4613      	mov	r3, r2
 801634c:	697a      	ldr	r2, [r7, #20]
 801634e:	68b9      	ldr	r1, [r7, #8]
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	f000 f805 	bl	8016360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016356:	69bb      	ldr	r3, [r7, #24]
	}
 8016358:	4618      	mov	r0, r3
 801635a:	3720      	adds	r7, #32
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}

08016360 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	607a      	str	r2, [r7, #4]
 801636c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d103      	bne.n	801637c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016374:	69bb      	ldr	r3, [r7, #24]
 8016376:	69ba      	ldr	r2, [r7, #24]
 8016378:	601a      	str	r2, [r3, #0]
 801637a:	e002      	b.n	8016382 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016382:	69bb      	ldr	r3, [r7, #24]
 8016384:	68fa      	ldr	r2, [r7, #12]
 8016386:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	68ba      	ldr	r2, [r7, #8]
 801638c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801638e:	2101      	movs	r1, #1
 8016390:	69b8      	ldr	r0, [r7, #24]
 8016392:	f7ff fec3 	bl	801611c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	78fa      	ldrb	r2, [r7, #3]
 801639a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801639e:	bf00      	nop
 80163a0:	3710      	adds	r7, #16
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
	...

080163a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b08e      	sub	sp, #56	@ 0x38
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	60b9      	str	r1, [r7, #8]
 80163b2:	607a      	str	r2, [r7, #4]
 80163b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80163b6:	2300      	movs	r3, #0
 80163b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80163be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d10b      	bne.n	80163dc <xQueueGenericSend+0x34>
	__asm volatile
 80163c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163c8:	f383 8811 	msr	BASEPRI, r3
 80163cc:	f3bf 8f6f 	isb	sy
 80163d0:	f3bf 8f4f 	dsb	sy
 80163d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80163d6:	bf00      	nop
 80163d8:	bf00      	nop
 80163da:	e7fd      	b.n	80163d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d103      	bne.n	80163ea <xQueueGenericSend+0x42>
 80163e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d101      	bne.n	80163ee <xQueueGenericSend+0x46>
 80163ea:	2301      	movs	r3, #1
 80163ec:	e000      	b.n	80163f0 <xQueueGenericSend+0x48>
 80163ee:	2300      	movs	r3, #0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d10b      	bne.n	801640c <xQueueGenericSend+0x64>
	__asm volatile
 80163f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f8:	f383 8811 	msr	BASEPRI, r3
 80163fc:	f3bf 8f6f 	isb	sy
 8016400:	f3bf 8f4f 	dsb	sy
 8016404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016406:	bf00      	nop
 8016408:	bf00      	nop
 801640a:	e7fd      	b.n	8016408 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	2b02      	cmp	r3, #2
 8016410:	d103      	bne.n	801641a <xQueueGenericSend+0x72>
 8016412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016416:	2b01      	cmp	r3, #1
 8016418:	d101      	bne.n	801641e <xQueueGenericSend+0x76>
 801641a:	2301      	movs	r3, #1
 801641c:	e000      	b.n	8016420 <xQueueGenericSend+0x78>
 801641e:	2300      	movs	r3, #0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10b      	bne.n	801643c <xQueueGenericSend+0x94>
	__asm volatile
 8016424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016428:	f383 8811 	msr	BASEPRI, r3
 801642c:	f3bf 8f6f 	isb	sy
 8016430:	f3bf 8f4f 	dsb	sy
 8016434:	623b      	str	r3, [r7, #32]
}
 8016436:	bf00      	nop
 8016438:	bf00      	nop
 801643a:	e7fd      	b.n	8016438 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801643c:	f001 fc06 	bl	8017c4c <xTaskGetSchedulerState>
 8016440:	4603      	mov	r3, r0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d102      	bne.n	801644c <xQueueGenericSend+0xa4>
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d101      	bne.n	8016450 <xQueueGenericSend+0xa8>
 801644c:	2301      	movs	r3, #1
 801644e:	e000      	b.n	8016452 <xQueueGenericSend+0xaa>
 8016450:	2300      	movs	r3, #0
 8016452:	2b00      	cmp	r3, #0
 8016454:	d10b      	bne.n	801646e <xQueueGenericSend+0xc6>
	__asm volatile
 8016456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801645a:	f383 8811 	msr	BASEPRI, r3
 801645e:	f3bf 8f6f 	isb	sy
 8016462:	f3bf 8f4f 	dsb	sy
 8016466:	61fb      	str	r3, [r7, #28]
}
 8016468:	bf00      	nop
 801646a:	bf00      	nop
 801646c:	e7fd      	b.n	801646a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801646e:	f002 fa9b 	bl	80189a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801647a:	429a      	cmp	r2, r3
 801647c:	d302      	bcc.n	8016484 <xQueueGenericSend+0xdc>
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	2b02      	cmp	r3, #2
 8016482:	d129      	bne.n	80164d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016484:	683a      	ldr	r2, [r7, #0]
 8016486:	68b9      	ldr	r1, [r7, #8]
 8016488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801648a:	f000 fa9f 	bl	80169cc <prvCopyDataToQueue>
 801648e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016494:	2b00      	cmp	r3, #0
 8016496:	d010      	beq.n	80164ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801649a:	3324      	adds	r3, #36	@ 0x24
 801649c:	4618      	mov	r0, r3
 801649e:	f001 f9ab 	bl	80177f8 <xTaskRemoveFromEventList>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d013      	beq.n	80164d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80164a8:	4b3f      	ldr	r3, [pc, #252]	@ (80165a8 <xQueueGenericSend+0x200>)
 80164aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164ae:	601a      	str	r2, [r3, #0]
 80164b0:	f3bf 8f4f 	dsb	sy
 80164b4:	f3bf 8f6f 	isb	sy
 80164b8:	e00a      	b.n	80164d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80164ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d007      	beq.n	80164d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80164c0:	4b39      	ldr	r3, [pc, #228]	@ (80165a8 <xQueueGenericSend+0x200>)
 80164c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164c6:	601a      	str	r2, [r3, #0]
 80164c8:	f3bf 8f4f 	dsb	sy
 80164cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80164d0:	f002 fa9c 	bl	8018a0c <vPortExitCritical>
				return pdPASS;
 80164d4:	2301      	movs	r3, #1
 80164d6:	e063      	b.n	80165a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d103      	bne.n	80164e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80164de:	f002 fa95 	bl	8018a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80164e2:	2300      	movs	r3, #0
 80164e4:	e05c      	b.n	80165a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80164e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d106      	bne.n	80164fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80164ec:	f107 0314 	add.w	r3, r7, #20
 80164f0:	4618      	mov	r0, r3
 80164f2:	f001 fa49 	bl	8017988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80164f6:	2301      	movs	r3, #1
 80164f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80164fa:	f002 fa87 	bl	8018a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80164fe:	f000 fee5 	bl	80172cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016502:	f002 fa51 	bl	80189a8 <vPortEnterCritical>
 8016506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801650c:	b25b      	sxtb	r3, r3
 801650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016512:	d103      	bne.n	801651c <xQueueGenericSend+0x174>
 8016514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016516:	2200      	movs	r2, #0
 8016518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801651e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016522:	b25b      	sxtb	r3, r3
 8016524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016528:	d103      	bne.n	8016532 <xQueueGenericSend+0x18a>
 801652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801652c:	2200      	movs	r2, #0
 801652e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016532:	f002 fa6b 	bl	8018a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016536:	1d3a      	adds	r2, r7, #4
 8016538:	f107 0314 	add.w	r3, r7, #20
 801653c:	4611      	mov	r1, r2
 801653e:	4618      	mov	r0, r3
 8016540:	f001 fa38 	bl	80179b4 <xTaskCheckForTimeOut>
 8016544:	4603      	mov	r3, r0
 8016546:	2b00      	cmp	r3, #0
 8016548:	d124      	bne.n	8016594 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801654a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801654c:	f000 fb36 	bl	8016bbc <prvIsQueueFull>
 8016550:	4603      	mov	r3, r0
 8016552:	2b00      	cmp	r3, #0
 8016554:	d018      	beq.n	8016588 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016558:	3310      	adds	r3, #16
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	4611      	mov	r1, r2
 801655e:	4618      	mov	r0, r3
 8016560:	f001 f8ba 	bl	80176d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016566:	f000 fac1 	bl	8016aec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801656a:	f000 febd 	bl	80172e8 <xTaskResumeAll>
 801656e:	4603      	mov	r3, r0
 8016570:	2b00      	cmp	r3, #0
 8016572:	f47f af7c 	bne.w	801646e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016576:	4b0c      	ldr	r3, [pc, #48]	@ (80165a8 <xQueueGenericSend+0x200>)
 8016578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801657c:	601a      	str	r2, [r3, #0]
 801657e:	f3bf 8f4f 	dsb	sy
 8016582:	f3bf 8f6f 	isb	sy
 8016586:	e772      	b.n	801646e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801658a:	f000 faaf 	bl	8016aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801658e:	f000 feab 	bl	80172e8 <xTaskResumeAll>
 8016592:	e76c      	b.n	801646e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016596:	f000 faa9 	bl	8016aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801659a:	f000 fea5 	bl	80172e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801659e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3738      	adds	r7, #56	@ 0x38
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}
 80165a8:	e000ed04 	.word	0xe000ed04

080165ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b090      	sub	sp, #64	@ 0x40
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	607a      	str	r2, [r7, #4]
 80165b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80165be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d10b      	bne.n	80165dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80165c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165c8:	f383 8811 	msr	BASEPRI, r3
 80165cc:	f3bf 8f6f 	isb	sy
 80165d0:	f3bf 8f4f 	dsb	sy
 80165d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80165d6:	bf00      	nop
 80165d8:	bf00      	nop
 80165da:	e7fd      	b.n	80165d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d103      	bne.n	80165ea <xQueueGenericSendFromISR+0x3e>
 80165e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d101      	bne.n	80165ee <xQueueGenericSendFromISR+0x42>
 80165ea:	2301      	movs	r3, #1
 80165ec:	e000      	b.n	80165f0 <xQueueGenericSendFromISR+0x44>
 80165ee:	2300      	movs	r3, #0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10b      	bne.n	801660c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80165f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f8:	f383 8811 	msr	BASEPRI, r3
 80165fc:	f3bf 8f6f 	isb	sy
 8016600:	f3bf 8f4f 	dsb	sy
 8016604:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016606:	bf00      	nop
 8016608:	bf00      	nop
 801660a:	e7fd      	b.n	8016608 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	2b02      	cmp	r3, #2
 8016610:	d103      	bne.n	801661a <xQueueGenericSendFromISR+0x6e>
 8016612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016616:	2b01      	cmp	r3, #1
 8016618:	d101      	bne.n	801661e <xQueueGenericSendFromISR+0x72>
 801661a:	2301      	movs	r3, #1
 801661c:	e000      	b.n	8016620 <xQueueGenericSendFromISR+0x74>
 801661e:	2300      	movs	r3, #0
 8016620:	2b00      	cmp	r3, #0
 8016622:	d10b      	bne.n	801663c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8016624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016628:	f383 8811 	msr	BASEPRI, r3
 801662c:	f3bf 8f6f 	isb	sy
 8016630:	f3bf 8f4f 	dsb	sy
 8016634:	623b      	str	r3, [r7, #32]
}
 8016636:	bf00      	nop
 8016638:	bf00      	nop
 801663a:	e7fd      	b.n	8016638 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801663c:	f002 fa94 	bl	8018b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016640:	f3ef 8211 	mrs	r2, BASEPRI
 8016644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016648:	f383 8811 	msr	BASEPRI, r3
 801664c:	f3bf 8f6f 	isb	sy
 8016650:	f3bf 8f4f 	dsb	sy
 8016654:	61fa      	str	r2, [r7, #28]
 8016656:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016658:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801665a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801665e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016664:	429a      	cmp	r2, r3
 8016666:	d302      	bcc.n	801666e <xQueueGenericSendFromISR+0xc2>
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	2b02      	cmp	r3, #2
 801666c:	d12f      	bne.n	80166ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016674:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801667a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801667e:	683a      	ldr	r2, [r7, #0]
 8016680:	68b9      	ldr	r1, [r7, #8]
 8016682:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016684:	f000 f9a2 	bl	80169cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016688:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016690:	d112      	bne.n	80166b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016696:	2b00      	cmp	r3, #0
 8016698:	d016      	beq.n	80166c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801669c:	3324      	adds	r3, #36	@ 0x24
 801669e:	4618      	mov	r0, r3
 80166a0:	f001 f8aa 	bl	80177f8 <xTaskRemoveFromEventList>
 80166a4:	4603      	mov	r3, r0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d00e      	beq.n	80166c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d00b      	beq.n	80166c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2201      	movs	r2, #1
 80166b4:	601a      	str	r2, [r3, #0]
 80166b6:	e007      	b.n	80166c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80166b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80166bc:	3301      	adds	r3, #1
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	b25a      	sxtb	r2, r3
 80166c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80166c8:	2301      	movs	r3, #1
 80166ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80166cc:	e001      	b.n	80166d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80166ce:	2300      	movs	r3, #0
 80166d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80166d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80166dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80166de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3740      	adds	r7, #64	@ 0x40
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b08e      	sub	sp, #56	@ 0x38
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80166f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d10b      	bne.n	8016714 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80166fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016700:	f383 8811 	msr	BASEPRI, r3
 8016704:	f3bf 8f6f 	isb	sy
 8016708:	f3bf 8f4f 	dsb	sy
 801670c:	623b      	str	r3, [r7, #32]
}
 801670e:	bf00      	nop
 8016710:	bf00      	nop
 8016712:	e7fd      	b.n	8016710 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016718:	2b00      	cmp	r3, #0
 801671a:	d00b      	beq.n	8016734 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016720:	f383 8811 	msr	BASEPRI, r3
 8016724:	f3bf 8f6f 	isb	sy
 8016728:	f3bf 8f4f 	dsb	sy
 801672c:	61fb      	str	r3, [r7, #28]
}
 801672e:	bf00      	nop
 8016730:	bf00      	nop
 8016732:	e7fd      	b.n	8016730 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d103      	bne.n	8016744 <xQueueGiveFromISR+0x5c>
 801673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801673e:	689b      	ldr	r3, [r3, #8]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d101      	bne.n	8016748 <xQueueGiveFromISR+0x60>
 8016744:	2301      	movs	r3, #1
 8016746:	e000      	b.n	801674a <xQueueGiveFromISR+0x62>
 8016748:	2300      	movs	r3, #0
 801674a:	2b00      	cmp	r3, #0
 801674c:	d10b      	bne.n	8016766 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016752:	f383 8811 	msr	BASEPRI, r3
 8016756:	f3bf 8f6f 	isb	sy
 801675a:	f3bf 8f4f 	dsb	sy
 801675e:	61bb      	str	r3, [r7, #24]
}
 8016760:	bf00      	nop
 8016762:	bf00      	nop
 8016764:	e7fd      	b.n	8016762 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016766:	f002 f9ff 	bl	8018b68 <vPortValidateInterruptPriority>
	__asm volatile
 801676a:	f3ef 8211 	mrs	r2, BASEPRI
 801676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016772:	f383 8811 	msr	BASEPRI, r3
 8016776:	f3bf 8f6f 	isb	sy
 801677a:	f3bf 8f4f 	dsb	sy
 801677e:	617a      	str	r2, [r7, #20]
 8016780:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016782:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016784:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801678a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801678e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016792:	429a      	cmp	r2, r3
 8016794:	d22b      	bcs.n	80167ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801679c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167a2:	1c5a      	adds	r2, r3, #1
 80167a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80167a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80167ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167b0:	d112      	bne.n	80167d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80167b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d016      	beq.n	80167e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80167ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167bc:	3324      	adds	r3, #36	@ 0x24
 80167be:	4618      	mov	r0, r3
 80167c0:	f001 f81a 	bl	80177f8 <xTaskRemoveFromEventList>
 80167c4:	4603      	mov	r3, r0
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d00e      	beq.n	80167e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d00b      	beq.n	80167e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	2201      	movs	r2, #1
 80167d4:	601a      	str	r2, [r3, #0]
 80167d6:	e007      	b.n	80167e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80167d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167dc:	3301      	adds	r3, #1
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	b25a      	sxtb	r2, r3
 80167e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80167e8:	2301      	movs	r3, #1
 80167ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80167ec:	e001      	b.n	80167f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80167ee:	2300      	movs	r3, #0
 80167f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80167f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	f383 8811 	msr	BASEPRI, r3
}
 80167fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80167fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8016800:	4618      	mov	r0, r3
 8016802:	3738      	adds	r7, #56	@ 0x38
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b08c      	sub	sp, #48	@ 0x30
 801680c:	af00      	add	r7, sp, #0
 801680e:	60f8      	str	r0, [r7, #12]
 8016810:	60b9      	str	r1, [r7, #8]
 8016812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016814:	2300      	movs	r3, #0
 8016816:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681e:	2b00      	cmp	r3, #0
 8016820:	d10b      	bne.n	801683a <xQueueReceive+0x32>
	__asm volatile
 8016822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016826:	f383 8811 	msr	BASEPRI, r3
 801682a:	f3bf 8f6f 	isb	sy
 801682e:	f3bf 8f4f 	dsb	sy
 8016832:	623b      	str	r3, [r7, #32]
}
 8016834:	bf00      	nop
 8016836:	bf00      	nop
 8016838:	e7fd      	b.n	8016836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d103      	bne.n	8016848 <xQueueReceive+0x40>
 8016840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016844:	2b00      	cmp	r3, #0
 8016846:	d101      	bne.n	801684c <xQueueReceive+0x44>
 8016848:	2301      	movs	r3, #1
 801684a:	e000      	b.n	801684e <xQueueReceive+0x46>
 801684c:	2300      	movs	r3, #0
 801684e:	2b00      	cmp	r3, #0
 8016850:	d10b      	bne.n	801686a <xQueueReceive+0x62>
	__asm volatile
 8016852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016856:	f383 8811 	msr	BASEPRI, r3
 801685a:	f3bf 8f6f 	isb	sy
 801685e:	f3bf 8f4f 	dsb	sy
 8016862:	61fb      	str	r3, [r7, #28]
}
 8016864:	bf00      	nop
 8016866:	bf00      	nop
 8016868:	e7fd      	b.n	8016866 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801686a:	f001 f9ef 	bl	8017c4c <xTaskGetSchedulerState>
 801686e:	4603      	mov	r3, r0
 8016870:	2b00      	cmp	r3, #0
 8016872:	d102      	bne.n	801687a <xQueueReceive+0x72>
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d101      	bne.n	801687e <xQueueReceive+0x76>
 801687a:	2301      	movs	r3, #1
 801687c:	e000      	b.n	8016880 <xQueueReceive+0x78>
 801687e:	2300      	movs	r3, #0
 8016880:	2b00      	cmp	r3, #0
 8016882:	d10b      	bne.n	801689c <xQueueReceive+0x94>
	__asm volatile
 8016884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016888:	f383 8811 	msr	BASEPRI, r3
 801688c:	f3bf 8f6f 	isb	sy
 8016890:	f3bf 8f4f 	dsb	sy
 8016894:	61bb      	str	r3, [r7, #24]
}
 8016896:	bf00      	nop
 8016898:	bf00      	nop
 801689a:	e7fd      	b.n	8016898 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801689c:	f002 f884 	bl	80189a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80168a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80168a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d01f      	beq.n	80168ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80168ac:	68b9      	ldr	r1, [r7, #8]
 80168ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80168b0:	f000 f8f6 	bl	8016aa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80168b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168b6:	1e5a      	subs	r2, r3, #1
 80168b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168be:	691b      	ldr	r3, [r3, #16]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d00f      	beq.n	80168e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168c6:	3310      	adds	r3, #16
 80168c8:	4618      	mov	r0, r3
 80168ca:	f000 ff95 	bl	80177f8 <xTaskRemoveFromEventList>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d007      	beq.n	80168e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80168d4:	4b3c      	ldr	r3, [pc, #240]	@ (80169c8 <xQueueReceive+0x1c0>)
 80168d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168da:	601a      	str	r2, [r3, #0]
 80168dc:	f3bf 8f4f 	dsb	sy
 80168e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80168e4:	f002 f892 	bl	8018a0c <vPortExitCritical>
				return pdPASS;
 80168e8:	2301      	movs	r3, #1
 80168ea:	e069      	b.n	80169c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d103      	bne.n	80168fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80168f2:	f002 f88b 	bl	8018a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80168f6:	2300      	movs	r3, #0
 80168f8:	e062      	b.n	80169c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80168fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d106      	bne.n	801690e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016900:	f107 0310 	add.w	r3, r7, #16
 8016904:	4618      	mov	r0, r3
 8016906:	f001 f83f 	bl	8017988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801690a:	2301      	movs	r3, #1
 801690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801690e:	f002 f87d 	bl	8018a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016912:	f000 fcdb 	bl	80172cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016916:	f002 f847 	bl	80189a8 <vPortEnterCritical>
 801691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801691c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016920:	b25b      	sxtb	r3, r3
 8016922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016926:	d103      	bne.n	8016930 <xQueueReceive+0x128>
 8016928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801692a:	2200      	movs	r2, #0
 801692c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016932:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016936:	b25b      	sxtb	r3, r3
 8016938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801693c:	d103      	bne.n	8016946 <xQueueReceive+0x13e>
 801693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016940:	2200      	movs	r2, #0
 8016942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016946:	f002 f861 	bl	8018a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801694a:	1d3a      	adds	r2, r7, #4
 801694c:	f107 0310 	add.w	r3, r7, #16
 8016950:	4611      	mov	r1, r2
 8016952:	4618      	mov	r0, r3
 8016954:	f001 f82e 	bl	80179b4 <xTaskCheckForTimeOut>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d123      	bne.n	80169a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801695e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016960:	f000 f916 	bl	8016b90 <prvIsQueueEmpty>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d017      	beq.n	801699a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801696a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801696c:	3324      	adds	r3, #36	@ 0x24
 801696e:	687a      	ldr	r2, [r7, #4]
 8016970:	4611      	mov	r1, r2
 8016972:	4618      	mov	r0, r3
 8016974:	f000 feb0 	bl	80176d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801697a:	f000 f8b7 	bl	8016aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801697e:	f000 fcb3 	bl	80172e8 <xTaskResumeAll>
 8016982:	4603      	mov	r3, r0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d189      	bne.n	801689c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8016988:	4b0f      	ldr	r3, [pc, #60]	@ (80169c8 <xQueueReceive+0x1c0>)
 801698a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801698e:	601a      	str	r2, [r3, #0]
 8016990:	f3bf 8f4f 	dsb	sy
 8016994:	f3bf 8f6f 	isb	sy
 8016998:	e780      	b.n	801689c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801699a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801699c:	f000 f8a6 	bl	8016aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80169a0:	f000 fca2 	bl	80172e8 <xTaskResumeAll>
 80169a4:	e77a      	b.n	801689c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80169a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169a8:	f000 f8a0 	bl	8016aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80169ac:	f000 fc9c 	bl	80172e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80169b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169b2:	f000 f8ed 	bl	8016b90 <prvIsQueueEmpty>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	f43f af6f 	beq.w	801689c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80169be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3730      	adds	r7, #48	@ 0x30
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	e000ed04 	.word	0xe000ed04

080169cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b086      	sub	sp, #24
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	60f8      	str	r0, [r7, #12]
 80169d4:	60b9      	str	r1, [r7, #8]
 80169d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80169d8:	2300      	movs	r3, #0
 80169da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d10d      	bne.n	8016a06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d14d      	bne.n	8016a8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	689b      	ldr	r3, [r3, #8]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f001 f946 	bl	8017c88 <xTaskPriorityDisinherit>
 80169fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2200      	movs	r2, #0
 8016a02:	609a      	str	r2, [r3, #8]
 8016a04:	e043      	b.n	8016a8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d119      	bne.n	8016a40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	6858      	ldr	r0, [r3, #4]
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a14:	461a      	mov	r2, r3
 8016a16:	68b9      	ldr	r1, [r7, #8]
 8016a18:	f003 fa06 	bl	8019e28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	685a      	ldr	r2, [r3, #4]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a24:	441a      	add	r2, r3
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	685a      	ldr	r2, [r3, #4]
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	689b      	ldr	r3, [r3, #8]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d32b      	bcc.n	8016a8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	681a      	ldr	r2, [r3, #0]
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	605a      	str	r2, [r3, #4]
 8016a3e:	e026      	b.n	8016a8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	68d8      	ldr	r0, [r3, #12]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a48:	461a      	mov	r2, r3
 8016a4a:	68b9      	ldr	r1, [r7, #8]
 8016a4c:	f003 f9ec 	bl	8019e28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	68da      	ldr	r2, [r3, #12]
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a58:	425b      	negs	r3, r3
 8016a5a:	441a      	add	r2, r3
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	68da      	ldr	r2, [r3, #12]
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d207      	bcs.n	8016a7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	689a      	ldr	r2, [r3, #8]
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a74:	425b      	negs	r3, r3
 8016a76:	441a      	add	r2, r3
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2b02      	cmp	r3, #2
 8016a80:	d105      	bne.n	8016a8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d002      	beq.n	8016a8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016a88:	693b      	ldr	r3, [r7, #16]
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	1c5a      	adds	r2, r3, #1
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8016a96:	697b      	ldr	r3, [r7, #20]
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3718      	adds	r7, #24
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d018      	beq.n	8016ae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	68da      	ldr	r2, [r3, #12]
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016aba:	441a      	add	r2, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	68da      	ldr	r2, [r3, #12]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	689b      	ldr	r3, [r3, #8]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d303      	bcc.n	8016ad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	68d9      	ldr	r1, [r3, #12]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016adc:	461a      	mov	r2, r3
 8016ade:	6838      	ldr	r0, [r7, #0]
 8016ae0:	f003 f9a2 	bl	8019e28 <memcpy>
	}
}
 8016ae4:	bf00      	nop
 8016ae6:	3708      	adds	r7, #8
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b084      	sub	sp, #16
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016af4:	f001 ff58 	bl	80189a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016afe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016b00:	e011      	b.n	8016b26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d012      	beq.n	8016b30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	3324      	adds	r3, #36	@ 0x24
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f000 fe72 	bl	80177f8 <xTaskRemoveFromEventList>
 8016b14:	4603      	mov	r3, r0
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d001      	beq.n	8016b1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016b1a:	f000 ffaf 	bl	8017a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016b1e:	7bfb      	ldrb	r3, [r7, #15]
 8016b20:	3b01      	subs	r3, #1
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	dce9      	bgt.n	8016b02 <prvUnlockQueue+0x16>
 8016b2e:	e000      	b.n	8016b32 <prvUnlockQueue+0x46>
					break;
 8016b30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	22ff      	movs	r2, #255	@ 0xff
 8016b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8016b3a:	f001 ff67 	bl	8018a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016b3e:	f001 ff33 	bl	80189a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016b48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b4a:	e011      	b.n	8016b70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	691b      	ldr	r3, [r3, #16]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d012      	beq.n	8016b7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	3310      	adds	r3, #16
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f000 fe4d 	bl	80177f8 <xTaskRemoveFromEventList>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d001      	beq.n	8016b68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016b64:	f000 ff8a 	bl	8017a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
 8016b6a:	3b01      	subs	r3, #1
 8016b6c:	b2db      	uxtb	r3, r3
 8016b6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	dce9      	bgt.n	8016b4c <prvUnlockQueue+0x60>
 8016b78:	e000      	b.n	8016b7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016b7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	22ff      	movs	r2, #255	@ 0xff
 8016b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8016b84:	f001 ff42 	bl	8018a0c <vPortExitCritical>
}
 8016b88:	bf00      	nop
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b084      	sub	sp, #16
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016b98:	f001 ff06 	bl	80189a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d102      	bne.n	8016baa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	60fb      	str	r3, [r7, #12]
 8016ba8:	e001      	b.n	8016bae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016baa:	2300      	movs	r3, #0
 8016bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016bae:	f001 ff2d 	bl	8018a0c <vPortExitCritical>

	return xReturn;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3710      	adds	r7, #16
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b084      	sub	sp, #16
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016bc4:	f001 fef0 	bl	80189a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d102      	bne.n	8016bda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016bd4:	2301      	movs	r3, #1
 8016bd6:	60fb      	str	r3, [r7, #12]
 8016bd8:	e001      	b.n	8016bde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016bde:	f001 ff15 	bl	8018a0c <vPortExitCritical>

	return xReturn;
 8016be2:	68fb      	ldr	r3, [r7, #12]
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	3710      	adds	r7, #16
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}

08016bec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016bec:	b480      	push	{r7}
 8016bee:	b085      	sub	sp, #20
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
 8016bf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	60fb      	str	r3, [r7, #12]
 8016bfa:	e014      	b.n	8016c26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8016c3c <vQueueAddToRegistry+0x50>)
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d10b      	bne.n	8016c20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016c08:	490c      	ldr	r1, [pc, #48]	@ (8016c3c <vQueueAddToRegistry+0x50>)
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	683a      	ldr	r2, [r7, #0]
 8016c0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016c12:	4a0a      	ldr	r2, [pc, #40]	@ (8016c3c <vQueueAddToRegistry+0x50>)
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	00db      	lsls	r3, r3, #3
 8016c18:	4413      	add	r3, r2
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016c1e:	e006      	b.n	8016c2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	3301      	adds	r3, #1
 8016c24:	60fb      	str	r3, [r7, #12]
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b07      	cmp	r3, #7
 8016c2a:	d9e7      	bls.n	8016bfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016c2c:	bf00      	nop
 8016c2e:	bf00      	nop
 8016c30:	3714      	adds	r7, #20
 8016c32:	46bd      	mov	sp, r7
 8016c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	2000364c 	.word	0x2000364c

08016c40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b086      	sub	sp, #24
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	60f8      	str	r0, [r7, #12]
 8016c48:	60b9      	str	r1, [r7, #8]
 8016c4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016c50:	f001 feaa 	bl	80189a8 <vPortEnterCritical>
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016c5a:	b25b      	sxtb	r3, r3
 8016c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c60:	d103      	bne.n	8016c6a <vQueueWaitForMessageRestricted+0x2a>
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	2200      	movs	r2, #0
 8016c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016c6a:	697b      	ldr	r3, [r7, #20]
 8016c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016c70:	b25b      	sxtb	r3, r3
 8016c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c76:	d103      	bne.n	8016c80 <vQueueWaitForMessageRestricted+0x40>
 8016c78:	697b      	ldr	r3, [r7, #20]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016c80:	f001 fec4 	bl	8018a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d106      	bne.n	8016c9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016c8c:	697b      	ldr	r3, [r7, #20]
 8016c8e:	3324      	adds	r3, #36	@ 0x24
 8016c90:	687a      	ldr	r2, [r7, #4]
 8016c92:	68b9      	ldr	r1, [r7, #8]
 8016c94:	4618      	mov	r0, r3
 8016c96:	f000 fd83 	bl	80177a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016c9a:	6978      	ldr	r0, [r7, #20]
 8016c9c:	f7ff ff26 	bl	8016aec <prvUnlockQueue>
	}
 8016ca0:	bf00      	nop
 8016ca2:	3718      	adds	r7, #24
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b08e      	sub	sp, #56	@ 0x38
 8016cac:	af04      	add	r7, sp, #16
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	60b9      	str	r1, [r7, #8]
 8016cb2:	607a      	str	r2, [r7, #4]
 8016cb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d10b      	bne.n	8016cd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8016cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cc0:	f383 8811 	msr	BASEPRI, r3
 8016cc4:	f3bf 8f6f 	isb	sy
 8016cc8:	f3bf 8f4f 	dsb	sy
 8016ccc:	623b      	str	r3, [r7, #32]
}
 8016cce:	bf00      	nop
 8016cd0:	bf00      	nop
 8016cd2:	e7fd      	b.n	8016cd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d10b      	bne.n	8016cf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8016cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cde:	f383 8811 	msr	BASEPRI, r3
 8016ce2:	f3bf 8f6f 	isb	sy
 8016ce6:	f3bf 8f4f 	dsb	sy
 8016cea:	61fb      	str	r3, [r7, #28]
}
 8016cec:	bf00      	nop
 8016cee:	bf00      	nop
 8016cf0:	e7fd      	b.n	8016cee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016cf2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8016cf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8016cfe:	d00b      	beq.n	8016d18 <xTaskCreateStatic+0x70>
	__asm volatile
 8016d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d04:	f383 8811 	msr	BASEPRI, r3
 8016d08:	f3bf 8f6f 	isb	sy
 8016d0c:	f3bf 8f4f 	dsb	sy
 8016d10:	61bb      	str	r3, [r7, #24]
}
 8016d12:	bf00      	nop
 8016d14:	bf00      	nop
 8016d16:	e7fd      	b.n	8016d14 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016d18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d01e      	beq.n	8016d5e <xTaskCreateStatic+0xb6>
 8016d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d01b      	beq.n	8016d5e <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016d2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d32:	2202      	movs	r2, #2
 8016d34:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016d38:	2300      	movs	r3, #0
 8016d3a:	9303      	str	r3, [sp, #12]
 8016d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d3e:	9302      	str	r3, [sp, #8]
 8016d40:	f107 0314 	add.w	r3, r7, #20
 8016d44:	9301      	str	r3, [sp, #4]
 8016d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	68b9      	ldr	r1, [r7, #8]
 8016d50:	68f8      	ldr	r0, [r7, #12]
 8016d52:	f000 f851 	bl	8016df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016d56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d58:	f000 f922 	bl	8016fa0 <prvAddNewTaskToReadyList>
 8016d5c:	e001      	b.n	8016d62 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016d62:	697b      	ldr	r3, [r7, #20]
	}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3728      	adds	r7, #40	@ 0x28
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}

08016d6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b08c      	sub	sp, #48	@ 0x30
 8016d70:	af04      	add	r7, sp, #16
 8016d72:	60f8      	str	r0, [r7, #12]
 8016d74:	60b9      	str	r1, [r7, #8]
 8016d76:	603b      	str	r3, [r7, #0]
 8016d78:	4613      	mov	r3, r2
 8016d7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016d7c:	88fb      	ldrh	r3, [r7, #6]
 8016d7e:	009b      	lsls	r3, r3, #2
 8016d80:	4618      	mov	r0, r3
 8016d82:	f001 ff33 	bl	8018bec <pvPortMalloc>
 8016d86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d00f      	beq.n	8016dae <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016d8e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8016d92:	f001 ff2b 	bl	8018bec <pvPortMalloc>
 8016d96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016d98:	69fb      	ldr	r3, [r7, #28]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d003      	beq.n	8016da6 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016d9e:	69fb      	ldr	r3, [r7, #28]
 8016da0:	697a      	ldr	r2, [r7, #20]
 8016da2:	631a      	str	r2, [r3, #48]	@ 0x30
 8016da4:	e005      	b.n	8016db2 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016da6:	6978      	ldr	r0, [r7, #20]
 8016da8:	f001 ffee 	bl	8018d88 <vPortFree>
 8016dac:	e001      	b.n	8016db2 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016dae:	2300      	movs	r3, #0
 8016db0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d017      	beq.n	8016de8 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016dc0:	88fa      	ldrh	r2, [r7, #6]
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	9303      	str	r3, [sp, #12]
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	9302      	str	r3, [sp, #8]
 8016dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dcc:	9301      	str	r3, [sp, #4]
 8016dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd0:	9300      	str	r3, [sp, #0]
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	68b9      	ldr	r1, [r7, #8]
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f000 f80e 	bl	8016df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016ddc:	69f8      	ldr	r0, [r7, #28]
 8016dde:	f000 f8df 	bl	8016fa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016de2:	2301      	movs	r3, #1
 8016de4:	61bb      	str	r3, [r7, #24]
 8016de6:	e002      	b.n	8016dee <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016de8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016dee:	69bb      	ldr	r3, [r7, #24]
	}
 8016df0:	4618      	mov	r0, r3
 8016df2:	3720      	adds	r7, #32
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}

08016df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b088      	sub	sp, #32
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	60b9      	str	r1, [r7, #8]
 8016e02:	607a      	str	r2, [r7, #4]
 8016e04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	461a      	mov	r2, r3
 8016e10:	21a5      	movs	r1, #165	@ 0xa5
 8016e12:	f002 ff60 	bl	8019cd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8016e20:	3b01      	subs	r3, #1
 8016e22:	009b      	lsls	r3, r3, #2
 8016e24:	4413      	add	r3, r2
 8016e26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016e28:	69bb      	ldr	r3, [r7, #24]
 8016e2a:	f023 0307 	bic.w	r3, r3, #7
 8016e2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016e30:	69bb      	ldr	r3, [r7, #24]
 8016e32:	f003 0307 	and.w	r3, r3, #7
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00b      	beq.n	8016e52 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8016e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e3e:	f383 8811 	msr	BASEPRI, r3
 8016e42:	f3bf 8f6f 	isb	sy
 8016e46:	f3bf 8f4f 	dsb	sy
 8016e4a:	617b      	str	r3, [r7, #20]
}
 8016e4c:	bf00      	nop
 8016e4e:	bf00      	nop
 8016e50:	e7fd      	b.n	8016e4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016e52:	68bb      	ldr	r3, [r7, #8]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d01f      	beq.n	8016e98 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e58:	2300      	movs	r3, #0
 8016e5a:	61fb      	str	r3, [r7, #28]
 8016e5c:	e012      	b.n	8016e84 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016e5e:	68ba      	ldr	r2, [r7, #8]
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	4413      	add	r3, r2
 8016e64:	7819      	ldrb	r1, [r3, #0]
 8016e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016e68:	69fb      	ldr	r3, [r7, #28]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	3334      	adds	r3, #52	@ 0x34
 8016e6e:	460a      	mov	r2, r1
 8016e70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016e72:	68ba      	ldr	r2, [r7, #8]
 8016e74:	69fb      	ldr	r3, [r7, #28]
 8016e76:	4413      	add	r3, r2
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d006      	beq.n	8016e8c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e7e:	69fb      	ldr	r3, [r7, #28]
 8016e80:	3301      	adds	r3, #1
 8016e82:	61fb      	str	r3, [r7, #28]
 8016e84:	69fb      	ldr	r3, [r7, #28]
 8016e86:	2b0f      	cmp	r3, #15
 8016e88:	d9e9      	bls.n	8016e5e <prvInitialiseNewTask+0x66>
 8016e8a:	e000      	b.n	8016e8e <prvInitialiseNewTask+0x96>
			{
				break;
 8016e8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e90:	2200      	movs	r2, #0
 8016e92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016e96:	e003      	b.n	8016ea0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ea2:	2b0e      	cmp	r3, #14
 8016ea4:	d901      	bls.n	8016eaa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016ea6:	230e      	movs	r3, #14
 8016ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016eae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eb8:	2200      	movs	r2, #0
 8016eba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ebe:	3304      	adds	r3, #4
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7ff f897 	bl	8015ff4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ec8:	3318      	adds	r3, #24
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7ff f892 	bl	8015ff4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ed4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ed8:	f1c3 020f 	rsb	r2, r3, #15
 8016edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ede:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ee4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8016ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ee8:	2200      	movs	r2, #0
 8016eea:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eee:	2200      	movs	r2, #0
 8016ef0:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016efe:	3358      	adds	r3, #88	@ 0x58
 8016f00:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8016f04:	2100      	movs	r1, #0
 8016f06:	4618      	mov	r0, r3
 8016f08:	f002 fee5 	bl	8019cd6 <memset>
 8016f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f0e:	4a21      	ldr	r2, [pc, #132]	@ (8016f94 <prvInitialiseNewTask+0x19c>)
 8016f10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8016f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f14:	4a20      	ldr	r2, [pc, #128]	@ (8016f98 <prvInitialiseNewTask+0x1a0>)
 8016f16:	661a      	str	r2, [r3, #96]	@ 0x60
 8016f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f1a:	4a20      	ldr	r2, [pc, #128]	@ (8016f9c <prvInitialiseNewTask+0x1a4>)
 8016f1c:	665a      	str	r2, [r3, #100]	@ 0x64
 8016f1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016f20:	f04f 0201 	mov.w	r2, #1
 8016f24:	f04f 0300 	mov.w	r3, #0
 8016f28:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 8016f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f2e:	f243 320e 	movw	r2, #13070	@ 0x330e
 8016f32:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 8016f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f38:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8016f3c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 8016f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f42:	f241 2234 	movw	r2, #4660	@ 0x1234
 8016f46:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 8016f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f4c:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 8016f50:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 8016f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f56:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 8016f5a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 8016f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f60:	2205      	movs	r2, #5
 8016f62:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 8016f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f68:	220b      	movs	r2, #11
 8016f6a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016f6e:	683a      	ldr	r2, [r7, #0]
 8016f70:	68f9      	ldr	r1, [r7, #12]
 8016f72:	69b8      	ldr	r0, [r7, #24]
 8016f74:	f001 fbea 	bl	801874c <pxPortInitialiseStack>
 8016f78:	4602      	mov	r2, r0
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d002      	beq.n	8016f8a <prvInitialiseNewTask+0x192>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f8a:	bf00      	nop
 8016f8c:	3720      	adds	r7, #32
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	2000caf4 	.word	0x2000caf4
 8016f98:	2000cb5c 	.word	0x2000cb5c
 8016f9c:	2000cbc4 	.word	0x2000cbc4

08016fa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016fa8:	f001 fcfe 	bl	80189a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016fac:	4b2c      	ldr	r3, [pc, #176]	@ (8017060 <prvAddNewTaskToReadyList+0xc0>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	3301      	adds	r3, #1
 8016fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8017060 <prvAddNewTaskToReadyList+0xc0>)
 8016fb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8017064 <prvAddNewTaskToReadyList+0xc4>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d109      	bne.n	8016fd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016fbe:	4a29      	ldr	r2, [pc, #164]	@ (8017064 <prvAddNewTaskToReadyList+0xc4>)
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016fc4:	4b26      	ldr	r3, [pc, #152]	@ (8017060 <prvAddNewTaskToReadyList+0xc0>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2b01      	cmp	r3, #1
 8016fca:	d110      	bne.n	8016fee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016fcc:	f000 fd7a 	bl	8017ac4 <prvInitialiseTaskLists>
 8016fd0:	e00d      	b.n	8016fee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016fd2:	4b25      	ldr	r3, [pc, #148]	@ (8017068 <prvAddNewTaskToReadyList+0xc8>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d109      	bne.n	8016fee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016fda:	4b22      	ldr	r3, [pc, #136]	@ (8017064 <prvAddNewTaskToReadyList+0xc4>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d802      	bhi.n	8016fee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8017064 <prvAddNewTaskToReadyList+0xc4>)
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016fee:	4b1f      	ldr	r3, [pc, #124]	@ (801706c <prvAddNewTaskToReadyList+0xcc>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	4a1d      	ldr	r2, [pc, #116]	@ (801706c <prvAddNewTaskToReadyList+0xcc>)
 8016ff6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016ff8:	4b1c      	ldr	r3, [pc, #112]	@ (801706c <prvAddNewTaskToReadyList+0xcc>)
 8016ffa:	681a      	ldr	r2, [r3, #0]
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017004:	2201      	movs	r2, #1
 8017006:	409a      	lsls	r2, r3
 8017008:	4b19      	ldr	r3, [pc, #100]	@ (8017070 <prvAddNewTaskToReadyList+0xd0>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	4313      	orrs	r3, r2
 801700e:	4a18      	ldr	r2, [pc, #96]	@ (8017070 <prvAddNewTaskToReadyList+0xd0>)
 8017010:	6013      	str	r3, [r2, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017016:	4613      	mov	r3, r2
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	4413      	add	r3, r2
 801701c:	009b      	lsls	r3, r3, #2
 801701e:	4a15      	ldr	r2, [pc, #84]	@ (8017074 <prvAddNewTaskToReadyList+0xd4>)
 8017020:	441a      	add	r2, r3
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	3304      	adds	r3, #4
 8017026:	4619      	mov	r1, r3
 8017028:	4610      	mov	r0, r2
 801702a:	f7fe fff0 	bl	801600e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801702e:	f001 fced 	bl	8018a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017032:	4b0d      	ldr	r3, [pc, #52]	@ (8017068 <prvAddNewTaskToReadyList+0xc8>)
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d00e      	beq.n	8017058 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801703a:	4b0a      	ldr	r3, [pc, #40]	@ (8017064 <prvAddNewTaskToReadyList+0xc4>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017044:	429a      	cmp	r2, r3
 8017046:	d207      	bcs.n	8017058 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017048:	4b0b      	ldr	r3, [pc, #44]	@ (8017078 <prvAddNewTaskToReadyList+0xd8>)
 801704a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801704e:	601a      	str	r2, [r3, #0]
 8017050:	f3bf 8f4f 	dsb	sy
 8017054:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017058:	bf00      	nop
 801705a:	3708      	adds	r7, #8
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	2000382c 	.word	0x2000382c
 8017064:	2000368c 	.word	0x2000368c
 8017068:	20003838 	.word	0x20003838
 801706c:	20003848 	.word	0x20003848
 8017070:	20003834 	.word	0x20003834
 8017074:	20003690 	.word	0x20003690
 8017078:	e000ed04 	.word	0xe000ed04

0801707c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801707c:	b580      	push	{r7, lr}
 801707e:	b08a      	sub	sp, #40	@ 0x28
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8017086:	2300      	movs	r3, #0
 8017088:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d10b      	bne.n	80170a8 <vTaskDelayUntil+0x2c>
	__asm volatile
 8017090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017094:	f383 8811 	msr	BASEPRI, r3
 8017098:	f3bf 8f6f 	isb	sy
 801709c:	f3bf 8f4f 	dsb	sy
 80170a0:	617b      	str	r3, [r7, #20]
}
 80170a2:	bf00      	nop
 80170a4:	bf00      	nop
 80170a6:	e7fd      	b.n	80170a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d10b      	bne.n	80170c6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80170ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170b2:	f383 8811 	msr	BASEPRI, r3
 80170b6:	f3bf 8f6f 	isb	sy
 80170ba:	f3bf 8f4f 	dsb	sy
 80170be:	613b      	str	r3, [r7, #16]
}
 80170c0:	bf00      	nop
 80170c2:	bf00      	nop
 80170c4:	e7fd      	b.n	80170c2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80170c6:	4b2a      	ldr	r3, [pc, #168]	@ (8017170 <vTaskDelayUntil+0xf4>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d00b      	beq.n	80170e6 <vTaskDelayUntil+0x6a>
	__asm volatile
 80170ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170d2:	f383 8811 	msr	BASEPRI, r3
 80170d6:	f3bf 8f6f 	isb	sy
 80170da:	f3bf 8f4f 	dsb	sy
 80170de:	60fb      	str	r3, [r7, #12]
}
 80170e0:	bf00      	nop
 80170e2:	bf00      	nop
 80170e4:	e7fd      	b.n	80170e2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80170e6:	f000 f8f1 	bl	80172cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80170ea:	4b22      	ldr	r3, [pc, #136]	@ (8017174 <vTaskDelayUntil+0xf8>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	683a      	ldr	r2, [r7, #0]
 80170f6:	4413      	add	r3, r2
 80170f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	6a3a      	ldr	r2, [r7, #32]
 8017100:	429a      	cmp	r2, r3
 8017102:	d20b      	bcs.n	801711c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	69fa      	ldr	r2, [r7, #28]
 801710a:	429a      	cmp	r2, r3
 801710c:	d211      	bcs.n	8017132 <vTaskDelayUntil+0xb6>
 801710e:	69fa      	ldr	r2, [r7, #28]
 8017110:	6a3b      	ldr	r3, [r7, #32]
 8017112:	429a      	cmp	r2, r3
 8017114:	d90d      	bls.n	8017132 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017116:	2301      	movs	r3, #1
 8017118:	627b      	str	r3, [r7, #36]	@ 0x24
 801711a:	e00a      	b.n	8017132 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	69fa      	ldr	r2, [r7, #28]
 8017122:	429a      	cmp	r2, r3
 8017124:	d303      	bcc.n	801712e <vTaskDelayUntil+0xb2>
 8017126:	69fa      	ldr	r2, [r7, #28]
 8017128:	6a3b      	ldr	r3, [r7, #32]
 801712a:	429a      	cmp	r2, r3
 801712c:	d901      	bls.n	8017132 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801712e:	2301      	movs	r3, #1
 8017130:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	69fa      	ldr	r2, [r7, #28]
 8017136:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8017138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801713a:	2b00      	cmp	r3, #0
 801713c:	d006      	beq.n	801714c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801713e:	69fa      	ldr	r2, [r7, #28]
 8017140:	6a3b      	ldr	r3, [r7, #32]
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	2100      	movs	r1, #0
 8017146:	4618      	mov	r0, r3
 8017148:	f000 ff20 	bl	8017f8c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801714c:	f000 f8cc 	bl	80172e8 <xTaskResumeAll>
 8017150:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d107      	bne.n	8017168 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8017158:	4b07      	ldr	r3, [pc, #28]	@ (8017178 <vTaskDelayUntil+0xfc>)
 801715a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801715e:	601a      	str	r2, [r3, #0]
 8017160:	f3bf 8f4f 	dsb	sy
 8017164:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017168:	bf00      	nop
 801716a:	3728      	adds	r7, #40	@ 0x28
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}
 8017170:	20003854 	.word	0x20003854
 8017174:	20003830 	.word	0x20003830
 8017178:	e000ed04 	.word	0xe000ed04

0801717c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801717c:	b580      	push	{r7, lr}
 801717e:	b084      	sub	sp, #16
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017184:	2300      	movs	r3, #0
 8017186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d018      	beq.n	80171c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801718e:	4b14      	ldr	r3, [pc, #80]	@ (80171e0 <vTaskDelay+0x64>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d00b      	beq.n	80171ae <vTaskDelay+0x32>
	__asm volatile
 8017196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801719a:	f383 8811 	msr	BASEPRI, r3
 801719e:	f3bf 8f6f 	isb	sy
 80171a2:	f3bf 8f4f 	dsb	sy
 80171a6:	60bb      	str	r3, [r7, #8]
}
 80171a8:	bf00      	nop
 80171aa:	bf00      	nop
 80171ac:	e7fd      	b.n	80171aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80171ae:	f000 f88d 	bl	80172cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80171b2:	2100      	movs	r1, #0
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 fee9 	bl	8017f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80171ba:	f000 f895 	bl	80172e8 <xTaskResumeAll>
 80171be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d107      	bne.n	80171d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80171c6:	4b07      	ldr	r3, [pc, #28]	@ (80171e4 <vTaskDelay+0x68>)
 80171c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171cc:	601a      	str	r2, [r3, #0]
 80171ce:	f3bf 8f4f 	dsb	sy
 80171d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80171d6:	bf00      	nop
 80171d8:	3710      	adds	r7, #16
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}
 80171de:	bf00      	nop
 80171e0:	20003854 	.word	0x20003854
 80171e4:	e000ed04 	.word	0xe000ed04

080171e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b08a      	sub	sp, #40	@ 0x28
 80171ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80171ee:	2300      	movs	r3, #0
 80171f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80171f2:	2300      	movs	r3, #0
 80171f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80171f6:	463a      	mov	r2, r7
 80171f8:	1d39      	adds	r1, r7, #4
 80171fa:	f107 0308 	add.w	r3, r7, #8
 80171fe:	4618      	mov	r0, r3
 8017200:	f7eb ffb4 	bl	800316c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017204:	6839      	ldr	r1, [r7, #0]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	68ba      	ldr	r2, [r7, #8]
 801720a:	9202      	str	r2, [sp, #8]
 801720c:	9301      	str	r3, [sp, #4]
 801720e:	2300      	movs	r3, #0
 8017210:	9300      	str	r3, [sp, #0]
 8017212:	2300      	movs	r3, #0
 8017214:	460a      	mov	r2, r1
 8017216:	4925      	ldr	r1, [pc, #148]	@ (80172ac <vTaskStartScheduler+0xc4>)
 8017218:	4825      	ldr	r0, [pc, #148]	@ (80172b0 <vTaskStartScheduler+0xc8>)
 801721a:	f7ff fd45 	bl	8016ca8 <xTaskCreateStatic>
 801721e:	4603      	mov	r3, r0
 8017220:	4a24      	ldr	r2, [pc, #144]	@ (80172b4 <vTaskStartScheduler+0xcc>)
 8017222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017224:	4b23      	ldr	r3, [pc, #140]	@ (80172b4 <vTaskStartScheduler+0xcc>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d002      	beq.n	8017232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801722c:	2301      	movs	r3, #1
 801722e:	617b      	str	r3, [r7, #20]
 8017230:	e001      	b.n	8017236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017232:	2300      	movs	r3, #0
 8017234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	2b01      	cmp	r3, #1
 801723a:	d102      	bne.n	8017242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801723c:	f000 ff0c 	bl	8018058 <xTimerCreateTimerTask>
 8017240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	2b01      	cmp	r3, #1
 8017246:	d11d      	bne.n	8017284 <vTaskStartScheduler+0x9c>
	__asm volatile
 8017248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801724c:	f383 8811 	msr	BASEPRI, r3
 8017250:	f3bf 8f6f 	isb	sy
 8017254:	f3bf 8f4f 	dsb	sy
 8017258:	613b      	str	r3, [r7, #16]
}
 801725a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801725c:	4b16      	ldr	r3, [pc, #88]	@ (80172b8 <vTaskStartScheduler+0xd0>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	3358      	adds	r3, #88	@ 0x58
 8017262:	4a16      	ldr	r2, [pc, #88]	@ (80172bc <vTaskStartScheduler+0xd4>)
 8017264:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017266:	4b16      	ldr	r3, [pc, #88]	@ (80172c0 <vTaskStartScheduler+0xd8>)
 8017268:	f04f 32ff 	mov.w	r2, #4294967295
 801726c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801726e:	4b15      	ldr	r3, [pc, #84]	@ (80172c4 <vTaskStartScheduler+0xdc>)
 8017270:	2201      	movs	r2, #1
 8017272:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017274:	4b14      	ldr	r3, [pc, #80]	@ (80172c8 <vTaskStartScheduler+0xe0>)
 8017276:	2200      	movs	r2, #0
 8017278:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801727a:	f7eb ff5d 	bl	8003138 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801727e:	f001 faef 	bl	8018860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017282:	e00f      	b.n	80172a4 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801728a:	d10b      	bne.n	80172a4 <vTaskStartScheduler+0xbc>
	__asm volatile
 801728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017290:	f383 8811 	msr	BASEPRI, r3
 8017294:	f3bf 8f6f 	isb	sy
 8017298:	f3bf 8f4f 	dsb	sy
 801729c:	60fb      	str	r3, [r7, #12]
}
 801729e:	bf00      	nop
 80172a0:	bf00      	nop
 80172a2:	e7fd      	b.n	80172a0 <vTaskStartScheduler+0xb8>
}
 80172a4:	bf00      	nop
 80172a6:	3718      	adds	r7, #24
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	08020290 	.word	0x08020290
 80172b0:	08017a95 	.word	0x08017a95
 80172b4:	20003850 	.word	0x20003850
 80172b8:	2000368c 	.word	0x2000368c
 80172bc:	20000114 	.word	0x20000114
 80172c0:	2000384c 	.word	0x2000384c
 80172c4:	20003838 	.word	0x20003838
 80172c8:	20003830 	.word	0x20003830

080172cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80172cc:	b480      	push	{r7}
 80172ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80172d0:	4b04      	ldr	r3, [pc, #16]	@ (80172e4 <vTaskSuspendAll+0x18>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	3301      	adds	r3, #1
 80172d6:	4a03      	ldr	r2, [pc, #12]	@ (80172e4 <vTaskSuspendAll+0x18>)
 80172d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80172da:	bf00      	nop
 80172dc:	46bd      	mov	sp, r7
 80172de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e2:	4770      	bx	lr
 80172e4:	20003854 	.word	0x20003854

080172e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80172ee:	2300      	movs	r3, #0
 80172f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80172f2:	2300      	movs	r3, #0
 80172f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80172f6:	4b42      	ldr	r3, [pc, #264]	@ (8017400 <xTaskResumeAll+0x118>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d10b      	bne.n	8017316 <xTaskResumeAll+0x2e>
	__asm volatile
 80172fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017302:	f383 8811 	msr	BASEPRI, r3
 8017306:	f3bf 8f6f 	isb	sy
 801730a:	f3bf 8f4f 	dsb	sy
 801730e:	603b      	str	r3, [r7, #0]
}
 8017310:	bf00      	nop
 8017312:	bf00      	nop
 8017314:	e7fd      	b.n	8017312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017316:	f001 fb47 	bl	80189a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801731a:	4b39      	ldr	r3, [pc, #228]	@ (8017400 <xTaskResumeAll+0x118>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	3b01      	subs	r3, #1
 8017320:	4a37      	ldr	r2, [pc, #220]	@ (8017400 <xTaskResumeAll+0x118>)
 8017322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017324:	4b36      	ldr	r3, [pc, #216]	@ (8017400 <xTaskResumeAll+0x118>)
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d161      	bne.n	80173f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801732c:	4b35      	ldr	r3, [pc, #212]	@ (8017404 <xTaskResumeAll+0x11c>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d05d      	beq.n	80173f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017334:	e02e      	b.n	8017394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017336:	4b34      	ldr	r3, [pc, #208]	@ (8017408 <xTaskResumeAll+0x120>)
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	68db      	ldr	r3, [r3, #12]
 801733c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	3318      	adds	r3, #24
 8017342:	4618      	mov	r0, r3
 8017344:	f7fe fec0 	bl	80160c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	3304      	adds	r3, #4
 801734c:	4618      	mov	r0, r3
 801734e:	f7fe febb 	bl	80160c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017356:	2201      	movs	r2, #1
 8017358:	409a      	lsls	r2, r3
 801735a:	4b2c      	ldr	r3, [pc, #176]	@ (801740c <xTaskResumeAll+0x124>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	4313      	orrs	r3, r2
 8017360:	4a2a      	ldr	r2, [pc, #168]	@ (801740c <xTaskResumeAll+0x124>)
 8017362:	6013      	str	r3, [r2, #0]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017368:	4613      	mov	r3, r2
 801736a:	009b      	lsls	r3, r3, #2
 801736c:	4413      	add	r3, r2
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	4a27      	ldr	r2, [pc, #156]	@ (8017410 <xTaskResumeAll+0x128>)
 8017372:	441a      	add	r2, r3
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	3304      	adds	r3, #4
 8017378:	4619      	mov	r1, r3
 801737a:	4610      	mov	r0, r2
 801737c:	f7fe fe47 	bl	801600e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017384:	4b23      	ldr	r3, [pc, #140]	@ (8017414 <xTaskResumeAll+0x12c>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801738a:	429a      	cmp	r2, r3
 801738c:	d302      	bcc.n	8017394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801738e:	4b22      	ldr	r3, [pc, #136]	@ (8017418 <xTaskResumeAll+0x130>)
 8017390:	2201      	movs	r2, #1
 8017392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017394:	4b1c      	ldr	r3, [pc, #112]	@ (8017408 <xTaskResumeAll+0x120>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d1cc      	bne.n	8017336 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d001      	beq.n	80173a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80173a2:	f000 fc33 	bl	8017c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80173a6:	4b1d      	ldr	r3, [pc, #116]	@ (801741c <xTaskResumeAll+0x134>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d010      	beq.n	80173d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80173b2:	f000 f847 	bl	8017444 <xTaskIncrementTick>
 80173b6:	4603      	mov	r3, r0
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d002      	beq.n	80173c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80173bc:	4b16      	ldr	r3, [pc, #88]	@ (8017418 <xTaskResumeAll+0x130>)
 80173be:	2201      	movs	r2, #1
 80173c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	3b01      	subs	r3, #1
 80173c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d1f1      	bne.n	80173b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80173ce:	4b13      	ldr	r3, [pc, #76]	@ (801741c <xTaskResumeAll+0x134>)
 80173d0:	2200      	movs	r2, #0
 80173d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80173d4:	4b10      	ldr	r3, [pc, #64]	@ (8017418 <xTaskResumeAll+0x130>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d009      	beq.n	80173f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80173dc:	2301      	movs	r3, #1
 80173de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80173e0:	4b0f      	ldr	r3, [pc, #60]	@ (8017420 <xTaskResumeAll+0x138>)
 80173e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173e6:	601a      	str	r2, [r3, #0]
 80173e8:	f3bf 8f4f 	dsb	sy
 80173ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80173f0:	f001 fb0c 	bl	8018a0c <vPortExitCritical>

	return xAlreadyYielded;
 80173f4:	68bb      	ldr	r3, [r7, #8]
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3710      	adds	r7, #16
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	20003854 	.word	0x20003854
 8017404:	2000382c 	.word	0x2000382c
 8017408:	200037ec 	.word	0x200037ec
 801740c:	20003834 	.word	0x20003834
 8017410:	20003690 	.word	0x20003690
 8017414:	2000368c 	.word	0x2000368c
 8017418:	20003840 	.word	0x20003840
 801741c:	2000383c 	.word	0x2000383c
 8017420:	e000ed04 	.word	0xe000ed04

08017424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017424:	b480      	push	{r7}
 8017426:	b083      	sub	sp, #12
 8017428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801742a:	4b05      	ldr	r3, [pc, #20]	@ (8017440 <xTaskGetTickCount+0x1c>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017430:	687b      	ldr	r3, [r7, #4]
}
 8017432:	4618      	mov	r0, r3
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743c:	4770      	bx	lr
 801743e:	bf00      	nop
 8017440:	20003830 	.word	0x20003830

08017444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b086      	sub	sp, #24
 8017448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801744a:	2300      	movs	r3, #0
 801744c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801744e:	4b4f      	ldr	r3, [pc, #316]	@ (801758c <xTaskIncrementTick+0x148>)
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	f040 808f 	bne.w	8017576 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017458:	4b4d      	ldr	r3, [pc, #308]	@ (8017590 <xTaskIncrementTick+0x14c>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	3301      	adds	r3, #1
 801745e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017460:	4a4b      	ldr	r2, [pc, #300]	@ (8017590 <xTaskIncrementTick+0x14c>)
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d121      	bne.n	80174b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801746c:	4b49      	ldr	r3, [pc, #292]	@ (8017594 <xTaskIncrementTick+0x150>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d00b      	beq.n	801748e <xTaskIncrementTick+0x4a>
	__asm volatile
 8017476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801747a:	f383 8811 	msr	BASEPRI, r3
 801747e:	f3bf 8f6f 	isb	sy
 8017482:	f3bf 8f4f 	dsb	sy
 8017486:	603b      	str	r3, [r7, #0]
}
 8017488:	bf00      	nop
 801748a:	bf00      	nop
 801748c:	e7fd      	b.n	801748a <xTaskIncrementTick+0x46>
 801748e:	4b41      	ldr	r3, [pc, #260]	@ (8017594 <xTaskIncrementTick+0x150>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	60fb      	str	r3, [r7, #12]
 8017494:	4b40      	ldr	r3, [pc, #256]	@ (8017598 <xTaskIncrementTick+0x154>)
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	4a3e      	ldr	r2, [pc, #248]	@ (8017594 <xTaskIncrementTick+0x150>)
 801749a:	6013      	str	r3, [r2, #0]
 801749c:	4a3e      	ldr	r2, [pc, #248]	@ (8017598 <xTaskIncrementTick+0x154>)
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	6013      	str	r3, [r2, #0]
 80174a2:	4b3e      	ldr	r3, [pc, #248]	@ (801759c <xTaskIncrementTick+0x158>)
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	3301      	adds	r3, #1
 80174a8:	4a3c      	ldr	r2, [pc, #240]	@ (801759c <xTaskIncrementTick+0x158>)
 80174aa:	6013      	str	r3, [r2, #0]
 80174ac:	f000 fbae 	bl	8017c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80174b0:	4b3b      	ldr	r3, [pc, #236]	@ (80175a0 <xTaskIncrementTick+0x15c>)
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	693a      	ldr	r2, [r7, #16]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	d348      	bcc.n	801754c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80174ba:	4b36      	ldr	r3, [pc, #216]	@ (8017594 <xTaskIncrementTick+0x150>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d104      	bne.n	80174ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174c4:	4b36      	ldr	r3, [pc, #216]	@ (80175a0 <xTaskIncrementTick+0x15c>)
 80174c6:	f04f 32ff 	mov.w	r2, #4294967295
 80174ca:	601a      	str	r2, [r3, #0]
					break;
 80174cc:	e03e      	b.n	801754c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174ce:	4b31      	ldr	r3, [pc, #196]	@ (8017594 <xTaskIncrementTick+0x150>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	68db      	ldr	r3, [r3, #12]
 80174d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80174de:	693a      	ldr	r2, [r7, #16]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d203      	bcs.n	80174ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80174e6:	4a2e      	ldr	r2, [pc, #184]	@ (80175a0 <xTaskIncrementTick+0x15c>)
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80174ec:	e02e      	b.n	801754c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	3304      	adds	r3, #4
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7fe fde8 	bl	80160c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d004      	beq.n	801750a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	3318      	adds	r3, #24
 8017504:	4618      	mov	r0, r3
 8017506:	f7fe fddf 	bl	80160c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801750e:	2201      	movs	r2, #1
 8017510:	409a      	lsls	r2, r3
 8017512:	4b24      	ldr	r3, [pc, #144]	@ (80175a4 <xTaskIncrementTick+0x160>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	4313      	orrs	r3, r2
 8017518:	4a22      	ldr	r2, [pc, #136]	@ (80175a4 <xTaskIncrementTick+0x160>)
 801751a:	6013      	str	r3, [r2, #0]
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017520:	4613      	mov	r3, r2
 8017522:	009b      	lsls	r3, r3, #2
 8017524:	4413      	add	r3, r2
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	4a1f      	ldr	r2, [pc, #124]	@ (80175a8 <xTaskIncrementTick+0x164>)
 801752a:	441a      	add	r2, r3
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	3304      	adds	r3, #4
 8017530:	4619      	mov	r1, r3
 8017532:	4610      	mov	r0, r2
 8017534:	f7fe fd6b 	bl	801600e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801753c:	4b1b      	ldr	r3, [pc, #108]	@ (80175ac <xTaskIncrementTick+0x168>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017542:	429a      	cmp	r2, r3
 8017544:	d3b9      	bcc.n	80174ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8017546:	2301      	movs	r3, #1
 8017548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801754a:	e7b6      	b.n	80174ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801754c:	4b17      	ldr	r3, [pc, #92]	@ (80175ac <xTaskIncrementTick+0x168>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017552:	4915      	ldr	r1, [pc, #84]	@ (80175a8 <xTaskIncrementTick+0x164>)
 8017554:	4613      	mov	r3, r2
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	4413      	add	r3, r2
 801755a:	009b      	lsls	r3, r3, #2
 801755c:	440b      	add	r3, r1
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	2b01      	cmp	r3, #1
 8017562:	d901      	bls.n	8017568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017564:	2301      	movs	r3, #1
 8017566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017568:	4b11      	ldr	r3, [pc, #68]	@ (80175b0 <xTaskIncrementTick+0x16c>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d007      	beq.n	8017580 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017570:	2301      	movs	r3, #1
 8017572:	617b      	str	r3, [r7, #20]
 8017574:	e004      	b.n	8017580 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017576:	4b0f      	ldr	r3, [pc, #60]	@ (80175b4 <xTaskIncrementTick+0x170>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	3301      	adds	r3, #1
 801757c:	4a0d      	ldr	r2, [pc, #52]	@ (80175b4 <xTaskIncrementTick+0x170>)
 801757e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017580:	697b      	ldr	r3, [r7, #20]
}
 8017582:	4618      	mov	r0, r3
 8017584:	3718      	adds	r7, #24
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop
 801758c:	20003854 	.word	0x20003854
 8017590:	20003830 	.word	0x20003830
 8017594:	200037e4 	.word	0x200037e4
 8017598:	200037e8 	.word	0x200037e8
 801759c:	20003844 	.word	0x20003844
 80175a0:	2000384c 	.word	0x2000384c
 80175a4:	20003834 	.word	0x20003834
 80175a8:	20003690 	.word	0x20003690
 80175ac:	2000368c 	.word	0x2000368c
 80175b0:	20003840 	.word	0x20003840
 80175b4:	2000383c 	.word	0x2000383c

080175b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80175be:	4b3e      	ldr	r3, [pc, #248]	@ (80176b8 <vTaskSwitchContext+0x100>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d003      	beq.n	80175ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80175c6:	4b3d      	ldr	r3, [pc, #244]	@ (80176bc <vTaskSwitchContext+0x104>)
 80175c8:	2201      	movs	r2, #1
 80175ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80175cc:	e06f      	b.n	80176ae <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 80175ce:	4b3b      	ldr	r3, [pc, #236]	@ (80176bc <vTaskSwitchContext+0x104>)
 80175d0:	2200      	movs	r2, #0
 80175d2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80175d4:	f7eb fdb7 	bl	8003146 <getRunTimeCounterValue>
 80175d8:	4603      	mov	r3, r0
 80175da:	4a39      	ldr	r2, [pc, #228]	@ (80176c0 <vTaskSwitchContext+0x108>)
 80175dc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80175de:	4b38      	ldr	r3, [pc, #224]	@ (80176c0 <vTaskSwitchContext+0x108>)
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	4b38      	ldr	r3, [pc, #224]	@ (80176c4 <vTaskSwitchContext+0x10c>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d909      	bls.n	80175fe <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80175ea:	4b37      	ldr	r3, [pc, #220]	@ (80176c8 <vTaskSwitchContext+0x110>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80175f0:	4a33      	ldr	r2, [pc, #204]	@ (80176c0 <vTaskSwitchContext+0x108>)
 80175f2:	6810      	ldr	r0, [r2, #0]
 80175f4:	4a33      	ldr	r2, [pc, #204]	@ (80176c4 <vTaskSwitchContext+0x10c>)
 80175f6:	6812      	ldr	r2, [r2, #0]
 80175f8:	1a82      	subs	r2, r0, r2
 80175fa:	440a      	add	r2, r1
 80175fc:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80175fe:	4b30      	ldr	r3, [pc, #192]	@ (80176c0 <vTaskSwitchContext+0x108>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	4a30      	ldr	r2, [pc, #192]	@ (80176c4 <vTaskSwitchContext+0x10c>)
 8017604:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017606:	4b30      	ldr	r3, [pc, #192]	@ (80176c8 <vTaskSwitchContext+0x110>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	4b2e      	ldr	r3, [pc, #184]	@ (80176c8 <vTaskSwitchContext+0x110>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017612:	429a      	cmp	r2, r3
 8017614:	d808      	bhi.n	8017628 <vTaskSwitchContext+0x70>
 8017616:	4b2c      	ldr	r3, [pc, #176]	@ (80176c8 <vTaskSwitchContext+0x110>)
 8017618:	681a      	ldr	r2, [r3, #0]
 801761a:	4b2b      	ldr	r3, [pc, #172]	@ (80176c8 <vTaskSwitchContext+0x110>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	3334      	adds	r3, #52	@ 0x34
 8017620:	4619      	mov	r1, r3
 8017622:	4610      	mov	r0, r2
 8017624:	f7eb fd97 	bl	8003156 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017628:	4b28      	ldr	r3, [pc, #160]	@ (80176cc <vTaskSwitchContext+0x114>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	fab3 f383 	clz	r3, r3
 8017634:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017636:	7afb      	ldrb	r3, [r7, #11]
 8017638:	f1c3 031f 	rsb	r3, r3, #31
 801763c:	617b      	str	r3, [r7, #20]
 801763e:	4924      	ldr	r1, [pc, #144]	@ (80176d0 <vTaskSwitchContext+0x118>)
 8017640:	697a      	ldr	r2, [r7, #20]
 8017642:	4613      	mov	r3, r2
 8017644:	009b      	lsls	r3, r3, #2
 8017646:	4413      	add	r3, r2
 8017648:	009b      	lsls	r3, r3, #2
 801764a:	440b      	add	r3, r1
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d10b      	bne.n	801766a <vTaskSwitchContext+0xb2>
	__asm volatile
 8017652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017656:	f383 8811 	msr	BASEPRI, r3
 801765a:	f3bf 8f6f 	isb	sy
 801765e:	f3bf 8f4f 	dsb	sy
 8017662:	607b      	str	r3, [r7, #4]
}
 8017664:	bf00      	nop
 8017666:	bf00      	nop
 8017668:	e7fd      	b.n	8017666 <vTaskSwitchContext+0xae>
 801766a:	697a      	ldr	r2, [r7, #20]
 801766c:	4613      	mov	r3, r2
 801766e:	009b      	lsls	r3, r3, #2
 8017670:	4413      	add	r3, r2
 8017672:	009b      	lsls	r3, r3, #2
 8017674:	4a16      	ldr	r2, [pc, #88]	@ (80176d0 <vTaskSwitchContext+0x118>)
 8017676:	4413      	add	r3, r2
 8017678:	613b      	str	r3, [r7, #16]
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	685b      	ldr	r3, [r3, #4]
 801767e:	685a      	ldr	r2, [r3, #4]
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	605a      	str	r2, [r3, #4]
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	685a      	ldr	r2, [r3, #4]
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	3308      	adds	r3, #8
 801768c:	429a      	cmp	r2, r3
 801768e:	d104      	bne.n	801769a <vTaskSwitchContext+0xe2>
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	685b      	ldr	r3, [r3, #4]
 8017694:	685a      	ldr	r2, [r3, #4]
 8017696:	693b      	ldr	r3, [r7, #16]
 8017698:	605a      	str	r2, [r3, #4]
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	685b      	ldr	r3, [r3, #4]
 801769e:	68db      	ldr	r3, [r3, #12]
 80176a0:	4a09      	ldr	r2, [pc, #36]	@ (80176c8 <vTaskSwitchContext+0x110>)
 80176a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80176a4:	4b08      	ldr	r3, [pc, #32]	@ (80176c8 <vTaskSwitchContext+0x110>)
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	3358      	adds	r3, #88	@ 0x58
 80176aa:	4a0a      	ldr	r2, [pc, #40]	@ (80176d4 <vTaskSwitchContext+0x11c>)
 80176ac:	6013      	str	r3, [r2, #0]
}
 80176ae:	bf00      	nop
 80176b0:	3718      	adds	r7, #24
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}
 80176b6:	bf00      	nop
 80176b8:	20003854 	.word	0x20003854
 80176bc:	20003840 	.word	0x20003840
 80176c0:	2000385c 	.word	0x2000385c
 80176c4:	20003858 	.word	0x20003858
 80176c8:	2000368c 	.word	0x2000368c
 80176cc:	20003834 	.word	0x20003834
 80176d0:	20003690 	.word	0x20003690
 80176d4:	20000114 	.word	0x20000114

080176d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b084      	sub	sp, #16
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d10b      	bne.n	8017700 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80176e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176ec:	f383 8811 	msr	BASEPRI, r3
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	f3bf 8f4f 	dsb	sy
 80176f8:	60fb      	str	r3, [r7, #12]
}
 80176fa:	bf00      	nop
 80176fc:	bf00      	nop
 80176fe:	e7fd      	b.n	80176fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017700:	4b07      	ldr	r3, [pc, #28]	@ (8017720 <vTaskPlaceOnEventList+0x48>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	3318      	adds	r3, #24
 8017706:	4619      	mov	r1, r3
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f7fe fca4 	bl	8016056 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801770e:	2101      	movs	r1, #1
 8017710:	6838      	ldr	r0, [r7, #0]
 8017712:	f000 fc3b 	bl	8017f8c <prvAddCurrentTaskToDelayedList>
}
 8017716:	bf00      	nop
 8017718:	3710      	adds	r7, #16
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2000368c 	.word	0x2000368c

08017724 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b086      	sub	sp, #24
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	60b9      	str	r1, [r7, #8]
 801772e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d10b      	bne.n	801774e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8017736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801773a:	f383 8811 	msr	BASEPRI, r3
 801773e:	f3bf 8f6f 	isb	sy
 8017742:	f3bf 8f4f 	dsb	sy
 8017746:	617b      	str	r3, [r7, #20]
}
 8017748:	bf00      	nop
 801774a:	bf00      	nop
 801774c:	e7fd      	b.n	801774a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801774e:	4b12      	ldr	r3, [pc, #72]	@ (8017798 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d10b      	bne.n	801776e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8017756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801775a:	f383 8811 	msr	BASEPRI, r3
 801775e:	f3bf 8f6f 	isb	sy
 8017762:	f3bf 8f4f 	dsb	sy
 8017766:	613b      	str	r3, [r7, #16]
}
 8017768:	bf00      	nop
 801776a:	bf00      	nop
 801776c:	e7fd      	b.n	801776a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801776e:	4b0b      	ldr	r3, [pc, #44]	@ (801779c <vTaskPlaceOnUnorderedEventList+0x78>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	68ba      	ldr	r2, [r7, #8]
 8017774:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8017778:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801777a:	4b08      	ldr	r3, [pc, #32]	@ (801779c <vTaskPlaceOnUnorderedEventList+0x78>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	3318      	adds	r3, #24
 8017780:	4619      	mov	r1, r3
 8017782:	68f8      	ldr	r0, [r7, #12]
 8017784:	f7fe fc43 	bl	801600e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017788:	2101      	movs	r1, #1
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f000 fbfe 	bl	8017f8c <prvAddCurrentTaskToDelayedList>
}
 8017790:	bf00      	nop
 8017792:	3718      	adds	r7, #24
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}
 8017798:	20003854 	.word	0x20003854
 801779c:	2000368c 	.word	0x2000368c

080177a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b086      	sub	sp, #24
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d10b      	bne.n	80177ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80177b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177b6:	f383 8811 	msr	BASEPRI, r3
 80177ba:	f3bf 8f6f 	isb	sy
 80177be:	f3bf 8f4f 	dsb	sy
 80177c2:	617b      	str	r3, [r7, #20]
}
 80177c4:	bf00      	nop
 80177c6:	bf00      	nop
 80177c8:	e7fd      	b.n	80177c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80177ca:	4b0a      	ldr	r3, [pc, #40]	@ (80177f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	3318      	adds	r3, #24
 80177d0:	4619      	mov	r1, r3
 80177d2:	68f8      	ldr	r0, [r7, #12]
 80177d4:	f7fe fc1b 	bl	801600e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d002      	beq.n	80177e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80177de:	f04f 33ff 	mov.w	r3, #4294967295
 80177e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80177e4:	6879      	ldr	r1, [r7, #4]
 80177e6:	68b8      	ldr	r0, [r7, #8]
 80177e8:	f000 fbd0 	bl	8017f8c <prvAddCurrentTaskToDelayedList>
	}
 80177ec:	bf00      	nop
 80177ee:	3718      	adds	r7, #24
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}
 80177f4:	2000368c 	.word	0x2000368c

080177f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b086      	sub	sp, #24
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	68db      	ldr	r3, [r3, #12]
 8017804:	68db      	ldr	r3, [r3, #12]
 8017806:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017808:	693b      	ldr	r3, [r7, #16]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d10b      	bne.n	8017826 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017812:	f383 8811 	msr	BASEPRI, r3
 8017816:	f3bf 8f6f 	isb	sy
 801781a:	f3bf 8f4f 	dsb	sy
 801781e:	60fb      	str	r3, [r7, #12]
}
 8017820:	bf00      	nop
 8017822:	bf00      	nop
 8017824:	e7fd      	b.n	8017822 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	3318      	adds	r3, #24
 801782a:	4618      	mov	r0, r3
 801782c:	f7fe fc4c 	bl	80160c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017830:	4b1d      	ldr	r3, [pc, #116]	@ (80178a8 <xTaskRemoveFromEventList+0xb0>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d11c      	bne.n	8017872 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017838:	693b      	ldr	r3, [r7, #16]
 801783a:	3304      	adds	r3, #4
 801783c:	4618      	mov	r0, r3
 801783e:	f7fe fc43 	bl	80160c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017846:	2201      	movs	r2, #1
 8017848:	409a      	lsls	r2, r3
 801784a:	4b18      	ldr	r3, [pc, #96]	@ (80178ac <xTaskRemoveFromEventList+0xb4>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	4313      	orrs	r3, r2
 8017850:	4a16      	ldr	r2, [pc, #88]	@ (80178ac <xTaskRemoveFromEventList+0xb4>)
 8017852:	6013      	str	r3, [r2, #0]
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017858:	4613      	mov	r3, r2
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	4413      	add	r3, r2
 801785e:	009b      	lsls	r3, r3, #2
 8017860:	4a13      	ldr	r2, [pc, #76]	@ (80178b0 <xTaskRemoveFromEventList+0xb8>)
 8017862:	441a      	add	r2, r3
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	3304      	adds	r3, #4
 8017868:	4619      	mov	r1, r3
 801786a:	4610      	mov	r0, r2
 801786c:	f7fe fbcf 	bl	801600e <vListInsertEnd>
 8017870:	e005      	b.n	801787e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017872:	693b      	ldr	r3, [r7, #16]
 8017874:	3318      	adds	r3, #24
 8017876:	4619      	mov	r1, r3
 8017878:	480e      	ldr	r0, [pc, #56]	@ (80178b4 <xTaskRemoveFromEventList+0xbc>)
 801787a:	f7fe fbc8 	bl	801600e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017882:	4b0d      	ldr	r3, [pc, #52]	@ (80178b8 <xTaskRemoveFromEventList+0xc0>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017888:	429a      	cmp	r2, r3
 801788a:	d905      	bls.n	8017898 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801788c:	2301      	movs	r3, #1
 801788e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017890:	4b0a      	ldr	r3, [pc, #40]	@ (80178bc <xTaskRemoveFromEventList+0xc4>)
 8017892:	2201      	movs	r2, #1
 8017894:	601a      	str	r2, [r3, #0]
 8017896:	e001      	b.n	801789c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017898:	2300      	movs	r3, #0
 801789a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801789c:	697b      	ldr	r3, [r7, #20]
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3718      	adds	r7, #24
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	20003854 	.word	0x20003854
 80178ac:	20003834 	.word	0x20003834
 80178b0:	20003690 	.word	0x20003690
 80178b4:	200037ec 	.word	0x200037ec
 80178b8:	2000368c 	.word	0x2000368c
 80178bc:	20003840 	.word	0x20003840

080178c0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b086      	sub	sp, #24
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80178ca:	4b2a      	ldr	r3, [pc, #168]	@ (8017974 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d10b      	bne.n	80178ea <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80178d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178d6:	f383 8811 	msr	BASEPRI, r3
 80178da:	f3bf 8f6f 	isb	sy
 80178de:	f3bf 8f4f 	dsb	sy
 80178e2:	613b      	str	r3, [r7, #16]
}
 80178e4:	bf00      	nop
 80178e6:	bf00      	nop
 80178e8:	e7fd      	b.n	80178e6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	68db      	ldr	r3, [r3, #12]
 80178f8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d10b      	bne.n	8017918 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8017900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017904:	f383 8811 	msr	BASEPRI, r3
 8017908:	f3bf 8f6f 	isb	sy
 801790c:	f3bf 8f4f 	dsb	sy
 8017910:	60fb      	str	r3, [r7, #12]
}
 8017912:	bf00      	nop
 8017914:	bf00      	nop
 8017916:	e7fd      	b.n	8017914 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f7fe fbd5 	bl	80160c8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	3304      	adds	r3, #4
 8017922:	4618      	mov	r0, r3
 8017924:	f7fe fbd0 	bl	80160c8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801792c:	2201      	movs	r2, #1
 801792e:	409a      	lsls	r2, r3
 8017930:	4b11      	ldr	r3, [pc, #68]	@ (8017978 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	4313      	orrs	r3, r2
 8017936:	4a10      	ldr	r2, [pc, #64]	@ (8017978 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8017938:	6013      	str	r3, [r2, #0]
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801793e:	4613      	mov	r3, r2
 8017940:	009b      	lsls	r3, r3, #2
 8017942:	4413      	add	r3, r2
 8017944:	009b      	lsls	r3, r3, #2
 8017946:	4a0d      	ldr	r2, [pc, #52]	@ (801797c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8017948:	441a      	add	r2, r3
 801794a:	697b      	ldr	r3, [r7, #20]
 801794c:	3304      	adds	r3, #4
 801794e:	4619      	mov	r1, r3
 8017950:	4610      	mov	r0, r2
 8017952:	f7fe fb5c 	bl	801600e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801795a:	4b09      	ldr	r3, [pc, #36]	@ (8017980 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017960:	429a      	cmp	r2, r3
 8017962:	d902      	bls.n	801796a <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8017964:	4b07      	ldr	r3, [pc, #28]	@ (8017984 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8017966:	2201      	movs	r2, #1
 8017968:	601a      	str	r2, [r3, #0]
	}
}
 801796a:	bf00      	nop
 801796c:	3718      	adds	r7, #24
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	20003854 	.word	0x20003854
 8017978:	20003834 	.word	0x20003834
 801797c:	20003690 	.word	0x20003690
 8017980:	2000368c 	.word	0x2000368c
 8017984:	20003840 	.word	0x20003840

08017988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017990:	4b06      	ldr	r3, [pc, #24]	@ (80179ac <vTaskInternalSetTimeOutState+0x24>)
 8017992:	681a      	ldr	r2, [r3, #0]
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017998:	4b05      	ldr	r3, [pc, #20]	@ (80179b0 <vTaskInternalSetTimeOutState+0x28>)
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	605a      	str	r2, [r3, #4]
}
 80179a0:	bf00      	nop
 80179a2:	370c      	adds	r7, #12
 80179a4:	46bd      	mov	sp, r7
 80179a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179aa:	4770      	bx	lr
 80179ac:	20003844 	.word	0x20003844
 80179b0:	20003830 	.word	0x20003830

080179b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b088      	sub	sp, #32
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d10b      	bne.n	80179dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80179c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179c8:	f383 8811 	msr	BASEPRI, r3
 80179cc:	f3bf 8f6f 	isb	sy
 80179d0:	f3bf 8f4f 	dsb	sy
 80179d4:	613b      	str	r3, [r7, #16]
}
 80179d6:	bf00      	nop
 80179d8:	bf00      	nop
 80179da:	e7fd      	b.n	80179d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d10b      	bne.n	80179fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80179e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179e6:	f383 8811 	msr	BASEPRI, r3
 80179ea:	f3bf 8f6f 	isb	sy
 80179ee:	f3bf 8f4f 	dsb	sy
 80179f2:	60fb      	str	r3, [r7, #12]
}
 80179f4:	bf00      	nop
 80179f6:	bf00      	nop
 80179f8:	e7fd      	b.n	80179f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80179fa:	f000 ffd5 	bl	80189a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80179fe:	4b1d      	ldr	r3, [pc, #116]	@ (8017a74 <xTaskCheckForTimeOut+0xc0>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	685b      	ldr	r3, [r3, #4]
 8017a08:	69ba      	ldr	r2, [r7, #24]
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a16:	d102      	bne.n	8017a1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	61fb      	str	r3, [r7, #28]
 8017a1c:	e023      	b.n	8017a66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681a      	ldr	r2, [r3, #0]
 8017a22:	4b15      	ldr	r3, [pc, #84]	@ (8017a78 <xTaskCheckForTimeOut+0xc4>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	429a      	cmp	r2, r3
 8017a28:	d007      	beq.n	8017a3a <xTaskCheckForTimeOut+0x86>
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	69ba      	ldr	r2, [r7, #24]
 8017a30:	429a      	cmp	r2, r3
 8017a32:	d302      	bcc.n	8017a3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017a34:	2301      	movs	r3, #1
 8017a36:	61fb      	str	r3, [r7, #28]
 8017a38:	e015      	b.n	8017a66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	697a      	ldr	r2, [r7, #20]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d20b      	bcs.n	8017a5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017a44:	683b      	ldr	r3, [r7, #0]
 8017a46:	681a      	ldr	r2, [r3, #0]
 8017a48:	697b      	ldr	r3, [r7, #20]
 8017a4a:	1ad2      	subs	r2, r2, r3
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017a50:	6878      	ldr	r0, [r7, #4]
 8017a52:	f7ff ff99 	bl	8017988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017a56:	2300      	movs	r3, #0
 8017a58:	61fb      	str	r3, [r7, #28]
 8017a5a:	e004      	b.n	8017a66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017a62:	2301      	movs	r3, #1
 8017a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017a66:	f000 ffd1 	bl	8018a0c <vPortExitCritical>

	return xReturn;
 8017a6a:	69fb      	ldr	r3, [r7, #28]
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3720      	adds	r7, #32
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	20003830 	.word	0x20003830
 8017a78:	20003844 	.word	0x20003844

08017a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017a80:	4b03      	ldr	r3, [pc, #12]	@ (8017a90 <vTaskMissedYield+0x14>)
 8017a82:	2201      	movs	r2, #1
 8017a84:	601a      	str	r2, [r3, #0]
}
 8017a86:	bf00      	nop
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8e:	4770      	bx	lr
 8017a90:	20003840 	.word	0x20003840

08017a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017a9c:	f000 f852 	bl	8017b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017aa0:	4b06      	ldr	r3, [pc, #24]	@ (8017abc <prvIdleTask+0x28>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	2b01      	cmp	r3, #1
 8017aa6:	d9f9      	bls.n	8017a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017aa8:	4b05      	ldr	r3, [pc, #20]	@ (8017ac0 <prvIdleTask+0x2c>)
 8017aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017aae:	601a      	str	r2, [r3, #0]
 8017ab0:	f3bf 8f4f 	dsb	sy
 8017ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017ab8:	e7f0      	b.n	8017a9c <prvIdleTask+0x8>
 8017aba:	bf00      	nop
 8017abc:	20003690 	.word	0x20003690
 8017ac0:	e000ed04 	.word	0xe000ed04

08017ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017aca:	2300      	movs	r3, #0
 8017acc:	607b      	str	r3, [r7, #4]
 8017ace:	e00c      	b.n	8017aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017ad0:	687a      	ldr	r2, [r7, #4]
 8017ad2:	4613      	mov	r3, r2
 8017ad4:	009b      	lsls	r3, r3, #2
 8017ad6:	4413      	add	r3, r2
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	4a12      	ldr	r2, [pc, #72]	@ (8017b24 <prvInitialiseTaskLists+0x60>)
 8017adc:	4413      	add	r3, r2
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7fe fa68 	bl	8015fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	607b      	str	r3, [r7, #4]
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2b0e      	cmp	r3, #14
 8017aee:	d9ef      	bls.n	8017ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017af0:	480d      	ldr	r0, [pc, #52]	@ (8017b28 <prvInitialiseTaskLists+0x64>)
 8017af2:	f7fe fa5f 	bl	8015fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017af6:	480d      	ldr	r0, [pc, #52]	@ (8017b2c <prvInitialiseTaskLists+0x68>)
 8017af8:	f7fe fa5c 	bl	8015fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017afc:	480c      	ldr	r0, [pc, #48]	@ (8017b30 <prvInitialiseTaskLists+0x6c>)
 8017afe:	f7fe fa59 	bl	8015fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017b02:	480c      	ldr	r0, [pc, #48]	@ (8017b34 <prvInitialiseTaskLists+0x70>)
 8017b04:	f7fe fa56 	bl	8015fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017b08:	480b      	ldr	r0, [pc, #44]	@ (8017b38 <prvInitialiseTaskLists+0x74>)
 8017b0a:	f7fe fa53 	bl	8015fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8017b3c <prvInitialiseTaskLists+0x78>)
 8017b10:	4a05      	ldr	r2, [pc, #20]	@ (8017b28 <prvInitialiseTaskLists+0x64>)
 8017b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017b14:	4b0a      	ldr	r3, [pc, #40]	@ (8017b40 <prvInitialiseTaskLists+0x7c>)
 8017b16:	4a05      	ldr	r2, [pc, #20]	@ (8017b2c <prvInitialiseTaskLists+0x68>)
 8017b18:	601a      	str	r2, [r3, #0]
}
 8017b1a:	bf00      	nop
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	20003690 	.word	0x20003690
 8017b28:	200037bc 	.word	0x200037bc
 8017b2c:	200037d0 	.word	0x200037d0
 8017b30:	200037ec 	.word	0x200037ec
 8017b34:	20003800 	.word	0x20003800
 8017b38:	20003818 	.word	0x20003818
 8017b3c:	200037e4 	.word	0x200037e4
 8017b40:	200037e8 	.word	0x200037e8

08017b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b082      	sub	sp, #8
 8017b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017b4a:	e019      	b.n	8017b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017b4c:	f000 ff2c 	bl	80189a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b50:	4b10      	ldr	r3, [pc, #64]	@ (8017b94 <prvCheckTasksWaitingTermination+0x50>)
 8017b52:	68db      	ldr	r3, [r3, #12]
 8017b54:	68db      	ldr	r3, [r3, #12]
 8017b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	3304      	adds	r3, #4
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7fe fab3 	bl	80160c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017b62:	4b0d      	ldr	r3, [pc, #52]	@ (8017b98 <prvCheckTasksWaitingTermination+0x54>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	3b01      	subs	r3, #1
 8017b68:	4a0b      	ldr	r2, [pc, #44]	@ (8017b98 <prvCheckTasksWaitingTermination+0x54>)
 8017b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8017b9c <prvCheckTasksWaitingTermination+0x58>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	3b01      	subs	r3, #1
 8017b72:	4a0a      	ldr	r2, [pc, #40]	@ (8017b9c <prvCheckTasksWaitingTermination+0x58>)
 8017b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017b76:	f000 ff49 	bl	8018a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f000 f810 	bl	8017ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017b80:	4b06      	ldr	r3, [pc, #24]	@ (8017b9c <prvCheckTasksWaitingTermination+0x58>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d1e1      	bne.n	8017b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017b88:	bf00      	nop
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	20003800 	.word	0x20003800
 8017b98:	2000382c 	.word	0x2000382c
 8017b9c:	20003814 	.word	0x20003814

08017ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	3358      	adds	r3, #88	@ 0x58
 8017bac:	4618      	mov	r0, r3
 8017bae:	f002 f8ab 	bl	8019d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d108      	bne.n	8017bce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f001 f8e1 	bl	8018d88 <vPortFree>
				vPortFree( pxTCB );
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f001 f8de 	bl	8018d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017bcc:	e019      	b.n	8017c02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 8017bd4:	2b01      	cmp	r3, #1
 8017bd6:	d103      	bne.n	8017be0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017bd8:	6878      	ldr	r0, [r7, #4]
 8017bda:	f001 f8d5 	bl	8018d88 <vPortFree>
	}
 8017bde:	e010      	b.n	8017c02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 8017be6:	2b02      	cmp	r3, #2
 8017be8:	d00b      	beq.n	8017c02 <prvDeleteTCB+0x62>
	__asm volatile
 8017bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bee:	f383 8811 	msr	BASEPRI, r3
 8017bf2:	f3bf 8f6f 	isb	sy
 8017bf6:	f3bf 8f4f 	dsb	sy
 8017bfa:	60fb      	str	r3, [r7, #12]
}
 8017bfc:	bf00      	nop
 8017bfe:	bf00      	nop
 8017c00:	e7fd      	b.n	8017bfe <prvDeleteTCB+0x5e>
	}
 8017c02:	bf00      	nop
 8017c04:	3710      	adds	r7, #16
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
	...

08017c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017c0c:	b480      	push	{r7}
 8017c0e:	b083      	sub	sp, #12
 8017c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c12:	4b0c      	ldr	r3, [pc, #48]	@ (8017c44 <prvResetNextTaskUnblockTime+0x38>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d104      	bne.n	8017c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8017c48 <prvResetNextTaskUnblockTime+0x3c>)
 8017c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017c24:	e008      	b.n	8017c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c26:	4b07      	ldr	r3, [pc, #28]	@ (8017c44 <prvResetNextTaskUnblockTime+0x38>)
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	68db      	ldr	r3, [r3, #12]
 8017c2c:	68db      	ldr	r3, [r3, #12]
 8017c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	4a04      	ldr	r2, [pc, #16]	@ (8017c48 <prvResetNextTaskUnblockTime+0x3c>)
 8017c36:	6013      	str	r3, [r2, #0]
}
 8017c38:	bf00      	nop
 8017c3a:	370c      	adds	r7, #12
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c42:	4770      	bx	lr
 8017c44:	200037e4 	.word	0x200037e4
 8017c48:	2000384c 	.word	0x2000384c

08017c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017c4c:	b480      	push	{r7}
 8017c4e:	b083      	sub	sp, #12
 8017c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017c52:	4b0b      	ldr	r3, [pc, #44]	@ (8017c80 <xTaskGetSchedulerState+0x34>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d102      	bne.n	8017c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	607b      	str	r3, [r7, #4]
 8017c5e:	e008      	b.n	8017c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c60:	4b08      	ldr	r3, [pc, #32]	@ (8017c84 <xTaskGetSchedulerState+0x38>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d102      	bne.n	8017c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017c68:	2302      	movs	r3, #2
 8017c6a:	607b      	str	r3, [r7, #4]
 8017c6c:	e001      	b.n	8017c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017c72:	687b      	ldr	r3, [r7, #4]
	}
 8017c74:	4618      	mov	r0, r3
 8017c76:	370c      	adds	r7, #12
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr
 8017c80:	20003838 	.word	0x20003838
 8017c84:	20003854 	.word	0x20003854

08017c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b086      	sub	sp, #24
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017c94:	2300      	movs	r3, #0
 8017c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d070      	beq.n	8017d80 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8017d8c <xTaskPriorityDisinherit+0x104>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	693a      	ldr	r2, [r7, #16]
 8017ca4:	429a      	cmp	r2, r3
 8017ca6:	d00b      	beq.n	8017cc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8017ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	60fb      	str	r3, [r7, #12]
}
 8017cba:	bf00      	nop
 8017cbc:	bf00      	nop
 8017cbe:	e7fd      	b.n	8017cbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d10b      	bne.n	8017ce0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8017cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ccc:	f383 8811 	msr	BASEPRI, r3
 8017cd0:	f3bf 8f6f 	isb	sy
 8017cd4:	f3bf 8f4f 	dsb	sy
 8017cd8:	60bb      	str	r3, [r7, #8]
}
 8017cda:	bf00      	nop
 8017cdc:	bf00      	nop
 8017cde:	e7fd      	b.n	8017cdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8017ce0:	693b      	ldr	r3, [r7, #16]
 8017ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ce4:	1e5a      	subs	r2, r3, #1
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d044      	beq.n	8017d80 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017cf6:	693b      	ldr	r3, [r7, #16]
 8017cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d140      	bne.n	8017d80 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017cfe:	693b      	ldr	r3, [r7, #16]
 8017d00:	3304      	adds	r3, #4
 8017d02:	4618      	mov	r0, r3
 8017d04:	f7fe f9e0 	bl	80160c8 <uxListRemove>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d115      	bne.n	8017d3a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d12:	491f      	ldr	r1, [pc, #124]	@ (8017d90 <xTaskPriorityDisinherit+0x108>)
 8017d14:	4613      	mov	r3, r2
 8017d16:	009b      	lsls	r3, r3, #2
 8017d18:	4413      	add	r3, r2
 8017d1a:	009b      	lsls	r3, r3, #2
 8017d1c:	440b      	add	r3, r1
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d10a      	bne.n	8017d3a <xTaskPriorityDisinherit+0xb2>
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d28:	2201      	movs	r2, #1
 8017d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8017d2e:	43da      	mvns	r2, r3
 8017d30:	4b18      	ldr	r3, [pc, #96]	@ (8017d94 <xTaskPriorityDisinherit+0x10c>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	4013      	ands	r3, r2
 8017d36:	4a17      	ldr	r2, [pc, #92]	@ (8017d94 <xTaskPriorityDisinherit+0x10c>)
 8017d38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d46:	f1c3 020f 	rsb	r2, r3, #15
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d52:	2201      	movs	r2, #1
 8017d54:	409a      	lsls	r2, r3
 8017d56:	4b0f      	ldr	r3, [pc, #60]	@ (8017d94 <xTaskPriorityDisinherit+0x10c>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	4313      	orrs	r3, r2
 8017d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8017d94 <xTaskPriorityDisinherit+0x10c>)
 8017d5e:	6013      	str	r3, [r2, #0]
 8017d60:	693b      	ldr	r3, [r7, #16]
 8017d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d64:	4613      	mov	r3, r2
 8017d66:	009b      	lsls	r3, r3, #2
 8017d68:	4413      	add	r3, r2
 8017d6a:	009b      	lsls	r3, r3, #2
 8017d6c:	4a08      	ldr	r2, [pc, #32]	@ (8017d90 <xTaskPriorityDisinherit+0x108>)
 8017d6e:	441a      	add	r2, r3
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	3304      	adds	r3, #4
 8017d74:	4619      	mov	r1, r3
 8017d76:	4610      	mov	r0, r2
 8017d78:	f7fe f949 	bl	801600e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017d80:	697b      	ldr	r3, [r7, #20]
	}
 8017d82:	4618      	mov	r0, r3
 8017d84:	3718      	adds	r7, #24
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	2000368c 	.word	0x2000368c
 8017d90:	20003690 	.word	0x20003690
 8017d94:	20003834 	.word	0x20003834

08017d98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8017d98:	b480      	push	{r7}
 8017d9a:	b083      	sub	sp, #12
 8017d9c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8017d9e:	4b09      	ldr	r3, [pc, #36]	@ (8017dc4 <uxTaskResetEventItemValue+0x2c>)
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	699b      	ldr	r3, [r3, #24]
 8017da4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017da6:	4b07      	ldr	r3, [pc, #28]	@ (8017dc4 <uxTaskResetEventItemValue+0x2c>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dac:	4b05      	ldr	r3, [pc, #20]	@ (8017dc4 <uxTaskResetEventItemValue+0x2c>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	f1c2 020f 	rsb	r2, r2, #15
 8017db4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8017db6:	687b      	ldr	r3, [r7, #4]
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	370c      	adds	r7, #12
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc2:	4770      	bx	lr
 8017dc4:	2000368c 	.word	0x2000368c

08017dc8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b084      	sub	sp, #16
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
 8017dd0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8017dd2:	f000 fde9 	bl	80189a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8017dd6:	4b20      	ldr	r3, [pc, #128]	@ (8017e58 <ulTaskNotifyTake+0x90>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d113      	bne.n	8017e0a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017de2:	4b1d      	ldr	r3, [pc, #116]	@ (8017e58 <ulTaskNotifyTake+0x90>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2201      	movs	r2, #1
 8017de8:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

				if( xTicksToWait > ( TickType_t ) 0 )
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d00b      	beq.n	8017e0a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017df2:	2101      	movs	r1, #1
 8017df4:	6838      	ldr	r0, [r7, #0]
 8017df6:	f000 f8c9 	bl	8017f8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017dfa:	4b18      	ldr	r3, [pc, #96]	@ (8017e5c <ulTaskNotifyTake+0x94>)
 8017dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e00:	601a      	str	r2, [r3, #0]
 8017e02:	f3bf 8f4f 	dsb	sy
 8017e06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017e0a:	f000 fdff 	bl	8018a0c <vPortExitCritical>

		taskENTER_CRITICAL();
 8017e0e:	f000 fdcb 	bl	80189a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8017e12:	4b11      	ldr	r3, [pc, #68]	@ (8017e58 <ulTaskNotifyTake+0x90>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8017e1a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00e      	beq.n	8017e40 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d005      	beq.n	8017e34 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017e28:	4b0b      	ldr	r3, [pc, #44]	@ (8017e58 <ulTaskNotifyTake+0x90>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 8017e32:	e005      	b.n	8017e40 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8017e34:	4b08      	ldr	r3, [pc, #32]	@ (8017e58 <ulTaskNotifyTake+0x90>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	68fa      	ldr	r2, [r7, #12]
 8017e3a:	3a01      	subs	r2, #1
 8017e3c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017e40:	4b05      	ldr	r3, [pc, #20]	@ (8017e58 <ulTaskNotifyTake+0x90>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2200      	movs	r2, #0
 8017e46:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
		}
		taskEXIT_CRITICAL();
 8017e4a:	f000 fddf 	bl	8018a0c <vPortExitCritical>

		return ulReturn;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8017e50:	4618      	mov	r0, r3
 8017e52:	3710      	adds	r7, #16
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}
 8017e58:	2000368c 	.word	0x2000368c
 8017e5c:	e000ed04 	.word	0xe000ed04

08017e60 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	@ 0x28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d10b      	bne.n	8017e88 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8017e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e74:	f383 8811 	msr	BASEPRI, r3
 8017e78:	f3bf 8f6f 	isb	sy
 8017e7c:	f3bf 8f4f 	dsb	sy
 8017e80:	61bb      	str	r3, [r7, #24]
}
 8017e82:	bf00      	nop
 8017e84:	bf00      	nop
 8017e86:	e7fd      	b.n	8017e84 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017e88:	f000 fe6e 	bl	8018b68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8017e90:	f3ef 8211 	mrs	r2, BASEPRI
 8017e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e98:	f383 8811 	msr	BASEPRI, r3
 8017e9c:	f3bf 8f6f 	isb	sy
 8017ea0:	f3bf 8f4f 	dsb	sy
 8017ea4:	617a      	str	r2, [r7, #20]
 8017ea6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017ea8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017eaa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eae:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8017eb2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eb6:	2202      	movs	r2, #2
 8017eb8:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8017ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ebe:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8017ec2:	1c5a      	adds	r2, r3, #1
 8017ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ec6:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017eca:	7ffb      	ldrb	r3, [r7, #31]
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d146      	bne.n	8017f5e <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d00b      	beq.n	8017ef0 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8017ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017edc:	f383 8811 	msr	BASEPRI, r3
 8017ee0:	f3bf 8f6f 	isb	sy
 8017ee4:	f3bf 8f4f 	dsb	sy
 8017ee8:	60fb      	str	r3, [r7, #12]
}
 8017eea:	bf00      	nop
 8017eec:	bf00      	nop
 8017eee:	e7fd      	b.n	8017eec <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ef0:	4b20      	ldr	r3, [pc, #128]	@ (8017f74 <vTaskNotifyGiveFromISR+0x114>)
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d11c      	bne.n	8017f32 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017efa:	3304      	adds	r3, #4
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7fe f8e3 	bl	80160c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f06:	2201      	movs	r2, #1
 8017f08:	409a      	lsls	r2, r3
 8017f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8017f78 <vTaskNotifyGiveFromISR+0x118>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	4313      	orrs	r3, r2
 8017f10:	4a19      	ldr	r2, [pc, #100]	@ (8017f78 <vTaskNotifyGiveFromISR+0x118>)
 8017f12:	6013      	str	r3, [r2, #0]
 8017f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017f18:	4613      	mov	r3, r2
 8017f1a:	009b      	lsls	r3, r3, #2
 8017f1c:	4413      	add	r3, r2
 8017f1e:	009b      	lsls	r3, r3, #2
 8017f20:	4a16      	ldr	r2, [pc, #88]	@ (8017f7c <vTaskNotifyGiveFromISR+0x11c>)
 8017f22:	441a      	add	r2, r3
 8017f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f26:	3304      	adds	r3, #4
 8017f28:	4619      	mov	r1, r3
 8017f2a:	4610      	mov	r0, r2
 8017f2c:	f7fe f86f 	bl	801600e <vListInsertEnd>
 8017f30:	e005      	b.n	8017f3e <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f34:	3318      	adds	r3, #24
 8017f36:	4619      	mov	r1, r3
 8017f38:	4811      	ldr	r0, [pc, #68]	@ (8017f80 <vTaskNotifyGiveFromISR+0x120>)
 8017f3a:	f7fe f868 	bl	801600e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017f42:	4b10      	ldr	r3, [pc, #64]	@ (8017f84 <vTaskNotifyGiveFromISR+0x124>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f48:	429a      	cmp	r2, r3
 8017f4a:	d908      	bls.n	8017f5e <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d002      	beq.n	8017f58 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	2201      	movs	r2, #1
 8017f56:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017f58:	4b0b      	ldr	r3, [pc, #44]	@ (8017f88 <vTaskNotifyGiveFromISR+0x128>)
 8017f5a:	2201      	movs	r2, #1
 8017f5c:	601a      	str	r2, [r3, #0]
 8017f5e:	6a3b      	ldr	r3, [r7, #32]
 8017f60:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	f383 8811 	msr	BASEPRI, r3
}
 8017f68:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8017f6a:	bf00      	nop
 8017f6c:	3728      	adds	r7, #40	@ 0x28
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	20003854 	.word	0x20003854
 8017f78:	20003834 	.word	0x20003834
 8017f7c:	20003690 	.word	0x20003690
 8017f80:	200037ec 	.word	0x200037ec
 8017f84:	2000368c 	.word	0x2000368c
 8017f88:	20003840 	.word	0x20003840

08017f8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b084      	sub	sp, #16
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017f96:	4b29      	ldr	r3, [pc, #164]	@ (801803c <prvAddCurrentTaskToDelayedList+0xb0>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f9c:	4b28      	ldr	r3, [pc, #160]	@ (8018040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	3304      	adds	r3, #4
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7fe f890 	bl	80160c8 <uxListRemove>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d10b      	bne.n	8017fc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017fae:	4b24      	ldr	r3, [pc, #144]	@ (8018040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fb4:	2201      	movs	r2, #1
 8017fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8017fba:	43da      	mvns	r2, r3
 8017fbc:	4b21      	ldr	r3, [pc, #132]	@ (8018044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	4013      	ands	r3, r2
 8017fc2:	4a20      	ldr	r2, [pc, #128]	@ (8018044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017fc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fcc:	d10a      	bne.n	8017fe4 <prvAddCurrentTaskToDelayedList+0x58>
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d007      	beq.n	8017fe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8018040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	3304      	adds	r3, #4
 8017fda:	4619      	mov	r1, r3
 8017fdc:	481a      	ldr	r0, [pc, #104]	@ (8018048 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017fde:	f7fe f816 	bl	801600e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017fe2:	e026      	b.n	8018032 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017fe4:	68fa      	ldr	r2, [r7, #12]
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	4413      	add	r3, r2
 8017fea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017fec:	4b14      	ldr	r3, [pc, #80]	@ (8018040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	68ba      	ldr	r2, [r7, #8]
 8017ff2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017ff4:	68ba      	ldr	r2, [r7, #8]
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d209      	bcs.n	8018010 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017ffc:	4b13      	ldr	r3, [pc, #76]	@ (801804c <prvAddCurrentTaskToDelayedList+0xc0>)
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	4b0f      	ldr	r3, [pc, #60]	@ (8018040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	3304      	adds	r3, #4
 8018006:	4619      	mov	r1, r3
 8018008:	4610      	mov	r0, r2
 801800a:	f7fe f824 	bl	8016056 <vListInsert>
}
 801800e:	e010      	b.n	8018032 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018010:	4b0f      	ldr	r3, [pc, #60]	@ (8018050 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018012:	681a      	ldr	r2, [r3, #0]
 8018014:	4b0a      	ldr	r3, [pc, #40]	@ (8018040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	3304      	adds	r3, #4
 801801a:	4619      	mov	r1, r3
 801801c:	4610      	mov	r0, r2
 801801e:	f7fe f81a 	bl	8016056 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018022:	4b0c      	ldr	r3, [pc, #48]	@ (8018054 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	68ba      	ldr	r2, [r7, #8]
 8018028:	429a      	cmp	r2, r3
 801802a:	d202      	bcs.n	8018032 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801802c:	4a09      	ldr	r2, [pc, #36]	@ (8018054 <prvAddCurrentTaskToDelayedList+0xc8>)
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	6013      	str	r3, [r2, #0]
}
 8018032:	bf00      	nop
 8018034:	3710      	adds	r7, #16
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop
 801803c:	20003830 	.word	0x20003830
 8018040:	2000368c 	.word	0x2000368c
 8018044:	20003834 	.word	0x20003834
 8018048:	20003818 	.word	0x20003818
 801804c:	200037e8 	.word	0x200037e8
 8018050:	200037e4 	.word	0x200037e4
 8018054:	2000384c 	.word	0x2000384c

08018058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b08a      	sub	sp, #40	@ 0x28
 801805c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801805e:	2300      	movs	r3, #0
 8018060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018062:	f000 fb13 	bl	801868c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018066:	4b1d      	ldr	r3, [pc, #116]	@ (80180dc <xTimerCreateTimerTask+0x84>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d021      	beq.n	80180b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801806e:	2300      	movs	r3, #0
 8018070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018072:	2300      	movs	r3, #0
 8018074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018076:	1d3a      	adds	r2, r7, #4
 8018078:	f107 0108 	add.w	r1, r7, #8
 801807c:	f107 030c 	add.w	r3, r7, #12
 8018080:	4618      	mov	r0, r3
 8018082:	f7eb f88d 	bl	80031a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018086:	6879      	ldr	r1, [r7, #4]
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	68fa      	ldr	r2, [r7, #12]
 801808c:	9202      	str	r2, [sp, #8]
 801808e:	9301      	str	r3, [sp, #4]
 8018090:	2302      	movs	r3, #2
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	2300      	movs	r3, #0
 8018096:	460a      	mov	r2, r1
 8018098:	4911      	ldr	r1, [pc, #68]	@ (80180e0 <xTimerCreateTimerTask+0x88>)
 801809a:	4812      	ldr	r0, [pc, #72]	@ (80180e4 <xTimerCreateTimerTask+0x8c>)
 801809c:	f7fe fe04 	bl	8016ca8 <xTaskCreateStatic>
 80180a0:	4603      	mov	r3, r0
 80180a2:	4a11      	ldr	r2, [pc, #68]	@ (80180e8 <xTimerCreateTimerTask+0x90>)
 80180a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80180a6:	4b10      	ldr	r3, [pc, #64]	@ (80180e8 <xTimerCreateTimerTask+0x90>)
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d001      	beq.n	80180b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80180ae:	2301      	movs	r3, #1
 80180b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d10b      	bne.n	80180d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80180b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180bc:	f383 8811 	msr	BASEPRI, r3
 80180c0:	f3bf 8f6f 	isb	sy
 80180c4:	f3bf 8f4f 	dsb	sy
 80180c8:	613b      	str	r3, [r7, #16]
}
 80180ca:	bf00      	nop
 80180cc:	bf00      	nop
 80180ce:	e7fd      	b.n	80180cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80180d0:	697b      	ldr	r3, [r7, #20]
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3718      	adds	r7, #24
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}
 80180da:	bf00      	nop
 80180dc:	20003890 	.word	0x20003890
 80180e0:	080202c0 	.word	0x080202c0
 80180e4:	08018225 	.word	0x08018225
 80180e8:	20003894 	.word	0x20003894

080180ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b08a      	sub	sp, #40	@ 0x28
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	60b9      	str	r1, [r7, #8]
 80180f6:	607a      	str	r2, [r7, #4]
 80180f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80180fa:	2300      	movs	r3, #0
 80180fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d10b      	bne.n	801811c <xTimerGenericCommand+0x30>
	__asm volatile
 8018104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018108:	f383 8811 	msr	BASEPRI, r3
 801810c:	f3bf 8f6f 	isb	sy
 8018110:	f3bf 8f4f 	dsb	sy
 8018114:	623b      	str	r3, [r7, #32]
}
 8018116:	bf00      	nop
 8018118:	bf00      	nop
 801811a:	e7fd      	b.n	8018118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801811c:	4b19      	ldr	r3, [pc, #100]	@ (8018184 <xTimerGenericCommand+0x98>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d02a      	beq.n	801817a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018130:	68bb      	ldr	r3, [r7, #8]
 8018132:	2b05      	cmp	r3, #5
 8018134:	dc18      	bgt.n	8018168 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018136:	f7ff fd89 	bl	8017c4c <xTaskGetSchedulerState>
 801813a:	4603      	mov	r3, r0
 801813c:	2b02      	cmp	r3, #2
 801813e:	d109      	bne.n	8018154 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018140:	4b10      	ldr	r3, [pc, #64]	@ (8018184 <xTimerGenericCommand+0x98>)
 8018142:	6818      	ldr	r0, [r3, #0]
 8018144:	f107 0110 	add.w	r1, r7, #16
 8018148:	2300      	movs	r3, #0
 801814a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801814c:	f7fe f92c 	bl	80163a8 <xQueueGenericSend>
 8018150:	6278      	str	r0, [r7, #36]	@ 0x24
 8018152:	e012      	b.n	801817a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018154:	4b0b      	ldr	r3, [pc, #44]	@ (8018184 <xTimerGenericCommand+0x98>)
 8018156:	6818      	ldr	r0, [r3, #0]
 8018158:	f107 0110 	add.w	r1, r7, #16
 801815c:	2300      	movs	r3, #0
 801815e:	2200      	movs	r2, #0
 8018160:	f7fe f922 	bl	80163a8 <xQueueGenericSend>
 8018164:	6278      	str	r0, [r7, #36]	@ 0x24
 8018166:	e008      	b.n	801817a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018168:	4b06      	ldr	r3, [pc, #24]	@ (8018184 <xTimerGenericCommand+0x98>)
 801816a:	6818      	ldr	r0, [r3, #0]
 801816c:	f107 0110 	add.w	r1, r7, #16
 8018170:	2300      	movs	r3, #0
 8018172:	683a      	ldr	r2, [r7, #0]
 8018174:	f7fe fa1a 	bl	80165ac <xQueueGenericSendFromISR>
 8018178:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801817c:	4618      	mov	r0, r3
 801817e:	3728      	adds	r7, #40	@ 0x28
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	20003890 	.word	0x20003890

08018188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b088      	sub	sp, #32
 801818c:	af02      	add	r7, sp, #8
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018192:	4b23      	ldr	r3, [pc, #140]	@ (8018220 <prvProcessExpiredTimer+0x98>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	68db      	ldr	r3, [r3, #12]
 8018198:	68db      	ldr	r3, [r3, #12]
 801819a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801819c:	697b      	ldr	r3, [r7, #20]
 801819e:	3304      	adds	r3, #4
 80181a0:	4618      	mov	r0, r3
 80181a2:	f7fd ff91 	bl	80160c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80181ac:	f003 0304 	and.w	r3, r3, #4
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d023      	beq.n	80181fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	699a      	ldr	r2, [r3, #24]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	18d1      	adds	r1, r2, r3
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	683a      	ldr	r2, [r7, #0]
 80181c0:	6978      	ldr	r0, [r7, #20]
 80181c2:	f000 f8d5 	bl	8018370 <prvInsertTimerInActiveList>
 80181c6:	4603      	mov	r3, r0
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d020      	beq.n	801820e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80181cc:	2300      	movs	r3, #0
 80181ce:	9300      	str	r3, [sp, #0]
 80181d0:	2300      	movs	r3, #0
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	2100      	movs	r1, #0
 80181d6:	6978      	ldr	r0, [r7, #20]
 80181d8:	f7ff ff88 	bl	80180ec <xTimerGenericCommand>
 80181dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80181de:	693b      	ldr	r3, [r7, #16]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d114      	bne.n	801820e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80181e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181e8:	f383 8811 	msr	BASEPRI, r3
 80181ec:	f3bf 8f6f 	isb	sy
 80181f0:	f3bf 8f4f 	dsb	sy
 80181f4:	60fb      	str	r3, [r7, #12]
}
 80181f6:	bf00      	nop
 80181f8:	bf00      	nop
 80181fa:	e7fd      	b.n	80181f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018202:	f023 0301 	bic.w	r3, r3, #1
 8018206:	b2da      	uxtb	r2, r3
 8018208:	697b      	ldr	r3, [r7, #20]
 801820a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801820e:	697b      	ldr	r3, [r7, #20]
 8018210:	6a1b      	ldr	r3, [r3, #32]
 8018212:	6978      	ldr	r0, [r7, #20]
 8018214:	4798      	blx	r3
}
 8018216:	bf00      	nop
 8018218:	3718      	adds	r7, #24
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	20003888 	.word	0x20003888

08018224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b084      	sub	sp, #16
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801822c:	f107 0308 	add.w	r3, r7, #8
 8018230:	4618      	mov	r0, r3
 8018232:	f000 f859 	bl	80182e8 <prvGetNextExpireTime>
 8018236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	4619      	mov	r1, r3
 801823c:	68f8      	ldr	r0, [r7, #12]
 801823e:	f000 f805 	bl	801824c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018242:	f000 f8d7 	bl	80183f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018246:	bf00      	nop
 8018248:	e7f0      	b.n	801822c <prvTimerTask+0x8>
	...

0801824c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b084      	sub	sp, #16
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
 8018254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018256:	f7ff f839 	bl	80172cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801825a:	f107 0308 	add.w	r3, r7, #8
 801825e:	4618      	mov	r0, r3
 8018260:	f000 f866 	bl	8018330 <prvSampleTimeNow>
 8018264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018266:	68bb      	ldr	r3, [r7, #8]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d130      	bne.n	80182ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801826c:	683b      	ldr	r3, [r7, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d10a      	bne.n	8018288 <prvProcessTimerOrBlockTask+0x3c>
 8018272:	687a      	ldr	r2, [r7, #4]
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	429a      	cmp	r2, r3
 8018278:	d806      	bhi.n	8018288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801827a:	f7ff f835 	bl	80172e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801827e:	68f9      	ldr	r1, [r7, #12]
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	f7ff ff81 	bl	8018188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018286:	e024      	b.n	80182d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d008      	beq.n	80182a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801828e:	4b13      	ldr	r3, [pc, #76]	@ (80182dc <prvProcessTimerOrBlockTask+0x90>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d101      	bne.n	801829c <prvProcessTimerOrBlockTask+0x50>
 8018298:	2301      	movs	r3, #1
 801829a:	e000      	b.n	801829e <prvProcessTimerOrBlockTask+0x52>
 801829c:	2300      	movs	r3, #0
 801829e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80182a0:	4b0f      	ldr	r3, [pc, #60]	@ (80182e0 <prvProcessTimerOrBlockTask+0x94>)
 80182a2:	6818      	ldr	r0, [r3, #0]
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	1ad3      	subs	r3, r2, r3
 80182aa:	683a      	ldr	r2, [r7, #0]
 80182ac:	4619      	mov	r1, r3
 80182ae:	f7fe fcc7 	bl	8016c40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80182b2:	f7ff f819 	bl	80172e8 <xTaskResumeAll>
 80182b6:	4603      	mov	r3, r0
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d10a      	bne.n	80182d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80182bc:	4b09      	ldr	r3, [pc, #36]	@ (80182e4 <prvProcessTimerOrBlockTask+0x98>)
 80182be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80182c2:	601a      	str	r2, [r3, #0]
 80182c4:	f3bf 8f4f 	dsb	sy
 80182c8:	f3bf 8f6f 	isb	sy
}
 80182cc:	e001      	b.n	80182d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80182ce:	f7ff f80b 	bl	80172e8 <xTaskResumeAll>
}
 80182d2:	bf00      	nop
 80182d4:	3710      	adds	r7, #16
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	2000388c 	.word	0x2000388c
 80182e0:	20003890 	.word	0x20003890
 80182e4:	e000ed04 	.word	0xe000ed04

080182e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80182e8:	b480      	push	{r7}
 80182ea:	b085      	sub	sp, #20
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80182f0:	4b0e      	ldr	r3, [pc, #56]	@ (801832c <prvGetNextExpireTime+0x44>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d101      	bne.n	80182fe <prvGetNextExpireTime+0x16>
 80182fa:	2201      	movs	r2, #1
 80182fc:	e000      	b.n	8018300 <prvGetNextExpireTime+0x18>
 80182fe:	2200      	movs	r2, #0
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d105      	bne.n	8018318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801830c:	4b07      	ldr	r3, [pc, #28]	@ (801832c <prvGetNextExpireTime+0x44>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	68db      	ldr	r3, [r3, #12]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	60fb      	str	r3, [r7, #12]
 8018316:	e001      	b.n	801831c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018318:	2300      	movs	r3, #0
 801831a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801831c:	68fb      	ldr	r3, [r7, #12]
}
 801831e:	4618      	mov	r0, r3
 8018320:	3714      	adds	r7, #20
 8018322:	46bd      	mov	sp, r7
 8018324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018328:	4770      	bx	lr
 801832a:	bf00      	nop
 801832c:	20003888 	.word	0x20003888

08018330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b084      	sub	sp, #16
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018338:	f7ff f874 	bl	8017424 <xTaskGetTickCount>
 801833c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801833e:	4b0b      	ldr	r3, [pc, #44]	@ (801836c <prvSampleTimeNow+0x3c>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	68fa      	ldr	r2, [r7, #12]
 8018344:	429a      	cmp	r2, r3
 8018346:	d205      	bcs.n	8018354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018348:	f000 f93a 	bl	80185c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2201      	movs	r2, #1
 8018350:	601a      	str	r2, [r3, #0]
 8018352:	e002      	b.n	801835a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2200      	movs	r2, #0
 8018358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801835a:	4a04      	ldr	r2, [pc, #16]	@ (801836c <prvSampleTimeNow+0x3c>)
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018360:	68fb      	ldr	r3, [r7, #12]
}
 8018362:	4618      	mov	r0, r3
 8018364:	3710      	adds	r7, #16
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	20003898 	.word	0x20003898

08018370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b086      	sub	sp, #24
 8018374:	af00      	add	r7, sp, #0
 8018376:	60f8      	str	r0, [r7, #12]
 8018378:	60b9      	str	r1, [r7, #8]
 801837a:	607a      	str	r2, [r7, #4]
 801837c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801837e:	2300      	movs	r3, #0
 8018380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	68ba      	ldr	r2, [r7, #8]
 8018386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	68fa      	ldr	r2, [r7, #12]
 801838c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801838e:	68ba      	ldr	r2, [r7, #8]
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	429a      	cmp	r2, r3
 8018394:	d812      	bhi.n	80183bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018396:	687a      	ldr	r2, [r7, #4]
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	1ad2      	subs	r2, r2, r3
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	699b      	ldr	r3, [r3, #24]
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d302      	bcc.n	80183aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80183a4:	2301      	movs	r3, #1
 80183a6:	617b      	str	r3, [r7, #20]
 80183a8:	e01b      	b.n	80183e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80183aa:	4b10      	ldr	r3, [pc, #64]	@ (80183ec <prvInsertTimerInActiveList+0x7c>)
 80183ac:	681a      	ldr	r2, [r3, #0]
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	3304      	adds	r3, #4
 80183b2:	4619      	mov	r1, r3
 80183b4:	4610      	mov	r0, r2
 80183b6:	f7fd fe4e 	bl	8016056 <vListInsert>
 80183ba:	e012      	b.n	80183e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	683b      	ldr	r3, [r7, #0]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d206      	bcs.n	80183d2 <prvInsertTimerInActiveList+0x62>
 80183c4:	68ba      	ldr	r2, [r7, #8]
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d302      	bcc.n	80183d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80183cc:	2301      	movs	r3, #1
 80183ce:	617b      	str	r3, [r7, #20]
 80183d0:	e007      	b.n	80183e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80183d2:	4b07      	ldr	r3, [pc, #28]	@ (80183f0 <prvInsertTimerInActiveList+0x80>)
 80183d4:	681a      	ldr	r2, [r3, #0]
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	3304      	adds	r3, #4
 80183da:	4619      	mov	r1, r3
 80183dc:	4610      	mov	r0, r2
 80183de:	f7fd fe3a 	bl	8016056 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80183e2:	697b      	ldr	r3, [r7, #20]
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3718      	adds	r7, #24
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	2000388c 	.word	0x2000388c
 80183f0:	20003888 	.word	0x20003888

080183f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b08e      	sub	sp, #56	@ 0x38
 80183f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80183fa:	e0ce      	b.n	801859a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	da19      	bge.n	8018436 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018402:	1d3b      	adds	r3, r7, #4
 8018404:	3304      	adds	r3, #4
 8018406:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801840a:	2b00      	cmp	r3, #0
 801840c:	d10b      	bne.n	8018426 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018412:	f383 8811 	msr	BASEPRI, r3
 8018416:	f3bf 8f6f 	isb	sy
 801841a:	f3bf 8f4f 	dsb	sy
 801841e:	61fb      	str	r3, [r7, #28]
}
 8018420:	bf00      	nop
 8018422:	bf00      	nop
 8018424:	e7fd      	b.n	8018422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801842c:	6850      	ldr	r0, [r2, #4]
 801842e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018430:	6892      	ldr	r2, [r2, #8]
 8018432:	4611      	mov	r1, r2
 8018434:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	2b00      	cmp	r3, #0
 801843a:	f2c0 80ae 	blt.w	801859a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018444:	695b      	ldr	r3, [r3, #20]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d004      	beq.n	8018454 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801844c:	3304      	adds	r3, #4
 801844e:	4618      	mov	r0, r3
 8018450:	f7fd fe3a 	bl	80160c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018454:	463b      	mov	r3, r7
 8018456:	4618      	mov	r0, r3
 8018458:	f7ff ff6a 	bl	8018330 <prvSampleTimeNow>
 801845c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2b09      	cmp	r3, #9
 8018462:	f200 8097 	bhi.w	8018594 <prvProcessReceivedCommands+0x1a0>
 8018466:	a201      	add	r2, pc, #4	@ (adr r2, 801846c <prvProcessReceivedCommands+0x78>)
 8018468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801846c:	08018495 	.word	0x08018495
 8018470:	08018495 	.word	0x08018495
 8018474:	08018495 	.word	0x08018495
 8018478:	0801850b 	.word	0x0801850b
 801847c:	0801851f 	.word	0x0801851f
 8018480:	0801856b 	.word	0x0801856b
 8018484:	08018495 	.word	0x08018495
 8018488:	08018495 	.word	0x08018495
 801848c:	0801850b 	.word	0x0801850b
 8018490:	0801851f 	.word	0x0801851f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801849a:	f043 0301 	orr.w	r3, r3, #1
 801849e:	b2da      	uxtb	r2, r3
 80184a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80184a6:	68ba      	ldr	r2, [r7, #8]
 80184a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184aa:	699b      	ldr	r3, [r3, #24]
 80184ac:	18d1      	adds	r1, r2, r3
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80184b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80184b4:	f7ff ff5c 	bl	8018370 <prvInsertTimerInActiveList>
 80184b8:	4603      	mov	r3, r0
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d06c      	beq.n	8018598 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80184be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184c0:	6a1b      	ldr	r3, [r3, #32]
 80184c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80184c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80184c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80184cc:	f003 0304 	and.w	r3, r3, #4
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d061      	beq.n	8018598 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80184d4:	68ba      	ldr	r2, [r7, #8]
 80184d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184d8:	699b      	ldr	r3, [r3, #24]
 80184da:	441a      	add	r2, r3
 80184dc:	2300      	movs	r3, #0
 80184de:	9300      	str	r3, [sp, #0]
 80184e0:	2300      	movs	r3, #0
 80184e2:	2100      	movs	r1, #0
 80184e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80184e6:	f7ff fe01 	bl	80180ec <xTimerGenericCommand>
 80184ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80184ec:	6a3b      	ldr	r3, [r7, #32]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d152      	bne.n	8018598 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80184f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184f6:	f383 8811 	msr	BASEPRI, r3
 80184fa:	f3bf 8f6f 	isb	sy
 80184fe:	f3bf 8f4f 	dsb	sy
 8018502:	61bb      	str	r3, [r7, #24]
}
 8018504:	bf00      	nop
 8018506:	bf00      	nop
 8018508:	e7fd      	b.n	8018506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801850c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018510:	f023 0301 	bic.w	r3, r3, #1
 8018514:	b2da      	uxtb	r2, r3
 8018516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018518:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801851c:	e03d      	b.n	801859a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018524:	f043 0301 	orr.w	r3, r3, #1
 8018528:	b2da      	uxtb	r2, r3
 801852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801852c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018530:	68ba      	ldr	r2, [r7, #8]
 8018532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018534:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018538:	699b      	ldr	r3, [r3, #24]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d10b      	bne.n	8018556 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018542:	f383 8811 	msr	BASEPRI, r3
 8018546:	f3bf 8f6f 	isb	sy
 801854a:	f3bf 8f4f 	dsb	sy
 801854e:	617b      	str	r3, [r7, #20]
}
 8018550:	bf00      	nop
 8018552:	bf00      	nop
 8018554:	e7fd      	b.n	8018552 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018558:	699a      	ldr	r2, [r3, #24]
 801855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801855c:	18d1      	adds	r1, r2, r3
 801855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018564:	f7ff ff04 	bl	8018370 <prvInsertTimerInActiveList>
					break;
 8018568:	e017      	b.n	801859a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801856c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018570:	f003 0302 	and.w	r3, r3, #2
 8018574:	2b00      	cmp	r3, #0
 8018576:	d103      	bne.n	8018580 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8018578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801857a:	f000 fc05 	bl	8018d88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801857e:	e00c      	b.n	801859a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018586:	f023 0301 	bic.w	r3, r3, #1
 801858a:	b2da      	uxtb	r2, r3
 801858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801858e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018592:	e002      	b.n	801859a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8018594:	bf00      	nop
 8018596:	e000      	b.n	801859a <prvProcessReceivedCommands+0x1a6>
					break;
 8018598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801859a:	4b08      	ldr	r3, [pc, #32]	@ (80185bc <prvProcessReceivedCommands+0x1c8>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	1d39      	adds	r1, r7, #4
 80185a0:	2200      	movs	r2, #0
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7fe f930 	bl	8016808 <xQueueReceive>
 80185a8:	4603      	mov	r3, r0
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	f47f af26 	bne.w	80183fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80185b0:	bf00      	nop
 80185b2:	bf00      	nop
 80185b4:	3730      	adds	r7, #48	@ 0x30
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
 80185ba:	bf00      	nop
 80185bc:	20003890 	.word	0x20003890

080185c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b088      	sub	sp, #32
 80185c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80185c6:	e049      	b.n	801865c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80185c8:	4b2e      	ldr	r3, [pc, #184]	@ (8018684 <prvSwitchTimerLists+0xc4>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	68db      	ldr	r3, [r3, #12]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185d2:	4b2c      	ldr	r3, [pc, #176]	@ (8018684 <prvSwitchTimerLists+0xc4>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	68db      	ldr	r3, [r3, #12]
 80185d8:	68db      	ldr	r3, [r3, #12]
 80185da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	3304      	adds	r3, #4
 80185e0:	4618      	mov	r0, r3
 80185e2:	f7fd fd71 	bl	80160c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	6a1b      	ldr	r3, [r3, #32]
 80185ea:	68f8      	ldr	r0, [r7, #12]
 80185ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80185f4:	f003 0304 	and.w	r3, r3, #4
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d02f      	beq.n	801865c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	699b      	ldr	r3, [r3, #24]
 8018600:	693a      	ldr	r2, [r7, #16]
 8018602:	4413      	add	r3, r2
 8018604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018606:	68ba      	ldr	r2, [r7, #8]
 8018608:	693b      	ldr	r3, [r7, #16]
 801860a:	429a      	cmp	r2, r3
 801860c:	d90e      	bls.n	801862c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	68ba      	ldr	r2, [r7, #8]
 8018612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	68fa      	ldr	r2, [r7, #12]
 8018618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801861a:	4b1a      	ldr	r3, [pc, #104]	@ (8018684 <prvSwitchTimerLists+0xc4>)
 801861c:	681a      	ldr	r2, [r3, #0]
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	3304      	adds	r3, #4
 8018622:	4619      	mov	r1, r3
 8018624:	4610      	mov	r0, r2
 8018626:	f7fd fd16 	bl	8016056 <vListInsert>
 801862a:	e017      	b.n	801865c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801862c:	2300      	movs	r3, #0
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	2300      	movs	r3, #0
 8018632:	693a      	ldr	r2, [r7, #16]
 8018634:	2100      	movs	r1, #0
 8018636:	68f8      	ldr	r0, [r7, #12]
 8018638:	f7ff fd58 	bl	80180ec <xTimerGenericCommand>
 801863c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d10b      	bne.n	801865c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8018644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018648:	f383 8811 	msr	BASEPRI, r3
 801864c:	f3bf 8f6f 	isb	sy
 8018650:	f3bf 8f4f 	dsb	sy
 8018654:	603b      	str	r3, [r7, #0]
}
 8018656:	bf00      	nop
 8018658:	bf00      	nop
 801865a:	e7fd      	b.n	8018658 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801865c:	4b09      	ldr	r3, [pc, #36]	@ (8018684 <prvSwitchTimerLists+0xc4>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d1b0      	bne.n	80185c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018666:	4b07      	ldr	r3, [pc, #28]	@ (8018684 <prvSwitchTimerLists+0xc4>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801866c:	4b06      	ldr	r3, [pc, #24]	@ (8018688 <prvSwitchTimerLists+0xc8>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	4a04      	ldr	r2, [pc, #16]	@ (8018684 <prvSwitchTimerLists+0xc4>)
 8018672:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018674:	4a04      	ldr	r2, [pc, #16]	@ (8018688 <prvSwitchTimerLists+0xc8>)
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	6013      	str	r3, [r2, #0]
}
 801867a:	bf00      	nop
 801867c:	3718      	adds	r7, #24
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	20003888 	.word	0x20003888
 8018688:	2000388c 	.word	0x2000388c

0801868c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018692:	f000 f989 	bl	80189a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018696:	4b15      	ldr	r3, [pc, #84]	@ (80186ec <prvCheckForValidListAndQueue+0x60>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d120      	bne.n	80186e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801869e:	4814      	ldr	r0, [pc, #80]	@ (80186f0 <prvCheckForValidListAndQueue+0x64>)
 80186a0:	f7fd fc88 	bl	8015fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80186a4:	4813      	ldr	r0, [pc, #76]	@ (80186f4 <prvCheckForValidListAndQueue+0x68>)
 80186a6:	f7fd fc85 	bl	8015fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80186aa:	4b13      	ldr	r3, [pc, #76]	@ (80186f8 <prvCheckForValidListAndQueue+0x6c>)
 80186ac:	4a10      	ldr	r2, [pc, #64]	@ (80186f0 <prvCheckForValidListAndQueue+0x64>)
 80186ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80186b0:	4b12      	ldr	r3, [pc, #72]	@ (80186fc <prvCheckForValidListAndQueue+0x70>)
 80186b2:	4a10      	ldr	r2, [pc, #64]	@ (80186f4 <prvCheckForValidListAndQueue+0x68>)
 80186b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80186b6:	2300      	movs	r3, #0
 80186b8:	9300      	str	r3, [sp, #0]
 80186ba:	4b11      	ldr	r3, [pc, #68]	@ (8018700 <prvCheckForValidListAndQueue+0x74>)
 80186bc:	4a11      	ldr	r2, [pc, #68]	@ (8018704 <prvCheckForValidListAndQueue+0x78>)
 80186be:	2110      	movs	r1, #16
 80186c0:	200a      	movs	r0, #10
 80186c2:	f7fd fd95 	bl	80161f0 <xQueueGenericCreateStatic>
 80186c6:	4603      	mov	r3, r0
 80186c8:	4a08      	ldr	r2, [pc, #32]	@ (80186ec <prvCheckForValidListAndQueue+0x60>)
 80186ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80186cc:	4b07      	ldr	r3, [pc, #28]	@ (80186ec <prvCheckForValidListAndQueue+0x60>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d005      	beq.n	80186e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80186d4:	4b05      	ldr	r3, [pc, #20]	@ (80186ec <prvCheckForValidListAndQueue+0x60>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	490b      	ldr	r1, [pc, #44]	@ (8018708 <prvCheckForValidListAndQueue+0x7c>)
 80186da:	4618      	mov	r0, r3
 80186dc:	f7fe fa86 	bl	8016bec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80186e0:	f000 f994 	bl	8018a0c <vPortExitCritical>
}
 80186e4:	bf00      	nop
 80186e6:	46bd      	mov	sp, r7
 80186e8:	bd80      	pop	{r7, pc}
 80186ea:	bf00      	nop
 80186ec:	20003890 	.word	0x20003890
 80186f0:	20003860 	.word	0x20003860
 80186f4:	20003874 	.word	0x20003874
 80186f8:	20003888 	.word	0x20003888
 80186fc:	2000388c 	.word	0x2000388c
 8018700:	2000393c 	.word	0x2000393c
 8018704:	2000389c 	.word	0x2000389c
 8018708:	080202c8 	.word	0x080202c8

0801870c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801870c:	b580      	push	{r7, lr}
 801870e:	b08a      	sub	sp, #40	@ 0x28
 8018710:	af00      	add	r7, sp, #0
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	60b9      	str	r1, [r7, #8]
 8018716:	607a      	str	r2, [r7, #4]
 8018718:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801871a:	f06f 0301 	mvn.w	r3, #1
 801871e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8018724:	68bb      	ldr	r3, [r7, #8]
 8018726:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801872c:	4b06      	ldr	r3, [pc, #24]	@ (8018748 <xTimerPendFunctionCallFromISR+0x3c>)
 801872e:	6818      	ldr	r0, [r3, #0]
 8018730:	f107 0114 	add.w	r1, r7, #20
 8018734:	2300      	movs	r3, #0
 8018736:	683a      	ldr	r2, [r7, #0]
 8018738:	f7fd ff38 	bl	80165ac <xQueueGenericSendFromISR>
 801873c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8018740:	4618      	mov	r0, r3
 8018742:	3728      	adds	r7, #40	@ 0x28
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}
 8018748:	20003890 	.word	0x20003890

0801874c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801874c:	b480      	push	{r7}
 801874e:	b085      	sub	sp, #20
 8018750:	af00      	add	r7, sp, #0
 8018752:	60f8      	str	r0, [r7, #12]
 8018754:	60b9      	str	r1, [r7, #8]
 8018756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	3b04      	subs	r3, #4
 801875c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	3b04      	subs	r3, #4
 801876a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	f023 0201 	bic.w	r2, r3, #1
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	3b04      	subs	r3, #4
 801877a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801877c:	4a0c      	ldr	r2, [pc, #48]	@ (80187b0 <pxPortInitialiseStack+0x64>)
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	3b14      	subs	r3, #20
 8018786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018788:	687a      	ldr	r2, [r7, #4]
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	3b04      	subs	r3, #4
 8018792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	f06f 0202 	mvn.w	r2, #2
 801879a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	3b20      	subs	r3, #32
 80187a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80187a2:	68fb      	ldr	r3, [r7, #12]
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	3714      	adds	r7, #20
 80187a8:	46bd      	mov	sp, r7
 80187aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ae:	4770      	bx	lr
 80187b0:	080187b5 	.word	0x080187b5

080187b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80187b4:	b480      	push	{r7}
 80187b6:	b085      	sub	sp, #20
 80187b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80187ba:	2300      	movs	r3, #0
 80187bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80187be:	4b13      	ldr	r3, [pc, #76]	@ (801880c <prvTaskExitError+0x58>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187c6:	d00b      	beq.n	80187e0 <prvTaskExitError+0x2c>
	__asm volatile
 80187c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187cc:	f383 8811 	msr	BASEPRI, r3
 80187d0:	f3bf 8f6f 	isb	sy
 80187d4:	f3bf 8f4f 	dsb	sy
 80187d8:	60fb      	str	r3, [r7, #12]
}
 80187da:	bf00      	nop
 80187dc:	bf00      	nop
 80187de:	e7fd      	b.n	80187dc <prvTaskExitError+0x28>
	__asm volatile
 80187e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187e4:	f383 8811 	msr	BASEPRI, r3
 80187e8:	f3bf 8f6f 	isb	sy
 80187ec:	f3bf 8f4f 	dsb	sy
 80187f0:	60bb      	str	r3, [r7, #8]
}
 80187f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80187f4:	bf00      	nop
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d0fc      	beq.n	80187f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80187fc:	bf00      	nop
 80187fe:	bf00      	nop
 8018800:	3714      	adds	r7, #20
 8018802:	46bd      	mov	sp, r7
 8018804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018808:	4770      	bx	lr
 801880a:	bf00      	nop
 801880c:	200000a0 	.word	0x200000a0

08018810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018810:	4b07      	ldr	r3, [pc, #28]	@ (8018830 <pxCurrentTCBConst2>)
 8018812:	6819      	ldr	r1, [r3, #0]
 8018814:	6808      	ldr	r0, [r1, #0]
 8018816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801881a:	f380 8809 	msr	PSP, r0
 801881e:	f3bf 8f6f 	isb	sy
 8018822:	f04f 0000 	mov.w	r0, #0
 8018826:	f380 8811 	msr	BASEPRI, r0
 801882a:	4770      	bx	lr
 801882c:	f3af 8000 	nop.w

08018830 <pxCurrentTCBConst2>:
 8018830:	2000368c 	.word	0x2000368c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018834:	bf00      	nop
 8018836:	bf00      	nop

08018838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018838:	4808      	ldr	r0, [pc, #32]	@ (801885c <prvPortStartFirstTask+0x24>)
 801883a:	6800      	ldr	r0, [r0, #0]
 801883c:	6800      	ldr	r0, [r0, #0]
 801883e:	f380 8808 	msr	MSP, r0
 8018842:	f04f 0000 	mov.w	r0, #0
 8018846:	f380 8814 	msr	CONTROL, r0
 801884a:	b662      	cpsie	i
 801884c:	b661      	cpsie	f
 801884e:	f3bf 8f4f 	dsb	sy
 8018852:	f3bf 8f6f 	isb	sy
 8018856:	df00      	svc	0
 8018858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801885a:	bf00      	nop
 801885c:	e000ed08 	.word	0xe000ed08

08018860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b086      	sub	sp, #24
 8018864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018866:	4b47      	ldr	r3, [pc, #284]	@ (8018984 <xPortStartScheduler+0x124>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	4a47      	ldr	r2, [pc, #284]	@ (8018988 <xPortStartScheduler+0x128>)
 801886c:	4293      	cmp	r3, r2
 801886e:	d10b      	bne.n	8018888 <xPortStartScheduler+0x28>
	__asm volatile
 8018870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018874:	f383 8811 	msr	BASEPRI, r3
 8018878:	f3bf 8f6f 	isb	sy
 801887c:	f3bf 8f4f 	dsb	sy
 8018880:	613b      	str	r3, [r7, #16]
}
 8018882:	bf00      	nop
 8018884:	bf00      	nop
 8018886:	e7fd      	b.n	8018884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018888:	4b3e      	ldr	r3, [pc, #248]	@ (8018984 <xPortStartScheduler+0x124>)
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	4a3f      	ldr	r2, [pc, #252]	@ (801898c <xPortStartScheduler+0x12c>)
 801888e:	4293      	cmp	r3, r2
 8018890:	d10b      	bne.n	80188aa <xPortStartScheduler+0x4a>
	__asm volatile
 8018892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018896:	f383 8811 	msr	BASEPRI, r3
 801889a:	f3bf 8f6f 	isb	sy
 801889e:	f3bf 8f4f 	dsb	sy
 80188a2:	60fb      	str	r3, [r7, #12]
}
 80188a4:	bf00      	nop
 80188a6:	bf00      	nop
 80188a8:	e7fd      	b.n	80188a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80188aa:	4b39      	ldr	r3, [pc, #228]	@ (8018990 <xPortStartScheduler+0x130>)
 80188ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80188ae:	697b      	ldr	r3, [r7, #20]
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	22ff      	movs	r2, #255	@ 0xff
 80188ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80188bc:	697b      	ldr	r3, [r7, #20]
 80188be:	781b      	ldrb	r3, [r3, #0]
 80188c0:	b2db      	uxtb	r3, r3
 80188c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80188c4:	78fb      	ldrb	r3, [r7, #3]
 80188c6:	b2db      	uxtb	r3, r3
 80188c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80188cc:	b2da      	uxtb	r2, r3
 80188ce:	4b31      	ldr	r3, [pc, #196]	@ (8018994 <xPortStartScheduler+0x134>)
 80188d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80188d2:	4b31      	ldr	r3, [pc, #196]	@ (8018998 <xPortStartScheduler+0x138>)
 80188d4:	2207      	movs	r2, #7
 80188d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80188d8:	e009      	b.n	80188ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80188da:	4b2f      	ldr	r3, [pc, #188]	@ (8018998 <xPortStartScheduler+0x138>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	3b01      	subs	r3, #1
 80188e0:	4a2d      	ldr	r2, [pc, #180]	@ (8018998 <xPortStartScheduler+0x138>)
 80188e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80188e4:	78fb      	ldrb	r3, [r7, #3]
 80188e6:	b2db      	uxtb	r3, r3
 80188e8:	005b      	lsls	r3, r3, #1
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80188ee:	78fb      	ldrb	r3, [r7, #3]
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80188f6:	2b80      	cmp	r3, #128	@ 0x80
 80188f8:	d0ef      	beq.n	80188da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80188fa:	4b27      	ldr	r3, [pc, #156]	@ (8018998 <xPortStartScheduler+0x138>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	f1c3 0307 	rsb	r3, r3, #7
 8018902:	2b04      	cmp	r3, #4
 8018904:	d00b      	beq.n	801891e <xPortStartScheduler+0xbe>
	__asm volatile
 8018906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801890a:	f383 8811 	msr	BASEPRI, r3
 801890e:	f3bf 8f6f 	isb	sy
 8018912:	f3bf 8f4f 	dsb	sy
 8018916:	60bb      	str	r3, [r7, #8]
}
 8018918:	bf00      	nop
 801891a:	bf00      	nop
 801891c:	e7fd      	b.n	801891a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801891e:	4b1e      	ldr	r3, [pc, #120]	@ (8018998 <xPortStartScheduler+0x138>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	021b      	lsls	r3, r3, #8
 8018924:	4a1c      	ldr	r2, [pc, #112]	@ (8018998 <xPortStartScheduler+0x138>)
 8018926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018928:	4b1b      	ldr	r3, [pc, #108]	@ (8018998 <xPortStartScheduler+0x138>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018930:	4a19      	ldr	r2, [pc, #100]	@ (8018998 <xPortStartScheduler+0x138>)
 8018932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	b2da      	uxtb	r2, r3
 8018938:	697b      	ldr	r3, [r7, #20]
 801893a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801893c:	4b17      	ldr	r3, [pc, #92]	@ (801899c <xPortStartScheduler+0x13c>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	4a16      	ldr	r2, [pc, #88]	@ (801899c <xPortStartScheduler+0x13c>)
 8018942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018948:	4b14      	ldr	r3, [pc, #80]	@ (801899c <xPortStartScheduler+0x13c>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4a13      	ldr	r2, [pc, #76]	@ (801899c <xPortStartScheduler+0x13c>)
 801894e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018954:	f000 f8da 	bl	8018b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018958:	4b11      	ldr	r3, [pc, #68]	@ (80189a0 <xPortStartScheduler+0x140>)
 801895a:	2200      	movs	r2, #0
 801895c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801895e:	f000 f8f9 	bl	8018b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018962:	4b10      	ldr	r3, [pc, #64]	@ (80189a4 <xPortStartScheduler+0x144>)
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	4a0f      	ldr	r2, [pc, #60]	@ (80189a4 <xPortStartScheduler+0x144>)
 8018968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801896c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801896e:	f7ff ff63 	bl	8018838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018972:	f7fe fe21 	bl	80175b8 <vTaskSwitchContext>
	prvTaskExitError();
 8018976:	f7ff ff1d 	bl	80187b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801897a:	2300      	movs	r3, #0
}
 801897c:	4618      	mov	r0, r3
 801897e:	3718      	adds	r7, #24
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}
 8018984:	e000ed00 	.word	0xe000ed00
 8018988:	410fc271 	.word	0x410fc271
 801898c:	410fc270 	.word	0x410fc270
 8018990:	e000e400 	.word	0xe000e400
 8018994:	2000398c 	.word	0x2000398c
 8018998:	20003990 	.word	0x20003990
 801899c:	e000ed20 	.word	0xe000ed20
 80189a0:	200000a0 	.word	0x200000a0
 80189a4:	e000ef34 	.word	0xe000ef34

080189a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80189a8:	b480      	push	{r7}
 80189aa:	b083      	sub	sp, #12
 80189ac:	af00      	add	r7, sp, #0
	__asm volatile
 80189ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189b2:	f383 8811 	msr	BASEPRI, r3
 80189b6:	f3bf 8f6f 	isb	sy
 80189ba:	f3bf 8f4f 	dsb	sy
 80189be:	607b      	str	r3, [r7, #4]
}
 80189c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80189c2:	4b10      	ldr	r3, [pc, #64]	@ (8018a04 <vPortEnterCritical+0x5c>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	3301      	adds	r3, #1
 80189c8:	4a0e      	ldr	r2, [pc, #56]	@ (8018a04 <vPortEnterCritical+0x5c>)
 80189ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80189cc:	4b0d      	ldr	r3, [pc, #52]	@ (8018a04 <vPortEnterCritical+0x5c>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2b01      	cmp	r3, #1
 80189d2:	d110      	bne.n	80189f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80189d4:	4b0c      	ldr	r3, [pc, #48]	@ (8018a08 <vPortEnterCritical+0x60>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d00b      	beq.n	80189f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80189de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189e2:	f383 8811 	msr	BASEPRI, r3
 80189e6:	f3bf 8f6f 	isb	sy
 80189ea:	f3bf 8f4f 	dsb	sy
 80189ee:	603b      	str	r3, [r7, #0]
}
 80189f0:	bf00      	nop
 80189f2:	bf00      	nop
 80189f4:	e7fd      	b.n	80189f2 <vPortEnterCritical+0x4a>
	}
}
 80189f6:	bf00      	nop
 80189f8:	370c      	adds	r7, #12
 80189fa:	46bd      	mov	sp, r7
 80189fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a00:	4770      	bx	lr
 8018a02:	bf00      	nop
 8018a04:	200000a0 	.word	0x200000a0
 8018a08:	e000ed04 	.word	0xe000ed04

08018a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	b083      	sub	sp, #12
 8018a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018a12:	4b12      	ldr	r3, [pc, #72]	@ (8018a5c <vPortExitCritical+0x50>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d10b      	bne.n	8018a32 <vPortExitCritical+0x26>
	__asm volatile
 8018a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a1e:	f383 8811 	msr	BASEPRI, r3
 8018a22:	f3bf 8f6f 	isb	sy
 8018a26:	f3bf 8f4f 	dsb	sy
 8018a2a:	607b      	str	r3, [r7, #4]
}
 8018a2c:	bf00      	nop
 8018a2e:	bf00      	nop
 8018a30:	e7fd      	b.n	8018a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018a32:	4b0a      	ldr	r3, [pc, #40]	@ (8018a5c <vPortExitCritical+0x50>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	3b01      	subs	r3, #1
 8018a38:	4a08      	ldr	r2, [pc, #32]	@ (8018a5c <vPortExitCritical+0x50>)
 8018a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018a3c:	4b07      	ldr	r3, [pc, #28]	@ (8018a5c <vPortExitCritical+0x50>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d105      	bne.n	8018a50 <vPortExitCritical+0x44>
 8018a44:	2300      	movs	r3, #0
 8018a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018a48:	683b      	ldr	r3, [r7, #0]
 8018a4a:	f383 8811 	msr	BASEPRI, r3
}
 8018a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018a50:	bf00      	nop
 8018a52:	370c      	adds	r7, #12
 8018a54:	46bd      	mov	sp, r7
 8018a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a5a:	4770      	bx	lr
 8018a5c:	200000a0 	.word	0x200000a0

08018a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018a60:	f3ef 8009 	mrs	r0, PSP
 8018a64:	f3bf 8f6f 	isb	sy
 8018a68:	4b15      	ldr	r3, [pc, #84]	@ (8018ac0 <pxCurrentTCBConst>)
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	f01e 0f10 	tst.w	lr, #16
 8018a70:	bf08      	it	eq
 8018a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7a:	6010      	str	r0, [r2, #0]
 8018a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018a84:	f380 8811 	msr	BASEPRI, r0
 8018a88:	f3bf 8f4f 	dsb	sy
 8018a8c:	f3bf 8f6f 	isb	sy
 8018a90:	f7fe fd92 	bl	80175b8 <vTaskSwitchContext>
 8018a94:	f04f 0000 	mov.w	r0, #0
 8018a98:	f380 8811 	msr	BASEPRI, r0
 8018a9c:	bc09      	pop	{r0, r3}
 8018a9e:	6819      	ldr	r1, [r3, #0]
 8018aa0:	6808      	ldr	r0, [r1, #0]
 8018aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aa6:	f01e 0f10 	tst.w	lr, #16
 8018aaa:	bf08      	it	eq
 8018aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018ab0:	f380 8809 	msr	PSP, r0
 8018ab4:	f3bf 8f6f 	isb	sy
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	f3af 8000 	nop.w

08018ac0 <pxCurrentTCBConst>:
 8018ac0:	2000368c 	.word	0x2000368c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018ac4:	bf00      	nop
 8018ac6:	bf00      	nop

08018ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	af00      	add	r7, sp, #0
	__asm volatile
 8018ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ad2:	f383 8811 	msr	BASEPRI, r3
 8018ad6:	f3bf 8f6f 	isb	sy
 8018ada:	f3bf 8f4f 	dsb	sy
 8018ade:	607b      	str	r3, [r7, #4]
}
 8018ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018ae2:	f7fe fcaf 	bl	8017444 <xTaskIncrementTick>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d003      	beq.n	8018af4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018aec:	4b06      	ldr	r3, [pc, #24]	@ (8018b08 <SysTick_Handler+0x40>)
 8018aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018af2:	601a      	str	r2, [r3, #0]
 8018af4:	2300      	movs	r3, #0
 8018af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	f383 8811 	msr	BASEPRI, r3
}
 8018afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018b00:	bf00      	nop
 8018b02:	3708      	adds	r7, #8
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	e000ed04 	.word	0xe000ed04

08018b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018b10:	4b0b      	ldr	r3, [pc, #44]	@ (8018b40 <vPortSetupTimerInterrupt+0x34>)
 8018b12:	2200      	movs	r2, #0
 8018b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018b16:	4b0b      	ldr	r3, [pc, #44]	@ (8018b44 <vPortSetupTimerInterrupt+0x38>)
 8018b18:	2200      	movs	r2, #0
 8018b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8018b48 <vPortSetupTimerInterrupt+0x3c>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a0a      	ldr	r2, [pc, #40]	@ (8018b4c <vPortSetupTimerInterrupt+0x40>)
 8018b22:	fba2 2303 	umull	r2, r3, r2, r3
 8018b26:	099b      	lsrs	r3, r3, #6
 8018b28:	4a09      	ldr	r2, [pc, #36]	@ (8018b50 <vPortSetupTimerInterrupt+0x44>)
 8018b2a:	3b01      	subs	r3, #1
 8018b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018b2e:	4b04      	ldr	r3, [pc, #16]	@ (8018b40 <vPortSetupTimerInterrupt+0x34>)
 8018b30:	2207      	movs	r2, #7
 8018b32:	601a      	str	r2, [r3, #0]
}
 8018b34:	bf00      	nop
 8018b36:	46bd      	mov	sp, r7
 8018b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3c:	4770      	bx	lr
 8018b3e:	bf00      	nop
 8018b40:	e000e010 	.word	0xe000e010
 8018b44:	e000e018 	.word	0xe000e018
 8018b48:	20000004 	.word	0x20000004
 8018b4c:	10624dd3 	.word	0x10624dd3
 8018b50:	e000e014 	.word	0xe000e014

08018b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018b64 <vPortEnableVFP+0x10>
 8018b58:	6801      	ldr	r1, [r0, #0]
 8018b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018b5e:	6001      	str	r1, [r0, #0]
 8018b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018b62:	bf00      	nop
 8018b64:	e000ed88 	.word	0xe000ed88

08018b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018b68:	b480      	push	{r7}
 8018b6a:	b085      	sub	sp, #20
 8018b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018b6e:	f3ef 8305 	mrs	r3, IPSR
 8018b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	2b0f      	cmp	r3, #15
 8018b78:	d915      	bls.n	8018ba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018b7a:	4a18      	ldr	r2, [pc, #96]	@ (8018bdc <vPortValidateInterruptPriority+0x74>)
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	4413      	add	r3, r2
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018b84:	4b16      	ldr	r3, [pc, #88]	@ (8018be0 <vPortValidateInterruptPriority+0x78>)
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	7afa      	ldrb	r2, [r7, #11]
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d20b      	bcs.n	8018ba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8018b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b92:	f383 8811 	msr	BASEPRI, r3
 8018b96:	f3bf 8f6f 	isb	sy
 8018b9a:	f3bf 8f4f 	dsb	sy
 8018b9e:	607b      	str	r3, [r7, #4]
}
 8018ba0:	bf00      	nop
 8018ba2:	bf00      	nop
 8018ba4:	e7fd      	b.n	8018ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8018be4 <vPortValidateInterruptPriority+0x7c>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8018bae:	4b0e      	ldr	r3, [pc, #56]	@ (8018be8 <vPortValidateInterruptPriority+0x80>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d90b      	bls.n	8018bce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8018bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bba:	f383 8811 	msr	BASEPRI, r3
 8018bbe:	f3bf 8f6f 	isb	sy
 8018bc2:	f3bf 8f4f 	dsb	sy
 8018bc6:	603b      	str	r3, [r7, #0]
}
 8018bc8:	bf00      	nop
 8018bca:	bf00      	nop
 8018bcc:	e7fd      	b.n	8018bca <vPortValidateInterruptPriority+0x62>
	}
 8018bce:	bf00      	nop
 8018bd0:	3714      	adds	r7, #20
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd8:	4770      	bx	lr
 8018bda:	bf00      	nop
 8018bdc:	e000e3f0 	.word	0xe000e3f0
 8018be0:	2000398c 	.word	0x2000398c
 8018be4:	e000ed0c 	.word	0xe000ed0c
 8018be8:	20003990 	.word	0x20003990

08018bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b08a      	sub	sp, #40	@ 0x28
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018bf8:	f7fe fb68 	bl	80172cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8018d70 <pvPortMalloc+0x184>)
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d101      	bne.n	8018c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018c04:	f000 f924 	bl	8018e50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018c08:	4b5a      	ldr	r3, [pc, #360]	@ (8018d74 <pvPortMalloc+0x188>)
 8018c0a:	681a      	ldr	r2, [r3, #0]
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	4013      	ands	r3, r2
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	f040 8095 	bne.w	8018d40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d01e      	beq.n	8018c5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8018c1c:	2208      	movs	r2, #8
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	4413      	add	r3, r2
 8018c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	f003 0307 	and.w	r3, r3, #7
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d015      	beq.n	8018c5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f023 0307 	bic.w	r3, r3, #7
 8018c34:	3308      	adds	r3, #8
 8018c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	f003 0307 	and.w	r3, r3, #7
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d00b      	beq.n	8018c5a <pvPortMalloc+0x6e>
	__asm volatile
 8018c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c46:	f383 8811 	msr	BASEPRI, r3
 8018c4a:	f3bf 8f6f 	isb	sy
 8018c4e:	f3bf 8f4f 	dsb	sy
 8018c52:	617b      	str	r3, [r7, #20]
}
 8018c54:	bf00      	nop
 8018c56:	bf00      	nop
 8018c58:	e7fd      	b.n	8018c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d06f      	beq.n	8018d40 <pvPortMalloc+0x154>
 8018c60:	4b45      	ldr	r3, [pc, #276]	@ (8018d78 <pvPortMalloc+0x18c>)
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	687a      	ldr	r2, [r7, #4]
 8018c66:	429a      	cmp	r2, r3
 8018c68:	d86a      	bhi.n	8018d40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018c6a:	4b44      	ldr	r3, [pc, #272]	@ (8018d7c <pvPortMalloc+0x190>)
 8018c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018c6e:	4b43      	ldr	r3, [pc, #268]	@ (8018d7c <pvPortMalloc+0x190>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018c74:	e004      	b.n	8018c80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c82:	685b      	ldr	r3, [r3, #4]
 8018c84:	687a      	ldr	r2, [r7, #4]
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d903      	bls.n	8018c92 <pvPortMalloc+0xa6>
 8018c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d1f1      	bne.n	8018c76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018c92:	4b37      	ldr	r3, [pc, #220]	@ (8018d70 <pvPortMalloc+0x184>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c98:	429a      	cmp	r2, r3
 8018c9a:	d051      	beq.n	8018d40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018c9c:	6a3b      	ldr	r3, [r7, #32]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	2208      	movs	r2, #8
 8018ca2:	4413      	add	r3, r2
 8018ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ca8:	681a      	ldr	r2, [r3, #0]
 8018caa:	6a3b      	ldr	r3, [r7, #32]
 8018cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cb0:	685a      	ldr	r2, [r3, #4]
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	1ad2      	subs	r2, r2, r3
 8018cb6:	2308      	movs	r3, #8
 8018cb8:	005b      	lsls	r3, r3, #1
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	d920      	bls.n	8018d00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	4413      	add	r3, r2
 8018cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	f003 0307 	and.w	r3, r3, #7
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d00b      	beq.n	8018ce8 <pvPortMalloc+0xfc>
	__asm volatile
 8018cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cd4:	f383 8811 	msr	BASEPRI, r3
 8018cd8:	f3bf 8f6f 	isb	sy
 8018cdc:	f3bf 8f4f 	dsb	sy
 8018ce0:	613b      	str	r3, [r7, #16]
}
 8018ce2:	bf00      	nop
 8018ce4:	bf00      	nop
 8018ce6:	e7fd      	b.n	8018ce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cea:	685a      	ldr	r2, [r3, #4]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	1ad2      	subs	r2, r2, r3
 8018cf0:	69bb      	ldr	r3, [r7, #24]
 8018cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018cfa:	69b8      	ldr	r0, [r7, #24]
 8018cfc:	f000 f90a 	bl	8018f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018d00:	4b1d      	ldr	r3, [pc, #116]	@ (8018d78 <pvPortMalloc+0x18c>)
 8018d02:	681a      	ldr	r2, [r3, #0]
 8018d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d06:	685b      	ldr	r3, [r3, #4]
 8018d08:	1ad3      	subs	r3, r2, r3
 8018d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8018d78 <pvPortMalloc+0x18c>)
 8018d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8018d78 <pvPortMalloc+0x18c>)
 8018d10:	681a      	ldr	r2, [r3, #0]
 8018d12:	4b1b      	ldr	r3, [pc, #108]	@ (8018d80 <pvPortMalloc+0x194>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	429a      	cmp	r2, r3
 8018d18:	d203      	bcs.n	8018d22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018d1a:	4b17      	ldr	r3, [pc, #92]	@ (8018d78 <pvPortMalloc+0x18c>)
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	4a18      	ldr	r2, [pc, #96]	@ (8018d80 <pvPortMalloc+0x194>)
 8018d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d24:	685a      	ldr	r2, [r3, #4]
 8018d26:	4b13      	ldr	r3, [pc, #76]	@ (8018d74 <pvPortMalloc+0x188>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	431a      	orrs	r2, r3
 8018d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d32:	2200      	movs	r2, #0
 8018d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018d36:	4b13      	ldr	r3, [pc, #76]	@ (8018d84 <pvPortMalloc+0x198>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	3301      	adds	r3, #1
 8018d3c:	4a11      	ldr	r2, [pc, #68]	@ (8018d84 <pvPortMalloc+0x198>)
 8018d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018d40:	f7fe fad2 	bl	80172e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018d44:	69fb      	ldr	r3, [r7, #28]
 8018d46:	f003 0307 	and.w	r3, r3, #7
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d00b      	beq.n	8018d66 <pvPortMalloc+0x17a>
	__asm volatile
 8018d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d52:	f383 8811 	msr	BASEPRI, r3
 8018d56:	f3bf 8f6f 	isb	sy
 8018d5a:	f3bf 8f4f 	dsb	sy
 8018d5e:	60fb      	str	r3, [r7, #12]
}
 8018d60:	bf00      	nop
 8018d62:	bf00      	nop
 8018d64:	e7fd      	b.n	8018d62 <pvPortMalloc+0x176>
	return pvReturn;
 8018d66:	69fb      	ldr	r3, [r7, #28]
}
 8018d68:	4618      	mov	r0, r3
 8018d6a:	3728      	adds	r7, #40	@ 0x28
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd80      	pop	{r7, pc}
 8018d70:	2000aecc 	.word	0x2000aecc
 8018d74:	2000aee0 	.word	0x2000aee0
 8018d78:	2000aed0 	.word	0x2000aed0
 8018d7c:	2000aec4 	.word	0x2000aec4
 8018d80:	2000aed4 	.word	0x2000aed4
 8018d84:	2000aed8 	.word	0x2000aed8

08018d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b086      	sub	sp, #24
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d04f      	beq.n	8018e3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018d9a:	2308      	movs	r3, #8
 8018d9c:	425b      	negs	r3, r3
 8018d9e:	697a      	ldr	r2, [r7, #20]
 8018da0:	4413      	add	r3, r2
 8018da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018da8:	693b      	ldr	r3, [r7, #16]
 8018daa:	685a      	ldr	r2, [r3, #4]
 8018dac:	4b25      	ldr	r3, [pc, #148]	@ (8018e44 <vPortFree+0xbc>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	4013      	ands	r3, r2
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d10b      	bne.n	8018dce <vPortFree+0x46>
	__asm volatile
 8018db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dba:	f383 8811 	msr	BASEPRI, r3
 8018dbe:	f3bf 8f6f 	isb	sy
 8018dc2:	f3bf 8f4f 	dsb	sy
 8018dc6:	60fb      	str	r3, [r7, #12]
}
 8018dc8:	bf00      	nop
 8018dca:	bf00      	nop
 8018dcc:	e7fd      	b.n	8018dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d00b      	beq.n	8018dee <vPortFree+0x66>
	__asm volatile
 8018dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dda:	f383 8811 	msr	BASEPRI, r3
 8018dde:	f3bf 8f6f 	isb	sy
 8018de2:	f3bf 8f4f 	dsb	sy
 8018de6:	60bb      	str	r3, [r7, #8]
}
 8018de8:	bf00      	nop
 8018dea:	bf00      	nop
 8018dec:	e7fd      	b.n	8018dea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	685a      	ldr	r2, [r3, #4]
 8018df2:	4b14      	ldr	r3, [pc, #80]	@ (8018e44 <vPortFree+0xbc>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	4013      	ands	r3, r2
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d01e      	beq.n	8018e3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018dfc:	693b      	ldr	r3, [r7, #16]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d11a      	bne.n	8018e3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018e04:	693b      	ldr	r3, [r7, #16]
 8018e06:	685a      	ldr	r2, [r3, #4]
 8018e08:	4b0e      	ldr	r3, [pc, #56]	@ (8018e44 <vPortFree+0xbc>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	43db      	mvns	r3, r3
 8018e0e:	401a      	ands	r2, r3
 8018e10:	693b      	ldr	r3, [r7, #16]
 8018e12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018e14:	f7fe fa5a 	bl	80172cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018e18:	693b      	ldr	r3, [r7, #16]
 8018e1a:	685a      	ldr	r2, [r3, #4]
 8018e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8018e48 <vPortFree+0xc0>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4413      	add	r3, r2
 8018e22:	4a09      	ldr	r2, [pc, #36]	@ (8018e48 <vPortFree+0xc0>)
 8018e24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018e26:	6938      	ldr	r0, [r7, #16]
 8018e28:	f000 f874 	bl	8018f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018e2c:	4b07      	ldr	r3, [pc, #28]	@ (8018e4c <vPortFree+0xc4>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	3301      	adds	r3, #1
 8018e32:	4a06      	ldr	r2, [pc, #24]	@ (8018e4c <vPortFree+0xc4>)
 8018e34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018e36:	f7fe fa57 	bl	80172e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018e3a:	bf00      	nop
 8018e3c:	3718      	adds	r7, #24
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}
 8018e42:	bf00      	nop
 8018e44:	2000aee0 	.word	0x2000aee0
 8018e48:	2000aed0 	.word	0x2000aed0
 8018e4c:	2000aedc 	.word	0x2000aedc

08018e50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018e50:	b480      	push	{r7}
 8018e52:	b085      	sub	sp, #20
 8018e54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018e56:	f247 5330 	movw	r3, #30000	@ 0x7530
 8018e5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018e5c:	4b27      	ldr	r3, [pc, #156]	@ (8018efc <prvHeapInit+0xac>)
 8018e5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	f003 0307 	and.w	r3, r3, #7
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d00c      	beq.n	8018e84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	3307      	adds	r3, #7
 8018e6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	f023 0307 	bic.w	r3, r3, #7
 8018e76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018e78:	68ba      	ldr	r2, [r7, #8]
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	1ad3      	subs	r3, r2, r3
 8018e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8018efc <prvHeapInit+0xac>)
 8018e80:	4413      	add	r3, r2
 8018e82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018e88:	4a1d      	ldr	r2, [pc, #116]	@ (8018f00 <prvHeapInit+0xb0>)
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8018f00 <prvHeapInit+0xb0>)
 8018e90:	2200      	movs	r2, #0
 8018e92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	68ba      	ldr	r2, [r7, #8]
 8018e98:	4413      	add	r3, r2
 8018e9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018e9c:	2208      	movs	r2, #8
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	1a9b      	subs	r3, r3, r2
 8018ea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	f023 0307 	bic.w	r3, r3, #7
 8018eaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	4a15      	ldr	r2, [pc, #84]	@ (8018f04 <prvHeapInit+0xb4>)
 8018eb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018eb2:	4b14      	ldr	r3, [pc, #80]	@ (8018f04 <prvHeapInit+0xb4>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018eba:	4b12      	ldr	r3, [pc, #72]	@ (8018f04 <prvHeapInit+0xb4>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ec6:	683b      	ldr	r3, [r7, #0]
 8018ec8:	68fa      	ldr	r2, [r7, #12]
 8018eca:	1ad2      	subs	r2, r2, r3
 8018ecc:	683b      	ldr	r3, [r7, #0]
 8018ece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8018f04 <prvHeapInit+0xb4>)
 8018ed2:	681a      	ldr	r2, [r3, #0]
 8018ed4:	683b      	ldr	r3, [r7, #0]
 8018ed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	685b      	ldr	r3, [r3, #4]
 8018edc:	4a0a      	ldr	r2, [pc, #40]	@ (8018f08 <prvHeapInit+0xb8>)
 8018ede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018ee0:	683b      	ldr	r3, [r7, #0]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	4a09      	ldr	r2, [pc, #36]	@ (8018f0c <prvHeapInit+0xbc>)
 8018ee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018ee8:	4b09      	ldr	r3, [pc, #36]	@ (8018f10 <prvHeapInit+0xc0>)
 8018eea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018eee:	601a      	str	r2, [r3, #0]
}
 8018ef0:	bf00      	nop
 8018ef2:	3714      	adds	r7, #20
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efa:	4770      	bx	lr
 8018efc:	20003994 	.word	0x20003994
 8018f00:	2000aec4 	.word	0x2000aec4
 8018f04:	2000aecc 	.word	0x2000aecc
 8018f08:	2000aed4 	.word	0x2000aed4
 8018f0c:	2000aed0 	.word	0x2000aed0
 8018f10:	2000aee0 	.word	0x2000aee0

08018f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018f14:	b480      	push	{r7}
 8018f16:	b085      	sub	sp, #20
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018f1c:	4b28      	ldr	r3, [pc, #160]	@ (8018fc0 <prvInsertBlockIntoFreeList+0xac>)
 8018f1e:	60fb      	str	r3, [r7, #12]
 8018f20:	e002      	b.n	8018f28 <prvInsertBlockIntoFreeList+0x14>
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	60fb      	str	r3, [r7, #12]
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	687a      	ldr	r2, [r7, #4]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d8f7      	bhi.n	8018f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	68ba      	ldr	r2, [r7, #8]
 8018f3c:	4413      	add	r3, r2
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d108      	bne.n	8018f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	685a      	ldr	r2, [r3, #4]
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	685b      	ldr	r3, [r3, #4]
 8018f4c:	441a      	add	r2, r3
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	68ba      	ldr	r2, [r7, #8]
 8018f60:	441a      	add	r2, r3
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d118      	bne.n	8018f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	681a      	ldr	r2, [r3, #0]
 8018f6e:	4b15      	ldr	r3, [pc, #84]	@ (8018fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d00d      	beq.n	8018f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	685a      	ldr	r2, [r3, #4]
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	685b      	ldr	r3, [r3, #4]
 8018f80:	441a      	add	r2, r3
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	681a      	ldr	r2, [r3, #0]
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	601a      	str	r2, [r3, #0]
 8018f90:	e008      	b.n	8018fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018f92:	4b0c      	ldr	r3, [pc, #48]	@ (8018fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	601a      	str	r2, [r3, #0]
 8018f9a:	e003      	b.n	8018fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018fa4:	68fa      	ldr	r2, [r7, #12]
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	429a      	cmp	r2, r3
 8018faa:	d002      	beq.n	8018fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	687a      	ldr	r2, [r7, #4]
 8018fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018fb2:	bf00      	nop
 8018fb4:	3714      	adds	r7, #20
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbc:	4770      	bx	lr
 8018fbe:	bf00      	nop
 8018fc0:	2000aec4 	.word	0x2000aec4
 8018fc4:	2000aecc 	.word	0x2000aecc

08018fc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018fcc:	2200      	movs	r2, #0
 8018fce:	4912      	ldr	r1, [pc, #72]	@ (8019018 <MX_USB_DEVICE_Init+0x50>)
 8018fd0:	4812      	ldr	r0, [pc, #72]	@ (801901c <MX_USB_DEVICE_Init+0x54>)
 8018fd2:	f7fb fa8b 	bl	80144ec <USBD_Init>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d001      	beq.n	8018fe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018fdc:	f7ea fc06 	bl	80037ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018fe0:	490f      	ldr	r1, [pc, #60]	@ (8019020 <MX_USB_DEVICE_Init+0x58>)
 8018fe2:	480e      	ldr	r0, [pc, #56]	@ (801901c <MX_USB_DEVICE_Init+0x54>)
 8018fe4:	f7fb fab2 	bl	801454c <USBD_RegisterClass>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d001      	beq.n	8018ff2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018fee:	f7ea fbfd 	bl	80037ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018ff2:	490c      	ldr	r1, [pc, #48]	@ (8019024 <MX_USB_DEVICE_Init+0x5c>)
 8018ff4:	4809      	ldr	r0, [pc, #36]	@ (801901c <MX_USB_DEVICE_Init+0x54>)
 8018ff6:	f7fb f9e9 	bl	80143cc <USBD_CDC_RegisterInterface>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d001      	beq.n	8019004 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019000:	f7ea fbf4 	bl	80037ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019004:	4805      	ldr	r0, [pc, #20]	@ (801901c <MX_USB_DEVICE_Init+0x54>)
 8019006:	f7fb fad7 	bl	80145b8 <USBD_Start>
 801900a:	4603      	mov	r3, r0
 801900c:	2b00      	cmp	r3, #0
 801900e:	d001      	beq.n	8019014 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019010:	f7ea fbec 	bl	80037ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019014:	bf00      	nop
 8019016:	bd80      	pop	{r7, pc}
 8019018:	200000b8 	.word	0x200000b8
 801901c:	2000aee4 	.word	0x2000aee4
 8019020:	20000020 	.word	0x20000020
 8019024:	200000a4 	.word	0x200000a4

08019028 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801902c:	2200      	movs	r2, #0
 801902e:	4905      	ldr	r1, [pc, #20]	@ (8019044 <CDC_Init_FS+0x1c>)
 8019030:	4805      	ldr	r0, [pc, #20]	@ (8019048 <CDC_Init_FS+0x20>)
 8019032:	f7fb f9e5 	bl	8014400 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019036:	4905      	ldr	r1, [pc, #20]	@ (801904c <CDC_Init_FS+0x24>)
 8019038:	4803      	ldr	r0, [pc, #12]	@ (8019048 <CDC_Init_FS+0x20>)
 801903a:	f7fb fa03 	bl	8014444 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801903e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019040:	4618      	mov	r0, r3
 8019042:	bd80      	pop	{r7, pc}
 8019044:	2000b9c8 	.word	0x2000b9c8
 8019048:	2000aee4 	.word	0x2000aee4
 801904c:	2000b1c8 	.word	0x2000b1c8

08019050 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019050:	b480      	push	{r7}
 8019052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019054:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019056:	4618      	mov	r0, r3
 8019058:	46bd      	mov	sp, r7
 801905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905e:	4770      	bx	lr

08019060 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019060:	b480      	push	{r7}
 8019062:	b083      	sub	sp, #12
 8019064:	af00      	add	r7, sp, #0
 8019066:	4603      	mov	r3, r0
 8019068:	6039      	str	r1, [r7, #0]
 801906a:	71fb      	strb	r3, [r7, #7]
 801906c:	4613      	mov	r3, r2
 801906e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019070:	79fb      	ldrb	r3, [r7, #7]
 8019072:	2b23      	cmp	r3, #35	@ 0x23
 8019074:	f200 808c 	bhi.w	8019190 <CDC_Control_FS+0x130>
 8019078:	a201      	add	r2, pc, #4	@ (adr r2, 8019080 <CDC_Control_FS+0x20>)
 801907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801907e:	bf00      	nop
 8019080:	08019191 	.word	0x08019191
 8019084:	08019191 	.word	0x08019191
 8019088:	08019191 	.word	0x08019191
 801908c:	08019191 	.word	0x08019191
 8019090:	08019191 	.word	0x08019191
 8019094:	08019191 	.word	0x08019191
 8019098:	08019191 	.word	0x08019191
 801909c:	08019191 	.word	0x08019191
 80190a0:	08019191 	.word	0x08019191
 80190a4:	08019191 	.word	0x08019191
 80190a8:	08019191 	.word	0x08019191
 80190ac:	08019191 	.word	0x08019191
 80190b0:	08019191 	.word	0x08019191
 80190b4:	08019191 	.word	0x08019191
 80190b8:	08019191 	.word	0x08019191
 80190bc:	08019191 	.word	0x08019191
 80190c0:	08019191 	.word	0x08019191
 80190c4:	08019191 	.word	0x08019191
 80190c8:	08019191 	.word	0x08019191
 80190cc:	08019191 	.word	0x08019191
 80190d0:	08019191 	.word	0x08019191
 80190d4:	08019191 	.word	0x08019191
 80190d8:	08019191 	.word	0x08019191
 80190dc:	08019191 	.word	0x08019191
 80190e0:	08019191 	.word	0x08019191
 80190e4:	08019191 	.word	0x08019191
 80190e8:	08019191 	.word	0x08019191
 80190ec:	08019191 	.word	0x08019191
 80190f0:	08019191 	.word	0x08019191
 80190f4:	08019191 	.word	0x08019191
 80190f8:	08019191 	.word	0x08019191
 80190fc:	08019191 	.word	0x08019191
 8019100:	08019111 	.word	0x08019111
 8019104:	0801914b 	.word	0x0801914b
 8019108:	08019191 	.word	0x08019191
 801910c:	08019191 	.word	0x08019191
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	781a      	ldrb	r2, [r3, #0]
 8019114:	4b22      	ldr	r3, [pc, #136]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019116:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	785a      	ldrb	r2, [r3, #1]
 801911c:	4b20      	ldr	r3, [pc, #128]	@ (80191a0 <CDC_Control_FS+0x140>)
 801911e:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	789a      	ldrb	r2, [r3, #2]
 8019124:	4b1e      	ldr	r3, [pc, #120]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019126:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	78da      	ldrb	r2, [r3, #3]
 801912c:	4b1c      	ldr	r3, [pc, #112]	@ (80191a0 <CDC_Control_FS+0x140>)
 801912e:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8019130:	683b      	ldr	r3, [r7, #0]
 8019132:	791a      	ldrb	r2, [r3, #4]
 8019134:	4b1a      	ldr	r3, [pc, #104]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019136:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	795a      	ldrb	r2, [r3, #5]
 801913c:	4b18      	ldr	r3, [pc, #96]	@ (80191a0 <CDC_Control_FS+0x140>)
 801913e:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	799a      	ldrb	r2, [r3, #6]
 8019144:	4b16      	ldr	r3, [pc, #88]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019146:	719a      	strb	r2, [r3, #6]
      break;
 8019148:	e023      	b.n	8019192 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801914a:	4b15      	ldr	r3, [pc, #84]	@ (80191a0 <CDC_Control_FS+0x140>)
 801914c:	781a      	ldrb	r2, [r3, #0]
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	3301      	adds	r3, #1
 8019156:	4a12      	ldr	r2, [pc, #72]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019158:	7852      	ldrb	r2, [r2, #1]
 801915a:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	3302      	adds	r3, #2
 8019160:	4a0f      	ldr	r2, [pc, #60]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019162:	7892      	ldrb	r2, [r2, #2]
 8019164:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	3303      	adds	r3, #3
 801916a:	4a0d      	ldr	r2, [pc, #52]	@ (80191a0 <CDC_Control_FS+0x140>)
 801916c:	78d2      	ldrb	r2, [r2, #3]
 801916e:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8019170:	683b      	ldr	r3, [r7, #0]
 8019172:	3304      	adds	r3, #4
 8019174:	4a0a      	ldr	r2, [pc, #40]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019176:	7912      	ldrb	r2, [r2, #4]
 8019178:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801917a:	683b      	ldr	r3, [r7, #0]
 801917c:	3305      	adds	r3, #5
 801917e:	4a08      	ldr	r2, [pc, #32]	@ (80191a0 <CDC_Control_FS+0x140>)
 8019180:	7952      	ldrb	r2, [r2, #5]
 8019182:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	3306      	adds	r3, #6
 8019188:	4a05      	ldr	r2, [pc, #20]	@ (80191a0 <CDC_Control_FS+0x140>)
 801918a:	7992      	ldrb	r2, [r2, #6]
 801918c:	701a      	strb	r2, [r3, #0]
      break;
 801918e:	e000      	b.n	8019192 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019190:	bf00      	nop
  }

  return (USBD_OK);
 8019192:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019194:	4618      	mov	r0, r3
 8019196:	370c      	adds	r7, #12
 8019198:	46bd      	mov	sp, r7
 801919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919e:	4770      	bx	lr
 80191a0:	2000b1c0 	.word	0x2000b1c0

080191a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b082      	sub	sp, #8
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80191ae:	6879      	ldr	r1, [r7, #4]
 80191b0:	4807      	ldr	r0, [pc, #28]	@ (80191d0 <CDC_Receive_FS+0x2c>)
 80191b2:	f7fb f947 	bl	8014444 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80191b6:	4806      	ldr	r0, [pc, #24]	@ (80191d0 <CDC_Receive_FS+0x2c>)
 80191b8:	f7fb f962 	bl	8014480 <USBD_CDC_ReceivePacket>
  usb_vcp_processing(Buf, Len);
 80191bc:	6839      	ldr	r1, [r7, #0]
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f7f0 fc44 	bl	8009a4c <usb_vcp_processing>
  return (USBD_OK);
 80191c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	2000aee4 	.word	0x2000aee4

080191d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80191d4:	b480      	push	{r7}
 80191d6:	b087      	sub	sp, #28
 80191d8:	af00      	add	r7, sp, #0
 80191da:	60f8      	str	r0, [r7, #12]
 80191dc:	60b9      	str	r1, [r7, #8]
 80191de:	4613      	mov	r3, r2
 80191e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80191e2:	2300      	movs	r3, #0
 80191e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80191e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	371c      	adds	r7, #28
 80191ee:	46bd      	mov	sp, r7
 80191f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f4:	4770      	bx	lr
	...

080191f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191f8:	b480      	push	{r7}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	4603      	mov	r3, r0
 8019200:	6039      	str	r1, [r7, #0]
 8019202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	2212      	movs	r2, #18
 8019208:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801920a:	4b03      	ldr	r3, [pc, #12]	@ (8019218 <USBD_FS_DeviceDescriptor+0x20>)
}
 801920c:	4618      	mov	r0, r3
 801920e:	370c      	adds	r7, #12
 8019210:	46bd      	mov	sp, r7
 8019212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019216:	4770      	bx	lr
 8019218:	200000d4 	.word	0x200000d4

0801921c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801921c:	b480      	push	{r7}
 801921e:	b083      	sub	sp, #12
 8019220:	af00      	add	r7, sp, #0
 8019222:	4603      	mov	r3, r0
 8019224:	6039      	str	r1, [r7, #0]
 8019226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	2204      	movs	r2, #4
 801922c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801922e:	4b03      	ldr	r3, [pc, #12]	@ (801923c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019230:	4618      	mov	r0, r3
 8019232:	370c      	adds	r7, #12
 8019234:	46bd      	mov	sp, r7
 8019236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923a:	4770      	bx	lr
 801923c:	200000e8 	.word	0x200000e8

08019240 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b082      	sub	sp, #8
 8019244:	af00      	add	r7, sp, #0
 8019246:	4603      	mov	r3, r0
 8019248:	6039      	str	r1, [r7, #0]
 801924a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801924c:	79fb      	ldrb	r3, [r7, #7]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d105      	bne.n	801925e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019252:	683a      	ldr	r2, [r7, #0]
 8019254:	4907      	ldr	r1, [pc, #28]	@ (8019274 <USBD_FS_ProductStrDescriptor+0x34>)
 8019256:	4808      	ldr	r0, [pc, #32]	@ (8019278 <USBD_FS_ProductStrDescriptor+0x38>)
 8019258:	f7fc fb58 	bl	801590c <USBD_GetString>
 801925c:	e004      	b.n	8019268 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801925e:	683a      	ldr	r2, [r7, #0]
 8019260:	4904      	ldr	r1, [pc, #16]	@ (8019274 <USBD_FS_ProductStrDescriptor+0x34>)
 8019262:	4805      	ldr	r0, [pc, #20]	@ (8019278 <USBD_FS_ProductStrDescriptor+0x38>)
 8019264:	f7fc fb52 	bl	801590c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019268:	4b02      	ldr	r3, [pc, #8]	@ (8019274 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801926a:	4618      	mov	r0, r3
 801926c:	3708      	adds	r7, #8
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
 8019272:	bf00      	nop
 8019274:	2000c1c8 	.word	0x2000c1c8
 8019278:	080202d0 	.word	0x080202d0

0801927c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b082      	sub	sp, #8
 8019280:	af00      	add	r7, sp, #0
 8019282:	4603      	mov	r3, r0
 8019284:	6039      	str	r1, [r7, #0]
 8019286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019288:	683a      	ldr	r2, [r7, #0]
 801928a:	4904      	ldr	r1, [pc, #16]	@ (801929c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801928c:	4804      	ldr	r0, [pc, #16]	@ (80192a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801928e:	f7fc fb3d 	bl	801590c <USBD_GetString>
  return USBD_StrDesc;
 8019292:	4b02      	ldr	r3, [pc, #8]	@ (801929c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019294:	4618      	mov	r0, r3
 8019296:	3708      	adds	r7, #8
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	2000c1c8 	.word	0x2000c1c8
 80192a0:	080202e8 	.word	0x080202e8

080192a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b082      	sub	sp, #8
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	4603      	mov	r3, r0
 80192ac:	6039      	str	r1, [r7, #0]
 80192ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	221a      	movs	r2, #26
 80192b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80192b6:	f000 f843 	bl	8019340 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80192ba:	4b02      	ldr	r3, [pc, #8]	@ (80192c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80192bc:	4618      	mov	r0, r3
 80192be:	3708      	adds	r7, #8
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}
 80192c4:	200000ec 	.word	0x200000ec

080192c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b082      	sub	sp, #8
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	4603      	mov	r3, r0
 80192d0:	6039      	str	r1, [r7, #0]
 80192d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80192d4:	79fb      	ldrb	r3, [r7, #7]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d105      	bne.n	80192e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80192da:	683a      	ldr	r2, [r7, #0]
 80192dc:	4907      	ldr	r1, [pc, #28]	@ (80192fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80192de:	4808      	ldr	r0, [pc, #32]	@ (8019300 <USBD_FS_ConfigStrDescriptor+0x38>)
 80192e0:	f7fc fb14 	bl	801590c <USBD_GetString>
 80192e4:	e004      	b.n	80192f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80192e6:	683a      	ldr	r2, [r7, #0]
 80192e8:	4904      	ldr	r1, [pc, #16]	@ (80192fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80192ea:	4805      	ldr	r0, [pc, #20]	@ (8019300 <USBD_FS_ConfigStrDescriptor+0x38>)
 80192ec:	f7fc fb0e 	bl	801590c <USBD_GetString>
  }
  return USBD_StrDesc;
 80192f0:	4b02      	ldr	r3, [pc, #8]	@ (80192fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80192f2:	4618      	mov	r0, r3
 80192f4:	3708      	adds	r7, #8
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}
 80192fa:	bf00      	nop
 80192fc:	2000c1c8 	.word	0x2000c1c8
 8019300:	080202fc 	.word	0x080202fc

08019304 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b082      	sub	sp, #8
 8019308:	af00      	add	r7, sp, #0
 801930a:	4603      	mov	r3, r0
 801930c:	6039      	str	r1, [r7, #0]
 801930e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019310:	79fb      	ldrb	r3, [r7, #7]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d105      	bne.n	8019322 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019316:	683a      	ldr	r2, [r7, #0]
 8019318:	4907      	ldr	r1, [pc, #28]	@ (8019338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801931a:	4808      	ldr	r0, [pc, #32]	@ (801933c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801931c:	f7fc faf6 	bl	801590c <USBD_GetString>
 8019320:	e004      	b.n	801932c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019322:	683a      	ldr	r2, [r7, #0]
 8019324:	4904      	ldr	r1, [pc, #16]	@ (8019338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019326:	4805      	ldr	r0, [pc, #20]	@ (801933c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019328:	f7fc faf0 	bl	801590c <USBD_GetString>
  }
  return USBD_StrDesc;
 801932c:	4b02      	ldr	r3, [pc, #8]	@ (8019338 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801932e:	4618      	mov	r0, r3
 8019330:	3708      	adds	r7, #8
 8019332:	46bd      	mov	sp, r7
 8019334:	bd80      	pop	{r7, pc}
 8019336:	bf00      	nop
 8019338:	2000c1c8 	.word	0x2000c1c8
 801933c:	08020308 	.word	0x08020308

08019340 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b084      	sub	sp, #16
 8019344:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019346:	4b0f      	ldr	r3, [pc, #60]	@ (8019384 <Get_SerialNum+0x44>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801934c:	4b0e      	ldr	r3, [pc, #56]	@ (8019388 <Get_SerialNum+0x48>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019352:	4b0e      	ldr	r3, [pc, #56]	@ (801938c <Get_SerialNum+0x4c>)
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019358:	68fa      	ldr	r2, [r7, #12]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	4413      	add	r3, r2
 801935e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d009      	beq.n	801937a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019366:	2208      	movs	r2, #8
 8019368:	4909      	ldr	r1, [pc, #36]	@ (8019390 <Get_SerialNum+0x50>)
 801936a:	68f8      	ldr	r0, [r7, #12]
 801936c:	f000 f814 	bl	8019398 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019370:	2204      	movs	r2, #4
 8019372:	4908      	ldr	r1, [pc, #32]	@ (8019394 <Get_SerialNum+0x54>)
 8019374:	68b8      	ldr	r0, [r7, #8]
 8019376:	f000 f80f 	bl	8019398 <IntToUnicode>
  }
}
 801937a:	bf00      	nop
 801937c:	3710      	adds	r7, #16
 801937e:	46bd      	mov	sp, r7
 8019380:	bd80      	pop	{r7, pc}
 8019382:	bf00      	nop
 8019384:	1fff7a10 	.word	0x1fff7a10
 8019388:	1fff7a14 	.word	0x1fff7a14
 801938c:	1fff7a18 	.word	0x1fff7a18
 8019390:	200000ee 	.word	0x200000ee
 8019394:	200000fe 	.word	0x200000fe

08019398 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019398:	b480      	push	{r7}
 801939a:	b087      	sub	sp, #28
 801939c:	af00      	add	r7, sp, #0
 801939e:	60f8      	str	r0, [r7, #12]
 80193a0:	60b9      	str	r1, [r7, #8]
 80193a2:	4613      	mov	r3, r2
 80193a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80193a6:	2300      	movs	r3, #0
 80193a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80193aa:	2300      	movs	r3, #0
 80193ac:	75fb      	strb	r3, [r7, #23]
 80193ae:	e027      	b.n	8019400 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	0f1b      	lsrs	r3, r3, #28
 80193b4:	2b09      	cmp	r3, #9
 80193b6:	d80b      	bhi.n	80193d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	0f1b      	lsrs	r3, r3, #28
 80193bc:	b2da      	uxtb	r2, r3
 80193be:	7dfb      	ldrb	r3, [r7, #23]
 80193c0:	005b      	lsls	r3, r3, #1
 80193c2:	4619      	mov	r1, r3
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	440b      	add	r3, r1
 80193c8:	3230      	adds	r2, #48	@ 0x30
 80193ca:	b2d2      	uxtb	r2, r2
 80193cc:	701a      	strb	r2, [r3, #0]
 80193ce:	e00a      	b.n	80193e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	0f1b      	lsrs	r3, r3, #28
 80193d4:	b2da      	uxtb	r2, r3
 80193d6:	7dfb      	ldrb	r3, [r7, #23]
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	4619      	mov	r1, r3
 80193dc:	68bb      	ldr	r3, [r7, #8]
 80193de:	440b      	add	r3, r1
 80193e0:	3237      	adds	r2, #55	@ 0x37
 80193e2:	b2d2      	uxtb	r2, r2
 80193e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	011b      	lsls	r3, r3, #4
 80193ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80193ec:	7dfb      	ldrb	r3, [r7, #23]
 80193ee:	005b      	lsls	r3, r3, #1
 80193f0:	3301      	adds	r3, #1
 80193f2:	68ba      	ldr	r2, [r7, #8]
 80193f4:	4413      	add	r3, r2
 80193f6:	2200      	movs	r2, #0
 80193f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80193fa:	7dfb      	ldrb	r3, [r7, #23]
 80193fc:	3301      	adds	r3, #1
 80193fe:	75fb      	strb	r3, [r7, #23]
 8019400:	7dfa      	ldrb	r2, [r7, #23]
 8019402:	79fb      	ldrb	r3, [r7, #7]
 8019404:	429a      	cmp	r2, r3
 8019406:	d3d3      	bcc.n	80193b0 <IntToUnicode+0x18>
  }
}
 8019408:	bf00      	nop
 801940a:	bf00      	nop
 801940c:	371c      	adds	r7, #28
 801940e:	46bd      	mov	sp, r7
 8019410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019414:	4770      	bx	lr
	...

08019418 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b08a      	sub	sp, #40	@ 0x28
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019420:	f107 0314 	add.w	r3, r7, #20
 8019424:	2200      	movs	r2, #0
 8019426:	601a      	str	r2, [r3, #0]
 8019428:	605a      	str	r2, [r3, #4]
 801942a:	609a      	str	r2, [r3, #8]
 801942c:	60da      	str	r2, [r3, #12]
 801942e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8019438:	d13a      	bne.n	80194b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801943a:	2300      	movs	r3, #0
 801943c:	613b      	str	r3, [r7, #16]
 801943e:	4b1e      	ldr	r3, [pc, #120]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 8019440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019442:	4a1d      	ldr	r2, [pc, #116]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 8019444:	f043 0301 	orr.w	r3, r3, #1
 8019448:	6313      	str	r3, [r2, #48]	@ 0x30
 801944a:	4b1b      	ldr	r3, [pc, #108]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 801944c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801944e:	f003 0301 	and.w	r3, r3, #1
 8019452:	613b      	str	r3, [r7, #16]
 8019454:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8019456:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801945a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801945c:	2302      	movs	r3, #2
 801945e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019460:	2300      	movs	r3, #0
 8019462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019464:	2303      	movs	r3, #3
 8019466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019468:	230a      	movs	r3, #10
 801946a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801946c:	f107 0314 	add.w	r3, r7, #20
 8019470:	4619      	mov	r1, r3
 8019472:	4812      	ldr	r0, [pc, #72]	@ (80194bc <HAL_PCD_MspInit+0xa4>)
 8019474:	f7f2 f9c2 	bl	800b7fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019478:	4b0f      	ldr	r3, [pc, #60]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 801947a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801947c:	4a0e      	ldr	r2, [pc, #56]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 801947e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019482:	6353      	str	r3, [r2, #52]	@ 0x34
 8019484:	2300      	movs	r3, #0
 8019486:	60fb      	str	r3, [r7, #12]
 8019488:	4b0b      	ldr	r3, [pc, #44]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 801948a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801948c:	4a0a      	ldr	r2, [pc, #40]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 801948e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019492:	6453      	str	r3, [r2, #68]	@ 0x44
 8019494:	4b08      	ldr	r3, [pc, #32]	@ (80194b8 <HAL_PCD_MspInit+0xa0>)
 8019496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801949c:	60fb      	str	r3, [r7, #12]
 801949e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80194a0:	2200      	movs	r2, #0
 80194a2:	2105      	movs	r1, #5
 80194a4:	2043      	movs	r0, #67	@ 0x43
 80194a6:	f7f1 fd63 	bl	800af70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80194aa:	2043      	movs	r0, #67	@ 0x43
 80194ac:	f7f1 fd7c 	bl	800afa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80194b0:	bf00      	nop
 80194b2:	3728      	adds	r7, #40	@ 0x28
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}
 80194b8:	40023800 	.word	0x40023800
 80194bc:	40020000 	.word	0x40020000

080194c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b082      	sub	sp, #8
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80194d4:	4619      	mov	r1, r3
 80194d6:	4610      	mov	r0, r2
 80194d8:	f7fb f8bb 	bl	8014652 <USBD_LL_SetupStage>
}
 80194dc:	bf00      	nop
 80194de:	3708      	adds	r7, #8
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}

080194e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
 80194ec:	460b      	mov	r3, r1
 80194ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80194f6:	78fa      	ldrb	r2, [r7, #3]
 80194f8:	6879      	ldr	r1, [r7, #4]
 80194fa:	4613      	mov	r3, r2
 80194fc:	00db      	lsls	r3, r3, #3
 80194fe:	4413      	add	r3, r2
 8019500:	009b      	lsls	r3, r3, #2
 8019502:	440b      	add	r3, r1
 8019504:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	78fb      	ldrb	r3, [r7, #3]
 801950c:	4619      	mov	r1, r3
 801950e:	f7fb f8f5 	bl	80146fc <USBD_LL_DataOutStage>
}
 8019512:	bf00      	nop
 8019514:	3708      	adds	r7, #8
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}

0801951a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801951a:	b580      	push	{r7, lr}
 801951c:	b082      	sub	sp, #8
 801951e:	af00      	add	r7, sp, #0
 8019520:	6078      	str	r0, [r7, #4]
 8019522:	460b      	mov	r3, r1
 8019524:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801952c:	78fa      	ldrb	r2, [r7, #3]
 801952e:	6879      	ldr	r1, [r7, #4]
 8019530:	4613      	mov	r3, r2
 8019532:	00db      	lsls	r3, r3, #3
 8019534:	4413      	add	r3, r2
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	440b      	add	r3, r1
 801953a:	334c      	adds	r3, #76	@ 0x4c
 801953c:	681a      	ldr	r2, [r3, #0]
 801953e:	78fb      	ldrb	r3, [r7, #3]
 8019540:	4619      	mov	r1, r3
 8019542:	f7fb f98e 	bl	8014862 <USBD_LL_DataInStage>
}
 8019546:	bf00      	nop
 8019548:	3708      	adds	r7, #8
 801954a:	46bd      	mov	sp, r7
 801954c:	bd80      	pop	{r7, pc}

0801954e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801954e:	b580      	push	{r7, lr}
 8019550:	b082      	sub	sp, #8
 8019552:	af00      	add	r7, sp, #0
 8019554:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801955c:	4618      	mov	r0, r3
 801955e:	f7fb fac2 	bl	8014ae6 <USBD_LL_SOF>
}
 8019562:	bf00      	nop
 8019564:	3708      	adds	r7, #8
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}

0801956a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801956a:	b580      	push	{r7, lr}
 801956c:	b084      	sub	sp, #16
 801956e:	af00      	add	r7, sp, #0
 8019570:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019572:	2301      	movs	r3, #1
 8019574:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	68db      	ldr	r3, [r3, #12]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d102      	bne.n	8019584 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801957e:	2300      	movs	r3, #0
 8019580:	73fb      	strb	r3, [r7, #15]
 8019582:	e008      	b.n	8019596 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	68db      	ldr	r3, [r3, #12]
 8019588:	2b02      	cmp	r3, #2
 801958a:	d102      	bne.n	8019592 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801958c:	2301      	movs	r3, #1
 801958e:	73fb      	strb	r3, [r7, #15]
 8019590:	e001      	b.n	8019596 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019592:	f7ea f92b 	bl	80037ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801959c:	7bfa      	ldrb	r2, [r7, #15]
 801959e:	4611      	mov	r1, r2
 80195a0:	4618      	mov	r0, r3
 80195a2:	f7fb fa62 	bl	8014a6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80195ac:	4618      	mov	r0, r3
 80195ae:	f7fb fa0a 	bl	80149c6 <USBD_LL_Reset>
}
 80195b2:	bf00      	nop
 80195b4:	3710      	adds	r7, #16
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bd80      	pop	{r7, pc}
	...

080195bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b082      	sub	sp, #8
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fb fa5d 	bl	8014a8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	687a      	ldr	r2, [r7, #4]
 80195dc:	6812      	ldr	r2, [r2, #0]
 80195de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80195e2:	f043 0301 	orr.w	r3, r3, #1
 80195e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
//  gv_usb_connected = 0;
  if (hpcd->Init.low_power_enable)
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	6a1b      	ldr	r3, [r3, #32]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d005      	beq.n	80195fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80195f0:	4b04      	ldr	r3, [pc, #16]	@ (8019604 <HAL_PCD_SuspendCallback+0x48>)
 80195f2:	691b      	ldr	r3, [r3, #16]
 80195f4:	4a03      	ldr	r2, [pc, #12]	@ (8019604 <HAL_PCD_SuspendCallback+0x48>)
 80195f6:	f043 0306 	orr.w	r3, r3, #6
 80195fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80195fc:	bf00      	nop
 80195fe:	3708      	adds	r7, #8
 8019600:	46bd      	mov	sp, r7
 8019602:	bd80      	pop	{r7, pc}
 8019604:	e000ed00 	.word	0xe000ed00

08019608 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b082      	sub	sp, #8
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
//	gv_usb_connected = 1;
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8019616:	4618      	mov	r0, r3
 8019618:	f7fb fa4d 	bl	8014ab6 <USBD_LL_Resume>
}
 801961c:	bf00      	nop
 801961e:	3708      	adds	r7, #8
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}

08019624 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b082      	sub	sp, #8
 8019628:	af00      	add	r7, sp, #0
 801962a:	6078      	str	r0, [r7, #4]
 801962c:	460b      	mov	r3, r1
 801962e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8019636:	78fa      	ldrb	r2, [r7, #3]
 8019638:	4611      	mov	r1, r2
 801963a:	4618      	mov	r0, r3
 801963c:	f7fb faa5 	bl	8014b8a <USBD_LL_IsoOUTIncomplete>
}
 8019640:	bf00      	nop
 8019642:	3708      	adds	r7, #8
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}

08019648 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
 8019650:	460b      	mov	r3, r1
 8019652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801965a:	78fa      	ldrb	r2, [r7, #3]
 801965c:	4611      	mov	r1, r2
 801965e:	4618      	mov	r0, r3
 8019660:	f7fb fa61 	bl	8014b26 <USBD_LL_IsoINIncomplete>
}
 8019664:	bf00      	nop
 8019666:	3708      	adds	r7, #8
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}

0801966c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801967a:	4618      	mov	r0, r3
 801967c:	f7fb fab7 	bl	8014bee <USBD_LL_DevConnected>
}
 8019680:	bf00      	nop
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b082      	sub	sp, #8
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8019696:	4618      	mov	r0, r3
 8019698:	f7fb fab4 	bl	8014c04 <USBD_LL_DevDisconnected>
}
 801969c:	bf00      	nop
 801969e:	3708      	adds	r7, #8
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd80      	pop	{r7, pc}

080196a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b082      	sub	sp, #8
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d13c      	bne.n	801972e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80196b4:	4a20      	ldr	r2, [pc, #128]	@ (8019738 <USBD_LL_Init+0x94>)
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	4a1e      	ldr	r2, [pc, #120]	@ (8019738 <USBD_LL_Init+0x94>)
 80196c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80196c4:	4b1c      	ldr	r3, [pc, #112]	@ (8019738 <USBD_LL_Init+0x94>)
 80196c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80196ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80196cc:	4b1a      	ldr	r3, [pc, #104]	@ (8019738 <USBD_LL_Init+0x94>)
 80196ce:	2204      	movs	r2, #4
 80196d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80196d2:	4b19      	ldr	r3, [pc, #100]	@ (8019738 <USBD_LL_Init+0x94>)
 80196d4:	2202      	movs	r2, #2
 80196d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80196d8:	4b17      	ldr	r3, [pc, #92]	@ (8019738 <USBD_LL_Init+0x94>)
 80196da:	2200      	movs	r2, #0
 80196dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80196de:	4b16      	ldr	r3, [pc, #88]	@ (8019738 <USBD_LL_Init+0x94>)
 80196e0:	2202      	movs	r2, #2
 80196e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80196e4:	4b14      	ldr	r3, [pc, #80]	@ (8019738 <USBD_LL_Init+0x94>)
 80196e6:	2200      	movs	r2, #0
 80196e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80196ea:	4b13      	ldr	r3, [pc, #76]	@ (8019738 <USBD_LL_Init+0x94>)
 80196ec:	2200      	movs	r2, #0
 80196ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80196f0:	4b11      	ldr	r3, [pc, #68]	@ (8019738 <USBD_LL_Init+0x94>)
 80196f2:	2200      	movs	r2, #0
 80196f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80196f6:	4b10      	ldr	r3, [pc, #64]	@ (8019738 <USBD_LL_Init+0x94>)
 80196f8:	2200      	movs	r2, #0
 80196fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80196fc:	4b0e      	ldr	r3, [pc, #56]	@ (8019738 <USBD_LL_Init+0x94>)
 80196fe:	2200      	movs	r2, #0
 8019700:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019702:	480d      	ldr	r0, [pc, #52]	@ (8019738 <USBD_LL_Init+0x94>)
 8019704:	f7f3 ffd3 	bl	800d6ae <HAL_PCD_Init>
 8019708:	4603      	mov	r3, r0
 801970a:	2b00      	cmp	r3, #0
 801970c:	d001      	beq.n	8019712 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801970e:	f7ea f86d 	bl	80037ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019712:	2180      	movs	r1, #128	@ 0x80
 8019714:	4808      	ldr	r0, [pc, #32]	@ (8019738 <USBD_LL_Init+0x94>)
 8019716:	f7f5 fa2a 	bl	800eb6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801971a:	2240      	movs	r2, #64	@ 0x40
 801971c:	2100      	movs	r1, #0
 801971e:	4806      	ldr	r0, [pc, #24]	@ (8019738 <USBD_LL_Init+0x94>)
 8019720:	f7f5 f9de 	bl	800eae0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019724:	2280      	movs	r2, #128	@ 0x80
 8019726:	2101      	movs	r1, #1
 8019728:	4803      	ldr	r0, [pc, #12]	@ (8019738 <USBD_LL_Init+0x94>)
 801972a:	f7f5 f9d9 	bl	800eae0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801972e:	2300      	movs	r3, #0
}
 8019730:	4618      	mov	r0, r3
 8019732:	3708      	adds	r7, #8
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}
 8019738:	2000c3c8 	.word	0x2000c3c8

0801973c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b084      	sub	sp, #16
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019744:	2300      	movs	r3, #0
 8019746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019748:	2300      	movs	r3, #0
 801974a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019752:	4618      	mov	r0, r3
 8019754:	f7f4 f8c8 	bl	800d8e8 <HAL_PCD_Start>
 8019758:	4603      	mov	r3, r0
 801975a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801975c:	7bfb      	ldrb	r3, [r7, #15]
 801975e:	4618      	mov	r0, r3
 8019760:	f000 f942 	bl	80199e8 <USBD_Get_USB_Status>
 8019764:	4603      	mov	r3, r0
 8019766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019768:	7bbb      	ldrb	r3, [r7, #14]
}
 801976a:	4618      	mov	r0, r3
 801976c:	3710      	adds	r7, #16
 801976e:	46bd      	mov	sp, r7
 8019770:	bd80      	pop	{r7, pc}

08019772 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019772:	b580      	push	{r7, lr}
 8019774:	b084      	sub	sp, #16
 8019776:	af00      	add	r7, sp, #0
 8019778:	6078      	str	r0, [r7, #4]
 801977a:	4608      	mov	r0, r1
 801977c:	4611      	mov	r1, r2
 801977e:	461a      	mov	r2, r3
 8019780:	4603      	mov	r3, r0
 8019782:	70fb      	strb	r3, [r7, #3]
 8019784:	460b      	mov	r3, r1
 8019786:	70bb      	strb	r3, [r7, #2]
 8019788:	4613      	mov	r3, r2
 801978a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801978c:	2300      	movs	r3, #0
 801978e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019790:	2300      	movs	r3, #0
 8019792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801979a:	78bb      	ldrb	r3, [r7, #2]
 801979c:	883a      	ldrh	r2, [r7, #0]
 801979e:	78f9      	ldrb	r1, [r7, #3]
 80197a0:	f7f4 fd99 	bl	800e2d6 <HAL_PCD_EP_Open>
 80197a4:	4603      	mov	r3, r0
 80197a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80197a8:	7bfb      	ldrb	r3, [r7, #15]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f000 f91c 	bl	80199e8 <USBD_Get_USB_Status>
 80197b0:	4603      	mov	r3, r0
 80197b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80197b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80197b6:	4618      	mov	r0, r3
 80197b8:	3710      	adds	r7, #16
 80197ba:	46bd      	mov	sp, r7
 80197bc:	bd80      	pop	{r7, pc}

080197be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80197be:	b580      	push	{r7, lr}
 80197c0:	b084      	sub	sp, #16
 80197c2:	af00      	add	r7, sp, #0
 80197c4:	6078      	str	r0, [r7, #4]
 80197c6:	460b      	mov	r3, r1
 80197c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197ca:	2300      	movs	r3, #0
 80197cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197ce:	2300      	movs	r3, #0
 80197d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80197d8:	78fa      	ldrb	r2, [r7, #3]
 80197da:	4611      	mov	r1, r2
 80197dc:	4618      	mov	r0, r3
 80197de:	f7f4 fde2 	bl	800e3a6 <HAL_PCD_EP_Close>
 80197e2:	4603      	mov	r3, r0
 80197e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80197e6:	7bfb      	ldrb	r3, [r7, #15]
 80197e8:	4618      	mov	r0, r3
 80197ea:	f000 f8fd 	bl	80199e8 <USBD_Get_USB_Status>
 80197ee:	4603      	mov	r3, r0
 80197f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80197f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80197f4:	4618      	mov	r0, r3
 80197f6:	3710      	adds	r7, #16
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}

080197fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b084      	sub	sp, #16
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
 8019804:	460b      	mov	r3, r1
 8019806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019808:	2300      	movs	r3, #0
 801980a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801980c:	2300      	movs	r3, #0
 801980e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019816:	78fa      	ldrb	r2, [r7, #3]
 8019818:	4611      	mov	r1, r2
 801981a:	4618      	mov	r0, r3
 801981c:	f7f4 feba 	bl	800e594 <HAL_PCD_EP_SetStall>
 8019820:	4603      	mov	r3, r0
 8019822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019824:	7bfb      	ldrb	r3, [r7, #15]
 8019826:	4618      	mov	r0, r3
 8019828:	f000 f8de 	bl	80199e8 <USBD_Get_USB_Status>
 801982c:	4603      	mov	r3, r0
 801982e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019830:	7bbb      	ldrb	r3, [r7, #14]
}
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}

0801983a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801983a:	b580      	push	{r7, lr}
 801983c:	b084      	sub	sp, #16
 801983e:	af00      	add	r7, sp, #0
 8019840:	6078      	str	r0, [r7, #4]
 8019842:	460b      	mov	r3, r1
 8019844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019846:	2300      	movs	r3, #0
 8019848:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801984a:	2300      	movs	r3, #0
 801984c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019854:	78fa      	ldrb	r2, [r7, #3]
 8019856:	4611      	mov	r1, r2
 8019858:	4618      	mov	r0, r3
 801985a:	f7f4 feff 	bl	800e65c <HAL_PCD_EP_ClrStall>
 801985e:	4603      	mov	r3, r0
 8019860:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019862:	7bfb      	ldrb	r3, [r7, #15]
 8019864:	4618      	mov	r0, r3
 8019866:	f000 f8bf 	bl	80199e8 <USBD_Get_USB_Status>
 801986a:	4603      	mov	r3, r0
 801986c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801986e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019870:	4618      	mov	r0, r3
 8019872:	3710      	adds	r7, #16
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}

08019878 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019878:	b480      	push	{r7}
 801987a:	b085      	sub	sp, #20
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	460b      	mov	r3, r1
 8019882:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801988a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801988c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019890:	2b00      	cmp	r3, #0
 8019892:	da0b      	bge.n	80198ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019894:	78fb      	ldrb	r3, [r7, #3]
 8019896:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801989a:	68f9      	ldr	r1, [r7, #12]
 801989c:	4613      	mov	r3, r2
 801989e:	00db      	lsls	r3, r3, #3
 80198a0:	4413      	add	r3, r2
 80198a2:	009b      	lsls	r3, r3, #2
 80198a4:	440b      	add	r3, r1
 80198a6:	333e      	adds	r3, #62	@ 0x3e
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	e00b      	b.n	80198c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80198ac:	78fb      	ldrb	r3, [r7, #3]
 80198ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80198b2:	68f9      	ldr	r1, [r7, #12]
 80198b4:	4613      	mov	r3, r2
 80198b6:	00db      	lsls	r3, r3, #3
 80198b8:	4413      	add	r3, r2
 80198ba:	009b      	lsls	r3, r3, #2
 80198bc:	440b      	add	r3, r1
 80198be:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80198c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3714      	adds	r7, #20
 80198c8:	46bd      	mov	sp, r7
 80198ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ce:	4770      	bx	lr

080198d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b084      	sub	sp, #16
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
 80198d8:	460b      	mov	r3, r1
 80198da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198dc:	2300      	movs	r3, #0
 80198de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198e0:	2300      	movs	r3, #0
 80198e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80198ea:	78fa      	ldrb	r2, [r7, #3]
 80198ec:	4611      	mov	r1, r2
 80198ee:	4618      	mov	r0, r3
 80198f0:	f7f4 fccc 	bl	800e28c <HAL_PCD_SetAddress>
 80198f4:	4603      	mov	r3, r0
 80198f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198f8:	7bfb      	ldrb	r3, [r7, #15]
 80198fa:	4618      	mov	r0, r3
 80198fc:	f000 f874 	bl	80199e8 <USBD_Get_USB_Status>
 8019900:	4603      	mov	r3, r0
 8019902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019904:	7bbb      	ldrb	r3, [r7, #14]
}
 8019906:	4618      	mov	r0, r3
 8019908:	3710      	adds	r7, #16
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}

0801990e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801990e:	b580      	push	{r7, lr}
 8019910:	b086      	sub	sp, #24
 8019912:	af00      	add	r7, sp, #0
 8019914:	60f8      	str	r0, [r7, #12]
 8019916:	607a      	str	r2, [r7, #4]
 8019918:	603b      	str	r3, [r7, #0]
 801991a:	460b      	mov	r3, r1
 801991c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801991e:	2300      	movs	r3, #0
 8019920:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019922:	2300      	movs	r3, #0
 8019924:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801992c:	7af9      	ldrb	r1, [r7, #11]
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	687a      	ldr	r2, [r7, #4]
 8019932:	f7f4 fde5 	bl	800e500 <HAL_PCD_EP_Transmit>
 8019936:	4603      	mov	r3, r0
 8019938:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801993a:	7dfb      	ldrb	r3, [r7, #23]
 801993c:	4618      	mov	r0, r3
 801993e:	f000 f853 	bl	80199e8 <USBD_Get_USB_Status>
 8019942:	4603      	mov	r3, r0
 8019944:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019946:	7dbb      	ldrb	r3, [r7, #22]
}
 8019948:	4618      	mov	r0, r3
 801994a:	3718      	adds	r7, #24
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}

08019950 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b086      	sub	sp, #24
 8019954:	af00      	add	r7, sp, #0
 8019956:	60f8      	str	r0, [r7, #12]
 8019958:	607a      	str	r2, [r7, #4]
 801995a:	603b      	str	r3, [r7, #0]
 801995c:	460b      	mov	r3, r1
 801995e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019960:	2300      	movs	r3, #0
 8019962:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019964:	2300      	movs	r3, #0
 8019966:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801996e:	7af9      	ldrb	r1, [r7, #11]
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	687a      	ldr	r2, [r7, #4]
 8019974:	f7f4 fd61 	bl	800e43a <HAL_PCD_EP_Receive>
 8019978:	4603      	mov	r3, r0
 801997a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801997c:	7dfb      	ldrb	r3, [r7, #23]
 801997e:	4618      	mov	r0, r3
 8019980:	f000 f832 	bl	80199e8 <USBD_Get_USB_Status>
 8019984:	4603      	mov	r3, r0
 8019986:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019988:	7dbb      	ldrb	r3, [r7, #22]
}
 801998a:	4618      	mov	r0, r3
 801998c:	3718      	adds	r7, #24
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}

08019992 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019992:	b580      	push	{r7, lr}
 8019994:	b082      	sub	sp, #8
 8019996:	af00      	add	r7, sp, #0
 8019998:	6078      	str	r0, [r7, #4]
 801999a:	460b      	mov	r3, r1
 801999c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80199a4:	78fa      	ldrb	r2, [r7, #3]
 80199a6:	4611      	mov	r1, r2
 80199a8:	4618      	mov	r0, r3
 80199aa:	f7f4 fd91 	bl	800e4d0 <HAL_PCD_EP_GetRxCount>
 80199ae:	4603      	mov	r3, r0
}
 80199b0:	4618      	mov	r0, r3
 80199b2:	3708      	adds	r7, #8
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80199b8:	b480      	push	{r7}
 80199ba:	b083      	sub	sp, #12
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80199c0:	4b03      	ldr	r3, [pc, #12]	@ (80199d0 <USBD_static_malloc+0x18>)
}
 80199c2:	4618      	mov	r0, r3
 80199c4:	370c      	adds	r7, #12
 80199c6:	46bd      	mov	sp, r7
 80199c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199cc:	4770      	bx	lr
 80199ce:	bf00      	nop
 80199d0:	2000c8d4 	.word	0x2000c8d4

080199d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80199d4:	b480      	push	{r7}
 80199d6:	b083      	sub	sp, #12
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]

}
 80199dc:	bf00      	nop
 80199de:	370c      	adds	r7, #12
 80199e0:	46bd      	mov	sp, r7
 80199e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e6:	4770      	bx	lr

080199e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80199e8:	b480      	push	{r7}
 80199ea:	b085      	sub	sp, #20
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	4603      	mov	r3, r0
 80199f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199f2:	2300      	movs	r3, #0
 80199f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80199f6:	79fb      	ldrb	r3, [r7, #7]
 80199f8:	2b03      	cmp	r3, #3
 80199fa:	d817      	bhi.n	8019a2c <USBD_Get_USB_Status+0x44>
 80199fc:	a201      	add	r2, pc, #4	@ (adr r2, 8019a04 <USBD_Get_USB_Status+0x1c>)
 80199fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a02:	bf00      	nop
 8019a04:	08019a15 	.word	0x08019a15
 8019a08:	08019a1b 	.word	0x08019a1b
 8019a0c:	08019a21 	.word	0x08019a21
 8019a10:	08019a27 	.word	0x08019a27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019a14:	2300      	movs	r3, #0
 8019a16:	73fb      	strb	r3, [r7, #15]
    break;
 8019a18:	e00b      	b.n	8019a32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a1a:	2303      	movs	r3, #3
 8019a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8019a1e:	e008      	b.n	8019a32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a20:	2301      	movs	r3, #1
 8019a22:	73fb      	strb	r3, [r7, #15]
    break;
 8019a24:	e005      	b.n	8019a32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a26:	2303      	movs	r3, #3
 8019a28:	73fb      	strb	r3, [r7, #15]
    break;
 8019a2a:	e002      	b.n	8019a32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019a2c:	2303      	movs	r3, #3
 8019a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8019a30:	bf00      	nop
  }
  return usb_status;
 8019a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3714      	adds	r7, #20
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3e:	4770      	bx	lr

08019a40 <std>:
 8019a40:	2300      	movs	r3, #0
 8019a42:	b510      	push	{r4, lr}
 8019a44:	4604      	mov	r4, r0
 8019a46:	e9c0 3300 	strd	r3, r3, [r0]
 8019a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a4e:	6083      	str	r3, [r0, #8]
 8019a50:	8181      	strh	r1, [r0, #12]
 8019a52:	6643      	str	r3, [r0, #100]	@ 0x64
 8019a54:	81c2      	strh	r2, [r0, #14]
 8019a56:	6183      	str	r3, [r0, #24]
 8019a58:	4619      	mov	r1, r3
 8019a5a:	2208      	movs	r2, #8
 8019a5c:	305c      	adds	r0, #92	@ 0x5c
 8019a5e:	f000 f93a 	bl	8019cd6 <memset>
 8019a62:	4b0d      	ldr	r3, [pc, #52]	@ (8019a98 <std+0x58>)
 8019a64:	6223      	str	r3, [r4, #32]
 8019a66:	4b0d      	ldr	r3, [pc, #52]	@ (8019a9c <std+0x5c>)
 8019a68:	6263      	str	r3, [r4, #36]	@ 0x24
 8019a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8019aa0 <std+0x60>)
 8019a6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8019aa4 <std+0x64>)
 8019a70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019a72:	4b0d      	ldr	r3, [pc, #52]	@ (8019aa8 <std+0x68>)
 8019a74:	61e4      	str	r4, [r4, #28]
 8019a76:	429c      	cmp	r4, r3
 8019a78:	d006      	beq.n	8019a88 <std+0x48>
 8019a7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019a7e:	4294      	cmp	r4, r2
 8019a80:	d002      	beq.n	8019a88 <std+0x48>
 8019a82:	33d0      	adds	r3, #208	@ 0xd0
 8019a84:	429c      	cmp	r4, r3
 8019a86:	d105      	bne.n	8019a94 <std+0x54>
 8019a88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a90:	f000 b9c6 	b.w	8019e20 <__retarget_lock_init_recursive>
 8019a94:	bd10      	pop	{r4, pc}
 8019a96:	bf00      	nop
 8019a98:	08019c51 	.word	0x08019c51
 8019a9c:	08019c73 	.word	0x08019c73
 8019aa0:	08019cab 	.word	0x08019cab
 8019aa4:	08019ccf 	.word	0x08019ccf
 8019aa8:	2000caf4 	.word	0x2000caf4

08019aac <stdio_exit_handler>:
 8019aac:	4a02      	ldr	r2, [pc, #8]	@ (8019ab8 <stdio_exit_handler+0xc>)
 8019aae:	4903      	ldr	r1, [pc, #12]	@ (8019abc <stdio_exit_handler+0x10>)
 8019ab0:	4803      	ldr	r0, [pc, #12]	@ (8019ac0 <stdio_exit_handler+0x14>)
 8019ab2:	f000 b869 	b.w	8019b88 <_fwalk_sglue>
 8019ab6:	bf00      	nop
 8019ab8:	20000108 	.word	0x20000108
 8019abc:	0801d7ad 	.word	0x0801d7ad
 8019ac0:	20000118 	.word	0x20000118

08019ac4 <cleanup_stdio>:
 8019ac4:	6841      	ldr	r1, [r0, #4]
 8019ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8019af8 <cleanup_stdio+0x34>)
 8019ac8:	4299      	cmp	r1, r3
 8019aca:	b510      	push	{r4, lr}
 8019acc:	4604      	mov	r4, r0
 8019ace:	d001      	beq.n	8019ad4 <cleanup_stdio+0x10>
 8019ad0:	f003 fe6c 	bl	801d7ac <_fclose_r>
 8019ad4:	68a1      	ldr	r1, [r4, #8]
 8019ad6:	4b09      	ldr	r3, [pc, #36]	@ (8019afc <cleanup_stdio+0x38>)
 8019ad8:	4299      	cmp	r1, r3
 8019ada:	d002      	beq.n	8019ae2 <cleanup_stdio+0x1e>
 8019adc:	4620      	mov	r0, r4
 8019ade:	f003 fe65 	bl	801d7ac <_fclose_r>
 8019ae2:	68e1      	ldr	r1, [r4, #12]
 8019ae4:	4b06      	ldr	r3, [pc, #24]	@ (8019b00 <cleanup_stdio+0x3c>)
 8019ae6:	4299      	cmp	r1, r3
 8019ae8:	d004      	beq.n	8019af4 <cleanup_stdio+0x30>
 8019aea:	4620      	mov	r0, r4
 8019aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019af0:	f003 be5c 	b.w	801d7ac <_fclose_r>
 8019af4:	bd10      	pop	{r4, pc}
 8019af6:	bf00      	nop
 8019af8:	2000caf4 	.word	0x2000caf4
 8019afc:	2000cb5c 	.word	0x2000cb5c
 8019b00:	2000cbc4 	.word	0x2000cbc4

08019b04 <global_stdio_init.part.0>:
 8019b04:	b510      	push	{r4, lr}
 8019b06:	4b0b      	ldr	r3, [pc, #44]	@ (8019b34 <global_stdio_init.part.0+0x30>)
 8019b08:	4c0b      	ldr	r4, [pc, #44]	@ (8019b38 <global_stdio_init.part.0+0x34>)
 8019b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8019b3c <global_stdio_init.part.0+0x38>)
 8019b0c:	601a      	str	r2, [r3, #0]
 8019b0e:	4620      	mov	r0, r4
 8019b10:	2200      	movs	r2, #0
 8019b12:	2104      	movs	r1, #4
 8019b14:	f7ff ff94 	bl	8019a40 <std>
 8019b18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019b1c:	2201      	movs	r2, #1
 8019b1e:	2109      	movs	r1, #9
 8019b20:	f7ff ff8e 	bl	8019a40 <std>
 8019b24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019b28:	2202      	movs	r2, #2
 8019b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b2e:	2112      	movs	r1, #18
 8019b30:	f7ff bf86 	b.w	8019a40 <std>
 8019b34:	2000cc2c 	.word	0x2000cc2c
 8019b38:	2000caf4 	.word	0x2000caf4
 8019b3c:	08019aad 	.word	0x08019aad

08019b40 <__sfp_lock_acquire>:
 8019b40:	4801      	ldr	r0, [pc, #4]	@ (8019b48 <__sfp_lock_acquire+0x8>)
 8019b42:	f000 b96f 	b.w	8019e24 <__retarget_lock_acquire_recursive>
 8019b46:	bf00      	nop
 8019b48:	2000cc36 	.word	0x2000cc36

08019b4c <__sfp_lock_release>:
 8019b4c:	4801      	ldr	r0, [pc, #4]	@ (8019b54 <__sfp_lock_release+0x8>)
 8019b4e:	f000 b96a 	b.w	8019e26 <__retarget_lock_release_recursive>
 8019b52:	bf00      	nop
 8019b54:	2000cc36 	.word	0x2000cc36

08019b58 <__sinit>:
 8019b58:	b510      	push	{r4, lr}
 8019b5a:	4604      	mov	r4, r0
 8019b5c:	f7ff fff0 	bl	8019b40 <__sfp_lock_acquire>
 8019b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019b62:	b11b      	cbz	r3, 8019b6c <__sinit+0x14>
 8019b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b68:	f7ff bff0 	b.w	8019b4c <__sfp_lock_release>
 8019b6c:	4b04      	ldr	r3, [pc, #16]	@ (8019b80 <__sinit+0x28>)
 8019b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b70:	4b04      	ldr	r3, [pc, #16]	@ (8019b84 <__sinit+0x2c>)
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d1f5      	bne.n	8019b64 <__sinit+0xc>
 8019b78:	f7ff ffc4 	bl	8019b04 <global_stdio_init.part.0>
 8019b7c:	e7f2      	b.n	8019b64 <__sinit+0xc>
 8019b7e:	bf00      	nop
 8019b80:	08019ac5 	.word	0x08019ac5
 8019b84:	2000cc2c 	.word	0x2000cc2c

08019b88 <_fwalk_sglue>:
 8019b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b8c:	4607      	mov	r7, r0
 8019b8e:	4688      	mov	r8, r1
 8019b90:	4614      	mov	r4, r2
 8019b92:	2600      	movs	r6, #0
 8019b94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b98:	f1b9 0901 	subs.w	r9, r9, #1
 8019b9c:	d505      	bpl.n	8019baa <_fwalk_sglue+0x22>
 8019b9e:	6824      	ldr	r4, [r4, #0]
 8019ba0:	2c00      	cmp	r4, #0
 8019ba2:	d1f7      	bne.n	8019b94 <_fwalk_sglue+0xc>
 8019ba4:	4630      	mov	r0, r6
 8019ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019baa:	89ab      	ldrh	r3, [r5, #12]
 8019bac:	2b01      	cmp	r3, #1
 8019bae:	d907      	bls.n	8019bc0 <_fwalk_sglue+0x38>
 8019bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019bb4:	3301      	adds	r3, #1
 8019bb6:	d003      	beq.n	8019bc0 <_fwalk_sglue+0x38>
 8019bb8:	4629      	mov	r1, r5
 8019bba:	4638      	mov	r0, r7
 8019bbc:	47c0      	blx	r8
 8019bbe:	4306      	orrs	r6, r0
 8019bc0:	3568      	adds	r5, #104	@ 0x68
 8019bc2:	e7e9      	b.n	8019b98 <_fwalk_sglue+0x10>

08019bc4 <printf>:
 8019bc4:	b40f      	push	{r0, r1, r2, r3}
 8019bc6:	b507      	push	{r0, r1, r2, lr}
 8019bc8:	4906      	ldr	r1, [pc, #24]	@ (8019be4 <printf+0x20>)
 8019bca:	ab04      	add	r3, sp, #16
 8019bcc:	6808      	ldr	r0, [r1, #0]
 8019bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8019bd2:	6881      	ldr	r1, [r0, #8]
 8019bd4:	9301      	str	r3, [sp, #4]
 8019bd6:	f001 fe83 	bl	801b8e0 <_vfprintf_r>
 8019bda:	b003      	add	sp, #12
 8019bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019be0:	b004      	add	sp, #16
 8019be2:	4770      	bx	lr
 8019be4:	20000114 	.word	0x20000114

08019be8 <snprintf>:
 8019be8:	b40c      	push	{r2, r3}
 8019bea:	b530      	push	{r4, r5, lr}
 8019bec:	4b17      	ldr	r3, [pc, #92]	@ (8019c4c <snprintf+0x64>)
 8019bee:	1e0c      	subs	r4, r1, #0
 8019bf0:	681d      	ldr	r5, [r3, #0]
 8019bf2:	b09d      	sub	sp, #116	@ 0x74
 8019bf4:	da08      	bge.n	8019c08 <snprintf+0x20>
 8019bf6:	238b      	movs	r3, #139	@ 0x8b
 8019bf8:	602b      	str	r3, [r5, #0]
 8019bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8019bfe:	b01d      	add	sp, #116	@ 0x74
 8019c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c04:	b002      	add	sp, #8
 8019c06:	4770      	bx	lr
 8019c08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019c10:	bf14      	ite	ne
 8019c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019c16:	4623      	moveq	r3, r4
 8019c18:	9304      	str	r3, [sp, #16]
 8019c1a:	9307      	str	r3, [sp, #28]
 8019c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c20:	9002      	str	r0, [sp, #8]
 8019c22:	9006      	str	r0, [sp, #24]
 8019c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019c2a:	ab21      	add	r3, sp, #132	@ 0x84
 8019c2c:	a902      	add	r1, sp, #8
 8019c2e:	4628      	mov	r0, r5
 8019c30:	9301      	str	r3, [sp, #4]
 8019c32:	f000 fc75 	bl	801a520 <_svfprintf_r>
 8019c36:	1c43      	adds	r3, r0, #1
 8019c38:	bfbc      	itt	lt
 8019c3a:	238b      	movlt	r3, #139	@ 0x8b
 8019c3c:	602b      	strlt	r3, [r5, #0]
 8019c3e:	2c00      	cmp	r4, #0
 8019c40:	d0dd      	beq.n	8019bfe <snprintf+0x16>
 8019c42:	9b02      	ldr	r3, [sp, #8]
 8019c44:	2200      	movs	r2, #0
 8019c46:	701a      	strb	r2, [r3, #0]
 8019c48:	e7d9      	b.n	8019bfe <snprintf+0x16>
 8019c4a:	bf00      	nop
 8019c4c:	20000114 	.word	0x20000114

08019c50 <__sread>:
 8019c50:	b510      	push	{r4, lr}
 8019c52:	460c      	mov	r4, r1
 8019c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c58:	f000 f894 	bl	8019d84 <_read_r>
 8019c5c:	2800      	cmp	r0, #0
 8019c5e:	bfab      	itete	ge
 8019c60:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8019c62:	89a3      	ldrhlt	r3, [r4, #12]
 8019c64:	181b      	addge	r3, r3, r0
 8019c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019c6a:	bfac      	ite	ge
 8019c6c:	6523      	strge	r3, [r4, #80]	@ 0x50
 8019c6e:	81a3      	strhlt	r3, [r4, #12]
 8019c70:	bd10      	pop	{r4, pc}

08019c72 <__swrite>:
 8019c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c76:	461f      	mov	r7, r3
 8019c78:	898b      	ldrh	r3, [r1, #12]
 8019c7a:	05db      	lsls	r3, r3, #23
 8019c7c:	4605      	mov	r5, r0
 8019c7e:	460c      	mov	r4, r1
 8019c80:	4616      	mov	r6, r2
 8019c82:	d505      	bpl.n	8019c90 <__swrite+0x1e>
 8019c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c88:	2302      	movs	r3, #2
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	f000 f868 	bl	8019d60 <_lseek_r>
 8019c90:	89a3      	ldrh	r3, [r4, #12]
 8019c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019c9a:	81a3      	strh	r3, [r4, #12]
 8019c9c:	4632      	mov	r2, r6
 8019c9e:	463b      	mov	r3, r7
 8019ca0:	4628      	mov	r0, r5
 8019ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ca6:	f000 b87f 	b.w	8019da8 <_write_r>

08019caa <__sseek>:
 8019caa:	b510      	push	{r4, lr}
 8019cac:	460c      	mov	r4, r1
 8019cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cb2:	f000 f855 	bl	8019d60 <_lseek_r>
 8019cb6:	1c43      	adds	r3, r0, #1
 8019cb8:	89a3      	ldrh	r3, [r4, #12]
 8019cba:	bf15      	itete	ne
 8019cbc:	6520      	strne	r0, [r4, #80]	@ 0x50
 8019cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019cc6:	81a3      	strheq	r3, [r4, #12]
 8019cc8:	bf18      	it	ne
 8019cca:	81a3      	strhne	r3, [r4, #12]
 8019ccc:	bd10      	pop	{r4, pc}

08019cce <__sclose>:
 8019cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cd2:	f000 b809 	b.w	8019ce8 <_close_r>

08019cd6 <memset>:
 8019cd6:	4402      	add	r2, r0
 8019cd8:	4603      	mov	r3, r0
 8019cda:	4293      	cmp	r3, r2
 8019cdc:	d100      	bne.n	8019ce0 <memset+0xa>
 8019cde:	4770      	bx	lr
 8019ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8019ce4:	e7f9      	b.n	8019cda <memset+0x4>
	...

08019ce8 <_close_r>:
 8019ce8:	b538      	push	{r3, r4, r5, lr}
 8019cea:	4d06      	ldr	r5, [pc, #24]	@ (8019d04 <_close_r+0x1c>)
 8019cec:	2300      	movs	r3, #0
 8019cee:	4604      	mov	r4, r0
 8019cf0:	4608      	mov	r0, r1
 8019cf2:	602b      	str	r3, [r5, #0]
 8019cf4:	f7ea f8b8 	bl	8003e68 <_close>
 8019cf8:	1c43      	adds	r3, r0, #1
 8019cfa:	d102      	bne.n	8019d02 <_close_r+0x1a>
 8019cfc:	682b      	ldr	r3, [r5, #0]
 8019cfe:	b103      	cbz	r3, 8019d02 <_close_r+0x1a>
 8019d00:	6023      	str	r3, [r4, #0]
 8019d02:	bd38      	pop	{r3, r4, r5, pc}
 8019d04:	2000cc30 	.word	0x2000cc30

08019d08 <_reclaim_reent>:
 8019d08:	4b14      	ldr	r3, [pc, #80]	@ (8019d5c <_reclaim_reent+0x54>)
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	4283      	cmp	r3, r0
 8019d0e:	b570      	push	{r4, r5, r6, lr}
 8019d10:	4604      	mov	r4, r0
 8019d12:	d022      	beq.n	8019d5a <_reclaim_reent+0x52>
 8019d14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8019d16:	b153      	cbz	r3, 8019d2e <_reclaim_reent+0x26>
 8019d18:	2500      	movs	r5, #0
 8019d1a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8019d1c:	5959      	ldr	r1, [r3, r5]
 8019d1e:	b9b1      	cbnz	r1, 8019d4e <_reclaim_reent+0x46>
 8019d20:	3504      	adds	r5, #4
 8019d22:	2d80      	cmp	r5, #128	@ 0x80
 8019d24:	d1f9      	bne.n	8019d1a <_reclaim_reent+0x12>
 8019d26:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019d28:	4620      	mov	r0, r4
 8019d2a:	f000 f8f1 	bl	8019f10 <_free_r>
 8019d2e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019d30:	b111      	cbz	r1, 8019d38 <_reclaim_reent+0x30>
 8019d32:	4620      	mov	r0, r4
 8019d34:	f000 f8ec 	bl	8019f10 <_free_r>
 8019d38:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8019d3a:	b111      	cbz	r1, 8019d42 <_reclaim_reent+0x3a>
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	f000 f8e7 	bl	8019f10 <_free_r>
 8019d42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019d44:	b14b      	cbz	r3, 8019d5a <_reclaim_reent+0x52>
 8019d46:	4620      	mov	r0, r4
 8019d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d4c:	4718      	bx	r3
 8019d4e:	680e      	ldr	r6, [r1, #0]
 8019d50:	4620      	mov	r0, r4
 8019d52:	f000 f8dd 	bl	8019f10 <_free_r>
 8019d56:	4631      	mov	r1, r6
 8019d58:	e7e1      	b.n	8019d1e <_reclaim_reent+0x16>
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}
 8019d5c:	20000114 	.word	0x20000114

08019d60 <_lseek_r>:
 8019d60:	b538      	push	{r3, r4, r5, lr}
 8019d62:	4d07      	ldr	r5, [pc, #28]	@ (8019d80 <_lseek_r+0x20>)
 8019d64:	4604      	mov	r4, r0
 8019d66:	4608      	mov	r0, r1
 8019d68:	4611      	mov	r1, r2
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	602a      	str	r2, [r5, #0]
 8019d6e:	461a      	mov	r2, r3
 8019d70:	f7ea f8a1 	bl	8003eb6 <_lseek>
 8019d74:	1c43      	adds	r3, r0, #1
 8019d76:	d102      	bne.n	8019d7e <_lseek_r+0x1e>
 8019d78:	682b      	ldr	r3, [r5, #0]
 8019d7a:	b103      	cbz	r3, 8019d7e <_lseek_r+0x1e>
 8019d7c:	6023      	str	r3, [r4, #0]
 8019d7e:	bd38      	pop	{r3, r4, r5, pc}
 8019d80:	2000cc30 	.word	0x2000cc30

08019d84 <_read_r>:
 8019d84:	b538      	push	{r3, r4, r5, lr}
 8019d86:	4d07      	ldr	r5, [pc, #28]	@ (8019da4 <_read_r+0x20>)
 8019d88:	4604      	mov	r4, r0
 8019d8a:	4608      	mov	r0, r1
 8019d8c:	4611      	mov	r1, r2
 8019d8e:	2200      	movs	r2, #0
 8019d90:	602a      	str	r2, [r5, #0]
 8019d92:	461a      	mov	r2, r3
 8019d94:	f7ea f82f 	bl	8003df6 <_read>
 8019d98:	1c43      	adds	r3, r0, #1
 8019d9a:	d102      	bne.n	8019da2 <_read_r+0x1e>
 8019d9c:	682b      	ldr	r3, [r5, #0]
 8019d9e:	b103      	cbz	r3, 8019da2 <_read_r+0x1e>
 8019da0:	6023      	str	r3, [r4, #0]
 8019da2:	bd38      	pop	{r3, r4, r5, pc}
 8019da4:	2000cc30 	.word	0x2000cc30

08019da8 <_write_r>:
 8019da8:	b538      	push	{r3, r4, r5, lr}
 8019daa:	4d07      	ldr	r5, [pc, #28]	@ (8019dc8 <_write_r+0x20>)
 8019dac:	4604      	mov	r4, r0
 8019dae:	4608      	mov	r0, r1
 8019db0:	4611      	mov	r1, r2
 8019db2:	2200      	movs	r2, #0
 8019db4:	602a      	str	r2, [r5, #0]
 8019db6:	461a      	mov	r2, r3
 8019db8:	f7ea f83a 	bl	8003e30 <_write>
 8019dbc:	1c43      	adds	r3, r0, #1
 8019dbe:	d102      	bne.n	8019dc6 <_write_r+0x1e>
 8019dc0:	682b      	ldr	r3, [r5, #0]
 8019dc2:	b103      	cbz	r3, 8019dc6 <_write_r+0x1e>
 8019dc4:	6023      	str	r3, [r4, #0]
 8019dc6:	bd38      	pop	{r3, r4, r5, pc}
 8019dc8:	2000cc30 	.word	0x2000cc30

08019dcc <__errno>:
 8019dcc:	4b01      	ldr	r3, [pc, #4]	@ (8019dd4 <__errno+0x8>)
 8019dce:	6818      	ldr	r0, [r3, #0]
 8019dd0:	4770      	bx	lr
 8019dd2:	bf00      	nop
 8019dd4:	20000114 	.word	0x20000114

08019dd8 <__libc_init_array>:
 8019dd8:	b570      	push	{r4, r5, r6, lr}
 8019dda:	4d0d      	ldr	r5, [pc, #52]	@ (8019e10 <__libc_init_array+0x38>)
 8019ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8019e14 <__libc_init_array+0x3c>)
 8019dde:	1b64      	subs	r4, r4, r5
 8019de0:	10a4      	asrs	r4, r4, #2
 8019de2:	2600      	movs	r6, #0
 8019de4:	42a6      	cmp	r6, r4
 8019de6:	d109      	bne.n	8019dfc <__libc_init_array+0x24>
 8019de8:	4d0b      	ldr	r5, [pc, #44]	@ (8019e18 <__libc_init_array+0x40>)
 8019dea:	4c0c      	ldr	r4, [pc, #48]	@ (8019e1c <__libc_init_array+0x44>)
 8019dec:	f006 f980 	bl	80200f0 <_init>
 8019df0:	1b64      	subs	r4, r4, r5
 8019df2:	10a4      	asrs	r4, r4, #2
 8019df4:	2600      	movs	r6, #0
 8019df6:	42a6      	cmp	r6, r4
 8019df8:	d105      	bne.n	8019e06 <__libc_init_array+0x2e>
 8019dfa:	bd70      	pop	{r4, r5, r6, pc}
 8019dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e00:	4798      	blx	r3
 8019e02:	3601      	adds	r6, #1
 8019e04:	e7ee      	b.n	8019de4 <__libc_init_array+0xc>
 8019e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e0a:	4798      	blx	r3
 8019e0c:	3601      	adds	r6, #1
 8019e0e:	e7f2      	b.n	8019df6 <__libc_init_array+0x1e>
 8019e10:	08020d50 	.word	0x08020d50
 8019e14:	08020d50 	.word	0x08020d50
 8019e18:	08020d50 	.word	0x08020d50
 8019e1c:	08020d58 	.word	0x08020d58

08019e20 <__retarget_lock_init_recursive>:
 8019e20:	4770      	bx	lr

08019e22 <__retarget_lock_close_recursive>:
 8019e22:	4770      	bx	lr

08019e24 <__retarget_lock_acquire_recursive>:
 8019e24:	4770      	bx	lr

08019e26 <__retarget_lock_release_recursive>:
 8019e26:	4770      	bx	lr

08019e28 <memcpy>:
 8019e28:	440a      	add	r2, r1
 8019e2a:	4291      	cmp	r1, r2
 8019e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019e30:	d100      	bne.n	8019e34 <memcpy+0xc>
 8019e32:	4770      	bx	lr
 8019e34:	b510      	push	{r4, lr}
 8019e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019e3e:	4291      	cmp	r1, r2
 8019e40:	d1f9      	bne.n	8019e36 <memcpy+0xe>
 8019e42:	bd10      	pop	{r4, pc}

08019e44 <register_fini>:
 8019e44:	4b02      	ldr	r3, [pc, #8]	@ (8019e50 <register_fini+0xc>)
 8019e46:	b113      	cbz	r3, 8019e4e <register_fini+0xa>
 8019e48:	4802      	ldr	r0, [pc, #8]	@ (8019e54 <register_fini+0x10>)
 8019e4a:	f000 b805 	b.w	8019e58 <atexit>
 8019e4e:	4770      	bx	lr
 8019e50:	00000000 	.word	0x00000000
 8019e54:	0801de5d 	.word	0x0801de5d

08019e58 <atexit>:
 8019e58:	2300      	movs	r3, #0
 8019e5a:	4601      	mov	r1, r0
 8019e5c:	461a      	mov	r2, r3
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f004 b852 	b.w	801df08 <__register_exitproc>

08019e64 <_malloc_trim_r>:
 8019e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e68:	4606      	mov	r6, r0
 8019e6a:	2008      	movs	r0, #8
 8019e6c:	4689      	mov	r9, r1
 8019e6e:	f004 f809 	bl	801de84 <sysconf>
 8019e72:	4f24      	ldr	r7, [pc, #144]	@ (8019f04 <_malloc_trim_r+0xa0>)
 8019e74:	4680      	mov	r8, r0
 8019e76:	4630      	mov	r0, r6
 8019e78:	f000 fb44 	bl	801a504 <__malloc_lock>
 8019e7c:	68bb      	ldr	r3, [r7, #8]
 8019e7e:	685d      	ldr	r5, [r3, #4]
 8019e80:	f025 0503 	bic.w	r5, r5, #3
 8019e84:	f1a5 0411 	sub.w	r4, r5, #17
 8019e88:	eba4 0409 	sub.w	r4, r4, r9
 8019e8c:	4444      	add	r4, r8
 8019e8e:	fbb4 f4f8 	udiv	r4, r4, r8
 8019e92:	3c01      	subs	r4, #1
 8019e94:	fb08 f404 	mul.w	r4, r8, r4
 8019e98:	45a0      	cmp	r8, r4
 8019e9a:	dd05      	ble.n	8019ea8 <_malloc_trim_r+0x44>
 8019e9c:	4630      	mov	r0, r6
 8019e9e:	f000 fb37 	bl	801a510 <__malloc_unlock>
 8019ea2:	2000      	movs	r0, #0
 8019ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ea8:	2100      	movs	r1, #0
 8019eaa:	4630      	mov	r0, r6
 8019eac:	f003 ffc6 	bl	801de3c <_sbrk_r>
 8019eb0:	68bb      	ldr	r3, [r7, #8]
 8019eb2:	442b      	add	r3, r5
 8019eb4:	4298      	cmp	r0, r3
 8019eb6:	d1f1      	bne.n	8019e9c <_malloc_trim_r+0x38>
 8019eb8:	4261      	negs	r1, r4
 8019eba:	4630      	mov	r0, r6
 8019ebc:	f003 ffbe 	bl	801de3c <_sbrk_r>
 8019ec0:	3001      	adds	r0, #1
 8019ec2:	d110      	bne.n	8019ee6 <_malloc_trim_r+0x82>
 8019ec4:	2100      	movs	r1, #0
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	f003 ffb8 	bl	801de3c <_sbrk_r>
 8019ecc:	68ba      	ldr	r2, [r7, #8]
 8019ece:	1a83      	subs	r3, r0, r2
 8019ed0:	2b0f      	cmp	r3, #15
 8019ed2:	dde3      	ble.n	8019e9c <_malloc_trim_r+0x38>
 8019ed4:	490c      	ldr	r1, [pc, #48]	@ (8019f08 <_malloc_trim_r+0xa4>)
 8019ed6:	6809      	ldr	r1, [r1, #0]
 8019ed8:	1a40      	subs	r0, r0, r1
 8019eda:	490c      	ldr	r1, [pc, #48]	@ (8019f0c <_malloc_trim_r+0xa8>)
 8019edc:	f043 0301 	orr.w	r3, r3, #1
 8019ee0:	6008      	str	r0, [r1, #0]
 8019ee2:	6053      	str	r3, [r2, #4]
 8019ee4:	e7da      	b.n	8019e9c <_malloc_trim_r+0x38>
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	4a08      	ldr	r2, [pc, #32]	@ (8019f0c <_malloc_trim_r+0xa8>)
 8019eea:	1b2d      	subs	r5, r5, r4
 8019eec:	f045 0501 	orr.w	r5, r5, #1
 8019ef0:	605d      	str	r5, [r3, #4]
 8019ef2:	6813      	ldr	r3, [r2, #0]
 8019ef4:	4630      	mov	r0, r6
 8019ef6:	1b1b      	subs	r3, r3, r4
 8019ef8:	6013      	str	r3, [r2, #0]
 8019efa:	f000 fb09 	bl	801a510 <__malloc_unlock>
 8019efe:	2001      	movs	r0, #1
 8019f00:	e7d0      	b.n	8019ea4 <_malloc_trim_r+0x40>
 8019f02:	bf00      	nop
 8019f04:	20000244 	.word	0x20000244
 8019f08:	2000023c 	.word	0x2000023c
 8019f0c:	2000cc3c 	.word	0x2000cc3c

08019f10 <_free_r>:
 8019f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f12:	4604      	mov	r4, r0
 8019f14:	460f      	mov	r7, r1
 8019f16:	2900      	cmp	r1, #0
 8019f18:	f000 80b1 	beq.w	801a07e <_free_r+0x16e>
 8019f1c:	f000 faf2 	bl	801a504 <__malloc_lock>
 8019f20:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019f24:	4d56      	ldr	r5, [pc, #344]	@ (801a080 <_free_r+0x170>)
 8019f26:	f022 0001 	bic.w	r0, r2, #1
 8019f2a:	f1a7 0308 	sub.w	r3, r7, #8
 8019f2e:	eb03 0c00 	add.w	ip, r3, r0
 8019f32:	68a9      	ldr	r1, [r5, #8]
 8019f34:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019f38:	4561      	cmp	r1, ip
 8019f3a:	f026 0603 	bic.w	r6, r6, #3
 8019f3e:	f002 0201 	and.w	r2, r2, #1
 8019f42:	d11b      	bne.n	8019f7c <_free_r+0x6c>
 8019f44:	4406      	add	r6, r0
 8019f46:	b93a      	cbnz	r2, 8019f58 <_free_r+0x48>
 8019f48:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8019f4c:	1a9b      	subs	r3, r3, r2
 8019f4e:	4416      	add	r6, r2
 8019f50:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8019f54:	60ca      	str	r2, [r1, #12]
 8019f56:	6091      	str	r1, [r2, #8]
 8019f58:	f046 0201 	orr.w	r2, r6, #1
 8019f5c:	605a      	str	r2, [r3, #4]
 8019f5e:	60ab      	str	r3, [r5, #8]
 8019f60:	4b48      	ldr	r3, [pc, #288]	@ (801a084 <_free_r+0x174>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	42b3      	cmp	r3, r6
 8019f66:	d804      	bhi.n	8019f72 <_free_r+0x62>
 8019f68:	4b47      	ldr	r3, [pc, #284]	@ (801a088 <_free_r+0x178>)
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	6819      	ldr	r1, [r3, #0]
 8019f6e:	f7ff ff79 	bl	8019e64 <_malloc_trim_r>
 8019f72:	4620      	mov	r0, r4
 8019f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f78:	f000 baca 	b.w	801a510 <__malloc_unlock>
 8019f7c:	f8cc 6004 	str.w	r6, [ip, #4]
 8019f80:	2a00      	cmp	r2, #0
 8019f82:	d138      	bne.n	8019ff6 <_free_r+0xe6>
 8019f84:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8019f88:	1a5b      	subs	r3, r3, r1
 8019f8a:	4408      	add	r0, r1
 8019f8c:	6899      	ldr	r1, [r3, #8]
 8019f8e:	f105 0708 	add.w	r7, r5, #8
 8019f92:	42b9      	cmp	r1, r7
 8019f94:	d031      	beq.n	8019ffa <_free_r+0xea>
 8019f96:	68df      	ldr	r7, [r3, #12]
 8019f98:	60cf      	str	r7, [r1, #12]
 8019f9a:	60b9      	str	r1, [r7, #8]
 8019f9c:	eb0c 0106 	add.w	r1, ip, r6
 8019fa0:	6849      	ldr	r1, [r1, #4]
 8019fa2:	07c9      	lsls	r1, r1, #31
 8019fa4:	d40b      	bmi.n	8019fbe <_free_r+0xae>
 8019fa6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8019faa:	4430      	add	r0, r6
 8019fac:	bb3a      	cbnz	r2, 8019ffe <_free_r+0xee>
 8019fae:	4e37      	ldr	r6, [pc, #220]	@ (801a08c <_free_r+0x17c>)
 8019fb0:	42b1      	cmp	r1, r6
 8019fb2:	d124      	bne.n	8019ffe <_free_r+0xee>
 8019fb4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8019fb8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8019fbc:	2201      	movs	r2, #1
 8019fbe:	f040 0101 	orr.w	r1, r0, #1
 8019fc2:	6059      	str	r1, [r3, #4]
 8019fc4:	5018      	str	r0, [r3, r0]
 8019fc6:	2a00      	cmp	r2, #0
 8019fc8:	d1d3      	bne.n	8019f72 <_free_r+0x62>
 8019fca:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8019fce:	d21b      	bcs.n	801a008 <_free_r+0xf8>
 8019fd0:	08c2      	lsrs	r2, r0, #3
 8019fd2:	2101      	movs	r1, #1
 8019fd4:	0940      	lsrs	r0, r0, #5
 8019fd6:	4081      	lsls	r1, r0
 8019fd8:	6868      	ldr	r0, [r5, #4]
 8019fda:	3201      	adds	r2, #1
 8019fdc:	4301      	orrs	r1, r0
 8019fde:	6069      	str	r1, [r5, #4]
 8019fe0:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8019fe4:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8019fe8:	3908      	subs	r1, #8
 8019fea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019fee:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8019ff2:	60c3      	str	r3, [r0, #12]
 8019ff4:	e7bd      	b.n	8019f72 <_free_r+0x62>
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	e7d0      	b.n	8019f9c <_free_r+0x8c>
 8019ffa:	2201      	movs	r2, #1
 8019ffc:	e7ce      	b.n	8019f9c <_free_r+0x8c>
 8019ffe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801a002:	60ce      	str	r6, [r1, #12]
 801a004:	60b1      	str	r1, [r6, #8]
 801a006:	e7da      	b.n	8019fbe <_free_r+0xae>
 801a008:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 801a00c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 801a010:	d214      	bcs.n	801a03c <_free_r+0x12c>
 801a012:	0982      	lsrs	r2, r0, #6
 801a014:	3238      	adds	r2, #56	@ 0x38
 801a016:	1c51      	adds	r1, r2, #1
 801a018:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801a01c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801a020:	428e      	cmp	r6, r1
 801a022:	d125      	bne.n	801a070 <_free_r+0x160>
 801a024:	2001      	movs	r0, #1
 801a026:	1092      	asrs	r2, r2, #2
 801a028:	fa00 f202 	lsl.w	r2, r0, r2
 801a02c:	6868      	ldr	r0, [r5, #4]
 801a02e:	4302      	orrs	r2, r0
 801a030:	606a      	str	r2, [r5, #4]
 801a032:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801a036:	60b3      	str	r3, [r6, #8]
 801a038:	60cb      	str	r3, [r1, #12]
 801a03a:	e79a      	b.n	8019f72 <_free_r+0x62>
 801a03c:	2a14      	cmp	r2, #20
 801a03e:	d801      	bhi.n	801a044 <_free_r+0x134>
 801a040:	325b      	adds	r2, #91	@ 0x5b
 801a042:	e7e8      	b.n	801a016 <_free_r+0x106>
 801a044:	2a54      	cmp	r2, #84	@ 0x54
 801a046:	d802      	bhi.n	801a04e <_free_r+0x13e>
 801a048:	0b02      	lsrs	r2, r0, #12
 801a04a:	326e      	adds	r2, #110	@ 0x6e
 801a04c:	e7e3      	b.n	801a016 <_free_r+0x106>
 801a04e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801a052:	d802      	bhi.n	801a05a <_free_r+0x14a>
 801a054:	0bc2      	lsrs	r2, r0, #15
 801a056:	3277      	adds	r2, #119	@ 0x77
 801a058:	e7dd      	b.n	801a016 <_free_r+0x106>
 801a05a:	f240 5154 	movw	r1, #1364	@ 0x554
 801a05e:	428a      	cmp	r2, r1
 801a060:	bf9a      	itte	ls
 801a062:	0c82      	lsrls	r2, r0, #18
 801a064:	327c      	addls	r2, #124	@ 0x7c
 801a066:	227e      	movhi	r2, #126	@ 0x7e
 801a068:	e7d5      	b.n	801a016 <_free_r+0x106>
 801a06a:	6889      	ldr	r1, [r1, #8]
 801a06c:	428e      	cmp	r6, r1
 801a06e:	d004      	beq.n	801a07a <_free_r+0x16a>
 801a070:	684a      	ldr	r2, [r1, #4]
 801a072:	f022 0203 	bic.w	r2, r2, #3
 801a076:	4282      	cmp	r2, r0
 801a078:	d8f7      	bhi.n	801a06a <_free_r+0x15a>
 801a07a:	68ce      	ldr	r6, [r1, #12]
 801a07c:	e7d9      	b.n	801a032 <_free_r+0x122>
 801a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a080:	20000244 	.word	0x20000244
 801a084:	20000240 	.word	0x20000240
 801a088:	2000cc6c 	.word	0x2000cc6c
 801a08c:	2000024c 	.word	0x2000024c

0801a090 <_malloc_r>:
 801a090:	f101 030b 	add.w	r3, r1, #11
 801a094:	2b16      	cmp	r3, #22
 801a096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09a:	4605      	mov	r5, r0
 801a09c:	d906      	bls.n	801a0ac <_malloc_r+0x1c>
 801a09e:	f033 0707 	bics.w	r7, r3, #7
 801a0a2:	d504      	bpl.n	801a0ae <_malloc_r+0x1e>
 801a0a4:	230c      	movs	r3, #12
 801a0a6:	602b      	str	r3, [r5, #0]
 801a0a8:	2400      	movs	r4, #0
 801a0aa:	e1a3      	b.n	801a3f4 <_malloc_r+0x364>
 801a0ac:	2710      	movs	r7, #16
 801a0ae:	42b9      	cmp	r1, r7
 801a0b0:	d8f8      	bhi.n	801a0a4 <_malloc_r+0x14>
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	f000 fa26 	bl	801a504 <__malloc_lock>
 801a0b8:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 801a0bc:	4eaf      	ldr	r6, [pc, #700]	@ (801a37c <_malloc_r+0x2ec>)
 801a0be:	d237      	bcs.n	801a130 <_malloc_r+0xa0>
 801a0c0:	f107 0208 	add.w	r2, r7, #8
 801a0c4:	4432      	add	r2, r6
 801a0c6:	f1a2 0108 	sub.w	r1, r2, #8
 801a0ca:	6854      	ldr	r4, [r2, #4]
 801a0cc:	428c      	cmp	r4, r1
 801a0ce:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801a0d2:	d102      	bne.n	801a0da <_malloc_r+0x4a>
 801a0d4:	68d4      	ldr	r4, [r2, #12]
 801a0d6:	42a2      	cmp	r2, r4
 801a0d8:	d010      	beq.n	801a0fc <_malloc_r+0x6c>
 801a0da:	6863      	ldr	r3, [r4, #4]
 801a0dc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801a0e0:	f023 0303 	bic.w	r3, r3, #3
 801a0e4:	60ca      	str	r2, [r1, #12]
 801a0e6:	4423      	add	r3, r4
 801a0e8:	6091      	str	r1, [r2, #8]
 801a0ea:	685a      	ldr	r2, [r3, #4]
 801a0ec:	f042 0201 	orr.w	r2, r2, #1
 801a0f0:	605a      	str	r2, [r3, #4]
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	f000 fa0c 	bl	801a510 <__malloc_unlock>
 801a0f8:	3408      	adds	r4, #8
 801a0fa:	e17b      	b.n	801a3f4 <_malloc_r+0x364>
 801a0fc:	3302      	adds	r3, #2
 801a0fe:	6934      	ldr	r4, [r6, #16]
 801a100:	499f      	ldr	r1, [pc, #636]	@ (801a380 <_malloc_r+0x2f0>)
 801a102:	428c      	cmp	r4, r1
 801a104:	d077      	beq.n	801a1f6 <_malloc_r+0x166>
 801a106:	6862      	ldr	r2, [r4, #4]
 801a108:	f022 0c03 	bic.w	ip, r2, #3
 801a10c:	ebac 0007 	sub.w	r0, ip, r7
 801a110:	280f      	cmp	r0, #15
 801a112:	dd48      	ble.n	801a1a6 <_malloc_r+0x116>
 801a114:	19e2      	adds	r2, r4, r7
 801a116:	f040 0301 	orr.w	r3, r0, #1
 801a11a:	f047 0701 	orr.w	r7, r7, #1
 801a11e:	6067      	str	r7, [r4, #4]
 801a120:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801a124:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801a128:	6053      	str	r3, [r2, #4]
 801a12a:	f844 000c 	str.w	r0, [r4, ip]
 801a12e:	e7e0      	b.n	801a0f2 <_malloc_r+0x62>
 801a130:	0a7b      	lsrs	r3, r7, #9
 801a132:	d02a      	beq.n	801a18a <_malloc_r+0xfa>
 801a134:	2b04      	cmp	r3, #4
 801a136:	d812      	bhi.n	801a15e <_malloc_r+0xce>
 801a138:	09bb      	lsrs	r3, r7, #6
 801a13a:	3338      	adds	r3, #56	@ 0x38
 801a13c:	1c5a      	adds	r2, r3, #1
 801a13e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801a142:	f1a2 0c08 	sub.w	ip, r2, #8
 801a146:	6854      	ldr	r4, [r2, #4]
 801a148:	4564      	cmp	r4, ip
 801a14a:	d006      	beq.n	801a15a <_malloc_r+0xca>
 801a14c:	6862      	ldr	r2, [r4, #4]
 801a14e:	f022 0203 	bic.w	r2, r2, #3
 801a152:	1bd0      	subs	r0, r2, r7
 801a154:	280f      	cmp	r0, #15
 801a156:	dd1c      	ble.n	801a192 <_malloc_r+0x102>
 801a158:	3b01      	subs	r3, #1
 801a15a:	3301      	adds	r3, #1
 801a15c:	e7cf      	b.n	801a0fe <_malloc_r+0x6e>
 801a15e:	2b14      	cmp	r3, #20
 801a160:	d801      	bhi.n	801a166 <_malloc_r+0xd6>
 801a162:	335b      	adds	r3, #91	@ 0x5b
 801a164:	e7ea      	b.n	801a13c <_malloc_r+0xac>
 801a166:	2b54      	cmp	r3, #84	@ 0x54
 801a168:	d802      	bhi.n	801a170 <_malloc_r+0xe0>
 801a16a:	0b3b      	lsrs	r3, r7, #12
 801a16c:	336e      	adds	r3, #110	@ 0x6e
 801a16e:	e7e5      	b.n	801a13c <_malloc_r+0xac>
 801a170:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801a174:	d802      	bhi.n	801a17c <_malloc_r+0xec>
 801a176:	0bfb      	lsrs	r3, r7, #15
 801a178:	3377      	adds	r3, #119	@ 0x77
 801a17a:	e7df      	b.n	801a13c <_malloc_r+0xac>
 801a17c:	f240 5254 	movw	r2, #1364	@ 0x554
 801a180:	4293      	cmp	r3, r2
 801a182:	d804      	bhi.n	801a18e <_malloc_r+0xfe>
 801a184:	0cbb      	lsrs	r3, r7, #18
 801a186:	337c      	adds	r3, #124	@ 0x7c
 801a188:	e7d8      	b.n	801a13c <_malloc_r+0xac>
 801a18a:	233f      	movs	r3, #63	@ 0x3f
 801a18c:	e7d6      	b.n	801a13c <_malloc_r+0xac>
 801a18e:	237e      	movs	r3, #126	@ 0x7e
 801a190:	e7d4      	b.n	801a13c <_malloc_r+0xac>
 801a192:	2800      	cmp	r0, #0
 801a194:	68e1      	ldr	r1, [r4, #12]
 801a196:	db04      	blt.n	801a1a2 <_malloc_r+0x112>
 801a198:	68a3      	ldr	r3, [r4, #8]
 801a19a:	60d9      	str	r1, [r3, #12]
 801a19c:	608b      	str	r3, [r1, #8]
 801a19e:	18a3      	adds	r3, r4, r2
 801a1a0:	e7a3      	b.n	801a0ea <_malloc_r+0x5a>
 801a1a2:	460c      	mov	r4, r1
 801a1a4:	e7d0      	b.n	801a148 <_malloc_r+0xb8>
 801a1a6:	2800      	cmp	r0, #0
 801a1a8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801a1ac:	db07      	blt.n	801a1be <_malloc_r+0x12e>
 801a1ae:	44a4      	add	ip, r4
 801a1b0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a1b4:	f043 0301 	orr.w	r3, r3, #1
 801a1b8:	f8cc 3004 	str.w	r3, [ip, #4]
 801a1bc:	e799      	b.n	801a0f2 <_malloc_r+0x62>
 801a1be:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801a1c2:	6870      	ldr	r0, [r6, #4]
 801a1c4:	f080 8095 	bcs.w	801a2f2 <_malloc_r+0x262>
 801a1c8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801a1cc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801a1d0:	f04f 0c01 	mov.w	ip, #1
 801a1d4:	3201      	adds	r2, #1
 801a1d6:	fa0c fc0e 	lsl.w	ip, ip, lr
 801a1da:	ea4c 0000 	orr.w	r0, ip, r0
 801a1de:	6070      	str	r0, [r6, #4]
 801a1e0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801a1e4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801a1e8:	3808      	subs	r0, #8
 801a1ea:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801a1ee:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801a1f2:	f8cc 400c 	str.w	r4, [ip, #12]
 801a1f6:	1098      	asrs	r0, r3, #2
 801a1f8:	2201      	movs	r2, #1
 801a1fa:	4082      	lsls	r2, r0
 801a1fc:	6870      	ldr	r0, [r6, #4]
 801a1fe:	4290      	cmp	r0, r2
 801a200:	d326      	bcc.n	801a250 <_malloc_r+0x1c0>
 801a202:	4210      	tst	r0, r2
 801a204:	d106      	bne.n	801a214 <_malloc_r+0x184>
 801a206:	f023 0303 	bic.w	r3, r3, #3
 801a20a:	0052      	lsls	r2, r2, #1
 801a20c:	4210      	tst	r0, r2
 801a20e:	f103 0304 	add.w	r3, r3, #4
 801a212:	d0fa      	beq.n	801a20a <_malloc_r+0x17a>
 801a214:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801a218:	46c1      	mov	r9, r8
 801a21a:	469e      	mov	lr, r3
 801a21c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801a220:	454c      	cmp	r4, r9
 801a222:	f040 80b9 	bne.w	801a398 <_malloc_r+0x308>
 801a226:	f10e 0e01 	add.w	lr, lr, #1
 801a22a:	f01e 0f03 	tst.w	lr, #3
 801a22e:	f109 0908 	add.w	r9, r9, #8
 801a232:	d1f3      	bne.n	801a21c <_malloc_r+0x18c>
 801a234:	0798      	lsls	r0, r3, #30
 801a236:	f040 80e3 	bne.w	801a400 <_malloc_r+0x370>
 801a23a:	6873      	ldr	r3, [r6, #4]
 801a23c:	ea23 0302 	bic.w	r3, r3, r2
 801a240:	6073      	str	r3, [r6, #4]
 801a242:	6870      	ldr	r0, [r6, #4]
 801a244:	0052      	lsls	r2, r2, #1
 801a246:	4290      	cmp	r0, r2
 801a248:	d302      	bcc.n	801a250 <_malloc_r+0x1c0>
 801a24a:	2a00      	cmp	r2, #0
 801a24c:	f040 80e5 	bne.w	801a41a <_malloc_r+0x38a>
 801a250:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801a254:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a258:	f023 0903 	bic.w	r9, r3, #3
 801a25c:	45b9      	cmp	r9, r7
 801a25e:	d304      	bcc.n	801a26a <_malloc_r+0x1da>
 801a260:	eba9 0207 	sub.w	r2, r9, r7
 801a264:	2a0f      	cmp	r2, #15
 801a266:	f300 8141 	bgt.w	801a4ec <_malloc_r+0x45c>
 801a26a:	4b46      	ldr	r3, [pc, #280]	@ (801a384 <_malloc_r+0x2f4>)
 801a26c:	6819      	ldr	r1, [r3, #0]
 801a26e:	3110      	adds	r1, #16
 801a270:	4439      	add	r1, r7
 801a272:	2008      	movs	r0, #8
 801a274:	9101      	str	r1, [sp, #4]
 801a276:	f003 fe05 	bl	801de84 <sysconf>
 801a27a:	4a43      	ldr	r2, [pc, #268]	@ (801a388 <_malloc_r+0x2f8>)
 801a27c:	9901      	ldr	r1, [sp, #4]
 801a27e:	6813      	ldr	r3, [r2, #0]
 801a280:	3301      	adds	r3, #1
 801a282:	bf1f      	itttt	ne
 801a284:	f101 31ff 	addne.w	r1, r1, #4294967295
 801a288:	1809      	addne	r1, r1, r0
 801a28a:	4243      	negne	r3, r0
 801a28c:	4019      	andne	r1, r3
 801a28e:	4680      	mov	r8, r0
 801a290:	4628      	mov	r0, r5
 801a292:	9101      	str	r1, [sp, #4]
 801a294:	f003 fdd2 	bl	801de3c <_sbrk_r>
 801a298:	1c42      	adds	r2, r0, #1
 801a29a:	eb0a 0b09 	add.w	fp, sl, r9
 801a29e:	4604      	mov	r4, r0
 801a2a0:	f000 80f7 	beq.w	801a492 <_malloc_r+0x402>
 801a2a4:	4583      	cmp	fp, r0
 801a2a6:	9901      	ldr	r1, [sp, #4]
 801a2a8:	4a37      	ldr	r2, [pc, #220]	@ (801a388 <_malloc_r+0x2f8>)
 801a2aa:	d902      	bls.n	801a2b2 <_malloc_r+0x222>
 801a2ac:	45b2      	cmp	sl, r6
 801a2ae:	f040 80f0 	bne.w	801a492 <_malloc_r+0x402>
 801a2b2:	4b36      	ldr	r3, [pc, #216]	@ (801a38c <_malloc_r+0x2fc>)
 801a2b4:	6818      	ldr	r0, [r3, #0]
 801a2b6:	45a3      	cmp	fp, r4
 801a2b8:	eb00 0e01 	add.w	lr, r0, r1
 801a2bc:	f8c3 e000 	str.w	lr, [r3]
 801a2c0:	f108 3cff 	add.w	ip, r8, #4294967295
 801a2c4:	f040 80ab 	bne.w	801a41e <_malloc_r+0x38e>
 801a2c8:	ea1b 0f0c 	tst.w	fp, ip
 801a2cc:	f040 80a7 	bne.w	801a41e <_malloc_r+0x38e>
 801a2d0:	68b2      	ldr	r2, [r6, #8]
 801a2d2:	4449      	add	r1, r9
 801a2d4:	f041 0101 	orr.w	r1, r1, #1
 801a2d8:	6051      	str	r1, [r2, #4]
 801a2da:	4a2d      	ldr	r2, [pc, #180]	@ (801a390 <_malloc_r+0x300>)
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	6811      	ldr	r1, [r2, #0]
 801a2e0:	428b      	cmp	r3, r1
 801a2e2:	bf88      	it	hi
 801a2e4:	6013      	strhi	r3, [r2, #0]
 801a2e6:	4a2b      	ldr	r2, [pc, #172]	@ (801a394 <_malloc_r+0x304>)
 801a2e8:	6811      	ldr	r1, [r2, #0]
 801a2ea:	428b      	cmp	r3, r1
 801a2ec:	bf88      	it	hi
 801a2ee:	6013      	strhi	r3, [r2, #0]
 801a2f0:	e0cf      	b.n	801a492 <_malloc_r+0x402>
 801a2f2:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801a2f6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801a2fa:	d218      	bcs.n	801a32e <_malloc_r+0x29e>
 801a2fc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801a300:	3238      	adds	r2, #56	@ 0x38
 801a302:	f102 0e01 	add.w	lr, r2, #1
 801a306:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801a30a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801a30e:	45f0      	cmp	r8, lr
 801a310:	d12b      	bne.n	801a36a <_malloc_r+0x2da>
 801a312:	1092      	asrs	r2, r2, #2
 801a314:	f04f 0c01 	mov.w	ip, #1
 801a318:	fa0c f202 	lsl.w	r2, ip, r2
 801a31c:	4302      	orrs	r2, r0
 801a31e:	6072      	str	r2, [r6, #4]
 801a320:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801a324:	f8c8 4008 	str.w	r4, [r8, #8]
 801a328:	f8ce 400c 	str.w	r4, [lr, #12]
 801a32c:	e763      	b.n	801a1f6 <_malloc_r+0x166>
 801a32e:	2a14      	cmp	r2, #20
 801a330:	d801      	bhi.n	801a336 <_malloc_r+0x2a6>
 801a332:	325b      	adds	r2, #91	@ 0x5b
 801a334:	e7e5      	b.n	801a302 <_malloc_r+0x272>
 801a336:	2a54      	cmp	r2, #84	@ 0x54
 801a338:	d803      	bhi.n	801a342 <_malloc_r+0x2b2>
 801a33a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801a33e:	326e      	adds	r2, #110	@ 0x6e
 801a340:	e7df      	b.n	801a302 <_malloc_r+0x272>
 801a342:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801a346:	d803      	bhi.n	801a350 <_malloc_r+0x2c0>
 801a348:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801a34c:	3277      	adds	r2, #119	@ 0x77
 801a34e:	e7d8      	b.n	801a302 <_malloc_r+0x272>
 801a350:	f240 5e54 	movw	lr, #1364	@ 0x554
 801a354:	4572      	cmp	r2, lr
 801a356:	bf9a      	itte	ls
 801a358:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801a35c:	327c      	addls	r2, #124	@ 0x7c
 801a35e:	227e      	movhi	r2, #126	@ 0x7e
 801a360:	e7cf      	b.n	801a302 <_malloc_r+0x272>
 801a362:	f8de e008 	ldr.w	lr, [lr, #8]
 801a366:	45f0      	cmp	r8, lr
 801a368:	d005      	beq.n	801a376 <_malloc_r+0x2e6>
 801a36a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a36e:	f022 0203 	bic.w	r2, r2, #3
 801a372:	4562      	cmp	r2, ip
 801a374:	d8f5      	bhi.n	801a362 <_malloc_r+0x2d2>
 801a376:	f8de 800c 	ldr.w	r8, [lr, #12]
 801a37a:	e7d1      	b.n	801a320 <_malloc_r+0x290>
 801a37c:	20000244 	.word	0x20000244
 801a380:	2000024c 	.word	0x2000024c
 801a384:	2000cc6c 	.word	0x2000cc6c
 801a388:	2000023c 	.word	0x2000023c
 801a38c:	2000cc3c 	.word	0x2000cc3c
 801a390:	2000cc68 	.word	0x2000cc68
 801a394:	2000cc64 	.word	0x2000cc64
 801a398:	6860      	ldr	r0, [r4, #4]
 801a39a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801a39e:	f020 0003 	bic.w	r0, r0, #3
 801a3a2:	eba0 0a07 	sub.w	sl, r0, r7
 801a3a6:	f1ba 0f0f 	cmp.w	sl, #15
 801a3aa:	dd12      	ble.n	801a3d2 <_malloc_r+0x342>
 801a3ac:	68a3      	ldr	r3, [r4, #8]
 801a3ae:	19e2      	adds	r2, r4, r7
 801a3b0:	f047 0701 	orr.w	r7, r7, #1
 801a3b4:	6067      	str	r7, [r4, #4]
 801a3b6:	f8c3 c00c 	str.w	ip, [r3, #12]
 801a3ba:	f8cc 3008 	str.w	r3, [ip, #8]
 801a3be:	f04a 0301 	orr.w	r3, sl, #1
 801a3c2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801a3c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801a3ca:	6053      	str	r3, [r2, #4]
 801a3cc:	f844 a000 	str.w	sl, [r4, r0]
 801a3d0:	e68f      	b.n	801a0f2 <_malloc_r+0x62>
 801a3d2:	f1ba 0f00 	cmp.w	sl, #0
 801a3d6:	db11      	blt.n	801a3fc <_malloc_r+0x36c>
 801a3d8:	4420      	add	r0, r4
 801a3da:	6843      	ldr	r3, [r0, #4]
 801a3dc:	f043 0301 	orr.w	r3, r3, #1
 801a3e0:	6043      	str	r3, [r0, #4]
 801a3e2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	f8c3 c00c 	str.w	ip, [r3, #12]
 801a3ec:	f8cc 3008 	str.w	r3, [ip, #8]
 801a3f0:	f000 f88e 	bl	801a510 <__malloc_unlock>
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	b003      	add	sp, #12
 801a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3fc:	4664      	mov	r4, ip
 801a3fe:	e70f      	b.n	801a220 <_malloc_r+0x190>
 801a400:	f858 0908 	ldr.w	r0, [r8], #-8
 801a404:	4540      	cmp	r0, r8
 801a406:	f103 33ff 	add.w	r3, r3, #4294967295
 801a40a:	f43f af13 	beq.w	801a234 <_malloc_r+0x1a4>
 801a40e:	e718      	b.n	801a242 <_malloc_r+0x1b2>
 801a410:	3304      	adds	r3, #4
 801a412:	0052      	lsls	r2, r2, #1
 801a414:	4210      	tst	r0, r2
 801a416:	d0fb      	beq.n	801a410 <_malloc_r+0x380>
 801a418:	e6fc      	b.n	801a214 <_malloc_r+0x184>
 801a41a:	4673      	mov	r3, lr
 801a41c:	e7fa      	b.n	801a414 <_malloc_r+0x384>
 801a41e:	6810      	ldr	r0, [r2, #0]
 801a420:	3001      	adds	r0, #1
 801a422:	bf1b      	ittet	ne
 801a424:	eba4 0b0b 	subne.w	fp, r4, fp
 801a428:	eb0b 020e 	addne.w	r2, fp, lr
 801a42c:	6014      	streq	r4, [r2, #0]
 801a42e:	601a      	strne	r2, [r3, #0]
 801a430:	f014 0b07 	ands.w	fp, r4, #7
 801a434:	bf1a      	itte	ne
 801a436:	f1cb 0008 	rsbne	r0, fp, #8
 801a43a:	1824      	addne	r4, r4, r0
 801a43c:	4658      	moveq	r0, fp
 801a43e:	1862      	adds	r2, r4, r1
 801a440:	ea02 010c 	and.w	r1, r2, ip
 801a444:	4480      	add	r8, r0
 801a446:	eba8 0801 	sub.w	r8, r8, r1
 801a44a:	ea08 080c 	and.w	r8, r8, ip
 801a44e:	4641      	mov	r1, r8
 801a450:	4628      	mov	r0, r5
 801a452:	9201      	str	r2, [sp, #4]
 801a454:	f003 fcf2 	bl	801de3c <_sbrk_r>
 801a458:	1c43      	adds	r3, r0, #1
 801a45a:	9a01      	ldr	r2, [sp, #4]
 801a45c:	4b28      	ldr	r3, [pc, #160]	@ (801a500 <_malloc_r+0x470>)
 801a45e:	d107      	bne.n	801a470 <_malloc_r+0x3e0>
 801a460:	f1bb 0f00 	cmp.w	fp, #0
 801a464:	d023      	beq.n	801a4ae <_malloc_r+0x41e>
 801a466:	f1ab 0008 	sub.w	r0, fp, #8
 801a46a:	4410      	add	r0, r2
 801a46c:	f04f 0800 	mov.w	r8, #0
 801a470:	681a      	ldr	r2, [r3, #0]
 801a472:	60b4      	str	r4, [r6, #8]
 801a474:	1b00      	subs	r0, r0, r4
 801a476:	4440      	add	r0, r8
 801a478:	4442      	add	r2, r8
 801a47a:	f040 0001 	orr.w	r0, r0, #1
 801a47e:	45b2      	cmp	sl, r6
 801a480:	601a      	str	r2, [r3, #0]
 801a482:	6060      	str	r0, [r4, #4]
 801a484:	f43f af29 	beq.w	801a2da <_malloc_r+0x24a>
 801a488:	f1b9 0f0f 	cmp.w	r9, #15
 801a48c:	d812      	bhi.n	801a4b4 <_malloc_r+0x424>
 801a48e:	2301      	movs	r3, #1
 801a490:	6063      	str	r3, [r4, #4]
 801a492:	68b3      	ldr	r3, [r6, #8]
 801a494:	685b      	ldr	r3, [r3, #4]
 801a496:	f023 0303 	bic.w	r3, r3, #3
 801a49a:	42bb      	cmp	r3, r7
 801a49c:	eba3 0207 	sub.w	r2, r3, r7
 801a4a0:	d301      	bcc.n	801a4a6 <_malloc_r+0x416>
 801a4a2:	2a0f      	cmp	r2, #15
 801a4a4:	dc22      	bgt.n	801a4ec <_malloc_r+0x45c>
 801a4a6:	4628      	mov	r0, r5
 801a4a8:	f000 f832 	bl	801a510 <__malloc_unlock>
 801a4ac:	e5fc      	b.n	801a0a8 <_malloc_r+0x18>
 801a4ae:	4610      	mov	r0, r2
 801a4b0:	46d8      	mov	r8, fp
 801a4b2:	e7dd      	b.n	801a470 <_malloc_r+0x3e0>
 801a4b4:	f8da 2004 	ldr.w	r2, [sl, #4]
 801a4b8:	f1a9 090c 	sub.w	r9, r9, #12
 801a4bc:	f029 0907 	bic.w	r9, r9, #7
 801a4c0:	f002 0201 	and.w	r2, r2, #1
 801a4c4:	ea42 0209 	orr.w	r2, r2, r9
 801a4c8:	f8ca 2004 	str.w	r2, [sl, #4]
 801a4cc:	2105      	movs	r1, #5
 801a4ce:	eb0a 0209 	add.w	r2, sl, r9
 801a4d2:	f1b9 0f0f 	cmp.w	r9, #15
 801a4d6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801a4da:	f67f aefe 	bls.w	801a2da <_malloc_r+0x24a>
 801a4de:	f10a 0108 	add.w	r1, sl, #8
 801a4e2:	4628      	mov	r0, r5
 801a4e4:	f7ff fd14 	bl	8019f10 <_free_r>
 801a4e8:	4b05      	ldr	r3, [pc, #20]	@ (801a500 <_malloc_r+0x470>)
 801a4ea:	e6f6      	b.n	801a2da <_malloc_r+0x24a>
 801a4ec:	68b4      	ldr	r4, [r6, #8]
 801a4ee:	f047 0301 	orr.w	r3, r7, #1
 801a4f2:	4427      	add	r7, r4
 801a4f4:	f042 0201 	orr.w	r2, r2, #1
 801a4f8:	6063      	str	r3, [r4, #4]
 801a4fa:	60b7      	str	r7, [r6, #8]
 801a4fc:	607a      	str	r2, [r7, #4]
 801a4fe:	e5f8      	b.n	801a0f2 <_malloc_r+0x62>
 801a500:	2000cc3c 	.word	0x2000cc3c

0801a504 <__malloc_lock>:
 801a504:	4801      	ldr	r0, [pc, #4]	@ (801a50c <__malloc_lock+0x8>)
 801a506:	f7ff bc8d 	b.w	8019e24 <__retarget_lock_acquire_recursive>
 801a50a:	bf00      	nop
 801a50c:	2000cc34 	.word	0x2000cc34

0801a510 <__malloc_unlock>:
 801a510:	4801      	ldr	r0, [pc, #4]	@ (801a518 <__malloc_unlock+0x8>)
 801a512:	f7ff bc88 	b.w	8019e26 <__retarget_lock_release_recursive>
 801a516:	bf00      	nop
 801a518:	2000cc34 	.word	0x2000cc34
 801a51c:	00000000 	.word	0x00000000

0801a520 <_svfprintf_r>:
 801a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a524:	b0d3      	sub	sp, #332	@ 0x14c
 801a526:	468b      	mov	fp, r1
 801a528:	4691      	mov	r9, r2
 801a52a:	461e      	mov	r6, r3
 801a52c:	9003      	str	r0, [sp, #12]
 801a52e:	f003 fc81 	bl	801de34 <_localeconv_r>
 801a532:	6803      	ldr	r3, [r0, #0]
 801a534:	9316      	str	r3, [sp, #88]	@ 0x58
 801a536:	4618      	mov	r0, r3
 801a538:	f7e5 fe4a 	bl	80001d0 <strlen>
 801a53c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801a540:	900d      	str	r0, [sp, #52]	@ 0x34
 801a542:	061b      	lsls	r3, r3, #24
 801a544:	d515      	bpl.n	801a572 <_svfprintf_r+0x52>
 801a546:	f8db 3010 	ldr.w	r3, [fp, #16]
 801a54a:	b993      	cbnz	r3, 801a572 <_svfprintf_r+0x52>
 801a54c:	9803      	ldr	r0, [sp, #12]
 801a54e:	2140      	movs	r1, #64	@ 0x40
 801a550:	f7ff fd9e 	bl	801a090 <_malloc_r>
 801a554:	f8cb 0000 	str.w	r0, [fp]
 801a558:	f8cb 0010 	str.w	r0, [fp, #16]
 801a55c:	b930      	cbnz	r0, 801a56c <_svfprintf_r+0x4c>
 801a55e:	9a03      	ldr	r2, [sp, #12]
 801a560:	230c      	movs	r3, #12
 801a562:	6013      	str	r3, [r2, #0]
 801a564:	f04f 33ff 	mov.w	r3, #4294967295
 801a568:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a56a:	e1f7      	b.n	801a95c <_svfprintf_r+0x43c>
 801a56c:	2340      	movs	r3, #64	@ 0x40
 801a56e:	f8cb 3014 	str.w	r3, [fp, #20]
 801a572:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 801a7c0 <_svfprintf_r+0x2a0>
 801a576:	2300      	movs	r3, #0
 801a578:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801a57c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801a580:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801a584:	ac29      	add	r4, sp, #164	@ 0xa4
 801a586:	9426      	str	r4, [sp, #152]	@ 0x98
 801a588:	9304      	str	r3, [sp, #16]
 801a58a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a58c:	9312      	str	r3, [sp, #72]	@ 0x48
 801a58e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a590:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a592:	464b      	mov	r3, r9
 801a594:	461d      	mov	r5, r3
 801a596:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a59a:	b10a      	cbz	r2, 801a5a0 <_svfprintf_r+0x80>
 801a59c:	2a25      	cmp	r2, #37	@ 0x25
 801a59e:	d1f9      	bne.n	801a594 <_svfprintf_r+0x74>
 801a5a0:	ebb5 0709 	subs.w	r7, r5, r9
 801a5a4:	d00d      	beq.n	801a5c2 <_svfprintf_r+0xa2>
 801a5a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801a5a8:	443b      	add	r3, r7
 801a5aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 801a5ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801a5ae:	3301      	adds	r3, #1
 801a5b0:	2b07      	cmp	r3, #7
 801a5b2:	e9c4 9700 	strd	r9, r7, [r4]
 801a5b6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801a5b8:	dc75      	bgt.n	801a6a6 <_svfprintf_r+0x186>
 801a5ba:	3408      	adds	r4, #8
 801a5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a5be:	443b      	add	r3, r7
 801a5c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a5c2:	782b      	ldrb	r3, [r5, #0]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	f001 8148 	beq.w	801b85a <_svfprintf_r+0x133a>
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	1c6b      	adds	r3, r5, #1
 801a5ce:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801a5d2:	f04f 38ff 	mov.w	r8, #4294967295
 801a5d6:	920e      	str	r2, [sp, #56]	@ 0x38
 801a5d8:	4615      	mov	r5, r2
 801a5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5de:	9206      	str	r2, [sp, #24]
 801a5e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801a5e2:	9b06      	ldr	r3, [sp, #24]
 801a5e4:	3b20      	subs	r3, #32
 801a5e6:	2b5a      	cmp	r3, #90	@ 0x5a
 801a5e8:	f200 85a4 	bhi.w	801b134 <_svfprintf_r+0xc14>
 801a5ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a5f0:	05a2009d 	.word	0x05a2009d
 801a5f4:	00a505a2 	.word	0x00a505a2
 801a5f8:	05a205a2 	.word	0x05a205a2
 801a5fc:	008505a2 	.word	0x008505a2
 801a600:	05a205a2 	.word	0x05a205a2
 801a604:	00b200a8 	.word	0x00b200a8
 801a608:	00af05a2 	.word	0x00af05a2
 801a60c:	05a200b4 	.word	0x05a200b4
 801a610:	00d100ce 	.word	0x00d100ce
 801a614:	00d100d1 	.word	0x00d100d1
 801a618:	00d100d1 	.word	0x00d100d1
 801a61c:	00d100d1 	.word	0x00d100d1
 801a620:	00d100d1 	.word	0x00d100d1
 801a624:	05a205a2 	.word	0x05a205a2
 801a628:	05a205a2 	.word	0x05a205a2
 801a62c:	05a205a2 	.word	0x05a205a2
 801a630:	014705a2 	.word	0x014705a2
 801a634:	010805a2 	.word	0x010805a2
 801a638:	0147011b 	.word	0x0147011b
 801a63c:	01470147 	.word	0x01470147
 801a640:	05a205a2 	.word	0x05a205a2
 801a644:	05a205a2 	.word	0x05a205a2
 801a648:	05a200e2 	.word	0x05a200e2
 801a64c:	049d05a2 	.word	0x049d05a2
 801a650:	05a205a2 	.word	0x05a205a2
 801a654:	04e705a2 	.word	0x04e705a2
 801a658:	050805a2 	.word	0x050805a2
 801a65c:	05a205a2 	.word	0x05a205a2
 801a660:	05a2052a 	.word	0x05a2052a
 801a664:	05a205a2 	.word	0x05a205a2
 801a668:	05a205a2 	.word	0x05a205a2
 801a66c:	05a205a2 	.word	0x05a205a2
 801a670:	014705a2 	.word	0x014705a2
 801a674:	010805a2 	.word	0x010805a2
 801a678:	0147011d 	.word	0x0147011d
 801a67c:	01470147 	.word	0x01470147
 801a680:	011d00ee 	.word	0x011d00ee
 801a684:	05a20102 	.word	0x05a20102
 801a688:	05a200fb 	.word	0x05a200fb
 801a68c:	049f047e 	.word	0x049f047e
 801a690:	010204d6 	.word	0x010204d6
 801a694:	04e705a2 	.word	0x04e705a2
 801a698:	050a009b 	.word	0x050a009b
 801a69c:	05a205a2 	.word	0x05a205a2
 801a6a0:	05a20065 	.word	0x05a20065
 801a6a4:	009b      	.short	0x009b
 801a6a6:	9803      	ldr	r0, [sp, #12]
 801a6a8:	aa26      	add	r2, sp, #152	@ 0x98
 801a6aa:	4659      	mov	r1, fp
 801a6ac:	f004 ffb2 	bl	801f614 <__ssprint_r>
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	f040 814e 	bne.w	801a952 <_svfprintf_r+0x432>
 801a6b6:	ac29      	add	r4, sp, #164	@ 0xa4
 801a6b8:	e780      	b.n	801a5bc <_svfprintf_r+0x9c>
 801a6ba:	4b43      	ldr	r3, [pc, #268]	@ (801a7c8 <_svfprintf_r+0x2a8>)
 801a6bc:	9319      	str	r3, [sp, #100]	@ 0x64
 801a6be:	f015 0320 	ands.w	r3, r5, #32
 801a6c2:	f000 84c2 	beq.w	801b04a <_svfprintf_r+0xb2a>
 801a6c6:	3607      	adds	r6, #7
 801a6c8:	f026 0307 	bic.w	r3, r6, #7
 801a6cc:	461a      	mov	r2, r3
 801a6ce:	685f      	ldr	r7, [r3, #4]
 801a6d0:	f852 6b08 	ldr.w	r6, [r2], #8
 801a6d4:	9207      	str	r2, [sp, #28]
 801a6d6:	07eb      	lsls	r3, r5, #31
 801a6d8:	d50a      	bpl.n	801a6f0 <_svfprintf_r+0x1d0>
 801a6da:	ea56 0307 	orrs.w	r3, r6, r7
 801a6de:	d007      	beq.n	801a6f0 <_svfprintf_r+0x1d0>
 801a6e0:	2330      	movs	r3, #48	@ 0x30
 801a6e2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801a6e6:	9b06      	ldr	r3, [sp, #24]
 801a6e8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801a6ec:	f045 0502 	orr.w	r5, r5, #2
 801a6f0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801a6f4:	2302      	movs	r3, #2
 801a6f6:	f000 bc28 	b.w	801af4a <_svfprintf_r+0xa2a>
 801a6fa:	9803      	ldr	r0, [sp, #12]
 801a6fc:	f003 fb9a 	bl	801de34 <_localeconv_r>
 801a700:	6843      	ldr	r3, [r0, #4]
 801a702:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a704:	4618      	mov	r0, r3
 801a706:	f7e5 fd63 	bl	80001d0 <strlen>
 801a70a:	9012      	str	r0, [sp, #72]	@ 0x48
 801a70c:	9803      	ldr	r0, [sp, #12]
 801a70e:	f003 fb91 	bl	801de34 <_localeconv_r>
 801a712:	6883      	ldr	r3, [r0, #8]
 801a714:	9309      	str	r3, [sp, #36]	@ 0x24
 801a716:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a718:	b12b      	cbz	r3, 801a726 <_svfprintf_r+0x206>
 801a71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a71c:	b11b      	cbz	r3, 801a726 <_svfprintf_r+0x206>
 801a71e:	781b      	ldrb	r3, [r3, #0]
 801a720:	b10b      	cbz	r3, 801a726 <_svfprintf_r+0x206>
 801a722:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801a726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a728:	e757      	b.n	801a5da <_svfprintf_r+0xba>
 801a72a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d1f9      	bne.n	801a726 <_svfprintf_r+0x206>
 801a732:	2320      	movs	r3, #32
 801a734:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801a738:	e7f5      	b.n	801a726 <_svfprintf_r+0x206>
 801a73a:	f045 0501 	orr.w	r5, r5, #1
 801a73e:	e7f2      	b.n	801a726 <_svfprintf_r+0x206>
 801a740:	f856 3b04 	ldr.w	r3, [r6], #4
 801a744:	930e      	str	r3, [sp, #56]	@ 0x38
 801a746:	2b00      	cmp	r3, #0
 801a748:	daed      	bge.n	801a726 <_svfprintf_r+0x206>
 801a74a:	425b      	negs	r3, r3
 801a74c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a74e:	f045 0504 	orr.w	r5, r5, #4
 801a752:	e7e8      	b.n	801a726 <_svfprintf_r+0x206>
 801a754:	232b      	movs	r3, #43	@ 0x2b
 801a756:	e7ed      	b.n	801a734 <_svfprintf_r+0x214>
 801a758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a75e:	9206      	str	r2, [sp, #24]
 801a760:	2a2a      	cmp	r2, #42	@ 0x2a
 801a762:	d10f      	bne.n	801a784 <_svfprintf_r+0x264>
 801a764:	f856 2b04 	ldr.w	r2, [r6], #4
 801a768:	930c      	str	r3, [sp, #48]	@ 0x30
 801a76a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 801a76e:	e7da      	b.n	801a726 <_svfprintf_r+0x206>
 801a770:	fb01 2808 	mla	r8, r1, r8, r2
 801a774:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a778:	9206      	str	r2, [sp, #24]
 801a77a:	9a06      	ldr	r2, [sp, #24]
 801a77c:	3a30      	subs	r2, #48	@ 0x30
 801a77e:	2a09      	cmp	r2, #9
 801a780:	d9f6      	bls.n	801a770 <_svfprintf_r+0x250>
 801a782:	e72d      	b.n	801a5e0 <_svfprintf_r+0xc0>
 801a784:	f04f 0800 	mov.w	r8, #0
 801a788:	210a      	movs	r1, #10
 801a78a:	e7f6      	b.n	801a77a <_svfprintf_r+0x25a>
 801a78c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801a790:	e7c9      	b.n	801a726 <_svfprintf_r+0x206>
 801a792:	2200      	movs	r2, #0
 801a794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a796:	920e      	str	r2, [sp, #56]	@ 0x38
 801a798:	210a      	movs	r1, #10
 801a79a:	9a06      	ldr	r2, [sp, #24]
 801a79c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a79e:	3a30      	subs	r2, #48	@ 0x30
 801a7a0:	fb01 2200 	mla	r2, r1, r0, r2
 801a7a4:	920e      	str	r2, [sp, #56]	@ 0x38
 801a7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7aa:	9206      	str	r2, [sp, #24]
 801a7ac:	3a30      	subs	r2, #48	@ 0x30
 801a7ae:	2a09      	cmp	r2, #9
 801a7b0:	d9f3      	bls.n	801a79a <_svfprintf_r+0x27a>
 801a7b2:	e715      	b.n	801a5e0 <_svfprintf_r+0xc0>
 801a7b4:	f045 0508 	orr.w	r5, r5, #8
 801a7b8:	e7b5      	b.n	801a726 <_svfprintf_r+0x206>
 801a7ba:	bf00      	nop
 801a7bc:	f3af 8000 	nop.w
	...
 801a7c8:	08020938 	.word	0x08020938
 801a7cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7ce:	781b      	ldrb	r3, [r3, #0]
 801a7d0:	2b68      	cmp	r3, #104	@ 0x68
 801a7d2:	bf01      	itttt	eq
 801a7d4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801a7d6:	3301      	addeq	r3, #1
 801a7d8:	930c      	streq	r3, [sp, #48]	@ 0x30
 801a7da:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801a7de:	bf18      	it	ne
 801a7e0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801a7e4:	e79f      	b.n	801a726 <_svfprintf_r+0x206>
 801a7e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7e8:	781b      	ldrb	r3, [r3, #0]
 801a7ea:	2b6c      	cmp	r3, #108	@ 0x6c
 801a7ec:	d105      	bne.n	801a7fa <_svfprintf_r+0x2da>
 801a7ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	930c      	str	r3, [sp, #48]	@ 0x30
 801a7f4:	f045 0520 	orr.w	r5, r5, #32
 801a7f8:	e795      	b.n	801a726 <_svfprintf_r+0x206>
 801a7fa:	f045 0510 	orr.w	r5, r5, #16
 801a7fe:	e792      	b.n	801a726 <_svfprintf_r+0x206>
 801a800:	4632      	mov	r2, r6
 801a802:	f852 3b04 	ldr.w	r3, [r2], #4
 801a806:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801a80a:	2300      	movs	r3, #0
 801a80c:	9207      	str	r2, [sp, #28]
 801a80e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801a812:	469a      	mov	sl, r3
 801a814:	f04f 0801 	mov.w	r8, #1
 801a818:	9310      	str	r3, [sp, #64]	@ 0x40
 801a81a:	461f      	mov	r7, r3
 801a81c:	9308      	str	r3, [sp, #32]
 801a81e:	461e      	mov	r6, r3
 801a820:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801a824:	e1d2      	b.n	801abcc <_svfprintf_r+0x6ac>
 801a826:	f045 0510 	orr.w	r5, r5, #16
 801a82a:	06af      	lsls	r7, r5, #26
 801a82c:	d512      	bpl.n	801a854 <_svfprintf_r+0x334>
 801a82e:	3607      	adds	r6, #7
 801a830:	f026 0307 	bic.w	r3, r6, #7
 801a834:	461a      	mov	r2, r3
 801a836:	685f      	ldr	r7, [r3, #4]
 801a838:	f852 6b08 	ldr.w	r6, [r2], #8
 801a83c:	9207      	str	r2, [sp, #28]
 801a83e:	2f00      	cmp	r7, #0
 801a840:	da06      	bge.n	801a850 <_svfprintf_r+0x330>
 801a842:	4276      	negs	r6, r6
 801a844:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801a848:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801a84c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801a850:	2301      	movs	r3, #1
 801a852:	e37d      	b.n	801af50 <_svfprintf_r+0xa30>
 801a854:	4633      	mov	r3, r6
 801a856:	06ee      	lsls	r6, r5, #27
 801a858:	f853 7b04 	ldr.w	r7, [r3], #4
 801a85c:	9307      	str	r3, [sp, #28]
 801a85e:	d502      	bpl.n	801a866 <_svfprintf_r+0x346>
 801a860:	463e      	mov	r6, r7
 801a862:	17ff      	asrs	r7, r7, #31
 801a864:	e7eb      	b.n	801a83e <_svfprintf_r+0x31e>
 801a866:	0668      	lsls	r0, r5, #25
 801a868:	d503      	bpl.n	801a872 <_svfprintf_r+0x352>
 801a86a:	b23e      	sxth	r6, r7
 801a86c:	f347 37c0 	sbfx	r7, r7, #15, #1
 801a870:	e7e5      	b.n	801a83e <_svfprintf_r+0x31e>
 801a872:	05a9      	lsls	r1, r5, #22
 801a874:	d5f4      	bpl.n	801a860 <_svfprintf_r+0x340>
 801a876:	b27e      	sxtb	r6, r7
 801a878:	f347 17c0 	sbfx	r7, r7, #7, #1
 801a87c:	e7df      	b.n	801a83e <_svfprintf_r+0x31e>
 801a87e:	3607      	adds	r6, #7
 801a880:	f026 0307 	bic.w	r3, r6, #7
 801a884:	ecb3 7b02 	vldmia	r3!, {d7}
 801a888:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801a88c:	9307      	str	r3, [sp, #28]
 801a88e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a890:	931a      	str	r3, [sp, #104]	@ 0x68
 801a892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a898:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a89a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801a89e:	4b81      	ldr	r3, [pc, #516]	@ (801aaa4 <_svfprintf_r+0x584>)
 801a8a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a8a4:	f7e6 f942 	bl	8000b2c <__aeabi_dcmpun>
 801a8a8:	bb10      	cbnz	r0, 801a8f0 <_svfprintf_r+0x3d0>
 801a8aa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801a8ae:	4b7d      	ldr	r3, [pc, #500]	@ (801aaa4 <_svfprintf_r+0x584>)
 801a8b0:	f04f 32ff 	mov.w	r2, #4294967295
 801a8b4:	f7e6 f91c 	bl	8000af0 <__aeabi_dcmple>
 801a8b8:	b9d0      	cbnz	r0, 801a8f0 <_svfprintf_r+0x3d0>
 801a8ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a8be:	2200      	movs	r2, #0
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	f7e6 f90b 	bl	8000adc <__aeabi_dcmplt>
 801a8c6:	b110      	cbz	r0, 801a8ce <_svfprintf_r+0x3ae>
 801a8c8:	232d      	movs	r3, #45	@ 0x2d
 801a8ca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801a8ce:	4a76      	ldr	r2, [pc, #472]	@ (801aaa8 <_svfprintf_r+0x588>)
 801a8d0:	4b76      	ldr	r3, [pc, #472]	@ (801aaac <_svfprintf_r+0x58c>)
 801a8d2:	9906      	ldr	r1, [sp, #24]
 801a8d4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801a8d8:	2947      	cmp	r1, #71	@ 0x47
 801a8da:	bfd4      	ite	le
 801a8dc:	4691      	movle	r9, r2
 801a8de:	4699      	movgt	r9, r3
 801a8e0:	f04f 0a00 	mov.w	sl, #0
 801a8e4:	f04f 0803 	mov.w	r8, #3
 801a8e8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801a8ec:	f000 bfec 	b.w	801b8c8 <_svfprintf_r+0x13a8>
 801a8f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801a8f4:	4610      	mov	r0, r2
 801a8f6:	4619      	mov	r1, r3
 801a8f8:	f7e6 f918 	bl	8000b2c <__aeabi_dcmpun>
 801a8fc:	4682      	mov	sl, r0
 801a8fe:	b140      	cbz	r0, 801a912 <_svfprintf_r+0x3f2>
 801a900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a902:	4a6b      	ldr	r2, [pc, #428]	@ (801aab0 <_svfprintf_r+0x590>)
 801a904:	2b00      	cmp	r3, #0
 801a906:	bfbc      	itt	lt
 801a908:	232d      	movlt	r3, #45	@ 0x2d
 801a90a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801a90e:	4b69      	ldr	r3, [pc, #420]	@ (801aab4 <_svfprintf_r+0x594>)
 801a910:	e7df      	b.n	801a8d2 <_svfprintf_r+0x3b2>
 801a912:	9b06      	ldr	r3, [sp, #24]
 801a914:	2b61      	cmp	r3, #97	@ 0x61
 801a916:	d025      	beq.n	801a964 <_svfprintf_r+0x444>
 801a918:	2b41      	cmp	r3, #65	@ 0x41
 801a91a:	d125      	bne.n	801a968 <_svfprintf_r+0x448>
 801a91c:	2358      	movs	r3, #88	@ 0x58
 801a91e:	2230      	movs	r2, #48	@ 0x30
 801a920:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801a924:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801a928:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801a92c:	f045 0502 	orr.w	r5, r5, #2
 801a930:	f340 80a5 	ble.w	801aa7e <_svfprintf_r+0x55e>
 801a934:	9803      	ldr	r0, [sp, #12]
 801a936:	f108 0101 	add.w	r1, r8, #1
 801a93a:	f7ff fba9 	bl	801a090 <_malloc_r>
 801a93e:	4681      	mov	r9, r0
 801a940:	2800      	cmp	r0, #0
 801a942:	f040 80a1 	bne.w	801aa88 <_svfprintf_r+0x568>
 801a946:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801a94a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a94e:	f8ab 300c 	strh.w	r3, [fp, #12]
 801a952:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801a956:	065b      	lsls	r3, r3, #25
 801a958:	f53f ae04 	bmi.w	801a564 <_svfprintf_r+0x44>
 801a95c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a95e:	b053      	add	sp, #332	@ 0x14c
 801a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a964:	2378      	movs	r3, #120	@ 0x78
 801a966:	e7da      	b.n	801a91e <_svfprintf_r+0x3fe>
 801a968:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a96c:	f000 808e 	beq.w	801aa8c <_svfprintf_r+0x56c>
 801a970:	9b06      	ldr	r3, [sp, #24]
 801a972:	f023 0320 	bic.w	r3, r3, #32
 801a976:	2b47      	cmp	r3, #71	@ 0x47
 801a978:	d105      	bne.n	801a986 <_svfprintf_r+0x466>
 801a97a:	f1b8 0f00 	cmp.w	r8, #0
 801a97e:	d102      	bne.n	801a986 <_svfprintf_r+0x466>
 801a980:	46c2      	mov	sl, r8
 801a982:	f04f 0801 	mov.w	r8, #1
 801a986:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801a98a:	9311      	str	r3, [sp, #68]	@ 0x44
 801a98c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a98e:	2b00      	cmp	r3, #0
 801a990:	da7f      	bge.n	801aa92 <_svfprintf_r+0x572>
 801a992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a994:	9314      	str	r3, [sp, #80]	@ 0x50
 801a996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a998:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801a99c:	9315      	str	r3, [sp, #84]	@ 0x54
 801a99e:	232d      	movs	r3, #45	@ 0x2d
 801a9a0:	931c      	str	r3, [sp, #112]	@ 0x70
 801a9a2:	9b06      	ldr	r3, [sp, #24]
 801a9a4:	f023 0320 	bic.w	r3, r3, #32
 801a9a8:	2b41      	cmp	r3, #65	@ 0x41
 801a9aa:	9308      	str	r3, [sp, #32]
 801a9ac:	f040 81e6 	bne.w	801ad7c <_svfprintf_r+0x85c>
 801a9b0:	a820      	add	r0, sp, #128	@ 0x80
 801a9b2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801a9b6:	f003 fa71 	bl	801de9c <frexp>
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801a9c0:	ec51 0b10 	vmov	r0, r1, d0
 801a9c4:	f7e5 fe18 	bl	80005f8 <__aeabi_dmul>
 801a9c8:	4602      	mov	r2, r0
 801a9ca:	460b      	mov	r3, r1
 801a9cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	f7e6 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 801a9d8:	b108      	cbz	r0, 801a9de <_svfprintf_r+0x4be>
 801a9da:	2301      	movs	r3, #1
 801a9dc:	9320      	str	r3, [sp, #128]	@ 0x80
 801a9de:	4a36      	ldr	r2, [pc, #216]	@ (801aab8 <_svfprintf_r+0x598>)
 801a9e0:	4b36      	ldr	r3, [pc, #216]	@ (801aabc <_svfprintf_r+0x59c>)
 801a9e2:	9906      	ldr	r1, [sp, #24]
 801a9e4:	2961      	cmp	r1, #97	@ 0x61
 801a9e6:	bf18      	it	ne
 801a9e8:	461a      	movne	r2, r3
 801a9ea:	9210      	str	r2, [sp, #64]	@ 0x40
 801a9ec:	f108 37ff 	add.w	r7, r8, #4294967295
 801a9f0:	464e      	mov	r6, r9
 801a9f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a9f6:	4b32      	ldr	r3, [pc, #200]	@ (801aac0 <_svfprintf_r+0x5a0>)
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	f7e5 fdfd 	bl	80005f8 <__aeabi_dmul>
 801a9fe:	4602      	mov	r2, r0
 801aa00:	460b      	mov	r3, r1
 801aa02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aa06:	f7e6 f8a7 	bl	8000b58 <__aeabi_d2iz>
 801aa0a:	9013      	str	r0, [sp, #76]	@ 0x4c
 801aa0c:	f7e5 fd8a 	bl	8000524 <__aeabi_i2d>
 801aa10:	4602      	mov	r2, r0
 801aa12:	460b      	mov	r3, r1
 801aa14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa18:	f7e5 fc36 	bl	8000288 <__aeabi_dsub>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	460b      	mov	r3, r1
 801aa20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aa24:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801aa26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aa28:	5c9b      	ldrb	r3, [r3, r2]
 801aa2a:	f806 3b01 	strb.w	r3, [r6], #1
 801aa2e:	1c7a      	adds	r2, r7, #1
 801aa30:	d006      	beq.n	801aa40 <_svfprintf_r+0x520>
 801aa32:	1e7b      	subs	r3, r7, #1
 801aa34:	931d      	str	r3, [sp, #116]	@ 0x74
 801aa36:	2200      	movs	r2, #0
 801aa38:	2300      	movs	r3, #0
 801aa3a:	f7e6 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 801aa3e:	b370      	cbz	r0, 801aa9e <_svfprintf_r+0x57e>
 801aa40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa44:	4b1f      	ldr	r3, [pc, #124]	@ (801aac4 <_svfprintf_r+0x5a4>)
 801aa46:	2200      	movs	r2, #0
 801aa48:	f7e6 f866 	bl	8000b18 <__aeabi_dcmpgt>
 801aa4c:	2800      	cmp	r0, #0
 801aa4e:	d13b      	bne.n	801aac8 <_svfprintf_r+0x5a8>
 801aa50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa54:	4b1b      	ldr	r3, [pc, #108]	@ (801aac4 <_svfprintf_r+0x5a4>)
 801aa56:	2200      	movs	r2, #0
 801aa58:	f7e6 f836 	bl	8000ac8 <__aeabi_dcmpeq>
 801aa5c:	b110      	cbz	r0, 801aa64 <_svfprintf_r+0x544>
 801aa5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801aa60:	07db      	lsls	r3, r3, #31
 801aa62:	d431      	bmi.n	801aac8 <_svfprintf_r+0x5a8>
 801aa64:	4633      	mov	r3, r6
 801aa66:	19f1      	adds	r1, r6, r7
 801aa68:	2030      	movs	r0, #48	@ 0x30
 801aa6a:	1aca      	subs	r2, r1, r3
 801aa6c:	2a00      	cmp	r2, #0
 801aa6e:	f280 8182 	bge.w	801ad76 <_svfprintf_r+0x856>
 801aa72:	1c7b      	adds	r3, r7, #1
 801aa74:	3701      	adds	r7, #1
 801aa76:	bfb8      	it	lt
 801aa78:	2300      	movlt	r3, #0
 801aa7a:	441e      	add	r6, r3
 801aa7c:	e038      	b.n	801aaf0 <_svfprintf_r+0x5d0>
 801aa7e:	f04f 0a00 	mov.w	sl, #0
 801aa82:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801aa86:	e77e      	b.n	801a986 <_svfprintf_r+0x466>
 801aa88:	4682      	mov	sl, r0
 801aa8a:	e77c      	b.n	801a986 <_svfprintf_r+0x466>
 801aa8c:	f04f 0806 	mov.w	r8, #6
 801aa90:	e779      	b.n	801a986 <_svfprintf_r+0x466>
 801aa92:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801aa96:	2300      	movs	r3, #0
 801aa98:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801aa9c:	e780      	b.n	801a9a0 <_svfprintf_r+0x480>
 801aa9e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801aaa0:	e7a7      	b.n	801a9f2 <_svfprintf_r+0x4d2>
 801aaa2:	bf00      	nop
 801aaa4:	7fefffff 	.word	0x7fefffff
 801aaa8:	08020928 	.word	0x08020928
 801aaac:	0802092c 	.word	0x0802092c
 801aab0:	08020930 	.word	0x08020930
 801aab4:	08020934 	.word	0x08020934
 801aab8:	08020938 	.word	0x08020938
 801aabc:	08020949 	.word	0x08020949
 801aac0:	40300000 	.word	0x40300000
 801aac4:	3fe00000 	.word	0x3fe00000
 801aac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aaca:	9624      	str	r6, [sp, #144]	@ 0x90
 801aacc:	7bd9      	ldrb	r1, [r3, #15]
 801aace:	2030      	movs	r0, #48	@ 0x30
 801aad0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801aad2:	1e53      	subs	r3, r2, #1
 801aad4:	9324      	str	r3, [sp, #144]	@ 0x90
 801aad6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801aada:	428b      	cmp	r3, r1
 801aadc:	f000 8148 	beq.w	801ad70 <_svfprintf_r+0x850>
 801aae0:	2b39      	cmp	r3, #57	@ 0x39
 801aae2:	bf0b      	itete	eq
 801aae4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801aae6:	3301      	addne	r3, #1
 801aae8:	7a9b      	ldrbeq	r3, [r3, #10]
 801aaea:	b2db      	uxtbne	r3, r3
 801aaec:	f802 3c01 	strb.w	r3, [r2, #-1]
 801aaf0:	eba6 0309 	sub.w	r3, r6, r9
 801aaf4:	9304      	str	r3, [sp, #16]
 801aaf6:	9b08      	ldr	r3, [sp, #32]
 801aaf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801aafa:	2b47      	cmp	r3, #71	@ 0x47
 801aafc:	f040 8187 	bne.w	801ae0e <_svfprintf_r+0x8ee>
 801ab00:	1cf1      	adds	r1, r6, #3
 801ab02:	db02      	blt.n	801ab0a <_svfprintf_r+0x5ea>
 801ab04:	4546      	cmp	r6, r8
 801ab06:	f340 81a5 	ble.w	801ae54 <_svfprintf_r+0x934>
 801ab0a:	9b06      	ldr	r3, [sp, #24]
 801ab0c:	3b02      	subs	r3, #2
 801ab0e:	9306      	str	r3, [sp, #24]
 801ab10:	9906      	ldr	r1, [sp, #24]
 801ab12:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801ab16:	f021 0120 	bic.w	r1, r1, #32
 801ab1a:	2941      	cmp	r1, #65	@ 0x41
 801ab1c:	bf08      	it	eq
 801ab1e:	320f      	addeq	r2, #15
 801ab20:	f106 33ff 	add.w	r3, r6, #4294967295
 801ab24:	bf06      	itte	eq
 801ab26:	b2d2      	uxtbeq	r2, r2
 801ab28:	2101      	moveq	r1, #1
 801ab2a:	2100      	movne	r1, #0
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	9320      	str	r3, [sp, #128]	@ 0x80
 801ab30:	bfb8      	it	lt
 801ab32:	f1c6 0301 	rsblt	r3, r6, #1
 801ab36:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801ab3a:	bfb4      	ite	lt
 801ab3c:	222d      	movlt	r2, #45	@ 0x2d
 801ab3e:	222b      	movge	r2, #43	@ 0x2b
 801ab40:	2b09      	cmp	r3, #9
 801ab42:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801ab46:	f340 8178 	ble.w	801ae3a <_svfprintf_r+0x91a>
 801ab4a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801ab4e:	270a      	movs	r7, #10
 801ab50:	4602      	mov	r2, r0
 801ab52:	fbb3 f6f7 	udiv	r6, r3, r7
 801ab56:	fb07 3116 	mls	r1, r7, r6, r3
 801ab5a:	3130      	adds	r1, #48	@ 0x30
 801ab5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801ab60:	4619      	mov	r1, r3
 801ab62:	2963      	cmp	r1, #99	@ 0x63
 801ab64:	f100 30ff 	add.w	r0, r0, #4294967295
 801ab68:	4633      	mov	r3, r6
 801ab6a:	dcf1      	bgt.n	801ab50 <_svfprintf_r+0x630>
 801ab6c:	3330      	adds	r3, #48	@ 0x30
 801ab6e:	1e91      	subs	r1, r2, #2
 801ab70:	f800 3c01 	strb.w	r3, [r0, #-1]
 801ab74:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801ab78:	460b      	mov	r3, r1
 801ab7a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801ab7e:	4283      	cmp	r3, r0
 801ab80:	f0c0 8156 	bcc.w	801ae30 <_svfprintf_r+0x910>
 801ab84:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801ab88:	1a9b      	subs	r3, r3, r2
 801ab8a:	4281      	cmp	r1, r0
 801ab8c:	bf88      	it	hi
 801ab8e:	2300      	movhi	r3, #0
 801ab90:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801ab94:	441a      	add	r2, r3
 801ab96:	ab22      	add	r3, sp, #136	@ 0x88
 801ab98:	1ad3      	subs	r3, r2, r3
 801ab9a:	9a04      	ldr	r2, [sp, #16]
 801ab9c:	9318      	str	r3, [sp, #96]	@ 0x60
 801ab9e:	2a01      	cmp	r2, #1
 801aba0:	eb03 0802 	add.w	r8, r3, r2
 801aba4:	dc01      	bgt.n	801abaa <_svfprintf_r+0x68a>
 801aba6:	07ea      	lsls	r2, r5, #31
 801aba8:	d501      	bpl.n	801abae <_svfprintf_r+0x68e>
 801abaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801abac:	4498      	add	r8, r3
 801abae:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801abb2:	2700      	movs	r7, #0
 801abb4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801abb8:	9311      	str	r3, [sp, #68]	@ 0x44
 801abba:	9708      	str	r7, [sp, #32]
 801abbc:	463e      	mov	r6, r7
 801abbe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	f040 818f 	bne.w	801aee4 <_svfprintf_r+0x9c4>
 801abc6:	2300      	movs	r3, #0
 801abc8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801abca:	9310      	str	r3, [sp, #64]	@ 0x40
 801abcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801abce:	4543      	cmp	r3, r8
 801abd0:	bfb8      	it	lt
 801abd2:	4643      	movlt	r3, r8
 801abd4:	9311      	str	r3, [sp, #68]	@ 0x44
 801abd6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801abda:	b113      	cbz	r3, 801abe2 <_svfprintf_r+0x6c2>
 801abdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801abde:	3301      	adds	r3, #1
 801abe0:	9311      	str	r3, [sp, #68]	@ 0x44
 801abe2:	f015 0302 	ands.w	r3, r5, #2
 801abe6:	931c      	str	r3, [sp, #112]	@ 0x70
 801abe8:	bf1e      	ittt	ne
 801abea:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801abec:	3302      	addne	r3, #2
 801abee:	9311      	strne	r3, [sp, #68]	@ 0x44
 801abf0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801abf4:	931d      	str	r3, [sp, #116]	@ 0x74
 801abf6:	d122      	bne.n	801ac3e <_svfprintf_r+0x71e>
 801abf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801abfc:	1a9b      	subs	r3, r3, r2
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ac02:	dd1c      	ble.n	801ac3e <_svfprintf_r+0x71e>
 801ac04:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ac06:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801ac0a:	2810      	cmp	r0, #16
 801ac0c:	489e      	ldr	r0, [pc, #632]	@ (801ae88 <_svfprintf_r+0x968>)
 801ac0e:	6020      	str	r0, [r4, #0]
 801ac10:	f102 0201 	add.w	r2, r2, #1
 801ac14:	f104 0108 	add.w	r1, r4, #8
 801ac18:	f300 8298 	bgt.w	801b14c <_svfprintf_r+0xc2c>
 801ac1c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ac1e:	6060      	str	r0, [r4, #4]
 801ac20:	4403      	add	r3, r0
 801ac22:	2a07      	cmp	r2, #7
 801ac24:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ac28:	f340 82a5 	ble.w	801b176 <_svfprintf_r+0xc56>
 801ac2c:	9803      	ldr	r0, [sp, #12]
 801ac2e:	aa26      	add	r2, sp, #152	@ 0x98
 801ac30:	4659      	mov	r1, fp
 801ac32:	f004 fcef 	bl	801f614 <__ssprint_r>
 801ac36:	2800      	cmp	r0, #0
 801ac38:	f040 85ed 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801ac3c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ac3e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801ac42:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ac44:	b16a      	cbz	r2, 801ac62 <_svfprintf_r+0x742>
 801ac46:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801ac4a:	6022      	str	r2, [r4, #0]
 801ac4c:	2201      	movs	r2, #1
 801ac4e:	4413      	add	r3, r2
 801ac50:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ac52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ac54:	6062      	str	r2, [r4, #4]
 801ac56:	4413      	add	r3, r2
 801ac58:	2b07      	cmp	r3, #7
 801ac5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ac5c:	f300 828d 	bgt.w	801b17a <_svfprintf_r+0xc5a>
 801ac60:	3408      	adds	r4, #8
 801ac62:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ac64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ac66:	b162      	cbz	r2, 801ac82 <_svfprintf_r+0x762>
 801ac68:	aa1f      	add	r2, sp, #124	@ 0x7c
 801ac6a:	6022      	str	r2, [r4, #0]
 801ac6c:	2202      	movs	r2, #2
 801ac6e:	4413      	add	r3, r2
 801ac70:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ac72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ac74:	6062      	str	r2, [r4, #4]
 801ac76:	3301      	adds	r3, #1
 801ac78:	2b07      	cmp	r3, #7
 801ac7a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ac7c:	f300 8287 	bgt.w	801b18e <_svfprintf_r+0xc6e>
 801ac80:	3408      	adds	r4, #8
 801ac82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ac84:	2b80      	cmp	r3, #128	@ 0x80
 801ac86:	d122      	bne.n	801acce <_svfprintf_r+0x7ae>
 801ac88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ac8c:	1a9b      	subs	r3, r3, r2
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ac92:	dd1c      	ble.n	801acce <_svfprintf_r+0x7ae>
 801ac94:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ac96:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801ac9a:	2810      	cmp	r0, #16
 801ac9c:	487b      	ldr	r0, [pc, #492]	@ (801ae8c <_svfprintf_r+0x96c>)
 801ac9e:	6020      	str	r0, [r4, #0]
 801aca0:	f102 0201 	add.w	r2, r2, #1
 801aca4:	f104 0108 	add.w	r1, r4, #8
 801aca8:	f300 827b 	bgt.w	801b1a2 <_svfprintf_r+0xc82>
 801acac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801acae:	6060      	str	r0, [r4, #4]
 801acb0:	4403      	add	r3, r0
 801acb2:	2a07      	cmp	r2, #7
 801acb4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801acb8:	f340 8288 	ble.w	801b1cc <_svfprintf_r+0xcac>
 801acbc:	9803      	ldr	r0, [sp, #12]
 801acbe:	aa26      	add	r2, sp, #152	@ 0x98
 801acc0:	4659      	mov	r1, fp
 801acc2:	f004 fca7 	bl	801f614 <__ssprint_r>
 801acc6:	2800      	cmp	r0, #0
 801acc8:	f040 85a5 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801accc:	ac29      	add	r4, sp, #164	@ 0xa4
 801acce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801acd0:	eba3 0308 	sub.w	r3, r3, r8
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	9310      	str	r3, [sp, #64]	@ 0x40
 801acd8:	dd1c      	ble.n	801ad14 <_svfprintf_r+0x7f4>
 801acda:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801acdc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801ace0:	2810      	cmp	r0, #16
 801ace2:	486a      	ldr	r0, [pc, #424]	@ (801ae8c <_svfprintf_r+0x96c>)
 801ace4:	6020      	str	r0, [r4, #0]
 801ace6:	f102 0201 	add.w	r2, r2, #1
 801acea:	f104 0108 	add.w	r1, r4, #8
 801acee:	f300 826f 	bgt.w	801b1d0 <_svfprintf_r+0xcb0>
 801acf2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801acf4:	6060      	str	r0, [r4, #4]
 801acf6:	4403      	add	r3, r0
 801acf8:	2a07      	cmp	r2, #7
 801acfa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801acfe:	f340 827c 	ble.w	801b1fa <_svfprintf_r+0xcda>
 801ad02:	9803      	ldr	r0, [sp, #12]
 801ad04:	aa26      	add	r2, sp, #152	@ 0x98
 801ad06:	4659      	mov	r1, fp
 801ad08:	f004 fc84 	bl	801f614 <__ssprint_r>
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	f040 8582 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801ad12:	ac29      	add	r4, sp, #164	@ 0xa4
 801ad14:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ad16:	9310      	str	r3, [sp, #64]	@ 0x40
 801ad18:	05ea      	lsls	r2, r5, #23
 801ad1a:	f100 8275 	bmi.w	801b208 <_svfprintf_r+0xce8>
 801ad1e:	4443      	add	r3, r8
 801ad20:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ad22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ad24:	3301      	adds	r3, #1
 801ad26:	2b07      	cmp	r3, #7
 801ad28:	e9c4 9800 	strd	r9, r8, [r4]
 801ad2c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ad2e:	f300 82b1 	bgt.w	801b294 <_svfprintf_r+0xd74>
 801ad32:	3408      	adds	r4, #8
 801ad34:	076a      	lsls	r2, r5, #29
 801ad36:	f100 8550 	bmi.w	801b7da <_svfprintf_r+0x12ba>
 801ad3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ad3e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ad40:	428a      	cmp	r2, r1
 801ad42:	bfac      	ite	ge
 801ad44:	189b      	addge	r3, r3, r2
 801ad46:	185b      	addlt	r3, r3, r1
 801ad48:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ad4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ad4c:	b13b      	cbz	r3, 801ad5e <_svfprintf_r+0x83e>
 801ad4e:	9803      	ldr	r0, [sp, #12]
 801ad50:	aa26      	add	r2, sp, #152	@ 0x98
 801ad52:	4659      	mov	r1, fp
 801ad54:	f004 fc5e 	bl	801f614 <__ssprint_r>
 801ad58:	2800      	cmp	r0, #0
 801ad5a:	f040 855c 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801ad5e:	2300      	movs	r3, #0
 801ad60:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ad62:	f1ba 0f00 	cmp.w	sl, #0
 801ad66:	f040 8572 	bne.w	801b84e <_svfprintf_r+0x132e>
 801ad6a:	9e07      	ldr	r6, [sp, #28]
 801ad6c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ad6e:	e0c6      	b.n	801aefe <_svfprintf_r+0x9de>
 801ad70:	f802 0c01 	strb.w	r0, [r2, #-1]
 801ad74:	e6ac      	b.n	801aad0 <_svfprintf_r+0x5b0>
 801ad76:	f803 0b01 	strb.w	r0, [r3], #1
 801ad7a:	e676      	b.n	801aa6a <_svfprintf_r+0x54a>
 801ad7c:	9b08      	ldr	r3, [sp, #32]
 801ad7e:	2b46      	cmp	r3, #70	@ 0x46
 801ad80:	d005      	beq.n	801ad8e <_svfprintf_r+0x86e>
 801ad82:	2b45      	cmp	r3, #69	@ 0x45
 801ad84:	d11a      	bne.n	801adbc <_svfprintf_r+0x89c>
 801ad86:	f108 0601 	add.w	r6, r8, #1
 801ad8a:	2102      	movs	r1, #2
 801ad8c:	e001      	b.n	801ad92 <_svfprintf_r+0x872>
 801ad8e:	4646      	mov	r6, r8
 801ad90:	2103      	movs	r1, #3
 801ad92:	ab24      	add	r3, sp, #144	@ 0x90
 801ad94:	9301      	str	r3, [sp, #4]
 801ad96:	ab21      	add	r3, sp, #132	@ 0x84
 801ad98:	9300      	str	r3, [sp, #0]
 801ad9a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801ad9e:	ab20      	add	r3, sp, #128	@ 0x80
 801ada0:	9803      	ldr	r0, [sp, #12]
 801ada2:	4632      	mov	r2, r6
 801ada4:	f003 f978 	bl	801e098 <_dtoa_r>
 801ada8:	9b08      	ldr	r3, [sp, #32]
 801adaa:	2b47      	cmp	r3, #71	@ 0x47
 801adac:	4681      	mov	r9, r0
 801adae:	d119      	bne.n	801ade4 <_svfprintf_r+0x8c4>
 801adb0:	07e8      	lsls	r0, r5, #31
 801adb2:	d405      	bmi.n	801adc0 <_svfprintf_r+0x8a0>
 801adb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801adb6:	eba3 0309 	sub.w	r3, r3, r9
 801adba:	e69b      	b.n	801aaf4 <_svfprintf_r+0x5d4>
 801adbc:	4646      	mov	r6, r8
 801adbe:	e7e4      	b.n	801ad8a <_svfprintf_r+0x86a>
 801adc0:	eb09 0706 	add.w	r7, r9, r6
 801adc4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801adc8:	2200      	movs	r2, #0
 801adca:	2300      	movs	r3, #0
 801adcc:	f7e5 fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 801add0:	b100      	cbz	r0, 801add4 <_svfprintf_r+0x8b4>
 801add2:	9724      	str	r7, [sp, #144]	@ 0x90
 801add4:	2230      	movs	r2, #48	@ 0x30
 801add6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801add8:	429f      	cmp	r7, r3
 801adda:	d9eb      	bls.n	801adb4 <_svfprintf_r+0x894>
 801addc:	1c59      	adds	r1, r3, #1
 801adde:	9124      	str	r1, [sp, #144]	@ 0x90
 801ade0:	701a      	strb	r2, [r3, #0]
 801ade2:	e7f8      	b.n	801add6 <_svfprintf_r+0x8b6>
 801ade4:	9b08      	ldr	r3, [sp, #32]
 801ade6:	2b46      	cmp	r3, #70	@ 0x46
 801ade8:	eb00 0706 	add.w	r7, r0, r6
 801adec:	d1ea      	bne.n	801adc4 <_svfprintf_r+0x8a4>
 801adee:	7803      	ldrb	r3, [r0, #0]
 801adf0:	2b30      	cmp	r3, #48	@ 0x30
 801adf2:	d109      	bne.n	801ae08 <_svfprintf_r+0x8e8>
 801adf4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801adf8:	2200      	movs	r2, #0
 801adfa:	2300      	movs	r3, #0
 801adfc:	f7e5 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae00:	b910      	cbnz	r0, 801ae08 <_svfprintf_r+0x8e8>
 801ae02:	f1c6 0601 	rsb	r6, r6, #1
 801ae06:	9620      	str	r6, [sp, #128]	@ 0x80
 801ae08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ae0a:	441f      	add	r7, r3
 801ae0c:	e7da      	b.n	801adc4 <_svfprintf_r+0x8a4>
 801ae0e:	9b08      	ldr	r3, [sp, #32]
 801ae10:	2b46      	cmp	r3, #70	@ 0x46
 801ae12:	f47f ae7d 	bne.w	801ab10 <_svfprintf_r+0x5f0>
 801ae16:	f005 0301 	and.w	r3, r5, #1
 801ae1a:	2e00      	cmp	r6, #0
 801ae1c:	ea43 0308 	orr.w	r3, r3, r8
 801ae20:	dd25      	ble.n	801ae6e <_svfprintf_r+0x94e>
 801ae22:	b37b      	cbz	r3, 801ae84 <_svfprintf_r+0x964>
 801ae24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ae26:	18f3      	adds	r3, r6, r3
 801ae28:	4498      	add	r8, r3
 801ae2a:	2366      	movs	r3, #102	@ 0x66
 801ae2c:	9306      	str	r3, [sp, #24]
 801ae2e:	e033      	b.n	801ae98 <_svfprintf_r+0x978>
 801ae30:	f813 7b01 	ldrb.w	r7, [r3], #1
 801ae34:	f806 7f01 	strb.w	r7, [r6, #1]!
 801ae38:	e6a1      	b.n	801ab7e <_svfprintf_r+0x65e>
 801ae3a:	b941      	cbnz	r1, 801ae4e <_svfprintf_r+0x92e>
 801ae3c:	2230      	movs	r2, #48	@ 0x30
 801ae3e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801ae42:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801ae46:	3330      	adds	r3, #48	@ 0x30
 801ae48:	f802 3b01 	strb.w	r3, [r2], #1
 801ae4c:	e6a3      	b.n	801ab96 <_svfprintf_r+0x676>
 801ae4e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801ae52:	e7f8      	b.n	801ae46 <_svfprintf_r+0x926>
 801ae54:	9b04      	ldr	r3, [sp, #16]
 801ae56:	429e      	cmp	r6, r3
 801ae58:	da0d      	bge.n	801ae76 <_svfprintf_r+0x956>
 801ae5a:	9b04      	ldr	r3, [sp, #16]
 801ae5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae5e:	2e00      	cmp	r6, #0
 801ae60:	eb03 0802 	add.w	r8, r3, r2
 801ae64:	dc0c      	bgt.n	801ae80 <_svfprintf_r+0x960>
 801ae66:	f1c6 0301 	rsb	r3, r6, #1
 801ae6a:	4498      	add	r8, r3
 801ae6c:	e008      	b.n	801ae80 <_svfprintf_r+0x960>
 801ae6e:	b17b      	cbz	r3, 801ae90 <_svfprintf_r+0x970>
 801ae70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ae72:	3301      	adds	r3, #1
 801ae74:	e7d8      	b.n	801ae28 <_svfprintf_r+0x908>
 801ae76:	07eb      	lsls	r3, r5, #31
 801ae78:	d521      	bpl.n	801aebe <_svfprintf_r+0x99e>
 801ae7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ae7c:	eb06 0803 	add.w	r8, r6, r3
 801ae80:	2367      	movs	r3, #103	@ 0x67
 801ae82:	e7d3      	b.n	801ae2c <_svfprintf_r+0x90c>
 801ae84:	46b0      	mov	r8, r6
 801ae86:	e7d0      	b.n	801ae2a <_svfprintf_r+0x90a>
 801ae88:	0802096c 	.word	0x0802096c
 801ae8c:	0802095c 	.word	0x0802095c
 801ae90:	2366      	movs	r3, #102	@ 0x66
 801ae92:	9306      	str	r3, [sp, #24]
 801ae94:	f04f 0801 	mov.w	r8, #1
 801ae98:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801ae9c:	9308      	str	r3, [sp, #32]
 801ae9e:	d01f      	beq.n	801aee0 <_svfprintf_r+0x9c0>
 801aea0:	2700      	movs	r7, #0
 801aea2:	2e00      	cmp	r6, #0
 801aea4:	9708      	str	r7, [sp, #32]
 801aea6:	f77f ae8a 	ble.w	801abbe <_svfprintf_r+0x69e>
 801aeaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aeac:	781b      	ldrb	r3, [r3, #0]
 801aeae:	2bff      	cmp	r3, #255	@ 0xff
 801aeb0:	d107      	bne.n	801aec2 <_svfprintf_r+0x9a2>
 801aeb2:	9b08      	ldr	r3, [sp, #32]
 801aeb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aeb6:	443b      	add	r3, r7
 801aeb8:	fb02 8803 	mla	r8, r2, r3, r8
 801aebc:	e67f      	b.n	801abbe <_svfprintf_r+0x69e>
 801aebe:	46b0      	mov	r8, r6
 801aec0:	e7de      	b.n	801ae80 <_svfprintf_r+0x960>
 801aec2:	42b3      	cmp	r3, r6
 801aec4:	daf5      	bge.n	801aeb2 <_svfprintf_r+0x992>
 801aec6:	1af6      	subs	r6, r6, r3
 801aec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aeca:	785b      	ldrb	r3, [r3, #1]
 801aecc:	b133      	cbz	r3, 801aedc <_svfprintf_r+0x9bc>
 801aece:	9b08      	ldr	r3, [sp, #32]
 801aed0:	3301      	adds	r3, #1
 801aed2:	9308      	str	r3, [sp, #32]
 801aed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aed6:	3301      	adds	r3, #1
 801aed8:	9309      	str	r3, [sp, #36]	@ 0x24
 801aeda:	e7e6      	b.n	801aeaa <_svfprintf_r+0x98a>
 801aedc:	3701      	adds	r7, #1
 801aede:	e7e4      	b.n	801aeaa <_svfprintf_r+0x98a>
 801aee0:	9f08      	ldr	r7, [sp, #32]
 801aee2:	e66c      	b.n	801abbe <_svfprintf_r+0x69e>
 801aee4:	232d      	movs	r3, #45	@ 0x2d
 801aee6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801aeea:	e66c      	b.n	801abc6 <_svfprintf_r+0x6a6>
 801aeec:	06af      	lsls	r7, r5, #26
 801aeee:	d50a      	bpl.n	801af06 <_svfprintf_r+0x9e6>
 801aef0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801aef2:	6833      	ldr	r3, [r6, #0]
 801aef4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801aef6:	17d2      	asrs	r2, r2, #31
 801aef8:	e9c3 1200 	strd	r1, r2, [r3]
 801aefc:	3604      	adds	r6, #4
 801aefe:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801af02:	f7ff bb46 	b.w	801a592 <_svfprintf_r+0x72>
 801af06:	06e8      	lsls	r0, r5, #27
 801af08:	d503      	bpl.n	801af12 <_svfprintf_r+0x9f2>
 801af0a:	6833      	ldr	r3, [r6, #0]
 801af0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af0e:	601a      	str	r2, [r3, #0]
 801af10:	e7f4      	b.n	801aefc <_svfprintf_r+0x9dc>
 801af12:	0669      	lsls	r1, r5, #25
 801af14:	d503      	bpl.n	801af1e <_svfprintf_r+0x9fe>
 801af16:	6833      	ldr	r3, [r6, #0]
 801af18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af1a:	801a      	strh	r2, [r3, #0]
 801af1c:	e7ee      	b.n	801aefc <_svfprintf_r+0x9dc>
 801af1e:	05aa      	lsls	r2, r5, #22
 801af20:	d5f3      	bpl.n	801af0a <_svfprintf_r+0x9ea>
 801af22:	6833      	ldr	r3, [r6, #0]
 801af24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af26:	701a      	strb	r2, [r3, #0]
 801af28:	e7e8      	b.n	801aefc <_svfprintf_r+0x9dc>
 801af2a:	f045 0510 	orr.w	r5, r5, #16
 801af2e:	f015 0320 	ands.w	r3, r5, #32
 801af32:	d020      	beq.n	801af76 <_svfprintf_r+0xa56>
 801af34:	3607      	adds	r6, #7
 801af36:	f026 0307 	bic.w	r3, r6, #7
 801af3a:	461a      	mov	r2, r3
 801af3c:	685f      	ldr	r7, [r3, #4]
 801af3e:	f852 6b08 	ldr.w	r6, [r2], #8
 801af42:	9207      	str	r2, [sp, #28]
 801af44:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801af48:	2300      	movs	r3, #0
 801af4a:	2200      	movs	r2, #0
 801af4c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801af50:	f1b8 3fff 	cmp.w	r8, #4294967295
 801af54:	f000 848c 	beq.w	801b870 <_svfprintf_r+0x1350>
 801af58:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801af5c:	9208      	str	r2, [sp, #32]
 801af5e:	ea56 0207 	orrs.w	r2, r6, r7
 801af62:	f040 848a 	bne.w	801b87a <_svfprintf_r+0x135a>
 801af66:	f1b8 0f00 	cmp.w	r8, #0
 801af6a:	f000 80db 	beq.w	801b124 <_svfprintf_r+0xc04>
 801af6e:	2b01      	cmp	r3, #1
 801af70:	f040 8486 	bne.w	801b880 <_svfprintf_r+0x1360>
 801af74:	e083      	b.n	801b07e <_svfprintf_r+0xb5e>
 801af76:	4632      	mov	r2, r6
 801af78:	f015 0710 	ands.w	r7, r5, #16
 801af7c:	f852 6b04 	ldr.w	r6, [r2], #4
 801af80:	9207      	str	r2, [sp, #28]
 801af82:	d001      	beq.n	801af88 <_svfprintf_r+0xa68>
 801af84:	461f      	mov	r7, r3
 801af86:	e7dd      	b.n	801af44 <_svfprintf_r+0xa24>
 801af88:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801af8c:	d001      	beq.n	801af92 <_svfprintf_r+0xa72>
 801af8e:	b2b6      	uxth	r6, r6
 801af90:	e7d8      	b.n	801af44 <_svfprintf_r+0xa24>
 801af92:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801af96:	d0d5      	beq.n	801af44 <_svfprintf_r+0xa24>
 801af98:	b2f6      	uxtb	r6, r6
 801af9a:	e7f3      	b.n	801af84 <_svfprintf_r+0xa64>
 801af9c:	4633      	mov	r3, r6
 801af9e:	2278      	movs	r2, #120	@ 0x78
 801afa0:	f853 6b04 	ldr.w	r6, [r3], #4
 801afa4:	9307      	str	r3, [sp, #28]
 801afa6:	f647 0330 	movw	r3, #30768	@ 0x7830
 801afaa:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801afae:	4b94      	ldr	r3, [pc, #592]	@ (801b200 <_svfprintf_r+0xce0>)
 801afb0:	9319      	str	r3, [sp, #100]	@ 0x64
 801afb2:	2700      	movs	r7, #0
 801afb4:	f045 0502 	orr.w	r5, r5, #2
 801afb8:	2302      	movs	r3, #2
 801afba:	9206      	str	r2, [sp, #24]
 801afbc:	e7c5      	b.n	801af4a <_svfprintf_r+0xa2a>
 801afbe:	4633      	mov	r3, r6
 801afc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 801afc4:	f853 9b04 	ldr.w	r9, [r3], #4
 801afc8:	9307      	str	r3, [sp, #28]
 801afca:	f04f 0600 	mov.w	r6, #0
 801afce:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801afd2:	d00f      	beq.n	801aff4 <_svfprintf_r+0xad4>
 801afd4:	4642      	mov	r2, r8
 801afd6:	4631      	mov	r1, r6
 801afd8:	4648      	mov	r0, r9
 801afda:	f7e5 f901 	bl	80001e0 <memchr>
 801afde:	4682      	mov	sl, r0
 801afe0:	2800      	cmp	r0, #0
 801afe2:	f43f ac81 	beq.w	801a8e8 <_svfprintf_r+0x3c8>
 801afe6:	eba0 0809 	sub.w	r8, r0, r9
 801afea:	46b2      	mov	sl, r6
 801afec:	9610      	str	r6, [sp, #64]	@ 0x40
 801afee:	4637      	mov	r7, r6
 801aff0:	9608      	str	r6, [sp, #32]
 801aff2:	e5eb      	b.n	801abcc <_svfprintf_r+0x6ac>
 801aff4:	4648      	mov	r0, r9
 801aff6:	f7e5 f8eb 	bl	80001d0 <strlen>
 801affa:	46b2      	mov	sl, r6
 801affc:	4680      	mov	r8, r0
 801affe:	e473      	b.n	801a8e8 <_svfprintf_r+0x3c8>
 801b000:	f045 0510 	orr.w	r5, r5, #16
 801b004:	f015 0320 	ands.w	r3, r5, #32
 801b008:	d009      	beq.n	801b01e <_svfprintf_r+0xafe>
 801b00a:	3607      	adds	r6, #7
 801b00c:	f026 0307 	bic.w	r3, r6, #7
 801b010:	461a      	mov	r2, r3
 801b012:	685f      	ldr	r7, [r3, #4]
 801b014:	f852 6b08 	ldr.w	r6, [r2], #8
 801b018:	9207      	str	r2, [sp, #28]
 801b01a:	2301      	movs	r3, #1
 801b01c:	e795      	b.n	801af4a <_svfprintf_r+0xa2a>
 801b01e:	4632      	mov	r2, r6
 801b020:	f015 0710 	ands.w	r7, r5, #16
 801b024:	f852 6b04 	ldr.w	r6, [r2], #4
 801b028:	9207      	str	r2, [sp, #28]
 801b02a:	d001      	beq.n	801b030 <_svfprintf_r+0xb10>
 801b02c:	461f      	mov	r7, r3
 801b02e:	e7f4      	b.n	801b01a <_svfprintf_r+0xafa>
 801b030:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801b034:	d001      	beq.n	801b03a <_svfprintf_r+0xb1a>
 801b036:	b2b6      	uxth	r6, r6
 801b038:	e7ef      	b.n	801b01a <_svfprintf_r+0xafa>
 801b03a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801b03e:	d0ec      	beq.n	801b01a <_svfprintf_r+0xafa>
 801b040:	b2f6      	uxtb	r6, r6
 801b042:	e7f3      	b.n	801b02c <_svfprintf_r+0xb0c>
 801b044:	4b6f      	ldr	r3, [pc, #444]	@ (801b204 <_svfprintf_r+0xce4>)
 801b046:	f7ff bb39 	b.w	801a6bc <_svfprintf_r+0x19c>
 801b04a:	4632      	mov	r2, r6
 801b04c:	f015 0710 	ands.w	r7, r5, #16
 801b050:	f852 6b04 	ldr.w	r6, [r2], #4
 801b054:	9207      	str	r2, [sp, #28]
 801b056:	d002      	beq.n	801b05e <_svfprintf_r+0xb3e>
 801b058:	461f      	mov	r7, r3
 801b05a:	f7ff bb3c 	b.w	801a6d6 <_svfprintf_r+0x1b6>
 801b05e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801b062:	d002      	beq.n	801b06a <_svfprintf_r+0xb4a>
 801b064:	b2b6      	uxth	r6, r6
 801b066:	f7ff bb36 	b.w	801a6d6 <_svfprintf_r+0x1b6>
 801b06a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801b06e:	f43f ab32 	beq.w	801a6d6 <_svfprintf_r+0x1b6>
 801b072:	b2f6      	uxtb	r6, r6
 801b074:	e7f0      	b.n	801b058 <_svfprintf_r+0xb38>
 801b076:	2e0a      	cmp	r6, #10
 801b078:	f177 0300 	sbcs.w	r3, r7, #0
 801b07c:	d207      	bcs.n	801b08e <_svfprintf_r+0xb6e>
 801b07e:	3630      	adds	r6, #48	@ 0x30
 801b080:	b2f6      	uxtb	r6, r6
 801b082:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801b086:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 801b08a:	f000 bc15 	b.w	801b8b8 <_svfprintf_r+0x1398>
 801b08e:	2300      	movs	r3, #0
 801b090:	9304      	str	r3, [sp, #16]
 801b092:	9b08      	ldr	r3, [sp, #32]
 801b094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b098:	ad52      	add	r5, sp, #328	@ 0x148
 801b09a:	9310      	str	r3, [sp, #64]	@ 0x40
 801b09c:	220a      	movs	r2, #10
 801b09e:	2300      	movs	r3, #0
 801b0a0:	4630      	mov	r0, r6
 801b0a2:	4639      	mov	r1, r7
 801b0a4:	f7e5 fdf0 	bl	8000c88 <__aeabi_uldivmod>
 801b0a8:	9b04      	ldr	r3, [sp, #16]
 801b0aa:	9011      	str	r0, [sp, #68]	@ 0x44
 801b0ac:	3301      	adds	r3, #1
 801b0ae:	9304      	str	r3, [sp, #16]
 801b0b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b0b2:	3230      	adds	r2, #48	@ 0x30
 801b0b4:	468a      	mov	sl, r1
 801b0b6:	f105 39ff 	add.w	r9, r5, #4294967295
 801b0ba:	f805 2c01 	strb.w	r2, [r5, #-1]
 801b0be:	b1d3      	cbz	r3, 801b0f6 <_svfprintf_r+0xbd6>
 801b0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0c2:	9a04      	ldr	r2, [sp, #16]
 801b0c4:	781b      	ldrb	r3, [r3, #0]
 801b0c6:	429a      	cmp	r2, r3
 801b0c8:	d115      	bne.n	801b0f6 <_svfprintf_r+0xbd6>
 801b0ca:	2aff      	cmp	r2, #255	@ 0xff
 801b0cc:	d013      	beq.n	801b0f6 <_svfprintf_r+0xbd6>
 801b0ce:	2e0a      	cmp	r6, #10
 801b0d0:	f177 0300 	sbcs.w	r3, r7, #0
 801b0d4:	d30f      	bcc.n	801b0f6 <_svfprintf_r+0xbd6>
 801b0d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b0d8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b0da:	eba9 0903 	sub.w	r9, r9, r3
 801b0de:	461a      	mov	r2, r3
 801b0e0:	4648      	mov	r0, r9
 801b0e2:	f002 fe8d 	bl	801de00 <strncpy>
 801b0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0e8:	785b      	ldrb	r3, [r3, #1]
 801b0ea:	b11b      	cbz	r3, 801b0f4 <_svfprintf_r+0xbd4>
 801b0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	9304      	str	r3, [sp, #16]
 801b0f6:	2e0a      	cmp	r6, #10
 801b0f8:	f177 0700 	sbcs.w	r7, r7, #0
 801b0fc:	f0c0 83dc 	bcc.w	801b8b8 <_svfprintf_r+0x1398>
 801b100:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b102:	4657      	mov	r7, sl
 801b104:	464d      	mov	r5, r9
 801b106:	e7c9      	b.n	801b09c <_svfprintf_r+0xb7c>
 801b108:	f006 030f 	and.w	r3, r6, #15
 801b10c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b10e:	0936      	lsrs	r6, r6, #4
 801b110:	5cd3      	ldrb	r3, [r2, r3]
 801b112:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b116:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801b11a:	093f      	lsrs	r7, r7, #4
 801b11c:	ea56 0307 	orrs.w	r3, r6, r7
 801b120:	d1f2      	bne.n	801b108 <_svfprintf_r+0xbe8>
 801b122:	e3c9      	b.n	801b8b8 <_svfprintf_r+0x1398>
 801b124:	b91b      	cbnz	r3, 801b12e <_svfprintf_r+0xc0e>
 801b126:	07e9      	lsls	r1, r5, #31
 801b128:	d501      	bpl.n	801b12e <_svfprintf_r+0xc0e>
 801b12a:	2630      	movs	r6, #48	@ 0x30
 801b12c:	e7a9      	b.n	801b082 <_svfprintf_r+0xb62>
 801b12e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801b132:	e3c1      	b.n	801b8b8 <_svfprintf_r+0x1398>
 801b134:	9b06      	ldr	r3, [sp, #24]
 801b136:	2b00      	cmp	r3, #0
 801b138:	f000 838f 	beq.w	801b85a <_svfprintf_r+0x133a>
 801b13c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801b140:	2300      	movs	r3, #0
 801b142:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801b146:	9607      	str	r6, [sp, #28]
 801b148:	f7ff bb63 	b.w	801a812 <_svfprintf_r+0x2f2>
 801b14c:	2010      	movs	r0, #16
 801b14e:	4403      	add	r3, r0
 801b150:	2a07      	cmp	r2, #7
 801b152:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b156:	6060      	str	r0, [r4, #4]
 801b158:	dd08      	ble.n	801b16c <_svfprintf_r+0xc4c>
 801b15a:	9803      	ldr	r0, [sp, #12]
 801b15c:	aa26      	add	r2, sp, #152	@ 0x98
 801b15e:	4659      	mov	r1, fp
 801b160:	f004 fa58 	bl	801f614 <__ssprint_r>
 801b164:	2800      	cmp	r0, #0
 801b166:	f040 8356 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b16a:	a929      	add	r1, sp, #164	@ 0xa4
 801b16c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b16e:	3b10      	subs	r3, #16
 801b170:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b172:	460c      	mov	r4, r1
 801b174:	e546      	b.n	801ac04 <_svfprintf_r+0x6e4>
 801b176:	460c      	mov	r4, r1
 801b178:	e561      	b.n	801ac3e <_svfprintf_r+0x71e>
 801b17a:	9803      	ldr	r0, [sp, #12]
 801b17c:	aa26      	add	r2, sp, #152	@ 0x98
 801b17e:	4659      	mov	r1, fp
 801b180:	f004 fa48 	bl	801f614 <__ssprint_r>
 801b184:	2800      	cmp	r0, #0
 801b186:	f040 8346 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b18a:	ac29      	add	r4, sp, #164	@ 0xa4
 801b18c:	e569      	b.n	801ac62 <_svfprintf_r+0x742>
 801b18e:	9803      	ldr	r0, [sp, #12]
 801b190:	aa26      	add	r2, sp, #152	@ 0x98
 801b192:	4659      	mov	r1, fp
 801b194:	f004 fa3e 	bl	801f614 <__ssprint_r>
 801b198:	2800      	cmp	r0, #0
 801b19a:	f040 833c 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b19e:	ac29      	add	r4, sp, #164	@ 0xa4
 801b1a0:	e56f      	b.n	801ac82 <_svfprintf_r+0x762>
 801b1a2:	2010      	movs	r0, #16
 801b1a4:	4403      	add	r3, r0
 801b1a6:	2a07      	cmp	r2, #7
 801b1a8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b1ac:	6060      	str	r0, [r4, #4]
 801b1ae:	dd08      	ble.n	801b1c2 <_svfprintf_r+0xca2>
 801b1b0:	9803      	ldr	r0, [sp, #12]
 801b1b2:	aa26      	add	r2, sp, #152	@ 0x98
 801b1b4:	4659      	mov	r1, fp
 801b1b6:	f004 fa2d 	bl	801f614 <__ssprint_r>
 801b1ba:	2800      	cmp	r0, #0
 801b1bc:	f040 832b 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b1c0:	a929      	add	r1, sp, #164	@ 0xa4
 801b1c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b1c4:	3b10      	subs	r3, #16
 801b1c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b1c8:	460c      	mov	r4, r1
 801b1ca:	e563      	b.n	801ac94 <_svfprintf_r+0x774>
 801b1cc:	460c      	mov	r4, r1
 801b1ce:	e57e      	b.n	801acce <_svfprintf_r+0x7ae>
 801b1d0:	2010      	movs	r0, #16
 801b1d2:	4403      	add	r3, r0
 801b1d4:	2a07      	cmp	r2, #7
 801b1d6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b1da:	6060      	str	r0, [r4, #4]
 801b1dc:	dd08      	ble.n	801b1f0 <_svfprintf_r+0xcd0>
 801b1de:	9803      	ldr	r0, [sp, #12]
 801b1e0:	aa26      	add	r2, sp, #152	@ 0x98
 801b1e2:	4659      	mov	r1, fp
 801b1e4:	f004 fa16 	bl	801f614 <__ssprint_r>
 801b1e8:	2800      	cmp	r0, #0
 801b1ea:	f040 8314 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b1ee:	a929      	add	r1, sp, #164	@ 0xa4
 801b1f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b1f2:	3b10      	subs	r3, #16
 801b1f4:	9310      	str	r3, [sp, #64]	@ 0x40
 801b1f6:	460c      	mov	r4, r1
 801b1f8:	e56f      	b.n	801acda <_svfprintf_r+0x7ba>
 801b1fa:	460c      	mov	r4, r1
 801b1fc:	e58a      	b.n	801ad14 <_svfprintf_r+0x7f4>
 801b1fe:	bf00      	nop
 801b200:	08020938 	.word	0x08020938
 801b204:	08020949 	.word	0x08020949
 801b208:	9b06      	ldr	r3, [sp, #24]
 801b20a:	2b65      	cmp	r3, #101	@ 0x65
 801b20c:	f340 8246 	ble.w	801b69c <_svfprintf_r+0x117c>
 801b210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b214:	2200      	movs	r2, #0
 801b216:	2300      	movs	r3, #0
 801b218:	f7e5 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 801b21c:	2800      	cmp	r0, #0
 801b21e:	d06a      	beq.n	801b2f6 <_svfprintf_r+0xdd6>
 801b220:	4b73      	ldr	r3, [pc, #460]	@ (801b3f0 <_svfprintf_r+0xed0>)
 801b222:	6023      	str	r3, [r4, #0]
 801b224:	2301      	movs	r3, #1
 801b226:	6063      	str	r3, [r4, #4]
 801b228:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b22a:	3301      	adds	r3, #1
 801b22c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b22e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b230:	3301      	adds	r3, #1
 801b232:	2b07      	cmp	r3, #7
 801b234:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b236:	dc37      	bgt.n	801b2a8 <_svfprintf_r+0xd88>
 801b238:	3408      	adds	r4, #8
 801b23a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b23c:	9a04      	ldr	r2, [sp, #16]
 801b23e:	4293      	cmp	r3, r2
 801b240:	db02      	blt.n	801b248 <_svfprintf_r+0xd28>
 801b242:	07ef      	lsls	r7, r5, #31
 801b244:	f57f ad76 	bpl.w	801ad34 <_svfprintf_r+0x814>
 801b248:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b24a:	6023      	str	r3, [r4, #0]
 801b24c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b24e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b250:	6063      	str	r3, [r4, #4]
 801b252:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b254:	4413      	add	r3, r2
 801b256:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b258:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b25a:	3301      	adds	r3, #1
 801b25c:	2b07      	cmp	r3, #7
 801b25e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b260:	dc2c      	bgt.n	801b2bc <_svfprintf_r+0xd9c>
 801b262:	3408      	adds	r4, #8
 801b264:	9b04      	ldr	r3, [sp, #16]
 801b266:	1e5e      	subs	r6, r3, #1
 801b268:	2e00      	cmp	r6, #0
 801b26a:	f77f ad63 	ble.w	801ad34 <_svfprintf_r+0x814>
 801b26e:	4f61      	ldr	r7, [pc, #388]	@ (801b3f4 <_svfprintf_r+0xed4>)
 801b270:	f04f 0810 	mov.w	r8, #16
 801b274:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801b278:	2e10      	cmp	r6, #16
 801b27a:	f103 0301 	add.w	r3, r3, #1
 801b27e:	f104 0108 	add.w	r1, r4, #8
 801b282:	6027      	str	r7, [r4, #0]
 801b284:	dc24      	bgt.n	801b2d0 <_svfprintf_r+0xdb0>
 801b286:	6066      	str	r6, [r4, #4]
 801b288:	2b07      	cmp	r3, #7
 801b28a:	4416      	add	r6, r2
 801b28c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801b290:	f340 82a0 	ble.w	801b7d4 <_svfprintf_r+0x12b4>
 801b294:	9803      	ldr	r0, [sp, #12]
 801b296:	aa26      	add	r2, sp, #152	@ 0x98
 801b298:	4659      	mov	r1, fp
 801b29a:	f004 f9bb 	bl	801f614 <__ssprint_r>
 801b29e:	2800      	cmp	r0, #0
 801b2a0:	f040 82b9 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b2a4:	ac29      	add	r4, sp, #164	@ 0xa4
 801b2a6:	e545      	b.n	801ad34 <_svfprintf_r+0x814>
 801b2a8:	9803      	ldr	r0, [sp, #12]
 801b2aa:	aa26      	add	r2, sp, #152	@ 0x98
 801b2ac:	4659      	mov	r1, fp
 801b2ae:	f004 f9b1 	bl	801f614 <__ssprint_r>
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	f040 82af 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b2b8:	ac29      	add	r4, sp, #164	@ 0xa4
 801b2ba:	e7be      	b.n	801b23a <_svfprintf_r+0xd1a>
 801b2bc:	9803      	ldr	r0, [sp, #12]
 801b2be:	aa26      	add	r2, sp, #152	@ 0x98
 801b2c0:	4659      	mov	r1, fp
 801b2c2:	f004 f9a7 	bl	801f614 <__ssprint_r>
 801b2c6:	2800      	cmp	r0, #0
 801b2c8:	f040 82a5 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b2cc:	ac29      	add	r4, sp, #164	@ 0xa4
 801b2ce:	e7c9      	b.n	801b264 <_svfprintf_r+0xd44>
 801b2d0:	3210      	adds	r2, #16
 801b2d2:	2b07      	cmp	r3, #7
 801b2d4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801b2d8:	f8c4 8004 	str.w	r8, [r4, #4]
 801b2dc:	dd08      	ble.n	801b2f0 <_svfprintf_r+0xdd0>
 801b2de:	9803      	ldr	r0, [sp, #12]
 801b2e0:	aa26      	add	r2, sp, #152	@ 0x98
 801b2e2:	4659      	mov	r1, fp
 801b2e4:	f004 f996 	bl	801f614 <__ssprint_r>
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	f040 8294 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b2ee:	a929      	add	r1, sp, #164	@ 0xa4
 801b2f0:	3e10      	subs	r6, #16
 801b2f2:	460c      	mov	r4, r1
 801b2f4:	e7be      	b.n	801b274 <_svfprintf_r+0xd54>
 801b2f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	dc7d      	bgt.n	801b3f8 <_svfprintf_r+0xed8>
 801b2fc:	4b3c      	ldr	r3, [pc, #240]	@ (801b3f0 <_svfprintf_r+0xed0>)
 801b2fe:	6023      	str	r3, [r4, #0]
 801b300:	2301      	movs	r3, #1
 801b302:	6063      	str	r3, [r4, #4]
 801b304:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b306:	3301      	adds	r3, #1
 801b308:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b30a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b30c:	3301      	adds	r3, #1
 801b30e:	2b07      	cmp	r3, #7
 801b310:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b312:	dc46      	bgt.n	801b3a2 <_svfprintf_r+0xe82>
 801b314:	3408      	adds	r4, #8
 801b316:	9904      	ldr	r1, [sp, #16]
 801b318:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b31a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801b31c:	430b      	orrs	r3, r1
 801b31e:	f005 0101 	and.w	r1, r5, #1
 801b322:	430b      	orrs	r3, r1
 801b324:	f43f ad06 	beq.w	801ad34 <_svfprintf_r+0x814>
 801b328:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b32a:	6023      	str	r3, [r4, #0]
 801b32c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b32e:	6063      	str	r3, [r4, #4]
 801b330:	441a      	add	r2, r3
 801b332:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b334:	9228      	str	r2, [sp, #160]	@ 0xa0
 801b336:	3301      	adds	r3, #1
 801b338:	2b07      	cmp	r3, #7
 801b33a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b33c:	dc3b      	bgt.n	801b3b6 <_svfprintf_r+0xe96>
 801b33e:	f104 0308 	add.w	r3, r4, #8
 801b342:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b344:	2e00      	cmp	r6, #0
 801b346:	da1b      	bge.n	801b380 <_svfprintf_r+0xe60>
 801b348:	4f2a      	ldr	r7, [pc, #168]	@ (801b3f4 <_svfprintf_r+0xed4>)
 801b34a:	4276      	negs	r6, r6
 801b34c:	461a      	mov	r2, r3
 801b34e:	2410      	movs	r4, #16
 801b350:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801b354:	2e10      	cmp	r6, #16
 801b356:	f101 0101 	add.w	r1, r1, #1
 801b35a:	f103 0308 	add.w	r3, r3, #8
 801b35e:	6017      	str	r7, [r2, #0]
 801b360:	dc33      	bgt.n	801b3ca <_svfprintf_r+0xeaa>
 801b362:	6056      	str	r6, [r2, #4]
 801b364:	2907      	cmp	r1, #7
 801b366:	4406      	add	r6, r0
 801b368:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801b36c:	dd08      	ble.n	801b380 <_svfprintf_r+0xe60>
 801b36e:	9803      	ldr	r0, [sp, #12]
 801b370:	aa26      	add	r2, sp, #152	@ 0x98
 801b372:	4659      	mov	r1, fp
 801b374:	f004 f94e 	bl	801f614 <__ssprint_r>
 801b378:	2800      	cmp	r0, #0
 801b37a:	f040 824c 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b37e:	ab29      	add	r3, sp, #164	@ 0xa4
 801b380:	9a04      	ldr	r2, [sp, #16]
 801b382:	9904      	ldr	r1, [sp, #16]
 801b384:	605a      	str	r2, [r3, #4]
 801b386:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801b388:	f8c3 9000 	str.w	r9, [r3]
 801b38c:	440a      	add	r2, r1
 801b38e:	9228      	str	r2, [sp, #160]	@ 0xa0
 801b390:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801b392:	3201      	adds	r2, #1
 801b394:	2a07      	cmp	r2, #7
 801b396:	9227      	str	r2, [sp, #156]	@ 0x9c
 801b398:	f73f af7c 	bgt.w	801b294 <_svfprintf_r+0xd74>
 801b39c:	f103 0408 	add.w	r4, r3, #8
 801b3a0:	e4c8      	b.n	801ad34 <_svfprintf_r+0x814>
 801b3a2:	9803      	ldr	r0, [sp, #12]
 801b3a4:	aa26      	add	r2, sp, #152	@ 0x98
 801b3a6:	4659      	mov	r1, fp
 801b3a8:	f004 f934 	bl	801f614 <__ssprint_r>
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	f040 8232 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b3b2:	ac29      	add	r4, sp, #164	@ 0xa4
 801b3b4:	e7af      	b.n	801b316 <_svfprintf_r+0xdf6>
 801b3b6:	9803      	ldr	r0, [sp, #12]
 801b3b8:	aa26      	add	r2, sp, #152	@ 0x98
 801b3ba:	4659      	mov	r1, fp
 801b3bc:	f004 f92a 	bl	801f614 <__ssprint_r>
 801b3c0:	2800      	cmp	r0, #0
 801b3c2:	f040 8228 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b3c6:	ab29      	add	r3, sp, #164	@ 0xa4
 801b3c8:	e7bb      	b.n	801b342 <_svfprintf_r+0xe22>
 801b3ca:	3010      	adds	r0, #16
 801b3cc:	2907      	cmp	r1, #7
 801b3ce:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801b3d2:	6054      	str	r4, [r2, #4]
 801b3d4:	dd08      	ble.n	801b3e8 <_svfprintf_r+0xec8>
 801b3d6:	9803      	ldr	r0, [sp, #12]
 801b3d8:	aa26      	add	r2, sp, #152	@ 0x98
 801b3da:	4659      	mov	r1, fp
 801b3dc:	f004 f91a 	bl	801f614 <__ssprint_r>
 801b3e0:	2800      	cmp	r0, #0
 801b3e2:	f040 8218 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b3e6:	ab29      	add	r3, sp, #164	@ 0xa4
 801b3e8:	3e10      	subs	r6, #16
 801b3ea:	461a      	mov	r2, r3
 801b3ec:	e7b0      	b.n	801b350 <_svfprintf_r+0xe30>
 801b3ee:	bf00      	nop
 801b3f0:	0802095a 	.word	0x0802095a
 801b3f4:	0802095c 	.word	0x0802095c
 801b3f8:	9b04      	ldr	r3, [sp, #16]
 801b3fa:	444b      	add	r3, r9
 801b3fc:	9306      	str	r3, [sp, #24]
 801b3fe:	9b04      	ldr	r3, [sp, #16]
 801b400:	42b3      	cmp	r3, r6
 801b402:	bfa8      	it	ge
 801b404:	4633      	movge	r3, r6
 801b406:	2b00      	cmp	r3, #0
 801b408:	4698      	mov	r8, r3
 801b40a:	dd0b      	ble.n	801b424 <_svfprintf_r+0xf04>
 801b40c:	e9c4 9300 	strd	r9, r3, [r4]
 801b410:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b412:	4443      	add	r3, r8
 801b414:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b416:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b418:	3301      	adds	r3, #1
 801b41a:	2b07      	cmp	r3, #7
 801b41c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b41e:	f300 8089 	bgt.w	801b534 <_svfprintf_r+0x1014>
 801b422:	3408      	adds	r4, #8
 801b424:	4643      	mov	r3, r8
 801b426:	2b00      	cmp	r3, #0
 801b428:	bfac      	ite	ge
 801b42a:	eba6 0808 	subge.w	r8, r6, r8
 801b42e:	46b0      	movlt	r8, r6
 801b430:	f1b8 0f00 	cmp.w	r8, #0
 801b434:	dd1b      	ble.n	801b46e <_svfprintf_r+0xf4e>
 801b436:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801b43a:	4897      	ldr	r0, [pc, #604]	@ (801b698 <_svfprintf_r+0x1178>)
 801b43c:	6020      	str	r0, [r4, #0]
 801b43e:	f1b8 0f10 	cmp.w	r8, #16
 801b442:	f102 0201 	add.w	r2, r2, #1
 801b446:	f104 0108 	add.w	r1, r4, #8
 801b44a:	dc7d      	bgt.n	801b548 <_svfprintf_r+0x1028>
 801b44c:	4443      	add	r3, r8
 801b44e:	2a07      	cmp	r2, #7
 801b450:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b454:	f8c4 8004 	str.w	r8, [r4, #4]
 801b458:	f340 808a 	ble.w	801b570 <_svfprintf_r+0x1050>
 801b45c:	9803      	ldr	r0, [sp, #12]
 801b45e:	aa26      	add	r2, sp, #152	@ 0x98
 801b460:	4659      	mov	r1, fp
 801b462:	f004 f8d7 	bl	801f614 <__ssprint_r>
 801b466:	2800      	cmp	r0, #0
 801b468:	f040 81d5 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b46c:	ac29      	add	r4, sp, #164	@ 0xa4
 801b46e:	eb09 0806 	add.w	r8, r9, r6
 801b472:	056e      	lsls	r6, r5, #21
 801b474:	d508      	bpl.n	801b488 <_svfprintf_r+0xf68>
 801b476:	9b08      	ldr	r3, [sp, #32]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d17b      	bne.n	801b574 <_svfprintf_r+0x1054>
 801b47c:	2f00      	cmp	r7, #0
 801b47e:	d17b      	bne.n	801b578 <_svfprintf_r+0x1058>
 801b480:	9b06      	ldr	r3, [sp, #24]
 801b482:	4598      	cmp	r8, r3
 801b484:	bf28      	it	cs
 801b486:	4698      	movcs	r8, r3
 801b488:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b48a:	9a04      	ldr	r2, [sp, #16]
 801b48c:	4293      	cmp	r3, r2
 801b48e:	db01      	blt.n	801b494 <_svfprintf_r+0xf74>
 801b490:	07e8      	lsls	r0, r5, #31
 801b492:	d50e      	bpl.n	801b4b2 <_svfprintf_r+0xf92>
 801b494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b496:	6023      	str	r3, [r4, #0]
 801b498:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b49a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b49c:	6063      	str	r3, [r4, #4]
 801b49e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b4a0:	4413      	add	r3, r2
 801b4a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b4a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b4a6:	3301      	adds	r3, #1
 801b4a8:	2b07      	cmp	r3, #7
 801b4aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b4ac:	f300 80df 	bgt.w	801b66e <_svfprintf_r+0x114e>
 801b4b0:	3408      	adds	r4, #8
 801b4b2:	9b04      	ldr	r3, [sp, #16]
 801b4b4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801b4b6:	1bdf      	subs	r7, r3, r7
 801b4b8:	9b06      	ldr	r3, [sp, #24]
 801b4ba:	eba3 0308 	sub.w	r3, r3, r8
 801b4be:	429f      	cmp	r7, r3
 801b4c0:	bfa8      	it	ge
 801b4c2:	461f      	movge	r7, r3
 801b4c4:	2f00      	cmp	r7, #0
 801b4c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b4c8:	dd0a      	ble.n	801b4e0 <_svfprintf_r+0xfc0>
 801b4ca:	443b      	add	r3, r7
 801b4cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b4ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b4d0:	3301      	adds	r3, #1
 801b4d2:	2b07      	cmp	r3, #7
 801b4d4:	e9c4 8700 	strd	r8, r7, [r4]
 801b4d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b4da:	f300 80d2 	bgt.w	801b682 <_svfprintf_r+0x1162>
 801b4de:	3408      	adds	r4, #8
 801b4e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b4e2:	9b04      	ldr	r3, [sp, #16]
 801b4e4:	2f00      	cmp	r7, #0
 801b4e6:	eba3 0606 	sub.w	r6, r3, r6
 801b4ea:	bfa8      	it	ge
 801b4ec:	1bf6      	subge	r6, r6, r7
 801b4ee:	2e00      	cmp	r6, #0
 801b4f0:	f77f ac20 	ble.w	801ad34 <_svfprintf_r+0x814>
 801b4f4:	4f68      	ldr	r7, [pc, #416]	@ (801b698 <_svfprintf_r+0x1178>)
 801b4f6:	f04f 0810 	mov.w	r8, #16
 801b4fa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801b4fe:	2e10      	cmp	r6, #16
 801b500:	f103 0301 	add.w	r3, r3, #1
 801b504:	f104 0108 	add.w	r1, r4, #8
 801b508:	6027      	str	r7, [r4, #0]
 801b50a:	f77f aebc 	ble.w	801b286 <_svfprintf_r+0xd66>
 801b50e:	3210      	adds	r2, #16
 801b510:	2b07      	cmp	r3, #7
 801b512:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801b516:	f8c4 8004 	str.w	r8, [r4, #4]
 801b51a:	dd08      	ble.n	801b52e <_svfprintf_r+0x100e>
 801b51c:	9803      	ldr	r0, [sp, #12]
 801b51e:	aa26      	add	r2, sp, #152	@ 0x98
 801b520:	4659      	mov	r1, fp
 801b522:	f004 f877 	bl	801f614 <__ssprint_r>
 801b526:	2800      	cmp	r0, #0
 801b528:	f040 8175 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b52c:	a929      	add	r1, sp, #164	@ 0xa4
 801b52e:	3e10      	subs	r6, #16
 801b530:	460c      	mov	r4, r1
 801b532:	e7e2      	b.n	801b4fa <_svfprintf_r+0xfda>
 801b534:	9803      	ldr	r0, [sp, #12]
 801b536:	aa26      	add	r2, sp, #152	@ 0x98
 801b538:	4659      	mov	r1, fp
 801b53a:	f004 f86b 	bl	801f614 <__ssprint_r>
 801b53e:	2800      	cmp	r0, #0
 801b540:	f040 8169 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b544:	ac29      	add	r4, sp, #164	@ 0xa4
 801b546:	e76d      	b.n	801b424 <_svfprintf_r+0xf04>
 801b548:	2010      	movs	r0, #16
 801b54a:	4403      	add	r3, r0
 801b54c:	2a07      	cmp	r2, #7
 801b54e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b552:	6060      	str	r0, [r4, #4]
 801b554:	dd08      	ble.n	801b568 <_svfprintf_r+0x1048>
 801b556:	9803      	ldr	r0, [sp, #12]
 801b558:	aa26      	add	r2, sp, #152	@ 0x98
 801b55a:	4659      	mov	r1, fp
 801b55c:	f004 f85a 	bl	801f614 <__ssprint_r>
 801b560:	2800      	cmp	r0, #0
 801b562:	f040 8158 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b566:	a929      	add	r1, sp, #164	@ 0xa4
 801b568:	f1a8 0810 	sub.w	r8, r8, #16
 801b56c:	460c      	mov	r4, r1
 801b56e:	e762      	b.n	801b436 <_svfprintf_r+0xf16>
 801b570:	460c      	mov	r4, r1
 801b572:	e77c      	b.n	801b46e <_svfprintf_r+0xf4e>
 801b574:	2f00      	cmp	r7, #0
 801b576:	d04a      	beq.n	801b60e <_svfprintf_r+0x10ee>
 801b578:	3f01      	subs	r7, #1
 801b57a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b57c:	6023      	str	r3, [r4, #0]
 801b57e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b580:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b582:	6063      	str	r3, [r4, #4]
 801b584:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b586:	4413      	add	r3, r2
 801b588:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b58a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b58c:	3301      	adds	r3, #1
 801b58e:	2b07      	cmp	r3, #7
 801b590:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b592:	dc43      	bgt.n	801b61c <_svfprintf_r+0x10fc>
 801b594:	3408      	adds	r4, #8
 801b596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b598:	781a      	ldrb	r2, [r3, #0]
 801b59a:	9b06      	ldr	r3, [sp, #24]
 801b59c:	eba3 0308 	sub.w	r3, r3, r8
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	bfa8      	it	ge
 801b5a4:	461a      	movge	r2, r3
 801b5a6:	2a00      	cmp	r2, #0
 801b5a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b5aa:	4691      	mov	r9, r2
 801b5ac:	dd09      	ble.n	801b5c2 <_svfprintf_r+0x10a2>
 801b5ae:	4413      	add	r3, r2
 801b5b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b5b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	2b07      	cmp	r3, #7
 801b5b8:	e9c4 8200 	strd	r8, r2, [r4]
 801b5bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b5be:	dc37      	bgt.n	801b630 <_svfprintf_r+0x1110>
 801b5c0:	3408      	adds	r4, #8
 801b5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5c4:	781e      	ldrb	r6, [r3, #0]
 801b5c6:	f1b9 0f00 	cmp.w	r9, #0
 801b5ca:	bfa8      	it	ge
 801b5cc:	eba6 0609 	subge.w	r6, r6, r9
 801b5d0:	2e00      	cmp	r6, #0
 801b5d2:	dd18      	ble.n	801b606 <_svfprintf_r+0x10e6>
 801b5d4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801b5d8:	482f      	ldr	r0, [pc, #188]	@ (801b698 <_svfprintf_r+0x1178>)
 801b5da:	6020      	str	r0, [r4, #0]
 801b5dc:	2e10      	cmp	r6, #16
 801b5de:	f103 0301 	add.w	r3, r3, #1
 801b5e2:	f104 0108 	add.w	r1, r4, #8
 801b5e6:	dc2d      	bgt.n	801b644 <_svfprintf_r+0x1124>
 801b5e8:	6066      	str	r6, [r4, #4]
 801b5ea:	2b07      	cmp	r3, #7
 801b5ec:	4416      	add	r6, r2
 801b5ee:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801b5f2:	dd3a      	ble.n	801b66a <_svfprintf_r+0x114a>
 801b5f4:	9803      	ldr	r0, [sp, #12]
 801b5f6:	aa26      	add	r2, sp, #152	@ 0x98
 801b5f8:	4659      	mov	r1, fp
 801b5fa:	f004 f80b 	bl	801f614 <__ssprint_r>
 801b5fe:	2800      	cmp	r0, #0
 801b600:	f040 8109 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b604:	ac29      	add	r4, sp, #164	@ 0xa4
 801b606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b608:	781b      	ldrb	r3, [r3, #0]
 801b60a:	4498      	add	r8, r3
 801b60c:	e733      	b.n	801b476 <_svfprintf_r+0xf56>
 801b60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b610:	3b01      	subs	r3, #1
 801b612:	9309      	str	r3, [sp, #36]	@ 0x24
 801b614:	9b08      	ldr	r3, [sp, #32]
 801b616:	3b01      	subs	r3, #1
 801b618:	9308      	str	r3, [sp, #32]
 801b61a:	e7ae      	b.n	801b57a <_svfprintf_r+0x105a>
 801b61c:	9803      	ldr	r0, [sp, #12]
 801b61e:	aa26      	add	r2, sp, #152	@ 0x98
 801b620:	4659      	mov	r1, fp
 801b622:	f003 fff7 	bl	801f614 <__ssprint_r>
 801b626:	2800      	cmp	r0, #0
 801b628:	f040 80f5 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b62c:	ac29      	add	r4, sp, #164	@ 0xa4
 801b62e:	e7b2      	b.n	801b596 <_svfprintf_r+0x1076>
 801b630:	9803      	ldr	r0, [sp, #12]
 801b632:	aa26      	add	r2, sp, #152	@ 0x98
 801b634:	4659      	mov	r1, fp
 801b636:	f003 ffed 	bl	801f614 <__ssprint_r>
 801b63a:	2800      	cmp	r0, #0
 801b63c:	f040 80eb 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b640:	ac29      	add	r4, sp, #164	@ 0xa4
 801b642:	e7be      	b.n	801b5c2 <_svfprintf_r+0x10a2>
 801b644:	2010      	movs	r0, #16
 801b646:	4402      	add	r2, r0
 801b648:	2b07      	cmp	r3, #7
 801b64a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801b64e:	6060      	str	r0, [r4, #4]
 801b650:	dd08      	ble.n	801b664 <_svfprintf_r+0x1144>
 801b652:	9803      	ldr	r0, [sp, #12]
 801b654:	aa26      	add	r2, sp, #152	@ 0x98
 801b656:	4659      	mov	r1, fp
 801b658:	f003 ffdc 	bl	801f614 <__ssprint_r>
 801b65c:	2800      	cmp	r0, #0
 801b65e:	f040 80da 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b662:	a929      	add	r1, sp, #164	@ 0xa4
 801b664:	3e10      	subs	r6, #16
 801b666:	460c      	mov	r4, r1
 801b668:	e7b4      	b.n	801b5d4 <_svfprintf_r+0x10b4>
 801b66a:	460c      	mov	r4, r1
 801b66c:	e7cb      	b.n	801b606 <_svfprintf_r+0x10e6>
 801b66e:	9803      	ldr	r0, [sp, #12]
 801b670:	aa26      	add	r2, sp, #152	@ 0x98
 801b672:	4659      	mov	r1, fp
 801b674:	f003 ffce 	bl	801f614 <__ssprint_r>
 801b678:	2800      	cmp	r0, #0
 801b67a:	f040 80cc 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b67e:	ac29      	add	r4, sp, #164	@ 0xa4
 801b680:	e717      	b.n	801b4b2 <_svfprintf_r+0xf92>
 801b682:	9803      	ldr	r0, [sp, #12]
 801b684:	aa26      	add	r2, sp, #152	@ 0x98
 801b686:	4659      	mov	r1, fp
 801b688:	f003 ffc4 	bl	801f614 <__ssprint_r>
 801b68c:	2800      	cmp	r0, #0
 801b68e:	f040 80c2 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b692:	ac29      	add	r4, sp, #164	@ 0xa4
 801b694:	e724      	b.n	801b4e0 <_svfprintf_r+0xfc0>
 801b696:	bf00      	nop
 801b698:	0802095c 	.word	0x0802095c
 801b69c:	9904      	ldr	r1, [sp, #16]
 801b69e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6a0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801b6a2:	2901      	cmp	r1, #1
 801b6a4:	f103 0301 	add.w	r3, r3, #1
 801b6a8:	f102 0201 	add.w	r2, r2, #1
 801b6ac:	f104 0608 	add.w	r6, r4, #8
 801b6b0:	dc02      	bgt.n	801b6b8 <_svfprintf_r+0x1198>
 801b6b2:	07e9      	lsls	r1, r5, #31
 801b6b4:	f140 8083 	bpl.w	801b7be <_svfprintf_r+0x129e>
 801b6b8:	2101      	movs	r1, #1
 801b6ba:	2a07      	cmp	r2, #7
 801b6bc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b6c0:	f8c4 9000 	str.w	r9, [r4]
 801b6c4:	6061      	str	r1, [r4, #4]
 801b6c6:	dd08      	ble.n	801b6da <_svfprintf_r+0x11ba>
 801b6c8:	9803      	ldr	r0, [sp, #12]
 801b6ca:	aa26      	add	r2, sp, #152	@ 0x98
 801b6cc:	4659      	mov	r1, fp
 801b6ce:	f003 ffa1 	bl	801f614 <__ssprint_r>
 801b6d2:	2800      	cmp	r0, #0
 801b6d4:	f040 809f 	bne.w	801b816 <_svfprintf_r+0x12f6>
 801b6d8:	ae29      	add	r6, sp, #164	@ 0xa4
 801b6da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b6dc:	6033      	str	r3, [r6, #0]
 801b6de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b6e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b6e2:	6073      	str	r3, [r6, #4]
 801b6e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b6e6:	4413      	add	r3, r2
 801b6e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b6ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b6ec:	3301      	adds	r3, #1
 801b6ee:	2b07      	cmp	r3, #7
 801b6f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b6f2:	dc33      	bgt.n	801b75c <_svfprintf_r+0x123c>
 801b6f4:	3608      	adds	r6, #8
 801b6f6:	9b04      	ldr	r3, [sp, #16]
 801b6f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b6fc:	1e5c      	subs	r4, r3, #1
 801b6fe:	2200      	movs	r2, #0
 801b700:	2300      	movs	r3, #0
 801b702:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801b706:	f7e5 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 801b70a:	2800      	cmp	r0, #0
 801b70c:	d12f      	bne.n	801b76e <_svfprintf_r+0x124e>
 801b70e:	f109 0201 	add.w	r2, r9, #1
 801b712:	e9c6 2400 	strd	r2, r4, [r6]
 801b716:	9a04      	ldr	r2, [sp, #16]
 801b718:	f108 0301 	add.w	r3, r8, #1
 801b71c:	3f01      	subs	r7, #1
 801b71e:	4417      	add	r7, r2
 801b720:	2b07      	cmp	r3, #7
 801b722:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801b726:	dd53      	ble.n	801b7d0 <_svfprintf_r+0x12b0>
 801b728:	9803      	ldr	r0, [sp, #12]
 801b72a:	aa26      	add	r2, sp, #152	@ 0x98
 801b72c:	4659      	mov	r1, fp
 801b72e:	f003 ff71 	bl	801f614 <__ssprint_r>
 801b732:	2800      	cmp	r0, #0
 801b734:	d16f      	bne.n	801b816 <_svfprintf_r+0x12f6>
 801b736:	ae29      	add	r6, sp, #164	@ 0xa4
 801b738:	ab22      	add	r3, sp, #136	@ 0x88
 801b73a:	6033      	str	r3, [r6, #0]
 801b73c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b73e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b740:	6073      	str	r3, [r6, #4]
 801b742:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b744:	4413      	add	r3, r2
 801b746:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b748:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b74a:	3301      	adds	r3, #1
 801b74c:	2b07      	cmp	r3, #7
 801b74e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b750:	f73f ada0 	bgt.w	801b294 <_svfprintf_r+0xd74>
 801b754:	f106 0408 	add.w	r4, r6, #8
 801b758:	f7ff baec 	b.w	801ad34 <_svfprintf_r+0x814>
 801b75c:	9803      	ldr	r0, [sp, #12]
 801b75e:	aa26      	add	r2, sp, #152	@ 0x98
 801b760:	4659      	mov	r1, fp
 801b762:	f003 ff57 	bl	801f614 <__ssprint_r>
 801b766:	2800      	cmp	r0, #0
 801b768:	d155      	bne.n	801b816 <_svfprintf_r+0x12f6>
 801b76a:	ae29      	add	r6, sp, #164	@ 0xa4
 801b76c:	e7c3      	b.n	801b6f6 <_svfprintf_r+0x11d6>
 801b76e:	9b04      	ldr	r3, [sp, #16]
 801b770:	2b01      	cmp	r3, #1
 801b772:	dde1      	ble.n	801b738 <_svfprintf_r+0x1218>
 801b774:	4f57      	ldr	r7, [pc, #348]	@ (801b8d4 <_svfprintf_r+0x13b4>)
 801b776:	f04f 0810 	mov.w	r8, #16
 801b77a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801b77e:	2c10      	cmp	r4, #16
 801b780:	f103 0301 	add.w	r3, r3, #1
 801b784:	f106 0108 	add.w	r1, r6, #8
 801b788:	6037      	str	r7, [r6, #0]
 801b78a:	dc07      	bgt.n	801b79c <_svfprintf_r+0x127c>
 801b78c:	6074      	str	r4, [r6, #4]
 801b78e:	2b07      	cmp	r3, #7
 801b790:	4414      	add	r4, r2
 801b792:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801b796:	dcc7      	bgt.n	801b728 <_svfprintf_r+0x1208>
 801b798:	460e      	mov	r6, r1
 801b79a:	e7cd      	b.n	801b738 <_svfprintf_r+0x1218>
 801b79c:	3210      	adds	r2, #16
 801b79e:	2b07      	cmp	r3, #7
 801b7a0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801b7a4:	f8c6 8004 	str.w	r8, [r6, #4]
 801b7a8:	dd06      	ble.n	801b7b8 <_svfprintf_r+0x1298>
 801b7aa:	9803      	ldr	r0, [sp, #12]
 801b7ac:	aa26      	add	r2, sp, #152	@ 0x98
 801b7ae:	4659      	mov	r1, fp
 801b7b0:	f003 ff30 	bl	801f614 <__ssprint_r>
 801b7b4:	bb78      	cbnz	r0, 801b816 <_svfprintf_r+0x12f6>
 801b7b6:	a929      	add	r1, sp, #164	@ 0xa4
 801b7b8:	3c10      	subs	r4, #16
 801b7ba:	460e      	mov	r6, r1
 801b7bc:	e7dd      	b.n	801b77a <_svfprintf_r+0x125a>
 801b7be:	2101      	movs	r1, #1
 801b7c0:	2a07      	cmp	r2, #7
 801b7c2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b7c6:	f8c4 9000 	str.w	r9, [r4]
 801b7ca:	6061      	str	r1, [r4, #4]
 801b7cc:	ddb4      	ble.n	801b738 <_svfprintf_r+0x1218>
 801b7ce:	e7ab      	b.n	801b728 <_svfprintf_r+0x1208>
 801b7d0:	3608      	adds	r6, #8
 801b7d2:	e7b1      	b.n	801b738 <_svfprintf_r+0x1218>
 801b7d4:	460c      	mov	r4, r1
 801b7d6:	f7ff baad 	b.w	801ad34 <_svfprintf_r+0x814>
 801b7da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b7dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b7de:	1a9d      	subs	r5, r3, r2
 801b7e0:	2d00      	cmp	r5, #0
 801b7e2:	f77f aaaa 	ble.w	801ad3a <_svfprintf_r+0x81a>
 801b7e6:	4e3c      	ldr	r6, [pc, #240]	@ (801b8d8 <_svfprintf_r+0x13b8>)
 801b7e8:	2710      	movs	r7, #16
 801b7ea:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801b7ee:	2d10      	cmp	r5, #16
 801b7f0:	f103 0301 	add.w	r3, r3, #1
 801b7f4:	6026      	str	r6, [r4, #0]
 801b7f6:	dc18      	bgt.n	801b82a <_svfprintf_r+0x130a>
 801b7f8:	442a      	add	r2, r5
 801b7fa:	2b07      	cmp	r3, #7
 801b7fc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801b800:	6065      	str	r5, [r4, #4]
 801b802:	f77f aa9a 	ble.w	801ad3a <_svfprintf_r+0x81a>
 801b806:	9803      	ldr	r0, [sp, #12]
 801b808:	aa26      	add	r2, sp, #152	@ 0x98
 801b80a:	4659      	mov	r1, fp
 801b80c:	f003 ff02 	bl	801f614 <__ssprint_r>
 801b810:	2800      	cmp	r0, #0
 801b812:	f43f aa92 	beq.w	801ad3a <_svfprintf_r+0x81a>
 801b816:	f1ba 0f00 	cmp.w	sl, #0
 801b81a:	f43f a89a 	beq.w	801a952 <_svfprintf_r+0x432>
 801b81e:	9803      	ldr	r0, [sp, #12]
 801b820:	4651      	mov	r1, sl
 801b822:	f7fe fb75 	bl	8019f10 <_free_r>
 801b826:	f7ff b894 	b.w	801a952 <_svfprintf_r+0x432>
 801b82a:	3210      	adds	r2, #16
 801b82c:	2b07      	cmp	r3, #7
 801b82e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801b832:	6067      	str	r7, [r4, #4]
 801b834:	dc02      	bgt.n	801b83c <_svfprintf_r+0x131c>
 801b836:	3408      	adds	r4, #8
 801b838:	3d10      	subs	r5, #16
 801b83a:	e7d6      	b.n	801b7ea <_svfprintf_r+0x12ca>
 801b83c:	9803      	ldr	r0, [sp, #12]
 801b83e:	aa26      	add	r2, sp, #152	@ 0x98
 801b840:	4659      	mov	r1, fp
 801b842:	f003 fee7 	bl	801f614 <__ssprint_r>
 801b846:	2800      	cmp	r0, #0
 801b848:	d1e5      	bne.n	801b816 <_svfprintf_r+0x12f6>
 801b84a:	ac29      	add	r4, sp, #164	@ 0xa4
 801b84c:	e7f4      	b.n	801b838 <_svfprintf_r+0x1318>
 801b84e:	9803      	ldr	r0, [sp, #12]
 801b850:	4651      	mov	r1, sl
 801b852:	f7fe fb5d 	bl	8019f10 <_free_r>
 801b856:	f7ff ba88 	b.w	801ad6a <_svfprintf_r+0x84a>
 801b85a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	f43f a878 	beq.w	801a952 <_svfprintf_r+0x432>
 801b862:	9803      	ldr	r0, [sp, #12]
 801b864:	aa26      	add	r2, sp, #152	@ 0x98
 801b866:	4659      	mov	r1, fp
 801b868:	f003 fed4 	bl	801f614 <__ssprint_r>
 801b86c:	f7ff b871 	b.w	801a952 <_svfprintf_r+0x432>
 801b870:	ea56 0207 	orrs.w	r2, r6, r7
 801b874:	9508      	str	r5, [sp, #32]
 801b876:	f43f ab7a 	beq.w	801af6e <_svfprintf_r+0xa4e>
 801b87a:	2b01      	cmp	r3, #1
 801b87c:	f43f abfb 	beq.w	801b076 <_svfprintf_r+0xb56>
 801b880:	2b02      	cmp	r3, #2
 801b882:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801b886:	f43f ac3f 	beq.w	801b108 <_svfprintf_r+0xbe8>
 801b88a:	f006 0307 	and.w	r3, r6, #7
 801b88e:	08f6      	lsrs	r6, r6, #3
 801b890:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801b894:	08ff      	lsrs	r7, r7, #3
 801b896:	3330      	adds	r3, #48	@ 0x30
 801b898:	ea56 0107 	orrs.w	r1, r6, r7
 801b89c:	464a      	mov	r2, r9
 801b89e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b8a2:	d1f2      	bne.n	801b88a <_svfprintf_r+0x136a>
 801b8a4:	9908      	ldr	r1, [sp, #32]
 801b8a6:	07c8      	lsls	r0, r1, #31
 801b8a8:	d506      	bpl.n	801b8b8 <_svfprintf_r+0x1398>
 801b8aa:	2b30      	cmp	r3, #48	@ 0x30
 801b8ac:	d004      	beq.n	801b8b8 <_svfprintf_r+0x1398>
 801b8ae:	2330      	movs	r3, #48	@ 0x30
 801b8b0:	f809 3c01 	strb.w	r3, [r9, #-1]
 801b8b4:	f1a2 0902 	sub.w	r9, r2, #2
 801b8b8:	ab52      	add	r3, sp, #328	@ 0x148
 801b8ba:	9d08      	ldr	r5, [sp, #32]
 801b8bc:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801b8c0:	f04f 0a00 	mov.w	sl, #0
 801b8c4:	eba3 0809 	sub.w	r8, r3, r9
 801b8c8:	4657      	mov	r7, sl
 801b8ca:	f8cd a020 	str.w	sl, [sp, #32]
 801b8ce:	4656      	mov	r6, sl
 801b8d0:	f7ff b97c 	b.w	801abcc <_svfprintf_r+0x6ac>
 801b8d4:	0802095c 	.word	0x0802095c
 801b8d8:	0802096c 	.word	0x0802096c
 801b8dc:	00000000 	.word	0x00000000

0801b8e0 <_vfprintf_r>:
 801b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e4:	b0d3      	sub	sp, #332	@ 0x14c
 801b8e6:	468b      	mov	fp, r1
 801b8e8:	4690      	mov	r8, r2
 801b8ea:	461c      	mov	r4, r3
 801b8ec:	461e      	mov	r6, r3
 801b8ee:	9003      	str	r0, [sp, #12]
 801b8f0:	f002 faa0 	bl	801de34 <_localeconv_r>
 801b8f4:	6803      	ldr	r3, [r0, #0]
 801b8f6:	9316      	str	r3, [sp, #88]	@ 0x58
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	f7e4 fc69 	bl	80001d0 <strlen>
 801b8fe:	9b03      	ldr	r3, [sp, #12]
 801b900:	900d      	str	r0, [sp, #52]	@ 0x34
 801b902:	b123      	cbz	r3, 801b90e <_vfprintf_r+0x2e>
 801b904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b906:	b913      	cbnz	r3, 801b90e <_vfprintf_r+0x2e>
 801b908:	9803      	ldr	r0, [sp, #12]
 801b90a:	f7fe f925 	bl	8019b58 <__sinit>
 801b90e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801b912:	07da      	lsls	r2, r3, #31
 801b914:	d407      	bmi.n	801b926 <_vfprintf_r+0x46>
 801b916:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801b91a:	059b      	lsls	r3, r3, #22
 801b91c:	d403      	bmi.n	801b926 <_vfprintf_r+0x46>
 801b91e:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801b922:	f7fe fa7f 	bl	8019e24 <__retarget_lock_acquire_recursive>
 801b926:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 801b92a:	049f      	lsls	r7, r3, #18
 801b92c:	d409      	bmi.n	801b942 <_vfprintf_r+0x62>
 801b92e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801b932:	f8ab 300c 	strh.w	r3, [fp, #12]
 801b936:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801b93a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801b93e:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 801b942:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801b946:	071d      	lsls	r5, r3, #28
 801b948:	d502      	bpl.n	801b950 <_vfprintf_r+0x70>
 801b94a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801b94e:	b9c3      	cbnz	r3, 801b982 <_vfprintf_r+0xa2>
 801b950:	9803      	ldr	r0, [sp, #12]
 801b952:	4659      	mov	r1, fp
 801b954:	f002 f97a 	bl	801dc4c <__swsetup_r>
 801b958:	b198      	cbz	r0, 801b982 <_vfprintf_r+0xa2>
 801b95a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801b95e:	07d8      	lsls	r0, r3, #31
 801b960:	d506      	bpl.n	801b970 <_vfprintf_r+0x90>
 801b962:	f04f 33ff 	mov.w	r3, #4294967295
 801b966:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b968:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b96a:	b053      	add	sp, #332	@ 0x14c
 801b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b970:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801b974:	0599      	lsls	r1, r3, #22
 801b976:	d4f4      	bmi.n	801b962 <_vfprintf_r+0x82>
 801b978:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801b97c:	f7fe fa53 	bl	8019e26 <__retarget_lock_release_recursive>
 801b980:	e7ef      	b.n	801b962 <_vfprintf_r+0x82>
 801b982:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 801b986:	f003 021a 	and.w	r2, r3, #26
 801b98a:	2a0a      	cmp	r2, #10
 801b98c:	d116      	bne.n	801b9bc <_vfprintf_r+0xdc>
 801b98e:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 801b992:	2a00      	cmp	r2, #0
 801b994:	db12      	blt.n	801b9bc <_vfprintf_r+0xdc>
 801b996:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 801b99a:	07d2      	lsls	r2, r2, #31
 801b99c:	d405      	bmi.n	801b9aa <_vfprintf_r+0xca>
 801b99e:	059b      	lsls	r3, r3, #22
 801b9a0:	d403      	bmi.n	801b9aa <_vfprintf_r+0xca>
 801b9a2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801b9a6:	f7fe fa3e 	bl	8019e26 <__retarget_lock_release_recursive>
 801b9aa:	9803      	ldr	r0, [sp, #12]
 801b9ac:	4623      	mov	r3, r4
 801b9ae:	4642      	mov	r2, r8
 801b9b0:	4659      	mov	r1, fp
 801b9b2:	b053      	add	sp, #332	@ 0x14c
 801b9b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b8:	f001 b9be 	b.w	801cd38 <__sbprintf>
 801b9bc:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 801bc08 <_vfprintf_r+0x328>
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801b9c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801b9ca:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801b9ce:	ac29      	add	r4, sp, #164	@ 0xa4
 801b9d0:	9426      	str	r4, [sp, #152]	@ 0x98
 801b9d2:	9304      	str	r3, [sp, #16]
 801b9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9d6:	9312      	str	r3, [sp, #72]	@ 0x48
 801b9d8:	9317      	str	r3, [sp, #92]	@ 0x5c
 801b9da:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b9dc:	4643      	mov	r3, r8
 801b9de:	461d      	mov	r5, r3
 801b9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9e4:	b10a      	cbz	r2, 801b9ea <_vfprintf_r+0x10a>
 801b9e6:	2a25      	cmp	r2, #37	@ 0x25
 801b9e8:	d1f9      	bne.n	801b9de <_vfprintf_r+0xfe>
 801b9ea:	ebb5 0708 	subs.w	r7, r5, r8
 801b9ee:	d00d      	beq.n	801ba0c <_vfprintf_r+0x12c>
 801b9f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b9f2:	443b      	add	r3, r7
 801b9f4:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b9f6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b9f8:	3301      	adds	r3, #1
 801b9fa:	2b07      	cmp	r3, #7
 801b9fc:	e9c4 8700 	strd	r8, r7, [r4]
 801ba00:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ba02:	dc75      	bgt.n	801baf0 <_vfprintf_r+0x210>
 801ba04:	3408      	adds	r4, #8
 801ba06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba08:	443b      	add	r3, r7
 801ba0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ba0c:	782b      	ldrb	r3, [r5, #0]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	f001 814f 	beq.w	801ccb2 <_vfprintf_r+0x13d2>
 801ba14:	2200      	movs	r2, #0
 801ba16:	1c6b      	adds	r3, r5, #1
 801ba18:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801ba1c:	f04f 39ff 	mov.w	r9, #4294967295
 801ba20:	920e      	str	r2, [sp, #56]	@ 0x38
 801ba22:	4615      	mov	r5, r2
 801ba24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba28:	9206      	str	r2, [sp, #24]
 801ba2a:	930c      	str	r3, [sp, #48]	@ 0x30
 801ba2c:	9b06      	ldr	r3, [sp, #24]
 801ba2e:	3b20      	subs	r3, #32
 801ba30:	2b5a      	cmp	r3, #90	@ 0x5a
 801ba32:	f200 85aa 	bhi.w	801c58a <_vfprintf_r+0xcaa>
 801ba36:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ba3a:	009d      	.short	0x009d
 801ba3c:	05a805a8 	.word	0x05a805a8
 801ba40:	05a800a5 	.word	0x05a800a5
 801ba44:	05a805a8 	.word	0x05a805a8
 801ba48:	05a80085 	.word	0x05a80085
 801ba4c:	00a805a8 	.word	0x00a805a8
 801ba50:	05a800b2 	.word	0x05a800b2
 801ba54:	00b400af 	.word	0x00b400af
 801ba58:	00ce05a8 	.word	0x00ce05a8
 801ba5c:	00d100d1 	.word	0x00d100d1
 801ba60:	00d100d1 	.word	0x00d100d1
 801ba64:	00d100d1 	.word	0x00d100d1
 801ba68:	00d100d1 	.word	0x00d100d1
 801ba6c:	05a800d1 	.word	0x05a800d1
 801ba70:	05a805a8 	.word	0x05a805a8
 801ba74:	05a805a8 	.word	0x05a805a8
 801ba78:	05a805a8 	.word	0x05a805a8
 801ba7c:	05a80146 	.word	0x05a80146
 801ba80:	011a0107 	.word	0x011a0107
 801ba84:	01460146 	.word	0x01460146
 801ba88:	05a80146 	.word	0x05a80146
 801ba8c:	05a805a8 	.word	0x05a805a8
 801ba90:	00e205a8 	.word	0x00e205a8
 801ba94:	05a805a8 	.word	0x05a805a8
 801ba98:	05a804a3 	.word	0x05a804a3
 801ba9c:	05a805a8 	.word	0x05a805a8
 801baa0:	05a804ed 	.word	0x05a804ed
 801baa4:	05a8050e 	.word	0x05a8050e
 801baa8:	053005a8 	.word	0x053005a8
 801baac:	05a805a8 	.word	0x05a805a8
 801bab0:	05a805a8 	.word	0x05a805a8
 801bab4:	05a805a8 	.word	0x05a805a8
 801bab8:	05a805a8 	.word	0x05a805a8
 801babc:	05a80146 	.word	0x05a80146
 801bac0:	011c0107 	.word	0x011c0107
 801bac4:	01460146 	.word	0x01460146
 801bac8:	00ed0146 	.word	0x00ed0146
 801bacc:	0101011c 	.word	0x0101011c
 801bad0:	00fa05a8 	.word	0x00fa05a8
 801bad4:	048705a8 	.word	0x048705a8
 801bad8:	04dc04a5 	.word	0x04dc04a5
 801badc:	05a80101 	.word	0x05a80101
 801bae0:	009b04ed 	.word	0x009b04ed
 801bae4:	05a80510 	.word	0x05a80510
 801bae8:	006505a8 	.word	0x006505a8
 801baec:	009b05a8 	.word	0x009b05a8
 801baf0:	9803      	ldr	r0, [sp, #12]
 801baf2:	aa26      	add	r2, sp, #152	@ 0x98
 801baf4:	4659      	mov	r1, fp
 801baf6:	f001 f95f 	bl	801cdb8 <__sprint_r>
 801bafa:	2800      	cmp	r0, #0
 801bafc:	f040 814d 	bne.w	801bd9a <_vfprintf_r+0x4ba>
 801bb00:	ac29      	add	r4, sp, #164	@ 0xa4
 801bb02:	e780      	b.n	801ba06 <_vfprintf_r+0x126>
 801bb04:	4b42      	ldr	r3, [pc, #264]	@ (801bc10 <_vfprintf_r+0x330>)
 801bb06:	9319      	str	r3, [sp, #100]	@ 0x64
 801bb08:	f015 0320 	ands.w	r3, r5, #32
 801bb0c:	f000 84c8 	beq.w	801c4a0 <_vfprintf_r+0xbc0>
 801bb10:	3607      	adds	r6, #7
 801bb12:	f026 0307 	bic.w	r3, r6, #7
 801bb16:	461a      	mov	r2, r3
 801bb18:	685f      	ldr	r7, [r3, #4]
 801bb1a:	f852 6b08 	ldr.w	r6, [r2], #8
 801bb1e:	9207      	str	r2, [sp, #28]
 801bb20:	07eb      	lsls	r3, r5, #31
 801bb22:	d50a      	bpl.n	801bb3a <_vfprintf_r+0x25a>
 801bb24:	ea56 0307 	orrs.w	r3, r6, r7
 801bb28:	d007      	beq.n	801bb3a <_vfprintf_r+0x25a>
 801bb2a:	2330      	movs	r3, #48	@ 0x30
 801bb2c:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801bb30:	9b06      	ldr	r3, [sp, #24]
 801bb32:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801bb36:	f045 0502 	orr.w	r5, r5, #2
 801bb3a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801bb3e:	2302      	movs	r3, #2
 801bb40:	f000 bc2e 	b.w	801c3a0 <_vfprintf_r+0xac0>
 801bb44:	9803      	ldr	r0, [sp, #12]
 801bb46:	f002 f975 	bl	801de34 <_localeconv_r>
 801bb4a:	6843      	ldr	r3, [r0, #4]
 801bb4c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f7e4 fb3e 	bl	80001d0 <strlen>
 801bb54:	9012      	str	r0, [sp, #72]	@ 0x48
 801bb56:	9803      	ldr	r0, [sp, #12]
 801bb58:	f002 f96c 	bl	801de34 <_localeconv_r>
 801bb5c:	6883      	ldr	r3, [r0, #8]
 801bb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb60:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bb62:	b12b      	cbz	r3, 801bb70 <_vfprintf_r+0x290>
 801bb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb66:	b11b      	cbz	r3, 801bb70 <_vfprintf_r+0x290>
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	b10b      	cbz	r3, 801bb70 <_vfprintf_r+0x290>
 801bb6c:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801bb70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb72:	e757      	b.n	801ba24 <_vfprintf_r+0x144>
 801bb74:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d1f9      	bne.n	801bb70 <_vfprintf_r+0x290>
 801bb7c:	2320      	movs	r3, #32
 801bb7e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801bb82:	e7f5      	b.n	801bb70 <_vfprintf_r+0x290>
 801bb84:	f045 0501 	orr.w	r5, r5, #1
 801bb88:	e7f2      	b.n	801bb70 <_vfprintf_r+0x290>
 801bb8a:	f856 3b04 	ldr.w	r3, [r6], #4
 801bb8e:	930e      	str	r3, [sp, #56]	@ 0x38
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	daed      	bge.n	801bb70 <_vfprintf_r+0x290>
 801bb94:	425b      	negs	r3, r3
 801bb96:	930e      	str	r3, [sp, #56]	@ 0x38
 801bb98:	f045 0504 	orr.w	r5, r5, #4
 801bb9c:	e7e8      	b.n	801bb70 <_vfprintf_r+0x290>
 801bb9e:	232b      	movs	r3, #43	@ 0x2b
 801bba0:	e7ed      	b.n	801bb7e <_vfprintf_r+0x29e>
 801bba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bba8:	9206      	str	r2, [sp, #24]
 801bbaa:	2a2a      	cmp	r2, #42	@ 0x2a
 801bbac:	d10f      	bne.n	801bbce <_vfprintf_r+0x2ee>
 801bbae:	f856 2b04 	ldr.w	r2, [r6], #4
 801bbb2:	930c      	str	r3, [sp, #48]	@ 0x30
 801bbb4:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 801bbb8:	e7da      	b.n	801bb70 <_vfprintf_r+0x290>
 801bbba:	fb01 2909 	mla	r9, r1, r9, r2
 801bbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbc2:	9206      	str	r2, [sp, #24]
 801bbc4:	9a06      	ldr	r2, [sp, #24]
 801bbc6:	3a30      	subs	r2, #48	@ 0x30
 801bbc8:	2a09      	cmp	r2, #9
 801bbca:	d9f6      	bls.n	801bbba <_vfprintf_r+0x2da>
 801bbcc:	e72d      	b.n	801ba2a <_vfprintf_r+0x14a>
 801bbce:	f04f 0900 	mov.w	r9, #0
 801bbd2:	210a      	movs	r1, #10
 801bbd4:	e7f6      	b.n	801bbc4 <_vfprintf_r+0x2e4>
 801bbd6:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801bbda:	e7c9      	b.n	801bb70 <_vfprintf_r+0x290>
 801bbdc:	2200      	movs	r2, #0
 801bbde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbe0:	920e      	str	r2, [sp, #56]	@ 0x38
 801bbe2:	210a      	movs	r1, #10
 801bbe4:	9a06      	ldr	r2, [sp, #24]
 801bbe6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801bbe8:	3a30      	subs	r2, #48	@ 0x30
 801bbea:	fb01 2200 	mla	r2, r1, r0, r2
 801bbee:	920e      	str	r2, [sp, #56]	@ 0x38
 801bbf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbf4:	9206      	str	r2, [sp, #24]
 801bbf6:	3a30      	subs	r2, #48	@ 0x30
 801bbf8:	2a09      	cmp	r2, #9
 801bbfa:	d9f3      	bls.n	801bbe4 <_vfprintf_r+0x304>
 801bbfc:	e715      	b.n	801ba2a <_vfprintf_r+0x14a>
 801bbfe:	f045 0508 	orr.w	r5, r5, #8
 801bc02:	e7b5      	b.n	801bb70 <_vfprintf_r+0x290>
 801bc04:	f3af 8000 	nop.w
	...
 801bc10:	08020938 	.word	0x08020938
 801bc14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc16:	781b      	ldrb	r3, [r3, #0]
 801bc18:	2b68      	cmp	r3, #104	@ 0x68
 801bc1a:	bf01      	itttt	eq
 801bc1c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801bc1e:	3301      	addeq	r3, #1
 801bc20:	930c      	streq	r3, [sp, #48]	@ 0x30
 801bc22:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801bc26:	bf18      	it	ne
 801bc28:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801bc2c:	e7a0      	b.n	801bb70 <_vfprintf_r+0x290>
 801bc2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc30:	781b      	ldrb	r3, [r3, #0]
 801bc32:	2b6c      	cmp	r3, #108	@ 0x6c
 801bc34:	d105      	bne.n	801bc42 <_vfprintf_r+0x362>
 801bc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc38:	3301      	adds	r3, #1
 801bc3a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc3c:	f045 0520 	orr.w	r5, r5, #32
 801bc40:	e796      	b.n	801bb70 <_vfprintf_r+0x290>
 801bc42:	f045 0510 	orr.w	r5, r5, #16
 801bc46:	e793      	b.n	801bb70 <_vfprintf_r+0x290>
 801bc48:	4632      	mov	r2, r6
 801bc4a:	f852 3b04 	ldr.w	r3, [r2], #4
 801bc4e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801bc52:	2300      	movs	r3, #0
 801bc54:	9207      	str	r2, [sp, #28]
 801bc56:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801bc5a:	469a      	mov	sl, r3
 801bc5c:	f04f 0901 	mov.w	r9, #1
 801bc60:	9310      	str	r3, [sp, #64]	@ 0x40
 801bc62:	461f      	mov	r7, r3
 801bc64:	9308      	str	r3, [sp, #32]
 801bc66:	461e      	mov	r6, r3
 801bc68:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 801bc6c:	e1da      	b.n	801c024 <_vfprintf_r+0x744>
 801bc6e:	f045 0510 	orr.w	r5, r5, #16
 801bc72:	06af      	lsls	r7, r5, #26
 801bc74:	d512      	bpl.n	801bc9c <_vfprintf_r+0x3bc>
 801bc76:	3607      	adds	r6, #7
 801bc78:	f026 0307 	bic.w	r3, r6, #7
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	685f      	ldr	r7, [r3, #4]
 801bc80:	f852 6b08 	ldr.w	r6, [r2], #8
 801bc84:	9207      	str	r2, [sp, #28]
 801bc86:	2f00      	cmp	r7, #0
 801bc88:	da06      	bge.n	801bc98 <_vfprintf_r+0x3b8>
 801bc8a:	4276      	negs	r6, r6
 801bc8c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801bc90:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801bc94:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801bc98:	2301      	movs	r3, #1
 801bc9a:	e384      	b.n	801c3a6 <_vfprintf_r+0xac6>
 801bc9c:	4633      	mov	r3, r6
 801bc9e:	06ee      	lsls	r6, r5, #27
 801bca0:	f853 7b04 	ldr.w	r7, [r3], #4
 801bca4:	9307      	str	r3, [sp, #28]
 801bca6:	d502      	bpl.n	801bcae <_vfprintf_r+0x3ce>
 801bca8:	463e      	mov	r6, r7
 801bcaa:	17ff      	asrs	r7, r7, #31
 801bcac:	e7eb      	b.n	801bc86 <_vfprintf_r+0x3a6>
 801bcae:	0668      	lsls	r0, r5, #25
 801bcb0:	d503      	bpl.n	801bcba <_vfprintf_r+0x3da>
 801bcb2:	b23e      	sxth	r6, r7
 801bcb4:	f347 37c0 	sbfx	r7, r7, #15, #1
 801bcb8:	e7e5      	b.n	801bc86 <_vfprintf_r+0x3a6>
 801bcba:	05a9      	lsls	r1, r5, #22
 801bcbc:	d5f4      	bpl.n	801bca8 <_vfprintf_r+0x3c8>
 801bcbe:	b27e      	sxtb	r6, r7
 801bcc0:	f347 17c0 	sbfx	r7, r7, #7, #1
 801bcc4:	e7df      	b.n	801bc86 <_vfprintf_r+0x3a6>
 801bcc6:	3607      	adds	r6, #7
 801bcc8:	f026 0307 	bic.w	r3, r6, #7
 801bccc:	ecb3 7b02 	vldmia	r3!, {d7}
 801bcd0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801bcd4:	9307      	str	r3, [sp, #28]
 801bcd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bcd8:	931a      	str	r3, [sp, #104]	@ 0x68
 801bcda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bcdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bce0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801bce2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801bce6:	4b85      	ldr	r3, [pc, #532]	@ (801befc <_vfprintf_r+0x61c>)
 801bce8:	f04f 32ff 	mov.w	r2, #4294967295
 801bcec:	f7e4 ff1e 	bl	8000b2c <__aeabi_dcmpun>
 801bcf0:	bb10      	cbnz	r0, 801bd38 <_vfprintf_r+0x458>
 801bcf2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801bcf6:	4b81      	ldr	r3, [pc, #516]	@ (801befc <_vfprintf_r+0x61c>)
 801bcf8:	f04f 32ff 	mov.w	r2, #4294967295
 801bcfc:	f7e4 fef8 	bl	8000af0 <__aeabi_dcmple>
 801bd00:	b9d0      	cbnz	r0, 801bd38 <_vfprintf_r+0x458>
 801bd02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bd06:	2200      	movs	r2, #0
 801bd08:	2300      	movs	r3, #0
 801bd0a:	f7e4 fee7 	bl	8000adc <__aeabi_dcmplt>
 801bd0e:	b110      	cbz	r0, 801bd16 <_vfprintf_r+0x436>
 801bd10:	232d      	movs	r3, #45	@ 0x2d
 801bd12:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801bd16:	4a7a      	ldr	r2, [pc, #488]	@ (801bf00 <_vfprintf_r+0x620>)
 801bd18:	4b7a      	ldr	r3, [pc, #488]	@ (801bf04 <_vfprintf_r+0x624>)
 801bd1a:	9906      	ldr	r1, [sp, #24]
 801bd1c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801bd20:	2947      	cmp	r1, #71	@ 0x47
 801bd22:	bfd4      	ite	le
 801bd24:	4690      	movle	r8, r2
 801bd26:	4698      	movgt	r8, r3
 801bd28:	f04f 0a00 	mov.w	sl, #0
 801bd2c:	f04f 0903 	mov.w	r9, #3
 801bd30:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801bd34:	f000 bff8 	b.w	801cd28 <_vfprintf_r+0x1448>
 801bd38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801bd3c:	4610      	mov	r0, r2
 801bd3e:	4619      	mov	r1, r3
 801bd40:	f7e4 fef4 	bl	8000b2c <__aeabi_dcmpun>
 801bd44:	4682      	mov	sl, r0
 801bd46:	b140      	cbz	r0, 801bd5a <_vfprintf_r+0x47a>
 801bd48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd4a:	4a6f      	ldr	r2, [pc, #444]	@ (801bf08 <_vfprintf_r+0x628>)
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	bfbc      	itt	lt
 801bd50:	232d      	movlt	r3, #45	@ 0x2d
 801bd52:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801bd56:	4b6d      	ldr	r3, [pc, #436]	@ (801bf0c <_vfprintf_r+0x62c>)
 801bd58:	e7df      	b.n	801bd1a <_vfprintf_r+0x43a>
 801bd5a:	9b06      	ldr	r3, [sp, #24]
 801bd5c:	2b61      	cmp	r3, #97	@ 0x61
 801bd5e:	d02e      	beq.n	801bdbe <_vfprintf_r+0x4de>
 801bd60:	2b41      	cmp	r3, #65	@ 0x41
 801bd62:	d12e      	bne.n	801bdc2 <_vfprintf_r+0x4e2>
 801bd64:	2358      	movs	r3, #88	@ 0x58
 801bd66:	2230      	movs	r2, #48	@ 0x30
 801bd68:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801bd6c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801bd70:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801bd74:	f045 0502 	orr.w	r5, r5, #2
 801bd78:	f340 80ae 	ble.w	801bed8 <_vfprintf_r+0x5f8>
 801bd7c:	9803      	ldr	r0, [sp, #12]
 801bd7e:	f109 0101 	add.w	r1, r9, #1
 801bd82:	f7fe f985 	bl	801a090 <_malloc_r>
 801bd86:	4680      	mov	r8, r0
 801bd88:	2800      	cmp	r0, #0
 801bd8a:	f040 80aa 	bne.w	801bee2 <_vfprintf_r+0x602>
 801bd8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801bd92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bd96:	f8ab 300c 	strh.w	r3, [fp, #12]
 801bd9a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801bd9e:	07d9      	lsls	r1, r3, #31
 801bda0:	d407      	bmi.n	801bdb2 <_vfprintf_r+0x4d2>
 801bda2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801bda6:	059a      	lsls	r2, r3, #22
 801bda8:	d403      	bmi.n	801bdb2 <_vfprintf_r+0x4d2>
 801bdaa:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801bdae:	f7fe f83a 	bl	8019e26 <__retarget_lock_release_recursive>
 801bdb2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801bdb6:	065b      	lsls	r3, r3, #25
 801bdb8:	f57f add6 	bpl.w	801b968 <_vfprintf_r+0x88>
 801bdbc:	e5d1      	b.n	801b962 <_vfprintf_r+0x82>
 801bdbe:	2378      	movs	r3, #120	@ 0x78
 801bdc0:	e7d1      	b.n	801bd66 <_vfprintf_r+0x486>
 801bdc2:	f1b9 3fff 	cmp.w	r9, #4294967295
 801bdc6:	f000 808e 	beq.w	801bee6 <_vfprintf_r+0x606>
 801bdca:	9b06      	ldr	r3, [sp, #24]
 801bdcc:	f023 0320 	bic.w	r3, r3, #32
 801bdd0:	2b47      	cmp	r3, #71	@ 0x47
 801bdd2:	d105      	bne.n	801bde0 <_vfprintf_r+0x500>
 801bdd4:	f1b9 0f00 	cmp.w	r9, #0
 801bdd8:	d102      	bne.n	801bde0 <_vfprintf_r+0x500>
 801bdda:	46ca      	mov	sl, r9
 801bddc:	f04f 0901 	mov.w	r9, #1
 801bde0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801bde4:	9311      	str	r3, [sp, #68]	@ 0x44
 801bde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	da7f      	bge.n	801beec <_vfprintf_r+0x60c>
 801bdec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bdee:	9314      	str	r3, [sp, #80]	@ 0x50
 801bdf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bdf2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801bdf6:	9315      	str	r3, [sp, #84]	@ 0x54
 801bdf8:	232d      	movs	r3, #45	@ 0x2d
 801bdfa:	931c      	str	r3, [sp, #112]	@ 0x70
 801bdfc:	9b06      	ldr	r3, [sp, #24]
 801bdfe:	f023 0320 	bic.w	r3, r3, #32
 801be02:	2b41      	cmp	r3, #65	@ 0x41
 801be04:	9308      	str	r3, [sp, #32]
 801be06:	f040 81e7 	bne.w	801c1d8 <_vfprintf_r+0x8f8>
 801be0a:	a820      	add	r0, sp, #128	@ 0x80
 801be0c:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801be10:	f002 f844 	bl	801de9c <frexp>
 801be14:	2200      	movs	r2, #0
 801be16:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801be1a:	ec51 0b10 	vmov	r0, r1, d0
 801be1e:	f7e4 fbeb 	bl	80005f8 <__aeabi_dmul>
 801be22:	4602      	mov	r2, r0
 801be24:	460b      	mov	r3, r1
 801be26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801be2a:	2200      	movs	r2, #0
 801be2c:	2300      	movs	r3, #0
 801be2e:	f7e4 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 801be32:	b108      	cbz	r0, 801be38 <_vfprintf_r+0x558>
 801be34:	2301      	movs	r3, #1
 801be36:	9320      	str	r3, [sp, #128]	@ 0x80
 801be38:	4a35      	ldr	r2, [pc, #212]	@ (801bf10 <_vfprintf_r+0x630>)
 801be3a:	4b36      	ldr	r3, [pc, #216]	@ (801bf14 <_vfprintf_r+0x634>)
 801be3c:	9906      	ldr	r1, [sp, #24]
 801be3e:	2961      	cmp	r1, #97	@ 0x61
 801be40:	bf18      	it	ne
 801be42:	461a      	movne	r2, r3
 801be44:	9210      	str	r2, [sp, #64]	@ 0x40
 801be46:	f109 37ff 	add.w	r7, r9, #4294967295
 801be4a:	4646      	mov	r6, r8
 801be4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be50:	4b31      	ldr	r3, [pc, #196]	@ (801bf18 <_vfprintf_r+0x638>)
 801be52:	2200      	movs	r2, #0
 801be54:	f7e4 fbd0 	bl	80005f8 <__aeabi_dmul>
 801be58:	4602      	mov	r2, r0
 801be5a:	460b      	mov	r3, r1
 801be5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801be60:	f7e4 fe7a 	bl	8000b58 <__aeabi_d2iz>
 801be64:	9013      	str	r0, [sp, #76]	@ 0x4c
 801be66:	f7e4 fb5d 	bl	8000524 <__aeabi_i2d>
 801be6a:	4602      	mov	r2, r0
 801be6c:	460b      	mov	r3, r1
 801be6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be72:	f7e4 fa09 	bl	8000288 <__aeabi_dsub>
 801be76:	4602      	mov	r2, r0
 801be78:	460b      	mov	r3, r1
 801be7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801be7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801be80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be82:	5c9b      	ldrb	r3, [r3, r2]
 801be84:	f806 3b01 	strb.w	r3, [r6], #1
 801be88:	1c7a      	adds	r2, r7, #1
 801be8a:	d006      	beq.n	801be9a <_vfprintf_r+0x5ba>
 801be8c:	1e7b      	subs	r3, r7, #1
 801be8e:	931d      	str	r3, [sp, #116]	@ 0x74
 801be90:	2200      	movs	r2, #0
 801be92:	2300      	movs	r3, #0
 801be94:	f7e4 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 801be98:	b370      	cbz	r0, 801bef8 <_vfprintf_r+0x618>
 801be9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be9e:	4b1f      	ldr	r3, [pc, #124]	@ (801bf1c <_vfprintf_r+0x63c>)
 801bea0:	2200      	movs	r2, #0
 801bea2:	f7e4 fe39 	bl	8000b18 <__aeabi_dcmpgt>
 801bea6:	2800      	cmp	r0, #0
 801bea8:	d13a      	bne.n	801bf20 <_vfprintf_r+0x640>
 801beaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801beae:	4b1b      	ldr	r3, [pc, #108]	@ (801bf1c <_vfprintf_r+0x63c>)
 801beb0:	2200      	movs	r2, #0
 801beb2:	f7e4 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 801beb6:	b110      	cbz	r0, 801bebe <_vfprintf_r+0x5de>
 801beb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801beba:	07db      	lsls	r3, r3, #31
 801bebc:	d430      	bmi.n	801bf20 <_vfprintf_r+0x640>
 801bebe:	4633      	mov	r3, r6
 801bec0:	19f1      	adds	r1, r6, r7
 801bec2:	2030      	movs	r0, #48	@ 0x30
 801bec4:	1aca      	subs	r2, r1, r3
 801bec6:	2a00      	cmp	r2, #0
 801bec8:	f280 8183 	bge.w	801c1d2 <_vfprintf_r+0x8f2>
 801becc:	1c7b      	adds	r3, r7, #1
 801bece:	3701      	adds	r7, #1
 801bed0:	bfb8      	it	lt
 801bed2:	2300      	movlt	r3, #0
 801bed4:	441e      	add	r6, r3
 801bed6:	e037      	b.n	801bf48 <_vfprintf_r+0x668>
 801bed8:	f04f 0a00 	mov.w	sl, #0
 801bedc:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 801bee0:	e77e      	b.n	801bde0 <_vfprintf_r+0x500>
 801bee2:	4682      	mov	sl, r0
 801bee4:	e77c      	b.n	801bde0 <_vfprintf_r+0x500>
 801bee6:	f04f 0906 	mov.w	r9, #6
 801beea:	e779      	b.n	801bde0 <_vfprintf_r+0x500>
 801beec:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801bef0:	2300      	movs	r3, #0
 801bef2:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801bef6:	e780      	b.n	801bdfa <_vfprintf_r+0x51a>
 801bef8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801befa:	e7a7      	b.n	801be4c <_vfprintf_r+0x56c>
 801befc:	7fefffff 	.word	0x7fefffff
 801bf00:	08020928 	.word	0x08020928
 801bf04:	0802092c 	.word	0x0802092c
 801bf08:	08020930 	.word	0x08020930
 801bf0c:	08020934 	.word	0x08020934
 801bf10:	08020938 	.word	0x08020938
 801bf14:	08020949 	.word	0x08020949
 801bf18:	40300000 	.word	0x40300000
 801bf1c:	3fe00000 	.word	0x3fe00000
 801bf20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bf22:	9624      	str	r6, [sp, #144]	@ 0x90
 801bf24:	7bd9      	ldrb	r1, [r3, #15]
 801bf26:	2030      	movs	r0, #48	@ 0x30
 801bf28:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801bf2a:	1e53      	subs	r3, r2, #1
 801bf2c:	9324      	str	r3, [sp, #144]	@ 0x90
 801bf2e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801bf32:	428b      	cmp	r3, r1
 801bf34:	f000 814a 	beq.w	801c1cc <_vfprintf_r+0x8ec>
 801bf38:	2b39      	cmp	r3, #57	@ 0x39
 801bf3a:	bf0b      	itete	eq
 801bf3c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801bf3e:	3301      	addne	r3, #1
 801bf40:	7a9b      	ldrbeq	r3, [r3, #10]
 801bf42:	b2db      	uxtbne	r3, r3
 801bf44:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bf48:	eba6 0308 	sub.w	r3, r6, r8
 801bf4c:	9304      	str	r3, [sp, #16]
 801bf4e:	9b08      	ldr	r3, [sp, #32]
 801bf50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801bf52:	2b47      	cmp	r3, #71	@ 0x47
 801bf54:	f040 8189 	bne.w	801c26a <_vfprintf_r+0x98a>
 801bf58:	1cf1      	adds	r1, r6, #3
 801bf5a:	db02      	blt.n	801bf62 <_vfprintf_r+0x682>
 801bf5c:	45b1      	cmp	r9, r6
 801bf5e:	f280 81a7 	bge.w	801c2b0 <_vfprintf_r+0x9d0>
 801bf62:	9b06      	ldr	r3, [sp, #24]
 801bf64:	3b02      	subs	r3, #2
 801bf66:	9306      	str	r3, [sp, #24]
 801bf68:	9906      	ldr	r1, [sp, #24]
 801bf6a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801bf6e:	f021 0120 	bic.w	r1, r1, #32
 801bf72:	2941      	cmp	r1, #65	@ 0x41
 801bf74:	bf08      	it	eq
 801bf76:	320f      	addeq	r2, #15
 801bf78:	f106 33ff 	add.w	r3, r6, #4294967295
 801bf7c:	bf06      	itte	eq
 801bf7e:	b2d2      	uxtbeq	r2, r2
 801bf80:	2101      	moveq	r1, #1
 801bf82:	2100      	movne	r1, #0
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	9320      	str	r3, [sp, #128]	@ 0x80
 801bf88:	bfb8      	it	lt
 801bf8a:	f1c6 0301 	rsblt	r3, r6, #1
 801bf8e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801bf92:	bfb4      	ite	lt
 801bf94:	222d      	movlt	r2, #45	@ 0x2d
 801bf96:	222b      	movge	r2, #43	@ 0x2b
 801bf98:	2b09      	cmp	r3, #9
 801bf9a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801bf9e:	f340 817a 	ble.w	801c296 <_vfprintf_r+0x9b6>
 801bfa2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801bfa6:	270a      	movs	r7, #10
 801bfa8:	4602      	mov	r2, r0
 801bfaa:	fbb3 f6f7 	udiv	r6, r3, r7
 801bfae:	fb07 3116 	mls	r1, r7, r6, r3
 801bfb2:	3130      	adds	r1, #48	@ 0x30
 801bfb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801bfb8:	4619      	mov	r1, r3
 801bfba:	2963      	cmp	r1, #99	@ 0x63
 801bfbc:	f100 30ff 	add.w	r0, r0, #4294967295
 801bfc0:	4633      	mov	r3, r6
 801bfc2:	dcf1      	bgt.n	801bfa8 <_vfprintf_r+0x6c8>
 801bfc4:	3330      	adds	r3, #48	@ 0x30
 801bfc6:	1e91      	subs	r1, r2, #2
 801bfc8:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bfcc:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801bfd0:	460b      	mov	r3, r1
 801bfd2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801bfd6:	4283      	cmp	r3, r0
 801bfd8:	f0c0 8158 	bcc.w	801c28c <_vfprintf_r+0x9ac>
 801bfdc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801bfe0:	1a9b      	subs	r3, r3, r2
 801bfe2:	4281      	cmp	r1, r0
 801bfe4:	bf88      	it	hi
 801bfe6:	2300      	movhi	r3, #0
 801bfe8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801bfec:	441a      	add	r2, r3
 801bfee:	ab22      	add	r3, sp, #136	@ 0x88
 801bff0:	1ad3      	subs	r3, r2, r3
 801bff2:	9a04      	ldr	r2, [sp, #16]
 801bff4:	9318      	str	r3, [sp, #96]	@ 0x60
 801bff6:	2a01      	cmp	r2, #1
 801bff8:	eb03 0902 	add.w	r9, r3, r2
 801bffc:	dc01      	bgt.n	801c002 <_vfprintf_r+0x722>
 801bffe:	07ea      	lsls	r2, r5, #31
 801c000:	d501      	bpl.n	801c006 <_vfprintf_r+0x726>
 801c002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c004:	4499      	add	r9, r3
 801c006:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801c00a:	2700      	movs	r7, #0
 801c00c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801c010:	9311      	str	r3, [sp, #68]	@ 0x44
 801c012:	9708      	str	r7, [sp, #32]
 801c014:	463e      	mov	r6, r7
 801c016:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c018:	2b00      	cmp	r3, #0
 801c01a:	f040 8191 	bne.w	801c340 <_vfprintf_r+0xa60>
 801c01e:	2300      	movs	r3, #0
 801c020:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c022:	9310      	str	r3, [sp, #64]	@ 0x40
 801c024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c026:	454b      	cmp	r3, r9
 801c028:	bfb8      	it	lt
 801c02a:	464b      	movlt	r3, r9
 801c02c:	9311      	str	r3, [sp, #68]	@ 0x44
 801c02e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801c032:	b113      	cbz	r3, 801c03a <_vfprintf_r+0x75a>
 801c034:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c036:	3301      	adds	r3, #1
 801c038:	9311      	str	r3, [sp, #68]	@ 0x44
 801c03a:	f015 0302 	ands.w	r3, r5, #2
 801c03e:	931c      	str	r3, [sp, #112]	@ 0x70
 801c040:	bf1e      	ittt	ne
 801c042:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801c044:	3302      	addne	r3, #2
 801c046:	9311      	strne	r3, [sp, #68]	@ 0x44
 801c048:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801c04c:	931d      	str	r3, [sp, #116]	@ 0x74
 801c04e:	d122      	bne.n	801c096 <_vfprintf_r+0x7b6>
 801c050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c052:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c054:	1a9b      	subs	r3, r3, r2
 801c056:	2b00      	cmp	r3, #0
 801c058:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c05a:	dd1c      	ble.n	801c096 <_vfprintf_r+0x7b6>
 801c05c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c05e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c062:	2810      	cmp	r0, #16
 801c064:	489f      	ldr	r0, [pc, #636]	@ (801c2e4 <_vfprintf_r+0xa04>)
 801c066:	6020      	str	r0, [r4, #0]
 801c068:	f102 0201 	add.w	r2, r2, #1
 801c06c:	f104 0108 	add.w	r1, r4, #8
 801c070:	f300 8297 	bgt.w	801c5a2 <_vfprintf_r+0xcc2>
 801c074:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c076:	6060      	str	r0, [r4, #4]
 801c078:	4403      	add	r3, r0
 801c07a:	2a07      	cmp	r2, #7
 801c07c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c080:	f340 82a4 	ble.w	801c5cc <_vfprintf_r+0xcec>
 801c084:	9803      	ldr	r0, [sp, #12]
 801c086:	aa26      	add	r2, sp, #152	@ 0x98
 801c088:	4659      	mov	r1, fp
 801c08a:	f000 fe95 	bl	801cdb8 <__sprint_r>
 801c08e:	2800      	cmp	r0, #0
 801c090:	f040 85ed 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c094:	ac29      	add	r4, sp, #164	@ 0xa4
 801c096:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801c09a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c09c:	b16a      	cbz	r2, 801c0ba <_vfprintf_r+0x7da>
 801c09e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801c0a2:	6022      	str	r2, [r4, #0]
 801c0a4:	2201      	movs	r2, #1
 801c0a6:	4413      	add	r3, r2
 801c0a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c0aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c0ac:	6062      	str	r2, [r4, #4]
 801c0ae:	4413      	add	r3, r2
 801c0b0:	2b07      	cmp	r3, #7
 801c0b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c0b4:	f300 828c 	bgt.w	801c5d0 <_vfprintf_r+0xcf0>
 801c0b8:	3408      	adds	r4, #8
 801c0ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c0bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c0be:	b162      	cbz	r2, 801c0da <_vfprintf_r+0x7fa>
 801c0c0:	aa1f      	add	r2, sp, #124	@ 0x7c
 801c0c2:	6022      	str	r2, [r4, #0]
 801c0c4:	2202      	movs	r2, #2
 801c0c6:	4413      	add	r3, r2
 801c0c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c0ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c0cc:	6062      	str	r2, [r4, #4]
 801c0ce:	3301      	adds	r3, #1
 801c0d0:	2b07      	cmp	r3, #7
 801c0d2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c0d4:	f300 8286 	bgt.w	801c5e4 <_vfprintf_r+0xd04>
 801c0d8:	3408      	adds	r4, #8
 801c0da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c0dc:	2b80      	cmp	r3, #128	@ 0x80
 801c0de:	d122      	bne.n	801c126 <_vfprintf_r+0x846>
 801c0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c0e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c0e4:	1a9b      	subs	r3, r3, r2
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c0ea:	dd1c      	ble.n	801c126 <_vfprintf_r+0x846>
 801c0ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c0ee:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c0f2:	2810      	cmp	r0, #16
 801c0f4:	487c      	ldr	r0, [pc, #496]	@ (801c2e8 <_vfprintf_r+0xa08>)
 801c0f6:	6020      	str	r0, [r4, #0]
 801c0f8:	f102 0201 	add.w	r2, r2, #1
 801c0fc:	f104 0108 	add.w	r1, r4, #8
 801c100:	f300 827a 	bgt.w	801c5f8 <_vfprintf_r+0xd18>
 801c104:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c106:	6060      	str	r0, [r4, #4]
 801c108:	4403      	add	r3, r0
 801c10a:	2a07      	cmp	r2, #7
 801c10c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c110:	f340 8287 	ble.w	801c622 <_vfprintf_r+0xd42>
 801c114:	9803      	ldr	r0, [sp, #12]
 801c116:	aa26      	add	r2, sp, #152	@ 0x98
 801c118:	4659      	mov	r1, fp
 801c11a:	f000 fe4d 	bl	801cdb8 <__sprint_r>
 801c11e:	2800      	cmp	r0, #0
 801c120:	f040 85a5 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c124:	ac29      	add	r4, sp, #164	@ 0xa4
 801c126:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c128:	eba3 0309 	sub.w	r3, r3, r9
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c130:	dd1c      	ble.n	801c16c <_vfprintf_r+0x88c>
 801c132:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c134:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c138:	2810      	cmp	r0, #16
 801c13a:	486b      	ldr	r0, [pc, #428]	@ (801c2e8 <_vfprintf_r+0xa08>)
 801c13c:	6020      	str	r0, [r4, #0]
 801c13e:	f102 0201 	add.w	r2, r2, #1
 801c142:	f104 0108 	add.w	r1, r4, #8
 801c146:	f300 826e 	bgt.w	801c626 <_vfprintf_r+0xd46>
 801c14a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c14c:	6060      	str	r0, [r4, #4]
 801c14e:	4403      	add	r3, r0
 801c150:	2a07      	cmp	r2, #7
 801c152:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c156:	f340 827b 	ble.w	801c650 <_vfprintf_r+0xd70>
 801c15a:	9803      	ldr	r0, [sp, #12]
 801c15c:	aa26      	add	r2, sp, #152	@ 0x98
 801c15e:	4659      	mov	r1, fp
 801c160:	f000 fe2a 	bl	801cdb8 <__sprint_r>
 801c164:	2800      	cmp	r0, #0
 801c166:	f040 8582 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c16a:	ac29      	add	r4, sp, #164	@ 0xa4
 801c16c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c16e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c170:	05e8      	lsls	r0, r5, #23
 801c172:	f100 8273 	bmi.w	801c65c <_vfprintf_r+0xd7c>
 801c176:	444b      	add	r3, r9
 801c178:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c17a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c17c:	3301      	adds	r3, #1
 801c17e:	2b07      	cmp	r3, #7
 801c180:	e9c4 8900 	strd	r8, r9, [r4]
 801c184:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c186:	f300 82af 	bgt.w	801c6e8 <_vfprintf_r+0xe08>
 801c18a:	3408      	adds	r4, #8
 801c18c:	0768      	lsls	r0, r5, #29
 801c18e:	f100 8550 	bmi.w	801cc32 <_vfprintf_r+0x1352>
 801c192:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c196:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c198:	428a      	cmp	r2, r1
 801c19a:	bfac      	ite	ge
 801c19c:	189b      	addge	r3, r3, r2
 801c19e:	185b      	addlt	r3, r3, r1
 801c1a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c1a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c1a4:	b13b      	cbz	r3, 801c1b6 <_vfprintf_r+0x8d6>
 801c1a6:	9803      	ldr	r0, [sp, #12]
 801c1a8:	aa26      	add	r2, sp, #152	@ 0x98
 801c1aa:	4659      	mov	r1, fp
 801c1ac:	f000 fe04 	bl	801cdb8 <__sprint_r>
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	f040 855c 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c1ba:	f1ba 0f00 	cmp.w	sl, #0
 801c1be:	f040 8572 	bne.w	801cca6 <_vfprintf_r+0x13c6>
 801c1c2:	9e07      	ldr	r6, [sp, #28]
 801c1c4:	ac29      	add	r4, sp, #164	@ 0xa4
 801c1c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 801c1ca:	e407      	b.n	801b9dc <_vfprintf_r+0xfc>
 801c1cc:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c1d0:	e6aa      	b.n	801bf28 <_vfprintf_r+0x648>
 801c1d2:	f803 0b01 	strb.w	r0, [r3], #1
 801c1d6:	e675      	b.n	801bec4 <_vfprintf_r+0x5e4>
 801c1d8:	9b08      	ldr	r3, [sp, #32]
 801c1da:	2b46      	cmp	r3, #70	@ 0x46
 801c1dc:	d005      	beq.n	801c1ea <_vfprintf_r+0x90a>
 801c1de:	2b45      	cmp	r3, #69	@ 0x45
 801c1e0:	d11a      	bne.n	801c218 <_vfprintf_r+0x938>
 801c1e2:	f109 0601 	add.w	r6, r9, #1
 801c1e6:	2102      	movs	r1, #2
 801c1e8:	e001      	b.n	801c1ee <_vfprintf_r+0x90e>
 801c1ea:	464e      	mov	r6, r9
 801c1ec:	2103      	movs	r1, #3
 801c1ee:	ab24      	add	r3, sp, #144	@ 0x90
 801c1f0:	9301      	str	r3, [sp, #4]
 801c1f2:	ab21      	add	r3, sp, #132	@ 0x84
 801c1f4:	9300      	str	r3, [sp, #0]
 801c1f6:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801c1fa:	ab20      	add	r3, sp, #128	@ 0x80
 801c1fc:	9803      	ldr	r0, [sp, #12]
 801c1fe:	4632      	mov	r2, r6
 801c200:	f001 ff4a 	bl	801e098 <_dtoa_r>
 801c204:	9b08      	ldr	r3, [sp, #32]
 801c206:	2b47      	cmp	r3, #71	@ 0x47
 801c208:	4680      	mov	r8, r0
 801c20a:	d119      	bne.n	801c240 <_vfprintf_r+0x960>
 801c20c:	07e8      	lsls	r0, r5, #31
 801c20e:	d405      	bmi.n	801c21c <_vfprintf_r+0x93c>
 801c210:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c212:	eba3 0308 	sub.w	r3, r3, r8
 801c216:	e699      	b.n	801bf4c <_vfprintf_r+0x66c>
 801c218:	464e      	mov	r6, r9
 801c21a:	e7e4      	b.n	801c1e6 <_vfprintf_r+0x906>
 801c21c:	eb08 0706 	add.w	r7, r8, r6
 801c220:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801c224:	2200      	movs	r2, #0
 801c226:	2300      	movs	r3, #0
 801c228:	f7e4 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 801c22c:	b100      	cbz	r0, 801c230 <_vfprintf_r+0x950>
 801c22e:	9724      	str	r7, [sp, #144]	@ 0x90
 801c230:	2230      	movs	r2, #48	@ 0x30
 801c232:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c234:	429f      	cmp	r7, r3
 801c236:	d9eb      	bls.n	801c210 <_vfprintf_r+0x930>
 801c238:	1c59      	adds	r1, r3, #1
 801c23a:	9124      	str	r1, [sp, #144]	@ 0x90
 801c23c:	701a      	strb	r2, [r3, #0]
 801c23e:	e7f8      	b.n	801c232 <_vfprintf_r+0x952>
 801c240:	9b08      	ldr	r3, [sp, #32]
 801c242:	2b46      	cmp	r3, #70	@ 0x46
 801c244:	eb00 0706 	add.w	r7, r0, r6
 801c248:	d1ea      	bne.n	801c220 <_vfprintf_r+0x940>
 801c24a:	7803      	ldrb	r3, [r0, #0]
 801c24c:	2b30      	cmp	r3, #48	@ 0x30
 801c24e:	d109      	bne.n	801c264 <_vfprintf_r+0x984>
 801c250:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801c254:	2200      	movs	r2, #0
 801c256:	2300      	movs	r3, #0
 801c258:	f7e4 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 801c25c:	b910      	cbnz	r0, 801c264 <_vfprintf_r+0x984>
 801c25e:	f1c6 0601 	rsb	r6, r6, #1
 801c262:	9620      	str	r6, [sp, #128]	@ 0x80
 801c264:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c266:	441f      	add	r7, r3
 801c268:	e7da      	b.n	801c220 <_vfprintf_r+0x940>
 801c26a:	9b08      	ldr	r3, [sp, #32]
 801c26c:	2b46      	cmp	r3, #70	@ 0x46
 801c26e:	f47f ae7b 	bne.w	801bf68 <_vfprintf_r+0x688>
 801c272:	f005 0301 	and.w	r3, r5, #1
 801c276:	2e00      	cmp	r6, #0
 801c278:	ea43 0309 	orr.w	r3, r3, r9
 801c27c:	dd25      	ble.n	801c2ca <_vfprintf_r+0x9ea>
 801c27e:	b37b      	cbz	r3, 801c2e0 <_vfprintf_r+0xa00>
 801c280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c282:	18f3      	adds	r3, r6, r3
 801c284:	4499      	add	r9, r3
 801c286:	2366      	movs	r3, #102	@ 0x66
 801c288:	9306      	str	r3, [sp, #24]
 801c28a:	e033      	b.n	801c2f4 <_vfprintf_r+0xa14>
 801c28c:	f813 7b01 	ldrb.w	r7, [r3], #1
 801c290:	f806 7f01 	strb.w	r7, [r6, #1]!
 801c294:	e69f      	b.n	801bfd6 <_vfprintf_r+0x6f6>
 801c296:	b941      	cbnz	r1, 801c2aa <_vfprintf_r+0x9ca>
 801c298:	2230      	movs	r2, #48	@ 0x30
 801c29a:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801c29e:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801c2a2:	3330      	adds	r3, #48	@ 0x30
 801c2a4:	f802 3b01 	strb.w	r3, [r2], #1
 801c2a8:	e6a1      	b.n	801bfee <_vfprintf_r+0x70e>
 801c2aa:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801c2ae:	e7f8      	b.n	801c2a2 <_vfprintf_r+0x9c2>
 801c2b0:	9b04      	ldr	r3, [sp, #16]
 801c2b2:	42b3      	cmp	r3, r6
 801c2b4:	dd0d      	ble.n	801c2d2 <_vfprintf_r+0x9f2>
 801c2b6:	9b04      	ldr	r3, [sp, #16]
 801c2b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c2ba:	2e00      	cmp	r6, #0
 801c2bc:	eb03 0902 	add.w	r9, r3, r2
 801c2c0:	dc0c      	bgt.n	801c2dc <_vfprintf_r+0x9fc>
 801c2c2:	f1c6 0301 	rsb	r3, r6, #1
 801c2c6:	4499      	add	r9, r3
 801c2c8:	e008      	b.n	801c2dc <_vfprintf_r+0x9fc>
 801c2ca:	b17b      	cbz	r3, 801c2ec <_vfprintf_r+0xa0c>
 801c2cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c2ce:	3301      	adds	r3, #1
 801c2d0:	e7d8      	b.n	801c284 <_vfprintf_r+0x9a4>
 801c2d2:	07eb      	lsls	r3, r5, #31
 801c2d4:	d521      	bpl.n	801c31a <_vfprintf_r+0xa3a>
 801c2d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c2d8:	eb06 0903 	add.w	r9, r6, r3
 801c2dc:	2367      	movs	r3, #103	@ 0x67
 801c2de:	e7d3      	b.n	801c288 <_vfprintf_r+0x9a8>
 801c2e0:	46b1      	mov	r9, r6
 801c2e2:	e7d0      	b.n	801c286 <_vfprintf_r+0x9a6>
 801c2e4:	0802098c 	.word	0x0802098c
 801c2e8:	0802097c 	.word	0x0802097c
 801c2ec:	2366      	movs	r3, #102	@ 0x66
 801c2ee:	9306      	str	r3, [sp, #24]
 801c2f0:	f04f 0901 	mov.w	r9, #1
 801c2f4:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801c2f8:	9308      	str	r3, [sp, #32]
 801c2fa:	d01f      	beq.n	801c33c <_vfprintf_r+0xa5c>
 801c2fc:	2700      	movs	r7, #0
 801c2fe:	2e00      	cmp	r6, #0
 801c300:	9708      	str	r7, [sp, #32]
 801c302:	f77f ae88 	ble.w	801c016 <_vfprintf_r+0x736>
 801c306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c308:	781b      	ldrb	r3, [r3, #0]
 801c30a:	2bff      	cmp	r3, #255	@ 0xff
 801c30c:	d107      	bne.n	801c31e <_vfprintf_r+0xa3e>
 801c30e:	9b08      	ldr	r3, [sp, #32]
 801c310:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c312:	443b      	add	r3, r7
 801c314:	fb02 9903 	mla	r9, r2, r3, r9
 801c318:	e67d      	b.n	801c016 <_vfprintf_r+0x736>
 801c31a:	46b1      	mov	r9, r6
 801c31c:	e7de      	b.n	801c2dc <_vfprintf_r+0x9fc>
 801c31e:	42b3      	cmp	r3, r6
 801c320:	daf5      	bge.n	801c30e <_vfprintf_r+0xa2e>
 801c322:	1af6      	subs	r6, r6, r3
 801c324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c326:	785b      	ldrb	r3, [r3, #1]
 801c328:	b133      	cbz	r3, 801c338 <_vfprintf_r+0xa58>
 801c32a:	9b08      	ldr	r3, [sp, #32]
 801c32c:	3301      	adds	r3, #1
 801c32e:	9308      	str	r3, [sp, #32]
 801c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c332:	3301      	adds	r3, #1
 801c334:	9309      	str	r3, [sp, #36]	@ 0x24
 801c336:	e7e6      	b.n	801c306 <_vfprintf_r+0xa26>
 801c338:	3701      	adds	r7, #1
 801c33a:	e7e4      	b.n	801c306 <_vfprintf_r+0xa26>
 801c33c:	9f08      	ldr	r7, [sp, #32]
 801c33e:	e66a      	b.n	801c016 <_vfprintf_r+0x736>
 801c340:	232d      	movs	r3, #45	@ 0x2d
 801c342:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c346:	e66a      	b.n	801c01e <_vfprintf_r+0x73e>
 801c348:	06af      	lsls	r7, r5, #26
 801c34a:	d507      	bpl.n	801c35c <_vfprintf_r+0xa7c>
 801c34c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c34e:	6833      	ldr	r3, [r6, #0]
 801c350:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c352:	17d2      	asrs	r2, r2, #31
 801c354:	e9c3 1200 	strd	r1, r2, [r3]
 801c358:	3604      	adds	r6, #4
 801c35a:	e734      	b.n	801c1c6 <_vfprintf_r+0x8e6>
 801c35c:	06e8      	lsls	r0, r5, #27
 801c35e:	d503      	bpl.n	801c368 <_vfprintf_r+0xa88>
 801c360:	6833      	ldr	r3, [r6, #0]
 801c362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c364:	601a      	str	r2, [r3, #0]
 801c366:	e7f7      	b.n	801c358 <_vfprintf_r+0xa78>
 801c368:	0669      	lsls	r1, r5, #25
 801c36a:	d503      	bpl.n	801c374 <_vfprintf_r+0xa94>
 801c36c:	6833      	ldr	r3, [r6, #0]
 801c36e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c370:	801a      	strh	r2, [r3, #0]
 801c372:	e7f1      	b.n	801c358 <_vfprintf_r+0xa78>
 801c374:	05aa      	lsls	r2, r5, #22
 801c376:	d5f3      	bpl.n	801c360 <_vfprintf_r+0xa80>
 801c378:	6833      	ldr	r3, [r6, #0]
 801c37a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c37c:	701a      	strb	r2, [r3, #0]
 801c37e:	e7eb      	b.n	801c358 <_vfprintf_r+0xa78>
 801c380:	f045 0510 	orr.w	r5, r5, #16
 801c384:	f015 0320 	ands.w	r3, r5, #32
 801c388:	d020      	beq.n	801c3cc <_vfprintf_r+0xaec>
 801c38a:	3607      	adds	r6, #7
 801c38c:	f026 0307 	bic.w	r3, r6, #7
 801c390:	461a      	mov	r2, r3
 801c392:	685f      	ldr	r7, [r3, #4]
 801c394:	f852 6b08 	ldr.w	r6, [r2], #8
 801c398:	9207      	str	r2, [sp, #28]
 801c39a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801c39e:	2300      	movs	r3, #0
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801c3a6:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c3aa:	f000 8491 	beq.w	801ccd0 <_vfprintf_r+0x13f0>
 801c3ae:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801c3b2:	9208      	str	r2, [sp, #32]
 801c3b4:	ea56 0207 	orrs.w	r2, r6, r7
 801c3b8:	f040 848f 	bne.w	801ccda <_vfprintf_r+0x13fa>
 801c3bc:	f1b9 0f00 	cmp.w	r9, #0
 801c3c0:	f000 80db 	beq.w	801c57a <_vfprintf_r+0xc9a>
 801c3c4:	2b01      	cmp	r3, #1
 801c3c6:	f040 848b 	bne.w	801cce0 <_vfprintf_r+0x1400>
 801c3ca:	e083      	b.n	801c4d4 <_vfprintf_r+0xbf4>
 801c3cc:	4632      	mov	r2, r6
 801c3ce:	f015 0710 	ands.w	r7, r5, #16
 801c3d2:	f852 6b04 	ldr.w	r6, [r2], #4
 801c3d6:	9207      	str	r2, [sp, #28]
 801c3d8:	d001      	beq.n	801c3de <_vfprintf_r+0xafe>
 801c3da:	461f      	mov	r7, r3
 801c3dc:	e7dd      	b.n	801c39a <_vfprintf_r+0xaba>
 801c3de:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801c3e2:	d001      	beq.n	801c3e8 <_vfprintf_r+0xb08>
 801c3e4:	b2b6      	uxth	r6, r6
 801c3e6:	e7d8      	b.n	801c39a <_vfprintf_r+0xaba>
 801c3e8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801c3ec:	d0d5      	beq.n	801c39a <_vfprintf_r+0xaba>
 801c3ee:	b2f6      	uxtb	r6, r6
 801c3f0:	e7f3      	b.n	801c3da <_vfprintf_r+0xafa>
 801c3f2:	4633      	mov	r3, r6
 801c3f4:	2278      	movs	r2, #120	@ 0x78
 801c3f6:	f853 6b04 	ldr.w	r6, [r3], #4
 801c3fa:	9307      	str	r3, [sp, #28]
 801c3fc:	f647 0330 	movw	r3, #30768	@ 0x7830
 801c400:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801c404:	4b93      	ldr	r3, [pc, #588]	@ (801c654 <_vfprintf_r+0xd74>)
 801c406:	9319      	str	r3, [sp, #100]	@ 0x64
 801c408:	2700      	movs	r7, #0
 801c40a:	f045 0502 	orr.w	r5, r5, #2
 801c40e:	2302      	movs	r3, #2
 801c410:	9206      	str	r2, [sp, #24]
 801c412:	e7c5      	b.n	801c3a0 <_vfprintf_r+0xac0>
 801c414:	4633      	mov	r3, r6
 801c416:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c41a:	f853 8b04 	ldr.w	r8, [r3], #4
 801c41e:	9307      	str	r3, [sp, #28]
 801c420:	f04f 0600 	mov.w	r6, #0
 801c424:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801c428:	d00f      	beq.n	801c44a <_vfprintf_r+0xb6a>
 801c42a:	464a      	mov	r2, r9
 801c42c:	4631      	mov	r1, r6
 801c42e:	4640      	mov	r0, r8
 801c430:	f7e3 fed6 	bl	80001e0 <memchr>
 801c434:	4682      	mov	sl, r0
 801c436:	2800      	cmp	r0, #0
 801c438:	f43f ac7a 	beq.w	801bd30 <_vfprintf_r+0x450>
 801c43c:	eba0 0908 	sub.w	r9, r0, r8
 801c440:	46b2      	mov	sl, r6
 801c442:	9610      	str	r6, [sp, #64]	@ 0x40
 801c444:	4637      	mov	r7, r6
 801c446:	9608      	str	r6, [sp, #32]
 801c448:	e5ec      	b.n	801c024 <_vfprintf_r+0x744>
 801c44a:	4640      	mov	r0, r8
 801c44c:	f7e3 fec0 	bl	80001d0 <strlen>
 801c450:	46b2      	mov	sl, r6
 801c452:	4681      	mov	r9, r0
 801c454:	e46c      	b.n	801bd30 <_vfprintf_r+0x450>
 801c456:	f045 0510 	orr.w	r5, r5, #16
 801c45a:	f015 0320 	ands.w	r3, r5, #32
 801c45e:	d009      	beq.n	801c474 <_vfprintf_r+0xb94>
 801c460:	3607      	adds	r6, #7
 801c462:	f026 0307 	bic.w	r3, r6, #7
 801c466:	461a      	mov	r2, r3
 801c468:	685f      	ldr	r7, [r3, #4]
 801c46a:	f852 6b08 	ldr.w	r6, [r2], #8
 801c46e:	9207      	str	r2, [sp, #28]
 801c470:	2301      	movs	r3, #1
 801c472:	e795      	b.n	801c3a0 <_vfprintf_r+0xac0>
 801c474:	4632      	mov	r2, r6
 801c476:	f015 0710 	ands.w	r7, r5, #16
 801c47a:	f852 6b04 	ldr.w	r6, [r2], #4
 801c47e:	9207      	str	r2, [sp, #28]
 801c480:	d001      	beq.n	801c486 <_vfprintf_r+0xba6>
 801c482:	461f      	mov	r7, r3
 801c484:	e7f4      	b.n	801c470 <_vfprintf_r+0xb90>
 801c486:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801c48a:	d001      	beq.n	801c490 <_vfprintf_r+0xbb0>
 801c48c:	b2b6      	uxth	r6, r6
 801c48e:	e7ef      	b.n	801c470 <_vfprintf_r+0xb90>
 801c490:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801c494:	d0ec      	beq.n	801c470 <_vfprintf_r+0xb90>
 801c496:	b2f6      	uxtb	r6, r6
 801c498:	e7f3      	b.n	801c482 <_vfprintf_r+0xba2>
 801c49a:	4b6f      	ldr	r3, [pc, #444]	@ (801c658 <_vfprintf_r+0xd78>)
 801c49c:	f7ff bb33 	b.w	801bb06 <_vfprintf_r+0x226>
 801c4a0:	4632      	mov	r2, r6
 801c4a2:	f015 0710 	ands.w	r7, r5, #16
 801c4a6:	f852 6b04 	ldr.w	r6, [r2], #4
 801c4aa:	9207      	str	r2, [sp, #28]
 801c4ac:	d002      	beq.n	801c4b4 <_vfprintf_r+0xbd4>
 801c4ae:	461f      	mov	r7, r3
 801c4b0:	f7ff bb36 	b.w	801bb20 <_vfprintf_r+0x240>
 801c4b4:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801c4b8:	d002      	beq.n	801c4c0 <_vfprintf_r+0xbe0>
 801c4ba:	b2b6      	uxth	r6, r6
 801c4bc:	f7ff bb30 	b.w	801bb20 <_vfprintf_r+0x240>
 801c4c0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801c4c4:	f43f ab2c 	beq.w	801bb20 <_vfprintf_r+0x240>
 801c4c8:	b2f6      	uxtb	r6, r6
 801c4ca:	e7f0      	b.n	801c4ae <_vfprintf_r+0xbce>
 801c4cc:	2e0a      	cmp	r6, #10
 801c4ce:	f177 0300 	sbcs.w	r3, r7, #0
 801c4d2:	d207      	bcs.n	801c4e4 <_vfprintf_r+0xc04>
 801c4d4:	3630      	adds	r6, #48	@ 0x30
 801c4d6:	b2f6      	uxtb	r6, r6
 801c4d8:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801c4dc:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 801c4e0:	f000 bc1a 	b.w	801cd18 <_vfprintf_r+0x1438>
 801c4e4:	2300      	movs	r3, #0
 801c4e6:	9304      	str	r3, [sp, #16]
 801c4e8:	9b08      	ldr	r3, [sp, #32]
 801c4ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c4ee:	ad52      	add	r5, sp, #328	@ 0x148
 801c4f0:	9310      	str	r3, [sp, #64]	@ 0x40
 801c4f2:	220a      	movs	r2, #10
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	4630      	mov	r0, r6
 801c4f8:	4639      	mov	r1, r7
 801c4fa:	f7e4 fbc5 	bl	8000c88 <__aeabi_uldivmod>
 801c4fe:	9b04      	ldr	r3, [sp, #16]
 801c500:	9011      	str	r0, [sp, #68]	@ 0x44
 801c502:	3301      	adds	r3, #1
 801c504:	9304      	str	r3, [sp, #16]
 801c506:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c508:	3230      	adds	r2, #48	@ 0x30
 801c50a:	468a      	mov	sl, r1
 801c50c:	f105 38ff 	add.w	r8, r5, #4294967295
 801c510:	f805 2c01 	strb.w	r2, [r5, #-1]
 801c514:	b1d3      	cbz	r3, 801c54c <_vfprintf_r+0xc6c>
 801c516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c518:	9a04      	ldr	r2, [sp, #16]
 801c51a:	781b      	ldrb	r3, [r3, #0]
 801c51c:	429a      	cmp	r2, r3
 801c51e:	d115      	bne.n	801c54c <_vfprintf_r+0xc6c>
 801c520:	2aff      	cmp	r2, #255	@ 0xff
 801c522:	d013      	beq.n	801c54c <_vfprintf_r+0xc6c>
 801c524:	2e0a      	cmp	r6, #10
 801c526:	f177 0300 	sbcs.w	r3, r7, #0
 801c52a:	d30f      	bcc.n	801c54c <_vfprintf_r+0xc6c>
 801c52c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c52e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c530:	eba8 0803 	sub.w	r8, r8, r3
 801c534:	461a      	mov	r2, r3
 801c536:	4640      	mov	r0, r8
 801c538:	f001 fc62 	bl	801de00 <strncpy>
 801c53c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c53e:	785b      	ldrb	r3, [r3, #1]
 801c540:	b11b      	cbz	r3, 801c54a <_vfprintf_r+0xc6a>
 801c542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c544:	3301      	adds	r3, #1
 801c546:	9309      	str	r3, [sp, #36]	@ 0x24
 801c548:	2300      	movs	r3, #0
 801c54a:	9304      	str	r3, [sp, #16]
 801c54c:	2e0a      	cmp	r6, #10
 801c54e:	f177 0700 	sbcs.w	r7, r7, #0
 801c552:	f0c0 83e1 	bcc.w	801cd18 <_vfprintf_r+0x1438>
 801c556:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c558:	4657      	mov	r7, sl
 801c55a:	4645      	mov	r5, r8
 801c55c:	e7c9      	b.n	801c4f2 <_vfprintf_r+0xc12>
 801c55e:	f006 030f 	and.w	r3, r6, #15
 801c562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c564:	0936      	lsrs	r6, r6, #4
 801c566:	5cd3      	ldrb	r3, [r2, r3]
 801c568:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801c56c:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801c570:	093f      	lsrs	r7, r7, #4
 801c572:	ea56 0307 	orrs.w	r3, r6, r7
 801c576:	d1f2      	bne.n	801c55e <_vfprintf_r+0xc7e>
 801c578:	e3ce      	b.n	801cd18 <_vfprintf_r+0x1438>
 801c57a:	b91b      	cbnz	r3, 801c584 <_vfprintf_r+0xca4>
 801c57c:	07ed      	lsls	r5, r5, #31
 801c57e:	d501      	bpl.n	801c584 <_vfprintf_r+0xca4>
 801c580:	2630      	movs	r6, #48	@ 0x30
 801c582:	e7a9      	b.n	801c4d8 <_vfprintf_r+0xbf8>
 801c584:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801c588:	e3c6      	b.n	801cd18 <_vfprintf_r+0x1438>
 801c58a:	9b06      	ldr	r3, [sp, #24]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	f000 8390 	beq.w	801ccb2 <_vfprintf_r+0x13d2>
 801c592:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801c596:	2300      	movs	r3, #0
 801c598:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c59c:	9607      	str	r6, [sp, #28]
 801c59e:	f7ff bb5c 	b.w	801bc5a <_vfprintf_r+0x37a>
 801c5a2:	2010      	movs	r0, #16
 801c5a4:	4403      	add	r3, r0
 801c5a6:	2a07      	cmp	r2, #7
 801c5a8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c5ac:	6060      	str	r0, [r4, #4]
 801c5ae:	dd08      	ble.n	801c5c2 <_vfprintf_r+0xce2>
 801c5b0:	9803      	ldr	r0, [sp, #12]
 801c5b2:	aa26      	add	r2, sp, #152	@ 0x98
 801c5b4:	4659      	mov	r1, fp
 801c5b6:	f000 fbff 	bl	801cdb8 <__sprint_r>
 801c5ba:	2800      	cmp	r0, #0
 801c5bc:	f040 8357 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c5c0:	a929      	add	r1, sp, #164	@ 0xa4
 801c5c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c5c4:	3b10      	subs	r3, #16
 801c5c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c5c8:	460c      	mov	r4, r1
 801c5ca:	e547      	b.n	801c05c <_vfprintf_r+0x77c>
 801c5cc:	460c      	mov	r4, r1
 801c5ce:	e562      	b.n	801c096 <_vfprintf_r+0x7b6>
 801c5d0:	9803      	ldr	r0, [sp, #12]
 801c5d2:	aa26      	add	r2, sp, #152	@ 0x98
 801c5d4:	4659      	mov	r1, fp
 801c5d6:	f000 fbef 	bl	801cdb8 <__sprint_r>
 801c5da:	2800      	cmp	r0, #0
 801c5dc:	f040 8347 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c5e0:	ac29      	add	r4, sp, #164	@ 0xa4
 801c5e2:	e56a      	b.n	801c0ba <_vfprintf_r+0x7da>
 801c5e4:	9803      	ldr	r0, [sp, #12]
 801c5e6:	aa26      	add	r2, sp, #152	@ 0x98
 801c5e8:	4659      	mov	r1, fp
 801c5ea:	f000 fbe5 	bl	801cdb8 <__sprint_r>
 801c5ee:	2800      	cmp	r0, #0
 801c5f0:	f040 833d 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c5f4:	ac29      	add	r4, sp, #164	@ 0xa4
 801c5f6:	e570      	b.n	801c0da <_vfprintf_r+0x7fa>
 801c5f8:	2010      	movs	r0, #16
 801c5fa:	4403      	add	r3, r0
 801c5fc:	2a07      	cmp	r2, #7
 801c5fe:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c602:	6060      	str	r0, [r4, #4]
 801c604:	dd08      	ble.n	801c618 <_vfprintf_r+0xd38>
 801c606:	9803      	ldr	r0, [sp, #12]
 801c608:	aa26      	add	r2, sp, #152	@ 0x98
 801c60a:	4659      	mov	r1, fp
 801c60c:	f000 fbd4 	bl	801cdb8 <__sprint_r>
 801c610:	2800      	cmp	r0, #0
 801c612:	f040 832c 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c616:	a929      	add	r1, sp, #164	@ 0xa4
 801c618:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c61a:	3b10      	subs	r3, #16
 801c61c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c61e:	460c      	mov	r4, r1
 801c620:	e564      	b.n	801c0ec <_vfprintf_r+0x80c>
 801c622:	460c      	mov	r4, r1
 801c624:	e57f      	b.n	801c126 <_vfprintf_r+0x846>
 801c626:	2010      	movs	r0, #16
 801c628:	4403      	add	r3, r0
 801c62a:	2a07      	cmp	r2, #7
 801c62c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c630:	6060      	str	r0, [r4, #4]
 801c632:	dd08      	ble.n	801c646 <_vfprintf_r+0xd66>
 801c634:	9803      	ldr	r0, [sp, #12]
 801c636:	aa26      	add	r2, sp, #152	@ 0x98
 801c638:	4659      	mov	r1, fp
 801c63a:	f000 fbbd 	bl	801cdb8 <__sprint_r>
 801c63e:	2800      	cmp	r0, #0
 801c640:	f040 8315 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c644:	a929      	add	r1, sp, #164	@ 0xa4
 801c646:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c648:	3b10      	subs	r3, #16
 801c64a:	9310      	str	r3, [sp, #64]	@ 0x40
 801c64c:	460c      	mov	r4, r1
 801c64e:	e570      	b.n	801c132 <_vfprintf_r+0x852>
 801c650:	460c      	mov	r4, r1
 801c652:	e58b      	b.n	801c16c <_vfprintf_r+0x88c>
 801c654:	08020938 	.word	0x08020938
 801c658:	08020949 	.word	0x08020949
 801c65c:	9b06      	ldr	r3, [sp, #24]
 801c65e:	2b65      	cmp	r3, #101	@ 0x65
 801c660:	f340 8245 	ble.w	801caee <_vfprintf_r+0x120e>
 801c664:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c668:	2200      	movs	r2, #0
 801c66a:	2300      	movs	r3, #0
 801c66c:	f7e4 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 801c670:	2800      	cmp	r0, #0
 801c672:	d06a      	beq.n	801c74a <_vfprintf_r+0xe6a>
 801c674:	4b73      	ldr	r3, [pc, #460]	@ (801c844 <_vfprintf_r+0xf64>)
 801c676:	6023      	str	r3, [r4, #0]
 801c678:	2301      	movs	r3, #1
 801c67a:	6063      	str	r3, [r4, #4]
 801c67c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c67e:	3301      	adds	r3, #1
 801c680:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c682:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c684:	3301      	adds	r3, #1
 801c686:	2b07      	cmp	r3, #7
 801c688:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c68a:	dc37      	bgt.n	801c6fc <_vfprintf_r+0xe1c>
 801c68c:	3408      	adds	r4, #8
 801c68e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c690:	9a04      	ldr	r2, [sp, #16]
 801c692:	4293      	cmp	r3, r2
 801c694:	db02      	blt.n	801c69c <_vfprintf_r+0xdbc>
 801c696:	07e9      	lsls	r1, r5, #31
 801c698:	f57f ad78 	bpl.w	801c18c <_vfprintf_r+0x8ac>
 801c69c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c69e:	6023      	str	r3, [r4, #0]
 801c6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c6a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c6a4:	6063      	str	r3, [r4, #4]
 801c6a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c6a8:	4413      	add	r3, r2
 801c6aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c6ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c6ae:	3301      	adds	r3, #1
 801c6b0:	2b07      	cmp	r3, #7
 801c6b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c6b4:	dc2c      	bgt.n	801c710 <_vfprintf_r+0xe30>
 801c6b6:	3408      	adds	r4, #8
 801c6b8:	9b04      	ldr	r3, [sp, #16]
 801c6ba:	1e5e      	subs	r6, r3, #1
 801c6bc:	2e00      	cmp	r6, #0
 801c6be:	f77f ad65 	ble.w	801c18c <_vfprintf_r+0x8ac>
 801c6c2:	4f61      	ldr	r7, [pc, #388]	@ (801c848 <_vfprintf_r+0xf68>)
 801c6c4:	f04f 0810 	mov.w	r8, #16
 801c6c8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801c6cc:	2e10      	cmp	r6, #16
 801c6ce:	f103 0301 	add.w	r3, r3, #1
 801c6d2:	f104 0108 	add.w	r1, r4, #8
 801c6d6:	6027      	str	r7, [r4, #0]
 801c6d8:	dc24      	bgt.n	801c724 <_vfprintf_r+0xe44>
 801c6da:	6066      	str	r6, [r4, #4]
 801c6dc:	2b07      	cmp	r3, #7
 801c6de:	4416      	add	r6, r2
 801c6e0:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801c6e4:	f340 82a2 	ble.w	801cc2c <_vfprintf_r+0x134c>
 801c6e8:	9803      	ldr	r0, [sp, #12]
 801c6ea:	aa26      	add	r2, sp, #152	@ 0x98
 801c6ec:	4659      	mov	r1, fp
 801c6ee:	f000 fb63 	bl	801cdb8 <__sprint_r>
 801c6f2:	2800      	cmp	r0, #0
 801c6f4:	f040 82bb 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c6f8:	ac29      	add	r4, sp, #164	@ 0xa4
 801c6fa:	e547      	b.n	801c18c <_vfprintf_r+0x8ac>
 801c6fc:	9803      	ldr	r0, [sp, #12]
 801c6fe:	aa26      	add	r2, sp, #152	@ 0x98
 801c700:	4659      	mov	r1, fp
 801c702:	f000 fb59 	bl	801cdb8 <__sprint_r>
 801c706:	2800      	cmp	r0, #0
 801c708:	f040 82b1 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c70c:	ac29      	add	r4, sp, #164	@ 0xa4
 801c70e:	e7be      	b.n	801c68e <_vfprintf_r+0xdae>
 801c710:	9803      	ldr	r0, [sp, #12]
 801c712:	aa26      	add	r2, sp, #152	@ 0x98
 801c714:	4659      	mov	r1, fp
 801c716:	f000 fb4f 	bl	801cdb8 <__sprint_r>
 801c71a:	2800      	cmp	r0, #0
 801c71c:	f040 82a7 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c720:	ac29      	add	r4, sp, #164	@ 0xa4
 801c722:	e7c9      	b.n	801c6b8 <_vfprintf_r+0xdd8>
 801c724:	3210      	adds	r2, #16
 801c726:	2b07      	cmp	r3, #7
 801c728:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801c72c:	f8c4 8004 	str.w	r8, [r4, #4]
 801c730:	dd08      	ble.n	801c744 <_vfprintf_r+0xe64>
 801c732:	9803      	ldr	r0, [sp, #12]
 801c734:	aa26      	add	r2, sp, #152	@ 0x98
 801c736:	4659      	mov	r1, fp
 801c738:	f000 fb3e 	bl	801cdb8 <__sprint_r>
 801c73c:	2800      	cmp	r0, #0
 801c73e:	f040 8296 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c742:	a929      	add	r1, sp, #164	@ 0xa4
 801c744:	3e10      	subs	r6, #16
 801c746:	460c      	mov	r4, r1
 801c748:	e7be      	b.n	801c6c8 <_vfprintf_r+0xde8>
 801c74a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	dc7d      	bgt.n	801c84c <_vfprintf_r+0xf6c>
 801c750:	4b3c      	ldr	r3, [pc, #240]	@ (801c844 <_vfprintf_r+0xf64>)
 801c752:	6023      	str	r3, [r4, #0]
 801c754:	2301      	movs	r3, #1
 801c756:	6063      	str	r3, [r4, #4]
 801c758:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c75a:	3301      	adds	r3, #1
 801c75c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c75e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c760:	3301      	adds	r3, #1
 801c762:	2b07      	cmp	r3, #7
 801c764:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c766:	dc46      	bgt.n	801c7f6 <_vfprintf_r+0xf16>
 801c768:	3408      	adds	r4, #8
 801c76a:	9904      	ldr	r1, [sp, #16]
 801c76c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c76e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801c770:	430b      	orrs	r3, r1
 801c772:	f005 0101 	and.w	r1, r5, #1
 801c776:	430b      	orrs	r3, r1
 801c778:	f43f ad08 	beq.w	801c18c <_vfprintf_r+0x8ac>
 801c77c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c77e:	6023      	str	r3, [r4, #0]
 801c780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c782:	6063      	str	r3, [r4, #4]
 801c784:	441a      	add	r2, r3
 801c786:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c788:	9228      	str	r2, [sp, #160]	@ 0xa0
 801c78a:	3301      	adds	r3, #1
 801c78c:	2b07      	cmp	r3, #7
 801c78e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c790:	dc3b      	bgt.n	801c80a <_vfprintf_r+0xf2a>
 801c792:	f104 0308 	add.w	r3, r4, #8
 801c796:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c798:	2e00      	cmp	r6, #0
 801c79a:	da1b      	bge.n	801c7d4 <_vfprintf_r+0xef4>
 801c79c:	4f2a      	ldr	r7, [pc, #168]	@ (801c848 <_vfprintf_r+0xf68>)
 801c79e:	4276      	negs	r6, r6
 801c7a0:	461a      	mov	r2, r3
 801c7a2:	2410      	movs	r4, #16
 801c7a4:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801c7a8:	2e10      	cmp	r6, #16
 801c7aa:	f101 0101 	add.w	r1, r1, #1
 801c7ae:	f103 0308 	add.w	r3, r3, #8
 801c7b2:	6017      	str	r7, [r2, #0]
 801c7b4:	dc33      	bgt.n	801c81e <_vfprintf_r+0xf3e>
 801c7b6:	6056      	str	r6, [r2, #4]
 801c7b8:	2907      	cmp	r1, #7
 801c7ba:	4406      	add	r6, r0
 801c7bc:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801c7c0:	dd08      	ble.n	801c7d4 <_vfprintf_r+0xef4>
 801c7c2:	9803      	ldr	r0, [sp, #12]
 801c7c4:	aa26      	add	r2, sp, #152	@ 0x98
 801c7c6:	4659      	mov	r1, fp
 801c7c8:	f000 faf6 	bl	801cdb8 <__sprint_r>
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	f040 824e 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c7d2:	ab29      	add	r3, sp, #164	@ 0xa4
 801c7d4:	9a04      	ldr	r2, [sp, #16]
 801c7d6:	9904      	ldr	r1, [sp, #16]
 801c7d8:	605a      	str	r2, [r3, #4]
 801c7da:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801c7dc:	f8c3 8000 	str.w	r8, [r3]
 801c7e0:	440a      	add	r2, r1
 801c7e2:	9228      	str	r2, [sp, #160]	@ 0xa0
 801c7e4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801c7e6:	3201      	adds	r2, #1
 801c7e8:	2a07      	cmp	r2, #7
 801c7ea:	9227      	str	r2, [sp, #156]	@ 0x9c
 801c7ec:	f73f af7c 	bgt.w	801c6e8 <_vfprintf_r+0xe08>
 801c7f0:	f103 0408 	add.w	r4, r3, #8
 801c7f4:	e4ca      	b.n	801c18c <_vfprintf_r+0x8ac>
 801c7f6:	9803      	ldr	r0, [sp, #12]
 801c7f8:	aa26      	add	r2, sp, #152	@ 0x98
 801c7fa:	4659      	mov	r1, fp
 801c7fc:	f000 fadc 	bl	801cdb8 <__sprint_r>
 801c800:	2800      	cmp	r0, #0
 801c802:	f040 8234 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c806:	ac29      	add	r4, sp, #164	@ 0xa4
 801c808:	e7af      	b.n	801c76a <_vfprintf_r+0xe8a>
 801c80a:	9803      	ldr	r0, [sp, #12]
 801c80c:	aa26      	add	r2, sp, #152	@ 0x98
 801c80e:	4659      	mov	r1, fp
 801c810:	f000 fad2 	bl	801cdb8 <__sprint_r>
 801c814:	2800      	cmp	r0, #0
 801c816:	f040 822a 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c81a:	ab29      	add	r3, sp, #164	@ 0xa4
 801c81c:	e7bb      	b.n	801c796 <_vfprintf_r+0xeb6>
 801c81e:	3010      	adds	r0, #16
 801c820:	2907      	cmp	r1, #7
 801c822:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801c826:	6054      	str	r4, [r2, #4]
 801c828:	dd08      	ble.n	801c83c <_vfprintf_r+0xf5c>
 801c82a:	9803      	ldr	r0, [sp, #12]
 801c82c:	aa26      	add	r2, sp, #152	@ 0x98
 801c82e:	4659      	mov	r1, fp
 801c830:	f000 fac2 	bl	801cdb8 <__sprint_r>
 801c834:	2800      	cmp	r0, #0
 801c836:	f040 821a 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c83a:	ab29      	add	r3, sp, #164	@ 0xa4
 801c83c:	3e10      	subs	r6, #16
 801c83e:	461a      	mov	r2, r3
 801c840:	e7b0      	b.n	801c7a4 <_vfprintf_r+0xec4>
 801c842:	bf00      	nop
 801c844:	0802095a 	.word	0x0802095a
 801c848:	0802097c 	.word	0x0802097c
 801c84c:	9b04      	ldr	r3, [sp, #16]
 801c84e:	4443      	add	r3, r8
 801c850:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c852:	9b04      	ldr	r3, [sp, #16]
 801c854:	42b3      	cmp	r3, r6
 801c856:	bfa8      	it	ge
 801c858:	4633      	movge	r3, r6
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	4699      	mov	r9, r3
 801c85e:	dd0b      	ble.n	801c878 <_vfprintf_r+0xf98>
 801c860:	e9c4 8300 	strd	r8, r3, [r4]
 801c864:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c866:	444b      	add	r3, r9
 801c868:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c86a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c86c:	3301      	adds	r3, #1
 801c86e:	2b07      	cmp	r3, #7
 801c870:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c872:	f300 8089 	bgt.w	801c988 <_vfprintf_r+0x10a8>
 801c876:	3408      	adds	r4, #8
 801c878:	f1b9 0f00 	cmp.w	r9, #0
 801c87c:	bfac      	ite	ge
 801c87e:	eba6 0309 	subge.w	r3, r6, r9
 801c882:	4633      	movlt	r3, r6
 801c884:	2b00      	cmp	r3, #0
 801c886:	9306      	str	r3, [sp, #24]
 801c888:	dd1c      	ble.n	801c8c4 <_vfprintf_r+0xfe4>
 801c88a:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 801cbf0 <_vfprintf_r+0x1310>
 801c88e:	9806      	ldr	r0, [sp, #24]
 801c890:	f8c4 9000 	str.w	r9, [r4]
 801c894:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c898:	2810      	cmp	r0, #16
 801c89a:	f102 0201 	add.w	r2, r2, #1
 801c89e:	f104 0108 	add.w	r1, r4, #8
 801c8a2:	dc7b      	bgt.n	801c99c <_vfprintf_r+0x10bc>
 801c8a4:	4403      	add	r3, r0
 801c8a6:	2a07      	cmp	r2, #7
 801c8a8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c8ac:	6060      	str	r0, [r4, #4]
 801c8ae:	f340 808a 	ble.w	801c9c6 <_vfprintf_r+0x10e6>
 801c8b2:	9803      	ldr	r0, [sp, #12]
 801c8b4:	aa26      	add	r2, sp, #152	@ 0x98
 801c8b6:	4659      	mov	r1, fp
 801c8b8:	f000 fa7e 	bl	801cdb8 <__sprint_r>
 801c8bc:	2800      	cmp	r0, #0
 801c8be:	f040 81d6 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c8c2:	ac29      	add	r4, sp, #164	@ 0xa4
 801c8c4:	056a      	lsls	r2, r5, #21
 801c8c6:	44b0      	add	r8, r6
 801c8c8:	d508      	bpl.n	801c8dc <_vfprintf_r+0xffc>
 801c8ca:	9b08      	ldr	r3, [sp, #32]
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d17c      	bne.n	801c9ca <_vfprintf_r+0x10ea>
 801c8d0:	2f00      	cmp	r7, #0
 801c8d2:	d17c      	bne.n	801c9ce <_vfprintf_r+0x10ee>
 801c8d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c8d6:	4598      	cmp	r8, r3
 801c8d8:	bf28      	it	cs
 801c8da:	4698      	movcs	r8, r3
 801c8dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c8de:	9a04      	ldr	r2, [sp, #16]
 801c8e0:	4293      	cmp	r3, r2
 801c8e2:	db01      	blt.n	801c8e8 <_vfprintf_r+0x1008>
 801c8e4:	07eb      	lsls	r3, r5, #31
 801c8e6:	d50e      	bpl.n	801c906 <_vfprintf_r+0x1026>
 801c8e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c8ea:	6023      	str	r3, [r4, #0]
 801c8ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c8f0:	6063      	str	r3, [r4, #4]
 801c8f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c8f4:	4413      	add	r3, r2
 801c8f6:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c8f8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c8fa:	3301      	adds	r3, #1
 801c8fc:	2b07      	cmp	r3, #7
 801c8fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c900:	f300 80e1 	bgt.w	801cac6 <_vfprintf_r+0x11e6>
 801c904:	3408      	adds	r4, #8
 801c906:	9b04      	ldr	r3, [sp, #16]
 801c908:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801c90a:	1bdf      	subs	r7, r3, r7
 801c90c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c90e:	eba3 0308 	sub.w	r3, r3, r8
 801c912:	429f      	cmp	r7, r3
 801c914:	bfa8      	it	ge
 801c916:	461f      	movge	r7, r3
 801c918:	2f00      	cmp	r7, #0
 801c91a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c91c:	dd0a      	ble.n	801c934 <_vfprintf_r+0x1054>
 801c91e:	443b      	add	r3, r7
 801c920:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c922:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c924:	3301      	adds	r3, #1
 801c926:	2b07      	cmp	r3, #7
 801c928:	e9c4 8700 	strd	r8, r7, [r4]
 801c92c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c92e:	f300 80d4 	bgt.w	801cada <_vfprintf_r+0x11fa>
 801c932:	3408      	adds	r4, #8
 801c934:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c936:	9b04      	ldr	r3, [sp, #16]
 801c938:	2f00      	cmp	r7, #0
 801c93a:	eba3 0606 	sub.w	r6, r3, r6
 801c93e:	bfa8      	it	ge
 801c940:	1bf6      	subge	r6, r6, r7
 801c942:	2e00      	cmp	r6, #0
 801c944:	f77f ac22 	ble.w	801c18c <_vfprintf_r+0x8ac>
 801c948:	4fa9      	ldr	r7, [pc, #676]	@ (801cbf0 <_vfprintf_r+0x1310>)
 801c94a:	f04f 0810 	mov.w	r8, #16
 801c94e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801c952:	2e10      	cmp	r6, #16
 801c954:	f103 0301 	add.w	r3, r3, #1
 801c958:	f104 0108 	add.w	r1, r4, #8
 801c95c:	6027      	str	r7, [r4, #0]
 801c95e:	f77f aebc 	ble.w	801c6da <_vfprintf_r+0xdfa>
 801c962:	3210      	adds	r2, #16
 801c964:	2b07      	cmp	r3, #7
 801c966:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801c96a:	f8c4 8004 	str.w	r8, [r4, #4]
 801c96e:	dd08      	ble.n	801c982 <_vfprintf_r+0x10a2>
 801c970:	9803      	ldr	r0, [sp, #12]
 801c972:	aa26      	add	r2, sp, #152	@ 0x98
 801c974:	4659      	mov	r1, fp
 801c976:	f000 fa1f 	bl	801cdb8 <__sprint_r>
 801c97a:	2800      	cmp	r0, #0
 801c97c:	f040 8177 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c980:	a929      	add	r1, sp, #164	@ 0xa4
 801c982:	3e10      	subs	r6, #16
 801c984:	460c      	mov	r4, r1
 801c986:	e7e2      	b.n	801c94e <_vfprintf_r+0x106e>
 801c988:	9803      	ldr	r0, [sp, #12]
 801c98a:	aa26      	add	r2, sp, #152	@ 0x98
 801c98c:	4659      	mov	r1, fp
 801c98e:	f000 fa13 	bl	801cdb8 <__sprint_r>
 801c992:	2800      	cmp	r0, #0
 801c994:	f040 816b 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c998:	ac29      	add	r4, sp, #164	@ 0xa4
 801c99a:	e76d      	b.n	801c878 <_vfprintf_r+0xf98>
 801c99c:	2010      	movs	r0, #16
 801c99e:	4403      	add	r3, r0
 801c9a0:	2a07      	cmp	r2, #7
 801c9a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c9a6:	6060      	str	r0, [r4, #4]
 801c9a8:	dd08      	ble.n	801c9bc <_vfprintf_r+0x10dc>
 801c9aa:	9803      	ldr	r0, [sp, #12]
 801c9ac:	aa26      	add	r2, sp, #152	@ 0x98
 801c9ae:	4659      	mov	r1, fp
 801c9b0:	f000 fa02 	bl	801cdb8 <__sprint_r>
 801c9b4:	2800      	cmp	r0, #0
 801c9b6:	f040 815a 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801c9ba:	a929      	add	r1, sp, #164	@ 0xa4
 801c9bc:	9b06      	ldr	r3, [sp, #24]
 801c9be:	3b10      	subs	r3, #16
 801c9c0:	9306      	str	r3, [sp, #24]
 801c9c2:	460c      	mov	r4, r1
 801c9c4:	e763      	b.n	801c88e <_vfprintf_r+0xfae>
 801c9c6:	460c      	mov	r4, r1
 801c9c8:	e77c      	b.n	801c8c4 <_vfprintf_r+0xfe4>
 801c9ca:	2f00      	cmp	r7, #0
 801c9cc:	d04b      	beq.n	801ca66 <_vfprintf_r+0x1186>
 801c9ce:	3f01      	subs	r7, #1
 801c9d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c9d2:	6023      	str	r3, [r4, #0]
 801c9d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c9d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c9d8:	6063      	str	r3, [r4, #4]
 801c9da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c9dc:	4413      	add	r3, r2
 801c9de:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c9e0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c9e2:	3301      	adds	r3, #1
 801c9e4:	2b07      	cmp	r3, #7
 801c9e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c9e8:	dc44      	bgt.n	801ca74 <_vfprintf_r+0x1194>
 801c9ea:	3408      	adds	r4, #8
 801c9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9ee:	f893 9000 	ldrb.w	r9, [r3]
 801c9f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c9f4:	eba3 0308 	sub.w	r3, r3, r8
 801c9f8:	4599      	cmp	r9, r3
 801c9fa:	bfa8      	it	ge
 801c9fc:	4699      	movge	r9, r3
 801c9fe:	f1b9 0f00 	cmp.w	r9, #0
 801ca02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ca04:	dd09      	ble.n	801ca1a <_vfprintf_r+0x113a>
 801ca06:	444b      	add	r3, r9
 801ca08:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ca0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ca0c:	3301      	adds	r3, #1
 801ca0e:	2b07      	cmp	r3, #7
 801ca10:	e9c4 8900 	strd	r8, r9, [r4]
 801ca14:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ca16:	dc37      	bgt.n	801ca88 <_vfprintf_r+0x11a8>
 801ca18:	3408      	adds	r4, #8
 801ca1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca1c:	781e      	ldrb	r6, [r3, #0]
 801ca1e:	f1b9 0f00 	cmp.w	r9, #0
 801ca22:	bfa8      	it	ge
 801ca24:	eba6 0609 	subge.w	r6, r6, r9
 801ca28:	2e00      	cmp	r6, #0
 801ca2a:	dd18      	ble.n	801ca5e <_vfprintf_r+0x117e>
 801ca2c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ca30:	486f      	ldr	r0, [pc, #444]	@ (801cbf0 <_vfprintf_r+0x1310>)
 801ca32:	6020      	str	r0, [r4, #0]
 801ca34:	2e10      	cmp	r6, #16
 801ca36:	f103 0301 	add.w	r3, r3, #1
 801ca3a:	f104 0108 	add.w	r1, r4, #8
 801ca3e:	dc2d      	bgt.n	801ca9c <_vfprintf_r+0x11bc>
 801ca40:	6066      	str	r6, [r4, #4]
 801ca42:	2b07      	cmp	r3, #7
 801ca44:	4416      	add	r6, r2
 801ca46:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801ca4a:	dd3a      	ble.n	801cac2 <_vfprintf_r+0x11e2>
 801ca4c:	9803      	ldr	r0, [sp, #12]
 801ca4e:	aa26      	add	r2, sp, #152	@ 0x98
 801ca50:	4659      	mov	r1, fp
 801ca52:	f000 f9b1 	bl	801cdb8 <__sprint_r>
 801ca56:	2800      	cmp	r0, #0
 801ca58:	f040 8109 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801ca5c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ca5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca60:	781b      	ldrb	r3, [r3, #0]
 801ca62:	4498      	add	r8, r3
 801ca64:	e731      	b.n	801c8ca <_vfprintf_r+0xfea>
 801ca66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca68:	3b01      	subs	r3, #1
 801ca6a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca6c:	9b08      	ldr	r3, [sp, #32]
 801ca6e:	3b01      	subs	r3, #1
 801ca70:	9308      	str	r3, [sp, #32]
 801ca72:	e7ad      	b.n	801c9d0 <_vfprintf_r+0x10f0>
 801ca74:	9803      	ldr	r0, [sp, #12]
 801ca76:	aa26      	add	r2, sp, #152	@ 0x98
 801ca78:	4659      	mov	r1, fp
 801ca7a:	f000 f99d 	bl	801cdb8 <__sprint_r>
 801ca7e:	2800      	cmp	r0, #0
 801ca80:	f040 80f5 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801ca84:	ac29      	add	r4, sp, #164	@ 0xa4
 801ca86:	e7b1      	b.n	801c9ec <_vfprintf_r+0x110c>
 801ca88:	9803      	ldr	r0, [sp, #12]
 801ca8a:	aa26      	add	r2, sp, #152	@ 0x98
 801ca8c:	4659      	mov	r1, fp
 801ca8e:	f000 f993 	bl	801cdb8 <__sprint_r>
 801ca92:	2800      	cmp	r0, #0
 801ca94:	f040 80eb 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801ca98:	ac29      	add	r4, sp, #164	@ 0xa4
 801ca9a:	e7be      	b.n	801ca1a <_vfprintf_r+0x113a>
 801ca9c:	2010      	movs	r0, #16
 801ca9e:	4402      	add	r2, r0
 801caa0:	2b07      	cmp	r3, #7
 801caa2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801caa6:	6060      	str	r0, [r4, #4]
 801caa8:	dd08      	ble.n	801cabc <_vfprintf_r+0x11dc>
 801caaa:	9803      	ldr	r0, [sp, #12]
 801caac:	aa26      	add	r2, sp, #152	@ 0x98
 801caae:	4659      	mov	r1, fp
 801cab0:	f000 f982 	bl	801cdb8 <__sprint_r>
 801cab4:	2800      	cmp	r0, #0
 801cab6:	f040 80da 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801caba:	a929      	add	r1, sp, #164	@ 0xa4
 801cabc:	3e10      	subs	r6, #16
 801cabe:	460c      	mov	r4, r1
 801cac0:	e7b4      	b.n	801ca2c <_vfprintf_r+0x114c>
 801cac2:	460c      	mov	r4, r1
 801cac4:	e7cb      	b.n	801ca5e <_vfprintf_r+0x117e>
 801cac6:	9803      	ldr	r0, [sp, #12]
 801cac8:	aa26      	add	r2, sp, #152	@ 0x98
 801caca:	4659      	mov	r1, fp
 801cacc:	f000 f974 	bl	801cdb8 <__sprint_r>
 801cad0:	2800      	cmp	r0, #0
 801cad2:	f040 80cc 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801cad6:	ac29      	add	r4, sp, #164	@ 0xa4
 801cad8:	e715      	b.n	801c906 <_vfprintf_r+0x1026>
 801cada:	9803      	ldr	r0, [sp, #12]
 801cadc:	aa26      	add	r2, sp, #152	@ 0x98
 801cade:	4659      	mov	r1, fp
 801cae0:	f000 f96a 	bl	801cdb8 <__sprint_r>
 801cae4:	2800      	cmp	r0, #0
 801cae6:	f040 80c2 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801caea:	ac29      	add	r4, sp, #164	@ 0xa4
 801caec:	e722      	b.n	801c934 <_vfprintf_r+0x1054>
 801caee:	9904      	ldr	r1, [sp, #16]
 801caf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801caf2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801caf4:	2901      	cmp	r1, #1
 801caf6:	f103 0301 	add.w	r3, r3, #1
 801cafa:	f102 0201 	add.w	r2, r2, #1
 801cafe:	f104 0608 	add.w	r6, r4, #8
 801cb02:	dc02      	bgt.n	801cb0a <_vfprintf_r+0x122a>
 801cb04:	07ef      	lsls	r7, r5, #31
 801cb06:	f140 8086 	bpl.w	801cc16 <_vfprintf_r+0x1336>
 801cb0a:	2101      	movs	r1, #1
 801cb0c:	2a07      	cmp	r2, #7
 801cb0e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cb12:	f8c4 8000 	str.w	r8, [r4]
 801cb16:	6061      	str	r1, [r4, #4]
 801cb18:	dd08      	ble.n	801cb2c <_vfprintf_r+0x124c>
 801cb1a:	9803      	ldr	r0, [sp, #12]
 801cb1c:	aa26      	add	r2, sp, #152	@ 0x98
 801cb1e:	4659      	mov	r1, fp
 801cb20:	f000 f94a 	bl	801cdb8 <__sprint_r>
 801cb24:	2800      	cmp	r0, #0
 801cb26:	f040 80a2 	bne.w	801cc6e <_vfprintf_r+0x138e>
 801cb2a:	ae29      	add	r6, sp, #164	@ 0xa4
 801cb2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cb2e:	6033      	str	r3, [r6, #0]
 801cb30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cb34:	6073      	str	r3, [r6, #4]
 801cb36:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cb38:	4413      	add	r3, r2
 801cb3a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cb3c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cb3e:	3301      	adds	r3, #1
 801cb40:	2b07      	cmp	r3, #7
 801cb42:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cb44:	dc33      	bgt.n	801cbae <_vfprintf_r+0x12ce>
 801cb46:	3608      	adds	r6, #8
 801cb48:	9b04      	ldr	r3, [sp, #16]
 801cb4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801cb4e:	1e5c      	subs	r4, r3, #1
 801cb50:	2200      	movs	r2, #0
 801cb52:	2300      	movs	r3, #0
 801cb54:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 801cb58:	f7e3 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 801cb5c:	2800      	cmp	r0, #0
 801cb5e:	d12f      	bne.n	801cbc0 <_vfprintf_r+0x12e0>
 801cb60:	f108 0201 	add.w	r2, r8, #1
 801cb64:	e9c6 2400 	strd	r2, r4, [r6]
 801cb68:	9a04      	ldr	r2, [sp, #16]
 801cb6a:	f109 0301 	add.w	r3, r9, #1
 801cb6e:	3f01      	subs	r7, #1
 801cb70:	4417      	add	r7, r2
 801cb72:	2b07      	cmp	r3, #7
 801cb74:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801cb78:	dd56      	ble.n	801cc28 <_vfprintf_r+0x1348>
 801cb7a:	9803      	ldr	r0, [sp, #12]
 801cb7c:	aa26      	add	r2, sp, #152	@ 0x98
 801cb7e:	4659      	mov	r1, fp
 801cb80:	f000 f91a 	bl	801cdb8 <__sprint_r>
 801cb84:	2800      	cmp	r0, #0
 801cb86:	d172      	bne.n	801cc6e <_vfprintf_r+0x138e>
 801cb88:	ae29      	add	r6, sp, #164	@ 0xa4
 801cb8a:	ab22      	add	r3, sp, #136	@ 0x88
 801cb8c:	6033      	str	r3, [r6, #0]
 801cb8e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cb90:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cb92:	6073      	str	r3, [r6, #4]
 801cb94:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cb96:	4413      	add	r3, r2
 801cb98:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cb9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cb9c:	3301      	adds	r3, #1
 801cb9e:	2b07      	cmp	r3, #7
 801cba0:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cba2:	f73f ada1 	bgt.w	801c6e8 <_vfprintf_r+0xe08>
 801cba6:	f106 0408 	add.w	r4, r6, #8
 801cbaa:	f7ff baef 	b.w	801c18c <_vfprintf_r+0x8ac>
 801cbae:	9803      	ldr	r0, [sp, #12]
 801cbb0:	aa26      	add	r2, sp, #152	@ 0x98
 801cbb2:	4659      	mov	r1, fp
 801cbb4:	f000 f900 	bl	801cdb8 <__sprint_r>
 801cbb8:	2800      	cmp	r0, #0
 801cbba:	d158      	bne.n	801cc6e <_vfprintf_r+0x138e>
 801cbbc:	ae29      	add	r6, sp, #164	@ 0xa4
 801cbbe:	e7c3      	b.n	801cb48 <_vfprintf_r+0x1268>
 801cbc0:	9b04      	ldr	r3, [sp, #16]
 801cbc2:	2b01      	cmp	r3, #1
 801cbc4:	dde1      	ble.n	801cb8a <_vfprintf_r+0x12aa>
 801cbc6:	4f0a      	ldr	r7, [pc, #40]	@ (801cbf0 <_vfprintf_r+0x1310>)
 801cbc8:	f04f 0810 	mov.w	r8, #16
 801cbcc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801cbd0:	2c10      	cmp	r4, #16
 801cbd2:	f103 0301 	add.w	r3, r3, #1
 801cbd6:	f106 0108 	add.w	r1, r6, #8
 801cbda:	6037      	str	r7, [r6, #0]
 801cbdc:	dc0a      	bgt.n	801cbf4 <_vfprintf_r+0x1314>
 801cbde:	6074      	str	r4, [r6, #4]
 801cbe0:	2b07      	cmp	r3, #7
 801cbe2:	4414      	add	r4, r2
 801cbe4:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801cbe8:	dcc7      	bgt.n	801cb7a <_vfprintf_r+0x129a>
 801cbea:	460e      	mov	r6, r1
 801cbec:	e7cd      	b.n	801cb8a <_vfprintf_r+0x12aa>
 801cbee:	bf00      	nop
 801cbf0:	0802097c 	.word	0x0802097c
 801cbf4:	3210      	adds	r2, #16
 801cbf6:	2b07      	cmp	r3, #7
 801cbf8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801cbfc:	f8c6 8004 	str.w	r8, [r6, #4]
 801cc00:	dd06      	ble.n	801cc10 <_vfprintf_r+0x1330>
 801cc02:	9803      	ldr	r0, [sp, #12]
 801cc04:	aa26      	add	r2, sp, #152	@ 0x98
 801cc06:	4659      	mov	r1, fp
 801cc08:	f000 f8d6 	bl	801cdb8 <__sprint_r>
 801cc0c:	bb78      	cbnz	r0, 801cc6e <_vfprintf_r+0x138e>
 801cc0e:	a929      	add	r1, sp, #164	@ 0xa4
 801cc10:	3c10      	subs	r4, #16
 801cc12:	460e      	mov	r6, r1
 801cc14:	e7da      	b.n	801cbcc <_vfprintf_r+0x12ec>
 801cc16:	2101      	movs	r1, #1
 801cc18:	2a07      	cmp	r2, #7
 801cc1a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cc1e:	f8c4 8000 	str.w	r8, [r4]
 801cc22:	6061      	str	r1, [r4, #4]
 801cc24:	ddb1      	ble.n	801cb8a <_vfprintf_r+0x12aa>
 801cc26:	e7a8      	b.n	801cb7a <_vfprintf_r+0x129a>
 801cc28:	3608      	adds	r6, #8
 801cc2a:	e7ae      	b.n	801cb8a <_vfprintf_r+0x12aa>
 801cc2c:	460c      	mov	r4, r1
 801cc2e:	f7ff baad 	b.w	801c18c <_vfprintf_r+0x8ac>
 801cc32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc34:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cc36:	1a9d      	subs	r5, r3, r2
 801cc38:	2d00      	cmp	r5, #0
 801cc3a:	f77f aaaa 	ble.w	801c192 <_vfprintf_r+0x8b2>
 801cc3e:	4e3d      	ldr	r6, [pc, #244]	@ (801cd34 <_vfprintf_r+0x1454>)
 801cc40:	2710      	movs	r7, #16
 801cc42:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801cc46:	2d10      	cmp	r5, #16
 801cc48:	f103 0301 	add.w	r3, r3, #1
 801cc4c:	6026      	str	r6, [r4, #0]
 801cc4e:	dc18      	bgt.n	801cc82 <_vfprintf_r+0x13a2>
 801cc50:	6065      	str	r5, [r4, #4]
 801cc52:	2b07      	cmp	r3, #7
 801cc54:	4415      	add	r5, r2
 801cc56:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 801cc5a:	f77f aa9a 	ble.w	801c192 <_vfprintf_r+0x8b2>
 801cc5e:	9803      	ldr	r0, [sp, #12]
 801cc60:	aa26      	add	r2, sp, #152	@ 0x98
 801cc62:	4659      	mov	r1, fp
 801cc64:	f000 f8a8 	bl	801cdb8 <__sprint_r>
 801cc68:	2800      	cmp	r0, #0
 801cc6a:	f43f aa92 	beq.w	801c192 <_vfprintf_r+0x8b2>
 801cc6e:	f1ba 0f00 	cmp.w	sl, #0
 801cc72:	f43f a892 	beq.w	801bd9a <_vfprintf_r+0x4ba>
 801cc76:	9803      	ldr	r0, [sp, #12]
 801cc78:	4651      	mov	r1, sl
 801cc7a:	f7fd f949 	bl	8019f10 <_free_r>
 801cc7e:	f7ff b88c 	b.w	801bd9a <_vfprintf_r+0x4ba>
 801cc82:	3210      	adds	r2, #16
 801cc84:	2b07      	cmp	r3, #7
 801cc86:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801cc8a:	6067      	str	r7, [r4, #4]
 801cc8c:	dc02      	bgt.n	801cc94 <_vfprintf_r+0x13b4>
 801cc8e:	3408      	adds	r4, #8
 801cc90:	3d10      	subs	r5, #16
 801cc92:	e7d6      	b.n	801cc42 <_vfprintf_r+0x1362>
 801cc94:	9803      	ldr	r0, [sp, #12]
 801cc96:	aa26      	add	r2, sp, #152	@ 0x98
 801cc98:	4659      	mov	r1, fp
 801cc9a:	f000 f88d 	bl	801cdb8 <__sprint_r>
 801cc9e:	2800      	cmp	r0, #0
 801cca0:	d1e5      	bne.n	801cc6e <_vfprintf_r+0x138e>
 801cca2:	ac29      	add	r4, sp, #164	@ 0xa4
 801cca4:	e7f4      	b.n	801cc90 <_vfprintf_r+0x13b0>
 801cca6:	9803      	ldr	r0, [sp, #12]
 801cca8:	4651      	mov	r1, sl
 801ccaa:	f7fd f931 	bl	8019f10 <_free_r>
 801ccae:	f7ff ba88 	b.w	801c1c2 <_vfprintf_r+0x8e2>
 801ccb2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ccb4:	b91b      	cbnz	r3, 801ccbe <_vfprintf_r+0x13de>
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ccba:	f7ff b86e 	b.w	801bd9a <_vfprintf_r+0x4ba>
 801ccbe:	9803      	ldr	r0, [sp, #12]
 801ccc0:	aa26      	add	r2, sp, #152	@ 0x98
 801ccc2:	4659      	mov	r1, fp
 801ccc4:	f000 f878 	bl	801cdb8 <__sprint_r>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	d0f4      	beq.n	801ccb6 <_vfprintf_r+0x13d6>
 801cccc:	f7ff b865 	b.w	801bd9a <_vfprintf_r+0x4ba>
 801ccd0:	ea56 0207 	orrs.w	r2, r6, r7
 801ccd4:	9508      	str	r5, [sp, #32]
 801ccd6:	f43f ab75 	beq.w	801c3c4 <_vfprintf_r+0xae4>
 801ccda:	2b01      	cmp	r3, #1
 801ccdc:	f43f abf6 	beq.w	801c4cc <_vfprintf_r+0xbec>
 801cce0:	2b02      	cmp	r3, #2
 801cce2:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801cce6:	f43f ac3a 	beq.w	801c55e <_vfprintf_r+0xc7e>
 801ccea:	f006 0307 	and.w	r3, r6, #7
 801ccee:	08f6      	lsrs	r6, r6, #3
 801ccf0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801ccf4:	08ff      	lsrs	r7, r7, #3
 801ccf6:	3330      	adds	r3, #48	@ 0x30
 801ccf8:	ea56 0107 	orrs.w	r1, r6, r7
 801ccfc:	4642      	mov	r2, r8
 801ccfe:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801cd02:	d1f2      	bne.n	801ccea <_vfprintf_r+0x140a>
 801cd04:	9908      	ldr	r1, [sp, #32]
 801cd06:	07ce      	lsls	r6, r1, #31
 801cd08:	d506      	bpl.n	801cd18 <_vfprintf_r+0x1438>
 801cd0a:	2b30      	cmp	r3, #48	@ 0x30
 801cd0c:	d004      	beq.n	801cd18 <_vfprintf_r+0x1438>
 801cd0e:	2330      	movs	r3, #48	@ 0x30
 801cd10:	f808 3c01 	strb.w	r3, [r8, #-1]
 801cd14:	f1a2 0802 	sub.w	r8, r2, #2
 801cd18:	ab52      	add	r3, sp, #328	@ 0x148
 801cd1a:	9d08      	ldr	r5, [sp, #32]
 801cd1c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801cd20:	f04f 0a00 	mov.w	sl, #0
 801cd24:	eba3 0908 	sub.w	r9, r3, r8
 801cd28:	4657      	mov	r7, sl
 801cd2a:	f8cd a020 	str.w	sl, [sp, #32]
 801cd2e:	4656      	mov	r6, sl
 801cd30:	f7ff b978 	b.w	801c024 <_vfprintf_r+0x744>
 801cd34:	0802098c 	.word	0x0802098c

0801cd38 <__sbprintf>:
 801cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd3a:	461f      	mov	r7, r3
 801cd3c:	898b      	ldrh	r3, [r1, #12]
 801cd3e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801cd42:	f023 0302 	bic.w	r3, r3, #2
 801cd46:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cd4a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801cd4c:	9319      	str	r3, [sp, #100]	@ 0x64
 801cd4e:	89cb      	ldrh	r3, [r1, #14]
 801cd50:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cd54:	69cb      	ldr	r3, [r1, #28]
 801cd56:	9307      	str	r3, [sp, #28]
 801cd58:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801cd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd5c:	ab1a      	add	r3, sp, #104	@ 0x68
 801cd5e:	9300      	str	r3, [sp, #0]
 801cd60:	9304      	str	r3, [sp, #16]
 801cd62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cd66:	4615      	mov	r5, r2
 801cd68:	4606      	mov	r6, r0
 801cd6a:	9302      	str	r3, [sp, #8]
 801cd6c:	9305      	str	r3, [sp, #20]
 801cd6e:	a816      	add	r0, sp, #88	@ 0x58
 801cd70:	2300      	movs	r3, #0
 801cd72:	460c      	mov	r4, r1
 801cd74:	9306      	str	r3, [sp, #24]
 801cd76:	f7fd f853 	bl	8019e20 <__retarget_lock_init_recursive>
 801cd7a:	462a      	mov	r2, r5
 801cd7c:	463b      	mov	r3, r7
 801cd7e:	4669      	mov	r1, sp
 801cd80:	4630      	mov	r0, r6
 801cd82:	f7fe fdad 	bl	801b8e0 <_vfprintf_r>
 801cd86:	1e05      	subs	r5, r0, #0
 801cd88:	db07      	blt.n	801cd9a <__sbprintf+0x62>
 801cd8a:	4669      	mov	r1, sp
 801cd8c:	4630      	mov	r0, r6
 801cd8e:	f000 fdeb 	bl	801d968 <_fflush_r>
 801cd92:	2800      	cmp	r0, #0
 801cd94:	bf18      	it	ne
 801cd96:	f04f 35ff 	movne.w	r5, #4294967295
 801cd9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801cd9e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801cda0:	065b      	lsls	r3, r3, #25
 801cda2:	bf42      	ittt	mi
 801cda4:	89a3      	ldrhmi	r3, [r4, #12]
 801cda6:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801cdaa:	81a3      	strhmi	r3, [r4, #12]
 801cdac:	f7fd f839 	bl	8019e22 <__retarget_lock_close_recursive>
 801cdb0:	4628      	mov	r0, r5
 801cdb2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801cdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cdb8 <__sprint_r>:
 801cdb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdbc:	6893      	ldr	r3, [r2, #8]
 801cdbe:	4680      	mov	r8, r0
 801cdc0:	460e      	mov	r6, r1
 801cdc2:	4614      	mov	r4, r2
 801cdc4:	b343      	cbz	r3, 801ce18 <__sprint_r+0x60>
 801cdc6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801cdc8:	049d      	lsls	r5, r3, #18
 801cdca:	d522      	bpl.n	801ce12 <__sprint_r+0x5a>
 801cdcc:	6815      	ldr	r5, [r2, #0]
 801cdce:	68a0      	ldr	r0, [r4, #8]
 801cdd0:	3508      	adds	r5, #8
 801cdd2:	b928      	cbnz	r0, 801cde0 <__sprint_r+0x28>
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	60a3      	str	r3, [r4, #8]
 801cdd8:	2300      	movs	r3, #0
 801cdda:	6063      	str	r3, [r4, #4]
 801cddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cde0:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 801cde4:	f04f 0900 	mov.w	r9, #0
 801cde8:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 801cdec:	45ca      	cmp	sl, r9
 801cdee:	dc05      	bgt.n	801cdfc <__sprint_r+0x44>
 801cdf0:	68a3      	ldr	r3, [r4, #8]
 801cdf2:	f027 0703 	bic.w	r7, r7, #3
 801cdf6:	1bdb      	subs	r3, r3, r7
 801cdf8:	60a3      	str	r3, [r4, #8]
 801cdfa:	e7e8      	b.n	801cdce <__sprint_r+0x16>
 801cdfc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801ce00:	4632      	mov	r2, r6
 801ce02:	4640      	mov	r0, r8
 801ce04:	f000 ffb9 	bl	801dd7a <_fputwc_r>
 801ce08:	1c43      	adds	r3, r0, #1
 801ce0a:	d0e3      	beq.n	801cdd4 <__sprint_r+0x1c>
 801ce0c:	f109 0901 	add.w	r9, r9, #1
 801ce10:	e7ec      	b.n	801cdec <__sprint_r+0x34>
 801ce12:	f000 fdcf 	bl	801d9b4 <__sfvwrite_r>
 801ce16:	e7dd      	b.n	801cdd4 <__sprint_r+0x1c>
 801ce18:	4618      	mov	r0, r3
 801ce1a:	e7dd      	b.n	801cdd8 <__sprint_r+0x20>

0801ce1c <_vfiprintf_r>:
 801ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce20:	b0bb      	sub	sp, #236	@ 0xec
 801ce22:	460f      	mov	r7, r1
 801ce24:	4693      	mov	fp, r2
 801ce26:	461c      	mov	r4, r3
 801ce28:	461d      	mov	r5, r3
 801ce2a:	9000      	str	r0, [sp, #0]
 801ce2c:	b118      	cbz	r0, 801ce36 <_vfiprintf_r+0x1a>
 801ce2e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801ce30:	b90b      	cbnz	r3, 801ce36 <_vfiprintf_r+0x1a>
 801ce32:	f7fc fe91 	bl	8019b58 <__sinit>
 801ce36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ce38:	07db      	lsls	r3, r3, #31
 801ce3a:	d405      	bmi.n	801ce48 <_vfiprintf_r+0x2c>
 801ce3c:	89bb      	ldrh	r3, [r7, #12]
 801ce3e:	059e      	lsls	r6, r3, #22
 801ce40:	d402      	bmi.n	801ce48 <_vfiprintf_r+0x2c>
 801ce42:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ce44:	f7fc ffee 	bl	8019e24 <__retarget_lock_acquire_recursive>
 801ce48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ce4c:	0498      	lsls	r0, r3, #18
 801ce4e:	d406      	bmi.n	801ce5e <_vfiprintf_r+0x42>
 801ce50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ce54:	81bb      	strh	r3, [r7, #12]
 801ce56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ce58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ce5c:	667b      	str	r3, [r7, #100]	@ 0x64
 801ce5e:	89bb      	ldrh	r3, [r7, #12]
 801ce60:	0719      	lsls	r1, r3, #28
 801ce62:	d501      	bpl.n	801ce68 <_vfiprintf_r+0x4c>
 801ce64:	693b      	ldr	r3, [r7, #16]
 801ce66:	b9ab      	cbnz	r3, 801ce94 <_vfiprintf_r+0x78>
 801ce68:	9800      	ldr	r0, [sp, #0]
 801ce6a:	4639      	mov	r1, r7
 801ce6c:	f000 feee 	bl	801dc4c <__swsetup_r>
 801ce70:	b180      	cbz	r0, 801ce94 <_vfiprintf_r+0x78>
 801ce72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ce74:	07da      	lsls	r2, r3, #31
 801ce76:	d506      	bpl.n	801ce86 <_vfiprintf_r+0x6a>
 801ce78:	f04f 33ff 	mov.w	r3, #4294967295
 801ce7c:	9303      	str	r3, [sp, #12]
 801ce7e:	9803      	ldr	r0, [sp, #12]
 801ce80:	b03b      	add	sp, #236	@ 0xec
 801ce82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce86:	89bb      	ldrh	r3, [r7, #12]
 801ce88:	059b      	lsls	r3, r3, #22
 801ce8a:	d4f5      	bmi.n	801ce78 <_vfiprintf_r+0x5c>
 801ce8c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ce8e:	f7fc ffca 	bl	8019e26 <__retarget_lock_release_recursive>
 801ce92:	e7f1      	b.n	801ce78 <_vfiprintf_r+0x5c>
 801ce94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ce98:	f003 021a 	and.w	r2, r3, #26
 801ce9c:	2a0a      	cmp	r2, #10
 801ce9e:	d114      	bne.n	801ceca <_vfiprintf_r+0xae>
 801cea0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801cea4:	2a00      	cmp	r2, #0
 801cea6:	db10      	blt.n	801ceca <_vfiprintf_r+0xae>
 801cea8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ceaa:	07d6      	lsls	r6, r2, #31
 801ceac:	d404      	bmi.n	801ceb8 <_vfiprintf_r+0x9c>
 801ceae:	059d      	lsls	r5, r3, #22
 801ceb0:	d402      	bmi.n	801ceb8 <_vfiprintf_r+0x9c>
 801ceb2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ceb4:	f7fc ffb7 	bl	8019e26 <__retarget_lock_release_recursive>
 801ceb8:	9800      	ldr	r0, [sp, #0]
 801ceba:	4623      	mov	r3, r4
 801cebc:	465a      	mov	r2, fp
 801cebe:	4639      	mov	r1, r7
 801cec0:	b03b      	add	sp, #236	@ 0xec
 801cec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec6:	f000 bc31 	b.w	801d72c <__sbprintf>
 801ceca:	2300      	movs	r3, #0
 801cecc:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801ced0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ced4:	ae11      	add	r6, sp, #68	@ 0x44
 801ced6:	960e      	str	r6, [sp, #56]	@ 0x38
 801ced8:	9307      	str	r3, [sp, #28]
 801ceda:	9309      	str	r3, [sp, #36]	@ 0x24
 801cedc:	9303      	str	r3, [sp, #12]
 801cede:	465b      	mov	r3, fp
 801cee0:	461c      	mov	r4, r3
 801cee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cee6:	b10a      	cbz	r2, 801ceec <_vfiprintf_r+0xd0>
 801cee8:	2a25      	cmp	r2, #37	@ 0x25
 801ceea:	d1f9      	bne.n	801cee0 <_vfiprintf_r+0xc4>
 801ceec:	ebb4 080b 	subs.w	r8, r4, fp
 801cef0:	d00d      	beq.n	801cf0e <_vfiprintf_r+0xf2>
 801cef2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cef4:	4443      	add	r3, r8
 801cef6:	9310      	str	r3, [sp, #64]	@ 0x40
 801cef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cefa:	3301      	adds	r3, #1
 801cefc:	2b07      	cmp	r3, #7
 801cefe:	e9c6 b800 	strd	fp, r8, [r6]
 801cf02:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf04:	dc75      	bgt.n	801cff2 <_vfiprintf_r+0x1d6>
 801cf06:	3608      	adds	r6, #8
 801cf08:	9b03      	ldr	r3, [sp, #12]
 801cf0a:	4443      	add	r3, r8
 801cf0c:	9303      	str	r3, [sp, #12]
 801cf0e:	7823      	ldrb	r3, [r4, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	f000 83cd 	beq.w	801d6b0 <_vfiprintf_r+0x894>
 801cf16:	2300      	movs	r3, #0
 801cf18:	f04f 32ff 	mov.w	r2, #4294967295
 801cf1c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801cf20:	3401      	adds	r4, #1
 801cf22:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801cf26:	469a      	mov	sl, r3
 801cf28:	46a3      	mov	fp, r4
 801cf2a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801cf2e:	f1a3 0220 	sub.w	r2, r3, #32
 801cf32:	2a5a      	cmp	r2, #90	@ 0x5a
 801cf34:	f200 8316 	bhi.w	801d564 <_vfiprintf_r+0x748>
 801cf38:	e8df f012 	tbh	[pc, r2, lsl #1]
 801cf3c:	0314009a 	.word	0x0314009a
 801cf40:	00a20314 	.word	0x00a20314
 801cf44:	03140314 	.word	0x03140314
 801cf48:	00820314 	.word	0x00820314
 801cf4c:	03140314 	.word	0x03140314
 801cf50:	00af00a5 	.word	0x00af00a5
 801cf54:	00ac0314 	.word	0x00ac0314
 801cf58:	031400b1 	.word	0x031400b1
 801cf5c:	00d000cd 	.word	0x00d000cd
 801cf60:	00d000d0 	.word	0x00d000d0
 801cf64:	00d000d0 	.word	0x00d000d0
 801cf68:	00d000d0 	.word	0x00d000d0
 801cf6c:	00d000d0 	.word	0x00d000d0
 801cf70:	03140314 	.word	0x03140314
 801cf74:	03140314 	.word	0x03140314
 801cf78:	03140314 	.word	0x03140314
 801cf7c:	03140314 	.word	0x03140314
 801cf80:	00f70314 	.word	0x00f70314
 801cf84:	03140104 	.word	0x03140104
 801cf88:	03140314 	.word	0x03140314
 801cf8c:	03140314 	.word	0x03140314
 801cf90:	03140314 	.word	0x03140314
 801cf94:	03140314 	.word	0x03140314
 801cf98:	01520314 	.word	0x01520314
 801cf9c:	03140314 	.word	0x03140314
 801cfa0:	019a0314 	.word	0x019a0314
 801cfa4:	027a0314 	.word	0x027a0314
 801cfa8:	03140314 	.word	0x03140314
 801cfac:	0314029a 	.word	0x0314029a
 801cfb0:	03140314 	.word	0x03140314
 801cfb4:	03140314 	.word	0x03140314
 801cfb8:	03140314 	.word	0x03140314
 801cfbc:	03140314 	.word	0x03140314
 801cfc0:	00f70314 	.word	0x00f70314
 801cfc4:	03140106 	.word	0x03140106
 801cfc8:	03140314 	.word	0x03140314
 801cfcc:	010600e0 	.word	0x010600e0
 801cfd0:	031400f1 	.word	0x031400f1
 801cfd4:	031400eb 	.word	0x031400eb
 801cfd8:	01540132 	.word	0x01540132
 801cfdc:	00f10189 	.word	0x00f10189
 801cfe0:	019a0314 	.word	0x019a0314
 801cfe4:	027c0098 	.word	0x027c0098
 801cfe8:	03140314 	.word	0x03140314
 801cfec:	03140065 	.word	0x03140065
 801cff0:	0098      	.short	0x0098
 801cff2:	9800      	ldr	r0, [sp, #0]
 801cff4:	aa0e      	add	r2, sp, #56	@ 0x38
 801cff6:	4639      	mov	r1, r7
 801cff8:	f7ff fede 	bl	801cdb8 <__sprint_r>
 801cffc:	2800      	cmp	r0, #0
 801cffe:	f040 8336 	bne.w	801d66e <_vfiprintf_r+0x852>
 801d002:	ae11      	add	r6, sp, #68	@ 0x44
 801d004:	e780      	b.n	801cf08 <_vfiprintf_r+0xec>
 801d006:	4a99      	ldr	r2, [pc, #612]	@ (801d26c <_vfiprintf_r+0x450>)
 801d008:	9205      	str	r2, [sp, #20]
 801d00a:	f01a 0220 	ands.w	r2, sl, #32
 801d00e:	f000 8231 	beq.w	801d474 <_vfiprintf_r+0x658>
 801d012:	3507      	adds	r5, #7
 801d014:	f025 0507 	bic.w	r5, r5, #7
 801d018:	46a8      	mov	r8, r5
 801d01a:	686d      	ldr	r5, [r5, #4]
 801d01c:	f858 4b08 	ldr.w	r4, [r8], #8
 801d020:	f01a 0f01 	tst.w	sl, #1
 801d024:	d009      	beq.n	801d03a <_vfiprintf_r+0x21e>
 801d026:	ea54 0205 	orrs.w	r2, r4, r5
 801d02a:	bf1f      	itttt	ne
 801d02c:	2230      	movne	r2, #48	@ 0x30
 801d02e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801d032:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801d036:	f04a 0a02 	orrne.w	sl, sl, #2
 801d03a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801d03e:	e112      	b.n	801d266 <_vfiprintf_r+0x44a>
 801d040:	9800      	ldr	r0, [sp, #0]
 801d042:	f000 fef7 	bl	801de34 <_localeconv_r>
 801d046:	6843      	ldr	r3, [r0, #4]
 801d048:	9309      	str	r3, [sp, #36]	@ 0x24
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7e3 f8c0 	bl	80001d0 <strlen>
 801d050:	9007      	str	r0, [sp, #28]
 801d052:	9800      	ldr	r0, [sp, #0]
 801d054:	f000 feee 	bl	801de34 <_localeconv_r>
 801d058:	6883      	ldr	r3, [r0, #8]
 801d05a:	9306      	str	r3, [sp, #24]
 801d05c:	9b07      	ldr	r3, [sp, #28]
 801d05e:	b12b      	cbz	r3, 801d06c <_vfiprintf_r+0x250>
 801d060:	9b06      	ldr	r3, [sp, #24]
 801d062:	b11b      	cbz	r3, 801d06c <_vfiprintf_r+0x250>
 801d064:	781b      	ldrb	r3, [r3, #0]
 801d066:	b10b      	cbz	r3, 801d06c <_vfiprintf_r+0x250>
 801d068:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 801d06c:	465c      	mov	r4, fp
 801d06e:	e75b      	b.n	801cf28 <_vfiprintf_r+0x10c>
 801d070:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801d074:	2b00      	cmp	r3, #0
 801d076:	d1f9      	bne.n	801d06c <_vfiprintf_r+0x250>
 801d078:	2320      	movs	r3, #32
 801d07a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801d07e:	e7f5      	b.n	801d06c <_vfiprintf_r+0x250>
 801d080:	f04a 0a01 	orr.w	sl, sl, #1
 801d084:	e7f2      	b.n	801d06c <_vfiprintf_r+0x250>
 801d086:	f855 3b04 	ldr.w	r3, [r5], #4
 801d08a:	9302      	str	r3, [sp, #8]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	daed      	bge.n	801d06c <_vfiprintf_r+0x250>
 801d090:	425b      	negs	r3, r3
 801d092:	9302      	str	r3, [sp, #8]
 801d094:	f04a 0a04 	orr.w	sl, sl, #4
 801d098:	e7e8      	b.n	801d06c <_vfiprintf_r+0x250>
 801d09a:	232b      	movs	r3, #43	@ 0x2b
 801d09c:	e7ed      	b.n	801d07a <_vfiprintf_r+0x25e>
 801d09e:	465a      	mov	r2, fp
 801d0a0:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d0a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d0a6:	d112      	bne.n	801d0ce <_vfiprintf_r+0x2b2>
 801d0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d0ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d0b0:	9301      	str	r3, [sp, #4]
 801d0b2:	4693      	mov	fp, r2
 801d0b4:	e7da      	b.n	801d06c <_vfiprintf_r+0x250>
 801d0b6:	9b01      	ldr	r3, [sp, #4]
 801d0b8:	fb00 1303 	mla	r3, r0, r3, r1
 801d0bc:	9301      	str	r3, [sp, #4]
 801d0be:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d0c2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 801d0c6:	2909      	cmp	r1, #9
 801d0c8:	d9f5      	bls.n	801d0b6 <_vfiprintf_r+0x29a>
 801d0ca:	4693      	mov	fp, r2
 801d0cc:	e72f      	b.n	801cf2e <_vfiprintf_r+0x112>
 801d0ce:	2100      	movs	r1, #0
 801d0d0:	9101      	str	r1, [sp, #4]
 801d0d2:	200a      	movs	r0, #10
 801d0d4:	e7f5      	b.n	801d0c2 <_vfiprintf_r+0x2a6>
 801d0d6:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 801d0da:	e7c7      	b.n	801d06c <_vfiprintf_r+0x250>
 801d0dc:	2100      	movs	r1, #0
 801d0de:	465a      	mov	r2, fp
 801d0e0:	9102      	str	r1, [sp, #8]
 801d0e2:	200a      	movs	r0, #10
 801d0e4:	9902      	ldr	r1, [sp, #8]
 801d0e6:	3b30      	subs	r3, #48	@ 0x30
 801d0e8:	fb00 3301 	mla	r3, r0, r1, r3
 801d0ec:	9302      	str	r3, [sp, #8]
 801d0ee:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d0f2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 801d0f6:	2909      	cmp	r1, #9
 801d0f8:	d9f4      	bls.n	801d0e4 <_vfiprintf_r+0x2c8>
 801d0fa:	e7e6      	b.n	801d0ca <_vfiprintf_r+0x2ae>
 801d0fc:	f89b 3000 	ldrb.w	r3, [fp]
 801d100:	2b68      	cmp	r3, #104	@ 0x68
 801d102:	bf06      	itte	eq
 801d104:	f10b 0b01 	addeq.w	fp, fp, #1
 801d108:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 801d10c:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 801d110:	e7ac      	b.n	801d06c <_vfiprintf_r+0x250>
 801d112:	f89b 3000 	ldrb.w	r3, [fp]
 801d116:	2b6c      	cmp	r3, #108	@ 0x6c
 801d118:	d104      	bne.n	801d124 <_vfiprintf_r+0x308>
 801d11a:	f10b 0b01 	add.w	fp, fp, #1
 801d11e:	f04a 0a20 	orr.w	sl, sl, #32
 801d122:	e7a3      	b.n	801d06c <_vfiprintf_r+0x250>
 801d124:	f04a 0a10 	orr.w	sl, sl, #16
 801d128:	e7a0      	b.n	801d06c <_vfiprintf_r+0x250>
 801d12a:	46a8      	mov	r8, r5
 801d12c:	2400      	movs	r4, #0
 801d12e:	f858 3b04 	ldr.w	r3, [r8], #4
 801d132:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801d136:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801d13a:	2301      	movs	r3, #1
 801d13c:	9301      	str	r3, [sp, #4]
 801d13e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801d142:	e0ab      	b.n	801d29c <_vfiprintf_r+0x480>
 801d144:	f04a 0a10 	orr.w	sl, sl, #16
 801d148:	f01a 0f20 	tst.w	sl, #32
 801d14c:	d011      	beq.n	801d172 <_vfiprintf_r+0x356>
 801d14e:	3507      	adds	r5, #7
 801d150:	f025 0507 	bic.w	r5, r5, #7
 801d154:	46a8      	mov	r8, r5
 801d156:	686d      	ldr	r5, [r5, #4]
 801d158:	f858 4b08 	ldr.w	r4, [r8], #8
 801d15c:	2d00      	cmp	r5, #0
 801d15e:	da06      	bge.n	801d16e <_vfiprintf_r+0x352>
 801d160:	4264      	negs	r4, r4
 801d162:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801d166:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801d16a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801d16e:	2301      	movs	r3, #1
 801d170:	e048      	b.n	801d204 <_vfiprintf_r+0x3e8>
 801d172:	46a8      	mov	r8, r5
 801d174:	f01a 0f10 	tst.w	sl, #16
 801d178:	f858 5b04 	ldr.w	r5, [r8], #4
 801d17c:	d002      	beq.n	801d184 <_vfiprintf_r+0x368>
 801d17e:	462c      	mov	r4, r5
 801d180:	17ed      	asrs	r5, r5, #31
 801d182:	e7eb      	b.n	801d15c <_vfiprintf_r+0x340>
 801d184:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801d188:	d003      	beq.n	801d192 <_vfiprintf_r+0x376>
 801d18a:	b22c      	sxth	r4, r5
 801d18c:	f345 35c0 	sbfx	r5, r5, #15, #1
 801d190:	e7e4      	b.n	801d15c <_vfiprintf_r+0x340>
 801d192:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801d196:	d0f2      	beq.n	801d17e <_vfiprintf_r+0x362>
 801d198:	b26c      	sxtb	r4, r5
 801d19a:	f345 15c0 	sbfx	r5, r5, #7, #1
 801d19e:	e7dd      	b.n	801d15c <_vfiprintf_r+0x340>
 801d1a0:	f01a 0f20 	tst.w	sl, #32
 801d1a4:	d007      	beq.n	801d1b6 <_vfiprintf_r+0x39a>
 801d1a6:	9a03      	ldr	r2, [sp, #12]
 801d1a8:	682b      	ldr	r3, [r5, #0]
 801d1aa:	9903      	ldr	r1, [sp, #12]
 801d1ac:	17d2      	asrs	r2, r2, #31
 801d1ae:	e9c3 1200 	strd	r1, r2, [r3]
 801d1b2:	3504      	adds	r5, #4
 801d1b4:	e693      	b.n	801cede <_vfiprintf_r+0xc2>
 801d1b6:	f01a 0f10 	tst.w	sl, #16
 801d1ba:	d003      	beq.n	801d1c4 <_vfiprintf_r+0x3a8>
 801d1bc:	682b      	ldr	r3, [r5, #0]
 801d1be:	9a03      	ldr	r2, [sp, #12]
 801d1c0:	601a      	str	r2, [r3, #0]
 801d1c2:	e7f6      	b.n	801d1b2 <_vfiprintf_r+0x396>
 801d1c4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801d1c8:	d003      	beq.n	801d1d2 <_vfiprintf_r+0x3b6>
 801d1ca:	682b      	ldr	r3, [r5, #0]
 801d1cc:	9a03      	ldr	r2, [sp, #12]
 801d1ce:	801a      	strh	r2, [r3, #0]
 801d1d0:	e7ef      	b.n	801d1b2 <_vfiprintf_r+0x396>
 801d1d2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801d1d6:	d0f1      	beq.n	801d1bc <_vfiprintf_r+0x3a0>
 801d1d8:	682b      	ldr	r3, [r5, #0]
 801d1da:	9a03      	ldr	r2, [sp, #12]
 801d1dc:	701a      	strb	r2, [r3, #0]
 801d1de:	e7e8      	b.n	801d1b2 <_vfiprintf_r+0x396>
 801d1e0:	f04a 0a10 	orr.w	sl, sl, #16
 801d1e4:	f01a 0320 	ands.w	r3, sl, #32
 801d1e8:	d01f      	beq.n	801d22a <_vfiprintf_r+0x40e>
 801d1ea:	3507      	adds	r5, #7
 801d1ec:	f025 0507 	bic.w	r5, r5, #7
 801d1f0:	46a8      	mov	r8, r5
 801d1f2:	686d      	ldr	r5, [r5, #4]
 801d1f4:	f858 4b08 	ldr.w	r4, [r8], #8
 801d1f8:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	2200      	movs	r2, #0
 801d200:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801d204:	9a01      	ldr	r2, [sp, #4]
 801d206:	3201      	adds	r2, #1
 801d208:	f000 825f 	beq.w	801d6ca <_vfiprintf_r+0x8ae>
 801d20c:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 801d210:	9204      	str	r2, [sp, #16]
 801d212:	ea54 0205 	orrs.w	r2, r4, r5
 801d216:	f040 825e 	bne.w	801d6d6 <_vfiprintf_r+0x8ba>
 801d21a:	9a01      	ldr	r2, [sp, #4]
 801d21c:	2a00      	cmp	r2, #0
 801d21e:	f000 8198 	beq.w	801d552 <_vfiprintf_r+0x736>
 801d222:	2b01      	cmp	r3, #1
 801d224:	f040 825a 	bne.w	801d6dc <_vfiprintf_r+0x8c0>
 801d228:	e13b      	b.n	801d4a2 <_vfiprintf_r+0x686>
 801d22a:	46a8      	mov	r8, r5
 801d22c:	f01a 0510 	ands.w	r5, sl, #16
 801d230:	f858 4b04 	ldr.w	r4, [r8], #4
 801d234:	d001      	beq.n	801d23a <_vfiprintf_r+0x41e>
 801d236:	461d      	mov	r5, r3
 801d238:	e7de      	b.n	801d1f8 <_vfiprintf_r+0x3dc>
 801d23a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801d23e:	d001      	beq.n	801d244 <_vfiprintf_r+0x428>
 801d240:	b2a4      	uxth	r4, r4
 801d242:	e7d9      	b.n	801d1f8 <_vfiprintf_r+0x3dc>
 801d244:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801d248:	d0d6      	beq.n	801d1f8 <_vfiprintf_r+0x3dc>
 801d24a:	b2e4      	uxtb	r4, r4
 801d24c:	e7f3      	b.n	801d236 <_vfiprintf_r+0x41a>
 801d24e:	46a8      	mov	r8, r5
 801d250:	f647 0330 	movw	r3, #30768	@ 0x7830
 801d254:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801d258:	f858 4b04 	ldr.w	r4, [r8], #4
 801d25c:	4b03      	ldr	r3, [pc, #12]	@ (801d26c <_vfiprintf_r+0x450>)
 801d25e:	9305      	str	r3, [sp, #20]
 801d260:	2500      	movs	r5, #0
 801d262:	f04a 0a02 	orr.w	sl, sl, #2
 801d266:	2302      	movs	r3, #2
 801d268:	e7c9      	b.n	801d1fe <_vfiprintf_r+0x3e2>
 801d26a:	bf00      	nop
 801d26c:	08020938 	.word	0x08020938
 801d270:	9b01      	ldr	r3, [sp, #4]
 801d272:	46a8      	mov	r8, r5
 801d274:	1c5c      	adds	r4, r3, #1
 801d276:	f04f 0500 	mov.w	r5, #0
 801d27a:	f858 9b04 	ldr.w	r9, [r8], #4
 801d27e:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801d282:	f000 80d0 	beq.w	801d426 <_vfiprintf_r+0x60a>
 801d286:	461a      	mov	r2, r3
 801d288:	4629      	mov	r1, r5
 801d28a:	4648      	mov	r0, r9
 801d28c:	f7e2 ffa8 	bl	80001e0 <memchr>
 801d290:	4604      	mov	r4, r0
 801d292:	b118      	cbz	r0, 801d29c <_vfiprintf_r+0x480>
 801d294:	eba0 0309 	sub.w	r3, r0, r9
 801d298:	9301      	str	r3, [sp, #4]
 801d29a:	462c      	mov	r4, r5
 801d29c:	9b01      	ldr	r3, [sp, #4]
 801d29e:	42a3      	cmp	r3, r4
 801d2a0:	bfb8      	it	lt
 801d2a2:	4623      	movlt	r3, r4
 801d2a4:	9304      	str	r3, [sp, #16]
 801d2a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801d2aa:	b113      	cbz	r3, 801d2b2 <_vfiprintf_r+0x496>
 801d2ac:	9b04      	ldr	r3, [sp, #16]
 801d2ae:	3301      	adds	r3, #1
 801d2b0:	9304      	str	r3, [sp, #16]
 801d2b2:	f01a 0302 	ands.w	r3, sl, #2
 801d2b6:	9308      	str	r3, [sp, #32]
 801d2b8:	bf1e      	ittt	ne
 801d2ba:	9b04      	ldrne	r3, [sp, #16]
 801d2bc:	3302      	addne	r3, #2
 801d2be:	9304      	strne	r3, [sp, #16]
 801d2c0:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 801d2c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d2c6:	d11f      	bne.n	801d308 <_vfiprintf_r+0x4ec>
 801d2c8:	9b02      	ldr	r3, [sp, #8]
 801d2ca:	9a04      	ldr	r2, [sp, #16]
 801d2cc:	1a9d      	subs	r5, r3, r2
 801d2ce:	2d00      	cmp	r5, #0
 801d2d0:	dd1a      	ble.n	801d308 <_vfiprintf_r+0x4ec>
 801d2d2:	4ba9      	ldr	r3, [pc, #676]	@ (801d578 <_vfiprintf_r+0x75c>)
 801d2d4:	6033      	str	r3, [r6, #0]
 801d2d6:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801d2da:	2d10      	cmp	r5, #16
 801d2dc:	f102 0201 	add.w	r2, r2, #1
 801d2e0:	f106 0008 	add.w	r0, r6, #8
 801d2e4:	f300 814e 	bgt.w	801d584 <_vfiprintf_r+0x768>
 801d2e8:	6075      	str	r5, [r6, #4]
 801d2ea:	2a07      	cmp	r2, #7
 801d2ec:	4465      	add	r5, ip
 801d2ee:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801d2f2:	f340 815a 	ble.w	801d5aa <_vfiprintf_r+0x78e>
 801d2f6:	9800      	ldr	r0, [sp, #0]
 801d2f8:	aa0e      	add	r2, sp, #56	@ 0x38
 801d2fa:	4639      	mov	r1, r7
 801d2fc:	f7ff fd5c 	bl	801cdb8 <__sprint_r>
 801d300:	2800      	cmp	r0, #0
 801d302:	f040 81b4 	bne.w	801d66e <_vfiprintf_r+0x852>
 801d306:	ae11      	add	r6, sp, #68	@ 0x44
 801d308:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 801d30c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801d310:	b161      	cbz	r1, 801d32c <_vfiprintf_r+0x510>
 801d312:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801d316:	3301      	adds	r3, #1
 801d318:	6031      	str	r1, [r6, #0]
 801d31a:	2101      	movs	r1, #1
 801d31c:	440a      	add	r2, r1
 801d31e:	2b07      	cmp	r3, #7
 801d320:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801d324:	6071      	str	r1, [r6, #4]
 801d326:	f300 8142 	bgt.w	801d5ae <_vfiprintf_r+0x792>
 801d32a:	3608      	adds	r6, #8
 801d32c:	9908      	ldr	r1, [sp, #32]
 801d32e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801d332:	b159      	cbz	r1, 801d34c <_vfiprintf_r+0x530>
 801d334:	a90d      	add	r1, sp, #52	@ 0x34
 801d336:	3301      	adds	r3, #1
 801d338:	6031      	str	r1, [r6, #0]
 801d33a:	2102      	movs	r1, #2
 801d33c:	440a      	add	r2, r1
 801d33e:	2b07      	cmp	r3, #7
 801d340:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801d344:	6071      	str	r1, [r6, #4]
 801d346:	f300 813b 	bgt.w	801d5c0 <_vfiprintf_r+0x7a4>
 801d34a:	3608      	adds	r6, #8
 801d34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d34e:	2b80      	cmp	r3, #128	@ 0x80
 801d350:	d11f      	bne.n	801d392 <_vfiprintf_r+0x576>
 801d352:	9b02      	ldr	r3, [sp, #8]
 801d354:	9a04      	ldr	r2, [sp, #16]
 801d356:	1a9d      	subs	r5, r3, r2
 801d358:	2d00      	cmp	r5, #0
 801d35a:	dd1a      	ble.n	801d392 <_vfiprintf_r+0x576>
 801d35c:	4b87      	ldr	r3, [pc, #540]	@ (801d57c <_vfiprintf_r+0x760>)
 801d35e:	6033      	str	r3, [r6, #0]
 801d360:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801d364:	2d10      	cmp	r5, #16
 801d366:	f102 0201 	add.w	r2, r2, #1
 801d36a:	f106 0008 	add.w	r0, r6, #8
 801d36e:	f300 8130 	bgt.w	801d5d2 <_vfiprintf_r+0x7b6>
 801d372:	6075      	str	r5, [r6, #4]
 801d374:	2a07      	cmp	r2, #7
 801d376:	4465      	add	r5, ip
 801d378:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801d37c:	f340 813c 	ble.w	801d5f8 <_vfiprintf_r+0x7dc>
 801d380:	9800      	ldr	r0, [sp, #0]
 801d382:	aa0e      	add	r2, sp, #56	@ 0x38
 801d384:	4639      	mov	r1, r7
 801d386:	f7ff fd17 	bl	801cdb8 <__sprint_r>
 801d38a:	2800      	cmp	r0, #0
 801d38c:	f040 816f 	bne.w	801d66e <_vfiprintf_r+0x852>
 801d390:	ae11      	add	r6, sp, #68	@ 0x44
 801d392:	9b01      	ldr	r3, [sp, #4]
 801d394:	1ae4      	subs	r4, r4, r3
 801d396:	2c00      	cmp	r4, #0
 801d398:	dd1a      	ble.n	801d3d0 <_vfiprintf_r+0x5b4>
 801d39a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801d39e:	4877      	ldr	r0, [pc, #476]	@ (801d57c <_vfiprintf_r+0x760>)
 801d3a0:	6030      	str	r0, [r6, #0]
 801d3a2:	2c10      	cmp	r4, #16
 801d3a4:	f103 0301 	add.w	r3, r3, #1
 801d3a8:	f106 0108 	add.w	r1, r6, #8
 801d3ac:	f300 8126 	bgt.w	801d5fc <_vfiprintf_r+0x7e0>
 801d3b0:	6074      	str	r4, [r6, #4]
 801d3b2:	2b07      	cmp	r3, #7
 801d3b4:	4414      	add	r4, r2
 801d3b6:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 801d3ba:	f340 8130 	ble.w	801d61e <_vfiprintf_r+0x802>
 801d3be:	9800      	ldr	r0, [sp, #0]
 801d3c0:	aa0e      	add	r2, sp, #56	@ 0x38
 801d3c2:	4639      	mov	r1, r7
 801d3c4:	f7ff fcf8 	bl	801cdb8 <__sprint_r>
 801d3c8:	2800      	cmp	r0, #0
 801d3ca:	f040 8150 	bne.w	801d66e <_vfiprintf_r+0x852>
 801d3ce:	ae11      	add	r6, sp, #68	@ 0x44
 801d3d0:	9b01      	ldr	r3, [sp, #4]
 801d3d2:	9a01      	ldr	r2, [sp, #4]
 801d3d4:	6073      	str	r3, [r6, #4]
 801d3d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d3d8:	f8c6 9000 	str.w	r9, [r6]
 801d3dc:	4413      	add	r3, r2
 801d3de:	9310      	str	r3, [sp, #64]	@ 0x40
 801d3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d3e2:	3301      	adds	r3, #1
 801d3e4:	2b07      	cmp	r3, #7
 801d3e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d3e8:	f300 811b 	bgt.w	801d622 <_vfiprintf_r+0x806>
 801d3ec:	f106 0308 	add.w	r3, r6, #8
 801d3f0:	f01a 0f04 	tst.w	sl, #4
 801d3f4:	f040 811d 	bne.w	801d632 <_vfiprintf_r+0x816>
 801d3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d3fc:	9904      	ldr	r1, [sp, #16]
 801d3fe:	428a      	cmp	r2, r1
 801d400:	bfac      	ite	ge
 801d402:	189b      	addge	r3, r3, r2
 801d404:	185b      	addlt	r3, r3, r1
 801d406:	9303      	str	r3, [sp, #12]
 801d408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d40a:	b13b      	cbz	r3, 801d41c <_vfiprintf_r+0x600>
 801d40c:	9800      	ldr	r0, [sp, #0]
 801d40e:	aa0e      	add	r2, sp, #56	@ 0x38
 801d410:	4639      	mov	r1, r7
 801d412:	f7ff fcd1 	bl	801cdb8 <__sprint_r>
 801d416:	2800      	cmp	r0, #0
 801d418:	f040 8129 	bne.w	801d66e <_vfiprintf_r+0x852>
 801d41c:	2300      	movs	r3, #0
 801d41e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d420:	4645      	mov	r5, r8
 801d422:	ae11      	add	r6, sp, #68	@ 0x44
 801d424:	e55b      	b.n	801cede <_vfiprintf_r+0xc2>
 801d426:	4648      	mov	r0, r9
 801d428:	f7e2 fed2 	bl	80001d0 <strlen>
 801d42c:	9001      	str	r0, [sp, #4]
 801d42e:	e734      	b.n	801d29a <_vfiprintf_r+0x47e>
 801d430:	f04a 0a10 	orr.w	sl, sl, #16
 801d434:	f01a 0320 	ands.w	r3, sl, #32
 801d438:	d008      	beq.n	801d44c <_vfiprintf_r+0x630>
 801d43a:	3507      	adds	r5, #7
 801d43c:	f025 0507 	bic.w	r5, r5, #7
 801d440:	46a8      	mov	r8, r5
 801d442:	686d      	ldr	r5, [r5, #4]
 801d444:	f858 4b08 	ldr.w	r4, [r8], #8
 801d448:	2301      	movs	r3, #1
 801d44a:	e6d8      	b.n	801d1fe <_vfiprintf_r+0x3e2>
 801d44c:	46a8      	mov	r8, r5
 801d44e:	f01a 0510 	ands.w	r5, sl, #16
 801d452:	f858 4b04 	ldr.w	r4, [r8], #4
 801d456:	d001      	beq.n	801d45c <_vfiprintf_r+0x640>
 801d458:	461d      	mov	r5, r3
 801d45a:	e7f5      	b.n	801d448 <_vfiprintf_r+0x62c>
 801d45c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801d460:	d001      	beq.n	801d466 <_vfiprintf_r+0x64a>
 801d462:	b2a4      	uxth	r4, r4
 801d464:	e7f0      	b.n	801d448 <_vfiprintf_r+0x62c>
 801d466:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801d46a:	d0ed      	beq.n	801d448 <_vfiprintf_r+0x62c>
 801d46c:	b2e4      	uxtb	r4, r4
 801d46e:	e7f3      	b.n	801d458 <_vfiprintf_r+0x63c>
 801d470:	4a43      	ldr	r2, [pc, #268]	@ (801d580 <_vfiprintf_r+0x764>)
 801d472:	e5c9      	b.n	801d008 <_vfiprintf_r+0x1ec>
 801d474:	46a8      	mov	r8, r5
 801d476:	f01a 0510 	ands.w	r5, sl, #16
 801d47a:	f858 4b04 	ldr.w	r4, [r8], #4
 801d47e:	d001      	beq.n	801d484 <_vfiprintf_r+0x668>
 801d480:	4615      	mov	r5, r2
 801d482:	e5cd      	b.n	801d020 <_vfiprintf_r+0x204>
 801d484:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 801d488:	d001      	beq.n	801d48e <_vfiprintf_r+0x672>
 801d48a:	b2a4      	uxth	r4, r4
 801d48c:	e5c8      	b.n	801d020 <_vfiprintf_r+0x204>
 801d48e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801d492:	f43f adc5 	beq.w	801d020 <_vfiprintf_r+0x204>
 801d496:	b2e4      	uxtb	r4, r4
 801d498:	e7f2      	b.n	801d480 <_vfiprintf_r+0x664>
 801d49a:	2c0a      	cmp	r4, #10
 801d49c:	f175 0300 	sbcs.w	r3, r5, #0
 801d4a0:	d206      	bcs.n	801d4b0 <_vfiprintf_r+0x694>
 801d4a2:	3430      	adds	r4, #48	@ 0x30
 801d4a4:	b2e4      	uxtb	r4, r4
 801d4a6:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 801d4aa:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 801d4ae:	e131      	b.n	801d714 <_vfiprintf_r+0x8f8>
 801d4b0:	ab3a      	add	r3, sp, #232	@ 0xe8
 801d4b2:	9308      	str	r3, [sp, #32]
 801d4b4:	9b04      	ldr	r3, [sp, #16]
 801d4b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d4ba:	f04f 0a00 	mov.w	sl, #0
 801d4be:	930a      	str	r3, [sp, #40]	@ 0x28
 801d4c0:	220a      	movs	r2, #10
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	4620      	mov	r0, r4
 801d4c6:	4629      	mov	r1, r5
 801d4c8:	f7e3 fbde 	bl	8000c88 <__aeabi_uldivmod>
 801d4cc:	460b      	mov	r3, r1
 801d4ce:	9908      	ldr	r1, [sp, #32]
 801d4d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d4d2:	3230      	adds	r2, #48	@ 0x30
 801d4d4:	f801 2c01 	strb.w	r2, [r1, #-1]
 801d4d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d4da:	f101 39ff 	add.w	r9, r1, #4294967295
 801d4de:	f10a 0a01 	add.w	sl, sl, #1
 801d4e2:	b1e2      	cbz	r2, 801d51e <_vfiprintf_r+0x702>
 801d4e4:	9a06      	ldr	r2, [sp, #24]
 801d4e6:	7812      	ldrb	r2, [r2, #0]
 801d4e8:	4552      	cmp	r2, sl
 801d4ea:	d118      	bne.n	801d51e <_vfiprintf_r+0x702>
 801d4ec:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801d4f0:	d015      	beq.n	801d51e <_vfiprintf_r+0x702>
 801d4f2:	2c0a      	cmp	r4, #10
 801d4f4:	f175 0200 	sbcs.w	r2, r5, #0
 801d4f8:	d311      	bcc.n	801d51e <_vfiprintf_r+0x702>
 801d4fa:	9308      	str	r3, [sp, #32]
 801d4fc:	9b07      	ldr	r3, [sp, #28]
 801d4fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d500:	eba9 0903 	sub.w	r9, r9, r3
 801d504:	461a      	mov	r2, r3
 801d506:	4648      	mov	r0, r9
 801d508:	f000 fc7a 	bl	801de00 <strncpy>
 801d50c:	9b06      	ldr	r3, [sp, #24]
 801d50e:	785a      	ldrb	r2, [r3, #1]
 801d510:	9b08      	ldr	r3, [sp, #32]
 801d512:	b172      	cbz	r2, 801d532 <_vfiprintf_r+0x716>
 801d514:	9a06      	ldr	r2, [sp, #24]
 801d516:	3201      	adds	r2, #1
 801d518:	9206      	str	r2, [sp, #24]
 801d51a:	f04f 0a00 	mov.w	sl, #0
 801d51e:	2c0a      	cmp	r4, #10
 801d520:	f175 0500 	sbcs.w	r5, r5, #0
 801d524:	f0c0 80f6 	bcc.w	801d714 <_vfiprintf_r+0x8f8>
 801d528:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d52a:	f8cd 9020 	str.w	r9, [sp, #32]
 801d52e:	461d      	mov	r5, r3
 801d530:	e7c6      	b.n	801d4c0 <_vfiprintf_r+0x6a4>
 801d532:	4692      	mov	sl, r2
 801d534:	e7f3      	b.n	801d51e <_vfiprintf_r+0x702>
 801d536:	f004 030f 	and.w	r3, r4, #15
 801d53a:	9a05      	ldr	r2, [sp, #20]
 801d53c:	0924      	lsrs	r4, r4, #4
 801d53e:	5cd3      	ldrb	r3, [r2, r3]
 801d540:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801d544:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801d548:	092d      	lsrs	r5, r5, #4
 801d54a:	ea54 0305 	orrs.w	r3, r4, r5
 801d54e:	d1f2      	bne.n	801d536 <_vfiprintf_r+0x71a>
 801d550:	e0e0      	b.n	801d714 <_vfiprintf_r+0x8f8>
 801d552:	b923      	cbnz	r3, 801d55e <_vfiprintf_r+0x742>
 801d554:	f01a 0f01 	tst.w	sl, #1
 801d558:	d001      	beq.n	801d55e <_vfiprintf_r+0x742>
 801d55a:	2430      	movs	r4, #48	@ 0x30
 801d55c:	e7a3      	b.n	801d4a6 <_vfiprintf_r+0x68a>
 801d55e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801d562:	e0d7      	b.n	801d714 <_vfiprintf_r+0x8f8>
 801d564:	2b00      	cmp	r3, #0
 801d566:	f000 80a3 	beq.w	801d6b0 <_vfiprintf_r+0x894>
 801d56a:	2400      	movs	r4, #0
 801d56c:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801d570:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801d574:	46a8      	mov	r8, r5
 801d576:	e5e0      	b.n	801d13a <_vfiprintf_r+0x31e>
 801d578:	080209ac 	.word	0x080209ac
 801d57c:	0802099c 	.word	0x0802099c
 801d580:	08020949 	.word	0x08020949
 801d584:	2110      	movs	r1, #16
 801d586:	6071      	str	r1, [r6, #4]
 801d588:	2a07      	cmp	r2, #7
 801d58a:	4461      	add	r1, ip
 801d58c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801d590:	dd08      	ble.n	801d5a4 <_vfiprintf_r+0x788>
 801d592:	9800      	ldr	r0, [sp, #0]
 801d594:	aa0e      	add	r2, sp, #56	@ 0x38
 801d596:	4639      	mov	r1, r7
 801d598:	f7ff fc0e 	bl	801cdb8 <__sprint_r>
 801d59c:	2800      	cmp	r0, #0
 801d59e:	d166      	bne.n	801d66e <_vfiprintf_r+0x852>
 801d5a0:	4b60      	ldr	r3, [pc, #384]	@ (801d724 <_vfiprintf_r+0x908>)
 801d5a2:	a811      	add	r0, sp, #68	@ 0x44
 801d5a4:	3d10      	subs	r5, #16
 801d5a6:	4606      	mov	r6, r0
 801d5a8:	e694      	b.n	801d2d4 <_vfiprintf_r+0x4b8>
 801d5aa:	4606      	mov	r6, r0
 801d5ac:	e6ac      	b.n	801d308 <_vfiprintf_r+0x4ec>
 801d5ae:	9800      	ldr	r0, [sp, #0]
 801d5b0:	aa0e      	add	r2, sp, #56	@ 0x38
 801d5b2:	4639      	mov	r1, r7
 801d5b4:	f7ff fc00 	bl	801cdb8 <__sprint_r>
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	d158      	bne.n	801d66e <_vfiprintf_r+0x852>
 801d5bc:	ae11      	add	r6, sp, #68	@ 0x44
 801d5be:	e6b5      	b.n	801d32c <_vfiprintf_r+0x510>
 801d5c0:	9800      	ldr	r0, [sp, #0]
 801d5c2:	aa0e      	add	r2, sp, #56	@ 0x38
 801d5c4:	4639      	mov	r1, r7
 801d5c6:	f7ff fbf7 	bl	801cdb8 <__sprint_r>
 801d5ca:	2800      	cmp	r0, #0
 801d5cc:	d14f      	bne.n	801d66e <_vfiprintf_r+0x852>
 801d5ce:	ae11      	add	r6, sp, #68	@ 0x44
 801d5d0:	e6bc      	b.n	801d34c <_vfiprintf_r+0x530>
 801d5d2:	2110      	movs	r1, #16
 801d5d4:	6071      	str	r1, [r6, #4]
 801d5d6:	2a07      	cmp	r2, #7
 801d5d8:	4461      	add	r1, ip
 801d5da:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801d5de:	dd08      	ble.n	801d5f2 <_vfiprintf_r+0x7d6>
 801d5e0:	9800      	ldr	r0, [sp, #0]
 801d5e2:	aa0e      	add	r2, sp, #56	@ 0x38
 801d5e4:	4639      	mov	r1, r7
 801d5e6:	f7ff fbe7 	bl	801cdb8 <__sprint_r>
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	d13f      	bne.n	801d66e <_vfiprintf_r+0x852>
 801d5ee:	4b4e      	ldr	r3, [pc, #312]	@ (801d728 <_vfiprintf_r+0x90c>)
 801d5f0:	a811      	add	r0, sp, #68	@ 0x44
 801d5f2:	3d10      	subs	r5, #16
 801d5f4:	4606      	mov	r6, r0
 801d5f6:	e6b2      	b.n	801d35e <_vfiprintf_r+0x542>
 801d5f8:	4606      	mov	r6, r0
 801d5fa:	e6ca      	b.n	801d392 <_vfiprintf_r+0x576>
 801d5fc:	2010      	movs	r0, #16
 801d5fe:	4402      	add	r2, r0
 801d600:	2b07      	cmp	r3, #7
 801d602:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801d606:	6070      	str	r0, [r6, #4]
 801d608:	dd06      	ble.n	801d618 <_vfiprintf_r+0x7fc>
 801d60a:	9800      	ldr	r0, [sp, #0]
 801d60c:	aa0e      	add	r2, sp, #56	@ 0x38
 801d60e:	4639      	mov	r1, r7
 801d610:	f7ff fbd2 	bl	801cdb8 <__sprint_r>
 801d614:	bb58      	cbnz	r0, 801d66e <_vfiprintf_r+0x852>
 801d616:	a911      	add	r1, sp, #68	@ 0x44
 801d618:	3c10      	subs	r4, #16
 801d61a:	460e      	mov	r6, r1
 801d61c:	e6bd      	b.n	801d39a <_vfiprintf_r+0x57e>
 801d61e:	460e      	mov	r6, r1
 801d620:	e6d6      	b.n	801d3d0 <_vfiprintf_r+0x5b4>
 801d622:	9800      	ldr	r0, [sp, #0]
 801d624:	aa0e      	add	r2, sp, #56	@ 0x38
 801d626:	4639      	mov	r1, r7
 801d628:	f7ff fbc6 	bl	801cdb8 <__sprint_r>
 801d62c:	b9f8      	cbnz	r0, 801d66e <_vfiprintf_r+0x852>
 801d62e:	ab11      	add	r3, sp, #68	@ 0x44
 801d630:	e6de      	b.n	801d3f0 <_vfiprintf_r+0x5d4>
 801d632:	9a02      	ldr	r2, [sp, #8]
 801d634:	9904      	ldr	r1, [sp, #16]
 801d636:	1a54      	subs	r4, r2, r1
 801d638:	2c00      	cmp	r4, #0
 801d63a:	f77f aedd 	ble.w	801d3f8 <_vfiprintf_r+0x5dc>
 801d63e:	4d39      	ldr	r5, [pc, #228]	@ (801d724 <_vfiprintf_r+0x908>)
 801d640:	2610      	movs	r6, #16
 801d642:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801d646:	2c10      	cmp	r4, #16
 801d648:	f102 0201 	add.w	r2, r2, #1
 801d64c:	601d      	str	r5, [r3, #0]
 801d64e:	dc1d      	bgt.n	801d68c <_vfiprintf_r+0x870>
 801d650:	605c      	str	r4, [r3, #4]
 801d652:	2a07      	cmp	r2, #7
 801d654:	440c      	add	r4, r1
 801d656:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 801d65a:	f77f aecd 	ble.w	801d3f8 <_vfiprintf_r+0x5dc>
 801d65e:	9800      	ldr	r0, [sp, #0]
 801d660:	aa0e      	add	r2, sp, #56	@ 0x38
 801d662:	4639      	mov	r1, r7
 801d664:	f7ff fba8 	bl	801cdb8 <__sprint_r>
 801d668:	2800      	cmp	r0, #0
 801d66a:	f43f aec5 	beq.w	801d3f8 <_vfiprintf_r+0x5dc>
 801d66e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d670:	07d9      	lsls	r1, r3, #31
 801d672:	d405      	bmi.n	801d680 <_vfiprintf_r+0x864>
 801d674:	89bb      	ldrh	r3, [r7, #12]
 801d676:	059a      	lsls	r2, r3, #22
 801d678:	d402      	bmi.n	801d680 <_vfiprintf_r+0x864>
 801d67a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d67c:	f7fc fbd3 	bl	8019e26 <__retarget_lock_release_recursive>
 801d680:	89bb      	ldrh	r3, [r7, #12]
 801d682:	065b      	lsls	r3, r3, #25
 801d684:	f57f abfb 	bpl.w	801ce7e <_vfiprintf_r+0x62>
 801d688:	f7ff bbf6 	b.w	801ce78 <_vfiprintf_r+0x5c>
 801d68c:	3110      	adds	r1, #16
 801d68e:	2a07      	cmp	r2, #7
 801d690:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801d694:	605e      	str	r6, [r3, #4]
 801d696:	dc02      	bgt.n	801d69e <_vfiprintf_r+0x882>
 801d698:	3308      	adds	r3, #8
 801d69a:	3c10      	subs	r4, #16
 801d69c:	e7d1      	b.n	801d642 <_vfiprintf_r+0x826>
 801d69e:	9800      	ldr	r0, [sp, #0]
 801d6a0:	aa0e      	add	r2, sp, #56	@ 0x38
 801d6a2:	4639      	mov	r1, r7
 801d6a4:	f7ff fb88 	bl	801cdb8 <__sprint_r>
 801d6a8:	2800      	cmp	r0, #0
 801d6aa:	d1e0      	bne.n	801d66e <_vfiprintf_r+0x852>
 801d6ac:	ab11      	add	r3, sp, #68	@ 0x44
 801d6ae:	e7f4      	b.n	801d69a <_vfiprintf_r+0x87e>
 801d6b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d6b2:	b913      	cbnz	r3, 801d6ba <_vfiprintf_r+0x89e>
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6b8:	e7d9      	b.n	801d66e <_vfiprintf_r+0x852>
 801d6ba:	9800      	ldr	r0, [sp, #0]
 801d6bc:	aa0e      	add	r2, sp, #56	@ 0x38
 801d6be:	4639      	mov	r1, r7
 801d6c0:	f7ff fb7a 	bl	801cdb8 <__sprint_r>
 801d6c4:	2800      	cmp	r0, #0
 801d6c6:	d0f5      	beq.n	801d6b4 <_vfiprintf_r+0x898>
 801d6c8:	e7d1      	b.n	801d66e <_vfiprintf_r+0x852>
 801d6ca:	ea54 0205 	orrs.w	r2, r4, r5
 801d6ce:	f8cd a010 	str.w	sl, [sp, #16]
 801d6d2:	f43f ada6 	beq.w	801d222 <_vfiprintf_r+0x406>
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	f43f aedf 	beq.w	801d49a <_vfiprintf_r+0x67e>
 801d6dc:	2b02      	cmp	r3, #2
 801d6de:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801d6e2:	f43f af28 	beq.w	801d536 <_vfiprintf_r+0x71a>
 801d6e6:	f004 0307 	and.w	r3, r4, #7
 801d6ea:	08e4      	lsrs	r4, r4, #3
 801d6ec:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801d6f0:	08ed      	lsrs	r5, r5, #3
 801d6f2:	3330      	adds	r3, #48	@ 0x30
 801d6f4:	ea54 0105 	orrs.w	r1, r4, r5
 801d6f8:	464a      	mov	r2, r9
 801d6fa:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801d6fe:	d1f2      	bne.n	801d6e6 <_vfiprintf_r+0x8ca>
 801d700:	9904      	ldr	r1, [sp, #16]
 801d702:	07c8      	lsls	r0, r1, #31
 801d704:	d506      	bpl.n	801d714 <_vfiprintf_r+0x8f8>
 801d706:	2b30      	cmp	r3, #48	@ 0x30
 801d708:	d004      	beq.n	801d714 <_vfiprintf_r+0x8f8>
 801d70a:	2330      	movs	r3, #48	@ 0x30
 801d70c:	f809 3c01 	strb.w	r3, [r9, #-1]
 801d710:	f1a2 0902 	sub.w	r9, r2, #2
 801d714:	ab3a      	add	r3, sp, #232	@ 0xe8
 801d716:	eba3 0309 	sub.w	r3, r3, r9
 801d71a:	9c01      	ldr	r4, [sp, #4]
 801d71c:	f8dd a010 	ldr.w	sl, [sp, #16]
 801d720:	9301      	str	r3, [sp, #4]
 801d722:	e5bb      	b.n	801d29c <_vfiprintf_r+0x480>
 801d724:	080209ac 	.word	0x080209ac
 801d728:	0802099c 	.word	0x0802099c

0801d72c <__sbprintf>:
 801d72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d72e:	461f      	mov	r7, r3
 801d730:	898b      	ldrh	r3, [r1, #12]
 801d732:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801d736:	f023 0302 	bic.w	r3, r3, #2
 801d73a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d73e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801d740:	9319      	str	r3, [sp, #100]	@ 0x64
 801d742:	89cb      	ldrh	r3, [r1, #14]
 801d744:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d748:	69cb      	ldr	r3, [r1, #28]
 801d74a:	9307      	str	r3, [sp, #28]
 801d74c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801d74e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d750:	ab1a      	add	r3, sp, #104	@ 0x68
 801d752:	9300      	str	r3, [sp, #0]
 801d754:	9304      	str	r3, [sp, #16]
 801d756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d75a:	4615      	mov	r5, r2
 801d75c:	4606      	mov	r6, r0
 801d75e:	9302      	str	r3, [sp, #8]
 801d760:	9305      	str	r3, [sp, #20]
 801d762:	a816      	add	r0, sp, #88	@ 0x58
 801d764:	2300      	movs	r3, #0
 801d766:	460c      	mov	r4, r1
 801d768:	9306      	str	r3, [sp, #24]
 801d76a:	f7fc fb59 	bl	8019e20 <__retarget_lock_init_recursive>
 801d76e:	462a      	mov	r2, r5
 801d770:	463b      	mov	r3, r7
 801d772:	4669      	mov	r1, sp
 801d774:	4630      	mov	r0, r6
 801d776:	f7ff fb51 	bl	801ce1c <_vfiprintf_r>
 801d77a:	1e05      	subs	r5, r0, #0
 801d77c:	db07      	blt.n	801d78e <__sbprintf+0x62>
 801d77e:	4669      	mov	r1, sp
 801d780:	4630      	mov	r0, r6
 801d782:	f000 f8f1 	bl	801d968 <_fflush_r>
 801d786:	2800      	cmp	r0, #0
 801d788:	bf18      	it	ne
 801d78a:	f04f 35ff 	movne.w	r5, #4294967295
 801d78e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d792:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801d794:	065b      	lsls	r3, r3, #25
 801d796:	bf42      	ittt	mi
 801d798:	89a3      	ldrhmi	r3, [r4, #12]
 801d79a:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801d79e:	81a3      	strhmi	r3, [r4, #12]
 801d7a0:	f7fc fb3f 	bl	8019e22 <__retarget_lock_close_recursive>
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7ac <_fclose_r>:
 801d7ac:	b570      	push	{r4, r5, r6, lr}
 801d7ae:	4605      	mov	r5, r0
 801d7b0:	460c      	mov	r4, r1
 801d7b2:	b1b1      	cbz	r1, 801d7e2 <_fclose_r+0x36>
 801d7b4:	b118      	cbz	r0, 801d7be <_fclose_r+0x12>
 801d7b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d7b8:	b90b      	cbnz	r3, 801d7be <_fclose_r+0x12>
 801d7ba:	f7fc f9cd 	bl	8019b58 <__sinit>
 801d7be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7c0:	07de      	lsls	r6, r3, #31
 801d7c2:	d405      	bmi.n	801d7d0 <_fclose_r+0x24>
 801d7c4:	89a3      	ldrh	r3, [r4, #12]
 801d7c6:	0598      	lsls	r0, r3, #22
 801d7c8:	d402      	bmi.n	801d7d0 <_fclose_r+0x24>
 801d7ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7cc:	f7fc fb2a 	bl	8019e24 <__retarget_lock_acquire_recursive>
 801d7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d7d4:	b943      	cbnz	r3, 801d7e8 <_fclose_r+0x3c>
 801d7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7d8:	07d9      	lsls	r1, r3, #31
 801d7da:	d402      	bmi.n	801d7e2 <_fclose_r+0x36>
 801d7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7de:	f7fc fb22 	bl	8019e26 <__retarget_lock_release_recursive>
 801d7e2:	2600      	movs	r6, #0
 801d7e4:	4630      	mov	r0, r6
 801d7e6:	bd70      	pop	{r4, r5, r6, pc}
 801d7e8:	4621      	mov	r1, r4
 801d7ea:	4628      	mov	r0, r5
 801d7ec:	f000 f834 	bl	801d858 <__sflush_r>
 801d7f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d7f2:	4606      	mov	r6, r0
 801d7f4:	b133      	cbz	r3, 801d804 <_fclose_r+0x58>
 801d7f6:	69e1      	ldr	r1, [r4, #28]
 801d7f8:	4628      	mov	r0, r5
 801d7fa:	4798      	blx	r3
 801d7fc:	2800      	cmp	r0, #0
 801d7fe:	bfb8      	it	lt
 801d800:	f04f 36ff 	movlt.w	r6, #4294967295
 801d804:	89a3      	ldrh	r3, [r4, #12]
 801d806:	061a      	lsls	r2, r3, #24
 801d808:	d503      	bpl.n	801d812 <_fclose_r+0x66>
 801d80a:	6921      	ldr	r1, [r4, #16]
 801d80c:	4628      	mov	r0, r5
 801d80e:	f7fc fb7f 	bl	8019f10 <_free_r>
 801d812:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d814:	b141      	cbz	r1, 801d828 <_fclose_r+0x7c>
 801d816:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801d81a:	4299      	cmp	r1, r3
 801d81c:	d002      	beq.n	801d824 <_fclose_r+0x78>
 801d81e:	4628      	mov	r0, r5
 801d820:	f7fc fb76 	bl	8019f10 <_free_r>
 801d824:	2300      	movs	r3, #0
 801d826:	6323      	str	r3, [r4, #48]	@ 0x30
 801d828:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d82a:	b121      	cbz	r1, 801d836 <_fclose_r+0x8a>
 801d82c:	4628      	mov	r0, r5
 801d82e:	f7fc fb6f 	bl	8019f10 <_free_r>
 801d832:	2300      	movs	r3, #0
 801d834:	6463      	str	r3, [r4, #68]	@ 0x44
 801d836:	f7fc f983 	bl	8019b40 <__sfp_lock_acquire>
 801d83a:	2300      	movs	r3, #0
 801d83c:	81a3      	strh	r3, [r4, #12]
 801d83e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d840:	07db      	lsls	r3, r3, #31
 801d842:	d402      	bmi.n	801d84a <_fclose_r+0x9e>
 801d844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d846:	f7fc faee 	bl	8019e26 <__retarget_lock_release_recursive>
 801d84a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d84c:	f7fc fae9 	bl	8019e22 <__retarget_lock_close_recursive>
 801d850:	f7fc f97c 	bl	8019b4c <__sfp_lock_release>
 801d854:	e7c6      	b.n	801d7e4 <_fclose_r+0x38>
	...

0801d858 <__sflush_r>:
 801d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d85c:	4605      	mov	r5, r0
 801d85e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801d862:	0706      	lsls	r6, r0, #28
 801d864:	460c      	mov	r4, r1
 801d866:	d457      	bmi.n	801d918 <__sflush_r+0xc0>
 801d868:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801d86c:	818b      	strh	r3, [r1, #12]
 801d86e:	684b      	ldr	r3, [r1, #4]
 801d870:	2b00      	cmp	r3, #0
 801d872:	dc02      	bgt.n	801d87a <__sflush_r+0x22>
 801d874:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801d876:	2b00      	cmp	r3, #0
 801d878:	dd4c      	ble.n	801d914 <__sflush_r+0xbc>
 801d87a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d87c:	2e00      	cmp	r6, #0
 801d87e:	d049      	beq.n	801d914 <__sflush_r+0xbc>
 801d880:	2300      	movs	r3, #0
 801d882:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801d886:	682f      	ldr	r7, [r5, #0]
 801d888:	69e1      	ldr	r1, [r4, #28]
 801d88a:	602b      	str	r3, [r5, #0]
 801d88c:	d034      	beq.n	801d8f8 <__sflush_r+0xa0>
 801d88e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801d890:	89a3      	ldrh	r3, [r4, #12]
 801d892:	0759      	lsls	r1, r3, #29
 801d894:	d505      	bpl.n	801d8a2 <__sflush_r+0x4a>
 801d896:	6863      	ldr	r3, [r4, #4]
 801d898:	1ad2      	subs	r2, r2, r3
 801d89a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d89c:	b10b      	cbz	r3, 801d8a2 <__sflush_r+0x4a>
 801d89e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d8a0:	1ad2      	subs	r2, r2, r3
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d8a6:	69e1      	ldr	r1, [r4, #28]
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	47b0      	blx	r6
 801d8ac:	1c43      	adds	r3, r0, #1
 801d8ae:	d106      	bne.n	801d8be <__sflush_r+0x66>
 801d8b0:	682a      	ldr	r2, [r5, #0]
 801d8b2:	2a1d      	cmp	r2, #29
 801d8b4:	d848      	bhi.n	801d948 <__sflush_r+0xf0>
 801d8b6:	4b2b      	ldr	r3, [pc, #172]	@ (801d964 <__sflush_r+0x10c>)
 801d8b8:	4113      	asrs	r3, r2
 801d8ba:	07de      	lsls	r6, r3, #31
 801d8bc:	d444      	bmi.n	801d948 <__sflush_r+0xf0>
 801d8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d8c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801d8c6:	81a2      	strh	r2, [r4, #12]
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	6062      	str	r2, [r4, #4]
 801d8cc:	04d9      	lsls	r1, r3, #19
 801d8ce:	6922      	ldr	r2, [r4, #16]
 801d8d0:	6022      	str	r2, [r4, #0]
 801d8d2:	d504      	bpl.n	801d8de <__sflush_r+0x86>
 801d8d4:	1c42      	adds	r2, r0, #1
 801d8d6:	d101      	bne.n	801d8dc <__sflush_r+0x84>
 801d8d8:	682b      	ldr	r3, [r5, #0]
 801d8da:	b903      	cbnz	r3, 801d8de <__sflush_r+0x86>
 801d8dc:	6520      	str	r0, [r4, #80]	@ 0x50
 801d8de:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d8e0:	602f      	str	r7, [r5, #0]
 801d8e2:	b1b9      	cbz	r1, 801d914 <__sflush_r+0xbc>
 801d8e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801d8e8:	4299      	cmp	r1, r3
 801d8ea:	d002      	beq.n	801d8f2 <__sflush_r+0x9a>
 801d8ec:	4628      	mov	r0, r5
 801d8ee:	f7fc fb0f 	bl	8019f10 <_free_r>
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	6323      	str	r3, [r4, #48]	@ 0x30
 801d8f6:	e00d      	b.n	801d914 <__sflush_r+0xbc>
 801d8f8:	2301      	movs	r3, #1
 801d8fa:	4628      	mov	r0, r5
 801d8fc:	47b0      	blx	r6
 801d8fe:	4602      	mov	r2, r0
 801d900:	1c50      	adds	r0, r2, #1
 801d902:	d1c5      	bne.n	801d890 <__sflush_r+0x38>
 801d904:	682b      	ldr	r3, [r5, #0]
 801d906:	2b00      	cmp	r3, #0
 801d908:	d0c2      	beq.n	801d890 <__sflush_r+0x38>
 801d90a:	2b1d      	cmp	r3, #29
 801d90c:	d001      	beq.n	801d912 <__sflush_r+0xba>
 801d90e:	2b16      	cmp	r3, #22
 801d910:	d11a      	bne.n	801d948 <__sflush_r+0xf0>
 801d912:	602f      	str	r7, [r5, #0]
 801d914:	2000      	movs	r0, #0
 801d916:	e01e      	b.n	801d956 <__sflush_r+0xfe>
 801d918:	690f      	ldr	r7, [r1, #16]
 801d91a:	2f00      	cmp	r7, #0
 801d91c:	d0fa      	beq.n	801d914 <__sflush_r+0xbc>
 801d91e:	0783      	lsls	r3, r0, #30
 801d920:	680e      	ldr	r6, [r1, #0]
 801d922:	bf08      	it	eq
 801d924:	694b      	ldreq	r3, [r1, #20]
 801d926:	600f      	str	r7, [r1, #0]
 801d928:	bf18      	it	ne
 801d92a:	2300      	movne	r3, #0
 801d92c:	eba6 0807 	sub.w	r8, r6, r7
 801d930:	608b      	str	r3, [r1, #8]
 801d932:	f1b8 0f00 	cmp.w	r8, #0
 801d936:	dded      	ble.n	801d914 <__sflush_r+0xbc>
 801d938:	69e1      	ldr	r1, [r4, #28]
 801d93a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801d93c:	4643      	mov	r3, r8
 801d93e:	463a      	mov	r2, r7
 801d940:	4628      	mov	r0, r5
 801d942:	47b0      	blx	r6
 801d944:	2800      	cmp	r0, #0
 801d946:	dc08      	bgt.n	801d95a <__sflush_r+0x102>
 801d948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d950:	81a3      	strh	r3, [r4, #12]
 801d952:	f04f 30ff 	mov.w	r0, #4294967295
 801d956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d95a:	4407      	add	r7, r0
 801d95c:	eba8 0800 	sub.w	r8, r8, r0
 801d960:	e7e7      	b.n	801d932 <__sflush_r+0xda>
 801d962:	bf00      	nop
 801d964:	dfbffffe 	.word	0xdfbffffe

0801d968 <_fflush_r>:
 801d968:	b538      	push	{r3, r4, r5, lr}
 801d96a:	460c      	mov	r4, r1
 801d96c:	4605      	mov	r5, r0
 801d96e:	b118      	cbz	r0, 801d978 <_fflush_r+0x10>
 801d970:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d972:	b90b      	cbnz	r3, 801d978 <_fflush_r+0x10>
 801d974:	f7fc f8f0 	bl	8019b58 <__sinit>
 801d978:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801d97c:	b1b8      	cbz	r0, 801d9ae <_fflush_r+0x46>
 801d97e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d980:	07db      	lsls	r3, r3, #31
 801d982:	d404      	bmi.n	801d98e <_fflush_r+0x26>
 801d984:	0581      	lsls	r1, r0, #22
 801d986:	d402      	bmi.n	801d98e <_fflush_r+0x26>
 801d988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d98a:	f7fc fa4b 	bl	8019e24 <__retarget_lock_acquire_recursive>
 801d98e:	4628      	mov	r0, r5
 801d990:	4621      	mov	r1, r4
 801d992:	f7ff ff61 	bl	801d858 <__sflush_r>
 801d996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d998:	07da      	lsls	r2, r3, #31
 801d99a:	4605      	mov	r5, r0
 801d99c:	d405      	bmi.n	801d9aa <_fflush_r+0x42>
 801d99e:	89a3      	ldrh	r3, [r4, #12]
 801d9a0:	059b      	lsls	r3, r3, #22
 801d9a2:	d402      	bmi.n	801d9aa <_fflush_r+0x42>
 801d9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d9a6:	f7fc fa3e 	bl	8019e26 <__retarget_lock_release_recursive>
 801d9aa:	4628      	mov	r0, r5
 801d9ac:	bd38      	pop	{r3, r4, r5, pc}
 801d9ae:	4605      	mov	r5, r0
 801d9b0:	e7fb      	b.n	801d9aa <_fflush_r+0x42>
	...

0801d9b4 <__sfvwrite_r>:
 801d9b4:	6893      	ldr	r3, [r2, #8]
 801d9b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9ba:	4606      	mov	r6, r0
 801d9bc:	460c      	mov	r4, r1
 801d9be:	4691      	mov	r9, r2
 801d9c0:	b91b      	cbnz	r3, 801d9ca <__sfvwrite_r+0x16>
 801d9c2:	2000      	movs	r0, #0
 801d9c4:	b003      	add	sp, #12
 801d9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ca:	898b      	ldrh	r3, [r1, #12]
 801d9cc:	0718      	lsls	r0, r3, #28
 801d9ce:	d550      	bpl.n	801da72 <__sfvwrite_r+0xbe>
 801d9d0:	690b      	ldr	r3, [r1, #16]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d04d      	beq.n	801da72 <__sfvwrite_r+0xbe>
 801d9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9da:	f8d9 8000 	ldr.w	r8, [r9]
 801d9de:	f013 0702 	ands.w	r7, r3, #2
 801d9e2:	d16b      	bne.n	801dabc <__sfvwrite_r+0x108>
 801d9e4:	f013 0301 	ands.w	r3, r3, #1
 801d9e8:	f000 809c 	beq.w	801db24 <__sfvwrite_r+0x170>
 801d9ec:	4638      	mov	r0, r7
 801d9ee:	46ba      	mov	sl, r7
 801d9f0:	46bb      	mov	fp, r7
 801d9f2:	f1bb 0f00 	cmp.w	fp, #0
 801d9f6:	f000 8103 	beq.w	801dc00 <__sfvwrite_r+0x24c>
 801d9fa:	b950      	cbnz	r0, 801da12 <__sfvwrite_r+0x5e>
 801d9fc:	465a      	mov	r2, fp
 801d9fe:	210a      	movs	r1, #10
 801da00:	4650      	mov	r0, sl
 801da02:	f7e2 fbed 	bl	80001e0 <memchr>
 801da06:	2800      	cmp	r0, #0
 801da08:	f000 8100 	beq.w	801dc0c <__sfvwrite_r+0x258>
 801da0c:	3001      	adds	r0, #1
 801da0e:	eba0 070a 	sub.w	r7, r0, sl
 801da12:	6820      	ldr	r0, [r4, #0]
 801da14:	6921      	ldr	r1, [r4, #16]
 801da16:	68a5      	ldr	r5, [r4, #8]
 801da18:	6963      	ldr	r3, [r4, #20]
 801da1a:	455f      	cmp	r7, fp
 801da1c:	463a      	mov	r2, r7
 801da1e:	bf28      	it	cs
 801da20:	465a      	movcs	r2, fp
 801da22:	4288      	cmp	r0, r1
 801da24:	f240 80f5 	bls.w	801dc12 <__sfvwrite_r+0x25e>
 801da28:	441d      	add	r5, r3
 801da2a:	42aa      	cmp	r2, r5
 801da2c:	f340 80f1 	ble.w	801dc12 <__sfvwrite_r+0x25e>
 801da30:	4651      	mov	r1, sl
 801da32:	462a      	mov	r2, r5
 801da34:	f000 f9ca 	bl	801ddcc <memmove>
 801da38:	6823      	ldr	r3, [r4, #0]
 801da3a:	442b      	add	r3, r5
 801da3c:	6023      	str	r3, [r4, #0]
 801da3e:	4621      	mov	r1, r4
 801da40:	4630      	mov	r0, r6
 801da42:	f7ff ff91 	bl	801d968 <_fflush_r>
 801da46:	2800      	cmp	r0, #0
 801da48:	d167      	bne.n	801db1a <__sfvwrite_r+0x166>
 801da4a:	1b7f      	subs	r7, r7, r5
 801da4c:	f040 80f9 	bne.w	801dc42 <__sfvwrite_r+0x28e>
 801da50:	4621      	mov	r1, r4
 801da52:	4630      	mov	r0, r6
 801da54:	f7ff ff88 	bl	801d968 <_fflush_r>
 801da58:	2800      	cmp	r0, #0
 801da5a:	d15e      	bne.n	801db1a <__sfvwrite_r+0x166>
 801da5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801da60:	1b5b      	subs	r3, r3, r5
 801da62:	44aa      	add	sl, r5
 801da64:	ebab 0b05 	sub.w	fp, fp, r5
 801da68:	f8c9 3008 	str.w	r3, [r9, #8]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d1c0      	bne.n	801d9f2 <__sfvwrite_r+0x3e>
 801da70:	e7a7      	b.n	801d9c2 <__sfvwrite_r+0xe>
 801da72:	4621      	mov	r1, r4
 801da74:	4630      	mov	r0, r6
 801da76:	f000 f8e9 	bl	801dc4c <__swsetup_r>
 801da7a:	2800      	cmp	r0, #0
 801da7c:	d0ab      	beq.n	801d9d6 <__sfvwrite_r+0x22>
 801da7e:	f04f 30ff 	mov.w	r0, #4294967295
 801da82:	e79f      	b.n	801d9c4 <__sfvwrite_r+0x10>
 801da84:	e9d8 a500 	ldrd	sl, r5, [r8]
 801da88:	f108 0808 	add.w	r8, r8, #8
 801da8c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801da90:	69e1      	ldr	r1, [r4, #28]
 801da92:	2d00      	cmp	r5, #0
 801da94:	d0f6      	beq.n	801da84 <__sfvwrite_r+0xd0>
 801da96:	42bd      	cmp	r5, r7
 801da98:	462b      	mov	r3, r5
 801da9a:	4652      	mov	r2, sl
 801da9c:	bf28      	it	cs
 801da9e:	463b      	movcs	r3, r7
 801daa0:	4630      	mov	r0, r6
 801daa2:	47d8      	blx	fp
 801daa4:	2800      	cmp	r0, #0
 801daa6:	dd38      	ble.n	801db1a <__sfvwrite_r+0x166>
 801daa8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801daac:	1a1b      	subs	r3, r3, r0
 801daae:	4482      	add	sl, r0
 801dab0:	1a2d      	subs	r5, r5, r0
 801dab2:	f8c9 3008 	str.w	r3, [r9, #8]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d1e8      	bne.n	801da8c <__sfvwrite_r+0xd8>
 801daba:	e782      	b.n	801d9c2 <__sfvwrite_r+0xe>
 801dabc:	f04f 0a00 	mov.w	sl, #0
 801dac0:	4f61      	ldr	r7, [pc, #388]	@ (801dc48 <__sfvwrite_r+0x294>)
 801dac2:	4655      	mov	r5, sl
 801dac4:	e7e2      	b.n	801da8c <__sfvwrite_r+0xd8>
 801dac6:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801daca:	f108 0808 	add.w	r8, r8, #8
 801dace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dad2:	6820      	ldr	r0, [r4, #0]
 801dad4:	68a2      	ldr	r2, [r4, #8]
 801dad6:	f1ba 0f00 	cmp.w	sl, #0
 801dada:	d0f4      	beq.n	801dac6 <__sfvwrite_r+0x112>
 801dadc:	0599      	lsls	r1, r3, #22
 801dade:	d563      	bpl.n	801dba8 <__sfvwrite_r+0x1f4>
 801dae0:	4552      	cmp	r2, sl
 801dae2:	d836      	bhi.n	801db52 <__sfvwrite_r+0x19e>
 801dae4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 801dae8:	d033      	beq.n	801db52 <__sfvwrite_r+0x19e>
 801daea:	6921      	ldr	r1, [r4, #16]
 801daec:	6965      	ldr	r5, [r4, #20]
 801daee:	eba0 0b01 	sub.w	fp, r0, r1
 801daf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801daf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dafa:	f10b 0201 	add.w	r2, fp, #1
 801dafe:	106d      	asrs	r5, r5, #1
 801db00:	4452      	add	r2, sl
 801db02:	4295      	cmp	r5, r2
 801db04:	bf38      	it	cc
 801db06:	4615      	movcc	r5, r2
 801db08:	055b      	lsls	r3, r3, #21
 801db0a:	d53d      	bpl.n	801db88 <__sfvwrite_r+0x1d4>
 801db0c:	4629      	mov	r1, r5
 801db0e:	4630      	mov	r0, r6
 801db10:	f7fc fabe 	bl	801a090 <_malloc_r>
 801db14:	b948      	cbnz	r0, 801db2a <__sfvwrite_r+0x176>
 801db16:	230c      	movs	r3, #12
 801db18:	6033      	str	r3, [r6, #0]
 801db1a:	89a3      	ldrh	r3, [r4, #12]
 801db1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db20:	81a3      	strh	r3, [r4, #12]
 801db22:	e7ac      	b.n	801da7e <__sfvwrite_r+0xca>
 801db24:	461f      	mov	r7, r3
 801db26:	469a      	mov	sl, r3
 801db28:	e7d1      	b.n	801dace <__sfvwrite_r+0x11a>
 801db2a:	465a      	mov	r2, fp
 801db2c:	6921      	ldr	r1, [r4, #16]
 801db2e:	9001      	str	r0, [sp, #4]
 801db30:	f7fc f97a 	bl	8019e28 <memcpy>
 801db34:	89a2      	ldrh	r2, [r4, #12]
 801db36:	9b01      	ldr	r3, [sp, #4]
 801db38:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801db3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801db40:	81a2      	strh	r2, [r4, #12]
 801db42:	6123      	str	r3, [r4, #16]
 801db44:	6165      	str	r5, [r4, #20]
 801db46:	445b      	add	r3, fp
 801db48:	eba5 050b 	sub.w	r5, r5, fp
 801db4c:	6023      	str	r3, [r4, #0]
 801db4e:	4652      	mov	r2, sl
 801db50:	60a5      	str	r5, [r4, #8]
 801db52:	4552      	cmp	r2, sl
 801db54:	bf28      	it	cs
 801db56:	4652      	movcs	r2, sl
 801db58:	6820      	ldr	r0, [r4, #0]
 801db5a:	9201      	str	r2, [sp, #4]
 801db5c:	4639      	mov	r1, r7
 801db5e:	f000 f935 	bl	801ddcc <memmove>
 801db62:	68a3      	ldr	r3, [r4, #8]
 801db64:	9a01      	ldr	r2, [sp, #4]
 801db66:	1a9b      	subs	r3, r3, r2
 801db68:	60a3      	str	r3, [r4, #8]
 801db6a:	6823      	ldr	r3, [r4, #0]
 801db6c:	4413      	add	r3, r2
 801db6e:	4655      	mov	r5, sl
 801db70:	6023      	str	r3, [r4, #0]
 801db72:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801db76:	1b5b      	subs	r3, r3, r5
 801db78:	442f      	add	r7, r5
 801db7a:	ebaa 0a05 	sub.w	sl, sl, r5
 801db7e:	f8c9 3008 	str.w	r3, [r9, #8]
 801db82:	2b00      	cmp	r3, #0
 801db84:	d1a3      	bne.n	801dace <__sfvwrite_r+0x11a>
 801db86:	e71c      	b.n	801d9c2 <__sfvwrite_r+0xe>
 801db88:	462a      	mov	r2, r5
 801db8a:	4630      	mov	r0, r6
 801db8c:	f001 fb76 	bl	801f27c <_realloc_r>
 801db90:	4603      	mov	r3, r0
 801db92:	2800      	cmp	r0, #0
 801db94:	d1d5      	bne.n	801db42 <__sfvwrite_r+0x18e>
 801db96:	6921      	ldr	r1, [r4, #16]
 801db98:	4630      	mov	r0, r6
 801db9a:	f7fc f9b9 	bl	8019f10 <_free_r>
 801db9e:	89a3      	ldrh	r3, [r4, #12]
 801dba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801dba4:	81a3      	strh	r3, [r4, #12]
 801dba6:	e7b6      	b.n	801db16 <__sfvwrite_r+0x162>
 801dba8:	6923      	ldr	r3, [r4, #16]
 801dbaa:	4283      	cmp	r3, r0
 801dbac:	d302      	bcc.n	801dbb4 <__sfvwrite_r+0x200>
 801dbae:	6961      	ldr	r1, [r4, #20]
 801dbb0:	4551      	cmp	r1, sl
 801dbb2:	d915      	bls.n	801dbe0 <__sfvwrite_r+0x22c>
 801dbb4:	4552      	cmp	r2, sl
 801dbb6:	bf28      	it	cs
 801dbb8:	4652      	movcs	r2, sl
 801dbba:	4639      	mov	r1, r7
 801dbbc:	4615      	mov	r5, r2
 801dbbe:	f000 f905 	bl	801ddcc <memmove>
 801dbc2:	68a3      	ldr	r3, [r4, #8]
 801dbc4:	6822      	ldr	r2, [r4, #0]
 801dbc6:	1b5b      	subs	r3, r3, r5
 801dbc8:	442a      	add	r2, r5
 801dbca:	60a3      	str	r3, [r4, #8]
 801dbcc:	6022      	str	r2, [r4, #0]
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d1cf      	bne.n	801db72 <__sfvwrite_r+0x1be>
 801dbd2:	4621      	mov	r1, r4
 801dbd4:	4630      	mov	r0, r6
 801dbd6:	f7ff fec7 	bl	801d968 <_fflush_r>
 801dbda:	2800      	cmp	r0, #0
 801dbdc:	d0c9      	beq.n	801db72 <__sfvwrite_r+0x1be>
 801dbde:	e79c      	b.n	801db1a <__sfvwrite_r+0x166>
 801dbe0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801dbe4:	4553      	cmp	r3, sl
 801dbe6:	bf28      	it	cs
 801dbe8:	4653      	movcs	r3, sl
 801dbea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801dbec:	fb93 f3f1 	sdiv	r3, r3, r1
 801dbf0:	463a      	mov	r2, r7
 801dbf2:	434b      	muls	r3, r1
 801dbf4:	4630      	mov	r0, r6
 801dbf6:	69e1      	ldr	r1, [r4, #28]
 801dbf8:	47a8      	blx	r5
 801dbfa:	1e05      	subs	r5, r0, #0
 801dbfc:	dcb9      	bgt.n	801db72 <__sfvwrite_r+0x1be>
 801dbfe:	e78c      	b.n	801db1a <__sfvwrite_r+0x166>
 801dc00:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801dc04:	2000      	movs	r0, #0
 801dc06:	f108 0808 	add.w	r8, r8, #8
 801dc0a:	e6f2      	b.n	801d9f2 <__sfvwrite_r+0x3e>
 801dc0c:	f10b 0701 	add.w	r7, fp, #1
 801dc10:	e6ff      	b.n	801da12 <__sfvwrite_r+0x5e>
 801dc12:	4293      	cmp	r3, r2
 801dc14:	dc08      	bgt.n	801dc28 <__sfvwrite_r+0x274>
 801dc16:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801dc18:	69e1      	ldr	r1, [r4, #28]
 801dc1a:	4652      	mov	r2, sl
 801dc1c:	4630      	mov	r0, r6
 801dc1e:	47a8      	blx	r5
 801dc20:	1e05      	subs	r5, r0, #0
 801dc22:	f73f af12 	bgt.w	801da4a <__sfvwrite_r+0x96>
 801dc26:	e778      	b.n	801db1a <__sfvwrite_r+0x166>
 801dc28:	4651      	mov	r1, sl
 801dc2a:	9201      	str	r2, [sp, #4]
 801dc2c:	f000 f8ce 	bl	801ddcc <memmove>
 801dc30:	9a01      	ldr	r2, [sp, #4]
 801dc32:	68a3      	ldr	r3, [r4, #8]
 801dc34:	1a9b      	subs	r3, r3, r2
 801dc36:	60a3      	str	r3, [r4, #8]
 801dc38:	6823      	ldr	r3, [r4, #0]
 801dc3a:	4413      	add	r3, r2
 801dc3c:	6023      	str	r3, [r4, #0]
 801dc3e:	4615      	mov	r5, r2
 801dc40:	e703      	b.n	801da4a <__sfvwrite_r+0x96>
 801dc42:	2001      	movs	r0, #1
 801dc44:	e70a      	b.n	801da5c <__sfvwrite_r+0xa8>
 801dc46:	bf00      	nop
 801dc48:	7ffffc00 	.word	0x7ffffc00

0801dc4c <__swsetup_r>:
 801dc4c:	b538      	push	{r3, r4, r5, lr}
 801dc4e:	4b29      	ldr	r3, [pc, #164]	@ (801dcf4 <__swsetup_r+0xa8>)
 801dc50:	4605      	mov	r5, r0
 801dc52:	6818      	ldr	r0, [r3, #0]
 801dc54:	460c      	mov	r4, r1
 801dc56:	b118      	cbz	r0, 801dc60 <__swsetup_r+0x14>
 801dc58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801dc5a:	b90b      	cbnz	r3, 801dc60 <__swsetup_r+0x14>
 801dc5c:	f7fb ff7c 	bl	8019b58 <__sinit>
 801dc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc64:	0719      	lsls	r1, r3, #28
 801dc66:	d422      	bmi.n	801dcae <__swsetup_r+0x62>
 801dc68:	06da      	lsls	r2, r3, #27
 801dc6a:	d407      	bmi.n	801dc7c <__swsetup_r+0x30>
 801dc6c:	2209      	movs	r2, #9
 801dc6e:	602a      	str	r2, [r5, #0]
 801dc70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc74:	81a3      	strh	r3, [r4, #12]
 801dc76:	f04f 30ff 	mov.w	r0, #4294967295
 801dc7a:	e033      	b.n	801dce4 <__swsetup_r+0x98>
 801dc7c:	0758      	lsls	r0, r3, #29
 801dc7e:	d512      	bpl.n	801dca6 <__swsetup_r+0x5a>
 801dc80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dc82:	b141      	cbz	r1, 801dc96 <__swsetup_r+0x4a>
 801dc84:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801dc88:	4299      	cmp	r1, r3
 801dc8a:	d002      	beq.n	801dc92 <__swsetup_r+0x46>
 801dc8c:	4628      	mov	r0, r5
 801dc8e:	f7fc f93f 	bl	8019f10 <_free_r>
 801dc92:	2300      	movs	r3, #0
 801dc94:	6323      	str	r3, [r4, #48]	@ 0x30
 801dc96:	89a3      	ldrh	r3, [r4, #12]
 801dc98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dc9c:	81a3      	strh	r3, [r4, #12]
 801dc9e:	2300      	movs	r3, #0
 801dca0:	6063      	str	r3, [r4, #4]
 801dca2:	6923      	ldr	r3, [r4, #16]
 801dca4:	6023      	str	r3, [r4, #0]
 801dca6:	89a3      	ldrh	r3, [r4, #12]
 801dca8:	f043 0308 	orr.w	r3, r3, #8
 801dcac:	81a3      	strh	r3, [r4, #12]
 801dcae:	6923      	ldr	r3, [r4, #16]
 801dcb0:	b94b      	cbnz	r3, 801dcc6 <__swsetup_r+0x7a>
 801dcb2:	89a3      	ldrh	r3, [r4, #12]
 801dcb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dcb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dcbc:	d003      	beq.n	801dcc6 <__swsetup_r+0x7a>
 801dcbe:	4621      	mov	r1, r4
 801dcc0:	4628      	mov	r0, r5
 801dcc2:	f001 fd4c 	bl	801f75e <__smakebuf_r>
 801dcc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcca:	f013 0201 	ands.w	r2, r3, #1
 801dcce:	d00a      	beq.n	801dce6 <__swsetup_r+0x9a>
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	60a2      	str	r2, [r4, #8]
 801dcd4:	6962      	ldr	r2, [r4, #20]
 801dcd6:	4252      	negs	r2, r2
 801dcd8:	61a2      	str	r2, [r4, #24]
 801dcda:	6922      	ldr	r2, [r4, #16]
 801dcdc:	b942      	cbnz	r2, 801dcf0 <__swsetup_r+0xa4>
 801dcde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dce2:	d1c5      	bne.n	801dc70 <__swsetup_r+0x24>
 801dce4:	bd38      	pop	{r3, r4, r5, pc}
 801dce6:	0799      	lsls	r1, r3, #30
 801dce8:	bf58      	it	pl
 801dcea:	6962      	ldrpl	r2, [r4, #20]
 801dcec:	60a2      	str	r2, [r4, #8]
 801dcee:	e7f4      	b.n	801dcda <__swsetup_r+0x8e>
 801dcf0:	2000      	movs	r0, #0
 801dcf2:	e7f7      	b.n	801dce4 <__swsetup_r+0x98>
 801dcf4:	20000114 	.word	0x20000114

0801dcf8 <__fputwc>:
 801dcf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dcfc:	4680      	mov	r8, r0
 801dcfe:	460f      	mov	r7, r1
 801dd00:	4614      	mov	r4, r2
 801dd02:	f000 f891 	bl	801de28 <__locale_mb_cur_max>
 801dd06:	2801      	cmp	r0, #1
 801dd08:	4605      	mov	r5, r0
 801dd0a:	d11b      	bne.n	801dd44 <__fputwc+0x4c>
 801dd0c:	1e7b      	subs	r3, r7, #1
 801dd0e:	2bfe      	cmp	r3, #254	@ 0xfe
 801dd10:	d818      	bhi.n	801dd44 <__fputwc+0x4c>
 801dd12:	f88d 7004 	strb.w	r7, [sp, #4]
 801dd16:	2600      	movs	r6, #0
 801dd18:	f10d 0904 	add.w	r9, sp, #4
 801dd1c:	42ae      	cmp	r6, r5
 801dd1e:	d021      	beq.n	801dd64 <__fputwc+0x6c>
 801dd20:	68a3      	ldr	r3, [r4, #8]
 801dd22:	f816 1009 	ldrb.w	r1, [r6, r9]
 801dd26:	3b01      	subs	r3, #1
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	60a3      	str	r3, [r4, #8]
 801dd2c:	da04      	bge.n	801dd38 <__fputwc+0x40>
 801dd2e:	69a2      	ldr	r2, [r4, #24]
 801dd30:	4293      	cmp	r3, r2
 801dd32:	db1b      	blt.n	801dd6c <__fputwc+0x74>
 801dd34:	290a      	cmp	r1, #10
 801dd36:	d019      	beq.n	801dd6c <__fputwc+0x74>
 801dd38:	6823      	ldr	r3, [r4, #0]
 801dd3a:	1c5a      	adds	r2, r3, #1
 801dd3c:	6022      	str	r2, [r4, #0]
 801dd3e:	7019      	strb	r1, [r3, #0]
 801dd40:	3601      	adds	r6, #1
 801dd42:	e7eb      	b.n	801dd1c <__fputwc+0x24>
 801dd44:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 801dd48:	463a      	mov	r2, r7
 801dd4a:	a901      	add	r1, sp, #4
 801dd4c:	4640      	mov	r0, r8
 801dd4e:	f001 fc4b 	bl	801f5e8 <_wcrtomb_r>
 801dd52:	1c43      	adds	r3, r0, #1
 801dd54:	4605      	mov	r5, r0
 801dd56:	d1de      	bne.n	801dd16 <__fputwc+0x1e>
 801dd58:	89a3      	ldrh	r3, [r4, #12]
 801dd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd5e:	81a3      	strh	r3, [r4, #12]
 801dd60:	f04f 37ff 	mov.w	r7, #4294967295
 801dd64:	4638      	mov	r0, r7
 801dd66:	b003      	add	sp, #12
 801dd68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd6c:	4622      	mov	r2, r4
 801dd6e:	4640      	mov	r0, r8
 801dd70:	f001 fd31 	bl	801f7d6 <__swbuf_r>
 801dd74:	3001      	adds	r0, #1
 801dd76:	d1e3      	bne.n	801dd40 <__fputwc+0x48>
 801dd78:	e7f2      	b.n	801dd60 <__fputwc+0x68>

0801dd7a <_fputwc_r>:
 801dd7a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 801dd7c:	07db      	lsls	r3, r3, #31
 801dd7e:	b570      	push	{r4, r5, r6, lr}
 801dd80:	4605      	mov	r5, r0
 801dd82:	460e      	mov	r6, r1
 801dd84:	4614      	mov	r4, r2
 801dd86:	d405      	bmi.n	801dd94 <_fputwc_r+0x1a>
 801dd88:	8993      	ldrh	r3, [r2, #12]
 801dd8a:	0598      	lsls	r0, r3, #22
 801dd8c:	d402      	bmi.n	801dd94 <_fputwc_r+0x1a>
 801dd8e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 801dd90:	f7fc f848 	bl	8019e24 <__retarget_lock_acquire_recursive>
 801dd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd98:	0499      	lsls	r1, r3, #18
 801dd9a:	d406      	bmi.n	801ddaa <_fputwc_r+0x30>
 801dd9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801dda0:	81a3      	strh	r3, [r4, #12]
 801dda2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dda4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801dda8:	6663      	str	r3, [r4, #100]	@ 0x64
 801ddaa:	4622      	mov	r2, r4
 801ddac:	4628      	mov	r0, r5
 801ddae:	4631      	mov	r1, r6
 801ddb0:	f7ff ffa2 	bl	801dcf8 <__fputwc>
 801ddb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddb6:	07da      	lsls	r2, r3, #31
 801ddb8:	4605      	mov	r5, r0
 801ddba:	d405      	bmi.n	801ddc8 <_fputwc_r+0x4e>
 801ddbc:	89a3      	ldrh	r3, [r4, #12]
 801ddbe:	059b      	lsls	r3, r3, #22
 801ddc0:	d402      	bmi.n	801ddc8 <_fputwc_r+0x4e>
 801ddc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddc4:	f7fc f82f 	bl	8019e26 <__retarget_lock_release_recursive>
 801ddc8:	4628      	mov	r0, r5
 801ddca:	bd70      	pop	{r4, r5, r6, pc}

0801ddcc <memmove>:
 801ddcc:	4288      	cmp	r0, r1
 801ddce:	b510      	push	{r4, lr}
 801ddd0:	eb01 0402 	add.w	r4, r1, r2
 801ddd4:	d902      	bls.n	801dddc <memmove+0x10>
 801ddd6:	4284      	cmp	r4, r0
 801ddd8:	4623      	mov	r3, r4
 801ddda:	d807      	bhi.n	801ddec <memmove+0x20>
 801dddc:	1e43      	subs	r3, r0, #1
 801ddde:	42a1      	cmp	r1, r4
 801dde0:	d008      	beq.n	801ddf4 <memmove+0x28>
 801dde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dde6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ddea:	e7f8      	b.n	801ddde <memmove+0x12>
 801ddec:	4402      	add	r2, r0
 801ddee:	4601      	mov	r1, r0
 801ddf0:	428a      	cmp	r2, r1
 801ddf2:	d100      	bne.n	801ddf6 <memmove+0x2a>
 801ddf4:	bd10      	pop	{r4, pc}
 801ddf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ddfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ddfe:	e7f7      	b.n	801ddf0 <memmove+0x24>

0801de00 <strncpy>:
 801de00:	b510      	push	{r4, lr}
 801de02:	3901      	subs	r1, #1
 801de04:	4603      	mov	r3, r0
 801de06:	b132      	cbz	r2, 801de16 <strncpy+0x16>
 801de08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801de0c:	f803 4b01 	strb.w	r4, [r3], #1
 801de10:	3a01      	subs	r2, #1
 801de12:	2c00      	cmp	r4, #0
 801de14:	d1f7      	bne.n	801de06 <strncpy+0x6>
 801de16:	441a      	add	r2, r3
 801de18:	2100      	movs	r1, #0
 801de1a:	4293      	cmp	r3, r2
 801de1c:	d100      	bne.n	801de20 <strncpy+0x20>
 801de1e:	bd10      	pop	{r4, pc}
 801de20:	f803 1b01 	strb.w	r1, [r3], #1
 801de24:	e7f9      	b.n	801de1a <strncpy+0x1a>
	...

0801de28 <__locale_mb_cur_max>:
 801de28:	4b01      	ldr	r3, [pc, #4]	@ (801de30 <__locale_mb_cur_max+0x8>)
 801de2a:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801de2e:	4770      	bx	lr
 801de30:	2000064c 	.word	0x2000064c

0801de34 <_localeconv_r>:
 801de34:	4800      	ldr	r0, [pc, #0]	@ (801de38 <_localeconv_r+0x4>)
 801de36:	4770      	bx	lr
 801de38:	2000073c 	.word	0x2000073c

0801de3c <_sbrk_r>:
 801de3c:	b538      	push	{r3, r4, r5, lr}
 801de3e:	4d06      	ldr	r5, [pc, #24]	@ (801de58 <_sbrk_r+0x1c>)
 801de40:	2300      	movs	r3, #0
 801de42:	4604      	mov	r4, r0
 801de44:	4608      	mov	r0, r1
 801de46:	602b      	str	r3, [r5, #0]
 801de48:	f7e6 f842 	bl	8003ed0 <_sbrk>
 801de4c:	1c43      	adds	r3, r0, #1
 801de4e:	d102      	bne.n	801de56 <_sbrk_r+0x1a>
 801de50:	682b      	ldr	r3, [r5, #0]
 801de52:	b103      	cbz	r3, 801de56 <_sbrk_r+0x1a>
 801de54:	6023      	str	r3, [r4, #0]
 801de56:	bd38      	pop	{r3, r4, r5, pc}
 801de58:	2000cc30 	.word	0x2000cc30

0801de5c <__libc_fini_array>:
 801de5c:	b538      	push	{r3, r4, r5, lr}
 801de5e:	4d07      	ldr	r5, [pc, #28]	@ (801de7c <__libc_fini_array+0x20>)
 801de60:	4c07      	ldr	r4, [pc, #28]	@ (801de80 <__libc_fini_array+0x24>)
 801de62:	1b64      	subs	r4, r4, r5
 801de64:	10a4      	asrs	r4, r4, #2
 801de66:	b91c      	cbnz	r4, 801de70 <__libc_fini_array+0x14>
 801de68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de6c:	f002 b946 	b.w	80200fc <_fini>
 801de70:	3c01      	subs	r4, #1
 801de72:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801de76:	4798      	blx	r3
 801de78:	e7f5      	b.n	801de66 <__libc_fini_array+0xa>
 801de7a:	bf00      	nop
 801de7c:	08020d58 	.word	0x08020d58
 801de80:	08020d5c 	.word	0x08020d5c

0801de84 <sysconf>:
 801de84:	2808      	cmp	r0, #8
 801de86:	b508      	push	{r3, lr}
 801de88:	d006      	beq.n	801de98 <sysconf+0x14>
 801de8a:	f7fb ff9f 	bl	8019dcc <__errno>
 801de8e:	2316      	movs	r3, #22
 801de90:	6003      	str	r3, [r0, #0]
 801de92:	f04f 30ff 	mov.w	r0, #4294967295
 801de96:	bd08      	pop	{r3, pc}
 801de98:	2080      	movs	r0, #128	@ 0x80
 801de9a:	e7fc      	b.n	801de96 <sysconf+0x12>

0801de9c <frexp>:
 801de9c:	b570      	push	{r4, r5, r6, lr}
 801de9e:	2100      	movs	r1, #0
 801dea0:	ec55 4b10 	vmov	r4, r5, d0
 801dea4:	6001      	str	r1, [r0, #0]
 801dea6:	4915      	ldr	r1, [pc, #84]	@ (801defc <frexp+0x60>)
 801dea8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801deac:	428a      	cmp	r2, r1
 801deae:	4606      	mov	r6, r0
 801deb0:	462b      	mov	r3, r5
 801deb2:	d820      	bhi.n	801def6 <frexp+0x5a>
 801deb4:	4621      	mov	r1, r4
 801deb6:	4311      	orrs	r1, r2
 801deb8:	d01d      	beq.n	801def6 <frexp+0x5a>
 801deba:	4911      	ldr	r1, [pc, #68]	@ (801df00 <frexp+0x64>)
 801debc:	4029      	ands	r1, r5
 801debe:	b961      	cbnz	r1, 801deda <frexp+0x3e>
 801dec0:	4b10      	ldr	r3, [pc, #64]	@ (801df04 <frexp+0x68>)
 801dec2:	2200      	movs	r2, #0
 801dec4:	4620      	mov	r0, r4
 801dec6:	4629      	mov	r1, r5
 801dec8:	f7e2 fb96 	bl	80005f8 <__aeabi_dmul>
 801decc:	460b      	mov	r3, r1
 801dece:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801ded2:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801ded6:	4604      	mov	r4, r0
 801ded8:	6031      	str	r1, [r6, #0]
 801deda:	6831      	ldr	r1, [r6, #0]
 801dedc:	1512      	asrs	r2, r2, #20
 801dede:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801dee2:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 801dee6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801deea:	4411      	add	r1, r2
 801deec:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801def0:	6031      	str	r1, [r6, #0]
 801def2:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801def6:	ec45 4b10 	vmov	d0, r4, r5
 801defa:	bd70      	pop	{r4, r5, r6, pc}
 801defc:	7fefffff 	.word	0x7fefffff
 801df00:	7ff00000 	.word	0x7ff00000
 801df04:	43500000 	.word	0x43500000

0801df08 <__register_exitproc>:
 801df08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df0c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801df84 <__register_exitproc+0x7c>
 801df10:	4606      	mov	r6, r0
 801df12:	f8da 0000 	ldr.w	r0, [sl]
 801df16:	4698      	mov	r8, r3
 801df18:	460f      	mov	r7, r1
 801df1a:	4691      	mov	r9, r2
 801df1c:	f7fb ff82 	bl	8019e24 <__retarget_lock_acquire_recursive>
 801df20:	4b16      	ldr	r3, [pc, #88]	@ (801df7c <__register_exitproc+0x74>)
 801df22:	681c      	ldr	r4, [r3, #0]
 801df24:	b90c      	cbnz	r4, 801df2a <__register_exitproc+0x22>
 801df26:	4c16      	ldr	r4, [pc, #88]	@ (801df80 <__register_exitproc+0x78>)
 801df28:	601c      	str	r4, [r3, #0]
 801df2a:	6865      	ldr	r5, [r4, #4]
 801df2c:	f8da 0000 	ldr.w	r0, [sl]
 801df30:	2d1f      	cmp	r5, #31
 801df32:	dd05      	ble.n	801df40 <__register_exitproc+0x38>
 801df34:	f7fb ff77 	bl	8019e26 <__retarget_lock_release_recursive>
 801df38:	f04f 30ff 	mov.w	r0, #4294967295
 801df3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df40:	b19e      	cbz	r6, 801df6a <__register_exitproc+0x62>
 801df42:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801df46:	2201      	movs	r2, #1
 801df48:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801df4c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801df50:	40aa      	lsls	r2, r5
 801df52:	4313      	orrs	r3, r2
 801df54:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 801df58:	2e02      	cmp	r6, #2
 801df5a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801df5e:	bf02      	ittt	eq
 801df60:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801df64:	4313      	orreq	r3, r2
 801df66:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801df6a:	1c6b      	adds	r3, r5, #1
 801df6c:	3502      	adds	r5, #2
 801df6e:	6063      	str	r3, [r4, #4]
 801df70:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801df74:	f7fb ff57 	bl	8019e26 <__retarget_lock_release_recursive>
 801df78:	2000      	movs	r0, #0
 801df7a:	e7df      	b.n	801df3c <__register_exitproc+0x34>
 801df7c:	2000cc38 	.word	0x2000cc38
 801df80:	2000cc70 	.word	0x2000cc70
 801df84:	20000238 	.word	0x20000238

0801df88 <quorem>:
 801df88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df8c:	6903      	ldr	r3, [r0, #16]
 801df8e:	690c      	ldr	r4, [r1, #16]
 801df90:	42a3      	cmp	r3, r4
 801df92:	4607      	mov	r7, r0
 801df94:	db7e      	blt.n	801e094 <quorem+0x10c>
 801df96:	3c01      	subs	r4, #1
 801df98:	f101 0814 	add.w	r8, r1, #20
 801df9c:	00a3      	lsls	r3, r4, #2
 801df9e:	f100 0514 	add.w	r5, r0, #20
 801dfa2:	9300      	str	r3, [sp, #0]
 801dfa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dfa8:	9301      	str	r3, [sp, #4]
 801dfaa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801dfae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dfb2:	3301      	adds	r3, #1
 801dfb4:	429a      	cmp	r2, r3
 801dfb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801dfba:	fbb2 f6f3 	udiv	r6, r2, r3
 801dfbe:	d32e      	bcc.n	801e01e <quorem+0x96>
 801dfc0:	f04f 0a00 	mov.w	sl, #0
 801dfc4:	46c4      	mov	ip, r8
 801dfc6:	46ae      	mov	lr, r5
 801dfc8:	46d3      	mov	fp, sl
 801dfca:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dfce:	b298      	uxth	r0, r3
 801dfd0:	fb06 a000 	mla	r0, r6, r0, sl
 801dfd4:	0c02      	lsrs	r2, r0, #16
 801dfd6:	0c1b      	lsrs	r3, r3, #16
 801dfd8:	fb06 2303 	mla	r3, r6, r3, r2
 801dfdc:	f8de 2000 	ldr.w	r2, [lr]
 801dfe0:	b280      	uxth	r0, r0
 801dfe2:	b292      	uxth	r2, r2
 801dfe4:	1a12      	subs	r2, r2, r0
 801dfe6:	445a      	add	r2, fp
 801dfe8:	f8de 0000 	ldr.w	r0, [lr]
 801dfec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dff0:	b29b      	uxth	r3, r3
 801dff2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801dff6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801dffa:	b292      	uxth	r2, r2
 801dffc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e000:	45e1      	cmp	r9, ip
 801e002:	f84e 2b04 	str.w	r2, [lr], #4
 801e006:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e00a:	d2de      	bcs.n	801dfca <quorem+0x42>
 801e00c:	9b00      	ldr	r3, [sp, #0]
 801e00e:	58eb      	ldr	r3, [r5, r3]
 801e010:	b92b      	cbnz	r3, 801e01e <quorem+0x96>
 801e012:	9b01      	ldr	r3, [sp, #4]
 801e014:	3b04      	subs	r3, #4
 801e016:	429d      	cmp	r5, r3
 801e018:	461a      	mov	r2, r3
 801e01a:	d32f      	bcc.n	801e07c <quorem+0xf4>
 801e01c:	613c      	str	r4, [r7, #16]
 801e01e:	4638      	mov	r0, r7
 801e020:	f001 f824 	bl	801f06c <__mcmp>
 801e024:	2800      	cmp	r0, #0
 801e026:	db25      	blt.n	801e074 <quorem+0xec>
 801e028:	4629      	mov	r1, r5
 801e02a:	2000      	movs	r0, #0
 801e02c:	f858 2b04 	ldr.w	r2, [r8], #4
 801e030:	f8d1 c000 	ldr.w	ip, [r1]
 801e034:	fa1f fe82 	uxth.w	lr, r2
 801e038:	fa1f f38c 	uxth.w	r3, ip
 801e03c:	eba3 030e 	sub.w	r3, r3, lr
 801e040:	4403      	add	r3, r0
 801e042:	0c12      	lsrs	r2, r2, #16
 801e044:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e048:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e04c:	b29b      	uxth	r3, r3
 801e04e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e052:	45c1      	cmp	r9, r8
 801e054:	f841 3b04 	str.w	r3, [r1], #4
 801e058:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e05c:	d2e6      	bcs.n	801e02c <quorem+0xa4>
 801e05e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e066:	b922      	cbnz	r2, 801e072 <quorem+0xea>
 801e068:	3b04      	subs	r3, #4
 801e06a:	429d      	cmp	r5, r3
 801e06c:	461a      	mov	r2, r3
 801e06e:	d30b      	bcc.n	801e088 <quorem+0x100>
 801e070:	613c      	str	r4, [r7, #16]
 801e072:	3601      	adds	r6, #1
 801e074:	4630      	mov	r0, r6
 801e076:	b003      	add	sp, #12
 801e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e07c:	6812      	ldr	r2, [r2, #0]
 801e07e:	3b04      	subs	r3, #4
 801e080:	2a00      	cmp	r2, #0
 801e082:	d1cb      	bne.n	801e01c <quorem+0x94>
 801e084:	3c01      	subs	r4, #1
 801e086:	e7c6      	b.n	801e016 <quorem+0x8e>
 801e088:	6812      	ldr	r2, [r2, #0]
 801e08a:	3b04      	subs	r3, #4
 801e08c:	2a00      	cmp	r2, #0
 801e08e:	d1ef      	bne.n	801e070 <quorem+0xe8>
 801e090:	3c01      	subs	r4, #1
 801e092:	e7ea      	b.n	801e06a <quorem+0xe2>
 801e094:	2000      	movs	r0, #0
 801e096:	e7ee      	b.n	801e076 <quorem+0xee>

0801e098 <_dtoa_r>:
 801e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e09c:	b099      	sub	sp, #100	@ 0x64
 801e09e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e0a2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e0a4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801e0a6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e0a8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e0aa:	ec55 4b10 	vmov	r4, r5, d0
 801e0ae:	4683      	mov	fp, r0
 801e0b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e0b2:	b149      	cbz	r1, 801e0c8 <_dtoa_r+0x30>
 801e0b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e0b6:	604a      	str	r2, [r1, #4]
 801e0b8:	2301      	movs	r3, #1
 801e0ba:	4093      	lsls	r3, r2
 801e0bc:	608b      	str	r3, [r1, #8]
 801e0be:	f000 fdce 	bl	801ec5e <_Bfree>
 801e0c2:	2300      	movs	r3, #0
 801e0c4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 801e0c8:	1e2b      	subs	r3, r5, #0
 801e0ca:	bfb9      	ittee	lt
 801e0cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e0d0:	9303      	strlt	r3, [sp, #12]
 801e0d2:	2300      	movge	r3, #0
 801e0d4:	6033      	strge	r3, [r6, #0]
 801e0d6:	9f03      	ldr	r7, [sp, #12]
 801e0d8:	4b97      	ldr	r3, [pc, #604]	@ (801e338 <_dtoa_r+0x2a0>)
 801e0da:	bfbc      	itt	lt
 801e0dc:	2201      	movlt	r2, #1
 801e0de:	6032      	strlt	r2, [r6, #0]
 801e0e0:	43bb      	bics	r3, r7
 801e0e2:	d114      	bne.n	801e10e <_dtoa_r+0x76>
 801e0e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e0e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e0ea:	6013      	str	r3, [r2, #0]
 801e0ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e0f0:	4323      	orrs	r3, r4
 801e0f2:	f000 854c 	beq.w	801eb8e <_dtoa_r+0xaf6>
 801e0f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e0f8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e350 <_dtoa_r+0x2b8>
 801e0fc:	b11b      	cbz	r3, 801e106 <_dtoa_r+0x6e>
 801e0fe:	f10a 0303 	add.w	r3, sl, #3
 801e102:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e104:	6013      	str	r3, [r2, #0]
 801e106:	4650      	mov	r0, sl
 801e108:	b019      	add	sp, #100	@ 0x64
 801e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e10e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e112:	2200      	movs	r2, #0
 801e114:	ec51 0b17 	vmov	r0, r1, d7
 801e118:	2300      	movs	r3, #0
 801e11a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e11e:	f7e2 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 801e122:	4680      	mov	r8, r0
 801e124:	b150      	cbz	r0, 801e13c <_dtoa_r+0xa4>
 801e126:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e128:	2301      	movs	r3, #1
 801e12a:	6013      	str	r3, [r2, #0]
 801e12c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e12e:	b113      	cbz	r3, 801e136 <_dtoa_r+0x9e>
 801e130:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e132:	4b82      	ldr	r3, [pc, #520]	@ (801e33c <_dtoa_r+0x2a4>)
 801e134:	6013      	str	r3, [r2, #0]
 801e136:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801e354 <_dtoa_r+0x2bc>
 801e13a:	e7e4      	b.n	801e106 <_dtoa_r+0x6e>
 801e13c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e140:	aa16      	add	r2, sp, #88	@ 0x58
 801e142:	a917      	add	r1, sp, #92	@ 0x5c
 801e144:	4658      	mov	r0, fp
 801e146:	f001 f841 	bl	801f1cc <__d2b>
 801e14a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e14e:	4681      	mov	r9, r0
 801e150:	2e00      	cmp	r6, #0
 801e152:	d077      	beq.n	801e244 <_dtoa_r+0x1ac>
 801e154:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e156:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e15a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e15e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e162:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e166:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e16a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e16e:	4619      	mov	r1, r3
 801e170:	2200      	movs	r2, #0
 801e172:	4b73      	ldr	r3, [pc, #460]	@ (801e340 <_dtoa_r+0x2a8>)
 801e174:	f7e2 f888 	bl	8000288 <__aeabi_dsub>
 801e178:	a369      	add	r3, pc, #420	@ (adr r3, 801e320 <_dtoa_r+0x288>)
 801e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e17e:	f7e2 fa3b 	bl	80005f8 <__aeabi_dmul>
 801e182:	a369      	add	r3, pc, #420	@ (adr r3, 801e328 <_dtoa_r+0x290>)
 801e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e188:	f7e2 f880 	bl	800028c <__adddf3>
 801e18c:	4604      	mov	r4, r0
 801e18e:	4630      	mov	r0, r6
 801e190:	460d      	mov	r5, r1
 801e192:	f7e2 f9c7 	bl	8000524 <__aeabi_i2d>
 801e196:	a366      	add	r3, pc, #408	@ (adr r3, 801e330 <_dtoa_r+0x298>)
 801e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e19c:	f7e2 fa2c 	bl	80005f8 <__aeabi_dmul>
 801e1a0:	4602      	mov	r2, r0
 801e1a2:	460b      	mov	r3, r1
 801e1a4:	4620      	mov	r0, r4
 801e1a6:	4629      	mov	r1, r5
 801e1a8:	f7e2 f870 	bl	800028c <__adddf3>
 801e1ac:	4604      	mov	r4, r0
 801e1ae:	460d      	mov	r5, r1
 801e1b0:	f7e2 fcd2 	bl	8000b58 <__aeabi_d2iz>
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	4607      	mov	r7, r0
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	4620      	mov	r0, r4
 801e1bc:	4629      	mov	r1, r5
 801e1be:	f7e2 fc8d 	bl	8000adc <__aeabi_dcmplt>
 801e1c2:	b140      	cbz	r0, 801e1d6 <_dtoa_r+0x13e>
 801e1c4:	4638      	mov	r0, r7
 801e1c6:	f7e2 f9ad 	bl	8000524 <__aeabi_i2d>
 801e1ca:	4622      	mov	r2, r4
 801e1cc:	462b      	mov	r3, r5
 801e1ce:	f7e2 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 801e1d2:	b900      	cbnz	r0, 801e1d6 <_dtoa_r+0x13e>
 801e1d4:	3f01      	subs	r7, #1
 801e1d6:	2f16      	cmp	r7, #22
 801e1d8:	d851      	bhi.n	801e27e <_dtoa_r+0x1e6>
 801e1da:	4b5a      	ldr	r3, [pc, #360]	@ (801e344 <_dtoa_r+0x2ac>)
 801e1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e1e8:	f7e2 fc78 	bl	8000adc <__aeabi_dcmplt>
 801e1ec:	2800      	cmp	r0, #0
 801e1ee:	d048      	beq.n	801e282 <_dtoa_r+0x1ea>
 801e1f0:	3f01      	subs	r7, #1
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e1f6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e1f8:	1b9b      	subs	r3, r3, r6
 801e1fa:	1e5a      	subs	r2, r3, #1
 801e1fc:	bf44      	itt	mi
 801e1fe:	f1c3 0801 	rsbmi	r8, r3, #1
 801e202:	2300      	movmi	r3, #0
 801e204:	9208      	str	r2, [sp, #32]
 801e206:	bf54      	ite	pl
 801e208:	f04f 0800 	movpl.w	r8, #0
 801e20c:	9308      	strmi	r3, [sp, #32]
 801e20e:	2f00      	cmp	r7, #0
 801e210:	db39      	blt.n	801e286 <_dtoa_r+0x1ee>
 801e212:	9b08      	ldr	r3, [sp, #32]
 801e214:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e216:	443b      	add	r3, r7
 801e218:	9308      	str	r3, [sp, #32]
 801e21a:	2300      	movs	r3, #0
 801e21c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e220:	2b09      	cmp	r3, #9
 801e222:	d865      	bhi.n	801e2f0 <_dtoa_r+0x258>
 801e224:	2b05      	cmp	r3, #5
 801e226:	bfc4      	itt	gt
 801e228:	3b04      	subgt	r3, #4
 801e22a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e22e:	f1a3 0302 	sub.w	r3, r3, #2
 801e232:	bfcc      	ite	gt
 801e234:	2400      	movgt	r4, #0
 801e236:	2401      	movle	r4, #1
 801e238:	2b03      	cmp	r3, #3
 801e23a:	d864      	bhi.n	801e306 <_dtoa_r+0x26e>
 801e23c:	e8df f003 	tbb	[pc, r3]
 801e240:	5635372a 	.word	0x5635372a
 801e244:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e248:	441e      	add	r6, r3
 801e24a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e24e:	2b20      	cmp	r3, #32
 801e250:	bfc1      	itttt	gt
 801e252:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e256:	409f      	lslgt	r7, r3
 801e258:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e25c:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e260:	bfd6      	itet	le
 801e262:	f1c3 0320 	rsble	r3, r3, #32
 801e266:	ea47 0003 	orrgt.w	r0, r7, r3
 801e26a:	fa04 f003 	lslle.w	r0, r4, r3
 801e26e:	f7e2 f949 	bl	8000504 <__aeabi_ui2d>
 801e272:	2201      	movs	r2, #1
 801e274:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e278:	3e01      	subs	r6, #1
 801e27a:	9214      	str	r2, [sp, #80]	@ 0x50
 801e27c:	e777      	b.n	801e16e <_dtoa_r+0xd6>
 801e27e:	2301      	movs	r3, #1
 801e280:	e7b8      	b.n	801e1f4 <_dtoa_r+0x15c>
 801e282:	9012      	str	r0, [sp, #72]	@ 0x48
 801e284:	e7b7      	b.n	801e1f6 <_dtoa_r+0x15e>
 801e286:	427b      	negs	r3, r7
 801e288:	930a      	str	r3, [sp, #40]	@ 0x28
 801e28a:	2300      	movs	r3, #0
 801e28c:	eba8 0807 	sub.w	r8, r8, r7
 801e290:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e292:	e7c4      	b.n	801e21e <_dtoa_r+0x186>
 801e294:	2300      	movs	r3, #0
 801e296:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	dc36      	bgt.n	801e30c <_dtoa_r+0x274>
 801e29e:	2301      	movs	r3, #1
 801e2a0:	9300      	str	r3, [sp, #0]
 801e2a2:	9307      	str	r3, [sp, #28]
 801e2a4:	461a      	mov	r2, r3
 801e2a6:	920e      	str	r2, [sp, #56]	@ 0x38
 801e2a8:	e00b      	b.n	801e2c2 <_dtoa_r+0x22a>
 801e2aa:	2301      	movs	r3, #1
 801e2ac:	e7f3      	b.n	801e296 <_dtoa_r+0x1fe>
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e2b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2b4:	18fb      	adds	r3, r7, r3
 801e2b6:	9300      	str	r3, [sp, #0]
 801e2b8:	3301      	adds	r3, #1
 801e2ba:	2b01      	cmp	r3, #1
 801e2bc:	9307      	str	r3, [sp, #28]
 801e2be:	bfb8      	it	lt
 801e2c0:	2301      	movlt	r3, #1
 801e2c2:	2100      	movs	r1, #0
 801e2c4:	2204      	movs	r2, #4
 801e2c6:	f102 0014 	add.w	r0, r2, #20
 801e2ca:	4298      	cmp	r0, r3
 801e2cc:	d922      	bls.n	801e314 <_dtoa_r+0x27c>
 801e2ce:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 801e2d2:	4658      	mov	r0, fp
 801e2d4:	f000 fc9e 	bl	801ec14 <_Balloc>
 801e2d8:	4682      	mov	sl, r0
 801e2da:	2800      	cmp	r0, #0
 801e2dc:	d13c      	bne.n	801e358 <_dtoa_r+0x2c0>
 801e2de:	4b1a      	ldr	r3, [pc, #104]	@ (801e348 <_dtoa_r+0x2b0>)
 801e2e0:	4602      	mov	r2, r0
 801e2e2:	f240 11af 	movw	r1, #431	@ 0x1af
 801e2e6:	4819      	ldr	r0, [pc, #100]	@ (801e34c <_dtoa_r+0x2b4>)
 801e2e8:	f001 fae0 	bl	801f8ac <__assert_func>
 801e2ec:	2301      	movs	r3, #1
 801e2ee:	e7df      	b.n	801e2b0 <_dtoa_r+0x218>
 801e2f0:	2401      	movs	r4, #1
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e2f8:	f04f 33ff 	mov.w	r3, #4294967295
 801e2fc:	9300      	str	r3, [sp, #0]
 801e2fe:	9307      	str	r3, [sp, #28]
 801e300:	2200      	movs	r2, #0
 801e302:	2312      	movs	r3, #18
 801e304:	e7cf      	b.n	801e2a6 <_dtoa_r+0x20e>
 801e306:	2301      	movs	r3, #1
 801e308:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e30a:	e7f5      	b.n	801e2f8 <_dtoa_r+0x260>
 801e30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e30e:	9300      	str	r3, [sp, #0]
 801e310:	9307      	str	r3, [sp, #28]
 801e312:	e7d6      	b.n	801e2c2 <_dtoa_r+0x22a>
 801e314:	3101      	adds	r1, #1
 801e316:	0052      	lsls	r2, r2, #1
 801e318:	e7d5      	b.n	801e2c6 <_dtoa_r+0x22e>
 801e31a:	bf00      	nop
 801e31c:	f3af 8000 	nop.w
 801e320:	636f4361 	.word	0x636f4361
 801e324:	3fd287a7 	.word	0x3fd287a7
 801e328:	8b60c8b3 	.word	0x8b60c8b3
 801e32c:	3fc68a28 	.word	0x3fc68a28
 801e330:	509f79fb 	.word	0x509f79fb
 801e334:	3fd34413 	.word	0x3fd34413
 801e338:	7ff00000 	.word	0x7ff00000
 801e33c:	0802095b 	.word	0x0802095b
 801e340:	3ff80000 	.word	0x3ff80000
 801e344:	08020ad0 	.word	0x08020ad0
 801e348:	080209d3 	.word	0x080209d3
 801e34c:	080209e4 	.word	0x080209e4
 801e350:	080209cf 	.word	0x080209cf
 801e354:	0802095a 	.word	0x0802095a
 801e358:	9b07      	ldr	r3, [sp, #28]
 801e35a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 801e35e:	2b0e      	cmp	r3, #14
 801e360:	f200 80a4 	bhi.w	801e4ac <_dtoa_r+0x414>
 801e364:	2c00      	cmp	r4, #0
 801e366:	f000 80a1 	beq.w	801e4ac <_dtoa_r+0x414>
 801e36a:	2f00      	cmp	r7, #0
 801e36c:	dd33      	ble.n	801e3d6 <_dtoa_r+0x33e>
 801e36e:	4bae      	ldr	r3, [pc, #696]	@ (801e628 <_dtoa_r+0x590>)
 801e370:	f007 020f 	and.w	r2, r7, #15
 801e374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e378:	ed93 7b00 	vldr	d7, [r3]
 801e37c:	05f8      	lsls	r0, r7, #23
 801e37e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e382:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e386:	d516      	bpl.n	801e3b6 <_dtoa_r+0x31e>
 801e388:	4ba8      	ldr	r3, [pc, #672]	@ (801e62c <_dtoa_r+0x594>)
 801e38a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e38e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e392:	f7e2 fa5b 	bl	800084c <__aeabi_ddiv>
 801e396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e39a:	f004 040f 	and.w	r4, r4, #15
 801e39e:	2603      	movs	r6, #3
 801e3a0:	4da2      	ldr	r5, [pc, #648]	@ (801e62c <_dtoa_r+0x594>)
 801e3a2:	b954      	cbnz	r4, 801e3ba <_dtoa_r+0x322>
 801e3a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e3a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e3ac:	f7e2 fa4e 	bl	800084c <__aeabi_ddiv>
 801e3b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e3b4:	e028      	b.n	801e408 <_dtoa_r+0x370>
 801e3b6:	2602      	movs	r6, #2
 801e3b8:	e7f2      	b.n	801e3a0 <_dtoa_r+0x308>
 801e3ba:	07e1      	lsls	r1, r4, #31
 801e3bc:	d508      	bpl.n	801e3d0 <_dtoa_r+0x338>
 801e3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e3c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e3c6:	f7e2 f917 	bl	80005f8 <__aeabi_dmul>
 801e3ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e3ce:	3601      	adds	r6, #1
 801e3d0:	1064      	asrs	r4, r4, #1
 801e3d2:	3508      	adds	r5, #8
 801e3d4:	e7e5      	b.n	801e3a2 <_dtoa_r+0x30a>
 801e3d6:	f000 80d2 	beq.w	801e57e <_dtoa_r+0x4e6>
 801e3da:	427c      	negs	r4, r7
 801e3dc:	4b92      	ldr	r3, [pc, #584]	@ (801e628 <_dtoa_r+0x590>)
 801e3de:	4d93      	ldr	r5, [pc, #588]	@ (801e62c <_dtoa_r+0x594>)
 801e3e0:	f004 020f 	and.w	r2, r4, #15
 801e3e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e3f0:	f7e2 f902 	bl	80005f8 <__aeabi_dmul>
 801e3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e3f8:	1124      	asrs	r4, r4, #4
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	2602      	movs	r6, #2
 801e3fe:	2c00      	cmp	r4, #0
 801e400:	f040 80b2 	bne.w	801e568 <_dtoa_r+0x4d0>
 801e404:	2b00      	cmp	r3, #0
 801e406:	d1d3      	bne.n	801e3b0 <_dtoa_r+0x318>
 801e408:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e40a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e40e:	2b00      	cmp	r3, #0
 801e410:	f000 80b7 	beq.w	801e582 <_dtoa_r+0x4ea>
 801e414:	4b86      	ldr	r3, [pc, #536]	@ (801e630 <_dtoa_r+0x598>)
 801e416:	2200      	movs	r2, #0
 801e418:	4620      	mov	r0, r4
 801e41a:	4629      	mov	r1, r5
 801e41c:	f7e2 fb5e 	bl	8000adc <__aeabi_dcmplt>
 801e420:	2800      	cmp	r0, #0
 801e422:	f000 80ae 	beq.w	801e582 <_dtoa_r+0x4ea>
 801e426:	9b07      	ldr	r3, [sp, #28]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	f000 80aa 	beq.w	801e582 <_dtoa_r+0x4ea>
 801e42e:	9b00      	ldr	r3, [sp, #0]
 801e430:	2b00      	cmp	r3, #0
 801e432:	dd37      	ble.n	801e4a4 <_dtoa_r+0x40c>
 801e434:	1e7b      	subs	r3, r7, #1
 801e436:	9304      	str	r3, [sp, #16]
 801e438:	4620      	mov	r0, r4
 801e43a:	4b7e      	ldr	r3, [pc, #504]	@ (801e634 <_dtoa_r+0x59c>)
 801e43c:	2200      	movs	r2, #0
 801e43e:	4629      	mov	r1, r5
 801e440:	f7e2 f8da 	bl	80005f8 <__aeabi_dmul>
 801e444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e448:	9c00      	ldr	r4, [sp, #0]
 801e44a:	3601      	adds	r6, #1
 801e44c:	4630      	mov	r0, r6
 801e44e:	f7e2 f869 	bl	8000524 <__aeabi_i2d>
 801e452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e456:	f7e2 f8cf 	bl	80005f8 <__aeabi_dmul>
 801e45a:	4b77      	ldr	r3, [pc, #476]	@ (801e638 <_dtoa_r+0x5a0>)
 801e45c:	2200      	movs	r2, #0
 801e45e:	f7e1 ff15 	bl	800028c <__adddf3>
 801e462:	4605      	mov	r5, r0
 801e464:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e468:	2c00      	cmp	r4, #0
 801e46a:	f040 808d 	bne.w	801e588 <_dtoa_r+0x4f0>
 801e46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e472:	4b72      	ldr	r3, [pc, #456]	@ (801e63c <_dtoa_r+0x5a4>)
 801e474:	2200      	movs	r2, #0
 801e476:	f7e1 ff07 	bl	8000288 <__aeabi_dsub>
 801e47a:	4602      	mov	r2, r0
 801e47c:	460b      	mov	r3, r1
 801e47e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e482:	462a      	mov	r2, r5
 801e484:	4633      	mov	r3, r6
 801e486:	f7e2 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 801e48a:	2800      	cmp	r0, #0
 801e48c:	f040 828c 	bne.w	801e9a8 <_dtoa_r+0x910>
 801e490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e494:	462a      	mov	r2, r5
 801e496:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e49a:	f7e2 fb1f 	bl	8000adc <__aeabi_dcmplt>
 801e49e:	2800      	cmp	r0, #0
 801e4a0:	f040 8129 	bne.w	801e6f6 <_dtoa_r+0x65e>
 801e4a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e4a8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e4ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	f2c0 815b 	blt.w	801e76a <_dtoa_r+0x6d2>
 801e4b4:	2f0e      	cmp	r7, #14
 801e4b6:	f300 8158 	bgt.w	801e76a <_dtoa_r+0x6d2>
 801e4ba:	4b5b      	ldr	r3, [pc, #364]	@ (801e628 <_dtoa_r+0x590>)
 801e4bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e4c0:	ed93 7b00 	vldr	d7, [r3]
 801e4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	ed8d 7b00 	vstr	d7, [sp]
 801e4cc:	da03      	bge.n	801e4d6 <_dtoa_r+0x43e>
 801e4ce:	9b07      	ldr	r3, [sp, #28]
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	f340 8102 	ble.w	801e6da <_dtoa_r+0x642>
 801e4d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e4da:	4656      	mov	r6, sl
 801e4dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	4629      	mov	r1, r5
 801e4e4:	f7e2 f9b2 	bl	800084c <__aeabi_ddiv>
 801e4e8:	f7e2 fb36 	bl	8000b58 <__aeabi_d2iz>
 801e4ec:	4680      	mov	r8, r0
 801e4ee:	f7e2 f819 	bl	8000524 <__aeabi_i2d>
 801e4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e4f6:	f7e2 f87f 	bl	80005f8 <__aeabi_dmul>
 801e4fa:	4602      	mov	r2, r0
 801e4fc:	460b      	mov	r3, r1
 801e4fe:	4620      	mov	r0, r4
 801e500:	4629      	mov	r1, r5
 801e502:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e506:	f7e1 febf 	bl	8000288 <__aeabi_dsub>
 801e50a:	f806 4b01 	strb.w	r4, [r6], #1
 801e50e:	9d07      	ldr	r5, [sp, #28]
 801e510:	eba6 040a 	sub.w	r4, r6, sl
 801e514:	42a5      	cmp	r5, r4
 801e516:	4602      	mov	r2, r0
 801e518:	460b      	mov	r3, r1
 801e51a:	f040 8118 	bne.w	801e74e <_dtoa_r+0x6b6>
 801e51e:	f7e1 feb5 	bl	800028c <__adddf3>
 801e522:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e526:	4604      	mov	r4, r0
 801e528:	460d      	mov	r5, r1
 801e52a:	f7e2 faf5 	bl	8000b18 <__aeabi_dcmpgt>
 801e52e:	2800      	cmp	r0, #0
 801e530:	f040 80fa 	bne.w	801e728 <_dtoa_r+0x690>
 801e534:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e538:	4620      	mov	r0, r4
 801e53a:	4629      	mov	r1, r5
 801e53c:	f7e2 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 801e540:	b118      	cbz	r0, 801e54a <_dtoa_r+0x4b2>
 801e542:	f018 0f01 	tst.w	r8, #1
 801e546:	f040 80ef 	bne.w	801e728 <_dtoa_r+0x690>
 801e54a:	4649      	mov	r1, r9
 801e54c:	4658      	mov	r0, fp
 801e54e:	f000 fb86 	bl	801ec5e <_Bfree>
 801e552:	2300      	movs	r3, #0
 801e554:	7033      	strb	r3, [r6, #0]
 801e556:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e558:	3701      	adds	r7, #1
 801e55a:	601f      	str	r7, [r3, #0]
 801e55c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e55e:	2b00      	cmp	r3, #0
 801e560:	f43f add1 	beq.w	801e106 <_dtoa_r+0x6e>
 801e564:	601e      	str	r6, [r3, #0]
 801e566:	e5ce      	b.n	801e106 <_dtoa_r+0x6e>
 801e568:	07e2      	lsls	r2, r4, #31
 801e56a:	d505      	bpl.n	801e578 <_dtoa_r+0x4e0>
 801e56c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e570:	f7e2 f842 	bl	80005f8 <__aeabi_dmul>
 801e574:	3601      	adds	r6, #1
 801e576:	2301      	movs	r3, #1
 801e578:	1064      	asrs	r4, r4, #1
 801e57a:	3508      	adds	r5, #8
 801e57c:	e73f      	b.n	801e3fe <_dtoa_r+0x366>
 801e57e:	2602      	movs	r6, #2
 801e580:	e742      	b.n	801e408 <_dtoa_r+0x370>
 801e582:	9c07      	ldr	r4, [sp, #28]
 801e584:	9704      	str	r7, [sp, #16]
 801e586:	e761      	b.n	801e44c <_dtoa_r+0x3b4>
 801e588:	4b27      	ldr	r3, [pc, #156]	@ (801e628 <_dtoa_r+0x590>)
 801e58a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e58c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e590:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e594:	4454      	add	r4, sl
 801e596:	2900      	cmp	r1, #0
 801e598:	d054      	beq.n	801e644 <_dtoa_r+0x5ac>
 801e59a:	4929      	ldr	r1, [pc, #164]	@ (801e640 <_dtoa_r+0x5a8>)
 801e59c:	2000      	movs	r0, #0
 801e59e:	f7e2 f955 	bl	800084c <__aeabi_ddiv>
 801e5a2:	4633      	mov	r3, r6
 801e5a4:	462a      	mov	r2, r5
 801e5a6:	f7e1 fe6f 	bl	8000288 <__aeabi_dsub>
 801e5aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e5ae:	4656      	mov	r6, sl
 801e5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5b4:	f7e2 fad0 	bl	8000b58 <__aeabi_d2iz>
 801e5b8:	4605      	mov	r5, r0
 801e5ba:	f7e1 ffb3 	bl	8000524 <__aeabi_i2d>
 801e5be:	4602      	mov	r2, r0
 801e5c0:	460b      	mov	r3, r1
 801e5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5c6:	f7e1 fe5f 	bl	8000288 <__aeabi_dsub>
 801e5ca:	3530      	adds	r5, #48	@ 0x30
 801e5cc:	4602      	mov	r2, r0
 801e5ce:	460b      	mov	r3, r1
 801e5d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e5d4:	f806 5b01 	strb.w	r5, [r6], #1
 801e5d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e5dc:	f7e2 fa7e 	bl	8000adc <__aeabi_dcmplt>
 801e5e0:	2800      	cmp	r0, #0
 801e5e2:	d172      	bne.n	801e6ca <_dtoa_r+0x632>
 801e5e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e5e8:	4911      	ldr	r1, [pc, #68]	@ (801e630 <_dtoa_r+0x598>)
 801e5ea:	2000      	movs	r0, #0
 801e5ec:	f7e1 fe4c 	bl	8000288 <__aeabi_dsub>
 801e5f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e5f4:	f7e2 fa72 	bl	8000adc <__aeabi_dcmplt>
 801e5f8:	2800      	cmp	r0, #0
 801e5fa:	f040 8096 	bne.w	801e72a <_dtoa_r+0x692>
 801e5fe:	42a6      	cmp	r6, r4
 801e600:	f43f af50 	beq.w	801e4a4 <_dtoa_r+0x40c>
 801e604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e608:	4b0a      	ldr	r3, [pc, #40]	@ (801e634 <_dtoa_r+0x59c>)
 801e60a:	2200      	movs	r2, #0
 801e60c:	f7e1 fff4 	bl	80005f8 <__aeabi_dmul>
 801e610:	4b08      	ldr	r3, [pc, #32]	@ (801e634 <_dtoa_r+0x59c>)
 801e612:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e616:	2200      	movs	r2, #0
 801e618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e61c:	f7e1 ffec 	bl	80005f8 <__aeabi_dmul>
 801e620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e624:	e7c4      	b.n	801e5b0 <_dtoa_r+0x518>
 801e626:	bf00      	nop
 801e628:	08020ad0 	.word	0x08020ad0
 801e62c:	08020aa8 	.word	0x08020aa8
 801e630:	3ff00000 	.word	0x3ff00000
 801e634:	40240000 	.word	0x40240000
 801e638:	401c0000 	.word	0x401c0000
 801e63c:	40140000 	.word	0x40140000
 801e640:	3fe00000 	.word	0x3fe00000
 801e644:	4631      	mov	r1, r6
 801e646:	4628      	mov	r0, r5
 801e648:	f7e1 ffd6 	bl	80005f8 <__aeabi_dmul>
 801e64c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e650:	9415      	str	r4, [sp, #84]	@ 0x54
 801e652:	4656      	mov	r6, sl
 801e654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e658:	f7e2 fa7e 	bl	8000b58 <__aeabi_d2iz>
 801e65c:	4605      	mov	r5, r0
 801e65e:	f7e1 ff61 	bl	8000524 <__aeabi_i2d>
 801e662:	4602      	mov	r2, r0
 801e664:	460b      	mov	r3, r1
 801e666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e66a:	f7e1 fe0d 	bl	8000288 <__aeabi_dsub>
 801e66e:	3530      	adds	r5, #48	@ 0x30
 801e670:	f806 5b01 	strb.w	r5, [r6], #1
 801e674:	4602      	mov	r2, r0
 801e676:	460b      	mov	r3, r1
 801e678:	42a6      	cmp	r6, r4
 801e67a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e67e:	f04f 0200 	mov.w	r2, #0
 801e682:	d124      	bne.n	801e6ce <_dtoa_r+0x636>
 801e684:	4bac      	ldr	r3, [pc, #688]	@ (801e938 <_dtoa_r+0x8a0>)
 801e686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e68a:	f7e1 fdff 	bl	800028c <__adddf3>
 801e68e:	4602      	mov	r2, r0
 801e690:	460b      	mov	r3, r1
 801e692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e696:	f7e2 fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 801e69a:	2800      	cmp	r0, #0
 801e69c:	d145      	bne.n	801e72a <_dtoa_r+0x692>
 801e69e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e6a2:	49a5      	ldr	r1, [pc, #660]	@ (801e938 <_dtoa_r+0x8a0>)
 801e6a4:	2000      	movs	r0, #0
 801e6a6:	f7e1 fdef 	bl	8000288 <__aeabi_dsub>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	460b      	mov	r3, r1
 801e6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6b2:	f7e2 fa13 	bl	8000adc <__aeabi_dcmplt>
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	f43f aef4 	beq.w	801e4a4 <_dtoa_r+0x40c>
 801e6bc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801e6be:	1e73      	subs	r3, r6, #1
 801e6c0:	9315      	str	r3, [sp, #84]	@ 0x54
 801e6c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e6c6:	2b30      	cmp	r3, #48	@ 0x30
 801e6c8:	d0f8      	beq.n	801e6bc <_dtoa_r+0x624>
 801e6ca:	9f04      	ldr	r7, [sp, #16]
 801e6cc:	e73d      	b.n	801e54a <_dtoa_r+0x4b2>
 801e6ce:	4b9b      	ldr	r3, [pc, #620]	@ (801e93c <_dtoa_r+0x8a4>)
 801e6d0:	f7e1 ff92 	bl	80005f8 <__aeabi_dmul>
 801e6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e6d8:	e7bc      	b.n	801e654 <_dtoa_r+0x5bc>
 801e6da:	d10c      	bne.n	801e6f6 <_dtoa_r+0x65e>
 801e6dc:	4b98      	ldr	r3, [pc, #608]	@ (801e940 <_dtoa_r+0x8a8>)
 801e6de:	2200      	movs	r2, #0
 801e6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e6e4:	f7e1 ff88 	bl	80005f8 <__aeabi_dmul>
 801e6e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e6ec:	f7e2 fa0a 	bl	8000b04 <__aeabi_dcmpge>
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	f000 8157 	beq.w	801e9a4 <_dtoa_r+0x90c>
 801e6f6:	2400      	movs	r4, #0
 801e6f8:	4625      	mov	r5, r4
 801e6fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6fc:	43db      	mvns	r3, r3
 801e6fe:	9304      	str	r3, [sp, #16]
 801e700:	4656      	mov	r6, sl
 801e702:	2700      	movs	r7, #0
 801e704:	4621      	mov	r1, r4
 801e706:	4658      	mov	r0, fp
 801e708:	f000 faa9 	bl	801ec5e <_Bfree>
 801e70c:	2d00      	cmp	r5, #0
 801e70e:	d0dc      	beq.n	801e6ca <_dtoa_r+0x632>
 801e710:	b12f      	cbz	r7, 801e71e <_dtoa_r+0x686>
 801e712:	42af      	cmp	r7, r5
 801e714:	d003      	beq.n	801e71e <_dtoa_r+0x686>
 801e716:	4639      	mov	r1, r7
 801e718:	4658      	mov	r0, fp
 801e71a:	f000 faa0 	bl	801ec5e <_Bfree>
 801e71e:	4629      	mov	r1, r5
 801e720:	4658      	mov	r0, fp
 801e722:	f000 fa9c 	bl	801ec5e <_Bfree>
 801e726:	e7d0      	b.n	801e6ca <_dtoa_r+0x632>
 801e728:	9704      	str	r7, [sp, #16]
 801e72a:	4633      	mov	r3, r6
 801e72c:	461e      	mov	r6, r3
 801e72e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e732:	2a39      	cmp	r2, #57	@ 0x39
 801e734:	d107      	bne.n	801e746 <_dtoa_r+0x6ae>
 801e736:	459a      	cmp	sl, r3
 801e738:	d1f8      	bne.n	801e72c <_dtoa_r+0x694>
 801e73a:	9a04      	ldr	r2, [sp, #16]
 801e73c:	3201      	adds	r2, #1
 801e73e:	9204      	str	r2, [sp, #16]
 801e740:	2230      	movs	r2, #48	@ 0x30
 801e742:	f88a 2000 	strb.w	r2, [sl]
 801e746:	781a      	ldrb	r2, [r3, #0]
 801e748:	3201      	adds	r2, #1
 801e74a:	701a      	strb	r2, [r3, #0]
 801e74c:	e7bd      	b.n	801e6ca <_dtoa_r+0x632>
 801e74e:	4b7b      	ldr	r3, [pc, #492]	@ (801e93c <_dtoa_r+0x8a4>)
 801e750:	2200      	movs	r2, #0
 801e752:	f7e1 ff51 	bl	80005f8 <__aeabi_dmul>
 801e756:	2200      	movs	r2, #0
 801e758:	2300      	movs	r3, #0
 801e75a:	4604      	mov	r4, r0
 801e75c:	460d      	mov	r5, r1
 801e75e:	f7e2 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 801e762:	2800      	cmp	r0, #0
 801e764:	f43f aeba 	beq.w	801e4dc <_dtoa_r+0x444>
 801e768:	e6ef      	b.n	801e54a <_dtoa_r+0x4b2>
 801e76a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e76c:	2a00      	cmp	r2, #0
 801e76e:	f000 80db 	beq.w	801e928 <_dtoa_r+0x890>
 801e772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e774:	2a01      	cmp	r2, #1
 801e776:	f300 80bf 	bgt.w	801e8f8 <_dtoa_r+0x860>
 801e77a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e77c:	2a00      	cmp	r2, #0
 801e77e:	f000 80b7 	beq.w	801e8f0 <_dtoa_r+0x858>
 801e782:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e786:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e788:	4646      	mov	r6, r8
 801e78a:	9a08      	ldr	r2, [sp, #32]
 801e78c:	2101      	movs	r1, #1
 801e78e:	441a      	add	r2, r3
 801e790:	4658      	mov	r0, fp
 801e792:	4498      	add	r8, r3
 801e794:	9208      	str	r2, [sp, #32]
 801e796:	f000 fafd 	bl	801ed94 <__i2b>
 801e79a:	4605      	mov	r5, r0
 801e79c:	b15e      	cbz	r6, 801e7b6 <_dtoa_r+0x71e>
 801e79e:	9b08      	ldr	r3, [sp, #32]
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	dd08      	ble.n	801e7b6 <_dtoa_r+0x71e>
 801e7a4:	42b3      	cmp	r3, r6
 801e7a6:	9a08      	ldr	r2, [sp, #32]
 801e7a8:	bfa8      	it	ge
 801e7aa:	4633      	movge	r3, r6
 801e7ac:	eba8 0803 	sub.w	r8, r8, r3
 801e7b0:	1af6      	subs	r6, r6, r3
 801e7b2:	1ad3      	subs	r3, r2, r3
 801e7b4:	9308      	str	r3, [sp, #32]
 801e7b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7b8:	b1f3      	cbz	r3, 801e7f8 <_dtoa_r+0x760>
 801e7ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	f000 80b7 	beq.w	801e930 <_dtoa_r+0x898>
 801e7c2:	b18c      	cbz	r4, 801e7e8 <_dtoa_r+0x750>
 801e7c4:	4629      	mov	r1, r5
 801e7c6:	4622      	mov	r2, r4
 801e7c8:	4658      	mov	r0, fp
 801e7ca:	f000 fba3 	bl	801ef14 <__pow5mult>
 801e7ce:	464a      	mov	r2, r9
 801e7d0:	4601      	mov	r1, r0
 801e7d2:	4605      	mov	r5, r0
 801e7d4:	4658      	mov	r0, fp
 801e7d6:	f000 faf3 	bl	801edc0 <__multiply>
 801e7da:	4649      	mov	r1, r9
 801e7dc:	9004      	str	r0, [sp, #16]
 801e7de:	4658      	mov	r0, fp
 801e7e0:	f000 fa3d 	bl	801ec5e <_Bfree>
 801e7e4:	9b04      	ldr	r3, [sp, #16]
 801e7e6:	4699      	mov	r9, r3
 801e7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7ea:	1b1a      	subs	r2, r3, r4
 801e7ec:	d004      	beq.n	801e7f8 <_dtoa_r+0x760>
 801e7ee:	4649      	mov	r1, r9
 801e7f0:	4658      	mov	r0, fp
 801e7f2:	f000 fb8f 	bl	801ef14 <__pow5mult>
 801e7f6:	4681      	mov	r9, r0
 801e7f8:	2101      	movs	r1, #1
 801e7fa:	4658      	mov	r0, fp
 801e7fc:	f000 faca 	bl	801ed94 <__i2b>
 801e800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e802:	4604      	mov	r4, r0
 801e804:	2b00      	cmp	r3, #0
 801e806:	f000 81cc 	beq.w	801eba2 <_dtoa_r+0xb0a>
 801e80a:	461a      	mov	r2, r3
 801e80c:	4601      	mov	r1, r0
 801e80e:	4658      	mov	r0, fp
 801e810:	f000 fb80 	bl	801ef14 <__pow5mult>
 801e814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e816:	2b01      	cmp	r3, #1
 801e818:	4604      	mov	r4, r0
 801e81a:	f300 8095 	bgt.w	801e948 <_dtoa_r+0x8b0>
 801e81e:	9b02      	ldr	r3, [sp, #8]
 801e820:	2b00      	cmp	r3, #0
 801e822:	f040 8087 	bne.w	801e934 <_dtoa_r+0x89c>
 801e826:	9b03      	ldr	r3, [sp, #12]
 801e828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	f040 8089 	bne.w	801e944 <_dtoa_r+0x8ac>
 801e832:	9b03      	ldr	r3, [sp, #12]
 801e834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e838:	0d1b      	lsrs	r3, r3, #20
 801e83a:	051b      	lsls	r3, r3, #20
 801e83c:	b12b      	cbz	r3, 801e84a <_dtoa_r+0x7b2>
 801e83e:	9b08      	ldr	r3, [sp, #32]
 801e840:	3301      	adds	r3, #1
 801e842:	9308      	str	r3, [sp, #32]
 801e844:	f108 0801 	add.w	r8, r8, #1
 801e848:	2301      	movs	r3, #1
 801e84a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e84e:	2b00      	cmp	r3, #0
 801e850:	f000 81ad 	beq.w	801ebae <_dtoa_r+0xb16>
 801e854:	6923      	ldr	r3, [r4, #16]
 801e856:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e85a:	6918      	ldr	r0, [r3, #16]
 801e85c:	f000 fa4e 	bl	801ecfc <__hi0bits>
 801e860:	f1c0 0020 	rsb	r0, r0, #32
 801e864:	9b08      	ldr	r3, [sp, #32]
 801e866:	4418      	add	r0, r3
 801e868:	f010 001f 	ands.w	r0, r0, #31
 801e86c:	d077      	beq.n	801e95e <_dtoa_r+0x8c6>
 801e86e:	f1c0 0320 	rsb	r3, r0, #32
 801e872:	2b04      	cmp	r3, #4
 801e874:	dd6b      	ble.n	801e94e <_dtoa_r+0x8b6>
 801e876:	9b08      	ldr	r3, [sp, #32]
 801e878:	f1c0 001c 	rsb	r0, r0, #28
 801e87c:	4403      	add	r3, r0
 801e87e:	4480      	add	r8, r0
 801e880:	4406      	add	r6, r0
 801e882:	9308      	str	r3, [sp, #32]
 801e884:	f1b8 0f00 	cmp.w	r8, #0
 801e888:	dd05      	ble.n	801e896 <_dtoa_r+0x7fe>
 801e88a:	4649      	mov	r1, r9
 801e88c:	4642      	mov	r2, r8
 801e88e:	4658      	mov	r0, fp
 801e890:	f000 fb80 	bl	801ef94 <__lshift>
 801e894:	4681      	mov	r9, r0
 801e896:	9b08      	ldr	r3, [sp, #32]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	dd05      	ble.n	801e8a8 <_dtoa_r+0x810>
 801e89c:	4621      	mov	r1, r4
 801e89e:	461a      	mov	r2, r3
 801e8a0:	4658      	mov	r0, fp
 801e8a2:	f000 fb77 	bl	801ef94 <__lshift>
 801e8a6:	4604      	mov	r4, r0
 801e8a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d059      	beq.n	801e962 <_dtoa_r+0x8ca>
 801e8ae:	4621      	mov	r1, r4
 801e8b0:	4648      	mov	r0, r9
 801e8b2:	f000 fbdb 	bl	801f06c <__mcmp>
 801e8b6:	2800      	cmp	r0, #0
 801e8b8:	da53      	bge.n	801e962 <_dtoa_r+0x8ca>
 801e8ba:	1e7b      	subs	r3, r7, #1
 801e8bc:	9304      	str	r3, [sp, #16]
 801e8be:	4649      	mov	r1, r9
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	220a      	movs	r2, #10
 801e8c4:	4658      	mov	r0, fp
 801e8c6:	f000 f9d3 	bl	801ec70 <__multadd>
 801e8ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e8cc:	4681      	mov	r9, r0
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	f000 816f 	beq.w	801ebb2 <_dtoa_r+0xb1a>
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	4629      	mov	r1, r5
 801e8d8:	220a      	movs	r2, #10
 801e8da:	4658      	mov	r0, fp
 801e8dc:	f000 f9c8 	bl	801ec70 <__multadd>
 801e8e0:	9b00      	ldr	r3, [sp, #0]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	4605      	mov	r5, r0
 801e8e6:	dc67      	bgt.n	801e9b8 <_dtoa_r+0x920>
 801e8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8ea:	2b02      	cmp	r3, #2
 801e8ec:	dc41      	bgt.n	801e972 <_dtoa_r+0x8da>
 801e8ee:	e063      	b.n	801e9b8 <_dtoa_r+0x920>
 801e8f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e8f2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e8f6:	e746      	b.n	801e786 <_dtoa_r+0x6ee>
 801e8f8:	9b07      	ldr	r3, [sp, #28]
 801e8fa:	1e5c      	subs	r4, r3, #1
 801e8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8fe:	42a3      	cmp	r3, r4
 801e900:	bfbf      	itttt	lt
 801e902:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e904:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e906:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e908:	1ae3      	sublt	r3, r4, r3
 801e90a:	bfb4      	ite	lt
 801e90c:	18d2      	addlt	r2, r2, r3
 801e90e:	1b1c      	subge	r4, r3, r4
 801e910:	9b07      	ldr	r3, [sp, #28]
 801e912:	bfbc      	itt	lt
 801e914:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e916:	2400      	movlt	r4, #0
 801e918:	2b00      	cmp	r3, #0
 801e91a:	bfb5      	itete	lt
 801e91c:	eba8 0603 	sublt.w	r6, r8, r3
 801e920:	9b07      	ldrge	r3, [sp, #28]
 801e922:	2300      	movlt	r3, #0
 801e924:	4646      	movge	r6, r8
 801e926:	e730      	b.n	801e78a <_dtoa_r+0x6f2>
 801e928:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e92a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e92c:	4646      	mov	r6, r8
 801e92e:	e735      	b.n	801e79c <_dtoa_r+0x704>
 801e930:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e932:	e75c      	b.n	801e7ee <_dtoa_r+0x756>
 801e934:	2300      	movs	r3, #0
 801e936:	e788      	b.n	801e84a <_dtoa_r+0x7b2>
 801e938:	3fe00000 	.word	0x3fe00000
 801e93c:	40240000 	.word	0x40240000
 801e940:	40140000 	.word	0x40140000
 801e944:	9b02      	ldr	r3, [sp, #8]
 801e946:	e780      	b.n	801e84a <_dtoa_r+0x7b2>
 801e948:	2300      	movs	r3, #0
 801e94a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e94c:	e782      	b.n	801e854 <_dtoa_r+0x7bc>
 801e94e:	d099      	beq.n	801e884 <_dtoa_r+0x7ec>
 801e950:	9a08      	ldr	r2, [sp, #32]
 801e952:	331c      	adds	r3, #28
 801e954:	441a      	add	r2, r3
 801e956:	4498      	add	r8, r3
 801e958:	441e      	add	r6, r3
 801e95a:	9208      	str	r2, [sp, #32]
 801e95c:	e792      	b.n	801e884 <_dtoa_r+0x7ec>
 801e95e:	4603      	mov	r3, r0
 801e960:	e7f6      	b.n	801e950 <_dtoa_r+0x8b8>
 801e962:	9b07      	ldr	r3, [sp, #28]
 801e964:	9704      	str	r7, [sp, #16]
 801e966:	2b00      	cmp	r3, #0
 801e968:	dc20      	bgt.n	801e9ac <_dtoa_r+0x914>
 801e96a:	9300      	str	r3, [sp, #0]
 801e96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e96e:	2b02      	cmp	r3, #2
 801e970:	dd1e      	ble.n	801e9b0 <_dtoa_r+0x918>
 801e972:	9b00      	ldr	r3, [sp, #0]
 801e974:	2b00      	cmp	r3, #0
 801e976:	f47f aec0 	bne.w	801e6fa <_dtoa_r+0x662>
 801e97a:	4621      	mov	r1, r4
 801e97c:	2205      	movs	r2, #5
 801e97e:	4658      	mov	r0, fp
 801e980:	f000 f976 	bl	801ec70 <__multadd>
 801e984:	4601      	mov	r1, r0
 801e986:	4604      	mov	r4, r0
 801e988:	4648      	mov	r0, r9
 801e98a:	f000 fb6f 	bl	801f06c <__mcmp>
 801e98e:	2800      	cmp	r0, #0
 801e990:	f77f aeb3 	ble.w	801e6fa <_dtoa_r+0x662>
 801e994:	4656      	mov	r6, sl
 801e996:	2331      	movs	r3, #49	@ 0x31
 801e998:	f806 3b01 	strb.w	r3, [r6], #1
 801e99c:	9b04      	ldr	r3, [sp, #16]
 801e99e:	3301      	adds	r3, #1
 801e9a0:	9304      	str	r3, [sp, #16]
 801e9a2:	e6ae      	b.n	801e702 <_dtoa_r+0x66a>
 801e9a4:	9c07      	ldr	r4, [sp, #28]
 801e9a6:	9704      	str	r7, [sp, #16]
 801e9a8:	4625      	mov	r5, r4
 801e9aa:	e7f3      	b.n	801e994 <_dtoa_r+0x8fc>
 801e9ac:	9b07      	ldr	r3, [sp, #28]
 801e9ae:	9300      	str	r3, [sp, #0]
 801e9b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	f000 8101 	beq.w	801ebba <_dtoa_r+0xb22>
 801e9b8:	2e00      	cmp	r6, #0
 801e9ba:	dd05      	ble.n	801e9c8 <_dtoa_r+0x930>
 801e9bc:	4629      	mov	r1, r5
 801e9be:	4632      	mov	r2, r6
 801e9c0:	4658      	mov	r0, fp
 801e9c2:	f000 fae7 	bl	801ef94 <__lshift>
 801e9c6:	4605      	mov	r5, r0
 801e9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d059      	beq.n	801ea82 <_dtoa_r+0x9ea>
 801e9ce:	6869      	ldr	r1, [r5, #4]
 801e9d0:	4658      	mov	r0, fp
 801e9d2:	f000 f91f 	bl	801ec14 <_Balloc>
 801e9d6:	4606      	mov	r6, r0
 801e9d8:	b920      	cbnz	r0, 801e9e4 <_dtoa_r+0x94c>
 801e9da:	4b83      	ldr	r3, [pc, #524]	@ (801ebe8 <_dtoa_r+0xb50>)
 801e9dc:	4602      	mov	r2, r0
 801e9de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e9e2:	e480      	b.n	801e2e6 <_dtoa_r+0x24e>
 801e9e4:	692a      	ldr	r2, [r5, #16]
 801e9e6:	3202      	adds	r2, #2
 801e9e8:	0092      	lsls	r2, r2, #2
 801e9ea:	f105 010c 	add.w	r1, r5, #12
 801e9ee:	300c      	adds	r0, #12
 801e9f0:	f7fb fa1a 	bl	8019e28 <memcpy>
 801e9f4:	2201      	movs	r2, #1
 801e9f6:	4631      	mov	r1, r6
 801e9f8:	4658      	mov	r0, fp
 801e9fa:	f000 facb 	bl	801ef94 <__lshift>
 801e9fe:	f10a 0301 	add.w	r3, sl, #1
 801ea02:	9307      	str	r3, [sp, #28]
 801ea04:	9b00      	ldr	r3, [sp, #0]
 801ea06:	4453      	add	r3, sl
 801ea08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea0a:	9b02      	ldr	r3, [sp, #8]
 801ea0c:	f003 0301 	and.w	r3, r3, #1
 801ea10:	462f      	mov	r7, r5
 801ea12:	930a      	str	r3, [sp, #40]	@ 0x28
 801ea14:	4605      	mov	r5, r0
 801ea16:	9b07      	ldr	r3, [sp, #28]
 801ea18:	4621      	mov	r1, r4
 801ea1a:	3b01      	subs	r3, #1
 801ea1c:	4648      	mov	r0, r9
 801ea1e:	9300      	str	r3, [sp, #0]
 801ea20:	f7ff fab2 	bl	801df88 <quorem>
 801ea24:	4639      	mov	r1, r7
 801ea26:	9002      	str	r0, [sp, #8]
 801ea28:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ea2c:	4648      	mov	r0, r9
 801ea2e:	f000 fb1d 	bl	801f06c <__mcmp>
 801ea32:	462a      	mov	r2, r5
 801ea34:	9008      	str	r0, [sp, #32]
 801ea36:	4621      	mov	r1, r4
 801ea38:	4658      	mov	r0, fp
 801ea3a:	f000 fb33 	bl	801f0a4 <__mdiff>
 801ea3e:	68c2      	ldr	r2, [r0, #12]
 801ea40:	4606      	mov	r6, r0
 801ea42:	bb02      	cbnz	r2, 801ea86 <_dtoa_r+0x9ee>
 801ea44:	4601      	mov	r1, r0
 801ea46:	4648      	mov	r0, r9
 801ea48:	f000 fb10 	bl	801f06c <__mcmp>
 801ea4c:	4602      	mov	r2, r0
 801ea4e:	4631      	mov	r1, r6
 801ea50:	4658      	mov	r0, fp
 801ea52:	920e      	str	r2, [sp, #56]	@ 0x38
 801ea54:	f000 f903 	bl	801ec5e <_Bfree>
 801ea58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea5c:	9e07      	ldr	r6, [sp, #28]
 801ea5e:	ea43 0102 	orr.w	r1, r3, r2
 801ea62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea64:	4319      	orrs	r1, r3
 801ea66:	d110      	bne.n	801ea8a <_dtoa_r+0x9f2>
 801ea68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ea6c:	d029      	beq.n	801eac2 <_dtoa_r+0xa2a>
 801ea6e:	9b08      	ldr	r3, [sp, #32]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	dd02      	ble.n	801ea7a <_dtoa_r+0x9e2>
 801ea74:	9b02      	ldr	r3, [sp, #8]
 801ea76:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801ea7a:	9b00      	ldr	r3, [sp, #0]
 801ea7c:	f883 8000 	strb.w	r8, [r3]
 801ea80:	e640      	b.n	801e704 <_dtoa_r+0x66c>
 801ea82:	4628      	mov	r0, r5
 801ea84:	e7bb      	b.n	801e9fe <_dtoa_r+0x966>
 801ea86:	2201      	movs	r2, #1
 801ea88:	e7e1      	b.n	801ea4e <_dtoa_r+0x9b6>
 801ea8a:	9b08      	ldr	r3, [sp, #32]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	db04      	blt.n	801ea9a <_dtoa_r+0xa02>
 801ea90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ea92:	430b      	orrs	r3, r1
 801ea94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea96:	430b      	orrs	r3, r1
 801ea98:	d120      	bne.n	801eadc <_dtoa_r+0xa44>
 801ea9a:	2a00      	cmp	r2, #0
 801ea9c:	dded      	ble.n	801ea7a <_dtoa_r+0x9e2>
 801ea9e:	4649      	mov	r1, r9
 801eaa0:	2201      	movs	r2, #1
 801eaa2:	4658      	mov	r0, fp
 801eaa4:	f000 fa76 	bl	801ef94 <__lshift>
 801eaa8:	4621      	mov	r1, r4
 801eaaa:	4681      	mov	r9, r0
 801eaac:	f000 fade 	bl	801f06c <__mcmp>
 801eab0:	2800      	cmp	r0, #0
 801eab2:	dc03      	bgt.n	801eabc <_dtoa_r+0xa24>
 801eab4:	d1e1      	bne.n	801ea7a <_dtoa_r+0x9e2>
 801eab6:	f018 0f01 	tst.w	r8, #1
 801eaba:	d0de      	beq.n	801ea7a <_dtoa_r+0x9e2>
 801eabc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801eac0:	d1d8      	bne.n	801ea74 <_dtoa_r+0x9dc>
 801eac2:	9a00      	ldr	r2, [sp, #0]
 801eac4:	2339      	movs	r3, #57	@ 0x39
 801eac6:	7013      	strb	r3, [r2, #0]
 801eac8:	4633      	mov	r3, r6
 801eaca:	461e      	mov	r6, r3
 801eacc:	3b01      	subs	r3, #1
 801eace:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ead2:	2a39      	cmp	r2, #57	@ 0x39
 801ead4:	d052      	beq.n	801eb7c <_dtoa_r+0xae4>
 801ead6:	3201      	adds	r2, #1
 801ead8:	701a      	strb	r2, [r3, #0]
 801eada:	e613      	b.n	801e704 <_dtoa_r+0x66c>
 801eadc:	2a00      	cmp	r2, #0
 801eade:	dd07      	ble.n	801eaf0 <_dtoa_r+0xa58>
 801eae0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801eae4:	d0ed      	beq.n	801eac2 <_dtoa_r+0xa2a>
 801eae6:	9a00      	ldr	r2, [sp, #0]
 801eae8:	f108 0301 	add.w	r3, r8, #1
 801eaec:	7013      	strb	r3, [r2, #0]
 801eaee:	e609      	b.n	801e704 <_dtoa_r+0x66c>
 801eaf0:	9b07      	ldr	r3, [sp, #28]
 801eaf2:	9a07      	ldr	r2, [sp, #28]
 801eaf4:	f803 8c01 	strb.w	r8, [r3, #-1]
 801eaf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eafa:	4293      	cmp	r3, r2
 801eafc:	d028      	beq.n	801eb50 <_dtoa_r+0xab8>
 801eafe:	4649      	mov	r1, r9
 801eb00:	2300      	movs	r3, #0
 801eb02:	220a      	movs	r2, #10
 801eb04:	4658      	mov	r0, fp
 801eb06:	f000 f8b3 	bl	801ec70 <__multadd>
 801eb0a:	42af      	cmp	r7, r5
 801eb0c:	4681      	mov	r9, r0
 801eb0e:	f04f 0300 	mov.w	r3, #0
 801eb12:	f04f 020a 	mov.w	r2, #10
 801eb16:	4639      	mov	r1, r7
 801eb18:	4658      	mov	r0, fp
 801eb1a:	d107      	bne.n	801eb2c <_dtoa_r+0xa94>
 801eb1c:	f000 f8a8 	bl	801ec70 <__multadd>
 801eb20:	4607      	mov	r7, r0
 801eb22:	4605      	mov	r5, r0
 801eb24:	9b07      	ldr	r3, [sp, #28]
 801eb26:	3301      	adds	r3, #1
 801eb28:	9307      	str	r3, [sp, #28]
 801eb2a:	e774      	b.n	801ea16 <_dtoa_r+0x97e>
 801eb2c:	f000 f8a0 	bl	801ec70 <__multadd>
 801eb30:	4629      	mov	r1, r5
 801eb32:	4607      	mov	r7, r0
 801eb34:	2300      	movs	r3, #0
 801eb36:	220a      	movs	r2, #10
 801eb38:	4658      	mov	r0, fp
 801eb3a:	f000 f899 	bl	801ec70 <__multadd>
 801eb3e:	4605      	mov	r5, r0
 801eb40:	e7f0      	b.n	801eb24 <_dtoa_r+0xa8c>
 801eb42:	9b00      	ldr	r3, [sp, #0]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	bfcc      	ite	gt
 801eb48:	461e      	movgt	r6, r3
 801eb4a:	2601      	movle	r6, #1
 801eb4c:	4456      	add	r6, sl
 801eb4e:	2700      	movs	r7, #0
 801eb50:	4649      	mov	r1, r9
 801eb52:	2201      	movs	r2, #1
 801eb54:	4658      	mov	r0, fp
 801eb56:	f000 fa1d 	bl	801ef94 <__lshift>
 801eb5a:	4621      	mov	r1, r4
 801eb5c:	4681      	mov	r9, r0
 801eb5e:	f000 fa85 	bl	801f06c <__mcmp>
 801eb62:	2800      	cmp	r0, #0
 801eb64:	dcb0      	bgt.n	801eac8 <_dtoa_r+0xa30>
 801eb66:	d102      	bne.n	801eb6e <_dtoa_r+0xad6>
 801eb68:	f018 0f01 	tst.w	r8, #1
 801eb6c:	d1ac      	bne.n	801eac8 <_dtoa_r+0xa30>
 801eb6e:	4633      	mov	r3, r6
 801eb70:	461e      	mov	r6, r3
 801eb72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801eb76:	2a30      	cmp	r2, #48	@ 0x30
 801eb78:	d0fa      	beq.n	801eb70 <_dtoa_r+0xad8>
 801eb7a:	e5c3      	b.n	801e704 <_dtoa_r+0x66c>
 801eb7c:	459a      	cmp	sl, r3
 801eb7e:	d1a4      	bne.n	801eaca <_dtoa_r+0xa32>
 801eb80:	9b04      	ldr	r3, [sp, #16]
 801eb82:	3301      	adds	r3, #1
 801eb84:	9304      	str	r3, [sp, #16]
 801eb86:	2331      	movs	r3, #49	@ 0x31
 801eb88:	f88a 3000 	strb.w	r3, [sl]
 801eb8c:	e5ba      	b.n	801e704 <_dtoa_r+0x66c>
 801eb8e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801eb90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801ebec <_dtoa_r+0xb54>
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	f43f aab6 	beq.w	801e106 <_dtoa_r+0x6e>
 801eb9a:	f10a 0308 	add.w	r3, sl, #8
 801eb9e:	f7ff bab0 	b.w	801e102 <_dtoa_r+0x6a>
 801eba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eba4:	2b01      	cmp	r3, #1
 801eba6:	f77f ae3a 	ble.w	801e81e <_dtoa_r+0x786>
 801ebaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ebac:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebae:	2001      	movs	r0, #1
 801ebb0:	e658      	b.n	801e864 <_dtoa_r+0x7cc>
 801ebb2:	9b00      	ldr	r3, [sp, #0]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	f77f aed9 	ble.w	801e96c <_dtoa_r+0x8d4>
 801ebba:	4656      	mov	r6, sl
 801ebbc:	4621      	mov	r1, r4
 801ebbe:	4648      	mov	r0, r9
 801ebc0:	f7ff f9e2 	bl	801df88 <quorem>
 801ebc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ebc8:	f806 8b01 	strb.w	r8, [r6], #1
 801ebcc:	9b00      	ldr	r3, [sp, #0]
 801ebce:	eba6 020a 	sub.w	r2, r6, sl
 801ebd2:	4293      	cmp	r3, r2
 801ebd4:	ddb5      	ble.n	801eb42 <_dtoa_r+0xaaa>
 801ebd6:	4649      	mov	r1, r9
 801ebd8:	2300      	movs	r3, #0
 801ebda:	220a      	movs	r2, #10
 801ebdc:	4658      	mov	r0, fp
 801ebde:	f000 f847 	bl	801ec70 <__multadd>
 801ebe2:	4681      	mov	r9, r0
 801ebe4:	e7ea      	b.n	801ebbc <_dtoa_r+0xb24>
 801ebe6:	bf00      	nop
 801ebe8:	080209d3 	.word	0x080209d3
 801ebec:	080209c6 	.word	0x080209c6

0801ebf0 <__ascii_mbtowc>:
 801ebf0:	b082      	sub	sp, #8
 801ebf2:	b901      	cbnz	r1, 801ebf6 <__ascii_mbtowc+0x6>
 801ebf4:	a901      	add	r1, sp, #4
 801ebf6:	b142      	cbz	r2, 801ec0a <__ascii_mbtowc+0x1a>
 801ebf8:	b14b      	cbz	r3, 801ec0e <__ascii_mbtowc+0x1e>
 801ebfa:	7813      	ldrb	r3, [r2, #0]
 801ebfc:	600b      	str	r3, [r1, #0]
 801ebfe:	7812      	ldrb	r2, [r2, #0]
 801ec00:	1e10      	subs	r0, r2, #0
 801ec02:	bf18      	it	ne
 801ec04:	2001      	movne	r0, #1
 801ec06:	b002      	add	sp, #8
 801ec08:	4770      	bx	lr
 801ec0a:	4610      	mov	r0, r2
 801ec0c:	e7fb      	b.n	801ec06 <__ascii_mbtowc+0x16>
 801ec0e:	f06f 0001 	mvn.w	r0, #1
 801ec12:	e7f8      	b.n	801ec06 <__ascii_mbtowc+0x16>

0801ec14 <_Balloc>:
 801ec14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801ec16:	b570      	push	{r4, r5, r6, lr}
 801ec18:	4605      	mov	r5, r0
 801ec1a:	460c      	mov	r4, r1
 801ec1c:	b17b      	cbz	r3, 801ec3e <_Balloc+0x2a>
 801ec1e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801ec20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ec24:	b9a0      	cbnz	r0, 801ec50 <_Balloc+0x3c>
 801ec26:	2101      	movs	r1, #1
 801ec28:	fa01 f604 	lsl.w	r6, r1, r4
 801ec2c:	1d72      	adds	r2, r6, #5
 801ec2e:	0092      	lsls	r2, r2, #2
 801ec30:	4628      	mov	r0, r5
 801ec32:	f000 fe59 	bl	801f8e8 <_calloc_r>
 801ec36:	b148      	cbz	r0, 801ec4c <_Balloc+0x38>
 801ec38:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801ec3c:	e00b      	b.n	801ec56 <_Balloc+0x42>
 801ec3e:	2221      	movs	r2, #33	@ 0x21
 801ec40:	2104      	movs	r1, #4
 801ec42:	f000 fe51 	bl	801f8e8 <_calloc_r>
 801ec46:	6468      	str	r0, [r5, #68]	@ 0x44
 801ec48:	2800      	cmp	r0, #0
 801ec4a:	d1e8      	bne.n	801ec1e <_Balloc+0xa>
 801ec4c:	2000      	movs	r0, #0
 801ec4e:	bd70      	pop	{r4, r5, r6, pc}
 801ec50:	6802      	ldr	r2, [r0, #0]
 801ec52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801ec56:	2300      	movs	r3, #0
 801ec58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ec5c:	e7f7      	b.n	801ec4e <_Balloc+0x3a>

0801ec5e <_Bfree>:
 801ec5e:	b131      	cbz	r1, 801ec6e <_Bfree+0x10>
 801ec60:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801ec62:	684a      	ldr	r2, [r1, #4]
 801ec64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ec68:	6008      	str	r0, [r1, #0]
 801ec6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ec6e:	4770      	bx	lr

0801ec70 <__multadd>:
 801ec70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec74:	690d      	ldr	r5, [r1, #16]
 801ec76:	4607      	mov	r7, r0
 801ec78:	460c      	mov	r4, r1
 801ec7a:	461e      	mov	r6, r3
 801ec7c:	f101 0c14 	add.w	ip, r1, #20
 801ec80:	2000      	movs	r0, #0
 801ec82:	f8dc 3000 	ldr.w	r3, [ip]
 801ec86:	b299      	uxth	r1, r3
 801ec88:	fb02 6101 	mla	r1, r2, r1, r6
 801ec8c:	0c1e      	lsrs	r6, r3, #16
 801ec8e:	0c0b      	lsrs	r3, r1, #16
 801ec90:	fb02 3306 	mla	r3, r2, r6, r3
 801ec94:	b289      	uxth	r1, r1
 801ec96:	3001      	adds	r0, #1
 801ec98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ec9c:	4285      	cmp	r5, r0
 801ec9e:	f84c 1b04 	str.w	r1, [ip], #4
 801eca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801eca6:	dcec      	bgt.n	801ec82 <__multadd+0x12>
 801eca8:	b30e      	cbz	r6, 801ecee <__multadd+0x7e>
 801ecaa:	68a3      	ldr	r3, [r4, #8]
 801ecac:	42ab      	cmp	r3, r5
 801ecae:	dc19      	bgt.n	801ece4 <__multadd+0x74>
 801ecb0:	6861      	ldr	r1, [r4, #4]
 801ecb2:	4638      	mov	r0, r7
 801ecb4:	3101      	adds	r1, #1
 801ecb6:	f7ff ffad 	bl	801ec14 <_Balloc>
 801ecba:	4680      	mov	r8, r0
 801ecbc:	b928      	cbnz	r0, 801ecca <__multadd+0x5a>
 801ecbe:	4602      	mov	r2, r0
 801ecc0:	4b0c      	ldr	r3, [pc, #48]	@ (801ecf4 <__multadd+0x84>)
 801ecc2:	480d      	ldr	r0, [pc, #52]	@ (801ecf8 <__multadd+0x88>)
 801ecc4:	21ba      	movs	r1, #186	@ 0xba
 801ecc6:	f000 fdf1 	bl	801f8ac <__assert_func>
 801ecca:	6922      	ldr	r2, [r4, #16]
 801eccc:	3202      	adds	r2, #2
 801ecce:	f104 010c 	add.w	r1, r4, #12
 801ecd2:	0092      	lsls	r2, r2, #2
 801ecd4:	300c      	adds	r0, #12
 801ecd6:	f7fb f8a7 	bl	8019e28 <memcpy>
 801ecda:	4621      	mov	r1, r4
 801ecdc:	4638      	mov	r0, r7
 801ecde:	f7ff ffbe 	bl	801ec5e <_Bfree>
 801ece2:	4644      	mov	r4, r8
 801ece4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ece8:	3501      	adds	r5, #1
 801ecea:	615e      	str	r6, [r3, #20]
 801ecec:	6125      	str	r5, [r4, #16]
 801ecee:	4620      	mov	r0, r4
 801ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecf4:	080209d3 	.word	0x080209d3
 801ecf8:	08020a3c 	.word	0x08020a3c

0801ecfc <__hi0bits>:
 801ecfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ed00:	4603      	mov	r3, r0
 801ed02:	bf36      	itet	cc
 801ed04:	0403      	lslcc	r3, r0, #16
 801ed06:	2000      	movcs	r0, #0
 801ed08:	2010      	movcc	r0, #16
 801ed0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ed0e:	bf3c      	itt	cc
 801ed10:	021b      	lslcc	r3, r3, #8
 801ed12:	3008      	addcc	r0, #8
 801ed14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ed18:	bf3c      	itt	cc
 801ed1a:	011b      	lslcc	r3, r3, #4
 801ed1c:	3004      	addcc	r0, #4
 801ed1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ed22:	bf3c      	itt	cc
 801ed24:	009b      	lslcc	r3, r3, #2
 801ed26:	3002      	addcc	r0, #2
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	db05      	blt.n	801ed38 <__hi0bits+0x3c>
 801ed2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ed30:	f100 0001 	add.w	r0, r0, #1
 801ed34:	bf08      	it	eq
 801ed36:	2020      	moveq	r0, #32
 801ed38:	4770      	bx	lr

0801ed3a <__lo0bits>:
 801ed3a:	6803      	ldr	r3, [r0, #0]
 801ed3c:	4602      	mov	r2, r0
 801ed3e:	f013 0007 	ands.w	r0, r3, #7
 801ed42:	d00b      	beq.n	801ed5c <__lo0bits+0x22>
 801ed44:	07d9      	lsls	r1, r3, #31
 801ed46:	d421      	bmi.n	801ed8c <__lo0bits+0x52>
 801ed48:	0798      	lsls	r0, r3, #30
 801ed4a:	bf49      	itett	mi
 801ed4c:	085b      	lsrmi	r3, r3, #1
 801ed4e:	089b      	lsrpl	r3, r3, #2
 801ed50:	2001      	movmi	r0, #1
 801ed52:	6013      	strmi	r3, [r2, #0]
 801ed54:	bf5c      	itt	pl
 801ed56:	6013      	strpl	r3, [r2, #0]
 801ed58:	2002      	movpl	r0, #2
 801ed5a:	4770      	bx	lr
 801ed5c:	b299      	uxth	r1, r3
 801ed5e:	b909      	cbnz	r1, 801ed64 <__lo0bits+0x2a>
 801ed60:	0c1b      	lsrs	r3, r3, #16
 801ed62:	2010      	movs	r0, #16
 801ed64:	b2d9      	uxtb	r1, r3
 801ed66:	b909      	cbnz	r1, 801ed6c <__lo0bits+0x32>
 801ed68:	3008      	adds	r0, #8
 801ed6a:	0a1b      	lsrs	r3, r3, #8
 801ed6c:	0719      	lsls	r1, r3, #28
 801ed6e:	bf04      	itt	eq
 801ed70:	091b      	lsreq	r3, r3, #4
 801ed72:	3004      	addeq	r0, #4
 801ed74:	0799      	lsls	r1, r3, #30
 801ed76:	bf04      	itt	eq
 801ed78:	089b      	lsreq	r3, r3, #2
 801ed7a:	3002      	addeq	r0, #2
 801ed7c:	07d9      	lsls	r1, r3, #31
 801ed7e:	d403      	bmi.n	801ed88 <__lo0bits+0x4e>
 801ed80:	085b      	lsrs	r3, r3, #1
 801ed82:	f100 0001 	add.w	r0, r0, #1
 801ed86:	d003      	beq.n	801ed90 <__lo0bits+0x56>
 801ed88:	6013      	str	r3, [r2, #0]
 801ed8a:	4770      	bx	lr
 801ed8c:	2000      	movs	r0, #0
 801ed8e:	4770      	bx	lr
 801ed90:	2020      	movs	r0, #32
 801ed92:	4770      	bx	lr

0801ed94 <__i2b>:
 801ed94:	b510      	push	{r4, lr}
 801ed96:	460c      	mov	r4, r1
 801ed98:	2101      	movs	r1, #1
 801ed9a:	f7ff ff3b 	bl	801ec14 <_Balloc>
 801ed9e:	4602      	mov	r2, r0
 801eda0:	b928      	cbnz	r0, 801edae <__i2b+0x1a>
 801eda2:	4b05      	ldr	r3, [pc, #20]	@ (801edb8 <__i2b+0x24>)
 801eda4:	4805      	ldr	r0, [pc, #20]	@ (801edbc <__i2b+0x28>)
 801eda6:	f240 1145 	movw	r1, #325	@ 0x145
 801edaa:	f000 fd7f 	bl	801f8ac <__assert_func>
 801edae:	2301      	movs	r3, #1
 801edb0:	6144      	str	r4, [r0, #20]
 801edb2:	6103      	str	r3, [r0, #16]
 801edb4:	bd10      	pop	{r4, pc}
 801edb6:	bf00      	nop
 801edb8:	080209d3 	.word	0x080209d3
 801edbc:	08020a3c 	.word	0x08020a3c

0801edc0 <__multiply>:
 801edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edc4:	4614      	mov	r4, r2
 801edc6:	690a      	ldr	r2, [r1, #16]
 801edc8:	6923      	ldr	r3, [r4, #16]
 801edca:	429a      	cmp	r2, r3
 801edcc:	bfa8      	it	ge
 801edce:	4623      	movge	r3, r4
 801edd0:	460f      	mov	r7, r1
 801edd2:	bfa4      	itt	ge
 801edd4:	460c      	movge	r4, r1
 801edd6:	461f      	movge	r7, r3
 801edd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801eddc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ede0:	68a3      	ldr	r3, [r4, #8]
 801ede2:	6861      	ldr	r1, [r4, #4]
 801ede4:	eb0a 0609 	add.w	r6, sl, r9
 801ede8:	42b3      	cmp	r3, r6
 801edea:	b085      	sub	sp, #20
 801edec:	bfb8      	it	lt
 801edee:	3101      	addlt	r1, #1
 801edf0:	f7ff ff10 	bl	801ec14 <_Balloc>
 801edf4:	b930      	cbnz	r0, 801ee04 <__multiply+0x44>
 801edf6:	4602      	mov	r2, r0
 801edf8:	4b44      	ldr	r3, [pc, #272]	@ (801ef0c <__multiply+0x14c>)
 801edfa:	4845      	ldr	r0, [pc, #276]	@ (801ef10 <__multiply+0x150>)
 801edfc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ee00:	f000 fd54 	bl	801f8ac <__assert_func>
 801ee04:	f100 0514 	add.w	r5, r0, #20
 801ee08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ee0c:	462b      	mov	r3, r5
 801ee0e:	2200      	movs	r2, #0
 801ee10:	4543      	cmp	r3, r8
 801ee12:	d321      	bcc.n	801ee58 <__multiply+0x98>
 801ee14:	f107 0114 	add.w	r1, r7, #20
 801ee18:	f104 0214 	add.w	r2, r4, #20
 801ee1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ee20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ee24:	9302      	str	r3, [sp, #8]
 801ee26:	1b13      	subs	r3, r2, r4
 801ee28:	3b15      	subs	r3, #21
 801ee2a:	f023 0303 	bic.w	r3, r3, #3
 801ee2e:	3304      	adds	r3, #4
 801ee30:	f104 0715 	add.w	r7, r4, #21
 801ee34:	42ba      	cmp	r2, r7
 801ee36:	bf38      	it	cc
 801ee38:	2304      	movcc	r3, #4
 801ee3a:	9301      	str	r3, [sp, #4]
 801ee3c:	9b02      	ldr	r3, [sp, #8]
 801ee3e:	9103      	str	r1, [sp, #12]
 801ee40:	428b      	cmp	r3, r1
 801ee42:	d80c      	bhi.n	801ee5e <__multiply+0x9e>
 801ee44:	2e00      	cmp	r6, #0
 801ee46:	dd03      	ble.n	801ee50 <__multiply+0x90>
 801ee48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d05b      	beq.n	801ef08 <__multiply+0x148>
 801ee50:	6106      	str	r6, [r0, #16]
 801ee52:	b005      	add	sp, #20
 801ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee58:	f843 2b04 	str.w	r2, [r3], #4
 801ee5c:	e7d8      	b.n	801ee10 <__multiply+0x50>
 801ee5e:	f8b1 a000 	ldrh.w	sl, [r1]
 801ee62:	f1ba 0f00 	cmp.w	sl, #0
 801ee66:	d024      	beq.n	801eeb2 <__multiply+0xf2>
 801ee68:	f104 0e14 	add.w	lr, r4, #20
 801ee6c:	46a9      	mov	r9, r5
 801ee6e:	f04f 0c00 	mov.w	ip, #0
 801ee72:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ee76:	f8d9 3000 	ldr.w	r3, [r9]
 801ee7a:	fa1f fb87 	uxth.w	fp, r7
 801ee7e:	b29b      	uxth	r3, r3
 801ee80:	fb0a 330b 	mla	r3, sl, fp, r3
 801ee84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ee88:	f8d9 7000 	ldr.w	r7, [r9]
 801ee8c:	4463      	add	r3, ip
 801ee8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ee92:	fb0a c70b 	mla	r7, sl, fp, ip
 801ee96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ee9a:	b29b      	uxth	r3, r3
 801ee9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801eea0:	4572      	cmp	r2, lr
 801eea2:	f849 3b04 	str.w	r3, [r9], #4
 801eea6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801eeaa:	d8e2      	bhi.n	801ee72 <__multiply+0xb2>
 801eeac:	9b01      	ldr	r3, [sp, #4]
 801eeae:	f845 c003 	str.w	ip, [r5, r3]
 801eeb2:	9b03      	ldr	r3, [sp, #12]
 801eeb4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801eeb8:	3104      	adds	r1, #4
 801eeba:	f1b9 0f00 	cmp.w	r9, #0
 801eebe:	d021      	beq.n	801ef04 <__multiply+0x144>
 801eec0:	682b      	ldr	r3, [r5, #0]
 801eec2:	f104 0c14 	add.w	ip, r4, #20
 801eec6:	46ae      	mov	lr, r5
 801eec8:	f04f 0a00 	mov.w	sl, #0
 801eecc:	f8bc b000 	ldrh.w	fp, [ip]
 801eed0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801eed4:	fb09 770b 	mla	r7, r9, fp, r7
 801eed8:	4457      	add	r7, sl
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801eee0:	f84e 3b04 	str.w	r3, [lr], #4
 801eee4:	f85c 3b04 	ldr.w	r3, [ip], #4
 801eee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801eeec:	f8be 3000 	ldrh.w	r3, [lr]
 801eef0:	fb09 330a 	mla	r3, r9, sl, r3
 801eef4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801eef8:	4562      	cmp	r2, ip
 801eefa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801eefe:	d8e5      	bhi.n	801eecc <__multiply+0x10c>
 801ef00:	9f01      	ldr	r7, [sp, #4]
 801ef02:	51eb      	str	r3, [r5, r7]
 801ef04:	3504      	adds	r5, #4
 801ef06:	e799      	b.n	801ee3c <__multiply+0x7c>
 801ef08:	3e01      	subs	r6, #1
 801ef0a:	e79b      	b.n	801ee44 <__multiply+0x84>
 801ef0c:	080209d3 	.word	0x080209d3
 801ef10:	08020a3c 	.word	0x08020a3c

0801ef14 <__pow5mult>:
 801ef14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef18:	4615      	mov	r5, r2
 801ef1a:	f012 0203 	ands.w	r2, r2, #3
 801ef1e:	4607      	mov	r7, r0
 801ef20:	460e      	mov	r6, r1
 801ef22:	d007      	beq.n	801ef34 <__pow5mult+0x20>
 801ef24:	4c1a      	ldr	r4, [pc, #104]	@ (801ef90 <__pow5mult+0x7c>)
 801ef26:	3a01      	subs	r2, #1
 801ef28:	2300      	movs	r3, #0
 801ef2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ef2e:	f7ff fe9f 	bl	801ec70 <__multadd>
 801ef32:	4606      	mov	r6, r0
 801ef34:	10ad      	asrs	r5, r5, #2
 801ef36:	d027      	beq.n	801ef88 <__pow5mult+0x74>
 801ef38:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801ef3a:	b944      	cbnz	r4, 801ef4e <__pow5mult+0x3a>
 801ef3c:	f240 2171 	movw	r1, #625	@ 0x271
 801ef40:	4638      	mov	r0, r7
 801ef42:	f7ff ff27 	bl	801ed94 <__i2b>
 801ef46:	2300      	movs	r3, #0
 801ef48:	6438      	str	r0, [r7, #64]	@ 0x40
 801ef4a:	4604      	mov	r4, r0
 801ef4c:	6003      	str	r3, [r0, #0]
 801ef4e:	f04f 0900 	mov.w	r9, #0
 801ef52:	07eb      	lsls	r3, r5, #31
 801ef54:	d50a      	bpl.n	801ef6c <__pow5mult+0x58>
 801ef56:	4631      	mov	r1, r6
 801ef58:	4622      	mov	r2, r4
 801ef5a:	4638      	mov	r0, r7
 801ef5c:	f7ff ff30 	bl	801edc0 <__multiply>
 801ef60:	4631      	mov	r1, r6
 801ef62:	4680      	mov	r8, r0
 801ef64:	4638      	mov	r0, r7
 801ef66:	f7ff fe7a 	bl	801ec5e <_Bfree>
 801ef6a:	4646      	mov	r6, r8
 801ef6c:	106d      	asrs	r5, r5, #1
 801ef6e:	d00b      	beq.n	801ef88 <__pow5mult+0x74>
 801ef70:	6820      	ldr	r0, [r4, #0]
 801ef72:	b938      	cbnz	r0, 801ef84 <__pow5mult+0x70>
 801ef74:	4622      	mov	r2, r4
 801ef76:	4621      	mov	r1, r4
 801ef78:	4638      	mov	r0, r7
 801ef7a:	f7ff ff21 	bl	801edc0 <__multiply>
 801ef7e:	6020      	str	r0, [r4, #0]
 801ef80:	f8c0 9000 	str.w	r9, [r0]
 801ef84:	4604      	mov	r4, r0
 801ef86:	e7e4      	b.n	801ef52 <__pow5mult+0x3e>
 801ef88:	4630      	mov	r0, r6
 801ef8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef8e:	bf00      	nop
 801ef90:	08020a98 	.word	0x08020a98

0801ef94 <__lshift>:
 801ef94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef98:	460c      	mov	r4, r1
 801ef9a:	6849      	ldr	r1, [r1, #4]
 801ef9c:	6923      	ldr	r3, [r4, #16]
 801ef9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801efa2:	68a3      	ldr	r3, [r4, #8]
 801efa4:	4607      	mov	r7, r0
 801efa6:	4691      	mov	r9, r2
 801efa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801efac:	f108 0601 	add.w	r6, r8, #1
 801efb0:	42b3      	cmp	r3, r6
 801efb2:	db0b      	blt.n	801efcc <__lshift+0x38>
 801efb4:	4638      	mov	r0, r7
 801efb6:	f7ff fe2d 	bl	801ec14 <_Balloc>
 801efba:	4605      	mov	r5, r0
 801efbc:	b948      	cbnz	r0, 801efd2 <__lshift+0x3e>
 801efbe:	4602      	mov	r2, r0
 801efc0:	4b28      	ldr	r3, [pc, #160]	@ (801f064 <__lshift+0xd0>)
 801efc2:	4829      	ldr	r0, [pc, #164]	@ (801f068 <__lshift+0xd4>)
 801efc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801efc8:	f000 fc70 	bl	801f8ac <__assert_func>
 801efcc:	3101      	adds	r1, #1
 801efce:	005b      	lsls	r3, r3, #1
 801efd0:	e7ee      	b.n	801efb0 <__lshift+0x1c>
 801efd2:	2300      	movs	r3, #0
 801efd4:	f100 0114 	add.w	r1, r0, #20
 801efd8:	f100 0210 	add.w	r2, r0, #16
 801efdc:	4618      	mov	r0, r3
 801efde:	4553      	cmp	r3, sl
 801efe0:	db33      	blt.n	801f04a <__lshift+0xb6>
 801efe2:	6920      	ldr	r0, [r4, #16]
 801efe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801efe8:	f104 0314 	add.w	r3, r4, #20
 801efec:	f019 091f 	ands.w	r9, r9, #31
 801eff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801eff8:	d02b      	beq.n	801f052 <__lshift+0xbe>
 801effa:	f1c9 0e20 	rsb	lr, r9, #32
 801effe:	468a      	mov	sl, r1
 801f000:	2200      	movs	r2, #0
 801f002:	6818      	ldr	r0, [r3, #0]
 801f004:	fa00 f009 	lsl.w	r0, r0, r9
 801f008:	4310      	orrs	r0, r2
 801f00a:	f84a 0b04 	str.w	r0, [sl], #4
 801f00e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f012:	459c      	cmp	ip, r3
 801f014:	fa22 f20e 	lsr.w	r2, r2, lr
 801f018:	d8f3      	bhi.n	801f002 <__lshift+0x6e>
 801f01a:	ebac 0304 	sub.w	r3, ip, r4
 801f01e:	3b15      	subs	r3, #21
 801f020:	f023 0303 	bic.w	r3, r3, #3
 801f024:	3304      	adds	r3, #4
 801f026:	f104 0015 	add.w	r0, r4, #21
 801f02a:	4584      	cmp	ip, r0
 801f02c:	bf38      	it	cc
 801f02e:	2304      	movcc	r3, #4
 801f030:	50ca      	str	r2, [r1, r3]
 801f032:	b10a      	cbz	r2, 801f038 <__lshift+0xa4>
 801f034:	f108 0602 	add.w	r6, r8, #2
 801f038:	3e01      	subs	r6, #1
 801f03a:	4638      	mov	r0, r7
 801f03c:	612e      	str	r6, [r5, #16]
 801f03e:	4621      	mov	r1, r4
 801f040:	f7ff fe0d 	bl	801ec5e <_Bfree>
 801f044:	4628      	mov	r0, r5
 801f046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f04a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f04e:	3301      	adds	r3, #1
 801f050:	e7c5      	b.n	801efde <__lshift+0x4a>
 801f052:	3904      	subs	r1, #4
 801f054:	f853 2b04 	ldr.w	r2, [r3], #4
 801f058:	f841 2f04 	str.w	r2, [r1, #4]!
 801f05c:	459c      	cmp	ip, r3
 801f05e:	d8f9      	bhi.n	801f054 <__lshift+0xc0>
 801f060:	e7ea      	b.n	801f038 <__lshift+0xa4>
 801f062:	bf00      	nop
 801f064:	080209d3 	.word	0x080209d3
 801f068:	08020a3c 	.word	0x08020a3c

0801f06c <__mcmp>:
 801f06c:	690a      	ldr	r2, [r1, #16]
 801f06e:	4603      	mov	r3, r0
 801f070:	6900      	ldr	r0, [r0, #16]
 801f072:	1a80      	subs	r0, r0, r2
 801f074:	b530      	push	{r4, r5, lr}
 801f076:	d10e      	bne.n	801f096 <__mcmp+0x2a>
 801f078:	3314      	adds	r3, #20
 801f07a:	3114      	adds	r1, #20
 801f07c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f08c:	4295      	cmp	r5, r2
 801f08e:	d003      	beq.n	801f098 <__mcmp+0x2c>
 801f090:	d205      	bcs.n	801f09e <__mcmp+0x32>
 801f092:	f04f 30ff 	mov.w	r0, #4294967295
 801f096:	bd30      	pop	{r4, r5, pc}
 801f098:	42a3      	cmp	r3, r4
 801f09a:	d3f3      	bcc.n	801f084 <__mcmp+0x18>
 801f09c:	e7fb      	b.n	801f096 <__mcmp+0x2a>
 801f09e:	2001      	movs	r0, #1
 801f0a0:	e7f9      	b.n	801f096 <__mcmp+0x2a>
	...

0801f0a4 <__mdiff>:
 801f0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a8:	4689      	mov	r9, r1
 801f0aa:	4606      	mov	r6, r0
 801f0ac:	4611      	mov	r1, r2
 801f0ae:	4648      	mov	r0, r9
 801f0b0:	4614      	mov	r4, r2
 801f0b2:	f7ff ffdb 	bl	801f06c <__mcmp>
 801f0b6:	1e05      	subs	r5, r0, #0
 801f0b8:	d112      	bne.n	801f0e0 <__mdiff+0x3c>
 801f0ba:	4629      	mov	r1, r5
 801f0bc:	4630      	mov	r0, r6
 801f0be:	f7ff fda9 	bl	801ec14 <_Balloc>
 801f0c2:	4602      	mov	r2, r0
 801f0c4:	b928      	cbnz	r0, 801f0d2 <__mdiff+0x2e>
 801f0c6:	4b3f      	ldr	r3, [pc, #252]	@ (801f1c4 <__mdiff+0x120>)
 801f0c8:	f240 2137 	movw	r1, #567	@ 0x237
 801f0cc:	483e      	ldr	r0, [pc, #248]	@ (801f1c8 <__mdiff+0x124>)
 801f0ce:	f000 fbed 	bl	801f8ac <__assert_func>
 801f0d2:	2301      	movs	r3, #1
 801f0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f0d8:	4610      	mov	r0, r2
 801f0da:	b003      	add	sp, #12
 801f0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0e0:	bfbc      	itt	lt
 801f0e2:	464b      	movlt	r3, r9
 801f0e4:	46a1      	movlt	r9, r4
 801f0e6:	4630      	mov	r0, r6
 801f0e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f0ec:	bfba      	itte	lt
 801f0ee:	461c      	movlt	r4, r3
 801f0f0:	2501      	movlt	r5, #1
 801f0f2:	2500      	movge	r5, #0
 801f0f4:	f7ff fd8e 	bl	801ec14 <_Balloc>
 801f0f8:	4602      	mov	r2, r0
 801f0fa:	b918      	cbnz	r0, 801f104 <__mdiff+0x60>
 801f0fc:	4b31      	ldr	r3, [pc, #196]	@ (801f1c4 <__mdiff+0x120>)
 801f0fe:	f240 2145 	movw	r1, #581	@ 0x245
 801f102:	e7e3      	b.n	801f0cc <__mdiff+0x28>
 801f104:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f108:	6926      	ldr	r6, [r4, #16]
 801f10a:	60c5      	str	r5, [r0, #12]
 801f10c:	f109 0310 	add.w	r3, r9, #16
 801f110:	f109 0514 	add.w	r5, r9, #20
 801f114:	f104 0e14 	add.w	lr, r4, #20
 801f118:	f100 0b14 	add.w	fp, r0, #20
 801f11c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f120:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f124:	9301      	str	r3, [sp, #4]
 801f126:	46d9      	mov	r9, fp
 801f128:	f04f 0c00 	mov.w	ip, #0
 801f12c:	9b01      	ldr	r3, [sp, #4]
 801f12e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f132:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f136:	9301      	str	r3, [sp, #4]
 801f138:	fa1f f38a 	uxth.w	r3, sl
 801f13c:	4619      	mov	r1, r3
 801f13e:	b283      	uxth	r3, r0
 801f140:	1acb      	subs	r3, r1, r3
 801f142:	0c00      	lsrs	r0, r0, #16
 801f144:	4463      	add	r3, ip
 801f146:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f14a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f14e:	b29b      	uxth	r3, r3
 801f150:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f154:	4576      	cmp	r6, lr
 801f156:	f849 3b04 	str.w	r3, [r9], #4
 801f15a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f15e:	d8e5      	bhi.n	801f12c <__mdiff+0x88>
 801f160:	1b33      	subs	r3, r6, r4
 801f162:	3b15      	subs	r3, #21
 801f164:	f023 0303 	bic.w	r3, r3, #3
 801f168:	3415      	adds	r4, #21
 801f16a:	3304      	adds	r3, #4
 801f16c:	42a6      	cmp	r6, r4
 801f16e:	bf38      	it	cc
 801f170:	2304      	movcc	r3, #4
 801f172:	441d      	add	r5, r3
 801f174:	445b      	add	r3, fp
 801f176:	461e      	mov	r6, r3
 801f178:	462c      	mov	r4, r5
 801f17a:	4544      	cmp	r4, r8
 801f17c:	d30e      	bcc.n	801f19c <__mdiff+0xf8>
 801f17e:	f108 0103 	add.w	r1, r8, #3
 801f182:	1b49      	subs	r1, r1, r5
 801f184:	f021 0103 	bic.w	r1, r1, #3
 801f188:	3d03      	subs	r5, #3
 801f18a:	45a8      	cmp	r8, r5
 801f18c:	bf38      	it	cc
 801f18e:	2100      	movcc	r1, #0
 801f190:	440b      	add	r3, r1
 801f192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f196:	b191      	cbz	r1, 801f1be <__mdiff+0x11a>
 801f198:	6117      	str	r7, [r2, #16]
 801f19a:	e79d      	b.n	801f0d8 <__mdiff+0x34>
 801f19c:	f854 1b04 	ldr.w	r1, [r4], #4
 801f1a0:	46e6      	mov	lr, ip
 801f1a2:	0c08      	lsrs	r0, r1, #16
 801f1a4:	fa1c fc81 	uxtah	ip, ip, r1
 801f1a8:	4471      	add	r1, lr
 801f1aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f1ae:	b289      	uxth	r1, r1
 801f1b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f1b4:	f846 1b04 	str.w	r1, [r6], #4
 801f1b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f1bc:	e7dd      	b.n	801f17a <__mdiff+0xd6>
 801f1be:	3f01      	subs	r7, #1
 801f1c0:	e7e7      	b.n	801f192 <__mdiff+0xee>
 801f1c2:	bf00      	nop
 801f1c4:	080209d3 	.word	0x080209d3
 801f1c8:	08020a3c 	.word	0x08020a3c

0801f1cc <__d2b>:
 801f1cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f1d0:	460f      	mov	r7, r1
 801f1d2:	2101      	movs	r1, #1
 801f1d4:	ec59 8b10 	vmov	r8, r9, d0
 801f1d8:	4616      	mov	r6, r2
 801f1da:	f7ff fd1b 	bl	801ec14 <_Balloc>
 801f1de:	4604      	mov	r4, r0
 801f1e0:	b930      	cbnz	r0, 801f1f0 <__d2b+0x24>
 801f1e2:	4602      	mov	r2, r0
 801f1e4:	4b23      	ldr	r3, [pc, #140]	@ (801f274 <__d2b+0xa8>)
 801f1e6:	4824      	ldr	r0, [pc, #144]	@ (801f278 <__d2b+0xac>)
 801f1e8:	f240 310f 	movw	r1, #783	@ 0x30f
 801f1ec:	f000 fb5e 	bl	801f8ac <__assert_func>
 801f1f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f1f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f1f8:	b10d      	cbz	r5, 801f1fe <__d2b+0x32>
 801f1fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f1fe:	9301      	str	r3, [sp, #4]
 801f200:	f1b8 0300 	subs.w	r3, r8, #0
 801f204:	d023      	beq.n	801f24e <__d2b+0x82>
 801f206:	4668      	mov	r0, sp
 801f208:	9300      	str	r3, [sp, #0]
 801f20a:	f7ff fd96 	bl	801ed3a <__lo0bits>
 801f20e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f212:	b1d0      	cbz	r0, 801f24a <__d2b+0x7e>
 801f214:	f1c0 0320 	rsb	r3, r0, #32
 801f218:	fa02 f303 	lsl.w	r3, r2, r3
 801f21c:	430b      	orrs	r3, r1
 801f21e:	40c2      	lsrs	r2, r0
 801f220:	6163      	str	r3, [r4, #20]
 801f222:	9201      	str	r2, [sp, #4]
 801f224:	9b01      	ldr	r3, [sp, #4]
 801f226:	61a3      	str	r3, [r4, #24]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	bf0c      	ite	eq
 801f22c:	2201      	moveq	r2, #1
 801f22e:	2202      	movne	r2, #2
 801f230:	6122      	str	r2, [r4, #16]
 801f232:	b1a5      	cbz	r5, 801f25e <__d2b+0x92>
 801f234:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f238:	4405      	add	r5, r0
 801f23a:	603d      	str	r5, [r7, #0]
 801f23c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f240:	6030      	str	r0, [r6, #0]
 801f242:	4620      	mov	r0, r4
 801f244:	b003      	add	sp, #12
 801f246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f24a:	6161      	str	r1, [r4, #20]
 801f24c:	e7ea      	b.n	801f224 <__d2b+0x58>
 801f24e:	a801      	add	r0, sp, #4
 801f250:	f7ff fd73 	bl	801ed3a <__lo0bits>
 801f254:	9b01      	ldr	r3, [sp, #4]
 801f256:	6163      	str	r3, [r4, #20]
 801f258:	3020      	adds	r0, #32
 801f25a:	2201      	movs	r2, #1
 801f25c:	e7e8      	b.n	801f230 <__d2b+0x64>
 801f25e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f262:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f266:	6038      	str	r0, [r7, #0]
 801f268:	6918      	ldr	r0, [r3, #16]
 801f26a:	f7ff fd47 	bl	801ecfc <__hi0bits>
 801f26e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f272:	e7e5      	b.n	801f240 <__d2b+0x74>
 801f274:	080209d3 	.word	0x080209d3
 801f278:	08020a3c 	.word	0x08020a3c

0801f27c <_realloc_r>:
 801f27c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f280:	4682      	mov	sl, r0
 801f282:	4693      	mov	fp, r2
 801f284:	460c      	mov	r4, r1
 801f286:	b929      	cbnz	r1, 801f294 <_realloc_r+0x18>
 801f288:	4611      	mov	r1, r2
 801f28a:	b003      	add	sp, #12
 801f28c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f290:	f7fa befe 	b.w	801a090 <_malloc_r>
 801f294:	f7fb f936 	bl	801a504 <__malloc_lock>
 801f298:	f10b 080b 	add.w	r8, fp, #11
 801f29c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801f2a0:	f1b8 0f16 	cmp.w	r8, #22
 801f2a4:	f1a4 0908 	sub.w	r9, r4, #8
 801f2a8:	f025 0603 	bic.w	r6, r5, #3
 801f2ac:	d908      	bls.n	801f2c0 <_realloc_r+0x44>
 801f2ae:	f038 0807 	bics.w	r8, r8, #7
 801f2b2:	d507      	bpl.n	801f2c4 <_realloc_r+0x48>
 801f2b4:	230c      	movs	r3, #12
 801f2b6:	f8ca 3000 	str.w	r3, [sl]
 801f2ba:	f04f 0b00 	mov.w	fp, #0
 801f2be:	e032      	b.n	801f326 <_realloc_r+0xaa>
 801f2c0:	f04f 0810 	mov.w	r8, #16
 801f2c4:	45c3      	cmp	fp, r8
 801f2c6:	d8f5      	bhi.n	801f2b4 <_realloc_r+0x38>
 801f2c8:	4546      	cmp	r6, r8
 801f2ca:	f280 8174 	bge.w	801f5b6 <_realloc_r+0x33a>
 801f2ce:	4b9e      	ldr	r3, [pc, #632]	@ (801f548 <_realloc_r+0x2cc>)
 801f2d0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801f2d4:	eb09 0106 	add.w	r1, r9, r6
 801f2d8:	458c      	cmp	ip, r1
 801f2da:	6848      	ldr	r0, [r1, #4]
 801f2dc:	d005      	beq.n	801f2ea <_realloc_r+0x6e>
 801f2de:	f020 0201 	bic.w	r2, r0, #1
 801f2e2:	440a      	add	r2, r1
 801f2e4:	6852      	ldr	r2, [r2, #4]
 801f2e6:	07d7      	lsls	r7, r2, #31
 801f2e8:	d449      	bmi.n	801f37e <_realloc_r+0x102>
 801f2ea:	f020 0003 	bic.w	r0, r0, #3
 801f2ee:	458c      	cmp	ip, r1
 801f2f0:	eb06 0700 	add.w	r7, r6, r0
 801f2f4:	d11b      	bne.n	801f32e <_realloc_r+0xb2>
 801f2f6:	f108 0210 	add.w	r2, r8, #16
 801f2fa:	42ba      	cmp	r2, r7
 801f2fc:	dc41      	bgt.n	801f382 <_realloc_r+0x106>
 801f2fe:	eb09 0208 	add.w	r2, r9, r8
 801f302:	eba7 0708 	sub.w	r7, r7, r8
 801f306:	f047 0701 	orr.w	r7, r7, #1
 801f30a:	609a      	str	r2, [r3, #8]
 801f30c:	6057      	str	r7, [r2, #4]
 801f30e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f312:	f003 0301 	and.w	r3, r3, #1
 801f316:	ea43 0308 	orr.w	r3, r3, r8
 801f31a:	f844 3c04 	str.w	r3, [r4, #-4]
 801f31e:	4650      	mov	r0, sl
 801f320:	f7fb f8f6 	bl	801a510 <__malloc_unlock>
 801f324:	46a3      	mov	fp, r4
 801f326:	4658      	mov	r0, fp
 801f328:	b003      	add	sp, #12
 801f32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f32e:	45b8      	cmp	r8, r7
 801f330:	dc27      	bgt.n	801f382 <_realloc_r+0x106>
 801f332:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801f336:	60d3      	str	r3, [r2, #12]
 801f338:	609a      	str	r2, [r3, #8]
 801f33a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f33e:	eba7 0008 	sub.w	r0, r7, r8
 801f342:	280f      	cmp	r0, #15
 801f344:	f003 0301 	and.w	r3, r3, #1
 801f348:	eb09 0207 	add.w	r2, r9, r7
 801f34c:	f240 8135 	bls.w	801f5ba <_realloc_r+0x33e>
 801f350:	eb09 0108 	add.w	r1, r9, r8
 801f354:	ea48 0303 	orr.w	r3, r8, r3
 801f358:	f040 0001 	orr.w	r0, r0, #1
 801f35c:	f8c9 3004 	str.w	r3, [r9, #4]
 801f360:	6048      	str	r0, [r1, #4]
 801f362:	6853      	ldr	r3, [r2, #4]
 801f364:	f043 0301 	orr.w	r3, r3, #1
 801f368:	6053      	str	r3, [r2, #4]
 801f36a:	3108      	adds	r1, #8
 801f36c:	4650      	mov	r0, sl
 801f36e:	f7fa fdcf 	bl	8019f10 <_free_r>
 801f372:	4650      	mov	r0, sl
 801f374:	f7fb f8cc 	bl	801a510 <__malloc_unlock>
 801f378:	f109 0b08 	add.w	fp, r9, #8
 801f37c:	e7d3      	b.n	801f326 <_realloc_r+0xaa>
 801f37e:	2000      	movs	r0, #0
 801f380:	4601      	mov	r1, r0
 801f382:	07ea      	lsls	r2, r5, #31
 801f384:	f100 80c7 	bmi.w	801f516 <_realloc_r+0x29a>
 801f388:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801f38c:	eba9 0505 	sub.w	r5, r9, r5
 801f390:	686a      	ldr	r2, [r5, #4]
 801f392:	f022 0203 	bic.w	r2, r2, #3
 801f396:	4432      	add	r2, r6
 801f398:	9201      	str	r2, [sp, #4]
 801f39a:	2900      	cmp	r1, #0
 801f39c:	f000 8086 	beq.w	801f4ac <_realloc_r+0x230>
 801f3a0:	458c      	cmp	ip, r1
 801f3a2:	eb00 0702 	add.w	r7, r0, r2
 801f3a6:	d149      	bne.n	801f43c <_realloc_r+0x1c0>
 801f3a8:	f108 0210 	add.w	r2, r8, #16
 801f3ac:	42ba      	cmp	r2, r7
 801f3ae:	dc7d      	bgt.n	801f4ac <_realloc_r+0x230>
 801f3b0:	46ab      	mov	fp, r5
 801f3b2:	68ea      	ldr	r2, [r5, #12]
 801f3b4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 801f3b8:	60ca      	str	r2, [r1, #12]
 801f3ba:	6091      	str	r1, [r2, #8]
 801f3bc:	1f32      	subs	r2, r6, #4
 801f3be:	2a24      	cmp	r2, #36	@ 0x24
 801f3c0:	d836      	bhi.n	801f430 <_realloc_r+0x1b4>
 801f3c2:	2a13      	cmp	r2, #19
 801f3c4:	d932      	bls.n	801f42c <_realloc_r+0x1b0>
 801f3c6:	6821      	ldr	r1, [r4, #0]
 801f3c8:	60a9      	str	r1, [r5, #8]
 801f3ca:	6861      	ldr	r1, [r4, #4]
 801f3cc:	60e9      	str	r1, [r5, #12]
 801f3ce:	2a1b      	cmp	r2, #27
 801f3d0:	d81a      	bhi.n	801f408 <_realloc_r+0x18c>
 801f3d2:	3408      	adds	r4, #8
 801f3d4:	f105 0210 	add.w	r2, r5, #16
 801f3d8:	6821      	ldr	r1, [r4, #0]
 801f3da:	6011      	str	r1, [r2, #0]
 801f3dc:	6861      	ldr	r1, [r4, #4]
 801f3de:	6051      	str	r1, [r2, #4]
 801f3e0:	68a1      	ldr	r1, [r4, #8]
 801f3e2:	6091      	str	r1, [r2, #8]
 801f3e4:	eb05 0208 	add.w	r2, r5, r8
 801f3e8:	eba7 0708 	sub.w	r7, r7, r8
 801f3ec:	f047 0701 	orr.w	r7, r7, #1
 801f3f0:	609a      	str	r2, [r3, #8]
 801f3f2:	6057      	str	r7, [r2, #4]
 801f3f4:	686b      	ldr	r3, [r5, #4]
 801f3f6:	f003 0301 	and.w	r3, r3, #1
 801f3fa:	ea43 0308 	orr.w	r3, r3, r8
 801f3fe:	606b      	str	r3, [r5, #4]
 801f400:	4650      	mov	r0, sl
 801f402:	f7fb f885 	bl	801a510 <__malloc_unlock>
 801f406:	e78e      	b.n	801f326 <_realloc_r+0xaa>
 801f408:	68a1      	ldr	r1, [r4, #8]
 801f40a:	6129      	str	r1, [r5, #16]
 801f40c:	68e1      	ldr	r1, [r4, #12]
 801f40e:	6169      	str	r1, [r5, #20]
 801f410:	2a24      	cmp	r2, #36	@ 0x24
 801f412:	bf01      	itttt	eq
 801f414:	6922      	ldreq	r2, [r4, #16]
 801f416:	61aa      	streq	r2, [r5, #24]
 801f418:	6961      	ldreq	r1, [r4, #20]
 801f41a:	61e9      	streq	r1, [r5, #28]
 801f41c:	bf19      	ittee	ne
 801f41e:	3410      	addne	r4, #16
 801f420:	f105 0218 	addne.w	r2, r5, #24
 801f424:	f105 0220 	addeq.w	r2, r5, #32
 801f428:	3418      	addeq	r4, #24
 801f42a:	e7d5      	b.n	801f3d8 <_realloc_r+0x15c>
 801f42c:	465a      	mov	r2, fp
 801f42e:	e7d3      	b.n	801f3d8 <_realloc_r+0x15c>
 801f430:	4621      	mov	r1, r4
 801f432:	4658      	mov	r0, fp
 801f434:	f7fe fcca 	bl	801ddcc <memmove>
 801f438:	4b43      	ldr	r3, [pc, #268]	@ (801f548 <_realloc_r+0x2cc>)
 801f43a:	e7d3      	b.n	801f3e4 <_realloc_r+0x168>
 801f43c:	45b8      	cmp	r8, r7
 801f43e:	dc35      	bgt.n	801f4ac <_realloc_r+0x230>
 801f440:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801f444:	4628      	mov	r0, r5
 801f446:	60d3      	str	r3, [r2, #12]
 801f448:	609a      	str	r2, [r3, #8]
 801f44a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801f44e:	68eb      	ldr	r3, [r5, #12]
 801f450:	60d3      	str	r3, [r2, #12]
 801f452:	609a      	str	r2, [r3, #8]
 801f454:	1f32      	subs	r2, r6, #4
 801f456:	2a24      	cmp	r2, #36	@ 0x24
 801f458:	d824      	bhi.n	801f4a4 <_realloc_r+0x228>
 801f45a:	2a13      	cmp	r2, #19
 801f45c:	d908      	bls.n	801f470 <_realloc_r+0x1f4>
 801f45e:	6823      	ldr	r3, [r4, #0]
 801f460:	60ab      	str	r3, [r5, #8]
 801f462:	6863      	ldr	r3, [r4, #4]
 801f464:	60eb      	str	r3, [r5, #12]
 801f466:	2a1b      	cmp	r2, #27
 801f468:	d80a      	bhi.n	801f480 <_realloc_r+0x204>
 801f46a:	3408      	adds	r4, #8
 801f46c:	f105 0010 	add.w	r0, r5, #16
 801f470:	6823      	ldr	r3, [r4, #0]
 801f472:	6003      	str	r3, [r0, #0]
 801f474:	6863      	ldr	r3, [r4, #4]
 801f476:	6043      	str	r3, [r0, #4]
 801f478:	68a3      	ldr	r3, [r4, #8]
 801f47a:	6083      	str	r3, [r0, #8]
 801f47c:	46a9      	mov	r9, r5
 801f47e:	e75c      	b.n	801f33a <_realloc_r+0xbe>
 801f480:	68a3      	ldr	r3, [r4, #8]
 801f482:	612b      	str	r3, [r5, #16]
 801f484:	68e3      	ldr	r3, [r4, #12]
 801f486:	616b      	str	r3, [r5, #20]
 801f488:	2a24      	cmp	r2, #36	@ 0x24
 801f48a:	bf01      	itttt	eq
 801f48c:	6923      	ldreq	r3, [r4, #16]
 801f48e:	61ab      	streq	r3, [r5, #24]
 801f490:	6963      	ldreq	r3, [r4, #20]
 801f492:	61eb      	streq	r3, [r5, #28]
 801f494:	bf19      	ittee	ne
 801f496:	3410      	addne	r4, #16
 801f498:	f105 0018 	addne.w	r0, r5, #24
 801f49c:	f105 0020 	addeq.w	r0, r5, #32
 801f4a0:	3418      	addeq	r4, #24
 801f4a2:	e7e5      	b.n	801f470 <_realloc_r+0x1f4>
 801f4a4:	4621      	mov	r1, r4
 801f4a6:	f7fe fc91 	bl	801ddcc <memmove>
 801f4aa:	e7e7      	b.n	801f47c <_realloc_r+0x200>
 801f4ac:	9b01      	ldr	r3, [sp, #4]
 801f4ae:	4598      	cmp	r8, r3
 801f4b0:	dc31      	bgt.n	801f516 <_realloc_r+0x29a>
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	68eb      	ldr	r3, [r5, #12]
 801f4b6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801f4ba:	60d3      	str	r3, [r2, #12]
 801f4bc:	609a      	str	r2, [r3, #8]
 801f4be:	1f32      	subs	r2, r6, #4
 801f4c0:	2a24      	cmp	r2, #36	@ 0x24
 801f4c2:	d824      	bhi.n	801f50e <_realloc_r+0x292>
 801f4c4:	2a13      	cmp	r2, #19
 801f4c6:	d908      	bls.n	801f4da <_realloc_r+0x25e>
 801f4c8:	6823      	ldr	r3, [r4, #0]
 801f4ca:	60ab      	str	r3, [r5, #8]
 801f4cc:	6863      	ldr	r3, [r4, #4]
 801f4ce:	60eb      	str	r3, [r5, #12]
 801f4d0:	2a1b      	cmp	r2, #27
 801f4d2:	d80a      	bhi.n	801f4ea <_realloc_r+0x26e>
 801f4d4:	3408      	adds	r4, #8
 801f4d6:	f105 0010 	add.w	r0, r5, #16
 801f4da:	6823      	ldr	r3, [r4, #0]
 801f4dc:	6003      	str	r3, [r0, #0]
 801f4de:	6863      	ldr	r3, [r4, #4]
 801f4e0:	6043      	str	r3, [r0, #4]
 801f4e2:	68a3      	ldr	r3, [r4, #8]
 801f4e4:	6083      	str	r3, [r0, #8]
 801f4e6:	9f01      	ldr	r7, [sp, #4]
 801f4e8:	e7c8      	b.n	801f47c <_realloc_r+0x200>
 801f4ea:	68a3      	ldr	r3, [r4, #8]
 801f4ec:	612b      	str	r3, [r5, #16]
 801f4ee:	68e3      	ldr	r3, [r4, #12]
 801f4f0:	616b      	str	r3, [r5, #20]
 801f4f2:	2a24      	cmp	r2, #36	@ 0x24
 801f4f4:	bf01      	itttt	eq
 801f4f6:	6923      	ldreq	r3, [r4, #16]
 801f4f8:	61ab      	streq	r3, [r5, #24]
 801f4fa:	6963      	ldreq	r3, [r4, #20]
 801f4fc:	61eb      	streq	r3, [r5, #28]
 801f4fe:	bf19      	ittee	ne
 801f500:	3410      	addne	r4, #16
 801f502:	f105 0018 	addne.w	r0, r5, #24
 801f506:	f105 0020 	addeq.w	r0, r5, #32
 801f50a:	3418      	addeq	r4, #24
 801f50c:	e7e5      	b.n	801f4da <_realloc_r+0x25e>
 801f50e:	4621      	mov	r1, r4
 801f510:	f7fe fc5c 	bl	801ddcc <memmove>
 801f514:	e7e7      	b.n	801f4e6 <_realloc_r+0x26a>
 801f516:	4659      	mov	r1, fp
 801f518:	4650      	mov	r0, sl
 801f51a:	f7fa fdb9 	bl	801a090 <_malloc_r>
 801f51e:	4683      	mov	fp, r0
 801f520:	b918      	cbnz	r0, 801f52a <_realloc_r+0x2ae>
 801f522:	4650      	mov	r0, sl
 801f524:	f7fa fff4 	bl	801a510 <__malloc_unlock>
 801f528:	e6c7      	b.n	801f2ba <_realloc_r+0x3e>
 801f52a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f52e:	f023 0301 	bic.w	r3, r3, #1
 801f532:	444b      	add	r3, r9
 801f534:	f1a0 0208 	sub.w	r2, r0, #8
 801f538:	4293      	cmp	r3, r2
 801f53a:	d107      	bne.n	801f54c <_realloc_r+0x2d0>
 801f53c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801f540:	f027 0703 	bic.w	r7, r7, #3
 801f544:	4437      	add	r7, r6
 801f546:	e6f8      	b.n	801f33a <_realloc_r+0xbe>
 801f548:	20000244 	.word	0x20000244
 801f54c:	1f32      	subs	r2, r6, #4
 801f54e:	2a24      	cmp	r2, #36	@ 0x24
 801f550:	d82d      	bhi.n	801f5ae <_realloc_r+0x332>
 801f552:	2a13      	cmp	r2, #19
 801f554:	d928      	bls.n	801f5a8 <_realloc_r+0x32c>
 801f556:	6823      	ldr	r3, [r4, #0]
 801f558:	6003      	str	r3, [r0, #0]
 801f55a:	6863      	ldr	r3, [r4, #4]
 801f55c:	6043      	str	r3, [r0, #4]
 801f55e:	2a1b      	cmp	r2, #27
 801f560:	d80e      	bhi.n	801f580 <_realloc_r+0x304>
 801f562:	f104 0208 	add.w	r2, r4, #8
 801f566:	f100 0308 	add.w	r3, r0, #8
 801f56a:	6811      	ldr	r1, [r2, #0]
 801f56c:	6019      	str	r1, [r3, #0]
 801f56e:	6851      	ldr	r1, [r2, #4]
 801f570:	6059      	str	r1, [r3, #4]
 801f572:	6892      	ldr	r2, [r2, #8]
 801f574:	609a      	str	r2, [r3, #8]
 801f576:	4621      	mov	r1, r4
 801f578:	4650      	mov	r0, sl
 801f57a:	f7fa fcc9 	bl	8019f10 <_free_r>
 801f57e:	e73f      	b.n	801f400 <_realloc_r+0x184>
 801f580:	68a3      	ldr	r3, [r4, #8]
 801f582:	6083      	str	r3, [r0, #8]
 801f584:	68e3      	ldr	r3, [r4, #12]
 801f586:	60c3      	str	r3, [r0, #12]
 801f588:	2a24      	cmp	r2, #36	@ 0x24
 801f58a:	bf01      	itttt	eq
 801f58c:	6923      	ldreq	r3, [r4, #16]
 801f58e:	6103      	streq	r3, [r0, #16]
 801f590:	6961      	ldreq	r1, [r4, #20]
 801f592:	6141      	streq	r1, [r0, #20]
 801f594:	bf19      	ittee	ne
 801f596:	f104 0210 	addne.w	r2, r4, #16
 801f59a:	f100 0310 	addne.w	r3, r0, #16
 801f59e:	f104 0218 	addeq.w	r2, r4, #24
 801f5a2:	f100 0318 	addeq.w	r3, r0, #24
 801f5a6:	e7e0      	b.n	801f56a <_realloc_r+0x2ee>
 801f5a8:	4603      	mov	r3, r0
 801f5aa:	4622      	mov	r2, r4
 801f5ac:	e7dd      	b.n	801f56a <_realloc_r+0x2ee>
 801f5ae:	4621      	mov	r1, r4
 801f5b0:	f7fe fc0c 	bl	801ddcc <memmove>
 801f5b4:	e7df      	b.n	801f576 <_realloc_r+0x2fa>
 801f5b6:	4637      	mov	r7, r6
 801f5b8:	e6bf      	b.n	801f33a <_realloc_r+0xbe>
 801f5ba:	431f      	orrs	r7, r3
 801f5bc:	f8c9 7004 	str.w	r7, [r9, #4]
 801f5c0:	6853      	ldr	r3, [r2, #4]
 801f5c2:	f043 0301 	orr.w	r3, r3, #1
 801f5c6:	6053      	str	r3, [r2, #4]
 801f5c8:	e6d3      	b.n	801f372 <_realloc_r+0xf6>
 801f5ca:	bf00      	nop

0801f5cc <__ascii_wctomb>:
 801f5cc:	4603      	mov	r3, r0
 801f5ce:	4608      	mov	r0, r1
 801f5d0:	b141      	cbz	r1, 801f5e4 <__ascii_wctomb+0x18>
 801f5d2:	2aff      	cmp	r2, #255	@ 0xff
 801f5d4:	d904      	bls.n	801f5e0 <__ascii_wctomb+0x14>
 801f5d6:	228a      	movs	r2, #138	@ 0x8a
 801f5d8:	601a      	str	r2, [r3, #0]
 801f5da:	f04f 30ff 	mov.w	r0, #4294967295
 801f5de:	4770      	bx	lr
 801f5e0:	700a      	strb	r2, [r1, #0]
 801f5e2:	2001      	movs	r0, #1
 801f5e4:	4770      	bx	lr
	...

0801f5e8 <_wcrtomb_r>:
 801f5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5ea:	4c09      	ldr	r4, [pc, #36]	@ (801f610 <_wcrtomb_r+0x28>)
 801f5ec:	b085      	sub	sp, #20
 801f5ee:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 801f5f2:	4605      	mov	r5, r0
 801f5f4:	461e      	mov	r6, r3
 801f5f6:	b909      	cbnz	r1, 801f5fc <_wcrtomb_r+0x14>
 801f5f8:	460a      	mov	r2, r1
 801f5fa:	a901      	add	r1, sp, #4
 801f5fc:	47b8      	blx	r7
 801f5fe:	1c43      	adds	r3, r0, #1
 801f600:	bf01      	itttt	eq
 801f602:	2300      	moveq	r3, #0
 801f604:	6033      	streq	r3, [r6, #0]
 801f606:	238a      	moveq	r3, #138	@ 0x8a
 801f608:	602b      	streq	r3, [r5, #0]
 801f60a:	b005      	add	sp, #20
 801f60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f60e:	bf00      	nop
 801f610:	2000064c 	.word	0x2000064c

0801f614 <__ssprint_r>:
 801f614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f618:	6893      	ldr	r3, [r2, #8]
 801f61a:	f8d2 b000 	ldr.w	fp, [r2]
 801f61e:	9001      	str	r0, [sp, #4]
 801f620:	460c      	mov	r4, r1
 801f622:	4617      	mov	r7, r2
 801f624:	2b00      	cmp	r3, #0
 801f626:	d157      	bne.n	801f6d8 <__ssprint_r+0xc4>
 801f628:	2000      	movs	r0, #0
 801f62a:	2300      	movs	r3, #0
 801f62c:	607b      	str	r3, [r7, #4]
 801f62e:	b003      	add	sp, #12
 801f630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f634:	e9db a800 	ldrd	sl, r8, [fp]
 801f638:	f10b 0b08 	add.w	fp, fp, #8
 801f63c:	68a6      	ldr	r6, [r4, #8]
 801f63e:	6820      	ldr	r0, [r4, #0]
 801f640:	f1b8 0f00 	cmp.w	r8, #0
 801f644:	d0f6      	beq.n	801f634 <__ssprint_r+0x20>
 801f646:	45b0      	cmp	r8, r6
 801f648:	d32e      	bcc.n	801f6a8 <__ssprint_r+0x94>
 801f64a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f64e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f652:	d029      	beq.n	801f6a8 <__ssprint_r+0x94>
 801f654:	6921      	ldr	r1, [r4, #16]
 801f656:	6965      	ldr	r5, [r4, #20]
 801f658:	eba0 0901 	sub.w	r9, r0, r1
 801f65c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f664:	f109 0001 	add.w	r0, r9, #1
 801f668:	106d      	asrs	r5, r5, #1
 801f66a:	4440      	add	r0, r8
 801f66c:	4285      	cmp	r5, r0
 801f66e:	bf38      	it	cc
 801f670:	4605      	movcc	r5, r0
 801f672:	0553      	lsls	r3, r2, #21
 801f674:	d534      	bpl.n	801f6e0 <__ssprint_r+0xcc>
 801f676:	9801      	ldr	r0, [sp, #4]
 801f678:	4629      	mov	r1, r5
 801f67a:	f7fa fd09 	bl	801a090 <_malloc_r>
 801f67e:	4606      	mov	r6, r0
 801f680:	2800      	cmp	r0, #0
 801f682:	d038      	beq.n	801f6f6 <__ssprint_r+0xe2>
 801f684:	464a      	mov	r2, r9
 801f686:	6921      	ldr	r1, [r4, #16]
 801f688:	f7fa fbce 	bl	8019e28 <memcpy>
 801f68c:	89a2      	ldrh	r2, [r4, #12]
 801f68e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801f692:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801f696:	81a2      	strh	r2, [r4, #12]
 801f698:	6126      	str	r6, [r4, #16]
 801f69a:	6165      	str	r5, [r4, #20]
 801f69c:	444e      	add	r6, r9
 801f69e:	eba5 0509 	sub.w	r5, r5, r9
 801f6a2:	6026      	str	r6, [r4, #0]
 801f6a4:	60a5      	str	r5, [r4, #8]
 801f6a6:	4646      	mov	r6, r8
 801f6a8:	4546      	cmp	r6, r8
 801f6aa:	bf28      	it	cs
 801f6ac:	4646      	movcs	r6, r8
 801f6ae:	4632      	mov	r2, r6
 801f6b0:	4651      	mov	r1, sl
 801f6b2:	6820      	ldr	r0, [r4, #0]
 801f6b4:	f7fe fb8a 	bl	801ddcc <memmove>
 801f6b8:	68a2      	ldr	r2, [r4, #8]
 801f6ba:	1b92      	subs	r2, r2, r6
 801f6bc:	60a2      	str	r2, [r4, #8]
 801f6be:	6822      	ldr	r2, [r4, #0]
 801f6c0:	4432      	add	r2, r6
 801f6c2:	6022      	str	r2, [r4, #0]
 801f6c4:	68ba      	ldr	r2, [r7, #8]
 801f6c6:	eba2 0308 	sub.w	r3, r2, r8
 801f6ca:	44c2      	add	sl, r8
 801f6cc:	60bb      	str	r3, [r7, #8]
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d0aa      	beq.n	801f628 <__ssprint_r+0x14>
 801f6d2:	f04f 0800 	mov.w	r8, #0
 801f6d6:	e7b1      	b.n	801f63c <__ssprint_r+0x28>
 801f6d8:	f04f 0a00 	mov.w	sl, #0
 801f6dc:	46d0      	mov	r8, sl
 801f6de:	e7ad      	b.n	801f63c <__ssprint_r+0x28>
 801f6e0:	9801      	ldr	r0, [sp, #4]
 801f6e2:	462a      	mov	r2, r5
 801f6e4:	f7ff fdca 	bl	801f27c <_realloc_r>
 801f6e8:	4606      	mov	r6, r0
 801f6ea:	2800      	cmp	r0, #0
 801f6ec:	d1d4      	bne.n	801f698 <__ssprint_r+0x84>
 801f6ee:	6921      	ldr	r1, [r4, #16]
 801f6f0:	9801      	ldr	r0, [sp, #4]
 801f6f2:	f7fa fc0d 	bl	8019f10 <_free_r>
 801f6f6:	9a01      	ldr	r2, [sp, #4]
 801f6f8:	230c      	movs	r3, #12
 801f6fa:	6013      	str	r3, [r2, #0]
 801f6fc:	89a3      	ldrh	r3, [r4, #12]
 801f6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f702:	81a3      	strh	r3, [r4, #12]
 801f704:	2300      	movs	r3, #0
 801f706:	60bb      	str	r3, [r7, #8]
 801f708:	f04f 30ff 	mov.w	r0, #4294967295
 801f70c:	e78d      	b.n	801f62a <__ssprint_r+0x16>

0801f70e <__swhatbuf_r>:
 801f70e:	b570      	push	{r4, r5, r6, lr}
 801f710:	460c      	mov	r4, r1
 801f712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f716:	2900      	cmp	r1, #0
 801f718:	b096      	sub	sp, #88	@ 0x58
 801f71a:	4615      	mov	r5, r2
 801f71c:	461e      	mov	r6, r3
 801f71e:	da07      	bge.n	801f730 <__swhatbuf_r+0x22>
 801f720:	89a1      	ldrh	r1, [r4, #12]
 801f722:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801f726:	d117      	bne.n	801f758 <__swhatbuf_r+0x4a>
 801f728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f72c:	4608      	mov	r0, r1
 801f72e:	e00f      	b.n	801f750 <__swhatbuf_r+0x42>
 801f730:	466a      	mov	r2, sp
 801f732:	f000 f899 	bl	801f868 <_fstat_r>
 801f736:	2800      	cmp	r0, #0
 801f738:	dbf2      	blt.n	801f720 <__swhatbuf_r+0x12>
 801f73a:	9901      	ldr	r1, [sp, #4]
 801f73c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f740:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f744:	4259      	negs	r1, r3
 801f746:	4159      	adcs	r1, r3
 801f748:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801f74c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f750:	6031      	str	r1, [r6, #0]
 801f752:	602b      	str	r3, [r5, #0]
 801f754:	b016      	add	sp, #88	@ 0x58
 801f756:	bd70      	pop	{r4, r5, r6, pc}
 801f758:	2100      	movs	r1, #0
 801f75a:	2340      	movs	r3, #64	@ 0x40
 801f75c:	e7e6      	b.n	801f72c <__swhatbuf_r+0x1e>

0801f75e <__smakebuf_r>:
 801f75e:	898b      	ldrh	r3, [r1, #12]
 801f760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f762:	079d      	lsls	r5, r3, #30
 801f764:	4606      	mov	r6, r0
 801f766:	460c      	mov	r4, r1
 801f768:	d507      	bpl.n	801f77a <__smakebuf_r+0x1c>
 801f76a:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 801f76e:	6023      	str	r3, [r4, #0]
 801f770:	6123      	str	r3, [r4, #16]
 801f772:	2301      	movs	r3, #1
 801f774:	6163      	str	r3, [r4, #20]
 801f776:	b003      	add	sp, #12
 801f778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f77a:	ab01      	add	r3, sp, #4
 801f77c:	466a      	mov	r2, sp
 801f77e:	f7ff ffc6 	bl	801f70e <__swhatbuf_r>
 801f782:	9f00      	ldr	r7, [sp, #0]
 801f784:	4605      	mov	r5, r0
 801f786:	4639      	mov	r1, r7
 801f788:	4630      	mov	r0, r6
 801f78a:	f7fa fc81 	bl	801a090 <_malloc_r>
 801f78e:	b948      	cbnz	r0, 801f7a4 <__smakebuf_r+0x46>
 801f790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f794:	059a      	lsls	r2, r3, #22
 801f796:	d4ee      	bmi.n	801f776 <__smakebuf_r+0x18>
 801f798:	f023 0303 	bic.w	r3, r3, #3
 801f79c:	f043 0302 	orr.w	r3, r3, #2
 801f7a0:	81a3      	strh	r3, [r4, #12]
 801f7a2:	e7e2      	b.n	801f76a <__smakebuf_r+0xc>
 801f7a4:	89a3      	ldrh	r3, [r4, #12]
 801f7a6:	6020      	str	r0, [r4, #0]
 801f7a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f7ac:	81a3      	strh	r3, [r4, #12]
 801f7ae:	9b01      	ldr	r3, [sp, #4]
 801f7b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f7b4:	b15b      	cbz	r3, 801f7ce <__smakebuf_r+0x70>
 801f7b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f7ba:	4630      	mov	r0, r6
 801f7bc:	f000 f866 	bl	801f88c <_isatty_r>
 801f7c0:	b128      	cbz	r0, 801f7ce <__smakebuf_r+0x70>
 801f7c2:	89a3      	ldrh	r3, [r4, #12]
 801f7c4:	f023 0303 	bic.w	r3, r3, #3
 801f7c8:	f043 0301 	orr.w	r3, r3, #1
 801f7cc:	81a3      	strh	r3, [r4, #12]
 801f7ce:	89a3      	ldrh	r3, [r4, #12]
 801f7d0:	431d      	orrs	r5, r3
 801f7d2:	81a5      	strh	r5, [r4, #12]
 801f7d4:	e7cf      	b.n	801f776 <__smakebuf_r+0x18>

0801f7d6 <__swbuf_r>:
 801f7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7d8:	460e      	mov	r6, r1
 801f7da:	4614      	mov	r4, r2
 801f7dc:	4605      	mov	r5, r0
 801f7de:	b118      	cbz	r0, 801f7e8 <__swbuf_r+0x12>
 801f7e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801f7e2:	b90b      	cbnz	r3, 801f7e8 <__swbuf_r+0x12>
 801f7e4:	f7fa f9b8 	bl	8019b58 <__sinit>
 801f7e8:	69a3      	ldr	r3, [r4, #24]
 801f7ea:	60a3      	str	r3, [r4, #8]
 801f7ec:	89a3      	ldrh	r3, [r4, #12]
 801f7ee:	0719      	lsls	r1, r3, #28
 801f7f0:	d501      	bpl.n	801f7f6 <__swbuf_r+0x20>
 801f7f2:	6923      	ldr	r3, [r4, #16]
 801f7f4:	b943      	cbnz	r3, 801f808 <__swbuf_r+0x32>
 801f7f6:	4621      	mov	r1, r4
 801f7f8:	4628      	mov	r0, r5
 801f7fa:	f7fe fa27 	bl	801dc4c <__swsetup_r>
 801f7fe:	b118      	cbz	r0, 801f808 <__swbuf_r+0x32>
 801f800:	f04f 37ff 	mov.w	r7, #4294967295
 801f804:	4638      	mov	r0, r7
 801f806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f80c:	b2f6      	uxtb	r6, r6
 801f80e:	049a      	lsls	r2, r3, #18
 801f810:	4637      	mov	r7, r6
 801f812:	d406      	bmi.n	801f822 <__swbuf_r+0x4c>
 801f814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801f818:	81a3      	strh	r3, [r4, #12]
 801f81a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f81c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801f820:	6663      	str	r3, [r4, #100]	@ 0x64
 801f822:	6823      	ldr	r3, [r4, #0]
 801f824:	6922      	ldr	r2, [r4, #16]
 801f826:	1a98      	subs	r0, r3, r2
 801f828:	6963      	ldr	r3, [r4, #20]
 801f82a:	4283      	cmp	r3, r0
 801f82c:	dc05      	bgt.n	801f83a <__swbuf_r+0x64>
 801f82e:	4621      	mov	r1, r4
 801f830:	4628      	mov	r0, r5
 801f832:	f7fe f899 	bl	801d968 <_fflush_r>
 801f836:	2800      	cmp	r0, #0
 801f838:	d1e2      	bne.n	801f800 <__swbuf_r+0x2a>
 801f83a:	68a3      	ldr	r3, [r4, #8]
 801f83c:	3b01      	subs	r3, #1
 801f83e:	60a3      	str	r3, [r4, #8]
 801f840:	6823      	ldr	r3, [r4, #0]
 801f842:	1c5a      	adds	r2, r3, #1
 801f844:	6022      	str	r2, [r4, #0]
 801f846:	701e      	strb	r6, [r3, #0]
 801f848:	6962      	ldr	r2, [r4, #20]
 801f84a:	1c43      	adds	r3, r0, #1
 801f84c:	429a      	cmp	r2, r3
 801f84e:	d004      	beq.n	801f85a <__swbuf_r+0x84>
 801f850:	89a3      	ldrh	r3, [r4, #12]
 801f852:	07db      	lsls	r3, r3, #31
 801f854:	d5d6      	bpl.n	801f804 <__swbuf_r+0x2e>
 801f856:	2e0a      	cmp	r6, #10
 801f858:	d1d4      	bne.n	801f804 <__swbuf_r+0x2e>
 801f85a:	4621      	mov	r1, r4
 801f85c:	4628      	mov	r0, r5
 801f85e:	f7fe f883 	bl	801d968 <_fflush_r>
 801f862:	2800      	cmp	r0, #0
 801f864:	d0ce      	beq.n	801f804 <__swbuf_r+0x2e>
 801f866:	e7cb      	b.n	801f800 <__swbuf_r+0x2a>

0801f868 <_fstat_r>:
 801f868:	b538      	push	{r3, r4, r5, lr}
 801f86a:	4d07      	ldr	r5, [pc, #28]	@ (801f888 <_fstat_r+0x20>)
 801f86c:	2300      	movs	r3, #0
 801f86e:	4604      	mov	r4, r0
 801f870:	4608      	mov	r0, r1
 801f872:	4611      	mov	r1, r2
 801f874:	602b      	str	r3, [r5, #0]
 801f876:	f7e4 fb03 	bl	8003e80 <_fstat>
 801f87a:	1c43      	adds	r3, r0, #1
 801f87c:	d102      	bne.n	801f884 <_fstat_r+0x1c>
 801f87e:	682b      	ldr	r3, [r5, #0]
 801f880:	b103      	cbz	r3, 801f884 <_fstat_r+0x1c>
 801f882:	6023      	str	r3, [r4, #0]
 801f884:	bd38      	pop	{r3, r4, r5, pc}
 801f886:	bf00      	nop
 801f888:	2000cc30 	.word	0x2000cc30

0801f88c <_isatty_r>:
 801f88c:	b538      	push	{r3, r4, r5, lr}
 801f88e:	4d06      	ldr	r5, [pc, #24]	@ (801f8a8 <_isatty_r+0x1c>)
 801f890:	2300      	movs	r3, #0
 801f892:	4604      	mov	r4, r0
 801f894:	4608      	mov	r0, r1
 801f896:	602b      	str	r3, [r5, #0]
 801f898:	f7e4 fb02 	bl	8003ea0 <_isatty>
 801f89c:	1c43      	adds	r3, r0, #1
 801f89e:	d102      	bne.n	801f8a6 <_isatty_r+0x1a>
 801f8a0:	682b      	ldr	r3, [r5, #0]
 801f8a2:	b103      	cbz	r3, 801f8a6 <_isatty_r+0x1a>
 801f8a4:	6023      	str	r3, [r4, #0]
 801f8a6:	bd38      	pop	{r3, r4, r5, pc}
 801f8a8:	2000cc30 	.word	0x2000cc30

0801f8ac <__assert_func>:
 801f8ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f8ae:	4614      	mov	r4, r2
 801f8b0:	461a      	mov	r2, r3
 801f8b2:	4b09      	ldr	r3, [pc, #36]	@ (801f8d8 <__assert_func+0x2c>)
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	4605      	mov	r5, r0
 801f8b8:	68d8      	ldr	r0, [r3, #12]
 801f8ba:	b954      	cbnz	r4, 801f8d2 <__assert_func+0x26>
 801f8bc:	4b07      	ldr	r3, [pc, #28]	@ (801f8dc <__assert_func+0x30>)
 801f8be:	461c      	mov	r4, r3
 801f8c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f8c4:	9100      	str	r1, [sp, #0]
 801f8c6:	462b      	mov	r3, r5
 801f8c8:	4905      	ldr	r1, [pc, #20]	@ (801f8e0 <__assert_func+0x34>)
 801f8ca:	f000 f843 	bl	801f954 <fiprintf>
 801f8ce:	f000 f853 	bl	801f978 <abort>
 801f8d2:	4b04      	ldr	r3, [pc, #16]	@ (801f8e4 <__assert_func+0x38>)
 801f8d4:	e7f4      	b.n	801f8c0 <__assert_func+0x14>
 801f8d6:	bf00      	nop
 801f8d8:	20000114 	.word	0x20000114
 801f8dc:	08020cd4 	.word	0x08020cd4
 801f8e0:	08020ca6 	.word	0x08020ca6
 801f8e4:	08020c99 	.word	0x08020c99

0801f8e8 <_calloc_r>:
 801f8e8:	b538      	push	{r3, r4, r5, lr}
 801f8ea:	fba1 1502 	umull	r1, r5, r1, r2
 801f8ee:	b935      	cbnz	r5, 801f8fe <_calloc_r+0x16>
 801f8f0:	f7fa fbce 	bl	801a090 <_malloc_r>
 801f8f4:	4604      	mov	r4, r0
 801f8f6:	b938      	cbnz	r0, 801f908 <_calloc_r+0x20>
 801f8f8:	2400      	movs	r4, #0
 801f8fa:	4620      	mov	r0, r4
 801f8fc:	bd38      	pop	{r3, r4, r5, pc}
 801f8fe:	f7fa fa65 	bl	8019dcc <__errno>
 801f902:	230c      	movs	r3, #12
 801f904:	6003      	str	r3, [r0, #0]
 801f906:	e7f7      	b.n	801f8f8 <_calloc_r+0x10>
 801f908:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801f90c:	f022 0203 	bic.w	r2, r2, #3
 801f910:	3a04      	subs	r2, #4
 801f912:	2a24      	cmp	r2, #36	@ 0x24
 801f914:	d819      	bhi.n	801f94a <_calloc_r+0x62>
 801f916:	2a13      	cmp	r2, #19
 801f918:	d915      	bls.n	801f946 <_calloc_r+0x5e>
 801f91a:	2a1b      	cmp	r2, #27
 801f91c:	e9c0 5500 	strd	r5, r5, [r0]
 801f920:	d806      	bhi.n	801f930 <_calloc_r+0x48>
 801f922:	f100 0308 	add.w	r3, r0, #8
 801f926:	2200      	movs	r2, #0
 801f928:	e9c3 2200 	strd	r2, r2, [r3]
 801f92c:	609a      	str	r2, [r3, #8]
 801f92e:	e7e4      	b.n	801f8fa <_calloc_r+0x12>
 801f930:	2a24      	cmp	r2, #36	@ 0x24
 801f932:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801f936:	bf11      	iteee	ne
 801f938:	f100 0310 	addne.w	r3, r0, #16
 801f93c:	6105      	streq	r5, [r0, #16]
 801f93e:	f100 0318 	addeq.w	r3, r0, #24
 801f942:	6145      	streq	r5, [r0, #20]
 801f944:	e7ef      	b.n	801f926 <_calloc_r+0x3e>
 801f946:	4603      	mov	r3, r0
 801f948:	e7ed      	b.n	801f926 <_calloc_r+0x3e>
 801f94a:	4629      	mov	r1, r5
 801f94c:	f7fa f9c3 	bl	8019cd6 <memset>
 801f950:	e7d3      	b.n	801f8fa <_calloc_r+0x12>
	...

0801f954 <fiprintf>:
 801f954:	b40e      	push	{r1, r2, r3}
 801f956:	b503      	push	{r0, r1, lr}
 801f958:	4601      	mov	r1, r0
 801f95a:	ab03      	add	r3, sp, #12
 801f95c:	4805      	ldr	r0, [pc, #20]	@ (801f974 <fiprintf+0x20>)
 801f95e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f962:	6800      	ldr	r0, [r0, #0]
 801f964:	9301      	str	r3, [sp, #4]
 801f966:	f7fd fa59 	bl	801ce1c <_vfiprintf_r>
 801f96a:	b002      	add	sp, #8
 801f96c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f970:	b003      	add	sp, #12
 801f972:	4770      	bx	lr
 801f974:	20000114 	.word	0x20000114

0801f978 <abort>:
 801f978:	b508      	push	{r3, lr}
 801f97a:	2006      	movs	r0, #6
 801f97c:	f000 f82c 	bl	801f9d8 <raise>
 801f980:	2001      	movs	r0, #1
 801f982:	f7e4 fa2d 	bl	8003de0 <_exit>

0801f986 <_raise_r>:
 801f986:	291f      	cmp	r1, #31
 801f988:	b538      	push	{r3, r4, r5, lr}
 801f98a:	4605      	mov	r5, r0
 801f98c:	460c      	mov	r4, r1
 801f98e:	d904      	bls.n	801f99a <_raise_r+0x14>
 801f990:	2316      	movs	r3, #22
 801f992:	6003      	str	r3, [r0, #0]
 801f994:	f04f 30ff 	mov.w	r0, #4294967295
 801f998:	bd38      	pop	{r3, r4, r5, pc}
 801f99a:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 801f99e:	b112      	cbz	r2, 801f9a6 <_raise_r+0x20>
 801f9a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f9a4:	b94b      	cbnz	r3, 801f9ba <_raise_r+0x34>
 801f9a6:	4628      	mov	r0, r5
 801f9a8:	f000 f830 	bl	801fa0c <_getpid_r>
 801f9ac:	4622      	mov	r2, r4
 801f9ae:	4601      	mov	r1, r0
 801f9b0:	4628      	mov	r0, r5
 801f9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f9b6:	f000 b817 	b.w	801f9e8 <_kill_r>
 801f9ba:	2b01      	cmp	r3, #1
 801f9bc:	d00a      	beq.n	801f9d4 <_raise_r+0x4e>
 801f9be:	1c59      	adds	r1, r3, #1
 801f9c0:	d103      	bne.n	801f9ca <_raise_r+0x44>
 801f9c2:	2316      	movs	r3, #22
 801f9c4:	6003      	str	r3, [r0, #0]
 801f9c6:	2001      	movs	r0, #1
 801f9c8:	e7e6      	b.n	801f998 <_raise_r+0x12>
 801f9ca:	2100      	movs	r1, #0
 801f9cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	4798      	blx	r3
 801f9d4:	2000      	movs	r0, #0
 801f9d6:	e7df      	b.n	801f998 <_raise_r+0x12>

0801f9d8 <raise>:
 801f9d8:	4b02      	ldr	r3, [pc, #8]	@ (801f9e4 <raise+0xc>)
 801f9da:	4601      	mov	r1, r0
 801f9dc:	6818      	ldr	r0, [r3, #0]
 801f9de:	f7ff bfd2 	b.w	801f986 <_raise_r>
 801f9e2:	bf00      	nop
 801f9e4:	20000114 	.word	0x20000114

0801f9e8 <_kill_r>:
 801f9e8:	b538      	push	{r3, r4, r5, lr}
 801f9ea:	4d07      	ldr	r5, [pc, #28]	@ (801fa08 <_kill_r+0x20>)
 801f9ec:	2300      	movs	r3, #0
 801f9ee:	4604      	mov	r4, r0
 801f9f0:	4608      	mov	r0, r1
 801f9f2:	4611      	mov	r1, r2
 801f9f4:	602b      	str	r3, [r5, #0]
 801f9f6:	f7e4 f9e3 	bl	8003dc0 <_kill>
 801f9fa:	1c43      	adds	r3, r0, #1
 801f9fc:	d102      	bne.n	801fa04 <_kill_r+0x1c>
 801f9fe:	682b      	ldr	r3, [r5, #0]
 801fa00:	b103      	cbz	r3, 801fa04 <_kill_r+0x1c>
 801fa02:	6023      	str	r3, [r4, #0]
 801fa04:	bd38      	pop	{r3, r4, r5, pc}
 801fa06:	bf00      	nop
 801fa08:	2000cc30 	.word	0x2000cc30

0801fa0c <_getpid_r>:
 801fa0c:	f7e4 b9d0 	b.w	8003db0 <_getpid>

0801fa10 <atan2>:
 801fa10:	f000 b906 	b.w	801fc20 <__ieee754_atan2>

0801fa14 <sqrt>:
 801fa14:	b538      	push	{r3, r4, r5, lr}
 801fa16:	ed2d 8b02 	vpush	{d8}
 801fa1a:	ec55 4b10 	vmov	r4, r5, d0
 801fa1e:	f000 f825 	bl	801fa6c <__ieee754_sqrt>
 801fa22:	4622      	mov	r2, r4
 801fa24:	462b      	mov	r3, r5
 801fa26:	4620      	mov	r0, r4
 801fa28:	4629      	mov	r1, r5
 801fa2a:	eeb0 8a40 	vmov.f32	s16, s0
 801fa2e:	eef0 8a60 	vmov.f32	s17, s1
 801fa32:	f7e1 f87b 	bl	8000b2c <__aeabi_dcmpun>
 801fa36:	b990      	cbnz	r0, 801fa5e <sqrt+0x4a>
 801fa38:	2200      	movs	r2, #0
 801fa3a:	2300      	movs	r3, #0
 801fa3c:	4620      	mov	r0, r4
 801fa3e:	4629      	mov	r1, r5
 801fa40:	f7e1 f84c 	bl	8000adc <__aeabi_dcmplt>
 801fa44:	b158      	cbz	r0, 801fa5e <sqrt+0x4a>
 801fa46:	f7fa f9c1 	bl	8019dcc <__errno>
 801fa4a:	2321      	movs	r3, #33	@ 0x21
 801fa4c:	6003      	str	r3, [r0, #0]
 801fa4e:	2200      	movs	r2, #0
 801fa50:	2300      	movs	r3, #0
 801fa52:	4610      	mov	r0, r2
 801fa54:	4619      	mov	r1, r3
 801fa56:	f7e0 fef9 	bl	800084c <__aeabi_ddiv>
 801fa5a:	ec41 0b18 	vmov	d8, r0, r1
 801fa5e:	eeb0 0a48 	vmov.f32	s0, s16
 801fa62:	eef0 0a68 	vmov.f32	s1, s17
 801fa66:	ecbd 8b02 	vpop	{d8}
 801fa6a:	bd38      	pop	{r3, r4, r5, pc}

0801fa6c <__ieee754_sqrt>:
 801fa6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa70:	4a68      	ldr	r2, [pc, #416]	@ (801fc14 <__ieee754_sqrt+0x1a8>)
 801fa72:	ec55 4b10 	vmov	r4, r5, d0
 801fa76:	43aa      	bics	r2, r5
 801fa78:	462b      	mov	r3, r5
 801fa7a:	4621      	mov	r1, r4
 801fa7c:	d110      	bne.n	801faa0 <__ieee754_sqrt+0x34>
 801fa7e:	4622      	mov	r2, r4
 801fa80:	4620      	mov	r0, r4
 801fa82:	4629      	mov	r1, r5
 801fa84:	f7e0 fdb8 	bl	80005f8 <__aeabi_dmul>
 801fa88:	4602      	mov	r2, r0
 801fa8a:	460b      	mov	r3, r1
 801fa8c:	4620      	mov	r0, r4
 801fa8e:	4629      	mov	r1, r5
 801fa90:	f7e0 fbfc 	bl	800028c <__adddf3>
 801fa94:	4604      	mov	r4, r0
 801fa96:	460d      	mov	r5, r1
 801fa98:	ec45 4b10 	vmov	d0, r4, r5
 801fa9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faa0:	2d00      	cmp	r5, #0
 801faa2:	dc0e      	bgt.n	801fac2 <__ieee754_sqrt+0x56>
 801faa4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801faa8:	4322      	orrs	r2, r4
 801faaa:	d0f5      	beq.n	801fa98 <__ieee754_sqrt+0x2c>
 801faac:	b19d      	cbz	r5, 801fad6 <__ieee754_sqrt+0x6a>
 801faae:	4622      	mov	r2, r4
 801fab0:	4620      	mov	r0, r4
 801fab2:	4629      	mov	r1, r5
 801fab4:	f7e0 fbe8 	bl	8000288 <__aeabi_dsub>
 801fab8:	4602      	mov	r2, r0
 801faba:	460b      	mov	r3, r1
 801fabc:	f7e0 fec6 	bl	800084c <__aeabi_ddiv>
 801fac0:	e7e8      	b.n	801fa94 <__ieee754_sqrt+0x28>
 801fac2:	152a      	asrs	r2, r5, #20
 801fac4:	d115      	bne.n	801faf2 <__ieee754_sqrt+0x86>
 801fac6:	2000      	movs	r0, #0
 801fac8:	e009      	b.n	801fade <__ieee754_sqrt+0x72>
 801faca:	0acb      	lsrs	r3, r1, #11
 801facc:	3a15      	subs	r2, #21
 801face:	0549      	lsls	r1, r1, #21
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d0fa      	beq.n	801faca <__ieee754_sqrt+0x5e>
 801fad4:	e7f7      	b.n	801fac6 <__ieee754_sqrt+0x5a>
 801fad6:	462a      	mov	r2, r5
 801fad8:	e7fa      	b.n	801fad0 <__ieee754_sqrt+0x64>
 801fada:	005b      	lsls	r3, r3, #1
 801fadc:	3001      	adds	r0, #1
 801fade:	02dc      	lsls	r4, r3, #11
 801fae0:	d5fb      	bpl.n	801fada <__ieee754_sqrt+0x6e>
 801fae2:	1e44      	subs	r4, r0, #1
 801fae4:	1b12      	subs	r2, r2, r4
 801fae6:	f1c0 0420 	rsb	r4, r0, #32
 801faea:	fa21 f404 	lsr.w	r4, r1, r4
 801faee:	4323      	orrs	r3, r4
 801faf0:	4081      	lsls	r1, r0
 801faf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801faf6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fafa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fafe:	07d2      	lsls	r2, r2, #31
 801fb00:	bf5c      	itt	pl
 801fb02:	005b      	lslpl	r3, r3, #1
 801fb04:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fb08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fb0c:	bf58      	it	pl
 801fb0e:	0049      	lslpl	r1, r1, #1
 801fb10:	2600      	movs	r6, #0
 801fb12:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fb16:	106d      	asrs	r5, r5, #1
 801fb18:	0049      	lsls	r1, r1, #1
 801fb1a:	2016      	movs	r0, #22
 801fb1c:	4632      	mov	r2, r6
 801fb1e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fb22:	1917      	adds	r7, r2, r4
 801fb24:	429f      	cmp	r7, r3
 801fb26:	bfde      	ittt	le
 801fb28:	193a      	addle	r2, r7, r4
 801fb2a:	1bdb      	suble	r3, r3, r7
 801fb2c:	1936      	addle	r6, r6, r4
 801fb2e:	0fcf      	lsrs	r7, r1, #31
 801fb30:	3801      	subs	r0, #1
 801fb32:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fb36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fb3a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fb3e:	d1f0      	bne.n	801fb22 <__ieee754_sqrt+0xb6>
 801fb40:	4604      	mov	r4, r0
 801fb42:	2720      	movs	r7, #32
 801fb44:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fb48:	429a      	cmp	r2, r3
 801fb4a:	eb00 0e0c 	add.w	lr, r0, ip
 801fb4e:	db02      	blt.n	801fb56 <__ieee754_sqrt+0xea>
 801fb50:	d113      	bne.n	801fb7a <__ieee754_sqrt+0x10e>
 801fb52:	458e      	cmp	lr, r1
 801fb54:	d811      	bhi.n	801fb7a <__ieee754_sqrt+0x10e>
 801fb56:	f1be 0f00 	cmp.w	lr, #0
 801fb5a:	eb0e 000c 	add.w	r0, lr, ip
 801fb5e:	da42      	bge.n	801fbe6 <__ieee754_sqrt+0x17a>
 801fb60:	2800      	cmp	r0, #0
 801fb62:	db40      	blt.n	801fbe6 <__ieee754_sqrt+0x17a>
 801fb64:	f102 0801 	add.w	r8, r2, #1
 801fb68:	1a9b      	subs	r3, r3, r2
 801fb6a:	458e      	cmp	lr, r1
 801fb6c:	bf88      	it	hi
 801fb6e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fb72:	eba1 010e 	sub.w	r1, r1, lr
 801fb76:	4464      	add	r4, ip
 801fb78:	4642      	mov	r2, r8
 801fb7a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fb7e:	3f01      	subs	r7, #1
 801fb80:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fb84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fb88:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fb8c:	d1dc      	bne.n	801fb48 <__ieee754_sqrt+0xdc>
 801fb8e:	4319      	orrs	r1, r3
 801fb90:	d01b      	beq.n	801fbca <__ieee754_sqrt+0x15e>
 801fb92:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fc18 <__ieee754_sqrt+0x1ac>
 801fb96:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fc1c <__ieee754_sqrt+0x1b0>
 801fb9a:	e9da 0100 	ldrd	r0, r1, [sl]
 801fb9e:	e9db 2300 	ldrd	r2, r3, [fp]
 801fba2:	f7e0 fb71 	bl	8000288 <__aeabi_dsub>
 801fba6:	e9da 8900 	ldrd	r8, r9, [sl]
 801fbaa:	4602      	mov	r2, r0
 801fbac:	460b      	mov	r3, r1
 801fbae:	4640      	mov	r0, r8
 801fbb0:	4649      	mov	r1, r9
 801fbb2:	f7e0 ff9d 	bl	8000af0 <__aeabi_dcmple>
 801fbb6:	b140      	cbz	r0, 801fbca <__ieee754_sqrt+0x15e>
 801fbb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fbbc:	e9da 0100 	ldrd	r0, r1, [sl]
 801fbc0:	e9db 2300 	ldrd	r2, r3, [fp]
 801fbc4:	d111      	bne.n	801fbea <__ieee754_sqrt+0x17e>
 801fbc6:	3601      	adds	r6, #1
 801fbc8:	463c      	mov	r4, r7
 801fbca:	1072      	asrs	r2, r6, #1
 801fbcc:	0863      	lsrs	r3, r4, #1
 801fbce:	07f1      	lsls	r1, r6, #31
 801fbd0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fbd4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fbd8:	bf48      	it	mi
 801fbda:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fbde:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fbe2:	4618      	mov	r0, r3
 801fbe4:	e756      	b.n	801fa94 <__ieee754_sqrt+0x28>
 801fbe6:	4690      	mov	r8, r2
 801fbe8:	e7be      	b.n	801fb68 <__ieee754_sqrt+0xfc>
 801fbea:	f7e0 fb4f 	bl	800028c <__adddf3>
 801fbee:	e9da 8900 	ldrd	r8, r9, [sl]
 801fbf2:	4602      	mov	r2, r0
 801fbf4:	460b      	mov	r3, r1
 801fbf6:	4640      	mov	r0, r8
 801fbf8:	4649      	mov	r1, r9
 801fbfa:	f7e0 ff6f 	bl	8000adc <__aeabi_dcmplt>
 801fbfe:	b120      	cbz	r0, 801fc0a <__ieee754_sqrt+0x19e>
 801fc00:	1ca0      	adds	r0, r4, #2
 801fc02:	bf08      	it	eq
 801fc04:	3601      	addeq	r6, #1
 801fc06:	3402      	adds	r4, #2
 801fc08:	e7df      	b.n	801fbca <__ieee754_sqrt+0x15e>
 801fc0a:	1c63      	adds	r3, r4, #1
 801fc0c:	f023 0401 	bic.w	r4, r3, #1
 801fc10:	e7db      	b.n	801fbca <__ieee754_sqrt+0x15e>
 801fc12:	bf00      	nop
 801fc14:	7ff00000 	.word	0x7ff00000
 801fc18:	200007c0 	.word	0x200007c0
 801fc1c:	200007b8 	.word	0x200007b8

0801fc20 <__ieee754_atan2>:
 801fc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc24:	ec57 6b11 	vmov	r6, r7, d1
 801fc28:	4273      	negs	r3, r6
 801fc2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801fda8 <__ieee754_atan2+0x188>
 801fc2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801fc32:	4333      	orrs	r3, r6
 801fc34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801fc38:	4543      	cmp	r3, r8
 801fc3a:	ec51 0b10 	vmov	r0, r1, d0
 801fc3e:	4635      	mov	r5, r6
 801fc40:	d809      	bhi.n	801fc56 <__ieee754_atan2+0x36>
 801fc42:	4244      	negs	r4, r0
 801fc44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801fc48:	4304      	orrs	r4, r0
 801fc4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801fc4e:	4544      	cmp	r4, r8
 801fc50:	468e      	mov	lr, r1
 801fc52:	4681      	mov	r9, r0
 801fc54:	d907      	bls.n	801fc66 <__ieee754_atan2+0x46>
 801fc56:	4632      	mov	r2, r6
 801fc58:	463b      	mov	r3, r7
 801fc5a:	f7e0 fb17 	bl	800028c <__adddf3>
 801fc5e:	ec41 0b10 	vmov	d0, r0, r1
 801fc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801fc6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801fc6e:	4334      	orrs	r4, r6
 801fc70:	d103      	bne.n	801fc7a <__ieee754_atan2+0x5a>
 801fc72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc76:	f000 b89b 	b.w	801fdb0 <atan>
 801fc7a:	17bc      	asrs	r4, r7, #30
 801fc7c:	f004 0402 	and.w	r4, r4, #2
 801fc80:	ea53 0909 	orrs.w	r9, r3, r9
 801fc84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801fc88:	d107      	bne.n	801fc9a <__ieee754_atan2+0x7a>
 801fc8a:	2c02      	cmp	r4, #2
 801fc8c:	d05f      	beq.n	801fd4e <__ieee754_atan2+0x12e>
 801fc8e:	2c03      	cmp	r4, #3
 801fc90:	d1e5      	bne.n	801fc5e <__ieee754_atan2+0x3e>
 801fc92:	a141      	add	r1, pc, #260	@ (adr r1, 801fd98 <__ieee754_atan2+0x178>)
 801fc94:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc98:	e7e1      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fc9a:	4315      	orrs	r5, r2
 801fc9c:	d106      	bne.n	801fcac <__ieee754_atan2+0x8c>
 801fc9e:	f1be 0f00 	cmp.w	lr, #0
 801fca2:	da5f      	bge.n	801fd64 <__ieee754_atan2+0x144>
 801fca4:	a13e      	add	r1, pc, #248	@ (adr r1, 801fda0 <__ieee754_atan2+0x180>)
 801fca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fcaa:	e7d8      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fcac:	4542      	cmp	r2, r8
 801fcae:	d10f      	bne.n	801fcd0 <__ieee754_atan2+0xb0>
 801fcb0:	4293      	cmp	r3, r2
 801fcb2:	f104 34ff 	add.w	r4, r4, #4294967295
 801fcb6:	d107      	bne.n	801fcc8 <__ieee754_atan2+0xa8>
 801fcb8:	2c02      	cmp	r4, #2
 801fcba:	d84c      	bhi.n	801fd56 <__ieee754_atan2+0x136>
 801fcbc:	4b34      	ldr	r3, [pc, #208]	@ (801fd90 <__ieee754_atan2+0x170>)
 801fcbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fcc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fcc6:	e7ca      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fcc8:	2c02      	cmp	r4, #2
 801fcca:	d848      	bhi.n	801fd5e <__ieee754_atan2+0x13e>
 801fccc:	4b31      	ldr	r3, [pc, #196]	@ (801fd94 <__ieee754_atan2+0x174>)
 801fcce:	e7f6      	b.n	801fcbe <__ieee754_atan2+0x9e>
 801fcd0:	4543      	cmp	r3, r8
 801fcd2:	d0e4      	beq.n	801fc9e <__ieee754_atan2+0x7e>
 801fcd4:	1a9b      	subs	r3, r3, r2
 801fcd6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801fcda:	ea4f 5223 	mov.w	r2, r3, asr #20
 801fcde:	da1e      	bge.n	801fd1e <__ieee754_atan2+0xfe>
 801fce0:	2f00      	cmp	r7, #0
 801fce2:	da01      	bge.n	801fce8 <__ieee754_atan2+0xc8>
 801fce4:	323c      	adds	r2, #60	@ 0x3c
 801fce6:	db1e      	blt.n	801fd26 <__ieee754_atan2+0x106>
 801fce8:	4632      	mov	r2, r6
 801fcea:	463b      	mov	r3, r7
 801fcec:	f7e0 fdae 	bl	800084c <__aeabi_ddiv>
 801fcf0:	ec41 0b10 	vmov	d0, r0, r1
 801fcf4:	f000 f9f4 	bl	80200e0 <fabs>
 801fcf8:	f000 f85a 	bl	801fdb0 <atan>
 801fcfc:	ec51 0b10 	vmov	r0, r1, d0
 801fd00:	2c01      	cmp	r4, #1
 801fd02:	d013      	beq.n	801fd2c <__ieee754_atan2+0x10c>
 801fd04:	2c02      	cmp	r4, #2
 801fd06:	d015      	beq.n	801fd34 <__ieee754_atan2+0x114>
 801fd08:	2c00      	cmp	r4, #0
 801fd0a:	d0a8      	beq.n	801fc5e <__ieee754_atan2+0x3e>
 801fd0c:	a318      	add	r3, pc, #96	@ (adr r3, 801fd70 <__ieee754_atan2+0x150>)
 801fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd12:	f7e0 fab9 	bl	8000288 <__aeabi_dsub>
 801fd16:	a318      	add	r3, pc, #96	@ (adr r3, 801fd78 <__ieee754_atan2+0x158>)
 801fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd1c:	e014      	b.n	801fd48 <__ieee754_atan2+0x128>
 801fd1e:	a118      	add	r1, pc, #96	@ (adr r1, 801fd80 <__ieee754_atan2+0x160>)
 801fd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd24:	e7ec      	b.n	801fd00 <__ieee754_atan2+0xe0>
 801fd26:	2000      	movs	r0, #0
 801fd28:	2100      	movs	r1, #0
 801fd2a:	e7e9      	b.n	801fd00 <__ieee754_atan2+0xe0>
 801fd2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fd30:	4619      	mov	r1, r3
 801fd32:	e794      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fd34:	a30e      	add	r3, pc, #56	@ (adr r3, 801fd70 <__ieee754_atan2+0x150>)
 801fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd3a:	f7e0 faa5 	bl	8000288 <__aeabi_dsub>
 801fd3e:	4602      	mov	r2, r0
 801fd40:	460b      	mov	r3, r1
 801fd42:	a10d      	add	r1, pc, #52	@ (adr r1, 801fd78 <__ieee754_atan2+0x158>)
 801fd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd48:	f7e0 fa9e 	bl	8000288 <__aeabi_dsub>
 801fd4c:	e787      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fd4e:	a10a      	add	r1, pc, #40	@ (adr r1, 801fd78 <__ieee754_atan2+0x158>)
 801fd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd54:	e783      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fd56:	a10c      	add	r1, pc, #48	@ (adr r1, 801fd88 <__ieee754_atan2+0x168>)
 801fd58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd5c:	e77f      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fd5e:	2000      	movs	r0, #0
 801fd60:	2100      	movs	r1, #0
 801fd62:	e77c      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fd64:	a106      	add	r1, pc, #24	@ (adr r1, 801fd80 <__ieee754_atan2+0x160>)
 801fd66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd6a:	e778      	b.n	801fc5e <__ieee754_atan2+0x3e>
 801fd6c:	f3af 8000 	nop.w
 801fd70:	33145c07 	.word	0x33145c07
 801fd74:	3ca1a626 	.word	0x3ca1a626
 801fd78:	54442d18 	.word	0x54442d18
 801fd7c:	400921fb 	.word	0x400921fb
 801fd80:	54442d18 	.word	0x54442d18
 801fd84:	3ff921fb 	.word	0x3ff921fb
 801fd88:	54442d18 	.word	0x54442d18
 801fd8c:	3fe921fb 	.word	0x3fe921fb
 801fd90:	08020cf0 	.word	0x08020cf0
 801fd94:	08020cd8 	.word	0x08020cd8
 801fd98:	54442d18 	.word	0x54442d18
 801fd9c:	c00921fb 	.word	0xc00921fb
 801fda0:	54442d18 	.word	0x54442d18
 801fda4:	bff921fb 	.word	0xbff921fb
 801fda8:	7ff00000 	.word	0x7ff00000
 801fdac:	00000000 	.word	0x00000000

0801fdb0 <atan>:
 801fdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdb4:	ec55 4b10 	vmov	r4, r5, d0
 801fdb8:	4bbf      	ldr	r3, [pc, #764]	@ (80200b8 <atan+0x308>)
 801fdba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801fdbe:	429e      	cmp	r6, r3
 801fdc0:	46ab      	mov	fp, r5
 801fdc2:	d918      	bls.n	801fdf6 <atan+0x46>
 801fdc4:	4bbd      	ldr	r3, [pc, #756]	@ (80200bc <atan+0x30c>)
 801fdc6:	429e      	cmp	r6, r3
 801fdc8:	d801      	bhi.n	801fdce <atan+0x1e>
 801fdca:	d109      	bne.n	801fde0 <atan+0x30>
 801fdcc:	b144      	cbz	r4, 801fde0 <atan+0x30>
 801fdce:	4622      	mov	r2, r4
 801fdd0:	462b      	mov	r3, r5
 801fdd2:	4620      	mov	r0, r4
 801fdd4:	4629      	mov	r1, r5
 801fdd6:	f7e0 fa59 	bl	800028c <__adddf3>
 801fdda:	4604      	mov	r4, r0
 801fddc:	460d      	mov	r5, r1
 801fdde:	e006      	b.n	801fdee <atan+0x3e>
 801fde0:	f1bb 0f00 	cmp.w	fp, #0
 801fde4:	f340 812b 	ble.w	802003e <atan+0x28e>
 801fde8:	a597      	add	r5, pc, #604	@ (adr r5, 8020048 <atan+0x298>)
 801fdea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801fdee:	ec45 4b10 	vmov	d0, r4, r5
 801fdf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdf6:	4bb2      	ldr	r3, [pc, #712]	@ (80200c0 <atan+0x310>)
 801fdf8:	429e      	cmp	r6, r3
 801fdfa:	d813      	bhi.n	801fe24 <atan+0x74>
 801fdfc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801fe00:	429e      	cmp	r6, r3
 801fe02:	d80c      	bhi.n	801fe1e <atan+0x6e>
 801fe04:	a392      	add	r3, pc, #584	@ (adr r3, 8020050 <atan+0x2a0>)
 801fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe0a:	4620      	mov	r0, r4
 801fe0c:	4629      	mov	r1, r5
 801fe0e:	f7e0 fa3d 	bl	800028c <__adddf3>
 801fe12:	4bac      	ldr	r3, [pc, #688]	@ (80200c4 <atan+0x314>)
 801fe14:	2200      	movs	r2, #0
 801fe16:	f7e0 fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 801fe1a:	2800      	cmp	r0, #0
 801fe1c:	d1e7      	bne.n	801fdee <atan+0x3e>
 801fe1e:	f04f 3aff 	mov.w	sl, #4294967295
 801fe22:	e029      	b.n	801fe78 <atan+0xc8>
 801fe24:	f000 f95c 	bl	80200e0 <fabs>
 801fe28:	4ba7      	ldr	r3, [pc, #668]	@ (80200c8 <atan+0x318>)
 801fe2a:	429e      	cmp	r6, r3
 801fe2c:	ec55 4b10 	vmov	r4, r5, d0
 801fe30:	f200 80bc 	bhi.w	801ffac <atan+0x1fc>
 801fe34:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801fe38:	429e      	cmp	r6, r3
 801fe3a:	f200 809e 	bhi.w	801ff7a <atan+0x1ca>
 801fe3e:	4622      	mov	r2, r4
 801fe40:	462b      	mov	r3, r5
 801fe42:	4620      	mov	r0, r4
 801fe44:	4629      	mov	r1, r5
 801fe46:	f7e0 fa21 	bl	800028c <__adddf3>
 801fe4a:	4b9e      	ldr	r3, [pc, #632]	@ (80200c4 <atan+0x314>)
 801fe4c:	2200      	movs	r2, #0
 801fe4e:	f7e0 fa1b 	bl	8000288 <__aeabi_dsub>
 801fe52:	2200      	movs	r2, #0
 801fe54:	4606      	mov	r6, r0
 801fe56:	460f      	mov	r7, r1
 801fe58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801fe5c:	4620      	mov	r0, r4
 801fe5e:	4629      	mov	r1, r5
 801fe60:	f7e0 fa14 	bl	800028c <__adddf3>
 801fe64:	4602      	mov	r2, r0
 801fe66:	460b      	mov	r3, r1
 801fe68:	4630      	mov	r0, r6
 801fe6a:	4639      	mov	r1, r7
 801fe6c:	f7e0 fcee 	bl	800084c <__aeabi_ddiv>
 801fe70:	f04f 0a00 	mov.w	sl, #0
 801fe74:	4604      	mov	r4, r0
 801fe76:	460d      	mov	r5, r1
 801fe78:	4622      	mov	r2, r4
 801fe7a:	462b      	mov	r3, r5
 801fe7c:	4620      	mov	r0, r4
 801fe7e:	4629      	mov	r1, r5
 801fe80:	f7e0 fbba 	bl	80005f8 <__aeabi_dmul>
 801fe84:	4602      	mov	r2, r0
 801fe86:	460b      	mov	r3, r1
 801fe88:	4680      	mov	r8, r0
 801fe8a:	4689      	mov	r9, r1
 801fe8c:	f7e0 fbb4 	bl	80005f8 <__aeabi_dmul>
 801fe90:	a371      	add	r3, pc, #452	@ (adr r3, 8020058 <atan+0x2a8>)
 801fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe96:	4606      	mov	r6, r0
 801fe98:	460f      	mov	r7, r1
 801fe9a:	f7e0 fbad 	bl	80005f8 <__aeabi_dmul>
 801fe9e:	a370      	add	r3, pc, #448	@ (adr r3, 8020060 <atan+0x2b0>)
 801fea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea4:	f7e0 f9f2 	bl	800028c <__adddf3>
 801fea8:	4632      	mov	r2, r6
 801feaa:	463b      	mov	r3, r7
 801feac:	f7e0 fba4 	bl	80005f8 <__aeabi_dmul>
 801feb0:	a36d      	add	r3, pc, #436	@ (adr r3, 8020068 <atan+0x2b8>)
 801feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feb6:	f7e0 f9e9 	bl	800028c <__adddf3>
 801feba:	4632      	mov	r2, r6
 801febc:	463b      	mov	r3, r7
 801febe:	f7e0 fb9b 	bl	80005f8 <__aeabi_dmul>
 801fec2:	a36b      	add	r3, pc, #428	@ (adr r3, 8020070 <atan+0x2c0>)
 801fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fec8:	f7e0 f9e0 	bl	800028c <__adddf3>
 801fecc:	4632      	mov	r2, r6
 801fece:	463b      	mov	r3, r7
 801fed0:	f7e0 fb92 	bl	80005f8 <__aeabi_dmul>
 801fed4:	a368      	add	r3, pc, #416	@ (adr r3, 8020078 <atan+0x2c8>)
 801fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feda:	f7e0 f9d7 	bl	800028c <__adddf3>
 801fede:	4632      	mov	r2, r6
 801fee0:	463b      	mov	r3, r7
 801fee2:	f7e0 fb89 	bl	80005f8 <__aeabi_dmul>
 801fee6:	a366      	add	r3, pc, #408	@ (adr r3, 8020080 <atan+0x2d0>)
 801fee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feec:	f7e0 f9ce 	bl	800028c <__adddf3>
 801fef0:	4642      	mov	r2, r8
 801fef2:	464b      	mov	r3, r9
 801fef4:	f7e0 fb80 	bl	80005f8 <__aeabi_dmul>
 801fef8:	a363      	add	r3, pc, #396	@ (adr r3, 8020088 <atan+0x2d8>)
 801fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fefe:	4680      	mov	r8, r0
 801ff00:	4689      	mov	r9, r1
 801ff02:	4630      	mov	r0, r6
 801ff04:	4639      	mov	r1, r7
 801ff06:	f7e0 fb77 	bl	80005f8 <__aeabi_dmul>
 801ff0a:	a361      	add	r3, pc, #388	@ (adr r3, 8020090 <atan+0x2e0>)
 801ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff10:	f7e0 f9ba 	bl	8000288 <__aeabi_dsub>
 801ff14:	4632      	mov	r2, r6
 801ff16:	463b      	mov	r3, r7
 801ff18:	f7e0 fb6e 	bl	80005f8 <__aeabi_dmul>
 801ff1c:	a35e      	add	r3, pc, #376	@ (adr r3, 8020098 <atan+0x2e8>)
 801ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff22:	f7e0 f9b1 	bl	8000288 <__aeabi_dsub>
 801ff26:	4632      	mov	r2, r6
 801ff28:	463b      	mov	r3, r7
 801ff2a:	f7e0 fb65 	bl	80005f8 <__aeabi_dmul>
 801ff2e:	a35c      	add	r3, pc, #368	@ (adr r3, 80200a0 <atan+0x2f0>)
 801ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff34:	f7e0 f9a8 	bl	8000288 <__aeabi_dsub>
 801ff38:	4632      	mov	r2, r6
 801ff3a:	463b      	mov	r3, r7
 801ff3c:	f7e0 fb5c 	bl	80005f8 <__aeabi_dmul>
 801ff40:	a359      	add	r3, pc, #356	@ (adr r3, 80200a8 <atan+0x2f8>)
 801ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff46:	f7e0 f99f 	bl	8000288 <__aeabi_dsub>
 801ff4a:	4632      	mov	r2, r6
 801ff4c:	463b      	mov	r3, r7
 801ff4e:	f7e0 fb53 	bl	80005f8 <__aeabi_dmul>
 801ff52:	4602      	mov	r2, r0
 801ff54:	460b      	mov	r3, r1
 801ff56:	4640      	mov	r0, r8
 801ff58:	4649      	mov	r1, r9
 801ff5a:	f7e0 f997 	bl	800028c <__adddf3>
 801ff5e:	4622      	mov	r2, r4
 801ff60:	462b      	mov	r3, r5
 801ff62:	f7e0 fb49 	bl	80005f8 <__aeabi_dmul>
 801ff66:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ff6a:	4602      	mov	r2, r0
 801ff6c:	460b      	mov	r3, r1
 801ff6e:	d148      	bne.n	8020002 <atan+0x252>
 801ff70:	4620      	mov	r0, r4
 801ff72:	4629      	mov	r1, r5
 801ff74:	f7e0 f988 	bl	8000288 <__aeabi_dsub>
 801ff78:	e72f      	b.n	801fdda <atan+0x2a>
 801ff7a:	4b52      	ldr	r3, [pc, #328]	@ (80200c4 <atan+0x314>)
 801ff7c:	2200      	movs	r2, #0
 801ff7e:	4620      	mov	r0, r4
 801ff80:	4629      	mov	r1, r5
 801ff82:	f7e0 f981 	bl	8000288 <__aeabi_dsub>
 801ff86:	4b4f      	ldr	r3, [pc, #316]	@ (80200c4 <atan+0x314>)
 801ff88:	4606      	mov	r6, r0
 801ff8a:	460f      	mov	r7, r1
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	4620      	mov	r0, r4
 801ff90:	4629      	mov	r1, r5
 801ff92:	f7e0 f97b 	bl	800028c <__adddf3>
 801ff96:	4602      	mov	r2, r0
 801ff98:	460b      	mov	r3, r1
 801ff9a:	4630      	mov	r0, r6
 801ff9c:	4639      	mov	r1, r7
 801ff9e:	f7e0 fc55 	bl	800084c <__aeabi_ddiv>
 801ffa2:	f04f 0a01 	mov.w	sl, #1
 801ffa6:	4604      	mov	r4, r0
 801ffa8:	460d      	mov	r5, r1
 801ffaa:	e765      	b.n	801fe78 <atan+0xc8>
 801ffac:	4b47      	ldr	r3, [pc, #284]	@ (80200cc <atan+0x31c>)
 801ffae:	429e      	cmp	r6, r3
 801ffb0:	d21c      	bcs.n	801ffec <atan+0x23c>
 801ffb2:	4b47      	ldr	r3, [pc, #284]	@ (80200d0 <atan+0x320>)
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	4620      	mov	r0, r4
 801ffb8:	4629      	mov	r1, r5
 801ffba:	f7e0 f965 	bl	8000288 <__aeabi_dsub>
 801ffbe:	4b44      	ldr	r3, [pc, #272]	@ (80200d0 <atan+0x320>)
 801ffc0:	4606      	mov	r6, r0
 801ffc2:	460f      	mov	r7, r1
 801ffc4:	2200      	movs	r2, #0
 801ffc6:	4620      	mov	r0, r4
 801ffc8:	4629      	mov	r1, r5
 801ffca:	f7e0 fb15 	bl	80005f8 <__aeabi_dmul>
 801ffce:	4b3d      	ldr	r3, [pc, #244]	@ (80200c4 <atan+0x314>)
 801ffd0:	2200      	movs	r2, #0
 801ffd2:	f7e0 f95b 	bl	800028c <__adddf3>
 801ffd6:	4602      	mov	r2, r0
 801ffd8:	460b      	mov	r3, r1
 801ffda:	4630      	mov	r0, r6
 801ffdc:	4639      	mov	r1, r7
 801ffde:	f7e0 fc35 	bl	800084c <__aeabi_ddiv>
 801ffe2:	f04f 0a02 	mov.w	sl, #2
 801ffe6:	4604      	mov	r4, r0
 801ffe8:	460d      	mov	r5, r1
 801ffea:	e745      	b.n	801fe78 <atan+0xc8>
 801ffec:	4622      	mov	r2, r4
 801ffee:	462b      	mov	r3, r5
 801fff0:	4938      	ldr	r1, [pc, #224]	@ (80200d4 <atan+0x324>)
 801fff2:	2000      	movs	r0, #0
 801fff4:	f7e0 fc2a 	bl	800084c <__aeabi_ddiv>
 801fff8:	f04f 0a03 	mov.w	sl, #3
 801fffc:	4604      	mov	r4, r0
 801fffe:	460d      	mov	r5, r1
 8020000:	e73a      	b.n	801fe78 <atan+0xc8>
 8020002:	4b35      	ldr	r3, [pc, #212]	@ (80200d8 <atan+0x328>)
 8020004:	4e35      	ldr	r6, [pc, #212]	@ (80200dc <atan+0x32c>)
 8020006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802000e:	f7e0 f93b 	bl	8000288 <__aeabi_dsub>
 8020012:	4622      	mov	r2, r4
 8020014:	462b      	mov	r3, r5
 8020016:	f7e0 f937 	bl	8000288 <__aeabi_dsub>
 802001a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 802001e:	4602      	mov	r2, r0
 8020020:	460b      	mov	r3, r1
 8020022:	e9d6 0100 	ldrd	r0, r1, [r6]
 8020026:	f7e0 f92f 	bl	8000288 <__aeabi_dsub>
 802002a:	f1bb 0f00 	cmp.w	fp, #0
 802002e:	4604      	mov	r4, r0
 8020030:	460d      	mov	r5, r1
 8020032:	f6bf aedc 	bge.w	801fdee <atan+0x3e>
 8020036:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802003a:	461d      	mov	r5, r3
 802003c:	e6d7      	b.n	801fdee <atan+0x3e>
 802003e:	a51c      	add	r5, pc, #112	@ (adr r5, 80200b0 <atan+0x300>)
 8020040:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020044:	e6d3      	b.n	801fdee <atan+0x3e>
 8020046:	bf00      	nop
 8020048:	54442d18 	.word	0x54442d18
 802004c:	3ff921fb 	.word	0x3ff921fb
 8020050:	8800759c 	.word	0x8800759c
 8020054:	7e37e43c 	.word	0x7e37e43c
 8020058:	e322da11 	.word	0xe322da11
 802005c:	3f90ad3a 	.word	0x3f90ad3a
 8020060:	24760deb 	.word	0x24760deb
 8020064:	3fa97b4b 	.word	0x3fa97b4b
 8020068:	a0d03d51 	.word	0xa0d03d51
 802006c:	3fb10d66 	.word	0x3fb10d66
 8020070:	c54c206e 	.word	0xc54c206e
 8020074:	3fb745cd 	.word	0x3fb745cd
 8020078:	920083ff 	.word	0x920083ff
 802007c:	3fc24924 	.word	0x3fc24924
 8020080:	5555550d 	.word	0x5555550d
 8020084:	3fd55555 	.word	0x3fd55555
 8020088:	2c6a6c2f 	.word	0x2c6a6c2f
 802008c:	bfa2b444 	.word	0xbfa2b444
 8020090:	52defd9a 	.word	0x52defd9a
 8020094:	3fadde2d 	.word	0x3fadde2d
 8020098:	af749a6d 	.word	0xaf749a6d
 802009c:	3fb3b0f2 	.word	0x3fb3b0f2
 80200a0:	fe231671 	.word	0xfe231671
 80200a4:	3fbc71c6 	.word	0x3fbc71c6
 80200a8:	9998ebc4 	.word	0x9998ebc4
 80200ac:	3fc99999 	.word	0x3fc99999
 80200b0:	54442d18 	.word	0x54442d18
 80200b4:	bff921fb 	.word	0xbff921fb
 80200b8:	440fffff 	.word	0x440fffff
 80200bc:	7ff00000 	.word	0x7ff00000
 80200c0:	3fdbffff 	.word	0x3fdbffff
 80200c4:	3ff00000 	.word	0x3ff00000
 80200c8:	3ff2ffff 	.word	0x3ff2ffff
 80200cc:	40038000 	.word	0x40038000
 80200d0:	3ff80000 	.word	0x3ff80000
 80200d4:	bff00000 	.word	0xbff00000
 80200d8:	08020d08 	.word	0x08020d08
 80200dc:	08020d28 	.word	0x08020d28

080200e0 <fabs>:
 80200e0:	ec51 0b10 	vmov	r0, r1, d0
 80200e4:	4602      	mov	r2, r0
 80200e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80200ea:	ec43 2b10 	vmov	d0, r2, r3
 80200ee:	4770      	bx	lr

080200f0 <_init>:
 80200f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200f2:	bf00      	nop
 80200f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200f6:	bc08      	pop	{r3}
 80200f8:	469e      	mov	lr, r3
 80200fa:	4770      	bx	lr

080200fc <_fini>:
 80200fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200fe:	bf00      	nop
 8020100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020102:	bc08      	pop	{r3}
 8020104:	469e      	mov	lr, r3
 8020106:	4770      	bx	lr
